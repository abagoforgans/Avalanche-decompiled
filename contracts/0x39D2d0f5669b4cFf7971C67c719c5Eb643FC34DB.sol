contract main {




// =====================  Runtime code  =====================


#
#  - withdraw(uint256 arg1, uint256 arg2)
#
address owner;
address priceFeedAddress;
uint8 stor2; offset 160
uint128 stor2; offset 160
address sub_9b6ae214Address;
address tokenAddress;
address stor4;
address cronAddress;
address sub_4fce3a47Address;
address stor7;
uint256 stor8;
uint256 stor9;
uint256 stor10;
address farmerAddress;
uint256 sub_93c63140;
array of struct stor13;
uint256 stor14;
uint256 stor15;
mapping of struct sub_e128cca9;
uint256 sub_2445aefb;
array of struct stor18;
uint256 stor19;
uint256 stor20;
mapping of uint8 stor21;
uint256 investorCount;
uint256 sub_a14ed18a;
uint256 stor24;
uint256 stor25;
uint16 farmerRewardFee;
uint16 sub_1048fbf8; offset 16
uint16 teamRewardFee; offset 32
uint256 harvestFeeAmount;
uint256 depositFee;
uint8 stor30;
uint8 paused; offset 8
mapping of struct stor31;
mapping of uint256 balanceOf;
mapping of uint256 allowance;
uint256 _totalSupply;
uint8 _decimals;
array of uint256 _symbol;
array of uint256 _name;

function sub_0254be91(?) payable {
    return bool(uint8(stor2.field_160))
}

function name() payable {
    return _name[0 len _name.length]
}

function getDepositFee() payable {
    return depositFee
}

function sub_1048fbf8(?) payable {
    return sub_1048fbf8
}

function getTokenAddress() payable {
    return tokenAddress
}

function getFarmerRewardFee() payable {
    return farmerRewardFee
}

function totalSupply() payable {
    return _totalSupply
}

function sub_2060cf34(?) payable {
    require calldata.size - 4 >= 32
    if not arg1:
        revert with 0, 'Not valid address'
    return bool(stor21[address(arg1)])
}

function getToken() payable {
    return tokenAddress
}

function sub_2445aefb(?) payable {
    return sub_2445aefb
}

function getFarmerAddress() payable {
    return farmerAddress
}

function decimals() payable {
    return _decimals
}

function _decimals() payable {
    return _decimals
}

function _totalSupply() payable {
    return _totalSupply
}

function sub_4fce3a47(?) payable {
    return sub_4fce3a47Address
}

function paused() payable {
    return bool(paused)
}

function balanceOf(address arg1) payable {
    require calldata.size - 4 >= 32
    return balanceOf[address(arg1)]
}

function getOwner() payable {
    return owner
}

function sub_8a02775b(?) payable {
    return sub_a14ed18a
}

function owner() payable {
    return owner
}

function getCronAddress() payable {
    return cronAddress
}

function sub_93c63140(?) payable {
    return sub_93c63140
}

function symbol() payable {
    return _symbol[0 len _symbol.length]
}

function getInvestorCount() payable {
    return investorCount
}

function sub_9b6ae214(?) payable {
    return sub_9b6ae214Address
}

function getPriceFeed() payable {
    return priceFeedAddress
}

function sub_a14ed18a(?) payable {
    return sub_a14ed18a
}

function _symbol() payable {
    return _symbol[0 len _symbol.length]
}

function getTeamRewardFee() payable {
    return teamRewardFee
}

function getHarvestFeeAmount() payable {
    return harvestFeeAmount
}

function _name() payable {
    return _name[0 len _name.length]
}

function allowance(address arg1, address arg2) payable {
    require calldata.size - 4 >= 64
    return allowance[address(arg1)][address(arg2)]
}

function sub_e128cca9(?) payable {
    require calldata.size - 4 >= 32
    if not arg1:
        revert with 0, 'Not valid address'
    return sub_e128cca9[address(arg1)].field_256, sub_e128cca9[address(arg1)].field_512
}

function _fallback() payable {
    revert
}

function sub_d01be2b8(?) payable {
    return stor14, stor15
}

function sub_ebb6b5b0(?) payable {
    return stor19, stor20
}

function getinvestedAmountWithReward() payable {
    return (sub_a14ed18a + stor14)
}

function getTotalInvestAmount() payable {
    if stor14 + stor8 < stor8:
        revert with 0, 'SafeMath: addition overflow'
    return (stor14 + stor8)
}

function getTotalInvestAmountInUSD() payable {
    if stor15 + stor9 < stor9:
        revert with 0, 'SafeMath: addition overflow'
    return (stor15 + stor9)
}

function renounceOwnership() payable {
    if owner != msg.sender:
        revert with 0, 'wOwnable: caller is not the owne'
    emit OwnershipTransferred(owner, 0);
    owner = 0
}

function sub_c7f6a942(?) payable {
    require calldata.size - 4 >= 32
    if farmerAddress != msg.sender:
        revert with 0, 'LPool: caller is not the farmer'
    stor25 = arg1
}

function sub_9a01126c(?) payable {
    require calldata.size - 4 >= 32
    if owner != msg.sender:
        revert with 0, 'wOwnable: caller is not the owne'
    sub_9b6ae214Address = arg1
}

function setTokenAddress(address arg1) payable {
    require calldata.size - 4 >= 32
    if owner != msg.sender:
        revert with 0, 'wOwnable: caller is not the owne'
    tokenAddress = arg1
}

function setPriceFeed(address arg1) payable {
    require calldata.size - 4 >= 32
    if owner != msg.sender:
        revert with 0, 'wOwnable: caller is not the owne'
    priceFeedAddress = arg1
}

function setReferralReward(uint16 arg1) payable {
    require calldata.size - 4 >= 32
    if owner != msg.sender:
        revert with 0, 'wOwnable: caller is not the owne'
    sub_1048fbf8 = arg1
}

function updateTeamReward(uint16 arg1) payable {
    require calldata.size - 4 >= 32
    if owner != msg.sender:
        revert with 0, 'wOwnable: caller is not the owne'
    teamRewardFee = arg1
}

function updateFarmerReward(uint16 arg1) payable {
    require calldata.size - 4 >= 32
    if owner != msg.sender:
        revert with 0, 'wOwnable: caller is not the owne'
    farmerRewardFee = arg1
}

function updateDepositeFeeAmount(uint256 arg1) payable {
    require calldata.size - 4 >= 32
    if owner != msg.sender:
        revert with 0, 'wOwnable: caller is not the owne'
    depositFee = arg1
}

function sub_9680bddb(?) payable {
    require calldata.size - 4 >= 64
    if farmerAddress != msg.sender:
        revert with 0, 'LPool: caller is not the farmer'
    stor24 = arg1
    sub_a14ed18a = arg2
}

function setReferralEnabled(bool arg1) payable {
    require calldata.size - 4 >= 32
    if owner != msg.sender:
        revert with 0, 'wOwnable: caller is not the owne'
    Mask(96, 0, stor2.field_160) = Mask(96, 0, arg1)
}

function _pause() payable {
    if paused:
        revert with 0, 'Pool: paused'
    if owner != msg.sender:
        if cronAddress != msg.sender:
            revert with 0, 'Pool: Invalid Operation'
    paused = 1
    emit Paused(msg.sender);
}

function setTeamAddress(address arg1) payable {
    require calldata.size - 4 >= 32
    if not arg1:
        revert with 0, 'Not valid address'
    if owner != msg.sender:
        revert with 0, 'wOwnable: caller is not the owne'
    stor4 = arg1
}

function setCronAddress(address arg1) payable {
    require calldata.size - 4 >= 32
    if not arg1:
        revert with 0, 'Not valid address'
    if owner != msg.sender:
        revert with 0, 'wOwnable: caller is not the owne'
    cronAddress = arg1
}

function _unpause() payable {
    if not paused:
        revert with 0, 'Pool: not paused'
    if owner != msg.sender:
        if cronAddress != msg.sender:
            revert with 0, 'Pool: Invalid Operation'
    paused = 0
    emit Unpaused(msg.sender);
}

function setFarmerAddress(address arg1) payable {
    require calldata.size - 4 >= 32
    if not arg1:
        revert with 0, 'Not valid address'
    if owner != msg.sender:
        revert with 0, 'wOwnable: caller is not the owne'
    farmerAddress = arg1
}

function sub_c07c2acf(?) payable {
    require calldata.size - 4 >= 32
    if farmerAddress != msg.sender:
        revert with 0, 'LPool: caller is not the farmer'
    if arg1 <= 0:
        revert with 0, '_totalPoolValue must be non-zero'
    sub_a14ed18a = arg1
}

function sub_0ea96f26(?) payable {
    require calldata.size - 4 >= 32
    if not arg1:
        revert with 0, 'Not valid address'
    if owner != msg.sender:
        revert with 0, 'wOwnable: caller is not the owne'
    sub_4fce3a47Address = arg1
    stor7 = arg1
}

function isInvestor(address arg1) payable {
    require calldata.size - 4 >= 32
    if not arg1:
        revert with 0, 'Not valid address'
    if stor31[address(arg1)].field_0:
        return bool(stor31[address(arg1)].field_0)
    return bool(sub_e128cca9[address(arg1)].field_256)
}

function getUserInvestedAmount(address arg1) payable {
    require calldata.size - 4 >= 32
    if not arg1:
        revert with 0, 'Not valid address'
    if sub_e128cca9[address(arg1)].field_256 + stor31[address(arg1)].field_256 < stor31[address(arg1)].field_256:
        revert with 0, 'SafeMath: addition overflow'
    return (sub_e128cca9[address(arg1)].field_256 + stor31[address(arg1)].field_256)
}

function getUserInvestedAmountInUSD(address arg1) payable {
    require calldata.size - 4 >= 32
    if not arg1:
        revert with 0, 'Not valid address'
    if sub_e128cca9[address(arg1)].field_512 + stor31[address(arg1)].field_512 < stor31[address(arg1)].field_512:
        revert with 0, 'SafeMath: addition overflow'
    return (sub_e128cca9[address(arg1)].field_512 + stor31[address(arg1)].field_512)
}

function sub_b122dcbb(?) payable {
    if stor30:
        revert with 0, 'No re-entrancy'
    stor30 = 1
    if farmerAddress != msg.sender:
        revert with 0, 'LPool: caller is not the farmer'
    paused = 1
    require ext_code.size(tokenAddress)
    call tokenAddress.0xa9059cbb with:
         gas gas_remaining wei
        args msg.sender, stor14
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    stor30 = 0
}

function transferOwnership(address arg1) payable {
    require calldata.size - 4 >= 32
    if owner != msg.sender:
        revert with 0, 'wOwnable: caller is not the owne'
    if not arg1:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    38,
                    0x734f776e61626c653a206e6577206f776e657220697320746865207a65726f20616464726573,
                    mem[202 len 26]
    emit OwnershipTransferred(owner, arg1);
    owner = arg1
}

function calcLPToken(uint256 arg1) payable {
    require calldata.size - 4 >= 32
    if _totalSupply <= 0:
        return arg1
    if not arg1:
        if not sub_a14ed18a:
            revert with 0, 'SafeMath: division by zero'
        return (0 / sub_a14ed18a)
    if _totalSupply * arg1 / arg1 != _totalSupply:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    33,
                    0x1f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                    mem[197 len 31]
    if not sub_a14ed18a:
        revert with 0, 'SafeMath: division by zero'
    return (_totalSupply * arg1 / sub_a14ed18a)
}

function sub_6c29d3f7(?) payable {
    if stor13.length:
        mem[128] = address(stor13.field_0)
        if (32 * stor13.length) + 32 > 64:
            mem[160] = address(stor13.field_256)
            idx = 160
            s = 1
            while (32 * stor13.length) + 96 > idx:
                mem[idx + 32] = stor13[s].field_256
                idx = idx + 32
                s = s + 1
                continue 
    mem[(32 * stor13.length) + 128] = 32
    mem[(32 * stor13.length) + 160] = stor13.length
    mem[(32 * stor13.length) + 192 len floor32(stor13.length)] = mem[128 len floor32(stor13.length)]
    return memory
      from (32 * stor13.length) + 128
       len (96 * stor13.length) + 64
}

function approve(address arg1, uint256 arg2) payable {
    require calldata.size - 4 >= 64
    if not msg.sender:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    36,
                    0x7342455032303a20617070726f76652066726f6d20746865207a65726f20616464726573,
                    mem[200 len 28]
    if not arg1:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    34,
                    0x6542455032303a20617070726f766520746f20746865207a65726f20616464726573,
                    mem[198 len 30]
    allowance[address(msg.sender)][address(arg1)] = arg2
    emit Approval(arg2, msg.sender, arg1);
    return 1
}

function sub_62243096(?) payable {
    if farmerAddress != msg.sender:
        revert with 0, 'LPool: caller is not the farmer'
    require ext_code.size(tokenAddress)
    staticcall tokenAddress.0x70a08231 with:
            gas gas_remaining wei
           args this.address
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if stor14 > ext_call.return_data[0]:
        revert with 0, 'SafeMath: subtraction overflow'
    require ext_code.size(tokenAddress)
    call tokenAddress.0xa9059cbb with:
         gas gas_remaining wei
        args msg.sender, ext_call.return_data[0] - stor14
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
}

function getInvestorClaimableAmount(address arg1) payable {
    require calldata.size - 4 >= 32
    if not arg1:
        revert with 0, 'Not valid address'
    if not balanceOf[address(arg1)]:
        return 0
    if not sub_a14ed18a:
        if not _totalSupply:
            revert with 0, 'SafeMath: division by zero'
        return (0 / _totalSupply)
    if balanceOf[address(arg1)] * sub_a14ed18a / sub_a14ed18a != balanceOf[address(arg1)]:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    33,
                    0x1f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                    mem[197 len 31]
    if not _totalSupply:
        revert with 0, 'SafeMath: division by zero'
    return (balanceOf[address(arg1)] * sub_a14ed18a / _totalSupply)
}

function sub_3c6ed3aa(?) payable {
    if not stor18.length:
        mem[(32 * stor18.length) + 128] = 32
        mem[(32 * stor18.length) + 160] = stor18.length
        mem[(32 * stor18.length) + 192 len floor32(stor18.length)] = mem[128 len floor32(stor18.length)]
        return memory
          from (32 * stor18.length) + 128
           len (96 * stor18.length) + 64
    mem[128] = address(stor18.field_0)
    idx = 128
    s = 0
    while (32 * stor18.length) + 96 > idx:
        mem[idx + 32] = stor18[s].field_256
        idx = idx + 32
        s = s + 1
        continue 
    mem[(32 * stor18.length) + 192 len floor32(stor18.length)] = mem[128 len floor32(stor18.length)]
    return Array(len=stor18.length, data=mem[128 len floor32(stor18.length)], mem[(32 * stor18.length) + floor32(stor18.length) + 192 len (32 * stor18.length) - floor32(stor18.length)]), 
}

function transfer(address arg1, uint256 arg2) payable {
    require calldata.size - 4 >= 64
    if not msg.sender:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    37,
                    0x7442455032303a207472616e736665722066726f6d20746865207a65726f20616464726573,
                    mem[201 len 27]
    if not arg1:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    35,
                    0x6542455032303a207472616e7366657220746f20746865207a65726f20616464726573,
                    mem[199 len 29]
    if arg2 > balanceOf[address(msg.sender)]:
        revert with 0, 
                    32,
                    38,
                    0x7242455032303a207472616e7366657220616d6f756e7420657863656564732062616c616e63,
                    mem[166 len 26],
                    mem[218 len 6]
    balanceOf[address(msg.sender)] -= arg2
    if arg2 + balanceOf[arg1] < balanceOf[arg1]:
        revert with 0, 'SafeMath: addition overflow'
    balanceOf[address(arg1)] = arg2 + balanceOf[arg1]
    emit Transfer(arg2, msg.sender, arg1);
    return 1
}

function transferFrom(address arg1, address arg2, uint256 arg3) payable {
    require calldata.size - 4 >= 96
    if not arg1:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    37,
                    0x7442455032303a207472616e736665722066726f6d20746865207a65726f20616464726573,
                    mem[201 len 27]
    if not arg2:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    35,
                    0x6542455032303a207472616e7366657220746f20746865207a65726f20616464726573,
                    mem[199 len 29]
    if arg3 > balanceOf[address(arg1)]:
        revert with 0, 
                    32,
                    38,
                    0x7242455032303a207472616e7366657220616d6f756e7420657863656564732062616c616e63,
                    mem[166 len 26],
                    mem[218 len 6]
    balanceOf[address(arg1)] -= arg3
    if arg3 + balanceOf[arg2] < balanceOf[arg2]:
        revert with 0, 'SafeMath: addition overflow'
    balanceOf[address(arg2)] = arg3 + balanceOf[arg2]
    emit Transfer(arg3, arg1, arg2);
    if arg3 > allowance[address(arg1)][address(msg.sender)]:
        revert with 0, 
                    32,
                    40,
                    0x42455032303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e6300,
                    mem[264 len 24],
                    mem[312 len 8]
    if not arg1:
        revert with 0, 32, 36, 0x7342455032303a20617070726f76652066726f6d20746865207a65726f20616464726573, mem[392 len 28]
    if not msg.sender:
        revert with 0, 32, 34, 0x6542455032303a20617070726f766520746f20746865207a65726f20616464726573, mem[390 len 30]
    allowance[address(arg1)][address(msg.sender)] -= arg3
    emit Approval((allowance[address(arg1)][address(msg.sender)] - arg3), arg1, msg.sender);
    return 1
}

function sub_59b4e866(?) payable {
    require calldata.size - 4 >= 64
    require arg2 <= 4294967296
    require arg2 + 36 <= calldata.size
    require arg2.length <= 4294967296 and arg2 + arg2.length + 36 <= calldata.size
    if paused:
        revert with 0, 'Pool: paused'
    if stor30:
        revert with 0, 'No re-entrancy'
    stor30 = 1
    if not arg1:
        revert with 0, 
                    32,
                    36,
                    0x73504f4f4c3a20746f6b656e20616d6f756e742073686f756c64206265206e6f6e7a6572,
                    mem[ceil32(arg2.length) + 232 len 28]
    require ext_code.size(tokenAddress)
    call tokenAddress.0x23b872dd with:
         gas gas_remaining wei
        args msg.sender, address(this.address), arg1
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if not ext_call.return_data[0]:
        revert with 0, 
                    32,
                    57,
                    0x73504f4f4c3a20546f6b656e207472616e73666572206661696c65642077696c6c206465706f736974696e6720546f6b656e20696e20504f4f,
                    mem[ceil32(arg2.length) + 253 len 7]
    if not sub_e128cca9[address(msg.sender)].field_256:
        sub_93c63140++
        stor13.length++
        stor13[stor13.length].field_0 = msg.sender
        if not stor31[address(msg.sender)].field_256:
            investorCount++
    require ext_code.size(priceFeedAddress)
    staticcall priceFeedAddress.0xc91935fa with:
            gas gas_remaining wei
           args tokenAddress
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if not ext_call.return_data[0]:
        revert with 0, 'failed to get price in USD'
    if arg1 * ext_call.return_data[0] / ext_call.return_data[0] != arg1:
        revert with 0, 32, 33, 0x1f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[ceil32(arg2.length) + 229 len 31]
    if arg1 * ext_call.return_data[0] / 10^18 <= 0:
        revert with 0, 'failed to get price in USD'
    sub_e128cca9[address(msg.sender)].field_256 += arg1
    sub_e128cca9[address(msg.sender)].field_512 += arg1 * ext_call.return_data[0] / 10^18
    stor14 += arg1
    stor15 += arg1 * ext_call.return_data[0] / 10^18
    emit 0x15059b9a: arg1, msg.sender
    stor30 = 0
}

function depositLiquidity(uint256 arg1) payable {
    require calldata.size - 4 >= 32
    if paused:
        revert with 0, 'Pool: paused'
    if stor30:
        revert with 0, 'No re-entrancy'
    stor30 = 1
    if not arg1:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    36,
                    0x73504f4f4c3a20746f6b656e20616d6f756e742073686f756c64206265206e6f6e7a6572,
                    mem[200 len 28]
    require ext_code.size(tokenAddress)
    call tokenAddress.0x23b872dd with:
         gas gas_remaining wei
        args msg.sender, address(this.address), arg1
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if not ext_call.return_data[0]:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    57,
                    0x73504f4f4c3a20546f6b656e207472616e73666572206661696c65642077696c6c206465706f736974696e6720546f6b656e20696e20504f4f,
                    mem[221 len 7]
    if not sub_e128cca9[address(msg.sender)].field_256:
        sub_93c63140++
        stor13.length++
        stor13[stor13.length].field_0 = msg.sender
        if not stor31[address(msg.sender)].field_256:
            investorCount++
    require ext_code.size(priceFeedAddress)
    staticcall priceFeedAddress.0xc91935fa with:
            gas gas_remaining wei
           args tokenAddress
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if not ext_call.return_data[0]:
        revert with 0, 'failed to get price in USD'
    if arg1 * ext_call.return_data[0] / ext_call.return_data[0] != arg1:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    33,
                    0x1f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                    mem[197 len 31]
    if arg1 * ext_call.return_data[0] / 10^18 <= 0:
        revert with 0, 'failed to get price in USD'
    sub_e128cca9[address(msg.sender)].field_256 += arg1
    sub_e128cca9[address(msg.sender)].field_512 += arg1 * ext_call.return_data[0] / 10^18
    stor14 += arg1
    stor15 += arg1 * ext_call.return_data[0] / 10^18
    emit 0x15059b9a: arg1, msg.sender
    stor30 = 0
}

function getFinalClaimableAmount(address arg1) payable {
    require calldata.size - 4 >= 32
    if not arg1:
        revert with 0, 'Not valid address'
    if not balanceOf[address(arg1)]:
        return sub_e128cca9[address(arg1)].field_256
    if not sub_a14ed18a:
        if not _totalSupply:
            revert with 0, 'SafeMath: division by zero'
        if 0 / _totalSupply <= stor31[address(arg1)].field_256:
            return (sub_e128cca9[address(arg1)].field_256 + (0 / _totalSupply))
        if not (0 / _totalSupply) - stor31[address(arg1)].field_256:
            return (sub_e128cca9[address(arg1)].field_256 + (0 / _totalSupply))
        if not (0 / _totalSupply) - stor31[address(arg1)].field_256:
            if 0 > 0 / _totalSupply:
                revert with 0, 'SafeMath: subtraction overflow'
            return (sub_e128cca9[address(arg1)].field_256 + (0 / _totalSupply))
        if (0 / _totalSupply * uint16(teamRewardFee + farmerRewardFee)) - (stor31[address(arg1)].field_256 * uint16(teamRewardFee + farmerRewardFee)) / (0 / _totalSupply) - stor31[address(arg1)].field_256 != uint16(teamRewardFee + farmerRewardFee):
            revert with 0, 32, 33, 0x1f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
        if (0 / _totalSupply * uint16(teamRewardFee + farmerRewardFee)) - (stor31[address(arg1)].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000 > 0 / _totalSupply:
            revert with 0, 'SafeMath: subtraction overflow'
        return (sub_e128cca9[address(arg1)].field_256 + (0 / _totalSupply) - ((0 / _totalSupply * uint16(teamRewardFee + farmerRewardFee)) - (stor31[address(arg1)].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000))
    if balanceOf[address(arg1)] * sub_a14ed18a / sub_a14ed18a != balanceOf[address(arg1)]:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    33,
                    0x1f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                    mem[197 len 31]
    if not _totalSupply:
        revert with 0, 'SafeMath: division by zero'
    if balanceOf[address(arg1)] * sub_a14ed18a / _totalSupply <= stor31[address(arg1)].field_256:
        return (sub_e128cca9[address(arg1)].field_256 + (balanceOf[address(arg1)] * sub_a14ed18a / _totalSupply))
    if not (balanceOf[address(arg1)] * sub_a14ed18a / _totalSupply) - stor31[address(arg1)].field_256:
        return (sub_e128cca9[address(arg1)].field_256 + (balanceOf[address(arg1)] * sub_a14ed18a / _totalSupply))
    if not (balanceOf[address(arg1)] * sub_a14ed18a / _totalSupply) - stor31[address(arg1)].field_256:
        if 0 > balanceOf[address(arg1)] * sub_a14ed18a / _totalSupply:
            revert with 0, 'SafeMath: subtraction overflow'
        return (sub_e128cca9[address(arg1)].field_256 + (balanceOf[address(arg1)] * sub_a14ed18a / _totalSupply))
    if (balanceOf[address(arg1)] * sub_a14ed18a / _totalSupply * uint16(teamRewardFee + farmerRewardFee)) - (stor31[address(arg1)].field_256 * uint16(teamRewardFee + farmerRewardFee)) / (balanceOf[address(arg1)] * sub_a14ed18a / _totalSupply) - stor31[address(arg1)].field_256 != uint16(teamRewardFee + farmerRewardFee):
        revert with 0, 32, 33, 0x1f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
    if (balanceOf[address(arg1)] * sub_a14ed18a / _totalSupply * uint16(teamRewardFee + farmerRewardFee)) - (stor31[address(arg1)].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000 > balanceOf[address(arg1)] * sub_a14ed18a / _totalSupply:
        revert with 0, 'SafeMath: subtraction overflow'
    return (sub_e128cca9[address(arg1)].field_256 + (balanceOf[address(arg1)] * sub_a14ed18a / _totalSupply) - ((balanceOf[address(arg1)] * sub_a14ed18a / _totalSupply * uint16(teamRewardFee + farmerRewardFee)) - (stor31[address(arg1)].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000))
}

function sub_ece0186d(?) payable {
    mem[64] = 96
    require calldata.size - 4 >= 64
    if farmerAddress != msg.sender:
        revert with 0, 'LPool: caller is not the farmer'
    if not stor13.length:
        revert with 0, 'POOL: Nothing to invest'
    idx = 0
    s = arg1
    while idx < stor13.length:
        mem[0] = stor13[idx].field_0
        mem[32] = 16
        require stor14
        if _totalSupply <= 0:
            stor14 -= sub_e128cca9[stor13[idx].field_0].field_256
            if not stor13[idx].field_0:
                revert with 0, 'BEP20: mint to the zero address'
            if sub_e128cca9[stor13[idx].field_0].field_256 + _totalSupply < _totalSupply:
                revert with 0, 'SafeMath: addition overflow'
            _totalSupply += sub_e128cca9[stor13[idx].field_0].field_256
            if sub_e128cca9[stor13[idx].field_0].field_256 + balanceOf[stor13[idx].field_0] < balanceOf[stor13[idx].field_0]:
                revert with 0, 'SafeMath: addition overflow'
            balanceOf[stor13[idx].field_0] += sub_e128cca9[stor13[idx].field_0].field_256
            mem[mem[64]] = sub_e128cca9[stor13[idx].field_0].field_256
            emit Transfer(sub_e128cca9[stor13[idx].field_0].field_256, 0, stor13[idx].field_0);
        else:
            if not (arg2 * sub_e128cca9[stor13[idx].field_0].field_256) - (s * sub_e128cca9[stor13[idx].field_0].field_256) / stor14:
                _88 = mem[64]
                mem[64] = mem[64] + 64
                mem[_88] = 26
                mem[_88 + 32] = 'SafeMath: division by zero'
                if not s:
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 26
                    mem[mem[64] + 68] = 'SafeMath: division by zero'
                    idx = 32
                    while idx < 26:
                        mem[idx + mem[64] + 68] = mem[idx + _88 + 32]
                        idx = idx + 32
                        continue 
                    revert with 0, 'SafeMath: division by zero'
                stor14 -= sub_e128cca9[stor13[idx].field_0].field_256
                if not stor13[idx].field_0:
                    revert with 0, 'BEP20: mint to the zero address'
                if (0 / s) + _totalSupply < _totalSupply:
                    revert with 0, 'SafeMath: addition overflow'
                _totalSupply += 0 / s
                if (0 / s) + balanceOf[stor13[idx].field_0] < balanceOf[stor13[idx].field_0]:
                    revert with 0, 'SafeMath: addition overflow'
                balanceOf[stor13[idx].field_0] += 0 / s
                mem[mem[64]] = 0 / s
                emit Transfer((0 / s), 0, stor13[idx].field_0);
            else:
                if _totalSupply * (arg2 * sub_e128cca9[stor13[idx].field_0].field_256) - (s * sub_e128cca9[stor13[idx].field_0].field_256) / stor14 / (arg2 * sub_e128cca9[stor13[idx].field_0].field_256) - (s * sub_e128cca9[stor13[idx].field_0].field_256) / stor14 != _totalSupply:
                    revert with 0, 32, 33, 0x1f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                _91 = mem[64]
                mem[64] = mem[64] + 64
                mem[_91] = 26
                mem[_91 + 32] = 'SafeMath: division by zero'
                if not s:
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 26
                    mem[mem[64] + 68] = 'SafeMath: division by zero'
                    s = 32
                    while s < 26:
                        mem[s + mem[64] + 68] = mem[s + _91 + 32]
                        s = s + 32
                        continue 
                    revert with 0, 'SafeMath: division by zero'
                stor14 -= sub_e128cca9[stor13[idx].field_0].field_256
                if not stor13[idx].field_0:
                    revert with 0, 'BEP20: mint to the zero address'
                if (_totalSupply * (arg2 * sub_e128cca9[stor13[idx].field_0].field_256) - (s * sub_e128cca9[stor13[idx].field_0].field_256) / stor14 / s) + _totalSupply < _totalSupply:
                    revert with 0, 'SafeMath: addition overflow'
                _totalSupply += _totalSupply * (arg2 * sub_e128cca9[stor13[idx].field_0].field_256) - (s * sub_e128cca9[stor13[idx].field_0].field_256) / stor14 / s
                if (_totalSupply * (arg2 * sub_e128cca9[stor13[idx].field_0].field_256) - (s * sub_e128cca9[stor13[idx].field_0].field_256) / stor14 / s) + balanceOf[stor13[idx].field_0] < balanceOf[stor13[idx].field_0]:
                    revert with 0, 'SafeMath: addition overflow'
                balanceOf[stor13[idx].field_0] += _totalSupply * (arg2 * sub_e128cca9[stor13[idx].field_0].field_256) - (s * sub_e128cca9[stor13[idx].field_0].field_256) / stor14 / s
                mem[mem[64]] = _totalSupply * (arg2 * sub_e128cca9[stor13[idx].field_0].field_256) - (s * sub_e128cca9[stor13[idx].field_0].field_256) / stor14 / s
                emit Transfer((_totalSupply * (arg2 * sub_e128cca9[stor13[idx].field_0].field_256) - (s * sub_e128cca9[stor13[idx].field_0].field_256) / stor14 / s), 0, stor13[idx].field_0);
        if not stor31[stor13[idx].field_0].field_256:
            stor10++
        mem[0] = stor13[idx].field_0
        stor31[stor13[idx].field_0].field_256 += sub_e128cca9[stor13[idx].field_0].field_256
        mem[32] = 16
        stor31[stor13[idx].field_0].field_512 += sub_e128cca9[stor13[idx].field_0].field_512
        stor8 += sub_e128cca9[stor13[idx].field_0].field_256
        stor9 += sub_e128cca9[stor13[idx].field_0].field_512
        stor31[stor13[idx].field_0].field_0 = 1
        sub_e128cca9[stor13[idx].field_0].field_0 = 0
        sub_e128cca9[stor13[idx].field_0].field_256 = 0
        sub_e128cca9[stor13[idx].field_0].field_512 = 0
        idx = idx + 1
        s = ((arg2 * sub_e128cca9[stor13[idx].field_0].field_256) - (s * sub_e128cca9[stor13[idx].field_0].field_256) / stor14) + s
        continue 
    stor13.length = 0
    idx = 0
    while stor13.length > idx:
        stor13[idx].field_0 = 0
        idx = idx + 1
        continue 
    stor14 = 0
    stor15 = 0
    sub_93c63140 = 0
    sub_a14ed18a = arg2
    paused = 0
}

function withdrawLiquidity() payable {
    if stor30:
        revert with 0, 'No re-entrancy'
    stor30 = 1
    if sub_e128cca9[address(msg.sender)].field_256 <= 0:
        if stor21[address(msg.sender)]:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                        32,
                        49,
                        0x65504f4f4c3a20496e76616c6964204f7065726174696f6e2c2066756e64206973206e6f7420776974686461727761626c,
                        mem[213 len 15]
        if stor31[address(msg.sender)].field_256 <= 0:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                        32,
                        49,
                        0x65504f4f4c3a20496e76616c6964204f7065726174696f6e2c2066756e64206973206e6f7420776974686461727761626c,
                        mem[213 len 15]
    if sub_e128cca9[address(msg.sender)].field_256 <= 0:
        if not stor21[address(msg.sender)]:
            if stor31[address(msg.sender)].field_256 > 0:
                if not balanceOf[address(msg.sender)]:
                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                32,
                                47,
                                0xfe7573657220446f65736e6f74206861766520656e6f756768204c5020746f6b656e20696e206869732077616c6c65,
                                mem[211 len 17]
                sub_2445aefb++
                stor18.length++
                stor18[stor18.length].field_0 = msg.sender
                stor19 += stor31[address(msg.sender)].field_256
                stor20 += balanceOf[address(msg.sender)]
                stor21[address(msg.sender)] = 1
                emit WithdrawRequested(stor31[address(msg.sender)].field_256, msg.sender);
        stor30 = 0
        return 0
    require ext_code.size(tokenAddress)
    staticcall tokenAddress.0x70a08231 with:
            gas gas_remaining wei
           args this.address
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if sub_e128cca9[address(msg.sender)].field_256 <= ext_call.return_data[0]:
        idx = 0
        while idx < stor13.length - 1:
            mem[0] = 13
            if stor13[idx].field_0 == msg.sender:
                require stor13.length - 1 < stor13.length
                require idx < stor13.length
                mem[0] = 13
                stor13[idx].field_0 = stor13[stor13.length].field_0
            idx = idx + 1
            continue 
        require stor13.length
        stor13[stor13.length].field_0 = 0
        stor13.length--
        sub_93c63140--
        if sub_e128cca9[address(msg.sender)].field_256 > stor14:
            revert with 0, 'SafeMath: subtraction overflow'
        stor14 -= sub_e128cca9[address(msg.sender)].field_256
        if sub_e128cca9[address(msg.sender)].field_512 > stor15:
            revert with 0, 'SafeMath: subtraction overflow'
        stor15 -= sub_e128cca9[address(msg.sender)].field_512
        sub_e128cca9[address(msg.sender)].field_256 = 0
        sub_e128cca9[address(msg.sender)].field_512 = 0
        if not stor31[address(msg.sender)].field_256:
            investorCount--
        require ext_code.size(tokenAddress)
        staticcall tokenAddress.0x70a08231 with:
                gas gas_remaining wei
               args this.address
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if ext_call.return_data[0] <= 95 * sub_e128cca9[address(msg.sender)].field_256 / 100:
            revert with 0, 'pool dosenot have enough balance'
        require ext_code.size(tokenAddress)
        call tokenAddress.0xa9059cbb with:
             gas gas_remaining wei
            args msg.sender, sub_e128cca9[address(msg.sender)].field_256
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0]
        emit 0x17cd7b6a: sub_e128cca9[address(msg.sender)].field_256, msg.sender
        if not stor21[address(msg.sender)]:
            if stor31[address(msg.sender)].field_256 > 0:
                if not balanceOf[address(msg.sender)]:
                    revert with 0, 
                                32,
                                47,
                                0xfe7573657220446f65736e6f74206861766520656e6f756768204c5020746f6b656e20696e206869732077616c6c65,
                                mem[339 len 17]
                sub_2445aefb++
                stor18.length++
                stor18[stor18.length].field_0 = msg.sender
                stor19 += stor31[address(msg.sender)].field_256
                stor20 += balanceOf[address(msg.sender)]
                stor21[address(msg.sender)] = 1
                emit WithdrawRequested(stor31[address(msg.sender)].field_256, msg.sender);
        stor30 = 0
        return sub_e128cca9[address(msg.sender)].field_256
    require ext_code.size(tokenAddress)
    staticcall tokenAddress.0x70a08231 with:
            gas gas_remaining wei
           args this.address
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    idx = 0
    while idx < stor13.length - 1:
        mem[0] = 13
        if stor13[idx].field_0 == msg.sender:
            require stor13.length - 1 < stor13.length
            require idx < stor13.length
            mem[0] = 13
            stor13[idx].field_0 = stor13[stor13.length].field_0
        idx = idx + 1
        continue 
    require stor13.length
    stor13[stor13.length].field_0 = 0
    stor13.length--
    sub_93c63140--
    if sub_e128cca9[address(msg.sender)].field_256 > stor14:
        revert with 0, 'SafeMath: subtraction overflow'
    stor14 -= sub_e128cca9[address(msg.sender)].field_256
    if sub_e128cca9[address(msg.sender)].field_512 > stor15:
        revert with 0, 'SafeMath: subtraction overflow'
    stor15 -= sub_e128cca9[address(msg.sender)].field_512
    sub_e128cca9[address(msg.sender)].field_256 = 0
    sub_e128cca9[address(msg.sender)].field_512 = 0
    if not stor31[address(msg.sender)].field_256:
        investorCount--
    require ext_code.size(tokenAddress)
    staticcall tokenAddress.0x70a08231 with:
            gas gas_remaining wei
           args this.address
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if ext_call.return_data[0] <= 95 * ext_call.return_data[0] / 100:
        revert with 0, 'pool dosenot have enough balance'
    require ext_code.size(tokenAddress)
    call tokenAddress.0xa9059cbb with:
         gas gas_remaining wei
        args msg.sender, ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0]
    emit 0x17cd7b6a: ext_call.return_data[0], msg.sender
    if not stor21[address(msg.sender)]:
        if stor31[address(msg.sender)].field_256 > 0:
            if not balanceOf[address(msg.sender)]:
                revert with 0, 
                            32,
                            47,
                            0xfe7573657220446f65736e6f74206861766520656e6f756768204c5020746f6b656e20696e206869732077616c6c65,
                            mem[339 len 17]
            sub_2445aefb++
            stor18.length++
            stor18[stor18.length].field_0 = msg.sender
            stor19 += stor31[address(msg.sender)].field_256
            stor20 += balanceOf[address(msg.sender)]
            stor21[address(msg.sender)] = 1
            emit WithdrawRequested(stor31[address(msg.sender)].field_256, msg.sender);
    stor30 = 0
    return ext_call.return_data[0]
}

function sub_ab7032b8(?) payable {
    mem[64] = 96
    require calldata.size - 4 >= 32
    if farmerAddress != msg.sender:
        revert with 0, 'LPool: caller is not the farmer'
    if not sub_93c63140:
        revert with 0, 'Nothing to InvestInSeq'
    if arg1 <= sub_93c63140:
        s = sub_93c63140
        idx = arg1
        while idx:
            require s - 1 < stor13.length
            mem[0] = stor13[s].field_0
            mem[32] = 16
            require stor14
            if _totalSupply <= 0:
                stor24 += (sub_a14ed18a * sub_e128cca9[stor13[s].field_0].field_256) - (stor24 * sub_e128cca9[stor13[s].field_0].field_256) / stor14
                stor14 -= sub_e128cca9[stor13[s].field_0].field_256
                stor15 -= sub_e128cca9[stor13[s].field_0].field_512
                if not stor13[s].field_0:
                    revert with 0, 'BEP20: mint to the zero address'
                if sub_e128cca9[stor13[s].field_0].field_256 + _totalSupply < _totalSupply:
                    revert with 0, 'SafeMath: addition overflow'
                _totalSupply += sub_e128cca9[stor13[s].field_0].field_256
                if sub_e128cca9[stor13[s].field_0].field_256 + balanceOf[stor13[s].field_0] < balanceOf[stor13[s].field_0]:
                    revert with 0, 'SafeMath: addition overflow'
                balanceOf[stor13[s].field_0] += sub_e128cca9[stor13[s].field_0].field_256
                mem[mem[64]] = sub_e128cca9[stor13[s].field_0].field_256
                emit Transfer(sub_e128cca9[stor13[s].field_0].field_256, 0, stor13[s].field_0);
            else:
                if not (sub_a14ed18a * sub_e128cca9[stor13[s].field_0].field_256) - (stor24 * sub_e128cca9[stor13[s].field_0].field_256) / stor14:
                    _177 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_177] = 26
                    mem[_177 + 32] = 'SafeMath: division by zero'
                    if not stor24:
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 26
                        mem[mem[64] + 68] = 'SafeMath: division by zero'
                        idx = 32
                        while idx < 26:
                            mem[idx + mem[64] + 68] = mem[idx + _177 + 32]
                            idx = idx + 32
                            continue 
                        revert with 0, 'SafeMath: division by zero'
                    stor24 += (sub_a14ed18a * sub_e128cca9[stor13[s].field_0].field_256) - (stor24 * sub_e128cca9[stor13[s].field_0].field_256) / stor14
                    stor14 -= sub_e128cca9[stor13[s].field_0].field_256
                    stor15 -= sub_e128cca9[stor13[s].field_0].field_512
                    if not stor13[s].field_0:
                        revert with 0, 'BEP20: mint to the zero address'
                    if (0 / stor24) + _totalSupply < _totalSupply:
                        revert with 0, 'SafeMath: addition overflow'
                    _totalSupply += 0 / stor24
                    if (0 / stor24) + balanceOf[stor13[s].field_0] < balanceOf[stor13[s].field_0]:
                        revert with 0, 'SafeMath: addition overflow'
                    balanceOf[stor13[s].field_0] += 0 / stor24
                    mem[mem[64]] = 0 / stor24
                    emit Transfer((0 / stor24), 0, stor13[s].field_0);
                else:
                    if _totalSupply * (sub_a14ed18a * sub_e128cca9[stor13[s].field_0].field_256) - (stor24 * sub_e128cca9[stor13[s].field_0].field_256) / stor14 / (sub_a14ed18a * sub_e128cca9[stor13[s].field_0].field_256) - (stor24 * sub_e128cca9[stor13[s].field_0].field_256) / stor14 != _totalSupply:
                        revert with 0, 32, 33, 0x1f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                    _183 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_183] = 26
                    mem[_183 + 32] = 'SafeMath: division by zero'
                    if not stor24:
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 26
                        mem[mem[64] + 68] = 'SafeMath: division by zero'
                        idx = 32
                        while idx < 26:
                            mem[idx + mem[64] + 68] = mem[idx + _183 + 32]
                            idx = idx + 32
                            continue 
                        revert with 0, 'SafeMath: division by zero'
                    stor24 += (sub_a14ed18a * sub_e128cca9[stor13[s].field_0].field_256) - (stor24 * sub_e128cca9[stor13[s].field_0].field_256) / stor14
                    stor14 -= sub_e128cca9[stor13[s].field_0].field_256
                    stor15 -= sub_e128cca9[stor13[s].field_0].field_512
                    if not stor13[s].field_0:
                        revert with 0, 'BEP20: mint to the zero address'
                    if (_totalSupply * (sub_a14ed18a * sub_e128cca9[stor13[s].field_0].field_256) - (stor24 * sub_e128cca9[stor13[s].field_0].field_256) / stor14 / stor24) + _totalSupply < _totalSupply:
                        revert with 0, 'SafeMath: addition overflow'
                    _totalSupply += _totalSupply * (sub_a14ed18a * sub_e128cca9[stor13[s].field_0].field_256) - (stor24 * sub_e128cca9[stor13[s].field_0].field_256) / stor14 / stor24
                    if (_totalSupply * (sub_a14ed18a * sub_e128cca9[stor13[s].field_0].field_256) - (stor24 * sub_e128cca9[stor13[s].field_0].field_256) / stor14 / stor24) + balanceOf[stor13[s].field_0] < balanceOf[stor13[s].field_0]:
                        revert with 0, 'SafeMath: addition overflow'
                    balanceOf[stor13[s].field_0] += _totalSupply * (sub_a14ed18a * sub_e128cca9[stor13[s].field_0].field_256) - (stor24 * sub_e128cca9[stor13[s].field_0].field_256) / stor14 / stor24
                    mem[mem[64]] = _totalSupply * (sub_a14ed18a * sub_e128cca9[stor13[s].field_0].field_256) - (stor24 * sub_e128cca9[stor13[s].field_0].field_256) / stor14 / stor24
                    emit Transfer((_totalSupply * (sub_a14ed18a * sub_e128cca9[stor13[s].field_0].field_256) - (stor24 * sub_e128cca9[stor13[s].field_0].field_256) / stor14 / stor24), 0, stor13[s].field_0);
            if not stor31[stor13[s].field_0].field_256:
                stor10++
            mem[0] = stor13[s].field_0
            stor31[stor13[s].field_0].field_256 += sub_e128cca9[stor13[s].field_0].field_256
            mem[32] = 16
            stor31[stor13[s].field_0].field_512 += sub_e128cca9[stor13[s].field_0].field_512
            stor8 += sub_e128cca9[stor13[s].field_0].field_256
            stor9 += sub_e128cca9[stor13[s].field_0].field_512
            stor31[stor13[s].field_0].field_0 = 1
            sub_93c63140--
            sub_e128cca9[stor13[s].field_0].field_0 = 0
            sub_e128cca9[stor13[s].field_0].field_256 = 0
            sub_e128cca9[stor13[s].field_0].field_512 = 0
            s = s - 1
            idx = idx - 1
            continue 
    else:
        s = sub_93c63140
        idx = sub_93c63140
        while idx:
            require s - 1 < stor13.length
            mem[0] = stor13[s].field_0
            mem[32] = 16
            require stor14
            if _totalSupply <= 0:
                stor24 += (sub_a14ed18a * sub_e128cca9[stor13[s].field_0].field_256) - (stor24 * sub_e128cca9[stor13[s].field_0].field_256) / stor14
                stor14 -= sub_e128cca9[stor13[s].field_0].field_256
                stor15 -= sub_e128cca9[stor13[s].field_0].field_512
                if not stor13[s].field_0:
                    revert with 0, 'BEP20: mint to the zero address'
                if sub_e128cca9[stor13[s].field_0].field_256 + _totalSupply < _totalSupply:
                    revert with 0, 'SafeMath: addition overflow'
                _totalSupply += sub_e128cca9[stor13[s].field_0].field_256
                if sub_e128cca9[stor13[s].field_0].field_256 + balanceOf[stor13[s].field_0] < balanceOf[stor13[s].field_0]:
                    revert with 0, 'SafeMath: addition overflow'
                balanceOf[stor13[s].field_0] += sub_e128cca9[stor13[s].field_0].field_256
                mem[mem[64]] = sub_e128cca9[stor13[s].field_0].field_256
                emit Transfer(sub_e128cca9[stor13[s].field_0].field_256, 0, stor13[s].field_0);
            else:
                if not (sub_a14ed18a * sub_e128cca9[stor13[s].field_0].field_256) - (stor24 * sub_e128cca9[stor13[s].field_0].field_256) / stor14:
                    _180 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_180] = 26
                    mem[_180 + 32] = 'SafeMath: division by zero'
                    if not stor24:
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 26
                        mem[mem[64] + 68] = 'SafeMath: division by zero'
                        idx = 32
                        while idx < 26:
                            mem[idx + mem[64] + 68] = mem[idx + _180 + 32]
                            idx = idx + 32
                            continue 
                        revert with 0, 'SafeMath: division by zero'
                    stor24 += (sub_a14ed18a * sub_e128cca9[stor13[s].field_0].field_256) - (stor24 * sub_e128cca9[stor13[s].field_0].field_256) / stor14
                    stor14 -= sub_e128cca9[stor13[s].field_0].field_256
                    stor15 -= sub_e128cca9[stor13[s].field_0].field_512
                    if not stor13[s].field_0:
                        revert with 0, 'BEP20: mint to the zero address'
                    if (0 / stor24) + _totalSupply < _totalSupply:
                        revert with 0, 'SafeMath: addition overflow'
                    _totalSupply += 0 / stor24
                    if (0 / stor24) + balanceOf[stor13[s].field_0] < balanceOf[stor13[s].field_0]:
                        revert with 0, 'SafeMath: addition overflow'
                    balanceOf[stor13[s].field_0] += 0 / stor24
                    mem[mem[64]] = 0 / stor24
                    emit Transfer((0 / stor24), 0, stor13[s].field_0);
                else:
                    if _totalSupply * (sub_a14ed18a * sub_e128cca9[stor13[s].field_0].field_256) - (stor24 * sub_e128cca9[stor13[s].field_0].field_256) / stor14 / (sub_a14ed18a * sub_e128cca9[stor13[s].field_0].field_256) - (stor24 * sub_e128cca9[stor13[s].field_0].field_256) / stor14 != _totalSupply:
                        revert with 0, 32, 33, 0x1f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                    _185 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_185] = 26
                    mem[_185 + 32] = 'SafeMath: division by zero'
                    if not stor24:
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 26
                        mem[mem[64] + 68] = 'SafeMath: division by zero'
                        idx = 32
                        while idx < 26:
                            mem[idx + mem[64] + 68] = mem[idx + _185 + 32]
                            idx = idx + 32
                            continue 
                        revert with 0, 'SafeMath: division by zero'
                    stor24 += (sub_a14ed18a * sub_e128cca9[stor13[s].field_0].field_256) - (stor24 * sub_e128cca9[stor13[s].field_0].field_256) / stor14
                    stor14 -= sub_e128cca9[stor13[s].field_0].field_256
                    stor15 -= sub_e128cca9[stor13[s].field_0].field_512
                    if not stor13[s].field_0:
                        revert with 0, 'BEP20: mint to the zero address'
                    if (_totalSupply * (sub_a14ed18a * sub_e128cca9[stor13[s].field_0].field_256) - (stor24 * sub_e128cca9[stor13[s].field_0].field_256) / stor14 / stor24) + _totalSupply < _totalSupply:
                        revert with 0, 'SafeMath: addition overflow'
                    _totalSupply += _totalSupply * (sub_a14ed18a * sub_e128cca9[stor13[s].field_0].field_256) - (stor24 * sub_e128cca9[stor13[s].field_0].field_256) / stor14 / stor24
                    if (_totalSupply * (sub_a14ed18a * sub_e128cca9[stor13[s].field_0].field_256) - (stor24 * sub_e128cca9[stor13[s].field_0].field_256) / stor14 / stor24) + balanceOf[stor13[s].field_0] < balanceOf[stor13[s].field_0]:
                        revert with 0, 'SafeMath: addition overflow'
                    balanceOf[stor13[s].field_0] += _totalSupply * (sub_a14ed18a * sub_e128cca9[stor13[s].field_0].field_256) - (stor24 * sub_e128cca9[stor13[s].field_0].field_256) / stor14 / stor24
                    mem[mem[64]] = _totalSupply * (sub_a14ed18a * sub_e128cca9[stor13[s].field_0].field_256) - (stor24 * sub_e128cca9[stor13[s].field_0].field_256) / stor14 / stor24
                    emit Transfer((_totalSupply * (sub_a14ed18a * sub_e128cca9[stor13[s].field_0].field_256) - (stor24 * sub_e128cca9[stor13[s].field_0].field_256) / stor14 / stor24), 0, stor13[s].field_0);
            if not stor31[stor13[s].field_0].field_256:
                stor10++
            mem[0] = stor13[s].field_0
            stor31[stor13[s].field_0].field_256 += sub_e128cca9[stor13[s].field_0].field_256
            mem[32] = 16
            stor31[stor13[s].field_0].field_512 += sub_e128cca9[stor13[s].field_0].field_512
            stor8 += sub_e128cca9[stor13[s].field_0].field_256
            stor9 += sub_e128cca9[stor13[s].field_0].field_512
            stor31[stor13[s].field_0].field_0 = 1
            sub_93c63140--
            sub_e128cca9[stor13[s].field_0].field_0 = 0
            sub_e128cca9[stor13[s].field_0].field_256 = 0
            sub_e128cca9[stor13[s].field_0].field_512 = 0
            s = s - 1
            idx = idx - 1
            continue 
    if not sub_93c63140:
        stor13.length = 0
        idx = 0
        while stor13.length > idx:
            stor13[idx].field_0 = 0
            idx = idx + 1
            continue 
        stor14 = 0
        stor15 = 0
        paused = 0
}

function sub_44b0de49(?) payable {
    mem[64] = 96
    require calldata.size - 4 >= 32
    if stor30:
        revert with 0, 'No re-entrancy'
    stor30 = 1
    if farmerAddress != msg.sender:
        revert with 0, 'LPool: caller is not the farmer'
    if not sub_2445aefb:
        revert with 0, 'Nothing to withdarwInSeq'
    if arg1 <= sub_2445aefb:
        s = sub_2445aefb
        idx = arg1
        while idx:
            require s - 1 < stor18.length
            mem[0] = stor18[s].field_0
            mem[32] = 32
            if not stor25:
                _16845 = mem[64]
                mem[64] = mem[64] + 64
                mem[_16845] = 26
                mem[_16845 + 32] = 'SafeMath: division by zero'
                if not stor20:
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 26
                    mem[mem[64] + 68] = 'SafeMath: division by zero'
                    idx = 32
                    while idx < 26:
                        mem[idx + mem[64] + 68] = mem[idx + _16845 + 32]
                        idx = idx + 32
                        continue 
                    revert with 0, 'SafeMath: division by zero'
                require ext_code.size(tokenAddress)
                staticcall tokenAddress.0x70a08231 with:
                        gas gas_remaining wei
                       args address(this.address)
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] <= 95 * 0 / stor20 / 100:
                    revert with 0, 'pool doesnot have enough balance'
                require ext_code.size(tokenAddress)
                staticcall tokenAddress.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if 0 / stor20 <= ext_call.return_data[0]:
                    if not stor18[s].field_0:
                        revert with 0, 32, 33, 0x7342455032303a206275726e2066726f6d20746865207a65726f20616464726573, mem[mem[64] + 101 len 31]
                    _16941 = mem[64]
                    mem[64] = mem[64] + 96
                    mem[_16941] = 34
                    mem[_16941 + 32 len 34] = 0x6f42455032303a206275726e20616d6f756e7420657863656564732062616c616e63
                    mem[32] = 32
                    if balanceOf[stor18[s].field_0] > balanceOf[stor18[s].field_0]:
                        _16964 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 34
                        idx = 0
                        while idx < 34:
                            mem[idx + _16964 + 68] = mem[idx + _16941 + 32]
                            idx = idx + 32
                            continue 
                        mem[_16964 + 100] = mem[_16964 + 130 len 2]
                        revert with memory
                          from mem[64]
                           len _16964 + -mem[64] + 132
                    mem[0] = stor18[s].field_0
                    mem[32] = 32
                    balanceOf[stor18[s].field_0] = 0
                    _16980 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_16980] = 30
                    mem[_16980 + 32] = 'SafeMath: subtraction overflow'
                    if balanceOf[stor18[s].field_0] > _totalSupply:
                        _17011 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 30
                        idx = 0
                        while idx < 30:
                            mem[idx + _17011 + 68] = mem[idx + _16980 + 32]
                            idx = idx + 32
                            continue 
                        mem[_17011 + 68] = mem[_17011 + 70 len 30]
                        revert with memory
                          from mem[64]
                           len _17011 + -mem[64] + 100
                    _totalSupply -= balanceOf[stor18[s].field_0]
                    emit Transfer(balanceOf[stor18[s].field_0], stor18[s].field_0, 0);
                    stor25 -= 0 / stor20
                    sub_a14ed18a -= 0 / stor20
                    if 0 / stor20 <= stor31[stor18[s].field_0].field_256:
                        sub_2445aefb--
                        mem[0] = stor18[s].field_0
                        mem[32] = 31
                        _17125 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_17125] = 30
                        mem[_17125 + 32] = 'SafeMath: subtraction overflow'
                        if stor31[stor18[s].field_0].field_256 > stor19:
                            _17158 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[idx + _17158 + 68] = mem[idx + _17125 + 32]
                                idx = idx + 32
                                continue 
                            mem[_17158 + 68] = mem[_17158 + 70 len 30]
                            revert with memory
                              from mem[64]
                               len _17158 + -mem[64] + 100
                        stor19 -= stor31[stor18[s].field_0].field_256
                        _17216 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_17216] = 30
                        mem[_17216 + 32] = 'SafeMath: subtraction overflow'
                        if balanceOf[stor18[s].field_0] > stor20:
                            _17272 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[idx + _17272 + 68] = mem[idx + _17216 + 32]
                                idx = idx + 32
                                continue 
                            mem[_17272 + 68] = mem[_17272 + 70 len 30]
                            revert with memory
                              from mem[64]
                               len _17272 + -mem[64] + 100
                        stor20 -= balanceOf[stor18[s].field_0]
                        mem[0] = stor18[s].field_0
                        stor21[stor18[s].field_0] = 0
                        mem[32] = 31
                        _17371 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_17371] = 30
                        mem[_17371 + 32] = 'SafeMath: subtraction overflow'
                        if stor31[stor18[s].field_0].field_256 > stor8:
                            _17453 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[idx + _17453 + 68] = mem[idx + _17371 + 32]
                                idx = idx + 32
                                continue 
                            mem[_17453 + 68] = mem[_17453 + 70 len 30]
                            revert with memory
                              from mem[64]
                               len _17453 + -mem[64] + 100
                        stor8 -= stor31[stor18[s].field_0].field_256
                        mem[0] = stor18[s].field_0
                        mem[32] = 31
                        _17607 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_17607] = 30
                        mem[_17607 + 32] = 'SafeMath: subtraction overflow'
                        if stor31[stor18[s].field_0].field_512 > stor9:
                            _17701 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[idx + _17701 + 68] = mem[idx + _17607 + 32]
                                idx = idx + 32
                                continue 
                            mem[_17701 + 68] = mem[_17701 + 70 len 30]
                            revert with memory
                              from mem[64]
                               len _17701 + -mem[64] + 100
                        stor9 -= stor31[stor18[s].field_0].field_512
                        mem[0] = stor18[s].field_0
                        mem[32] = 31
                        stor31[stor18[s].field_0].field_256 = 0
                        stor31[stor18[s].field_0].field_512 = 0
                        stor31[stor18[s].field_0].field_0 = 0
                        stor10--
                        investorCount--
                        _18006 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_18006] = 26
                        mem[_18006 + 32] = 'SafeMath: division by zero'
                        _18298 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_18298] = 30
                        mem[_18298 + 32] = 'SafeMath: subtraction overflow'
                        if 0 > 0 / stor20:
                            _18430 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[idx + _18430 + 68] = mem[idx + _18298 + 32]
                                idx = idx + 32
                                continue 
                            mem[_18430 + 68] = mem[_18430 + 70 len 30]
                            revert with memory
                              from mem[64]
                               len _18430 + -mem[64] + 100
                        require ext_code.size(tokenAddress)
                        staticcall tokenAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args address(this.address)
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] <= 95 * 0 / stor20 / 100:
                            revert with 0, 'pool doesnot have enough balance'
                        require ext_code.size(tokenAddress)
                        staticcall tokenAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if 0 / stor20 <= ext_call.return_data[0]:
                            mem[mem[64] + 4] = stor18[s].field_0
                            mem[mem[64] + 36] = 0 / stor20
                            require ext_code.size(tokenAddress)
                            call tokenAddress.0xa9059cbb with:
                                 gas gas_remaining wei
                                args stor18[s].field_0, 0 / stor20
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_call.return_data[0]
                            mem[mem[64]] = 0 / stor20
                            emit Withdraw((0 / stor20), stor18[s].field_0);
                        else:
                            require ext_code.size(tokenAddress)
                            staticcall tokenAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            mem[mem[64] + 4] = stor18[s].field_0
                            mem[mem[64] + 36] = ext_call.return_data[0]
                            require ext_code.size(tokenAddress)
                            call tokenAddress.0xa9059cbb with:
                                 gas gas_remaining wei
                                args stor18[s].field_0, ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_call.return_data[0]
                            mem[mem[64]] = ext_call.return_data[0]
                            emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                    else:
                        mem[0] = stor18[s].field_0
                        mem[32] = 31
                        if not (0 / stor20) - stor31[stor18[s].field_0].field_256:
                            sub_2445aefb--
                            mem[0] = stor18[s].field_0
                            mem[32] = 31
                            _17124 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_17124] = 30
                            mem[_17124 + 32] = 'SafeMath: subtraction overflow'
                            if stor31[stor18[s].field_0].field_256 > stor19:
                                _17155 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[idx + _17155 + 68] = mem[idx + _17124 + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_17155 + 68] = mem[_17155 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _17155 + -mem[64] + 100
                            stor19 -= stor31[stor18[s].field_0].field_256
                            _17212 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_17212] = 30
                            mem[_17212 + 32] = 'SafeMath: subtraction overflow'
                            if balanceOf[stor18[s].field_0] > stor20:
                                _17269 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[idx + _17269 + 68] = mem[idx + _17212 + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_17269 + 68] = mem[_17269 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _17269 + -mem[64] + 100
                            stor20 -= balanceOf[stor18[s].field_0]
                            mem[0] = stor18[s].field_0
                            stor21[stor18[s].field_0] = 0
                            mem[32] = 31
                            _17366 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_17366] = 30
                            mem[_17366 + 32] = 'SafeMath: subtraction overflow'
                            if stor31[stor18[s].field_0].field_256 > stor8:
                                _17448 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[idx + _17448 + 68] = mem[idx + _17366 + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_17448 + 68] = mem[_17448 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _17448 + -mem[64] + 100
                            stor8 -= stor31[stor18[s].field_0].field_256
                            mem[0] = stor18[s].field_0
                            mem[32] = 31
                            _17603 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_17603] = 30
                            mem[_17603 + 32] = 'SafeMath: subtraction overflow'
                            if stor31[stor18[s].field_0].field_512 > stor9:
                                _17697 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[idx + _17697 + 68] = mem[idx + _17603 + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_17697 + 68] = mem[_17697 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _17697 + -mem[64] + 100
                            stor9 -= stor31[stor18[s].field_0].field_512
                            mem[0] = stor18[s].field_0
                            mem[32] = 31
                            stor31[stor18[s].field_0].field_256 = 0
                            stor31[stor18[s].field_0].field_512 = 0
                            stor31[stor18[s].field_0].field_0 = 0
                            stor10--
                            investorCount--
                            if not (0 / stor20) - stor31[stor18[s].field_0].field_256:
                                _18001 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_18001] = 26
                                mem[_18001 + 32] = 'SafeMath: division by zero'
                                _18286 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_18286] = 30
                                mem[_18286 + 32] = 'SafeMath: subtraction overflow'
                                if 0 > 0 / stor20:
                                    _18412 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[idx + _18412 + 68] = mem[idx + _18286 + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_18412 + 68] = mem[_18412 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _18412 + -mem[64] + 100
                                require ext_code.size(tokenAddress)
                                staticcall tokenAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args address(this.address)
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] <= 95 * 0 / stor20 / 100:
                                    revert with 0, 'pool doesnot have enough balance'
                                require ext_code.size(tokenAddress)
                                staticcall tokenAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if 0 / stor20 <= ext_call.return_data[0]:
                                    mem[mem[64] + 4] = stor18[s].field_0
                                    mem[mem[64] + 36] = 0 / stor20
                                    require ext_code.size(tokenAddress)
                                    call tokenAddress.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args stor18[s].field_0, 0 / stor20
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_call.return_data[0]
                                    mem[mem[64]] = 0 / stor20
                                    emit Withdraw((0 / stor20), stor18[s].field_0);
                                else:
                                    require ext_code.size(tokenAddress)
                                    staticcall tokenAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[mem[64] + 4] = stor18[s].field_0
                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                    require ext_code.size(tokenAddress)
                                    call tokenAddress.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args stor18[s].field_0, ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_call.return_data[0]
                                    mem[mem[64]] = ext_call.return_data[0]
                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                            else:
                                if (0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / (0 / stor20) - stor31[stor18[s].field_0].field_256 != uint16(teamRewardFee + farmerRewardFee):
                                    revert with 0, 32, 33, 0x1f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                _18049 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_18049] = 26
                                mem[_18049 + 32] = 'SafeMath: division by zero'
                                _18357 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_18357] = 30
                                mem[_18357 + 32] = 'SafeMath: subtraction overflow'
                                if (0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000 > 0 / stor20:
                                    _18521 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[idx + _18521 + 68] = mem[idx + _18357 + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_18521 + 68] = mem[_18521 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _18521 + -mem[64] + 100
                                require ext_code.size(tokenAddress)
                                staticcall tokenAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args address(this.address)
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] <= (95 * 0 / stor20) - (95 * (0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) / 100:
                                    revert with 0, 'pool doesnot have enough balance'
                                require ext_code.size(tokenAddress)
                                staticcall tokenAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if (0 / stor20) - ((0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) <= ext_call.return_data[0]:
                                    mem[mem[64] + 4] = stor18[s].field_0
                                    mem[mem[64] + 36] = (0 / stor20) - ((0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                    require ext_code.size(tokenAddress)
                                    call tokenAddress.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args stor18[s].field_0, (0 / stor20) - ((0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_call.return_data[0]
                                    mem[mem[64]] = (0 / stor20) - ((0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                    emit Withdraw(((0 / stor20) - ((0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)), stor18[s].field_0);
                                else:
                                    require ext_code.size(tokenAddress)
                                    staticcall tokenAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[mem[64] + 4] = stor18[s].field_0
                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                    require ext_code.size(tokenAddress)
                                    call tokenAddress.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args stor18[s].field_0, ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_call.return_data[0]
                                    mem[mem[64]] = ext_call.return_data[0]
                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                        else:
                            if not (0 / stor20) - stor31[stor18[s].field_0].field_256:
                                _17194 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_17194] = 26
                                mem[_17194 + 32] = 'SafeMath: division by zero'
                                require ext_code.size(tokenAddress)
                                staticcall tokenAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args address(this.address)
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if 0 > ext_call.return_data[0]:
                                    mem[0] = stor18[s].field_0
                                    emit 0x658fe604: 0, farmerAddress
                                    if not (0 / stor20) - stor31[stor18[s].field_0].field_256:
                                        _17805 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_17805] = 26
                                        mem[_17805 + 32] = 'SafeMath: division by zero'
                                        require ext_code.size(tokenAddress)
                                        staticcall tokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(this.address)
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if 0 > ext_call.return_data[0]:
                                            emit 0x658fe604: 0, stor4
                                            sub_2445aefb--
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _18363 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_18363] = 30
                                            mem[_18363 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor19:
                                                _18533 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _18533 + 68] = mem[idx + _18363 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_18533 + 68] = mem[_18533 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _18533 + -mem[64] + 100
                                            stor19 -= stor31[stor18[s].field_0].field_256
                                            _18944 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_18944] = 30
                                            mem[_18944 + 32] = 'SafeMath: subtraction overflow'
                                            if balanceOf[stor18[s].field_0] > stor20:
                                                _19270 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _19270 + 68] = mem[idx + _18944 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_19270 + 68] = mem[_19270 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _19270 + -mem[64] + 100
                                            stor20 -= balanceOf[stor18[s].field_0]
                                            mem[0] = stor18[s].field_0
                                            stor21[stor18[s].field_0] = 0
                                            mem[32] = 31
                                            _19808 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_19808] = 30
                                            mem[_19808 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor8:
                                                _20277 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _20277 + 68] = mem[idx + _19808 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_20277 + 68] = mem[_20277 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _20277 + -mem[64] + 100
                                            stor8 -= stor31[stor18[s].field_0].field_256
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _20965 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_20965] = 30
                                            mem[_20965 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_512 > stor9:
                                                _21567 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _21567 + 68] = mem[idx + _20965 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_21567 + 68] = mem[_21567 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _21567 + -mem[64] + 100
                                            stor9 -= stor31[stor18[s].field_0].field_512
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            stor31[stor18[s].field_0].field_256 = 0
                                            stor31[stor18[s].field_0].field_512 = 0
                                            stor31[stor18[s].field_0].field_0 = 0
                                            stor10--
                                            investorCount--
                                            if not (0 / stor20) - stor31[stor18[s].field_0].field_256:
                                                _23330 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_23330] = 26
                                                mem[_23330 + 32] = 'SafeMath: division by zero'
                                                _24437 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24437] = 30
                                                mem[_24437 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > 0 / stor20:
                                                    _24654 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _24654 + 68] = mem[idx + _24437 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_24654 + 68] = mem[_24654 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _24654 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= 95 * 0 / stor20 / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if 0 / stor20 <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = 0 / stor20
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, 0 / stor20
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = 0 / stor20
                                                    emit Withdraw((0 / stor20), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                            else:
                                                if (0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / (0 / stor20) - stor31[stor18[s].field_0].field_256 != uint16(teamRewardFee + farmerRewardFee):
                                                    revert with 0, 32, 33, 0x1f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _23567 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_23567] = 26
                                                mem[_23567 + 32] = 'SafeMath: division by zero'
                                                _24565 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24565] = 30
                                                mem[_24565 + 32] = 'SafeMath: subtraction overflow'
                                                if (0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000 > 0 / stor20:
                                                    _24760 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _24760 + 68] = mem[idx + _24565 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_24760 + 68] = mem[_24760 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _24760 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= (95 * 0 / stor20) - (95 * (0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if (0 / stor20) - ((0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = (0 / stor20) - ((0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, (0 / stor20) - ((0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = (0 / stor20) - ((0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    emit Withdraw(((0 / stor20) - ((0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                        else:
                                            require ext_code.size(tokenAddress)
                                            call tokenAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args stor4, 0
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0]
                                            sub_2445aefb--
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _18820 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_18820] = 30
                                            mem[_18820 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor19:
                                                _19098 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _19098 + 68] = mem[idx + _18820 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_19098 + 68] = mem[_19098 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _19098 + -mem[64] + 100
                                            stor19 -= stor31[stor18[s].field_0].field_256
                                            _19635 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_19635] = 30
                                            mem[_19635 + 32] = 'SafeMath: subtraction overflow'
                                            if balanceOf[stor18[s].field_0] > stor20:
                                                _20015 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _20015 + 68] = mem[idx + _19635 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_20015 + 68] = mem[_20015 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _20015 + -mem[64] + 100
                                            stor20 -= balanceOf[stor18[s].field_0]
                                            mem[0] = stor18[s].field_0
                                            stor21[stor18[s].field_0] = 0
                                            mem[32] = 31
                                            _20702 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_20702] = 30
                                            mem[_20702 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor8:
                                                _21289 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _21289 + 68] = mem[idx + _20702 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_21289 + 68] = mem[_21289 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _21289 + -mem[64] + 100
                                            stor8 -= stor31[stor18[s].field_0].field_256
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _22063 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_22063] = 30
                                            mem[_22063 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_512 > stor9:
                                                _22655 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _22655 + 68] = mem[idx + _22063 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_22655 + 68] = mem[_22655 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _22655 + -mem[64] + 100
                                            stor9 -= stor31[stor18[s].field_0].field_512
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            stor31[stor18[s].field_0].field_256 = 0
                                            stor31[stor18[s].field_0].field_512 = 0
                                            stor31[stor18[s].field_0].field_0 = 0
                                            stor10--
                                            investorCount--
                                            if not (0 / stor20) - stor31[stor18[s].field_0].field_256:
                                                _24105 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24105] = 26
                                                mem[_24105 + 32] = 'SafeMath: division by zero'
                                                _24887 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24887] = 30
                                                mem[_24887 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > 0 / stor20:
                                                    _25126 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _25126 + 68] = mem[idx + _24887 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_25126 + 68] = mem[_25126 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _25126 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= 95 * 0 / stor20 / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if 0 / stor20 <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = 0 / stor20
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, 0 / stor20
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = 0 / stor20
                                                    emit Withdraw((0 / stor20), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                            else:
                                                if (0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / (0 / stor20) - stor31[stor18[s].field_0].field_256 != uint16(teamRewardFee + farmerRewardFee):
                                                    revert with 0, 32, 33, 0x1f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _24266 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24266] = 26
                                                mem[_24266 + 32] = 'SafeMath: division by zero'
                                                _25007 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_25007] = 30
                                                mem[_25007 + 32] = 'SafeMath: subtraction overflow'
                                                if (0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000 > 0 / stor20:
                                                    _25280 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _25280 + 68] = mem[idx + _25007 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_25280 + 68] = mem[_25280 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _25280 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= (95 * 0 / stor20) - (95 * (0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if (0 / stor20) - ((0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = (0 / stor20) - ((0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, (0 / stor20) - ((0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = (0 / stor20) - ((0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    emit Withdraw(((0 / stor20) - ((0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                    else:
                                        if (0 / stor20 * teamRewardFee) - (stor31[stor18[s].field_0].field_256 * teamRewardFee) / (0 / stor20) - stor31[stor18[s].field_0].field_256 != teamRewardFee:
                                            revert with 0, 32, 33, 0x1f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _17858 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_17858] = 26
                                        mem[_17858 + 32] = 'SafeMath: division by zero'
                                        require ext_code.size(tokenAddress)
                                        staticcall tokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(this.address)
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if (0 / stor20 * teamRewardFee) - (stor31[stor18[s].field_0].field_256 * teamRewardFee) / 10000 > ext_call.return_data[0]:
                                            emit 0x658fe604: ((0 / stor20 * teamRewardFee) - (stor31[stor18[s].field_0].field_256 * teamRewardFee) / 10000), stor4
                                            sub_2445aefb--
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _18421 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_18421] = 30
                                            mem[_18421 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor19:
                                                _18679 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _18679 + 68] = mem[idx + _18421 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_18679 + 68] = mem[_18679 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _18679 + -mem[64] + 100
                                            stor19 -= stor31[stor18[s].field_0].field_256
                                            _19094 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_19094] = 30
                                            mem[_19094 + 32] = 'SafeMath: subtraction overflow'
                                            if balanceOf[stor18[s].field_0] > stor20:
                                                _19461 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _19461 + 68] = mem[idx + _19094 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_19461 + 68] = mem[_19461 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _19461 + -mem[64] + 100
                                            stor20 -= balanceOf[stor18[s].field_0]
                                            mem[0] = stor18[s].field_0
                                            stor21[stor18[s].field_0] = 0
                                            mem[32] = 31
                                            _20010 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_20010] = 30
                                            mem[_20010 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor8:
                                                _20494 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _20494 + 68] = mem[idx + _20010 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_20494 + 68] = mem[_20494 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _20494 + -mem[64] + 100
                                            stor8 -= stor31[stor18[s].field_0].field_256
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _21284 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_21284] = 30
                                            mem[_21284 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_512 > stor9:
                                                _21802 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _21802 + 68] = mem[idx + _21284 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_21802 + 68] = mem[_21802 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _21802 + -mem[64] + 100
                                            stor9 -= stor31[stor18[s].field_0].field_512
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            stor31[stor18[s].field_0].field_256 = 0
                                            stor31[stor18[s].field_0].field_512 = 0
                                            stor31[stor18[s].field_0].field_0 = 0
                                            stor10--
                                            investorCount--
                                            if not (0 / stor20) - stor31[stor18[s].field_0].field_256:
                                                _23564 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_23564] = 26
                                                mem[_23564 + 32] = 'SafeMath: division by zero'
                                                _24564 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24564] = 30
                                                mem[_24564 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > 0 / stor20:
                                                    _24757 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _24757 + 68] = mem[idx + _24564 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_24757 + 68] = mem[_24757 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _24757 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= 95 * 0 / stor20 / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if 0 / stor20 <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = 0 / stor20
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, 0 / stor20
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = 0 / stor20
                                                    emit Withdraw((0 / stor20), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                            else:
                                                if (0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / (0 / stor20) - stor31[stor18[s].field_0].field_256 != uint16(teamRewardFee + farmerRewardFee):
                                                    revert with 0, 32, 33, 0x1f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _23792 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_23792] = 26
                                                mem[_23792 + 32] = 'SafeMath: division by zero'
                                                _24653 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24653] = 30
                                                mem[_24653 + 32] = 'SafeMath: subtraction overflow'
                                                if (0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000 > 0 / stor20:
                                                    _24881 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _24881 + 68] = mem[idx + _24653 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_24881 + 68] = mem[_24881 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _24881 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= (95 * 0 / stor20) - (95 * (0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if (0 / stor20) - ((0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = (0 / stor20) - ((0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, (0 / stor20) - ((0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = (0 / stor20) - ((0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    emit Withdraw(((0 / stor20) - ((0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                        else:
                                            require ext_code.size(tokenAddress)
                                            call tokenAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args stor4, (0 / stor20 * teamRewardFee) - (stor31[stor18[s].field_0].field_256 * teamRewardFee) / 10000
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0]
                                            sub_2445aefb--
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _18943 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_18943] = 30
                                            mem[_18943 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor19:
                                                _19267 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _19267 + 68] = mem[idx + _18943 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_19267 + 68] = mem[_19267 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _19267 + -mem[64] + 100
                                            stor19 -= stor31[stor18[s].field_0].field_256
                                            _19805 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_19805] = 30
                                            mem[_19805 + 32] = 'SafeMath: subtraction overflow'
                                            if balanceOf[stor18[s].field_0] > stor20:
                                                _20274 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _20274 + 68] = mem[idx + _19805 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_20274 + 68] = mem[_20274 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _20274 + -mem[64] + 100
                                            stor20 -= balanceOf[stor18[s].field_0]
                                            mem[0] = stor18[s].field_0
                                            stor21[stor18[s].field_0] = 0
                                            mem[32] = 31
                                            _20962 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_20962] = 30
                                            mem[_20962 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor8:
                                                _21564 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _21564 + 68] = mem[idx + _20962 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_21564 + 68] = mem[_21564 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _21564 + -mem[64] + 100
                                            stor8 -= stor31[stor18[s].field_0].field_256
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _22366 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_22366] = 30
                                            mem[_22366 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_512 > stor9:
                                                _22900 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _22900 + 68] = mem[idx + _22366 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_22900 + 68] = mem[_22900 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _22900 + -mem[64] + 100
                                            stor9 -= stor31[stor18[s].field_0].field_512
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            stor31[stor18[s].field_0].field_256 = 0
                                            stor31[stor18[s].field_0].field_512 = 0
                                            stor31[stor18[s].field_0].field_0 = 0
                                            stor10--
                                            investorCount--
                                            if not (0 / stor20) - stor31[stor18[s].field_0].field_256:
                                                _24265 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24265] = 26
                                                mem[_24265 + 32] = 'SafeMath: division by zero'
                                                _25001 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_25001] = 30
                                                mem[_25001 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > 0 / stor20:
                                                    _25274 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _25274 + 68] = mem[idx + _25001 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_25274 + 68] = mem[_25274 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _25274 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= 95 * 0 / stor20 / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if 0 / stor20 <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = 0 / stor20
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, 0 / stor20
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = 0 / stor20
                                                    emit Withdraw((0 / stor20), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                            else:
                                                if (0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / (0 / stor20) - stor31[stor18[s].field_0].field_256 != uint16(teamRewardFee + farmerRewardFee):
                                                    revert with 0, 32, 33, 0x1f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _24436 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24436] = 26
                                                mem[_24436 + 32] = 'SafeMath: division by zero'
                                                _25121 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_25121] = 30
                                                mem[_25121 + 32] = 'SafeMath: subtraction overflow'
                                                if (0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000 > 0 / stor20:
                                                    _25468 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _25468 + 68] = mem[idx + _25121 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_25468 + 68] = mem[_25468 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _25468 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= (95 * 0 / stor20) - (95 * (0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if (0 / stor20) - ((0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = (0 / stor20) - ((0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, (0 / stor20) - ((0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = (0 / stor20) - ((0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    emit Withdraw(((0 / stor20) - ((0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                else:
                                    require ext_code.size(tokenAddress)
                                    call tokenAddress.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args farmerAddress, 0
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_call.return_data[0]
                                    if not (0 / stor20) - stor31[stor18[s].field_0].field_256:
                                        _17965 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_17965] = 26
                                        mem[_17965 + 32] = 'SafeMath: division by zero'
                                        require ext_code.size(tokenAddress)
                                        staticcall tokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(this.address)
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if 0 > ext_call.return_data[0]:
                                            emit 0x658fe604: 0, stor4
                                            sub_2445aefb--
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _18823 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_18823] = 30
                                            mem[_18823 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor19:
                                                _19101 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _19101 + 68] = mem[idx + _18823 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_19101 + 68] = mem[_19101 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _19101 + -mem[64] + 100
                                            stor19 -= stor31[stor18[s].field_0].field_256
                                            _19640 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_19640] = 30
                                            mem[_19640 + 32] = 'SafeMath: subtraction overflow'
                                            if balanceOf[stor18[s].field_0] > stor20:
                                                _20022 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _20022 + 68] = mem[idx + _19640 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_20022 + 68] = mem[_20022 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _20022 + -mem[64] + 100
                                            stor20 -= balanceOf[stor18[s].field_0]
                                            mem[0] = stor18[s].field_0
                                            stor21[stor18[s].field_0] = 0
                                            mem[32] = 31
                                            _20711 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_20711] = 30
                                            mem[_20711 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor8:
                                                _21296 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _21296 + 68] = mem[idx + _20711 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_21296 + 68] = mem[_21296 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _21296 + -mem[64] + 100
                                            stor8 -= stor31[stor18[s].field_0].field_256
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _22071 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_22071] = 30
                                            mem[_22071 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_512 > stor9:
                                                _22662 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _22662 + 68] = mem[idx + _22071 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_22662 + 68] = mem[_22662 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _22662 + -mem[64] + 100
                                            stor9 -= stor31[stor18[s].field_0].field_512
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            stor31[stor18[s].field_0].field_256 = 0
                                            stor31[stor18[s].field_0].field_512 = 0
                                            stor31[stor18[s].field_0].field_0 = 0
                                            stor10--
                                            investorCount--
                                            if not (0 / stor20) - stor31[stor18[s].field_0].field_256:
                                                _24110 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24110] = 26
                                                mem[_24110 + 32] = 'SafeMath: division by zero'
                                                _24889 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24889] = 30
                                                mem[_24889 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > 0 / stor20:
                                                    _25130 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _25130 + 68] = mem[idx + _24889 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_25130 + 68] = mem[_25130 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _25130 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= 95 * 0 / stor20 / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if 0 / stor20 <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = 0 / stor20
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, 0 / stor20
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = 0 / stor20
                                                    emit Withdraw((0 / stor20), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                            else:
                                                if (0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / (0 / stor20) - stor31[stor18[s].field_0].field_256 != uint16(teamRewardFee + farmerRewardFee):
                                                    revert with 0, 32, 33, 0x1f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _24270 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24270] = 26
                                                mem[_24270 + 32] = 'SafeMath: division by zero'
                                                _25009 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_25009] = 30
                                                mem[_25009 + 32] = 'SafeMath: subtraction overflow'
                                                if (0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000 > 0 / stor20:
                                                    _25286 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _25286 + 68] = mem[idx + _25009 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_25286 + 68] = mem[_25286 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _25286 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= (95 * 0 / stor20) - (95 * (0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if (0 / stor20) - ((0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = (0 / stor20) - ((0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, (0 / stor20) - ((0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = (0 / stor20) - ((0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    emit Withdraw(((0 / stor20) - ((0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                        else:
                                            require ext_code.size(tokenAddress)
                                            call tokenAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args stor4, 0
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0]
                                            sub_2445aefb--
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _19467 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_19467] = 30
                                            mem[_19467 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor19:
                                                _19816 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _19816 + 68] = mem[idx + _19467 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_19816 + 68] = mem[_19816 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _19816 + -mem[64] + 100
                                            stor19 -= stor31[stor18[s].field_0].field_256
                                            _20504 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_20504] = 30
                                            mem[_20504 + 32] = 'SafeMath: subtraction overflow'
                                            if balanceOf[stor18[s].field_0] > stor20:
                                                _20974 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _20974 + 68] = mem[idx + _20504 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_20974 + 68] = mem[_20974 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _20974 + -mem[64] + 100
                                            stor20 -= balanceOf[stor18[s].field_0]
                                            mem[0] = stor18[s].field_0
                                            stor21[stor18[s].field_0] = 0
                                            mem[32] = 31
                                            _21812 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_21812] = 30
                                            mem[_21812 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor8:
                                                _22377 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _22377 + 68] = mem[idx + _21812 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_22377 + 68] = mem[_22377 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _22377 + -mem[64] + 100
                                            stor8 -= stor31[stor18[s].field_0].field_256
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _23118 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_23118] = 30
                                            mem[_23118 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_512 > stor9:
                                                _23573 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _23573 + 68] = mem[idx + _23118 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_23573 + 68] = mem[_23573 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _23573 + -mem[64] + 100
                                            stor9 -= stor31[stor18[s].field_0].field_512
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            stor31[stor18[s].field_0].field_256 = 0
                                            stor31[stor18[s].field_0].field_512 = 0
                                            stor31[stor18[s].field_0].field_0 = 0
                                            stor10--
                                            investorCount--
                                            if not (0 / stor20) - stor31[stor18[s].field_0].field_256:
                                                _24659 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24659] = 26
                                                mem[_24659 + 32] = 'SafeMath: division by zero'
                                                _25485 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_25485] = 30
                                                mem[_25485 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > 0 / stor20:
                                                    _25983 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _25983 + 68] = mem[idx + _25485 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_25983 + 68] = mem[_25983 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _25983 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= 95 * 0 / stor20 / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if 0 / stor20 <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = 0 / stor20
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, 0 / stor20
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = 0 / stor20
                                                    emit Withdraw((0 / stor20), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                            else:
                                                if (0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / (0 / stor20) - stor31[stor18[s].field_0].field_256 != uint16(teamRewardFee + farmerRewardFee):
                                                    revert with 0, 32, 33, 0x1f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _24764 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24764] = 26
                                                mem[_24764 + 32] = 'SafeMath: division by zero'
                                                _25715 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_25715] = 30
                                                mem[_25715 + 32] = 'SafeMath: subtraction overflow'
                                                if (0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000 > 0 / stor20:
                                                    _26297 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _26297 + 68] = mem[idx + _25715 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_26297 + 68] = mem[_26297 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _26297 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= (95 * 0 / stor20) - (95 * (0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if (0 / stor20) - ((0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = (0 / stor20) - ((0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, (0 / stor20) - ((0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = (0 / stor20) - ((0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    emit Withdraw(((0 / stor20) - ((0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                    else:
                                        if (0 / stor20 * teamRewardFee) - (stor31[stor18[s].field_0].field_256 * teamRewardFee) / (0 / stor20) - stor31[stor18[s].field_0].field_256 != teamRewardFee:
                                            revert with 0, 32, 33, 0x1f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _18005 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_18005] = 26
                                        mem[_18005 + 32] = 'SafeMath: division by zero'
                                        require ext_code.size(tokenAddress)
                                        staticcall tokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(this.address)
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if (0 / stor20 * teamRewardFee) - (stor31[stor18[s].field_0].field_256 * teamRewardFee) / 10000 > ext_call.return_data[0]:
                                            emit 0x658fe604: ((0 / stor20 * teamRewardFee) - (stor31[stor18[s].field_0].field_256 * teamRewardFee) / 10000), stor4
                                            sub_2445aefb--
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _18947 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_18947] = 30
                                            mem[_18947 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor19:
                                                _19273 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _19273 + 68] = mem[idx + _18947 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_19273 + 68] = mem[_19273 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _19273 + -mem[64] + 100
                                            stor19 -= stor31[stor18[s].field_0].field_256
                                            _19812 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_19812] = 30
                                            mem[_19812 + 32] = 'SafeMath: subtraction overflow'
                                            if balanceOf[stor18[s].field_0] > stor20:
                                                _20280 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _20280 + 68] = mem[idx + _19812 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_20280 + 68] = mem[_20280 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _20280 + -mem[64] + 100
                                            stor20 -= balanceOf[stor18[s].field_0]
                                            mem[0] = stor18[s].field_0
                                            stor21[stor18[s].field_0] = 0
                                            mem[32] = 31
                                            _20969 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_20969] = 30
                                            mem[_20969 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor8:
                                                _21570 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _21570 + 68] = mem[idx + _20969 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_21570 + 68] = mem[_21570 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _21570 + -mem[64] + 100
                                            stor8 -= stor31[stor18[s].field_0].field_256
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _22372 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_22372] = 30
                                            mem[_22372 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_512 > stor9:
                                                _22903 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _22903 + 68] = mem[idx + _22372 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_22903 + 68] = mem[_22903 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _22903 + -mem[64] + 100
                                            stor9 -= stor31[stor18[s].field_0].field_512
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            stor31[stor18[s].field_0].field_256 = 0
                                            stor31[stor18[s].field_0].field_512 = 0
                                            stor31[stor18[s].field_0].field_0 = 0
                                            stor10--
                                            investorCount--
                                            if not (0 / stor20) - stor31[stor18[s].field_0].field_256:
                                                _24267 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24267] = 26
                                                mem[_24267 + 32] = 'SafeMath: division by zero'
                                                _25008 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_25008] = 30
                                                mem[_25008 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > 0 / stor20:
                                                    _25283 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _25283 + 68] = mem[idx + _25008 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_25283 + 68] = mem[_25283 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _25283 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= 95 * 0 / stor20 / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if 0 / stor20 <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = 0 / stor20
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, 0 / stor20
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = 0 / stor20
                                                    emit Withdraw((0 / stor20), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                            else:
                                                if (0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / (0 / stor20) - stor31[stor18[s].field_0].field_256 != uint16(teamRewardFee + farmerRewardFee):
                                                    revert with 0, 32, 33, 0x1f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _24438 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24438] = 26
                                                mem[_24438 + 32] = 'SafeMath: division by zero'
                                                _25129 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_25129] = 30
                                                mem[_25129 + 32] = 'SafeMath: subtraction overflow'
                                                if (0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000 > 0 / stor20:
                                                    _25479 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _25479 + 68] = mem[idx + _25129 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_25479 + 68] = mem[_25479 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _25479 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= (95 * 0 / stor20) - (95 * (0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if (0 / stor20) - ((0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = (0 / stor20) - ((0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, (0 / stor20) - ((0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = (0 / stor20) - ((0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    emit Withdraw(((0 / stor20) - ((0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                        else:
                                            require ext_code.size(tokenAddress)
                                            call tokenAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args stor4, (0 / stor20 * teamRewardFee) - (stor31[stor18[s].field_0].field_256 * teamRewardFee) / 10000
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0]
                                            sub_2445aefb--
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _19639 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_19639] = 30
                                            mem[_19639 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor19:
                                                _20019 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _20019 + 68] = mem[idx + _19639 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_20019 + 68] = mem[_20019 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _20019 + -mem[64] + 100
                                            stor19 -= stor31[stor18[s].field_0].field_256
                                            _20708 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_20708] = 30
                                            mem[_20708 + 32] = 'SafeMath: subtraction overflow'
                                            if balanceOf[stor18[s].field_0] > stor20:
                                                _21293 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _21293 + 68] = mem[idx + _20708 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_21293 + 68] = mem[_21293 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _21293 + -mem[64] + 100
                                            stor20 -= balanceOf[stor18[s].field_0]
                                            mem[0] = stor18[s].field_0
                                            stor21[stor18[s].field_0] = 0
                                            mem[32] = 31
                                            _22068 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_22068] = 30
                                            mem[_22068 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor8:
                                                _22659 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _22659 + 68] = mem[idx + _22068 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_22659 + 68] = mem[_22659 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _22659 + -mem[64] + 100
                                            stor8 -= stor31[stor18[s].field_0].field_256
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _23335 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_23335] = 30
                                            mem[_23335 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_512 > stor9:
                                                _23795 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _23795 + 68] = mem[idx + _23335 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_23795 + 68] = mem[_23795 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _23795 + -mem[64] + 100
                                            stor9 -= stor31[stor18[s].field_0].field_512
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            stor31[stor18[s].field_0].field_256 = 0
                                            stor31[stor18[s].field_0].field_512 = 0
                                            stor31[stor18[s].field_0].field_0 = 0
                                            stor10--
                                            investorCount--
                                            if not (0 / stor20) - stor31[stor18[s].field_0].field_256:
                                                _24763 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24763] = 26
                                                mem[_24763 + 32] = 'SafeMath: division by zero'
                                                _25709 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_25709] = 30
                                                mem[_25709 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > 0 / stor20:
                                                    _26291 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _26291 + 68] = mem[idx + _25709 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_26291 + 68] = mem[_26291 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _26291 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= 95 * 0 / stor20 / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if 0 / stor20 <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = 0 / stor20
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, 0 / stor20
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = 0 / stor20
                                                    emit Withdraw((0 / stor20), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                            else:
                                                if (0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / (0 / stor20) - stor31[stor18[s].field_0].field_256 != uint16(teamRewardFee + farmerRewardFee):
                                                    revert with 0, 32, 33, 0x1f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _24888 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24888] = 26
                                                mem[_24888 + 32] = 'SafeMath: division by zero'
                                                _25978 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_25978] = 30
                                                mem[_25978 + 32] = 'SafeMath: subtraction overflow'
                                                if (0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000 > 0 / stor20:
                                                    _26632 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _26632 + 68] = mem[idx + _25978 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_26632 + 68] = mem[_26632 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _26632 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= (95 * 0 / stor20) - (95 * (0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if (0 / stor20) - ((0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = (0 / stor20) - ((0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, (0 / stor20) - ((0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = (0 / stor20) - ((0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    emit Withdraw(((0 / stor20) - ((0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                            else:
                                if (0 / stor20 * farmerRewardFee) - (stor31[stor18[s].field_0].field_256 * farmerRewardFee) / (0 / stor20) - stor31[stor18[s].field_0].field_256 != farmerRewardFee:
                                    revert with 0, 32, 33, 0x1f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                _17215 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_17215] = 26
                                mem[_17215 + 32] = 'SafeMath: division by zero'
                                require ext_code.size(tokenAddress)
                                staticcall tokenAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args address(this.address)
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if (0 / stor20 * farmerRewardFee) - (stor31[stor18[s].field_0].field_256 * farmerRewardFee) / 10000 > ext_call.return_data[0]:
                                    mem[0] = stor18[s].field_0
                                    emit 0x658fe604: ((0 / stor20 * farmerRewardFee) - (stor31[stor18[s].field_0].field_256 * farmerRewardFee) / 10000), farmerAddress
                                    if not (0 / stor20) - stor31[stor18[s].field_0].field_256:
                                        _17857 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_17857] = 26
                                        mem[_17857 + 32] = 'SafeMath: division by zero'
                                        require ext_code.size(tokenAddress)
                                        staticcall tokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(this.address)
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if 0 > ext_call.return_data[0]:
                                            emit 0x658fe604: 0, stor4
                                            sub_2445aefb--
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _18417 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_18417] = 30
                                            mem[_18417 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor19:
                                                _18670 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _18670 + 68] = mem[idx + _18417 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_18670 + 68] = mem[_18670 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _18670 + -mem[64] + 100
                                            stor19 -= stor31[stor18[s].field_0].field_256
                                            _19089 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_19089] = 30
                                            mem[_19089 + 32] = 'SafeMath: subtraction overflow'
                                            if balanceOf[stor18[s].field_0] > stor20:
                                                _19454 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _19454 + 68] = mem[idx + _19089 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_19454 + 68] = mem[_19454 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _19454 + -mem[64] + 100
                                            stor20 -= balanceOf[stor18[s].field_0]
                                            mem[0] = stor18[s].field_0
                                            stor21[stor18[s].field_0] = 0
                                            mem[32] = 31
                                            _19999 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_19999] = 30
                                            mem[_19999 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor8:
                                                _20487 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _20487 + 68] = mem[idx + _19999 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_20487 + 68] = mem[_20487 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _20487 + -mem[64] + 100
                                            stor8 -= stor31[stor18[s].field_0].field_256
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _21272 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_21272] = 30
                                            mem[_21272 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_512 > stor9:
                                                _21793 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _21793 + 68] = mem[idx + _21272 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_21793 + 68] = mem[_21793 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _21793 + -mem[64] + 100
                                            stor9 -= stor31[stor18[s].field_0].field_512
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            stor31[stor18[s].field_0].field_256 = 0
                                            stor31[stor18[s].field_0].field_512 = 0
                                            stor31[stor18[s].field_0].field_0 = 0
                                            stor10--
                                            investorCount--
                                            if not (0 / stor20) - stor31[stor18[s].field_0].field_256:
                                                _23553 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_23553] = 26
                                                mem[_23553 + 32] = 'SafeMath: division by zero'
                                                _24561 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24561] = 30
                                                mem[_24561 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > 0 / stor20:
                                                    _24751 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _24751 + 68] = mem[idx + _24561 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_24751 + 68] = mem[_24751 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _24751 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= 95 * 0 / stor20 / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if 0 / stor20 <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = 0 / stor20
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, 0 / stor20
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = 0 / stor20
                                                    emit Withdraw((0 / stor20), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                            else:
                                                if (0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / (0 / stor20) - stor31[stor18[s].field_0].field_256 != uint16(teamRewardFee + farmerRewardFee):
                                                    revert with 0, 32, 33, 0x1f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _23783 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_23783] = 26
                                                mem[_23783 + 32] = 'SafeMath: division by zero'
                                                _24650 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24650] = 30
                                                mem[_24650 + 32] = 'SafeMath: subtraction overflow'
                                                if (0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000 > 0 / stor20:
                                                    _24876 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _24876 + 68] = mem[idx + _24650 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_24876 + 68] = mem[_24876 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _24876 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= (95 * 0 / stor20) - (95 * (0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if (0 / stor20) - ((0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = (0 / stor20) - ((0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, (0 / stor20) - ((0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = (0 / stor20) - ((0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    emit Withdraw(((0 / stor20) - ((0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                        else:
                                            require ext_code.size(tokenAddress)
                                            call tokenAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args stor4, 0
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0]
                                            sub_2445aefb--
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _18937 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_18937] = 30
                                            mem[_18937 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor19:
                                                _19260 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _19260 + 68] = mem[idx + _18937 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_19260 + 68] = mem[_19260 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _19260 + -mem[64] + 100
                                            stor19 -= stor31[stor18[s].field_0].field_256
                                            _19794 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_19794] = 30
                                            mem[_19794 + 32] = 'SafeMath: subtraction overflow'
                                            if balanceOf[stor18[s].field_0] > stor20:
                                                _20263 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _20263 + 68] = mem[idx + _19794 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_20263 + 68] = mem[_20263 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _20263 + -mem[64] + 100
                                            stor20 -= balanceOf[stor18[s].field_0]
                                            mem[0] = stor18[s].field_0
                                            stor21[stor18[s].field_0] = 0
                                            mem[32] = 31
                                            _20947 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_20947] = 30
                                            mem[_20947 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor8:
                                                _21553 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _21553 + 68] = mem[idx + _20947 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_21553 + 68] = mem[_21553 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _21553 + -mem[64] + 100
                                            stor8 -= stor31[stor18[s].field_0].field_256
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _22352 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_22352] = 30
                                            mem[_22352 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_512 > stor9:
                                                _22889 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _22889 + 68] = mem[idx + _22352 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_22889 + 68] = mem[_22889 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _22889 + -mem[64] + 100
                                            stor9 -= stor31[stor18[s].field_0].field_512
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            stor31[stor18[s].field_0].field_256 = 0
                                            stor31[stor18[s].field_0].field_512 = 0
                                            stor31[stor18[s].field_0].field_0 = 0
                                            stor10--
                                            investorCount--
                                            if not (0 / stor20) - stor31[stor18[s].field_0].field_256:
                                                _24257 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24257] = 26
                                                mem[_24257 + 32] = 'SafeMath: division by zero'
                                                _24995 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24995] = 30
                                                mem[_24995 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > 0 / stor20:
                                                    _25263 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _25263 + 68] = mem[idx + _24995 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_25263 + 68] = mem[_25263 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _25263 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= 95 * 0 / stor20 / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if 0 / stor20 <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = 0 / stor20
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, 0 / stor20
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = 0 / stor20
                                                    emit Withdraw((0 / stor20), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                            else:
                                                if (0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / (0 / stor20) - stor31[stor18[s].field_0].field_256 != uint16(teamRewardFee + farmerRewardFee):
                                                    revert with 0, 32, 33, 0x1f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _24430 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24430] = 26
                                                mem[_24430 + 32] = 'SafeMath: division by zero'
                                                _25113 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_25113] = 30
                                                mem[_25113 + 32] = 'SafeMath: subtraction overflow'
                                                if (0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000 > 0 / stor20:
                                                    _25456 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _25456 + 68] = mem[idx + _25113 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_25456 + 68] = mem[_25456 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _25456 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= (95 * 0 / stor20) - (95 * (0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if (0 / stor20) - ((0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = (0 / stor20) - ((0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, (0 / stor20) - ((0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = (0 / stor20) - ((0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    emit Withdraw(((0 / stor20) - ((0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                    else:
                                        if (0 / stor20 * teamRewardFee) - (stor31[stor18[s].field_0].field_256 * teamRewardFee) / (0 / stor20) - stor31[stor18[s].field_0].field_256 != teamRewardFee:
                                            revert with 0, 32, 33, 0x1f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _17900 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_17900] = 26
                                        mem[_17900 + 32] = 'SafeMath: division by zero'
                                        require ext_code.size(tokenAddress)
                                        staticcall tokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(this.address)
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if (0 / stor20 * teamRewardFee) - (stor31[stor18[s].field_0].field_256 * teamRewardFee) / 10000 > ext_call.return_data[0]:
                                            emit 0x658fe604: ((0 / stor20 * teamRewardFee) - (stor31[stor18[s].field_0].field_256 * teamRewardFee) / 10000), stor4
                                            sub_2445aefb--
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _18524 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_18524] = 30
                                            mem[_18524 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor19:
                                                _18812 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _18812 + 68] = mem[idx + _18524 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_18812 + 68] = mem[_18812 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _18812 + -mem[64] + 100
                                            stor19 -= stor31[stor18[s].field_0].field_256
                                            _19256 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_19256] = 30
                                            mem[_19256 + 32] = 'SafeMath: subtraction overflow'
                                            if balanceOf[stor18[s].field_0] > stor20:
                                                _19624 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _19624 + 68] = mem[idx + _19256 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_19624 + 68] = mem[_19624 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _19624 + -mem[64] + 100
                                            stor20 -= balanceOf[stor18[s].field_0]
                                            mem[0] = stor18[s].field_0
                                            stor21[stor18[s].field_0] = 0
                                            mem[32] = 31
                                            _20258 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_20258] = 30
                                            mem[_20258 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor8:
                                                _20684 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _20684 + 68] = mem[idx + _20258 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_20684 + 68] = mem[_20684 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _20684 + -mem[64] + 100
                                            stor8 -= stor31[stor18[s].field_0].field_256
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _21548 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_21548] = 30
                                            mem[_21548 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_512 > stor9:
                                                _22046 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _22046 + 68] = mem[idx + _21548 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_22046 + 68] = mem[_22046 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _22046 + -mem[64] + 100
                                            stor9 -= stor31[stor18[s].field_0].field_512
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            stor31[stor18[s].field_0].field_256 = 0
                                            stor31[stor18[s].field_0].field_512 = 0
                                            stor31[stor18[s].field_0].field_0 = 0
                                            stor10--
                                            investorCount--
                                            if not (0 / stor20) - stor31[stor18[s].field_0].field_256:
                                                _23780 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_23780] = 26
                                                mem[_23780 + 32] = 'SafeMath: division by zero'
                                                _24649 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24649] = 30
                                                mem[_24649 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > 0 / stor20:
                                                    _24873 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _24873 + 68] = mem[idx + _24649 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_24873 + 68] = mem[_24873 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _24873 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= 95 * 0 / stor20 / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if 0 / stor20 <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = 0 / stor20
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, 0 / stor20
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = 0 / stor20
                                                    emit Withdraw((0 / stor20), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                            else:
                                                if (0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / (0 / stor20) - stor31[stor18[s].field_0].field_256 != uint16(teamRewardFee + farmerRewardFee):
                                                    revert with 0, 32, 33, 0x1f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _23960 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_23960] = 26
                                                mem[_23960 + 32] = 'SafeMath: division by zero'
                                                _24750 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24750] = 30
                                                mem[_24750 + 32] = 'SafeMath: subtraction overflow'
                                                if (0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000 > 0 / stor20:
                                                    _24989 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _24989 + 68] = mem[idx + _24750 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_24989 + 68] = mem[_24989 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _24989 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= (95 * 0 / stor20) - (95 * (0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if (0 / stor20) - ((0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = (0 / stor20) - ((0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, (0 / stor20) - ((0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = (0 / stor20) - ((0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    emit Withdraw(((0 / stor20) - ((0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                        else:
                                            require ext_code.size(tokenAddress)
                                            call tokenAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args stor4, (0 / stor20 * teamRewardFee) - (stor31[stor18[s].field_0].field_256 * teamRewardFee) / 10000
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0]
                                            sub_2445aefb--
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _19088 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_19088] = 30
                                            mem[_19088 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor19:
                                                _19451 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _19451 + 68] = mem[idx + _19088 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_19451 + 68] = mem[_19451 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _19451 + -mem[64] + 100
                                            stor19 -= stor31[stor18[s].field_0].field_256
                                            _19996 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_19996] = 30
                                            mem[_19996 + 32] = 'SafeMath: subtraction overflow'
                                            if balanceOf[stor18[s].field_0] > stor20:
                                                _20484 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _20484 + 68] = mem[idx + _19996 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_20484 + 68] = mem[_20484 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _20484 + -mem[64] + 100
                                            stor20 -= balanceOf[stor18[s].field_0]
                                            mem[0] = stor18[s].field_0
                                            stor21[stor18[s].field_0] = 0
                                            mem[32] = 31
                                            _21269 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_21269] = 30
                                            mem[_21269 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor8:
                                                _21790 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _21790 + 68] = mem[idx + _21269 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_21790 + 68] = mem[_21790 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _21790 + -mem[64] + 100
                                            stor8 -= stor31[stor18[s].field_0].field_256
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _22637 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_22637] = 30
                                            mem[_22637 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_512 > stor9:
                                                _23102 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _23102 + 68] = mem[idx + _22637 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_23102 + 68] = mem[_23102 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _23102 + -mem[64] + 100
                                            stor9 -= stor31[stor18[s].field_0].field_512
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            stor31[stor18[s].field_0].field_256 = 0
                                            stor31[stor18[s].field_0].field_512 = 0
                                            stor31[stor18[s].field_0].field_0 = 0
                                            stor10--
                                            investorCount--
                                            if not (0 / stor20) - stor31[stor18[s].field_0].field_256:
                                                _24429 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24429] = 26
                                                mem[_24429 + 32] = 'SafeMath: division by zero'
                                                _25107 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_25107] = 30
                                                mem[_25107 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > 0 / stor20:
                                                    _25450 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _25450 + 68] = mem[idx + _25107 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_25450 + 68] = mem[_25450 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _25450 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= 95 * 0 / stor20 / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if 0 / stor20 <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = 0 / stor20
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, 0 / stor20
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = 0 / stor20
                                                    emit Withdraw((0 / stor20), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                            else:
                                                if (0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / (0 / stor20) - stor31[stor18[s].field_0].field_256 != uint16(teamRewardFee + farmerRewardFee):
                                                    revert with 0, 32, 33, 0x1f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _24560 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24560] = 26
                                                mem[_24560 + 32] = 'SafeMath: division by zero'
                                                _25258 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_25258] = 30
                                                mem[_25258 + 32] = 'SafeMath: subtraction overflow'
                                                if (0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000 > 0 / stor20:
                                                    _25671 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _25671 + 68] = mem[idx + _25258 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_25671 + 68] = mem[_25671 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _25671 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= (95 * 0 / stor20) - (95 * (0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if (0 / stor20) - ((0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = (0 / stor20) - ((0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, (0 / stor20) - ((0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = (0 / stor20) - ((0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    emit Withdraw(((0 / stor20) - ((0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                else:
                                    require ext_code.size(tokenAddress)
                                    call tokenAddress.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args farmerAddress, (0 / stor20 * farmerRewardFee) - (stor31[stor18[s].field_0].field_256 * farmerRewardFee) / 10000
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_call.return_data[0]
                                    if not (0 / stor20) - stor31[stor18[s].field_0].field_256:
                                        _18002 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_18002] = 26
                                        mem[_18002 + 32] = 'SafeMath: division by zero'
                                        require ext_code.size(tokenAddress)
                                        staticcall tokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(this.address)
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if 0 > ext_call.return_data[0]:
                                            emit 0x658fe604: 0, stor4
                                            sub_2445aefb--
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _18940 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_18940] = 30
                                            mem[_18940 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor19:
                                                _19263 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _19263 + 68] = mem[idx + _18940 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_19263 + 68] = mem[_19263 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _19263 + -mem[64] + 100
                                            stor19 -= stor31[stor18[s].field_0].field_256
                                            _19799 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_19799] = 30
                                            mem[_19799 + 32] = 'SafeMath: subtraction overflow'
                                            if balanceOf[stor18[s].field_0] > stor20:
                                                _20270 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _20270 + 68] = mem[idx + _19799 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_20270 + 68] = mem[_20270 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _20270 + -mem[64] + 100
                                            stor20 -= balanceOf[stor18[s].field_0]
                                            mem[0] = stor18[s].field_0
                                            stor21[stor18[s].field_0] = 0
                                            mem[32] = 31
                                            _20956 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_20956] = 30
                                            mem[_20956 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor8:
                                                _21560 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _21560 + 68] = mem[idx + _20956 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_21560 + 68] = mem[_21560 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _21560 + -mem[64] + 100
                                            stor8 -= stor31[stor18[s].field_0].field_256
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _22360 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_22360] = 30
                                            mem[_22360 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_512 > stor9:
                                                _22896 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _22896 + 68] = mem[idx + _22360 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_22896 + 68] = mem[_22896 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _22896 + -mem[64] + 100
                                            stor9 -= stor31[stor18[s].field_0].field_512
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            stor31[stor18[s].field_0].field_256 = 0
                                            stor31[stor18[s].field_0].field_512 = 0
                                            stor31[stor18[s].field_0].field_0 = 0
                                            stor10--
                                            investorCount--
                                            if not (0 / stor20) - stor31[stor18[s].field_0].field_256:
                                                _24262 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24262] = 26
                                                mem[_24262 + 32] = 'SafeMath: division by zero'
                                                _24997 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24997] = 30
                                                mem[_24997 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > 0 / stor20:
                                                    _25267 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _25267 + 68] = mem[idx + _24997 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_25267 + 68] = mem[_25267 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _25267 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= 95 * 0 / stor20 / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if 0 / stor20 <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = 0 / stor20
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, 0 / stor20
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = 0 / stor20
                                                    emit Withdraw((0 / stor20), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                            else:
                                                if (0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / (0 / stor20) - stor31[stor18[s].field_0].field_256 != uint16(teamRewardFee + farmerRewardFee):
                                                    revert with 0, 32, 33, 0x1f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _24434 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24434] = 26
                                                mem[_24434 + 32] = 'SafeMath: division by zero'
                                                _25115 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_25115] = 30
                                                mem[_25115 + 32] = 'SafeMath: subtraction overflow'
                                                if (0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000 > 0 / stor20:
                                                    _25462 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _25462 + 68] = mem[idx + _25115 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_25462 + 68] = mem[_25462 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _25462 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= (95 * 0 / stor20) - (95 * (0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if (0 / stor20) - ((0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = (0 / stor20) - ((0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, (0 / stor20) - ((0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = (0 / stor20) - ((0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    emit Withdraw(((0 / stor20) - ((0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                        else:
                                            require ext_code.size(tokenAddress)
                                            call tokenAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args stor4, 0
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0]
                                            sub_2445aefb--
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _19630 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_19630] = 30
                                            mem[_19630 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor19:
                                                _20007 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _20007 + 68] = mem[idx + _19630 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_20007 + 68] = mem[_20007 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _20007 + -mem[64] + 100
                                            stor19 -= stor31[stor18[s].field_0].field_256
                                            _20694 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_20694] = 30
                                            mem[_20694 + 32] = 'SafeMath: subtraction overflow'
                                            if balanceOf[stor18[s].field_0] > stor20:
                                                _21281 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _21281 + 68] = mem[idx + _20694 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_21281 + 68] = mem[_21281 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _21281 + -mem[64] + 100
                                            stor20 -= balanceOf[stor18[s].field_0]
                                            mem[0] = stor18[s].field_0
                                            stor21[stor18[s].field_0] = 0
                                            mem[32] = 31
                                            _22056 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_22056] = 30
                                            mem[_22056 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor8:
                                                _22648 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _22648 + 68] = mem[idx + _22056 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_22648 + 68] = mem[_22648 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _22648 + -mem[64] + 100
                                            stor8 -= stor31[stor18[s].field_0].field_256
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _23323 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_23323] = 30
                                            mem[_23323 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_512 > stor9:
                                                _23789 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _23789 + 68] = mem[idx + _23323 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_23789 + 68] = mem[_23789 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _23789 + -mem[64] + 100
                                            stor9 -= stor31[stor18[s].field_0].field_512
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            stor31[stor18[s].field_0].field_256 = 0
                                            stor31[stor18[s].field_0].field_512 = 0
                                            stor31[stor18[s].field_0].field_0 = 0
                                            stor10--
                                            investorCount--
                                            if not (0 / stor20) - stor31[stor18[s].field_0].field_256:
                                                _24756 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24756] = 26
                                                mem[_24756 + 32] = 'SafeMath: division by zero'
                                                _25688 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_25688] = 30
                                                mem[_25688 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > 0 / stor20:
                                                    _26274 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _26274 + 68] = mem[idx + _25688 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_26274 + 68] = mem[_26274 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _26274 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= 95 * 0 / stor20 / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if 0 / stor20 <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = 0 / stor20
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, 0 / stor20
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = 0 / stor20
                                                    emit Withdraw((0 / stor20), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                            else:
                                                if (0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / (0 / stor20) - stor31[stor18[s].field_0].field_256 != uint16(teamRewardFee + farmerRewardFee):
                                                    revert with 0, 32, 33, 0x1f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _24880 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24880] = 26
                                                mem[_24880 + 32] = 'SafeMath: division by zero'
                                                _25958 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_25958] = 30
                                                mem[_25958 + 32] = 'SafeMath: subtraction overflow'
                                                if (0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000 > 0 / stor20:
                                                    _26611 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _26611 + 68] = mem[idx + _25958 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_26611 + 68] = mem[_26611 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _26611 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= (95 * 0 / stor20) - (95 * (0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if (0 / stor20) - ((0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = (0 / stor20) - ((0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, (0 / stor20) - ((0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = (0 / stor20) - ((0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    emit Withdraw(((0 / stor20) - ((0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                    else:
                                        if (0 / stor20 * teamRewardFee) - (stor31[stor18[s].field_0].field_256 * teamRewardFee) / (0 / stor20) - stor31[stor18[s].field_0].field_256 != teamRewardFee:
                                            revert with 0, 32, 33, 0x1f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _18052 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_18052] = 26
                                        mem[_18052 + 32] = 'SafeMath: division by zero'
                                        require ext_code.size(tokenAddress)
                                        staticcall tokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(this.address)
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if (0 / stor20 * teamRewardFee) - (stor31[stor18[s].field_0].field_256 * teamRewardFee) / 10000 > ext_call.return_data[0]:
                                            emit 0x658fe604: ((0 / stor20 * teamRewardFee) - (stor31[stor18[s].field_0].field_256 * teamRewardFee) / 10000), stor4
                                            sub_2445aefb--
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _19092 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_19092] = 30
                                            mem[_19092 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor19:
                                                _19457 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _19457 + 68] = mem[idx + _19092 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_19457 + 68] = mem[_19457 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _19457 + -mem[64] + 100
                                            stor19 -= stor31[stor18[s].field_0].field_256
                                            _20003 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_20003] = 30
                                            mem[_20003 + 32] = 'SafeMath: subtraction overflow'
                                            if balanceOf[stor18[s].field_0] > stor20:
                                                _20490 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _20490 + 68] = mem[idx + _20003 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_20490 + 68] = mem[_20490 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _20490 + -mem[64] + 100
                                            stor20 -= balanceOf[stor18[s].field_0]
                                            mem[0] = stor18[s].field_0
                                            stor21[stor18[s].field_0] = 0
                                            mem[32] = 31
                                            _21276 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_21276] = 30
                                            mem[_21276 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor8:
                                                _21796 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _21796 + 68] = mem[idx + _21276 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_21796 + 68] = mem[_21796 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _21796 + -mem[64] + 100
                                            stor8 -= stor31[stor18[s].field_0].field_256
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _22643 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_22643] = 30
                                            mem[_22643 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_512 > stor9:
                                                _23105 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _23105 + 68] = mem[idx + _22643 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_23105 + 68] = mem[_23105 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _23105 + -mem[64] + 100
                                            stor9 -= stor31[stor18[s].field_0].field_512
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            stor31[stor18[s].field_0].field_256 = 0
                                            stor31[stor18[s].field_0].field_512 = 0
                                            stor31[stor18[s].field_0].field_0 = 0
                                            stor10--
                                            investorCount--
                                            if not (0 / stor20) - stor31[stor18[s].field_0].field_256:
                                                _24431 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24431] = 26
                                                mem[_24431 + 32] = 'SafeMath: division by zero'
                                                _25114 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_25114] = 30
                                                mem[_25114 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > 0 / stor20:
                                                    _25459 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _25459 + 68] = mem[idx + _25114 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_25459 + 68] = mem[_25459 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _25459 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= 95 * 0 / stor20 / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if 0 / stor20 <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = 0 / stor20
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, 0 / stor20
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = 0 / stor20
                                                    emit Withdraw((0 / stor20), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                            else:
                                                if (0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / (0 / stor20) - stor31[stor18[s].field_0].field_256 != uint16(teamRewardFee + farmerRewardFee):
                                                    revert with 0, 32, 33, 0x1f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _24562 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24562] = 26
                                                mem[_24562 + 32] = 'SafeMath: division by zero'
                                                _25266 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_25266] = 30
                                                mem[_25266 + 32] = 'SafeMath: subtraction overflow'
                                                if (0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000 > 0 / stor20:
                                                    _25682 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _25682 + 68] = mem[idx + _25266 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_25682 + 68] = mem[_25682 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _25682 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= (95 * 0 / stor20) - (95 * (0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if (0 / stor20) - ((0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = (0 / stor20) - ((0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, (0 / stor20) - ((0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = (0 / stor20) - ((0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    emit Withdraw(((0 / stor20) - ((0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                        else:
                                            require ext_code.size(tokenAddress)
                                            call tokenAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args stor4, (0 / stor20 * teamRewardFee) - (stor31[stor18[s].field_0].field_256 * teamRewardFee) / 10000
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0]
                                            sub_2445aefb--
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _19798 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_19798] = 30
                                            mem[_19798 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor19:
                                                _20267 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _20267 + 68] = mem[idx + _19798 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_20267 + 68] = mem[_20267 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _20267 + -mem[64] + 100
                                            stor19 -= stor31[stor18[s].field_0].field_256
                                            _20953 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_20953] = 30
                                            mem[_20953 + 32] = 'SafeMath: subtraction overflow'
                                            if balanceOf[stor18[s].field_0] > stor20:
                                                _21557 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _21557 + 68] = mem[idx + _20953 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_21557 + 68] = mem[_21557 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _21557 + -mem[64] + 100
                                            stor20 -= balanceOf[stor18[s].field_0]
                                            mem[0] = stor18[s].field_0
                                            stor21[stor18[s].field_0] = 0
                                            mem[32] = 31
                                            _22357 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_22357] = 30
                                            mem[_22357 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor8:
                                                _22893 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _22893 + 68] = mem[idx + _22357 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_22893 + 68] = mem[_22893 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _22893 + -mem[64] + 100
                                            stor8 -= stor31[stor18[s].field_0].field_256
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _23558 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_23558] = 30
                                            mem[_23558 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_512 > stor9:
                                                _23963 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _23963 + 68] = mem[idx + _23558 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_23963 + 68] = mem[_23963 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _23963 + -mem[64] + 100
                                            stor9 -= stor31[stor18[s].field_0].field_512
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            stor31[stor18[s].field_0].field_256 = 0
                                            stor31[stor18[s].field_0].field_512 = 0
                                            stor31[stor18[s].field_0].field_0 = 0
                                            stor10--
                                            investorCount--
                                            if not (0 / stor20) - stor31[stor18[s].field_0].field_256:
                                                _24879 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24879] = 26
                                                mem[_24879 + 32] = 'SafeMath: division by zero'
                                                _25952 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_25952] = 30
                                                mem[_25952 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > 0 / stor20:
                                                    _26605 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _26605 + 68] = mem[idx + _25952 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_26605 + 68] = mem[_26605 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _26605 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= 95 * 0 / stor20 / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if 0 / stor20 <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = 0 / stor20
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, 0 / stor20
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = 0 / stor20
                                                    emit Withdraw((0 / stor20), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                            else:
                                                if (0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / (0 / stor20) - stor31[stor18[s].field_0].field_256 != uint16(teamRewardFee + farmerRewardFee):
                                                    revert with 0, 32, 33, 0x1f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _24996 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24996] = 26
                                                mem[_24996 + 32] = 'SafeMath: division by zero'
                                                _26269 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_26269] = 30
                                                mem[_26269 + 32] = 'SafeMath: subtraction overflow'
                                                if (0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000 > 0 / stor20:
                                                    _26971 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _26971 + 68] = mem[idx + _26269 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_26971 + 68] = mem[_26971 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _26971 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= (95 * 0 / stor20) - (95 * (0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if (0 / stor20) - ((0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = (0 / stor20) - ((0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, (0 / stor20) - ((0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = (0 / stor20) - ((0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    emit Withdraw(((0 / stor20) - ((0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                else:
                    require ext_code.size(tokenAddress)
                    staticcall tokenAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not stor18[s].field_0:
                        revert with 0, 32, 33, 0x7342455032303a206275726e2066726f6d20746865207a65726f20616464726573, mem[mem[64] + 101 len 31]
                    _16982 = mem[64]
                    mem[64] = mem[64] + 96
                    mem[_16982] = 34
                    mem[_16982 + 32 len 34] = 0x6f42455032303a206275726e20616d6f756e7420657863656564732062616c616e63
                    mem[32] = 32
                    if balanceOf[stor18[s].field_0] > balanceOf[stor18[s].field_0]:
                        _17015 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 34
                        idx = 0
                        while idx < 34:
                            mem[idx + _17015 + 68] = mem[idx + _16982 + 32]
                            idx = idx + 32
                            continue 
                        mem[_17015 + 100] = mem[_17015 + 130 len 2]
                        revert with memory
                          from mem[64]
                           len _17015 + -mem[64] + 132
                    mem[0] = stor18[s].field_0
                    mem[32] = 32
                    balanceOf[stor18[s].field_0] = 0
                    _17047 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_17047] = 30
                    mem[_17047 + 32] = 'SafeMath: subtraction overflow'
                    if balanceOf[stor18[s].field_0] > _totalSupply:
                        _17082 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 30
                        idx = 0
                        while idx < 30:
                            mem[idx + _17082 + 68] = mem[idx + _17047 + 32]
                            idx = idx + 32
                            continue 
                        mem[_17082 + 68] = mem[_17082 + 70 len 30]
                        revert with memory
                          from mem[64]
                           len _17082 + -mem[64] + 100
                    _totalSupply -= balanceOf[stor18[s].field_0]
                    emit Transfer(balanceOf[stor18[s].field_0], stor18[s].field_0, 0);
                    stor25 -= ext_call.return_data[0]
                    sub_a14ed18a -= ext_call.return_data[0]
                    if ext_call.return_data[0] <= stor31[stor18[s].field_0].field_256:
                        sub_2445aefb--
                        mem[0] = stor18[s].field_0
                        mem[32] = 31
                        _17197 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_17197] = 30
                        mem[_17197 + 32] = 'SafeMath: subtraction overflow'
                        if stor31[stor18[s].field_0].field_256 > stor19:
                            _17243 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[idx + _17243 + 68] = mem[idx + _17197 + 32]
                                idx = idx + 32
                                continue 
                            mem[_17243 + 68] = mem[_17243 + 70 len 30]
                            revert with memory
                              from mem[64]
                               len _17243 + -mem[64] + 100
                        stor19 -= stor31[stor18[s].field_0].field_256
                        _17330 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_17330] = 30
                        mem[_17330 + 32] = 'SafeMath: subtraction overflow'
                        if balanceOf[stor18[s].field_0] > stor20:
                            _17417 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[idx + _17417 + 68] = mem[idx + _17330 + 32]
                                idx = idx + 32
                                continue 
                            mem[_17417 + 68] = mem[_17417 + 70 len 30]
                            revert with memory
                              from mem[64]
                               len _17417 + -mem[64] + 100
                        stor20 -= balanceOf[stor18[s].field_0]
                        mem[0] = stor18[s].field_0
                        stor21[stor18[s].field_0] = 0
                        mem[32] = 31
                        _17549 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_17549] = 30
                        mem[_17549 + 32] = 'SafeMath: subtraction overflow'
                        if stor31[stor18[s].field_0].field_256 > stor8:
                            _17660 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[idx + _17660 + 68] = mem[idx + _17549 + 32]
                                idx = idx + 32
                                continue 
                            mem[_17660 + 68] = mem[_17660 + 70 len 30]
                            revert with memory
                              from mem[64]
                               len _17660 + -mem[64] + 100
                        stor8 -= stor31[stor18[s].field_0].field_256
                        mem[0] = stor18[s].field_0
                        mem[32] = 31
                        _17812 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_17812] = 30
                        mem[_17812 + 32] = 'SafeMath: subtraction overflow'
                        if stor31[stor18[s].field_0].field_512 > stor9:
                            _17906 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[idx + _17906 + 68] = mem[idx + _17812 + 32]
                                idx = idx + 32
                                continue 
                            mem[_17906 + 68] = mem[_17906 + 70 len 30]
                            revert with memory
                              from mem[64]
                               len _17906 + -mem[64] + 100
                        stor9 -= stor31[stor18[s].field_0].field_512
                        mem[0] = stor18[s].field_0
                        mem[32] = 31
                        stor31[stor18[s].field_0].field_256 = 0
                        stor31[stor18[s].field_0].field_512 = 0
                        stor31[stor18[s].field_0].field_0 = 0
                        stor10--
                        investorCount--
                        _18157 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_18157] = 26
                        mem[_18157 + 32] = 'SafeMath: division by zero'
                        _18700 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_18700] = 30
                        mem[_18700 + 32] = 'SafeMath: subtraction overflow'
                        if 0 > ext_call.return_data[0]:
                            _18969 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[idx + _18969 + 68] = mem[idx + _18700 + 32]
                                idx = idx + 32
                                continue 
                            mem[_18969 + 68] = mem[_18969 + 70 len 30]
                            revert with memory
                              from mem[64]
                               len _18969 + -mem[64] + 100
                        require ext_code.size(tokenAddress)
                        staticcall tokenAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args address(this.address)
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] <= 95 * ext_call.return_data[0] / 100:
                            revert with 0, 'pool doesnot have enough balance'
                        require ext_code.size(tokenAddress)
                        staticcall tokenAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] > ext_call.return_data[0]:
                            require ext_code.size(tokenAddress)
                            staticcall tokenAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                        mem[mem[64] + 4] = stor18[s].field_0
                        mem[mem[64] + 36] = ext_call.return_data[0]
                        require ext_code.size(tokenAddress)
                        call tokenAddress.0xa9059cbb with:
                             gas gas_remaining wei
                            args stor18[s].field_0, ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_call.return_data[0]
                        mem[mem[64]] = ext_call.return_data[0]
                        emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                    else:
                        mem[0] = stor18[s].field_0
                        mem[32] = 31
                        if not ext_call.return_data[0] - stor31[stor18[s].field_0].field_256:
                            sub_2445aefb--
                            mem[0] = stor18[s].field_0
                            mem[32] = 31
                            _17196 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_17196] = 30
                            mem[_17196 + 32] = 'SafeMath: subtraction overflow'
                            if stor31[stor18[s].field_0].field_256 > stor19:
                                _17240 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[idx + _17240 + 68] = mem[idx + _17196 + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_17240 + 68] = mem[_17240 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _17240 + -mem[64] + 100
                            stor19 -= stor31[stor18[s].field_0].field_256
                            _17326 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_17326] = 30
                            mem[_17326 + 32] = 'SafeMath: subtraction overflow'
                            if balanceOf[stor18[s].field_0] > stor20:
                                _17414 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[idx + _17414 + 68] = mem[idx + _17326 + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_17414 + 68] = mem[_17414 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _17414 + -mem[64] + 100
                            stor20 -= balanceOf[stor18[s].field_0]
                            mem[0] = stor18[s].field_0
                            stor21[stor18[s].field_0] = 0
                            mem[32] = 31
                            _17544 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_17544] = 30
                            mem[_17544 + 32] = 'SafeMath: subtraction overflow'
                            if stor31[stor18[s].field_0].field_256 > stor8:
                                _17655 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[idx + _17655 + 68] = mem[idx + _17544 + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_17655 + 68] = mem[_17655 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _17655 + -mem[64] + 100
                            stor8 -= stor31[stor18[s].field_0].field_256
                            mem[0] = stor18[s].field_0
                            mem[32] = 31
                            _17808 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_17808] = 30
                            mem[_17808 + 32] = 'SafeMath: subtraction overflow'
                            if stor31[stor18[s].field_0].field_512 > stor9:
                                _17902 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[idx + _17902 + 68] = mem[idx + _17808 + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_17902 + 68] = mem[_17902 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _17902 + -mem[64] + 100
                            stor9 -= stor31[stor18[s].field_0].field_512
                            mem[0] = stor18[s].field_0
                            mem[32] = 31
                            stor31[stor18[s].field_0].field_256 = 0
                            stor31[stor18[s].field_0].field_512 = 0
                            stor31[stor18[s].field_0].field_0 = 0
                            stor10--
                            investorCount--
                            if not ext_call.return_data[0] - stor31[stor18[s].field_0].field_256:
                                _18152 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_18152] = 26
                                mem[_18152 + 32] = 'SafeMath: division by zero'
                                _18688 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_18688] = 30
                                mem[_18688 + 32] = 'SafeMath: subtraction overflow'
                                if 0 > ext_call.return_data[0]:
                                    _18951 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[idx + _18951 + 68] = mem[idx + _18688 + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_18951 + 68] = mem[_18951 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _18951 + -mem[64] + 100
                                require ext_code.size(tokenAddress)
                                staticcall tokenAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args address(this.address)
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] <= 95 * ext_call.return_data[0] / 100:
                                    revert with 0, 'pool doesnot have enough balance'
                                require ext_code.size(tokenAddress)
                                staticcall tokenAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] > ext_call.return_data[0]:
                                    require ext_code.size(tokenAddress)
                                    staticcall tokenAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                mem[mem[64] + 4] = stor18[s].field_0
                                mem[mem[64] + 36] = ext_call.return_data[0]
                                require ext_code.size(tokenAddress)
                                call tokenAddress.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args stor18[s].field_0, ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_call.return_data[0]
                                mem[mem[64]] = ext_call.return_data[0]
                                emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                            else:
                                if (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / ext_call.return_data[0] - stor31[stor18[s].field_0].field_256 != uint16(teamRewardFee + farmerRewardFee):
                                    revert with 0, 32, 33, 0x1f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                _18217 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_18217] = 26
                                mem[_18217 + 32] = 'SafeMath: division by zero'
                                _18827 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_18827] = 30
                                mem[_18827 + 32] = 'SafeMath: subtraction overflow'
                                if (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000 > ext_call.return_data[0]:
                                    _19105 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[idx + _19105 + 68] = mem[idx + _18827 + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_19105 + 68] = mem[_19105 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _19105 + -mem[64] + 100
                                require ext_code.size(tokenAddress)
                                staticcall tokenAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args address(this.address)
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] <= (95 * ext_call.return_data[0]) - (95 * (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) / 100:
                                    revert with 0, 'pool doesnot have enough balance'
                                require ext_code.size(tokenAddress)
                                staticcall tokenAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) <= ext_call.return_data[0]:
                                    mem[mem[64] + 4] = stor18[s].field_0
                                    mem[mem[64] + 36] = ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                    require ext_code.size(tokenAddress)
                                    call tokenAddress.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args stor18[s].field_0, ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_call.return_data[0]
                                    mem[mem[64]] = ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                    emit Withdraw((ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)), stor18[s].field_0);
                                else:
                                    require ext_code.size(tokenAddress)
                                    staticcall tokenAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[mem[64] + 4] = stor18[s].field_0
                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                    require ext_code.size(tokenAddress)
                                    call tokenAddress.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args stor18[s].field_0, ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_call.return_data[0]
                                    mem[mem[64]] = ext_call.return_data[0]
                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                        else:
                            if not ext_call.return_data[0] - stor31[stor18[s].field_0].field_256:
                                _17302 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_17302] = 26
                                mem[_17302 + 32] = 'SafeMath: division by zero'
                                require ext_code.size(tokenAddress)
                                staticcall tokenAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args address(this.address)
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if 0 > ext_call.return_data[0]:
                                    mem[0] = stor18[s].field_0
                                    emit 0x658fe604: 0, farmerAddress
                                    if not ext_call.return_data[0] - stor31[stor18[s].field_0].field_256:
                                        _17970 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_17970] = 26
                                        mem[_17970 + 32] = 'SafeMath: division by zero'
                                        require ext_code.size(tokenAddress)
                                        staticcall tokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(this.address)
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if 0 > ext_call.return_data[0]:
                                            emit 0x658fe604: 0, stor4
                                            sub_2445aefb--
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _18833 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_18833] = 30
                                            mem[_18833 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor19:
                                                _19117 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _19117 + 68] = mem[idx + _18833 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_19117 + 68] = mem[_19117 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _19117 + -mem[64] + 100
                                            stor19 -= stor31[stor18[s].field_0].field_256
                                            _19657 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_19657] = 30
                                            mem[_19657 + 32] = 'SafeMath: subtraction overflow'
                                            if balanceOf[stor18[s].field_0] > stor20:
                                                _20048 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _20048 + 68] = mem[idx + _19657 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_20048 + 68] = mem[_20048 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _20048 + -mem[64] + 100
                                            stor20 -= balanceOf[stor18[s].field_0]
                                            mem[0] = stor18[s].field_0
                                            stor21[stor18[s].field_0] = 0
                                            mem[32] = 31
                                            _20737 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_20737] = 30
                                            mem[_20737 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor8:
                                                _21322 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _21322 + 68] = mem[idx + _20737 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_21322 + 68] = mem[_21322 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _21322 + -mem[64] + 100
                                            stor8 -= stor31[stor18[s].field_0].field_256
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _22106 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_22106] = 30
                                            mem[_22106 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_512 > stor9:
                                                _22685 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _22685 + 68] = mem[idx + _22106 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_22685 + 68] = mem[_22685 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _22685 + -mem[64] + 100
                                            stor9 -= stor31[stor18[s].field_0].field_512
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            stor31[stor18[s].field_0].field_256 = 0
                                            stor31[stor18[s].field_0].field_512 = 0
                                            stor31[stor18[s].field_0].field_0 = 0
                                            stor10--
                                            investorCount--
                                            if not ext_call.return_data[0] - stor31[stor18[s].field_0].field_256:
                                                _24128 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24128] = 26
                                                mem[_24128 + 32] = 'SafeMath: division by zero'
                                                _24898 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24898] = 30
                                                mem[_24898 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > ext_call.return_data[0]:
                                                    _25138 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _25138 + 68] = mem[idx + _24898 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_25138 + 68] = mem[_25138 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _25138 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= 95 * ext_call.return_data[0] / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] > ext_call.return_data[0]:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                mem[mem[64] + 4] = stor18[s].field_0
                                                mem[mem[64] + 36] = ext_call.return_data[0]
                                                require ext_code.size(tokenAddress)
                                                call tokenAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args stor18[s].field_0, ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                require ext_call.return_data[0]
                                                mem[mem[64]] = ext_call.return_data[0]
                                                emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                            else:
                                                if (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / ext_call.return_data[0] - stor31[stor18[s].field_0].field_256 != uint16(teamRewardFee + farmerRewardFee):
                                                    revert with 0, 32, 33, 0x1f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _24290 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24290] = 26
                                                mem[_24290 + 32] = 'SafeMath: division by zero'
                                                _25015 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_25015] = 30
                                                mem[_25015 + 32] = 'SafeMath: subtraction overflow'
                                                if (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000 > ext_call.return_data[0]:
                                                    _25299 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _25299 + 68] = mem[idx + _25015 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_25299 + 68] = mem[_25299 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _25299 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= (95 * ext_call.return_data[0]) - (95 * (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    emit Withdraw((ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                        else:
                                            require ext_code.size(tokenAddress)
                                            call tokenAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args stor4, 0
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0]
                                            sub_2445aefb--
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _19481 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_19481] = 30
                                            mem[_19481 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor19:
                                                _19834 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _19834 + 68] = mem[idx + _19481 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_19834 + 68] = mem[_19834 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _19834 + -mem[64] + 100
                                            stor19 -= stor31[stor18[s].field_0].field_256
                                            _20521 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_20521] = 30
                                            mem[_20521 + 32] = 'SafeMath: subtraction overflow'
                                            if balanceOf[stor18[s].field_0] > stor20:
                                                _21008 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _21008 + 68] = mem[idx + _20521 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_21008 + 68] = mem[_21008 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _21008 + -mem[64] + 100
                                            stor20 -= balanceOf[stor18[s].field_0]
                                            mem[0] = stor18[s].field_0
                                            stor21[stor18[s].field_0] = 0
                                            mem[32] = 31
                                            _21838 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_21838] = 30
                                            mem[_21838 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor8:
                                                _22406 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _22406 + 68] = mem[idx + _21838 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_22406 + 68] = mem[_22406 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _22406 + -mem[64] + 100
                                            stor8 -= stor31[stor18[s].field_0].field_256
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _23141 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_23141] = 30
                                            mem[_23141 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_512 > stor9:
                                                _23596 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _23596 + 68] = mem[idx + _23141 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_23596 + 68] = mem[_23596 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _23596 + -mem[64] + 100
                                            stor9 -= stor31[stor18[s].field_0].field_512
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            stor31[stor18[s].field_0].field_256 = 0
                                            stor31[stor18[s].field_0].field_512 = 0
                                            stor31[stor18[s].field_0].field_0 = 0
                                            stor10--
                                            investorCount--
                                            if not ext_call.return_data[0] - stor31[stor18[s].field_0].field_256:
                                                _24668 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24668] = 26
                                                mem[_24668 + 32] = 'SafeMath: division by zero'
                                                _25500 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_25500] = 30
                                                mem[_25500 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > ext_call.return_data[0]:
                                                    _26008 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _26008 + 68] = mem[idx + _25500 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_26008 + 68] = mem[_26008 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _26008 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= 95 * ext_call.return_data[0] / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] > ext_call.return_data[0]:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                mem[mem[64] + 4] = stor18[s].field_0
                                                mem[mem[64] + 36] = ext_call.return_data[0]
                                                require ext_code.size(tokenAddress)
                                                call tokenAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args stor18[s].field_0, ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                require ext_call.return_data[0]
                                                mem[mem[64]] = ext_call.return_data[0]
                                                emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                            else:
                                                if (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / ext_call.return_data[0] - stor31[stor18[s].field_0].field_256 != uint16(teamRewardFee + farmerRewardFee):
                                                    revert with 0, 32, 33, 0x1f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _24776 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24776] = 26
                                                mem[_24776 + 32] = 'SafeMath: division by zero'
                                                _25734 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_25734] = 30
                                                mem[_25734 + 32] = 'SafeMath: subtraction overflow'
                                                if (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000 > ext_call.return_data[0]:
                                                    _26327 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _26327 + 68] = mem[idx + _25734 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_26327 + 68] = mem[_26327 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _26327 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= (95 * ext_call.return_data[0]) - (95 * (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    emit Withdraw((ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                    else:
                                        if (ext_call.return_data[0] * teamRewardFee) - (stor31[stor18[s].field_0].field_256 * teamRewardFee) / ext_call.return_data[0] - stor31[stor18[s].field_0].field_256 != teamRewardFee:
                                            revert with 0, 32, 33, 0x1f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _18010 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_18010] = 26
                                        mem[_18010 + 32] = 'SafeMath: division by zero'
                                        require ext_code.size(tokenAddress)
                                        staticcall tokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(this.address)
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if (ext_call.return_data[0] * teamRewardFee) - (stor31[stor18[s].field_0].field_256 * teamRewardFee) / 10000 > ext_call.return_data[0]:
                                            emit 0x658fe604: ((ext_call.return_data[0] * teamRewardFee) - (stor31[stor18[s].field_0].field_256 * teamRewardFee) / 10000), stor4
                                            sub_2445aefb--
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _18960 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_18960] = 30
                                            mem[_18960 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor19:
                                                _19293 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _19293 + 68] = mem[idx + _18960 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_19293 + 68] = mem[_19293 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _19293 + -mem[64] + 100
                                            stor19 -= stor31[stor18[s].field_0].field_256
                                            _19830 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_19830] = 30
                                            mem[_19830 + 32] = 'SafeMath: subtraction overflow'
                                            if balanceOf[stor18[s].field_0] > stor20:
                                                _20299 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _20299 + 68] = mem[idx + _19830 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_20299 + 68] = mem[_20299 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _20299 + -mem[64] + 100
                                            stor20 -= balanceOf[stor18[s].field_0]
                                            mem[0] = stor18[s].field_0
                                            stor21[stor18[s].field_0] = 0
                                            mem[32] = 31
                                            _21003 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_21003] = 30
                                            mem[_21003 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor8:
                                                _21590 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _21590 + 68] = mem[idx + _21003 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_21590 + 68] = mem[_21590 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _21590 + -mem[64] + 100
                                            stor8 -= stor31[stor18[s].field_0].field_256
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _22401 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_22401] = 30
                                            mem[_22401 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_512 > stor9:
                                                _22923 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _22923 + 68] = mem[idx + _22401 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_22923 + 68] = mem[_22923 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _22923 + -mem[64] + 100
                                            stor9 -= stor31[stor18[s].field_0].field_512
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            stor31[stor18[s].field_0].field_256 = 0
                                            stor31[stor18[s].field_0].field_512 = 0
                                            stor31[stor18[s].field_0].field_0 = 0
                                            stor10--
                                            investorCount--
                                            if not ext_call.return_data[0] - stor31[stor18[s].field_0].field_256:
                                                _24287 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24287] = 26
                                                mem[_24287 + 32] = 'SafeMath: division by zero'
                                                _25014 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_25014] = 30
                                                mem[_25014 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > ext_call.return_data[0]:
                                                    _25296 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _25296 + 68] = mem[idx + _25014 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_25296 + 68] = mem[_25296 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _25296 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= 95 * ext_call.return_data[0] / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] > ext_call.return_data[0]:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                mem[mem[64] + 4] = stor18[s].field_0
                                                mem[mem[64] + 36] = ext_call.return_data[0]
                                                require ext_code.size(tokenAddress)
                                                call tokenAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args stor18[s].field_0, ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                require ext_call.return_data[0]
                                                mem[mem[64]] = ext_call.return_data[0]
                                                emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                            else:
                                                if (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / ext_call.return_data[0] - stor31[stor18[s].field_0].field_256 != uint16(teamRewardFee + farmerRewardFee):
                                                    revert with 0, 32, 33, 0x1f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _24452 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24452] = 26
                                                mem[_24452 + 32] = 'SafeMath: division by zero'
                                                _25137 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_25137] = 30
                                                mem[_25137 + 32] = 'SafeMath: subtraction overflow'
                                                if (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000 > ext_call.return_data[0]:
                                                    _25494 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _25494 + 68] = mem[idx + _25137 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_25494 + 68] = mem[_25494 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _25494 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= (95 * ext_call.return_data[0]) - (95 * (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    emit Withdraw((ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                        else:
                                            require ext_code.size(tokenAddress)
                                            call tokenAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args stor4, (ext_call.return_data[0] * teamRewardFee) - (stor31[stor18[s].field_0].field_256 * teamRewardFee) / 10000
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0]
                                            sub_2445aefb--
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _19656 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_19656] = 30
                                            mem[_19656 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor19:
                                                _20045 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _20045 + 68] = mem[idx + _19656 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_20045 + 68] = mem[_20045 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _20045 + -mem[64] + 100
                                            stor19 -= stor31[stor18[s].field_0].field_256
                                            _20734 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_20734] = 30
                                            mem[_20734 + 32] = 'SafeMath: subtraction overflow'
                                            if balanceOf[stor18[s].field_0] > stor20:
                                                _21319 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _21319 + 68] = mem[idx + _20734 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_21319 + 68] = mem[_21319 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _21319 + -mem[64] + 100
                                            stor20 -= balanceOf[stor18[s].field_0]
                                            mem[0] = stor18[s].field_0
                                            stor21[stor18[s].field_0] = 0
                                            mem[32] = 31
                                            _22103 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_22103] = 30
                                            mem[_22103 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor8:
                                                _22682 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _22682 + 68] = mem[idx + _22103 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_22682 + 68] = mem[_22682 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _22682 + -mem[64] + 100
                                            stor8 -= stor31[stor18[s].field_0].field_256
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _23361 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_23361] = 30
                                            mem[_23361 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_512 > stor9:
                                                _23813 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _23813 + 68] = mem[idx + _23361 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_23813 + 68] = mem[_23813 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _23813 + -mem[64] + 100
                                            stor9 -= stor31[stor18[s].field_0].field_512
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            stor31[stor18[s].field_0].field_256 = 0
                                            stor31[stor18[s].field_0].field_512 = 0
                                            stor31[stor18[s].field_0].field_0 = 0
                                            stor10--
                                            investorCount--
                                            if not ext_call.return_data[0] - stor31[stor18[s].field_0].field_256:
                                                _24775 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24775] = 26
                                                mem[_24775 + 32] = 'SafeMath: division by zero'
                                                _25728 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_25728] = 30
                                                mem[_25728 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > ext_call.return_data[0]:
                                                    _26321 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _26321 + 68] = mem[idx + _25728 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_26321 + 68] = mem[_26321 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _26321 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= 95 * ext_call.return_data[0] / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] > ext_call.return_data[0]:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                mem[mem[64] + 4] = stor18[s].field_0
                                                mem[mem[64] + 36] = ext_call.return_data[0]
                                                require ext_code.size(tokenAddress)
                                                call tokenAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args stor18[s].field_0, ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                require ext_call.return_data[0]
                                                mem[mem[64]] = ext_call.return_data[0]
                                                emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                            else:
                                                if (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / ext_call.return_data[0] - stor31[stor18[s].field_0].field_256 != uint16(teamRewardFee + farmerRewardFee):
                                                    revert with 0, 32, 33, 0x1f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _24897 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24897] = 26
                                                mem[_24897 + 32] = 'SafeMath: division by zero'
                                                _26003 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_26003] = 30
                                                mem[_26003 + 32] = 'SafeMath: subtraction overflow'
                                                if (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000 > ext_call.return_data[0]:
                                                    _26665 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _26665 + 68] = mem[idx + _26003 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_26665 + 68] = mem[_26665 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _26665 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= (95 * ext_call.return_data[0]) - (95 * (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    emit Withdraw((ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                else:
                                    require ext_code.size(tokenAddress)
                                    call tokenAddress.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args farmerAddress, 0
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_call.return_data[0]
                                    if not ext_call.return_data[0] - stor31[stor18[s].field_0].field_256:
                                        _18119 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_18119] = 26
                                        mem[_18119 + 32] = 'SafeMath: division by zero'
                                        require ext_code.size(tokenAddress)
                                        staticcall tokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(this.address)
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if 0 > ext_call.return_data[0]:
                                            emit 0x658fe604: 0, stor4
                                            sub_2445aefb--
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _19484 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_19484] = 30
                                            mem[_19484 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor19:
                                                _19837 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _19837 + 68] = mem[idx + _19484 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_19837 + 68] = mem[_19837 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _19837 + -mem[64] + 100
                                            stor19 -= stor31[stor18[s].field_0].field_256
                                            _20526 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_20526] = 30
                                            mem[_20526 + 32] = 'SafeMath: subtraction overflow'
                                            if balanceOf[stor18[s].field_0] > stor20:
                                                _21015 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _21015 + 68] = mem[idx + _20526 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_21015 + 68] = mem[_21015 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _21015 + -mem[64] + 100
                                            stor20 -= balanceOf[stor18[s].field_0]
                                            mem[0] = stor18[s].field_0
                                            stor21[stor18[s].field_0] = 0
                                            mem[32] = 31
                                            _21847 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_21847] = 30
                                            mem[_21847 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor8:
                                                _22413 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _22413 + 68] = mem[idx + _21847 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_22413 + 68] = mem[_22413 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _22413 + -mem[64] + 100
                                            stor8 -= stor31[stor18[s].field_0].field_256
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _23149 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_23149] = 30
                                            mem[_23149 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_512 > stor9:
                                                _23603 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _23603 + 68] = mem[idx + _23149 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_23603 + 68] = mem[_23603 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _23603 + -mem[64] + 100
                                            stor9 -= stor31[stor18[s].field_0].field_512
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            stor31[stor18[s].field_0].field_256 = 0
                                            stor31[stor18[s].field_0].field_512 = 0
                                            stor31[stor18[s].field_0].field_0 = 0
                                            stor10--
                                            investorCount--
                                            if not ext_call.return_data[0] - stor31[stor18[s].field_0].field_256:
                                                _24673 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24673] = 26
                                                mem[_24673 + 32] = 'SafeMath: division by zero'
                                                _25502 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_25502] = 30
                                                mem[_25502 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > ext_call.return_data[0]:
                                                    _26012 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _26012 + 68] = mem[idx + _25502 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_26012 + 68] = mem[_26012 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _26012 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= 95 * ext_call.return_data[0] / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] > ext_call.return_data[0]:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                mem[mem[64] + 4] = stor18[s].field_0
                                                mem[mem[64] + 36] = ext_call.return_data[0]
                                                require ext_code.size(tokenAddress)
                                                call tokenAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args stor18[s].field_0, ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                require ext_call.return_data[0]
                                                mem[mem[64]] = ext_call.return_data[0]
                                                emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                            else:
                                                if (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / ext_call.return_data[0] - stor31[stor18[s].field_0].field_256 != uint16(teamRewardFee + farmerRewardFee):
                                                    revert with 0, 32, 33, 0x1f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _24780 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24780] = 26
                                                mem[_24780 + 32] = 'SafeMath: division by zero'
                                                _25736 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_25736] = 30
                                                mem[_25736 + 32] = 'SafeMath: subtraction overflow'
                                                if (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000 > ext_call.return_data[0]:
                                                    _26333 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _26333 + 68] = mem[idx + _25736 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_26333 + 68] = mem[_26333 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _26333 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= (95 * ext_call.return_data[0]) - (95 * (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    emit Withdraw((ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                        else:
                                            require ext_code.size(tokenAddress)
                                            call tokenAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args stor4, 0
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0]
                                            sub_2445aefb--
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _20305 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_20305] = 30
                                            mem[_20305 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor19:
                                                _20745 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _20745 + 68] = mem[idx + _20305 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_20745 + 68] = mem[_20745 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _20745 + -mem[64] + 100
                                            stor19 -= stor31[stor18[s].field_0].field_256
                                            _21600 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_21600] = 30
                                            mem[_21600 + 32] = 'SafeMath: subtraction overflow'
                                            if balanceOf[stor18[s].field_0] > stor20:
                                                _22115 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _22115 + 68] = mem[idx + _21600 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_22115 + 68] = mem[_22115 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _22115 + -mem[64] + 100
                                            stor20 -= balanceOf[stor18[s].field_0]
                                            mem[0] = stor18[s].field_0
                                            stor21[stor18[s].field_0] = 0
                                            mem[32] = 31
                                            _22933 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_22933] = 30
                                            mem[_22933 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor8:
                                                _23372 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _23372 + 68] = mem[idx + _22933 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_23372 + 68] = mem[_23372 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _23372 + -mem[64] + 100
                                            stor8 -= stor31[stor18[s].field_0].field_256
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _23989 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_23989] = 30
                                            mem[_23989 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_512 > stor9:
                                                _24296 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _24296 + 68] = mem[idx + _23989 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_24296 + 68] = mem[_24296 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _24296 + -mem[64] + 100
                                            stor9 -= stor31[stor18[s].field_0].field_512
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            stor31[stor18[s].field_0].field_256 = 0
                                            stor31[stor18[s].field_0].field_512 = 0
                                            stor31[stor18[s].field_0].field_0 = 0
                                            stor10--
                                            investorCount--
                                            if not ext_call.return_data[0] - stor31[stor18[s].field_0].field_256:
                                                _25143 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_25143] = 26
                                                mem[_25143 + 32] = 'SafeMath: division by zero'
                                                _26682 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_26682] = 30
                                                mem[_26682 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > ext_call.return_data[0]:
                                                    _27492 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _27492 + 68] = mem[idx + _26682 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_27492 + 68] = mem[_27492 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _27492 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= 95 * ext_call.return_data[0] / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] > ext_call.return_data[0]:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                mem[mem[64] + 4] = stor18[s].field_0
                                                mem[mem[64] + 36] = ext_call.return_data[0]
                                                require ext_code.size(tokenAddress)
                                                call tokenAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args stor18[s].field_0, ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                require ext_call.return_data[0]
                                                mem[mem[64]] = ext_call.return_data[0]
                                                emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                            else:
                                                if (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / ext_call.return_data[0] - stor31[stor18[s].field_0].field_256 != uint16(teamRewardFee + farmerRewardFee):
                                                    revert with 0, 32, 33, 0x1f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _25303 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_25303] = 26
                                                mem[_25303 + 32] = 'SafeMath: division by zero'
                                                _27064 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_27064] = 30
                                                mem[_27064 + 32] = 'SafeMath: subtraction overflow'
                                                if (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000 > ext_call.return_data[0]:
                                                    _27926 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _27926 + 68] = mem[idx + _27064 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_27926 + 68] = mem[_27926 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _27926 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= (95 * ext_call.return_data[0]) - (95 * (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    emit Withdraw((ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                    else:
                                        if (ext_call.return_data[0] * teamRewardFee) - (stor31[stor18[s].field_0].field_256 * teamRewardFee) / ext_call.return_data[0] - stor31[stor18[s].field_0].field_256 != teamRewardFee:
                                            revert with 0, 32, 33, 0x1f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _18156 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_18156] = 26
                                        mem[_18156 + 32] = 'SafeMath: division by zero'
                                        require ext_code.size(tokenAddress)
                                        staticcall tokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(this.address)
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if (ext_call.return_data[0] * teamRewardFee) - (stor31[stor18[s].field_0].field_256 * teamRewardFee) / 10000 > ext_call.return_data[0]:
                                            emit 0x658fe604: ((ext_call.return_data[0] * teamRewardFee) - (stor31[stor18[s].field_0].field_256 * teamRewardFee) / 10000), stor4
                                            sub_2445aefb--
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _19660 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_19660] = 30
                                            mem[_19660 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor19:
                                                _20051 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _20051 + 68] = mem[idx + _19660 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_20051 + 68] = mem[_20051 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _20051 + -mem[64] + 100
                                            stor19 -= stor31[stor18[s].field_0].field_256
                                            _20741 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_20741] = 30
                                            mem[_20741 + 32] = 'SafeMath: subtraction overflow'
                                            if balanceOf[stor18[s].field_0] > stor20:
                                                _21325 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _21325 + 68] = mem[idx + _20741 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_21325 + 68] = mem[_21325 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _21325 + -mem[64] + 100
                                            stor20 -= balanceOf[stor18[s].field_0]
                                            mem[0] = stor18[s].field_0
                                            stor21[stor18[s].field_0] = 0
                                            mem[32] = 31
                                            _22110 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_22110] = 30
                                            mem[_22110 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor8:
                                                _22688 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _22688 + 68] = mem[idx + _22110 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_22688 + 68] = mem[_22688 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _22688 + -mem[64] + 100
                                            stor8 -= stor31[stor18[s].field_0].field_256
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _23367 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_23367] = 30
                                            mem[_23367 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_512 > stor9:
                                                _23816 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _23816 + 68] = mem[idx + _23367 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_23816 + 68] = mem[_23816 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _23816 + -mem[64] + 100
                                            stor9 -= stor31[stor18[s].field_0].field_512
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            stor31[stor18[s].field_0].field_256 = 0
                                            stor31[stor18[s].field_0].field_512 = 0
                                            stor31[stor18[s].field_0].field_0 = 0
                                            stor10--
                                            investorCount--
                                            if not ext_call.return_data[0] - stor31[stor18[s].field_0].field_256:
                                                _24777 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24777] = 26
                                                mem[_24777 + 32] = 'SafeMath: division by zero'
                                                _25735 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_25735] = 30
                                                mem[_25735 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > ext_call.return_data[0]:
                                                    _26330 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _26330 + 68] = mem[idx + _25735 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_26330 + 68] = mem[_26330 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _26330 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= 95 * ext_call.return_data[0] / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] > ext_call.return_data[0]:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                mem[mem[64] + 4] = stor18[s].field_0
                                                mem[mem[64] + 36] = ext_call.return_data[0]
                                                require ext_code.size(tokenAddress)
                                                call tokenAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args stor18[s].field_0, ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                require ext_call.return_data[0]
                                                mem[mem[64]] = ext_call.return_data[0]
                                                emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                            else:
                                                if (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / ext_call.return_data[0] - stor31[stor18[s].field_0].field_256 != uint16(teamRewardFee + farmerRewardFee):
                                                    revert with 0, 32, 33, 0x1f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _24899 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24899] = 26
                                                mem[_24899 + 32] = 'SafeMath: division by zero'
                                                _26011 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_26011] = 30
                                                mem[_26011 + 32] = 'SafeMath: subtraction overflow'
                                                if (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000 > ext_call.return_data[0]:
                                                    _26676 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _26676 + 68] = mem[idx + _26011 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_26676 + 68] = mem[_26676 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _26676 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= (95 * ext_call.return_data[0]) - (95 * (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    emit Withdraw((ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                        else:
                                            require ext_code.size(tokenAddress)
                                            call tokenAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args stor4, (ext_call.return_data[0] * teamRewardFee) - (stor31[stor18[s].field_0].field_256 * teamRewardFee) / 10000
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0]
                                            sub_2445aefb--
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _20525 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_20525] = 30
                                            mem[_20525 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor19:
                                                _21012 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _21012 + 68] = mem[idx + _20525 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_21012 + 68] = mem[_21012 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _21012 + -mem[64] + 100
                                            stor19 -= stor31[stor18[s].field_0].field_256
                                            _21844 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_21844] = 30
                                            mem[_21844 + 32] = 'SafeMath: subtraction overflow'
                                            if balanceOf[stor18[s].field_0] > stor20:
                                                _22410 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _22410 + 68] = mem[idx + _21844 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_22410 + 68] = mem[_22410 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _22410 + -mem[64] + 100
                                            stor20 -= balanceOf[stor18[s].field_0]
                                            mem[0] = stor18[s].field_0
                                            stor21[stor18[s].field_0] = 0
                                            mem[32] = 31
                                            _23146 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_23146] = 30
                                            mem[_23146 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor8:
                                                _23600 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _23600 + 68] = mem[idx + _23146 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_23600 + 68] = mem[_23600 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _23600 + -mem[64] + 100
                                            stor8 -= stor31[stor18[s].field_0].field_256
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _24133 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_24133] = 30
                                            mem[_24133 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_512 > stor9:
                                                _24455 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _24455 + 68] = mem[idx + _24133 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_24455 + 68] = mem[_24455 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _24455 + -mem[64] + 100
                                            stor9 -= stor31[stor18[s].field_0].field_512
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            stor31[stor18[s].field_0].field_256 = 0
                                            stor31[stor18[s].field_0].field_512 = 0
                                            stor31[stor18[s].field_0].field_0 = 0
                                            stor10--
                                            investorCount--
                                            if not ext_call.return_data[0] - stor31[stor18[s].field_0].field_256:
                                                _25302 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_25302] = 26
                                                mem[_25302 + 32] = 'SafeMath: division by zero'
                                                _27058 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_27058] = 30
                                                mem[_27058 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > ext_call.return_data[0]:
                                                    _27920 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _27920 + 68] = mem[idx + _27058 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_27920 + 68] = mem[_27920 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _27920 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= 95 * ext_call.return_data[0] / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] > ext_call.return_data[0]:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                mem[mem[64] + 4] = stor18[s].field_0
                                                mem[mem[64] + 36] = ext_call.return_data[0]
                                                require ext_code.size(tokenAddress)
                                                call tokenAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args stor18[s].field_0, ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                require ext_call.return_data[0]
                                                mem[mem[64]] = ext_call.return_data[0]
                                                emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                            else:
                                                if (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / ext_call.return_data[0] - stor31[stor18[s].field_0].field_256 != uint16(teamRewardFee + farmerRewardFee):
                                                    revert with 0, 32, 33, 0x1f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _25501 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_25501] = 26
                                                mem[_25501 + 32] = 'SafeMath: division by zero'
                                                _27487 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_27487] = 30
                                                mem[_27487 + 32] = 'SafeMath: subtraction overflow'
                                                if (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000 > ext_call.return_data[0]:
                                                    _28323 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _28323 + 68] = mem[idx + _27487 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_28323 + 68] = mem[_28323 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _28323 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= (95 * ext_call.return_data[0]) - (95 * (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    emit Withdraw((ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                            else:
                                if (ext_call.return_data[0] * farmerRewardFee) - (stor31[stor18[s].field_0].field_256 * farmerRewardFee) / ext_call.return_data[0] - stor31[stor18[s].field_0].field_256 != farmerRewardFee:
                                    revert with 0, 32, 33, 0x1f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                _17329 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_17329] = 26
                                mem[_17329 + 32] = 'SafeMath: division by zero'
                                require ext_code.size(tokenAddress)
                                staticcall tokenAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args address(this.address)
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if (ext_call.return_data[0] * farmerRewardFee) - (stor31[stor18[s].field_0].field_256 * farmerRewardFee) / 10000 > ext_call.return_data[0]:
                                    mem[0] = stor18[s].field_0
                                    emit 0x658fe604: ((ext_call.return_data[0] * farmerRewardFee) - (stor31[stor18[s].field_0].field_256 * farmerRewardFee) / 10000), farmerAddress
                                    if not ext_call.return_data[0] - stor31[stor18[s].field_0].field_256:
                                        _18009 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_18009] = 26
                                        mem[_18009 + 32] = 'SafeMath: division by zero'
                                        require ext_code.size(tokenAddress)
                                        staticcall tokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(this.address)
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if 0 > ext_call.return_data[0]:
                                            emit 0x658fe604: 0, stor4
                                            sub_2445aefb--
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _18956 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_18956] = 30
                                            mem[_18956 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor19:
                                                _19284 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _19284 + 68] = mem[idx + _18956 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_19284 + 68] = mem[_19284 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _19284 + -mem[64] + 100
                                            stor19 -= stor31[stor18[s].field_0].field_256
                                            _19825 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_19825] = 30
                                            mem[_19825 + 32] = 'SafeMath: subtraction overflow'
                                            if balanceOf[stor18[s].field_0] > stor20:
                                                _20292 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _20292 + 68] = mem[idx + _19825 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_20292 + 68] = mem[_20292 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _20292 + -mem[64] + 100
                                            stor20 -= balanceOf[stor18[s].field_0]
                                            mem[0] = stor18[s].field_0
                                            stor21[stor18[s].field_0] = 0
                                            mem[32] = 31
                                            _20992 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_20992] = 30
                                            mem[_20992 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor8:
                                                _21583 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _21583 + 68] = mem[idx + _20992 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_21583 + 68] = mem[_21583 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _21583 + -mem[64] + 100
                                            stor8 -= stor31[stor18[s].field_0].field_256
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _22389 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_22389] = 30
                                            mem[_22389 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_512 > stor9:
                                                _22914 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _22914 + 68] = mem[idx + _22389 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_22914 + 68] = mem[_22914 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _22914 + -mem[64] + 100
                                            stor9 -= stor31[stor18[s].field_0].field_512
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            stor31[stor18[s].field_0].field_256 = 0
                                            stor31[stor18[s].field_0].field_512 = 0
                                            stor31[stor18[s].field_0].field_0 = 0
                                            stor10--
                                            investorCount--
                                            if not ext_call.return_data[0] - stor31[stor18[s].field_0].field_256:
                                                _24276 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24276] = 26
                                                mem[_24276 + 32] = 'SafeMath: division by zero'
                                                _25011 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_25011] = 30
                                                mem[_25011 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > ext_call.return_data[0]:
                                                    _25290 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _25290 + 68] = mem[idx + _25011 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_25290 + 68] = mem[_25290 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _25290 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= 95 * ext_call.return_data[0] / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] > ext_call.return_data[0]:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                mem[mem[64] + 4] = stor18[s].field_0
                                                mem[mem[64] + 36] = ext_call.return_data[0]
                                                require ext_code.size(tokenAddress)
                                                call tokenAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args stor18[s].field_0, ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                require ext_call.return_data[0]
                                                mem[mem[64]] = ext_call.return_data[0]
                                                emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                            else:
                                                if (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / ext_call.return_data[0] - stor31[stor18[s].field_0].field_256 != uint16(teamRewardFee + farmerRewardFee):
                                                    revert with 0, 32, 33, 0x1f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _24443 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24443] = 26
                                                mem[_24443 + 32] = 'SafeMath: division by zero'
                                                _25134 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_25134] = 30
                                                mem[_25134 + 32] = 'SafeMath: subtraction overflow'
                                                if (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000 > ext_call.return_data[0]:
                                                    _25489 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _25489 + 68] = mem[idx + _25134 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_25489 + 68] = mem[_25489 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _25489 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= (95 * ext_call.return_data[0]) - (95 * (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    emit Withdraw((ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                        else:
                                            require ext_code.size(tokenAddress)
                                            call tokenAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args stor4, 0
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0]
                                            sub_2445aefb--
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _19650 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_19650] = 30
                                            mem[_19650 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor19:
                                                _20038 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _20038 + 68] = mem[idx + _19650 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_20038 + 68] = mem[_20038 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _20038 + -mem[64] + 100
                                            stor19 -= stor31[stor18[s].field_0].field_256
                                            _20723 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_20723] = 30
                                            mem[_20723 + 32] = 'SafeMath: subtraction overflow'
                                            if balanceOf[stor18[s].field_0] > stor20:
                                                _21308 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _21308 + 68] = mem[idx + _20723 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_21308 + 68] = mem[_21308 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _21308 + -mem[64] + 100
                                            stor20 -= balanceOf[stor18[s].field_0]
                                            mem[0] = stor18[s].field_0
                                            stor21[stor18[s].field_0] = 0
                                            mem[32] = 31
                                            _22088 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_22088] = 30
                                            mem[_22088 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor8:
                                                _22671 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _22671 + 68] = mem[idx + _22088 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_22671 + 68] = mem[_22671 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _22671 + -mem[64] + 100
                                            stor8 -= stor31[stor18[s].field_0].field_256
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _23347 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_23347] = 30
                                            mem[_23347 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_512 > stor9:
                                                _23802 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _23802 + 68] = mem[idx + _23347 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_23802 + 68] = mem[_23802 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _23802 + -mem[64] + 100
                                            stor9 -= stor31[stor18[s].field_0].field_512
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            stor31[stor18[s].field_0].field_256 = 0
                                            stor31[stor18[s].field_0].field_512 = 0
                                            stor31[stor18[s].field_0].field_0 = 0
                                            stor10--
                                            investorCount--
                                            if not ext_call.return_data[0] - stor31[stor18[s].field_0].field_256:
                                                _24767 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24767] = 26
                                                mem[_24767 + 32] = 'SafeMath: division by zero'
                                                _25722 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_25722] = 30
                                                mem[_25722 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > ext_call.return_data[0]:
                                                    _26310 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _26310 + 68] = mem[idx + _25722 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_26310 + 68] = mem[_26310 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _26310 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= 95 * ext_call.return_data[0] / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] > ext_call.return_data[0]:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                mem[mem[64] + 4] = stor18[s].field_0
                                                mem[mem[64] + 36] = ext_call.return_data[0]
                                                require ext_code.size(tokenAddress)
                                                call tokenAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args stor18[s].field_0, ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                require ext_call.return_data[0]
                                                mem[mem[64]] = ext_call.return_data[0]
                                                emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                            else:
                                                if (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / ext_call.return_data[0] - stor31[stor18[s].field_0].field_256 != uint16(teamRewardFee + farmerRewardFee):
                                                    revert with 0, 32, 33, 0x1f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _24891 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24891] = 26
                                                mem[_24891 + 32] = 'SafeMath: division by zero'
                                                _25995 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_25995] = 30
                                                mem[_25995 + 32] = 'SafeMath: subtraction overflow'
                                                if (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000 > ext_call.return_data[0]:
                                                    _26653 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _26653 + 68] = mem[idx + _25995 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_26653 + 68] = mem[_26653 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _26653 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= (95 * ext_call.return_data[0]) - (95 * (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    emit Withdraw((ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                    else:
                                        if (ext_call.return_data[0] * teamRewardFee) - (stor31[stor18[s].field_0].field_256 * teamRewardFee) / ext_call.return_data[0] - stor31[stor18[s].field_0].field_256 != teamRewardFee:
                                            revert with 0, 32, 33, 0x1f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _18056 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_18056] = 26
                                        mem[_18056 + 32] = 'SafeMath: division by zero'
                                        require ext_code.size(tokenAddress)
                                        staticcall tokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(this.address)
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if (ext_call.return_data[0] * teamRewardFee) - (stor31[stor18[s].field_0].field_256 * teamRewardFee) / 10000 > ext_call.return_data[0]:
                                            emit 0x658fe604: ((ext_call.return_data[0] * teamRewardFee) - (stor31[stor18[s].field_0].field_256 * teamRewardFee) / 10000), stor4
                                            sub_2445aefb--
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _19108 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_19108] = 30
                                            mem[_19108 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor19:
                                                _19473 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _19473 + 68] = mem[idx + _19108 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_19473 + 68] = mem[_19473 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _19473 + -mem[64] + 100
                                            stor19 -= stor31[stor18[s].field_0].field_256
                                            _20034 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_20034] = 30
                                            mem[_20034 + 32] = 'SafeMath: subtraction overflow'
                                            if balanceOf[stor18[s].field_0] > stor20:
                                                _20510 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _20510 + 68] = mem[idx + _20034 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_20510 + 68] = mem[_20510 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _20510 + -mem[64] + 100
                                            stor20 -= balanceOf[stor18[s].field_0]
                                            mem[0] = stor18[s].field_0
                                            stor21[stor18[s].field_0] = 0
                                            mem[32] = 31
                                            _21303 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_21303] = 30
                                            mem[_21303 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor8:
                                                _21820 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _21820 + 68] = mem[idx + _21303 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_21820 + 68] = mem[_21820 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _21820 + -mem[64] + 100
                                            stor8 -= stor31[stor18[s].field_0].field_256
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _22666 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_22666] = 30
                                            mem[_22666 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_512 > stor9:
                                                _23124 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _23124 + 68] = mem[idx + _22666 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_23124 + 68] = mem[_23124 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _23124 + -mem[64] + 100
                                            stor9 -= stor31[stor18[s].field_0].field_512
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            stor31[stor18[s].field_0].field_256 = 0
                                            stor31[stor18[s].field_0].field_512 = 0
                                            stor31[stor18[s].field_0].field_0 = 0
                                            stor10--
                                            investorCount--
                                            if not ext_call.return_data[0] - stor31[stor18[s].field_0].field_256:
                                                _24440 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24440] = 26
                                                mem[_24440 + 32] = 'SafeMath: division by zero'
                                                _25133 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_25133] = 30
                                                mem[_25133 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > ext_call.return_data[0]:
                                                    _25486 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _25486 + 68] = mem[idx + _25133 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_25486 + 68] = mem[_25486 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _25486 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= 95 * ext_call.return_data[0] / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] > ext_call.return_data[0]:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                mem[mem[64] + 4] = stor18[s].field_0
                                                mem[mem[64] + 36] = ext_call.return_data[0]
                                                require ext_code.size(tokenAddress)
                                                call tokenAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args stor18[s].field_0, ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                require ext_call.return_data[0]
                                                mem[mem[64]] = ext_call.return_data[0]
                                                emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                            else:
                                                if (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / ext_call.return_data[0] - stor31[stor18[s].field_0].field_256 != uint16(teamRewardFee + farmerRewardFee):
                                                    revert with 0, 32, 33, 0x1f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _24568 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24568] = 26
                                                mem[_24568 + 32] = 'SafeMath: division by zero'
                                                _25289 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_25289] = 30
                                                mem[_25289 + 32] = 'SafeMath: subtraction overflow'
                                                if (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000 > ext_call.return_data[0]:
                                                    _25716 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _25716 + 68] = mem[idx + _25289 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_25716 + 68] = mem[_25716 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _25716 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= (95 * ext_call.return_data[0]) - (95 * (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    emit Withdraw((ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                        else:
                                            require ext_code.size(tokenAddress)
                                            call tokenAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args stor4, (ext_call.return_data[0] * teamRewardFee) - (stor31[stor18[s].field_0].field_256 * teamRewardFee) / 10000
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0]
                                            sub_2445aefb--
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _19824 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_19824] = 30
                                            mem[_19824 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor19:
                                                _20289 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _20289 + 68] = mem[idx + _19824 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_20289 + 68] = mem[_20289 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _20289 + -mem[64] + 100
                                            stor19 -= stor31[stor18[s].field_0].field_256
                                            _20989 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_20989] = 30
                                            mem[_20989 + 32] = 'SafeMath: subtraction overflow'
                                            if balanceOf[stor18[s].field_0] > stor20:
                                                _21580 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _21580 + 68] = mem[idx + _20989 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_21580 + 68] = mem[_21580 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _21580 + -mem[64] + 100
                                            stor20 -= balanceOf[stor18[s].field_0]
                                            mem[0] = stor18[s].field_0
                                            stor21[stor18[s].field_0] = 0
                                            mem[32] = 31
                                            _22386 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_22386] = 30
                                            mem[_22386 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor8:
                                                _22911 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _22911 + 68] = mem[idx + _22386 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_22911 + 68] = mem[_22911 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _22911 + -mem[64] + 100
                                            stor8 -= stor31[stor18[s].field_0].field_256
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _23578 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_23578] = 30
                                            mem[_23578 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_512 > stor9:
                                                _23973 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _23973 + 68] = mem[idx + _23578 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_23973 + 68] = mem[_23973 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _23973 + -mem[64] + 100
                                            stor9 -= stor31[stor18[s].field_0].field_512
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            stor31[stor18[s].field_0].field_256 = 0
                                            stor31[stor18[s].field_0].field_512 = 0
                                            stor31[stor18[s].field_0].field_0 = 0
                                            stor10--
                                            investorCount--
                                            if not ext_call.return_data[0] - stor31[stor18[s].field_0].field_256:
                                                _24890 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24890] = 26
                                                mem[_24890 + 32] = 'SafeMath: division by zero'
                                                _25989 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_25989] = 30
                                                mem[_25989 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > ext_call.return_data[0]:
                                                    _26647 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _26647 + 68] = mem[idx + _25989 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_26647 + 68] = mem[_26647 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _26647 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= 95 * ext_call.return_data[0] / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] > ext_call.return_data[0]:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                mem[mem[64] + 4] = stor18[s].field_0
                                                mem[mem[64] + 36] = ext_call.return_data[0]
                                                require ext_code.size(tokenAddress)
                                                call tokenAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args stor18[s].field_0, ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                require ext_call.return_data[0]
                                                mem[mem[64]] = ext_call.return_data[0]
                                                emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                            else:
                                                if (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / ext_call.return_data[0] - stor31[stor18[s].field_0].field_256 != uint16(teamRewardFee + farmerRewardFee):
                                                    revert with 0, 32, 33, 0x1f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _25010 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_25010] = 26
                                                mem[_25010 + 32] = 'SafeMath: division by zero'
                                                _26305 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_26305] = 30
                                                mem[_26305 + 32] = 'SafeMath: subtraction overflow'
                                                if (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000 > ext_call.return_data[0]:
                                                    _27020 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _27020 + 68] = mem[idx + _26305 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_27020 + 68] = mem[_27020 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _27020 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= (95 * ext_call.return_data[0]) - (95 * (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    emit Withdraw((ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                else:
                                    require ext_code.size(tokenAddress)
                                    call tokenAddress.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args farmerAddress, (ext_call.return_data[0] * farmerRewardFee) - (stor31[stor18[s].field_0].field_256 * farmerRewardFee) / 10000
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_call.return_data[0]
                                    if not ext_call.return_data[0] - stor31[stor18[s].field_0].field_256:
                                        _18153 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_18153] = 26
                                        mem[_18153 + 32] = 'SafeMath: division by zero'
                                        require ext_code.size(tokenAddress)
                                        staticcall tokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(this.address)
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if 0 > ext_call.return_data[0]:
                                            emit 0x658fe604: 0, stor4
                                            sub_2445aefb--
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _19653 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_19653] = 30
                                            mem[_19653 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor19:
                                                _20041 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _20041 + 68] = mem[idx + _19653 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_20041 + 68] = mem[_20041 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _20041 + -mem[64] + 100
                                            stor19 -= stor31[stor18[s].field_0].field_256
                                            _20728 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_20728] = 30
                                            mem[_20728 + 32] = 'SafeMath: subtraction overflow'
                                            if balanceOf[stor18[s].field_0] > stor20:
                                                _21315 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _21315 + 68] = mem[idx + _20728 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_21315 + 68] = mem[_21315 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _21315 + -mem[64] + 100
                                            stor20 -= balanceOf[stor18[s].field_0]
                                            mem[0] = stor18[s].field_0
                                            stor21[stor18[s].field_0] = 0
                                            mem[32] = 31
                                            _22097 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_22097] = 30
                                            mem[_22097 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor8:
                                                _22678 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _22678 + 68] = mem[idx + _22097 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_22678 + 68] = mem[_22678 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _22678 + -mem[64] + 100
                                            stor8 -= stor31[stor18[s].field_0].field_256
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _23355 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_23355] = 30
                                            mem[_23355 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_512 > stor9:
                                                _23809 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _23809 + 68] = mem[idx + _23355 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_23809 + 68] = mem[_23809 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _23809 + -mem[64] + 100
                                            stor9 -= stor31[stor18[s].field_0].field_512
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            stor31[stor18[s].field_0].field_256 = 0
                                            stor31[stor18[s].field_0].field_512 = 0
                                            stor31[stor18[s].field_0].field_0 = 0
                                            stor10--
                                            investorCount--
                                            if not ext_call.return_data[0] - stor31[stor18[s].field_0].field_256:
                                                _24772 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24772] = 26
                                                mem[_24772 + 32] = 'SafeMath: division by zero'
                                                _25724 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_25724] = 30
                                                mem[_25724 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > ext_call.return_data[0]:
                                                    _26314 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _26314 + 68] = mem[idx + _25724 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_26314 + 68] = mem[_26314 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _26314 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= 95 * ext_call.return_data[0] / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] > ext_call.return_data[0]:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                mem[mem[64] + 4] = stor18[s].field_0
                                                mem[mem[64] + 36] = ext_call.return_data[0]
                                                require ext_code.size(tokenAddress)
                                                call tokenAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args stor18[s].field_0, ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                require ext_call.return_data[0]
                                                mem[mem[64]] = ext_call.return_data[0]
                                                emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                            else:
                                                if (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / ext_call.return_data[0] - stor31[stor18[s].field_0].field_256 != uint16(teamRewardFee + farmerRewardFee):
                                                    revert with 0, 32, 33, 0x1f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _24895 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24895] = 26
                                                mem[_24895 + 32] = 'SafeMath: division by zero'
                                                _25997 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_25997] = 30
                                                mem[_25997 + 32] = 'SafeMath: subtraction overflow'
                                                if (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000 > ext_call.return_data[0]:
                                                    _26659 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _26659 + 68] = mem[idx + _25997 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_26659 + 68] = mem[_26659 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _26659 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= (95 * ext_call.return_data[0]) - (95 * (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    emit Withdraw((ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                        else:
                                            require ext_code.size(tokenAddress)
                                            call tokenAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args stor4, 0
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0]
                                            sub_2445aefb--
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _20516 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_20516] = 30
                                            mem[_20516 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor19:
                                                _21000 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _21000 + 68] = mem[idx + _20516 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_21000 + 68] = mem[_21000 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _21000 + -mem[64] + 100
                                            stor19 -= stor31[stor18[s].field_0].field_256
                                            _21830 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_21830] = 30
                                            mem[_21830 + 32] = 'SafeMath: subtraction overflow'
                                            if balanceOf[stor18[s].field_0] > stor20:
                                                _22398 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _22398 + 68] = mem[idx + _21830 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_22398 + 68] = mem[_22398 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _22398 + -mem[64] + 100
                                            stor20 -= balanceOf[stor18[s].field_0]
                                            mem[0] = stor18[s].field_0
                                            stor21[stor18[s].field_0] = 0
                                            mem[32] = 31
                                            _23134 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_23134] = 30
                                            mem[_23134 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor8:
                                                _23589 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _23589 + 68] = mem[idx + _23134 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_23589 + 68] = mem[_23589 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _23589 + -mem[64] + 100
                                            stor8 -= stor31[stor18[s].field_0].field_256
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _24121 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_24121] = 30
                                            mem[_24121 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_512 > stor9:
                                                _24449 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _24449 + 68] = mem[idx + _24121 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_24449 + 68] = mem[_24449 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _24449 + -mem[64] + 100
                                            stor9 -= stor31[stor18[s].field_0].field_512
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            stor31[stor18[s].field_0].field_256 = 0
                                            stor31[stor18[s].field_0].field_512 = 0
                                            stor31[stor18[s].field_0].field_0 = 0
                                            stor10--
                                            investorCount--
                                            if not ext_call.return_data[0] - stor31[stor18[s].field_0].field_256:
                                                _25295 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_25295] = 26
                                                mem[_25295 + 32] = 'SafeMath: division by zero'
                                                _27037 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_27037] = 30
                                                mem[_27037 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > ext_call.return_data[0]:
                                                    _27903 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _27903 + 68] = mem[idx + _27037 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_27903 + 68] = mem[_27903 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _27903 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= 95 * ext_call.return_data[0] / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] > ext_call.return_data[0]:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                mem[mem[64] + 4] = stor18[s].field_0
                                                mem[mem[64] + 36] = ext_call.return_data[0]
                                                require ext_code.size(tokenAddress)
                                                call tokenAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args stor18[s].field_0, ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                require ext_call.return_data[0]
                                                mem[mem[64]] = ext_call.return_data[0]
                                                emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                            else:
                                                if (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / ext_call.return_data[0] - stor31[stor18[s].field_0].field_256 != uint16(teamRewardFee + farmerRewardFee):
                                                    revert with 0, 32, 33, 0x1f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _25493 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_25493] = 26
                                                mem[_25493 + 32] = 'SafeMath: division by zero'
                                                _27467 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_27467] = 30
                                                mem[_27467 + 32] = 'SafeMath: subtraction overflow'
                                                if (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000 > ext_call.return_data[0]:
                                                    _28302 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _28302 + 68] = mem[idx + _27467 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_28302 + 68] = mem[_28302 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _28302 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= (95 * ext_call.return_data[0]) - (95 * (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    emit Withdraw((ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                    else:
                                        if (ext_call.return_data[0] * teamRewardFee) - (stor31[stor18[s].field_0].field_256 * teamRewardFee) / ext_call.return_data[0] - stor31[stor18[s].field_0].field_256 != teamRewardFee:
                                            revert with 0, 32, 33, 0x1f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _18220 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_18220] = 26
                                        mem[_18220 + 32] = 'SafeMath: division by zero'
                                        require ext_code.size(tokenAddress)
                                        staticcall tokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(this.address)
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if (ext_call.return_data[0] * teamRewardFee) - (stor31[stor18[s].field_0].field_256 * teamRewardFee) / 10000 > ext_call.return_data[0]:
                                            emit 0x658fe604: ((ext_call.return_data[0] * teamRewardFee) - (stor31[stor18[s].field_0].field_256 * teamRewardFee) / 10000), stor4
                                            sub_2445aefb--
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _19828 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_19828] = 30
                                            mem[_19828 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor19:
                                                _20295 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _20295 + 68] = mem[idx + _19828 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_20295 + 68] = mem[_20295 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _20295 + -mem[64] + 100
                                            stor19 -= stor31[stor18[s].field_0].field_256
                                            _20996 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_20996] = 30
                                            mem[_20996 + 32] = 'SafeMath: subtraction overflow'
                                            if balanceOf[stor18[s].field_0] > stor20:
                                                _21586 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _21586 + 68] = mem[idx + _20996 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_21586 + 68] = mem[_21586 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _21586 + -mem[64] + 100
                                            stor20 -= balanceOf[stor18[s].field_0]
                                            mem[0] = stor18[s].field_0
                                            stor21[stor18[s].field_0] = 0
                                            mem[32] = 31
                                            _22393 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_22393] = 30
                                            mem[_22393 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor8:
                                                _22917 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _22917 + 68] = mem[idx + _22393 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_22917 + 68] = mem[_22917 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _22917 + -mem[64] + 100
                                            stor8 -= stor31[stor18[s].field_0].field_256
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _23584 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_23584] = 30
                                            mem[_23584 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_512 > stor9:
                                                _23976 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _23976 + 68] = mem[idx + _23584 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_23976 + 68] = mem[_23976 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _23976 + -mem[64] + 100
                                            stor9 -= stor31[stor18[s].field_0].field_512
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            stor31[stor18[s].field_0].field_256 = 0
                                            stor31[stor18[s].field_0].field_512 = 0
                                            stor31[stor18[s].field_0].field_0 = 0
                                            stor10--
                                            investorCount--
                                            if not ext_call.return_data[0] - stor31[stor18[s].field_0].field_256:
                                                _24892 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24892] = 26
                                                mem[_24892 + 32] = 'SafeMath: division by zero'
                                                _25996 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_25996] = 30
                                                mem[_25996 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > ext_call.return_data[0]:
                                                    _26656 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _26656 + 68] = mem[idx + _25996 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_26656 + 68] = mem[_26656 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _26656 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= 95 * ext_call.return_data[0] / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] > ext_call.return_data[0]:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                mem[mem[64] + 4] = stor18[s].field_0
                                                mem[mem[64] + 36] = ext_call.return_data[0]
                                                require ext_code.size(tokenAddress)
                                                call tokenAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args stor18[s].field_0, ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                require ext_call.return_data[0]
                                                mem[mem[64]] = ext_call.return_data[0]
                                                emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                            else:
                                                if (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / ext_call.return_data[0] - stor31[stor18[s].field_0].field_256 != uint16(teamRewardFee + farmerRewardFee):
                                                    revert with 0, 32, 33, 0x1f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _25012 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_25012] = 26
                                                mem[_25012 + 32] = 'SafeMath: division by zero'
                                                _26313 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_26313] = 30
                                                mem[_26313 + 32] = 'SafeMath: subtraction overflow'
                                                if (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000 > ext_call.return_data[0]:
                                                    _27031 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _27031 + 68] = mem[idx + _26313 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_27031 + 68] = mem[_27031 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _27031 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= (95 * ext_call.return_data[0]) - (95 * (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    emit Withdraw((ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                        else:
                                            require ext_code.size(tokenAddress)
                                            call tokenAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args stor4, (ext_call.return_data[0] * teamRewardFee) - (stor31[stor18[s].field_0].field_256 * teamRewardFee) / 10000
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0]
                                            sub_2445aefb--
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _20727 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_20727] = 30
                                            mem[_20727 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor19:
                                                _21312 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _21312 + 68] = mem[idx + _20727 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_21312 + 68] = mem[_21312 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _21312 + -mem[64] + 100
                                            stor19 -= stor31[stor18[s].field_0].field_256
                                            _22094 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_22094] = 30
                                            mem[_22094 + 32] = 'SafeMath: subtraction overflow'
                                            if balanceOf[stor18[s].field_0] > stor20:
                                                _22675 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _22675 + 68] = mem[idx + _22094 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_22675 + 68] = mem[_22675 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _22675 + -mem[64] + 100
                                            stor20 -= balanceOf[stor18[s].field_0]
                                            mem[0] = stor18[s].field_0
                                            stor21[stor18[s].field_0] = 0
                                            mem[32] = 31
                                            _23352 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_23352] = 30
                                            mem[_23352 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor8:
                                                _23806 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _23806 + 68] = mem[idx + _23352 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_23806 + 68] = mem[_23806 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _23806 + -mem[64] + 100
                                            stor8 -= stor31[stor18[s].field_0].field_256
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _24281 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_24281] = 30
                                            mem[_24281 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_512 > stor9:
                                                _24571 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _24571 + 68] = mem[idx + _24281 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_24571 + 68] = mem[_24571 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _24571 + -mem[64] + 100
                                            stor9 -= stor31[stor18[s].field_0].field_512
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            stor31[stor18[s].field_0].field_256 = 0
                                            stor31[stor18[s].field_0].field_512 = 0
                                            stor31[stor18[s].field_0].field_0 = 0
                                            stor10--
                                            investorCount--
                                            if not ext_call.return_data[0] - stor31[stor18[s].field_0].field_256:
                                                _25492 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_25492] = 26
                                                mem[_25492 + 32] = 'SafeMath: division by zero'
                                                _27461 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_27461] = 30
                                                mem[_27461 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > ext_call.return_data[0]:
                                                    _28296 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _28296 + 68] = mem[idx + _27461 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_28296 + 68] = mem[_28296 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _28296 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= 95 * ext_call.return_data[0] / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] > ext_call.return_data[0]:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                mem[mem[64] + 4] = stor18[s].field_0
                                                mem[mem[64] + 36] = ext_call.return_data[0]
                                                require ext_code.size(tokenAddress)
                                                call tokenAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args stor18[s].field_0, ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                require ext_call.return_data[0]
                                                mem[mem[64]] = ext_call.return_data[0]
                                                emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                            else:
                                                if (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / ext_call.return_data[0] - stor31[stor18[s].field_0].field_256 != uint16(teamRewardFee + farmerRewardFee):
                                                    revert with 0, 32, 33, 0x1f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _25723 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_25723] = 26
                                                mem[_25723 + 32] = 'SafeMath: division by zero'
                                                _27898 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_27898] = 30
                                                mem[_27898 + 32] = 'SafeMath: subtraction overflow'
                                                if (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000 > ext_call.return_data[0]:
                                                    _28721 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _28721 + 68] = mem[idx + _27898 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_28721 + 68] = mem[_28721 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _28721 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= (95 * ext_call.return_data[0]) - (95 * (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    emit Withdraw((ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
            else:
                if balanceOf[stor18[s].field_0] * stor25 / stor25 != balanceOf[stor18[s].field_0]:
                    revert with 0, 32, 33, 0x1f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                _16847 = mem[64]
                mem[64] = mem[64] + 64
                mem[_16847] = 26
                mem[_16847 + 32] = 'SafeMath: division by zero'
                if not stor20:
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 26
                    mem[mem[64] + 68] = 'SafeMath: division by zero'
                    idx = 32
                    while idx < 26:
                        mem[idx + mem[64] + 68] = mem[idx + _16847 + 32]
                        idx = idx + 32
                        continue 
                    revert with 0, 'SafeMath: division by zero'
                require ext_code.size(tokenAddress)
                staticcall tokenAddress.0x70a08231 with:
                        gas gas_remaining wei
                       args address(this.address)
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] <= 95 * balanceOf[stor18[s].field_0] * stor25 / stor20 / 100:
                    revert with 0, 'pool doesnot have enough balance'
                require ext_code.size(tokenAddress)
                staticcall tokenAddress.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if balanceOf[stor18[s].field_0] * stor25 / stor20 <= ext_call.return_data[0]:
                    if not stor18[s].field_0:
                        revert with 0, 32, 33, 0x7342455032303a206275726e2066726f6d20746865207a65726f20616464726573, mem[mem[64] + 101 len 31]
                    _16951 = mem[64]
                    mem[64] = mem[64] + 96
                    mem[_16951] = 34
                    mem[_16951 + 32 len 34] = 0x6f42455032303a206275726e20616d6f756e7420657863656564732062616c616e63
                    mem[32] = 32
                    if balanceOf[stor18[s].field_0] > balanceOf[stor18[s].field_0]:
                        _16971 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 34
                        idx = 0
                        while idx < 34:
                            mem[idx + _16971 + 68] = mem[idx + _16951 + 32]
                            idx = idx + 32
                            continue 
                        mem[_16971 + 100] = mem[_16971 + 130 len 2]
                        revert with memory
                          from mem[64]
                           len _16971 + -mem[64] + 132
                    mem[0] = stor18[s].field_0
                    mem[32] = 32
                    balanceOf[stor18[s].field_0] = 0
                    _16993 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_16993] = 30
                    mem[_16993 + 32] = 'SafeMath: subtraction overflow'
                    if balanceOf[stor18[s].field_0] > _totalSupply:
                        _17027 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 30
                        idx = 0
                        while idx < 30:
                            mem[idx + _17027 + 68] = mem[idx + _16993 + 32]
                            idx = idx + 32
                            continue 
                        mem[_17027 + 68] = mem[_17027 + 70 len 30]
                        revert with memory
                          from mem[64]
                           len _17027 + -mem[64] + 100
                    _totalSupply -= balanceOf[stor18[s].field_0]
                    emit Transfer(balanceOf[stor18[s].field_0], stor18[s].field_0, 0);
                    stor25 -= balanceOf[stor18[s].field_0] * stor25 / stor20
                    sub_a14ed18a -= balanceOf[stor18[s].field_0] * stor25 / stor20
                    if balanceOf[stor18[s].field_0] * stor25 / stor20 <= stor31[stor18[s].field_0].field_256:
                        sub_2445aefb--
                        mem[0] = stor18[s].field_0
                        mem[32] = 31
                        _17140 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_17140] = 30
                        mem[_17140 + 32] = 'SafeMath: subtraction overflow'
                        if stor31[stor18[s].field_0].field_256 > stor19:
                            _17172 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[idx + _17172 + 68] = mem[idx + _17140 + 32]
                                idx = idx + 32
                                continue 
                            mem[_17172 + 68] = mem[_17172 + 70 len 30]
                            revert with memory
                              from mem[64]
                               len _17172 + -mem[64] + 100
                        stor19 -= stor31[stor18[s].field_0].field_256
                        _17235 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_17235] = 30
                        mem[_17235 + 32] = 'SafeMath: subtraction overflow'
                        if balanceOf[stor18[s].field_0] > stor20:
                            _17296 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[idx + _17296 + 68] = mem[idx + _17235 + 32]
                                idx = idx + 32
                                continue 
                            mem[_17296 + 68] = mem[_17296 + 70 len 30]
                            revert with memory
                              from mem[64]
                               len _17296 + -mem[64] + 100
                        stor20 -= balanceOf[stor18[s].field_0]
                        mem[0] = stor18[s].field_0
                        stor21[stor18[s].field_0] = 0
                        mem[32] = 31
                        _17406 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_17406] = 30
                        mem[_17406 + 32] = 'SafeMath: subtraction overflow'
                        if stor31[stor18[s].field_0].field_256 > stor8:
                            _17478 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[idx + _17478 + 68] = mem[idx + _17406 + 32]
                                idx = idx + 32
                                continue 
                            mem[_17478 + 68] = mem[_17478 + 70 len 30]
                            revert with memory
                              from mem[64]
                               len _17478 + -mem[64] + 100
                        stor8 -= stor31[stor18[s].field_0].field_256
                        mem[0] = stor18[s].field_0
                        mem[32] = 31
                        _17645 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_17645] = 30
                        mem[_17645 + 32] = 'SafeMath: subtraction overflow'
                        if stor31[stor18[s].field_0].field_512 > stor9:
                            _17741 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[idx + _17741 + 68] = mem[idx + _17645 + 32]
                                idx = idx + 32
                                continue 
                            mem[_17741 + 68] = mem[_17741 + 70 len 30]
                            revert with memory
                              from mem[64]
                               len _17741 + -mem[64] + 100
                        stor9 -= stor31[stor18[s].field_0].field_512
                        mem[0] = stor18[s].field_0
                        mem[32] = 31
                        stor31[stor18[s].field_0].field_256 = 0
                        stor31[stor18[s].field_0].field_512 = 0
                        stor31[stor18[s].field_0].field_0 = 0
                        stor10--
                        investorCount--
                        _18042 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_18042] = 26
                        mem[_18042 + 32] = 'SafeMath: division by zero'
                        _18353 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_18353] = 30
                        mem[_18353 + 32] = 'SafeMath: subtraction overflow'
                        if 0 > balanceOf[stor18[s].field_0] * stor25 / stor20:
                            _18507 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[idx + _18507 + 68] = mem[idx + _18353 + 32]
                                idx = idx + 32
                                continue 
                            mem[_18507 + 68] = mem[_18507 + 70 len 30]
                            revert with memory
                              from mem[64]
                               len _18507 + -mem[64] + 100
                        require ext_code.size(tokenAddress)
                        staticcall tokenAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args address(this.address)
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] <= 95 * balanceOf[stor18[s].field_0] * stor25 / stor20 / 100:
                            revert with 0, 'pool doesnot have enough balance'
                        require ext_code.size(tokenAddress)
                        staticcall tokenAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if balanceOf[stor18[s].field_0] * stor25 / stor20 <= ext_call.return_data[0]:
                            mem[mem[64] + 4] = stor18[s].field_0
                            mem[mem[64] + 36] = balanceOf[stor18[s].field_0] * stor25 / stor20
                            require ext_code.size(tokenAddress)
                            call tokenAddress.0xa9059cbb with:
                                 gas gas_remaining wei
                                args stor18[s].field_0, balanceOf[stor18[s].field_0] * stor25 / stor20
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_call.return_data[0]
                            mem[mem[64]] = balanceOf[stor18[s].field_0] * stor25 / stor20
                            emit Withdraw((balanceOf[stor18[s].field_0] * stor25 / stor20), stor18[s].field_0);
                        else:
                            require ext_code.size(tokenAddress)
                            staticcall tokenAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            mem[mem[64] + 4] = stor18[s].field_0
                            mem[mem[64] + 36] = ext_call.return_data[0]
                            require ext_code.size(tokenAddress)
                            call tokenAddress.0xa9059cbb with:
                                 gas gas_remaining wei
                                args stor18[s].field_0, ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_call.return_data[0]
                            mem[mem[64]] = ext_call.return_data[0]
                            emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                    else:
                        mem[0] = stor18[s].field_0
                        mem[32] = 31
                        if not (balanceOf[stor18[s].field_0] * stor25 / stor20) - stor31[stor18[s].field_0].field_256:
                            sub_2445aefb--
                            mem[0] = stor18[s].field_0
                            mem[32] = 31
                            _17139 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_17139] = 30
                            mem[_17139 + 32] = 'SafeMath: subtraction overflow'
                            if stor31[stor18[s].field_0].field_256 > stor19:
                                _17169 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[idx + _17169 + 68] = mem[idx + _17139 + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_17169 + 68] = mem[_17169 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _17169 + -mem[64] + 100
                            stor19 -= stor31[stor18[s].field_0].field_256
                            _17231 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_17231] = 30
                            mem[_17231 + 32] = 'SafeMath: subtraction overflow'
                            if balanceOf[stor18[s].field_0] > stor20:
                                _17293 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[idx + _17293 + 68] = mem[idx + _17231 + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_17293 + 68] = mem[_17293 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _17293 + -mem[64] + 100
                            stor20 -= balanceOf[stor18[s].field_0]
                            mem[0] = stor18[s].field_0
                            stor21[stor18[s].field_0] = 0
                            mem[32] = 31
                            _17401 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_17401] = 30
                            mem[_17401 + 32] = 'SafeMath: subtraction overflow'
                            if stor31[stor18[s].field_0].field_256 > stor8:
                                _17473 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[idx + _17473 + 68] = mem[idx + _17401 + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_17473 + 68] = mem[_17473 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _17473 + -mem[64] + 100
                            stor8 -= stor31[stor18[s].field_0].field_256
                            mem[0] = stor18[s].field_0
                            mem[32] = 31
                            _17641 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_17641] = 30
                            mem[_17641 + 32] = 'SafeMath: subtraction overflow'
                            if stor31[stor18[s].field_0].field_512 > stor9:
                                _17737 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[idx + _17737 + 68] = mem[idx + _17641 + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_17737 + 68] = mem[_17737 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _17737 + -mem[64] + 100
                            stor9 -= stor31[stor18[s].field_0].field_512
                            mem[0] = stor18[s].field_0
                            mem[32] = 31
                            stor31[stor18[s].field_0].field_256 = 0
                            stor31[stor18[s].field_0].field_512 = 0
                            stor31[stor18[s].field_0].field_0 = 0
                            stor10--
                            investorCount--
                            if not (balanceOf[stor18[s].field_0] * stor25 / stor20) - stor31[stor18[s].field_0].field_256:
                                _18037 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_18037] = 26
                                mem[_18037 + 32] = 'SafeMath: division by zero'
                                _18341 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_18341] = 30
                                mem[_18341 + 32] = 'SafeMath: subtraction overflow'
                                if 0 > balanceOf[stor18[s].field_0] * stor25 / stor20:
                                    _18489 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[idx + _18489 + 68] = mem[idx + _18341 + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_18489 + 68] = mem[_18489 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _18489 + -mem[64] + 100
                                require ext_code.size(tokenAddress)
                                staticcall tokenAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args address(this.address)
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] <= 95 * balanceOf[stor18[s].field_0] * stor25 / stor20 / 100:
                                    revert with 0, 'pool doesnot have enough balance'
                                require ext_code.size(tokenAddress)
                                staticcall tokenAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if balanceOf[stor18[s].field_0] * stor25 / stor20 <= ext_call.return_data[0]:
                                    mem[mem[64] + 4] = stor18[s].field_0
                                    mem[mem[64] + 36] = balanceOf[stor18[s].field_0] * stor25 / stor20
                                    require ext_code.size(tokenAddress)
                                    call tokenAddress.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args stor18[s].field_0, balanceOf[stor18[s].field_0] * stor25 / stor20
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_call.return_data[0]
                                    mem[mem[64]] = balanceOf[stor18[s].field_0] * stor25 / stor20
                                    emit Withdraw((balanceOf[stor18[s].field_0] * stor25 / stor20), stor18[s].field_0);
                                else:
                                    require ext_code.size(tokenAddress)
                                    staticcall tokenAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[mem[64] + 4] = stor18[s].field_0
                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                    require ext_code.size(tokenAddress)
                                    call tokenAddress.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args stor18[s].field_0, ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_call.return_data[0]
                                    mem[mem[64]] = ext_call.return_data[0]
                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                            else:
                                if (balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / (balanceOf[stor18[s].field_0] * stor25 / stor20) - stor31[stor18[s].field_0].field_256 != uint16(teamRewardFee + farmerRewardFee):
                                    revert with 0, 32, 33, 0x1f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                _18079 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_18079] = 26
                                mem[_18079 + 32] = 'SafeMath: division by zero'
                                _18399 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_18399] = 30
                                mem[_18399 + 32] = 'SafeMath: subtraction overflow'
                                if (balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000 > balanceOf[stor18[s].field_0] * stor25 / stor20:
                                    _18629 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[idx + _18629 + 68] = mem[idx + _18399 + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_18629 + 68] = mem[_18629 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _18629 + -mem[64] + 100
                                require ext_code.size(tokenAddress)
                                staticcall tokenAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args address(this.address)
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] <= (95 * balanceOf[stor18[s].field_0] * stor25 / stor20) - (95 * (balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) / 100:
                                    revert with 0, 'pool doesnot have enough balance'
                                require ext_code.size(tokenAddress)
                                staticcall tokenAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if (balanceOf[stor18[s].field_0] * stor25 / stor20) - ((balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) <= ext_call.return_data[0]:
                                    mem[mem[64] + 4] = stor18[s].field_0
                                    mem[mem[64] + 36] = (balanceOf[stor18[s].field_0] * stor25 / stor20) - ((balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                    require ext_code.size(tokenAddress)
                                    call tokenAddress.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args stor18[s].field_0, (balanceOf[stor18[s].field_0] * stor25 / stor20) - ((balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_call.return_data[0]
                                    mem[mem[64]] = (balanceOf[stor18[s].field_0] * stor25 / stor20) - ((balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                    emit Withdraw(((balanceOf[stor18[s].field_0] * stor25 / stor20) - ((balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)), stor18[s].field_0);
                                else:
                                    require ext_code.size(tokenAddress)
                                    staticcall tokenAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[mem[64] + 4] = stor18[s].field_0
                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                    require ext_code.size(tokenAddress)
                                    call tokenAddress.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args stor18[s].field_0, ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_call.return_data[0]
                                    mem[mem[64]] = ext_call.return_data[0]
                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                        else:
                            if not (balanceOf[stor18[s].field_0] * stor25 / stor20) - stor31[stor18[s].field_0].field_256:
                                _17208 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_17208] = 26
                                mem[_17208 + 32] = 'SafeMath: division by zero'
                                require ext_code.size(tokenAddress)
                                staticcall tokenAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args address(this.address)
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if 0 > ext_call.return_data[0]:
                                    mem[0] = stor18[s].field_0
                                    emit 0x658fe604: 0, farmerAddress
                                    if not (balanceOf[stor18[s].field_0] * stor25 / stor20) - stor31[stor18[s].field_0].field_256:
                                        _17845 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_17845] = 26
                                        mem[_17845 + 32] = 'SafeMath: division by zero'
                                        require ext_code.size(tokenAddress)
                                        staticcall tokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(this.address)
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if 0 > ext_call.return_data[0]:
                                            emit 0x658fe604: 0, stor4
                                            sub_2445aefb--
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _18405 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_18405] = 30
                                            mem[_18405 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor19:
                                                _18641 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _18641 + 68] = mem[idx + _18405 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_18641 + 68] = mem[_18641 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _18641 + -mem[64] + 100
                                            stor19 -= stor31[stor18[s].field_0].field_256
                                            _19056 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_19056] = 30
                                            mem[_19056 + 32] = 'SafeMath: subtraction overflow'
                                            if balanceOf[stor18[s].field_0] > stor20:
                                                _19414 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _19414 + 68] = mem[idx + _19056 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_19414 + 68] = mem[_19414 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _19414 + -mem[64] + 100
                                            stor20 -= balanceOf[stor18[s].field_0]
                                            mem[0] = stor18[s].field_0
                                            stor21[stor18[s].field_0] = 0
                                            mem[32] = 31
                                            _19955 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_19955] = 30
                                            mem[_19955 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor8:
                                                _20452 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _20452 + 68] = mem[idx + _19955 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_20452 + 68] = mem[_20452 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _20452 + -mem[64] + 100
                                            stor8 -= stor31[stor18[s].field_0].field_256
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _21206 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_21206] = 30
                                            mem[_21206 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_512 > stor9:
                                                _21749 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _21749 + 68] = mem[idx + _21206 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_21749 + 68] = mem[_21749 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _21749 + -mem[64] + 100
                                            stor9 -= stor31[stor18[s].field_0].field_512
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            stor31[stor18[s].field_0].field_256 = 0
                                            stor31[stor18[s].field_0].field_512 = 0
                                            stor31[stor18[s].field_0].field_0 = 0
                                            stor10--
                                            investorCount--
                                            if not (balanceOf[stor18[s].field_0] * stor25 / stor20) - stor31[stor18[s].field_0].field_256:
                                                _23504 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_23504] = 26
                                                mem[_23504 + 32] = 'SafeMath: division by zero'
                                                _24539 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24539] = 30
                                                mem[_24539 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > balanceOf[stor18[s].field_0] * stor25 / stor20:
                                                    _24728 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _24728 + 68] = mem[idx + _24539 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_24728 + 68] = mem[_24728 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _24728 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= 95 * balanceOf[stor18[s].field_0] * stor25 / stor20 / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if balanceOf[stor18[s].field_0] * stor25 / stor20 <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = balanceOf[stor18[s].field_0] * stor25 / stor20
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, balanceOf[stor18[s].field_0] * stor25 / stor20
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = balanceOf[stor18[s].field_0] * stor25 / stor20
                                                    emit Withdraw((balanceOf[stor18[s].field_0] * stor25 / stor20), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                            else:
                                                if (balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / (balanceOf[stor18[s].field_0] * stor25 / stor20) - stor31[stor18[s].field_0].field_256 != uint16(teamRewardFee + farmerRewardFee):
                                                    revert with 0, 32, 33, 0x1f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _23741 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_23741] = 26
                                                mem[_23741 + 32] = 'SafeMath: division by zero'
                                                _24634 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24634] = 30
                                                mem[_24634 + 32] = 'SafeMath: subtraction overflow'
                                                if (balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000 > balanceOf[stor18[s].field_0] * stor25 / stor20:
                                                    _24851 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _24851 + 68] = mem[idx + _24634 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_24851 + 68] = mem[_24851 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _24851 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= (95 * balanceOf[stor18[s].field_0] * stor25 / stor20) - (95 * (balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if (balanceOf[stor18[s].field_0] * stor25 / stor20) - ((balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = (balanceOf[stor18[s].field_0] * stor25 / stor20) - ((balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, (balanceOf[stor18[s].field_0] * stor25 / stor20) - ((balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = (balanceOf[stor18[s].field_0] * stor25 / stor20) - ((balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    emit Withdraw(((balanceOf[stor18[s].field_0] * stor25 / stor20) - ((balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                        else:
                                            require ext_code.size(tokenAddress)
                                            call tokenAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args stor4, 0
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0]
                                            sub_2445aefb--
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _18914 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_18914] = 30
                                            mem[_18914 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor19:
                                                _19223 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _19223 + 68] = mem[idx + _18914 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_19223 + 68] = mem[_19223 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _19223 + -mem[64] + 100
                                            stor19 -= stor31[stor18[s].field_0].field_256
                                            _19759 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_19759] = 30
                                            mem[_19759 + 32] = 'SafeMath: subtraction overflow'
                                            if balanceOf[stor18[s].field_0] > stor20:
                                                _20210 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _20210 + 68] = mem[idx + _19759 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_20210 + 68] = mem[_20210 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _20210 + -mem[64] + 100
                                            stor20 -= balanceOf[stor18[s].field_0]
                                            mem[0] = stor18[s].field_0
                                            stor21[stor18[s].field_0] = 0
                                            mem[32] = 31
                                            _20889 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_20889] = 30
                                            mem[_20889 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor8:
                                                _21507 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _21507 + 68] = mem[idx + _20889 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_21507 + 68] = mem[_21507 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _21507 + -mem[64] + 100
                                            stor8 -= stor31[stor18[s].field_0].field_256
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _22287 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_22287] = 30
                                            mem[_22287 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_512 > stor9:
                                                _22845 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _22845 + 68] = mem[idx + _22287 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_22845 + 68] = mem[_22845 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _22845 + -mem[64] + 100
                                            stor9 -= stor31[stor18[s].field_0].field_512
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            stor31[stor18[s].field_0].field_256 = 0
                                            stor31[stor18[s].field_0].field_512 = 0
                                            stor31[stor18[s].field_0].field_0 = 0
                                            stor10--
                                            investorCount--
                                            if not (balanceOf[stor18[s].field_0] * stor25 / stor20) - stor31[stor18[s].field_0].field_256:
                                                _24221 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24221] = 26
                                                mem[_24221 + 32] = 'SafeMath: division by zero'
                                                _24975 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24975] = 30
                                                mem[_24975 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > balanceOf[stor18[s].field_0] * stor25 / stor20:
                                                    _25235 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _25235 + 68] = mem[idx + _24975 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_25235 + 68] = mem[_25235 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _25235 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= 95 * balanceOf[stor18[s].field_0] * stor25 / stor20 / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if balanceOf[stor18[s].field_0] * stor25 / stor20 <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = balanceOf[stor18[s].field_0] * stor25 / stor20
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, balanceOf[stor18[s].field_0] * stor25 / stor20
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = balanceOf[stor18[s].field_0] * stor25 / stor20
                                                    emit Withdraw((balanceOf[stor18[s].field_0] * stor25 / stor20), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                            else:
                                                if (balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / (balanceOf[stor18[s].field_0] * stor25 / stor20) - stor31[stor18[s].field_0].field_256 != uint16(teamRewardFee + farmerRewardFee):
                                                    revert with 0, 32, 33, 0x1f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _24396 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24396] = 26
                                                mem[_24396 + 32] = 'SafeMath: division by zero'
                                                _25093 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_25093] = 30
                                                mem[_25093 + 32] = 'SafeMath: subtraction overflow'
                                                if (balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000 > balanceOf[stor18[s].field_0] * stor25 / stor20:
                                                    _25422 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _25422 + 68] = mem[idx + _25093 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_25422 + 68] = mem[_25422 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _25422 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= (95 * balanceOf[stor18[s].field_0] * stor25 / stor20) - (95 * (balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if (balanceOf[stor18[s].field_0] * stor25 / stor20) - ((balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = (balanceOf[stor18[s].field_0] * stor25 / stor20) - ((balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, (balanceOf[stor18[s].field_0] * stor25 / stor20) - ((balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = (balanceOf[stor18[s].field_0] * stor25 / stor20) - ((balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    emit Withdraw(((balanceOf[stor18[s].field_0] * stor25 / stor20) - ((balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                    else:
                                        if (balanceOf[stor18[s].field_0] * stor25 / stor20 * teamRewardFee) - (stor31[stor18[s].field_0].field_256 * teamRewardFee) / (balanceOf[stor18[s].field_0] * stor25 / stor20) - stor31[stor18[s].field_0].field_256 != teamRewardFee:
                                            revert with 0, 32, 33, 0x1f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _17892 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_17892] = 26
                                        mem[_17892 + 32] = 'SafeMath: division by zero'
                                        require ext_code.size(tokenAddress)
                                        staticcall tokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(this.address)
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if (balanceOf[stor18[s].field_0] * stor25 / stor20 * teamRewardFee) - (stor31[stor18[s].field_0].field_256 * teamRewardFee) / 10000 > ext_call.return_data[0]:
                                            emit 0x658fe604: ((balanceOf[stor18[s].field_0] * stor25 / stor20 * teamRewardFee) - (stor31[stor18[s].field_0].field_256 * teamRewardFee) / 10000), stor4
                                            sub_2445aefb--
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _18498 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_18498] = 30
                                            mem[_18498 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor19:
                                                _18785 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _18785 + 68] = mem[idx + _18498 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_18785 + 68] = mem[_18785 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _18785 + -mem[64] + 100
                                            stor19 -= stor31[stor18[s].field_0].field_256
                                            _19219 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_19219] = 30
                                            mem[_19219 + 32] = 'SafeMath: subtraction overflow'
                                            if balanceOf[stor18[s].field_0] > stor20:
                                                _19596 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _19596 + 68] = mem[idx + _19219 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_19596 + 68] = mem[_19596 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _19596 + -mem[64] + 100
                                            stor20 -= balanceOf[stor18[s].field_0]
                                            mem[0] = stor18[s].field_0
                                            stor21[stor18[s].field_0] = 0
                                            mem[32] = 31
                                            _20205 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_20205] = 30
                                            mem[_20205 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor8:
                                                _20644 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _20644 + 68] = mem[idx + _20205 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_20644 + 68] = mem[_20644 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _20644 + -mem[64] + 100
                                            stor8 -= stor31[stor18[s].field_0].field_256
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _21502 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_21502] = 30
                                            mem[_21502 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_512 > stor9:
                                                _21992 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _21992 + 68] = mem[idx + _21502 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_21992 + 68] = mem[_21992 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _21992 + -mem[64] + 100
                                            stor9 -= stor31[stor18[s].field_0].field_512
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            stor31[stor18[s].field_0].field_256 = 0
                                            stor31[stor18[s].field_0].field_512 = 0
                                            stor31[stor18[s].field_0].field_0 = 0
                                            stor10--
                                            investorCount--
                                            if not (balanceOf[stor18[s].field_0] * stor25 / stor20) - stor31[stor18[s].field_0].field_256:
                                                _23738 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_23738] = 26
                                                mem[_23738 + 32] = 'SafeMath: division by zero'
                                                _24633 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24633] = 30
                                                mem[_24633 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > balanceOf[stor18[s].field_0] * stor25 / stor20:
                                                    _24848 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _24848 + 68] = mem[idx + _24633 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_24848 + 68] = mem[_24848 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _24848 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= 95 * balanceOf[stor18[s].field_0] * stor25 / stor20 / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if balanceOf[stor18[s].field_0] * stor25 / stor20 <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = balanceOf[stor18[s].field_0] * stor25 / stor20
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, balanceOf[stor18[s].field_0] * stor25 / stor20
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = balanceOf[stor18[s].field_0] * stor25 / stor20
                                                    emit Withdraw((balanceOf[stor18[s].field_0] * stor25 / stor20), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                            else:
                                                if (balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / (balanceOf[stor18[s].field_0] * stor25 / stor20) - stor31[stor18[s].field_0].field_256 != uint16(teamRewardFee + farmerRewardFee):
                                                    revert with 0, 32, 33, 0x1f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _23931 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_23931] = 26
                                                mem[_23931 + 32] = 'SafeMath: division by zero'
                                                _24727 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24727] = 30
                                                mem[_24727 + 32] = 'SafeMath: subtraction overflow'
                                                if (balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000 > balanceOf[stor18[s].field_0] * stor25 / stor20:
                                                    _24969 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _24969 + 68] = mem[idx + _24727 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_24969 + 68] = mem[_24969 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _24969 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= (95 * balanceOf[stor18[s].field_0] * stor25 / stor20) - (95 * (balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if (balanceOf[stor18[s].field_0] * stor25 / stor20) - ((balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = (balanceOf[stor18[s].field_0] * stor25 / stor20) - ((balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, (balanceOf[stor18[s].field_0] * stor25 / stor20) - ((balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = (balanceOf[stor18[s].field_0] * stor25 / stor20) - ((balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    emit Withdraw(((balanceOf[stor18[s].field_0] * stor25 / stor20) - ((balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                        else:
                                            require ext_code.size(tokenAddress)
                                            call tokenAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args stor4, (balanceOf[stor18[s].field_0] * stor25 / stor20 * teamRewardFee) - (stor31[stor18[s].field_0].field_256 * teamRewardFee) / 10000
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0]
                                            sub_2445aefb--
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _19055 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_19055] = 30
                                            mem[_19055 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor19:
                                                _19411 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _19411 + 68] = mem[idx + _19055 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_19411 + 68] = mem[_19411 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _19411 + -mem[64] + 100
                                            stor19 -= stor31[stor18[s].field_0].field_256
                                            _19952 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_19952] = 30
                                            mem[_19952 + 32] = 'SafeMath: subtraction overflow'
                                            if balanceOf[stor18[s].field_0] > stor20:
                                                _20449 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _20449 + 68] = mem[idx + _19952 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_20449 + 68] = mem[_20449 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _20449 + -mem[64] + 100
                                            stor20 -= balanceOf[stor18[s].field_0]
                                            mem[0] = stor18[s].field_0
                                            stor21[stor18[s].field_0] = 0
                                            mem[32] = 31
                                            _21203 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_21203] = 30
                                            mem[_21203 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor8:
                                                _21746 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _21746 + 68] = mem[idx + _21203 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_21746 + 68] = mem[_21746 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _21746 + -mem[64] + 100
                                            stor8 -= stor31[stor18[s].field_0].field_256
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _22585 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_22585] = 30
                                            mem[_22585 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_512 > stor9:
                                                _23064 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _23064 + 68] = mem[idx + _22585 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_23064 + 68] = mem[_23064 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _23064 + -mem[64] + 100
                                            stor9 -= stor31[stor18[s].field_0].field_512
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            stor31[stor18[s].field_0].field_256 = 0
                                            stor31[stor18[s].field_0].field_512 = 0
                                            stor31[stor18[s].field_0].field_0 = 0
                                            stor10--
                                            investorCount--
                                            if not (balanceOf[stor18[s].field_0] * stor25 / stor20) - stor31[stor18[s].field_0].field_256:
                                                _24395 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24395] = 26
                                                mem[_24395 + 32] = 'SafeMath: division by zero'
                                                _25087 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_25087] = 30
                                                mem[_25087 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > balanceOf[stor18[s].field_0] * stor25 / stor20:
                                                    _25416 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _25416 + 68] = mem[idx + _25087 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_25416 + 68] = mem[_25416 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _25416 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= 95 * balanceOf[stor18[s].field_0] * stor25 / stor20 / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if balanceOf[stor18[s].field_0] * stor25 / stor20 <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = balanceOf[stor18[s].field_0] * stor25 / stor20
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, balanceOf[stor18[s].field_0] * stor25 / stor20
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = balanceOf[stor18[s].field_0] * stor25 / stor20
                                                    emit Withdraw((balanceOf[stor18[s].field_0] * stor25 / stor20), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                            else:
                                                if (balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / (balanceOf[stor18[s].field_0] * stor25 / stor20) - stor31[stor18[s].field_0].field_256 != uint16(teamRewardFee + farmerRewardFee):
                                                    revert with 0, 32, 33, 0x1f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _24538 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24538] = 26
                                                mem[_24538 + 32] = 'SafeMath: division by zero'
                                                _25230 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_25230] = 30
                                                mem[_25230 + 32] = 'SafeMath: subtraction overflow'
                                                if (balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000 > balanceOf[stor18[s].field_0] * stor25 / stor20:
                                                    _25633 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _25633 + 68] = mem[idx + _25230 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_25633 + 68] = mem[_25633 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _25633 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= (95 * balanceOf[stor18[s].field_0] * stor25 / stor20) - (95 * (balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if (balanceOf[stor18[s].field_0] * stor25 / stor20) - ((balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = (balanceOf[stor18[s].field_0] * stor25 / stor20) - ((balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, (balanceOf[stor18[s].field_0] * stor25 / stor20) - ((balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = (balanceOf[stor18[s].field_0] * stor25 / stor20) - ((balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    emit Withdraw(((balanceOf[stor18[s].field_0] * stor25 / stor20) - ((balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                else:
                                    require ext_code.size(tokenAddress)
                                    call tokenAddress.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args farmerAddress, 0
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_call.return_data[0]
                                    if not (balanceOf[stor18[s].field_0] * stor25 / stor20) - stor31[stor18[s].field_0].field_256:
                                        _17993 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_17993] = 26
                                        mem[_17993 + 32] = 'SafeMath: division by zero'
                                        require ext_code.size(tokenAddress)
                                        staticcall tokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(this.address)
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if 0 > ext_call.return_data[0]:
                                            emit 0x658fe604: 0, stor4
                                            sub_2445aefb--
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _18917 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_18917] = 30
                                            mem[_18917 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor19:
                                                _19226 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _19226 + 68] = mem[idx + _18917 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_19226 + 68] = mem[_19226 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _19226 + -mem[64] + 100
                                            stor19 -= stor31[stor18[s].field_0].field_256
                                            _19764 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_19764] = 30
                                            mem[_19764 + 32] = 'SafeMath: subtraction overflow'
                                            if balanceOf[stor18[s].field_0] > stor20:
                                                _20217 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _20217 + 68] = mem[idx + _19764 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_20217 + 68] = mem[_20217 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _20217 + -mem[64] + 100
                                            stor20 -= balanceOf[stor18[s].field_0]
                                            mem[0] = stor18[s].field_0
                                            stor21[stor18[s].field_0] = 0
                                            mem[32] = 31
                                            _20898 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_20898] = 30
                                            mem[_20898 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor8:
                                                _21514 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _21514 + 68] = mem[idx + _20898 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_21514 + 68] = mem[_21514 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _21514 + -mem[64] + 100
                                            stor8 -= stor31[stor18[s].field_0].field_256
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _22295 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_22295] = 30
                                            mem[_22295 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_512 > stor9:
                                                _22852 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _22852 + 68] = mem[idx + _22295 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_22852 + 68] = mem[_22852 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _22852 + -mem[64] + 100
                                            stor9 -= stor31[stor18[s].field_0].field_512
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            stor31[stor18[s].field_0].field_256 = 0
                                            stor31[stor18[s].field_0].field_512 = 0
                                            stor31[stor18[s].field_0].field_0 = 0
                                            stor10--
                                            investorCount--
                                            if not (balanceOf[stor18[s].field_0] * stor25 / stor20) - stor31[stor18[s].field_0].field_256:
                                                _24226 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24226] = 26
                                                mem[_24226 + 32] = 'SafeMath: division by zero'
                                                _24977 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24977] = 30
                                                mem[_24977 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > balanceOf[stor18[s].field_0] * stor25 / stor20:
                                                    _25239 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _25239 + 68] = mem[idx + _24977 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_25239 + 68] = mem[_25239 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _25239 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= 95 * balanceOf[stor18[s].field_0] * stor25 / stor20 / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if balanceOf[stor18[s].field_0] * stor25 / stor20 <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = balanceOf[stor18[s].field_0] * stor25 / stor20
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, balanceOf[stor18[s].field_0] * stor25 / stor20
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = balanceOf[stor18[s].field_0] * stor25 / stor20
                                                    emit Withdraw((balanceOf[stor18[s].field_0] * stor25 / stor20), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                            else:
                                                if (balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / (balanceOf[stor18[s].field_0] * stor25 / stor20) - stor31[stor18[s].field_0].field_256 != uint16(teamRewardFee + farmerRewardFee):
                                                    revert with 0, 32, 33, 0x1f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _24400 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24400] = 26
                                                mem[_24400 + 32] = 'SafeMath: division by zero'
                                                _25095 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_25095] = 30
                                                mem[_25095 + 32] = 'SafeMath: subtraction overflow'
                                                if (balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000 > balanceOf[stor18[s].field_0] * stor25 / stor20:
                                                    _25428 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _25428 + 68] = mem[idx + _25095 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_25428 + 68] = mem[_25428 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _25428 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= (95 * balanceOf[stor18[s].field_0] * stor25 / stor20) - (95 * (balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if (balanceOf[stor18[s].field_0] * stor25 / stor20) - ((balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = (balanceOf[stor18[s].field_0] * stor25 / stor20) - ((balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, (balanceOf[stor18[s].field_0] * stor25 / stor20) - ((balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = (balanceOf[stor18[s].field_0] * stor25 / stor20) - ((balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    emit Withdraw(((balanceOf[stor18[s].field_0] * stor25 / stor20) - ((balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                        else:
                                            require ext_code.size(tokenAddress)
                                            call tokenAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args stor4, 0
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0]
                                            sub_2445aefb--
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _19602 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_19602] = 30
                                            mem[_19602 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor19:
                                                _19963 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _19963 + 68] = mem[idx + _19602 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_19963 + 68] = mem[_19963 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _19963 + -mem[64] + 100
                                            stor19 -= stor31[stor18[s].field_0].field_256
                                            _20654 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_20654] = 30
                                            mem[_20654 + 32] = 'SafeMath: subtraction overflow'
                                            if balanceOf[stor18[s].field_0] > stor20:
                                                _21215 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _21215 + 68] = mem[idx + _20654 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_21215 + 68] = mem[_21215 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _21215 + -mem[64] + 100
                                            stor20 -= balanceOf[stor18[s].field_0]
                                            mem[0] = stor18[s].field_0
                                            stor21[stor18[s].field_0] = 0
                                            mem[32] = 31
                                            _22002 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_22002] = 30
                                            mem[_22002 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor8:
                                                _22596 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _22596 + 68] = mem[idx + _22002 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_22596 + 68] = mem[_22596 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _22596 + -mem[64] + 100
                                            stor8 -= stor31[stor18[s].field_0].field_256
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _23278 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_23278] = 30
                                            mem[_23278 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_512 > stor9:
                                                _23747 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _23747 + 68] = mem[idx + _23278 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_23747 + 68] = mem[_23747 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _23747 + -mem[64] + 100
                                            stor9 -= stor31[stor18[s].field_0].field_512
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            stor31[stor18[s].field_0].field_256 = 0
                                            stor31[stor18[s].field_0].field_512 = 0
                                            stor31[stor18[s].field_0].field_0 = 0
                                            stor10--
                                            investorCount--
                                            if not (balanceOf[stor18[s].field_0] * stor25 / stor20) - stor31[stor18[s].field_0].field_256:
                                                _24733 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24733] = 26
                                                mem[_24733 + 32] = 'SafeMath: division by zero'
                                                _25650 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_25650] = 30
                                                mem[_25650 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > balanceOf[stor18[s].field_0] * stor25 / stor20:
                                                    _26218 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _26218 + 68] = mem[idx + _25650 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_26218 + 68] = mem[_26218 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _26218 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= 95 * balanceOf[stor18[s].field_0] * stor25 / stor20 / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if balanceOf[stor18[s].field_0] * stor25 / stor20 <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = balanceOf[stor18[s].field_0] * stor25 / stor20
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, balanceOf[stor18[s].field_0] * stor25 / stor20
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = balanceOf[stor18[s].field_0] * stor25 / stor20
                                                    emit Withdraw((balanceOf[stor18[s].field_0] * stor25 / stor20), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                            else:
                                                if (balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / (balanceOf[stor18[s].field_0] * stor25 / stor20) - stor31[stor18[s].field_0].field_256 != uint16(teamRewardFee + farmerRewardFee):
                                                    revert with 0, 32, 33, 0x1f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _24855 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24855] = 26
                                                mem[_24855 + 32] = 'SafeMath: division by zero'
                                                _25910 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_25910] = 30
                                                mem[_25910 + 32] = 'SafeMath: subtraction overflow'
                                                if (balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000 > balanceOf[stor18[s].field_0] * stor25 / stor20:
                                                    _26552 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _26552 + 68] = mem[idx + _25910 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_26552 + 68] = mem[_26552 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _26552 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= (95 * balanceOf[stor18[s].field_0] * stor25 / stor20) - (95 * (balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if (balanceOf[stor18[s].field_0] * stor25 / stor20) - ((balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = (balanceOf[stor18[s].field_0] * stor25 / stor20) - ((balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, (balanceOf[stor18[s].field_0] * stor25 / stor20) - ((balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = (balanceOf[stor18[s].field_0] * stor25 / stor20) - ((balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    emit Withdraw(((balanceOf[stor18[s].field_0] * stor25 / stor20) - ((balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                    else:
                                        if (balanceOf[stor18[s].field_0] * stor25 / stor20 * teamRewardFee) - (stor31[stor18[s].field_0].field_256 * teamRewardFee) / (balanceOf[stor18[s].field_0] * stor25 / stor20) - stor31[stor18[s].field_0].field_256 != teamRewardFee:
                                            revert with 0, 32, 33, 0x1f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _18041 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_18041] = 26
                                        mem[_18041 + 32] = 'SafeMath: division by zero'
                                        require ext_code.size(tokenAddress)
                                        staticcall tokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(this.address)
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if (balanceOf[stor18[s].field_0] * stor25 / stor20 * teamRewardFee) - (stor31[stor18[s].field_0].field_256 * teamRewardFee) / 10000 > ext_call.return_data[0]:
                                            emit 0x658fe604: ((balanceOf[stor18[s].field_0] * stor25 / stor20 * teamRewardFee) - (stor31[stor18[s].field_0].field_256 * teamRewardFee) / 10000), stor4
                                            sub_2445aefb--
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _19059 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_19059] = 30
                                            mem[_19059 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor19:
                                                _19417 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _19417 + 68] = mem[idx + _19059 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_19417 + 68] = mem[_19417 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _19417 + -mem[64] + 100
                                            stor19 -= stor31[stor18[s].field_0].field_256
                                            _19959 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_19959] = 30
                                            mem[_19959 + 32] = 'SafeMath: subtraction overflow'
                                            if balanceOf[stor18[s].field_0] > stor20:
                                                _20455 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _20455 + 68] = mem[idx + _19959 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_20455 + 68] = mem[_20455 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _20455 + -mem[64] + 100
                                            stor20 -= balanceOf[stor18[s].field_0]
                                            mem[0] = stor18[s].field_0
                                            stor21[stor18[s].field_0] = 0
                                            mem[32] = 31
                                            _21210 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_21210] = 30
                                            mem[_21210 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor8:
                                                _21752 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _21752 + 68] = mem[idx + _21210 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_21752 + 68] = mem[_21752 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _21752 + -mem[64] + 100
                                            stor8 -= stor31[stor18[s].field_0].field_256
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _22591 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_22591] = 30
                                            mem[_22591 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_512 > stor9:
                                                _23067 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _23067 + 68] = mem[idx + _22591 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_23067 + 68] = mem[_23067 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _23067 + -mem[64] + 100
                                            stor9 -= stor31[stor18[s].field_0].field_512
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            stor31[stor18[s].field_0].field_256 = 0
                                            stor31[stor18[s].field_0].field_512 = 0
                                            stor31[stor18[s].field_0].field_0 = 0
                                            stor10--
                                            investorCount--
                                            if not (balanceOf[stor18[s].field_0] * stor25 / stor20) - stor31[stor18[s].field_0].field_256:
                                                _24397 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24397] = 26
                                                mem[_24397 + 32] = 'SafeMath: division by zero'
                                                _25094 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_25094] = 30
                                                mem[_25094 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > balanceOf[stor18[s].field_0] * stor25 / stor20:
                                                    _25425 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _25425 + 68] = mem[idx + _25094 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_25425 + 68] = mem[_25425 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _25425 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= 95 * balanceOf[stor18[s].field_0] * stor25 / stor20 / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if balanceOf[stor18[s].field_0] * stor25 / stor20 <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = balanceOf[stor18[s].field_0] * stor25 / stor20
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, balanceOf[stor18[s].field_0] * stor25 / stor20
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = balanceOf[stor18[s].field_0] * stor25 / stor20
                                                    emit Withdraw((balanceOf[stor18[s].field_0] * stor25 / stor20), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                            else:
                                                if (balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / (balanceOf[stor18[s].field_0] * stor25 / stor20) - stor31[stor18[s].field_0].field_256 != uint16(teamRewardFee + farmerRewardFee):
                                                    revert with 0, 32, 33, 0x1f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _24540 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24540] = 26
                                                mem[_24540 + 32] = 'SafeMath: division by zero'
                                                _25238 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_25238] = 30
                                                mem[_25238 + 32] = 'SafeMath: subtraction overflow'
                                                if (balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000 > balanceOf[stor18[s].field_0] * stor25 / stor20:
                                                    _25644 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _25644 + 68] = mem[idx + _25238 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_25644 + 68] = mem[_25644 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _25644 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= (95 * balanceOf[stor18[s].field_0] * stor25 / stor20) - (95 * (balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if (balanceOf[stor18[s].field_0] * stor25 / stor20) - ((balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = (balanceOf[stor18[s].field_0] * stor25 / stor20) - ((balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, (balanceOf[stor18[s].field_0] * stor25 / stor20) - ((balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = (balanceOf[stor18[s].field_0] * stor25 / stor20) - ((balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    emit Withdraw(((balanceOf[stor18[s].field_0] * stor25 / stor20) - ((balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                        else:
                                            require ext_code.size(tokenAddress)
                                            call tokenAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args stor4, (balanceOf[stor18[s].field_0] * stor25 / stor20 * teamRewardFee) - (stor31[stor18[s].field_0].field_256 * teamRewardFee) / 10000
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0]
                                            sub_2445aefb--
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _19763 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_19763] = 30
                                            mem[_19763 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor19:
                                                _20214 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _20214 + 68] = mem[idx + _19763 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_20214 + 68] = mem[_20214 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _20214 + -mem[64] + 100
                                            stor19 -= stor31[stor18[s].field_0].field_256
                                            _20895 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_20895] = 30
                                            mem[_20895 + 32] = 'SafeMath: subtraction overflow'
                                            if balanceOf[stor18[s].field_0] > stor20:
                                                _21511 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _21511 + 68] = mem[idx + _20895 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_21511 + 68] = mem[_21511 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _21511 + -mem[64] + 100
                                            stor20 -= balanceOf[stor18[s].field_0]
                                            mem[0] = stor18[s].field_0
                                            stor21[stor18[s].field_0] = 0
                                            mem[32] = 31
                                            _22292 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_22292] = 30
                                            mem[_22292 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor8:
                                                _22849 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _22849 + 68] = mem[idx + _22292 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_22849 + 68] = mem[_22849 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _22849 + -mem[64] + 100
                                            stor8 -= stor31[stor18[s].field_0].field_256
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _23509 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_23509] = 30
                                            mem[_23509 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_512 > stor9:
                                                _23934 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _23934 + 68] = mem[idx + _23509 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_23934 + 68] = mem[_23934 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _23934 + -mem[64] + 100
                                            stor9 -= stor31[stor18[s].field_0].field_512
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            stor31[stor18[s].field_0].field_256 = 0
                                            stor31[stor18[s].field_0].field_512 = 0
                                            stor31[stor18[s].field_0].field_0 = 0
                                            stor10--
                                            investorCount--
                                            if not (balanceOf[stor18[s].field_0] * stor25 / stor20) - stor31[stor18[s].field_0].field_256:
                                                _24854 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24854] = 26
                                                mem[_24854 + 32] = 'SafeMath: division by zero'
                                                _25904 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_25904] = 30
                                                mem[_25904 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > balanceOf[stor18[s].field_0] * stor25 / stor20:
                                                    _26546 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _26546 + 68] = mem[idx + _25904 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_26546 + 68] = mem[_26546 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _26546 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= 95 * balanceOf[stor18[s].field_0] * stor25 / stor20 / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if balanceOf[stor18[s].field_0] * stor25 / stor20 <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = balanceOf[stor18[s].field_0] * stor25 / stor20
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, balanceOf[stor18[s].field_0] * stor25 / stor20
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = balanceOf[stor18[s].field_0] * stor25 / stor20
                                                    emit Withdraw((balanceOf[stor18[s].field_0] * stor25 / stor20), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                            else:
                                                if (balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / (balanceOf[stor18[s].field_0] * stor25 / stor20) - stor31[stor18[s].field_0].field_256 != uint16(teamRewardFee + farmerRewardFee):
                                                    revert with 0, 32, 33, 0x1f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _24976 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24976] = 26
                                                mem[_24976 + 32] = 'SafeMath: division by zero'
                                                _26213 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_26213] = 30
                                                mem[_26213 + 32] = 'SafeMath: subtraction overflow'
                                                if (balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000 > balanceOf[stor18[s].field_0] * stor25 / stor20:
                                                    _26902 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _26902 + 68] = mem[idx + _26213 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_26902 + 68] = mem[_26902 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _26902 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= (95 * balanceOf[stor18[s].field_0] * stor25 / stor20) - (95 * (balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if (balanceOf[stor18[s].field_0] * stor25 / stor20) - ((balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = (balanceOf[stor18[s].field_0] * stor25 / stor20) - ((balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, (balanceOf[stor18[s].field_0] * stor25 / stor20) - ((balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = (balanceOf[stor18[s].field_0] * stor25 / stor20) - ((balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    emit Withdraw(((balanceOf[stor18[s].field_0] * stor25 / stor20) - ((balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                            else:
                                if (balanceOf[stor18[s].field_0] * stor25 / stor20 * farmerRewardFee) - (stor31[stor18[s].field_0].field_256 * farmerRewardFee) / (balanceOf[stor18[s].field_0] * stor25 / stor20) - stor31[stor18[s].field_0].field_256 != farmerRewardFee:
                                    revert with 0, 32, 33, 0x1f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                _17234 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_17234] = 26
                                mem[_17234 + 32] = 'SafeMath: division by zero'
                                require ext_code.size(tokenAddress)
                                staticcall tokenAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args address(this.address)
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if (balanceOf[stor18[s].field_0] * stor25 / stor20 * farmerRewardFee) - (stor31[stor18[s].field_0].field_256 * farmerRewardFee) / 10000 > ext_call.return_data[0]:
                                    mem[0] = stor18[s].field_0
                                    emit 0x658fe604: ((balanceOf[stor18[s].field_0] * stor25 / stor20 * farmerRewardFee) - (stor31[stor18[s].field_0].field_256 * farmerRewardFee) / 10000), farmerAddress
                                    if not (balanceOf[stor18[s].field_0] * stor25 / stor20) - stor31[stor18[s].field_0].field_256:
                                        _17891 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_17891] = 26
                                        mem[_17891 + 32] = 'SafeMath: division by zero'
                                        require ext_code.size(tokenAddress)
                                        staticcall tokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(this.address)
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if 0 > ext_call.return_data[0]:
                                            emit 0x658fe604: 0, stor4
                                            sub_2445aefb--
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _18494 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_18494] = 30
                                            mem[_18494 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor19:
                                                _18776 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _18776 + 68] = mem[idx + _18494 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_18776 + 68] = mem[_18776 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _18776 + -mem[64] + 100
                                            stor19 -= stor31[stor18[s].field_0].field_256
                                            _19214 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_19214] = 30
                                            mem[_19214 + 32] = 'SafeMath: subtraction overflow'
                                            if balanceOf[stor18[s].field_0] > stor20:
                                                _19589 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _19589 + 68] = mem[idx + _19214 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_19589 + 68] = mem[_19589 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _19589 + -mem[64] + 100
                                            stor20 -= balanceOf[stor18[s].field_0]
                                            mem[0] = stor18[s].field_0
                                            stor21[stor18[s].field_0] = 0
                                            mem[32] = 31
                                            _20194 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_20194] = 30
                                            mem[_20194 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor8:
                                                _20637 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _20637 + 68] = mem[idx + _20194 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_20637 + 68] = mem[_20637 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _20637 + -mem[64] + 100
                                            stor8 -= stor31[stor18[s].field_0].field_256
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _21490 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_21490] = 30
                                            mem[_21490 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_512 > stor9:
                                                _21983 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _21983 + 68] = mem[idx + _21490 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_21983 + 68] = mem[_21983 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _21983 + -mem[64] + 100
                                            stor9 -= stor31[stor18[s].field_0].field_512
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            stor31[stor18[s].field_0].field_256 = 0
                                            stor31[stor18[s].field_0].field_512 = 0
                                            stor31[stor18[s].field_0].field_0 = 0
                                            stor10--
                                            investorCount--
                                            if not (balanceOf[stor18[s].field_0] * stor25 / stor20) - stor31[stor18[s].field_0].field_256:
                                                _23727 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_23727] = 26
                                                mem[_23727 + 32] = 'SafeMath: division by zero'
                                                _24630 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24630] = 30
                                                mem[_24630 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > balanceOf[stor18[s].field_0] * stor25 / stor20:
                                                    _24842 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _24842 + 68] = mem[idx + _24630 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_24842 + 68] = mem[_24842 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _24842 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= 95 * balanceOf[stor18[s].field_0] * stor25 / stor20 / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if balanceOf[stor18[s].field_0] * stor25 / stor20 <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = balanceOf[stor18[s].field_0] * stor25 / stor20
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, balanceOf[stor18[s].field_0] * stor25 / stor20
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = balanceOf[stor18[s].field_0] * stor25 / stor20
                                                    emit Withdraw((balanceOf[stor18[s].field_0] * stor25 / stor20), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                            else:
                                                if (balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / (balanceOf[stor18[s].field_0] * stor25 / stor20) - stor31[stor18[s].field_0].field_256 != uint16(teamRewardFee + farmerRewardFee):
                                                    revert with 0, 32, 33, 0x1f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _23922 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_23922] = 26
                                                mem[_23922 + 32] = 'SafeMath: division by zero'
                                                _24724 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24724] = 30
                                                mem[_24724 + 32] = 'SafeMath: subtraction overflow'
                                                if (balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000 > balanceOf[stor18[s].field_0] * stor25 / stor20:
                                                    _24964 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _24964 + 68] = mem[idx + _24724 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_24964 + 68] = mem[_24964 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _24964 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= (95 * balanceOf[stor18[s].field_0] * stor25 / stor20) - (95 * (balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if (balanceOf[stor18[s].field_0] * stor25 / stor20) - ((balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = (balanceOf[stor18[s].field_0] * stor25 / stor20) - ((balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, (balanceOf[stor18[s].field_0] * stor25 / stor20) - ((balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = (balanceOf[stor18[s].field_0] * stor25 / stor20) - ((balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    emit Withdraw(((balanceOf[stor18[s].field_0] * stor25 / stor20) - ((balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                        else:
                                            require ext_code.size(tokenAddress)
                                            call tokenAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args stor4, 0
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0]
                                            sub_2445aefb--
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _19049 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_19049] = 30
                                            mem[_19049 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor19:
                                                _19404 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _19404 + 68] = mem[idx + _19049 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_19404 + 68] = mem[_19404 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _19404 + -mem[64] + 100
                                            stor19 -= stor31[stor18[s].field_0].field_256
                                            _19941 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_19941] = 30
                                            mem[_19941 + 32] = 'SafeMath: subtraction overflow'
                                            if balanceOf[stor18[s].field_0] > stor20:
                                                _20438 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _20438 + 68] = mem[idx + _19941 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_20438 + 68] = mem[_20438 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _20438 + -mem[64] + 100
                                            stor20 -= balanceOf[stor18[s].field_0]
                                            mem[0] = stor18[s].field_0
                                            stor21[stor18[s].field_0] = 0
                                            mem[32] = 31
                                            _21188 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_21188] = 30
                                            mem[_21188 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor8:
                                                _21735 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _21735 + 68] = mem[idx + _21188 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_21735 + 68] = mem[_21735 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _21735 + -mem[64] + 100
                                            stor8 -= stor31[stor18[s].field_0].field_256
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _22571 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_22571] = 30
                                            mem[_22571 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_512 > stor9:
                                                _23053 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _23053 + 68] = mem[idx + _22571 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_23053 + 68] = mem[_23053 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _23053 + -mem[64] + 100
                                            stor9 -= stor31[stor18[s].field_0].field_512
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            stor31[stor18[s].field_0].field_256 = 0
                                            stor31[stor18[s].field_0].field_512 = 0
                                            stor31[stor18[s].field_0].field_0 = 0
                                            stor10--
                                            investorCount--
                                            if not (balanceOf[stor18[s].field_0] * stor25 / stor20) - stor31[stor18[s].field_0].field_256:
                                                _24387 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24387] = 26
                                                mem[_24387 + 32] = 'SafeMath: division by zero'
                                                _25081 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_25081] = 30
                                                mem[_25081 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > balanceOf[stor18[s].field_0] * stor25 / stor20:
                                                    _25405 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _25405 + 68] = mem[idx + _25081 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_25405 + 68] = mem[_25405 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _25405 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= 95 * balanceOf[stor18[s].field_0] * stor25 / stor20 / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if balanceOf[stor18[s].field_0] * stor25 / stor20 <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = balanceOf[stor18[s].field_0] * stor25 / stor20
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, balanceOf[stor18[s].field_0] * stor25 / stor20
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = balanceOf[stor18[s].field_0] * stor25 / stor20
                                                    emit Withdraw((balanceOf[stor18[s].field_0] * stor25 / stor20), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                            else:
                                                if (balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / (balanceOf[stor18[s].field_0] * stor25 / stor20) - stor31[stor18[s].field_0].field_256 != uint16(teamRewardFee + farmerRewardFee):
                                                    revert with 0, 32, 33, 0x1f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _24532 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24532] = 26
                                                mem[_24532 + 32] = 'SafeMath: division by zero'
                                                _25222 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_25222] = 30
                                                mem[_25222 + 32] = 'SafeMath: subtraction overflow'
                                                if (balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000 > balanceOf[stor18[s].field_0] * stor25 / stor20:
                                                    _25621 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _25621 + 68] = mem[idx + _25222 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_25621 + 68] = mem[_25621 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _25621 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= (95 * balanceOf[stor18[s].field_0] * stor25 / stor20) - (95 * (balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if (balanceOf[stor18[s].field_0] * stor25 / stor20) - ((balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = (balanceOf[stor18[s].field_0] * stor25 / stor20) - ((balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, (balanceOf[stor18[s].field_0] * stor25 / stor20) - ((balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = (balanceOf[stor18[s].field_0] * stor25 / stor20) - ((balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    emit Withdraw(((balanceOf[stor18[s].field_0] * stor25 / stor20) - ((balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                    else:
                                        if (balanceOf[stor18[s].field_0] * stor25 / stor20 * teamRewardFee) - (stor31[stor18[s].field_0].field_256 * teamRewardFee) / (balanceOf[stor18[s].field_0] * stor25 / stor20) - stor31[stor18[s].field_0].field_256 != teamRewardFee:
                                            revert with 0, 32, 33, 0x1f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _17930 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_17930] = 26
                                        mem[_17930 + 32] = 'SafeMath: division by zero'
                                        require ext_code.size(tokenAddress)
                                        staticcall tokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(this.address)
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if (balanceOf[stor18[s].field_0] * stor25 / stor20 * teamRewardFee) - (stor31[stor18[s].field_0].field_256 * teamRewardFee) / 10000 > ext_call.return_data[0]:
                                            emit 0x658fe604: ((balanceOf[stor18[s].field_0] * stor25 / stor20 * teamRewardFee) - (stor31[stor18[s].field_0].field_256 * teamRewardFee) / 10000), stor4
                                            sub_2445aefb--
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _18632 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_18632] = 30
                                            mem[_18632 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor19:
                                                _18906 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _18906 + 68] = mem[idx + _18632 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_18906 + 68] = mem[_18906 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _18906 + -mem[64] + 100
                                            stor19 -= stor31[stor18[s].field_0].field_256
                                            _19400 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_19400] = 30
                                            mem[_19400 + 32] = 'SafeMath: subtraction overflow'
                                            if balanceOf[stor18[s].field_0] > stor20:
                                                _19748 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _19748 + 68] = mem[idx + _19400 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_19748 + 68] = mem[_19748 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _19748 + -mem[64] + 100
                                            stor20 -= balanceOf[stor18[s].field_0]
                                            mem[0] = stor18[s].field_0
                                            stor21[stor18[s].field_0] = 0
                                            mem[32] = 31
                                            _20433 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_20433] = 30
                                            mem[_20433 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor8:
                                                _20871 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _20871 + 68] = mem[idx + _20433 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_20871 + 68] = mem[_20871 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _20871 + -mem[64] + 100
                                            stor8 -= stor31[stor18[s].field_0].field_256
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _21730 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_21730] = 30
                                            mem[_21730 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_512 > stor9:
                                                _22270 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _22270 + 68] = mem[idx + _21730 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_22270 + 68] = mem[_22270 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _22270 + -mem[64] + 100
                                            stor9 -= stor31[stor18[s].field_0].field_512
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            stor31[stor18[s].field_0].field_256 = 0
                                            stor31[stor18[s].field_0].field_512 = 0
                                            stor31[stor18[s].field_0].field_0 = 0
                                            stor10--
                                            investorCount--
                                            if not (balanceOf[stor18[s].field_0] * stor25 / stor20) - stor31[stor18[s].field_0].field_256:
                                                _23919 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_23919] = 26
                                                mem[_23919 + 32] = 'SafeMath: division by zero'
                                                _24723 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24723] = 30
                                                mem[_24723 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > balanceOf[stor18[s].field_0] * stor25 / stor20:
                                                    _24961 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _24961 + 68] = mem[idx + _24723 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_24961 + 68] = mem[_24961 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _24961 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= 95 * balanceOf[stor18[s].field_0] * stor25 / stor20 / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if balanceOf[stor18[s].field_0] * stor25 / stor20 <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = balanceOf[stor18[s].field_0] * stor25 / stor20
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, balanceOf[stor18[s].field_0] * stor25 / stor20
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = balanceOf[stor18[s].field_0] * stor25 / stor20
                                                    emit Withdraw((balanceOf[stor18[s].field_0] * stor25 / stor20), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                            else:
                                                if (balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / (balanceOf[stor18[s].field_0] * stor25 / stor20) - stor31[stor18[s].field_0].field_256 != uint16(teamRewardFee + farmerRewardFee):
                                                    revert with 0, 32, 33, 0x1f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _24065 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24065] = 26
                                                mem[_24065 + 32] = 'SafeMath: division by zero'
                                                _24841 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24841] = 30
                                                mem[_24841 + 32] = 'SafeMath: subtraction overflow'
                                                if (balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000 > balanceOf[stor18[s].field_0] * stor25 / stor20:
                                                    _25075 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _25075 + 68] = mem[idx + _24841 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_25075 + 68] = mem[_25075 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _25075 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= (95 * balanceOf[stor18[s].field_0] * stor25 / stor20) - (95 * (balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if (balanceOf[stor18[s].field_0] * stor25 / stor20) - ((balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = (balanceOf[stor18[s].field_0] * stor25 / stor20) - ((balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, (balanceOf[stor18[s].field_0] * stor25 / stor20) - ((balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = (balanceOf[stor18[s].field_0] * stor25 / stor20) - ((balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    emit Withdraw(((balanceOf[stor18[s].field_0] * stor25 / stor20) - ((balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                        else:
                                            require ext_code.size(tokenAddress)
                                            call tokenAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args stor4, (balanceOf[stor18[s].field_0] * stor25 / stor20 * teamRewardFee) - (stor31[stor18[s].field_0].field_256 * teamRewardFee) / 10000
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0]
                                            sub_2445aefb--
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _19213 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_19213] = 30
                                            mem[_19213 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor19:
                                                _19586 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _19586 + 68] = mem[idx + _19213 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_19586 + 68] = mem[_19586 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _19586 + -mem[64] + 100
                                            stor19 -= stor31[stor18[s].field_0].field_256
                                            _20191 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_20191] = 30
                                            mem[_20191 + 32] = 'SafeMath: subtraction overflow'
                                            if balanceOf[stor18[s].field_0] > stor20:
                                                _20634 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _20634 + 68] = mem[idx + _20191 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_20634 + 68] = mem[_20634 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _20634 + -mem[64] + 100
                                            stor20 -= balanceOf[stor18[s].field_0]
                                            mem[0] = stor18[s].field_0
                                            stor21[stor18[s].field_0] = 0
                                            mem[32] = 31
                                            _21487 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_21487] = 30
                                            mem[_21487 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor8:
                                                _21980 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _21980 + 68] = mem[idx + _21487 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_21980 + 68] = mem[_21980 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _21980 + -mem[64] + 100
                                            stor8 -= stor31[stor18[s].field_0].field_256
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _22827 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_22827] = 30
                                            mem[_22827 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_512 > stor9:
                                                _23262 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _23262 + 68] = mem[idx + _22827 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_23262 + 68] = mem[_23262 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _23262 + -mem[64] + 100
                                            stor9 -= stor31[stor18[s].field_0].field_512
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            stor31[stor18[s].field_0].field_256 = 0
                                            stor31[stor18[s].field_0].field_512 = 0
                                            stor31[stor18[s].field_0].field_0 = 0
                                            stor10--
                                            investorCount--
                                            if not (balanceOf[stor18[s].field_0] * stor25 / stor20) - stor31[stor18[s].field_0].field_256:
                                                _24531 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24531] = 26
                                                mem[_24531 + 32] = 'SafeMath: division by zero'
                                                _25216 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_25216] = 30
                                                mem[_25216 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > balanceOf[stor18[s].field_0] * stor25 / stor20:
                                                    _25615 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _25615 + 68] = mem[idx + _25216 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_25615 + 68] = mem[_25615 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _25615 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= 95 * balanceOf[stor18[s].field_0] * stor25 / stor20 / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if balanceOf[stor18[s].field_0] * stor25 / stor20 <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = balanceOf[stor18[s].field_0] * stor25 / stor20
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, balanceOf[stor18[s].field_0] * stor25 / stor20
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = balanceOf[stor18[s].field_0] * stor25 / stor20
                                                    emit Withdraw((balanceOf[stor18[s].field_0] * stor25 / stor20), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                            else:
                                                if (balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / (balanceOf[stor18[s].field_0] * stor25 / stor20) - stor31[stor18[s].field_0].field_256 != uint16(teamRewardFee + farmerRewardFee):
                                                    revert with 0, 32, 33, 0x1f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _24629 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24629] = 26
                                                mem[_24629 + 32] = 'SafeMath: division by zero'
                                                _25400 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_25400] = 30
                                                mem[_25400 + 32] = 'SafeMath: subtraction overflow'
                                                if (balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000 > balanceOf[stor18[s].field_0] * stor25 / stor20:
                                                    _25866 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _25866 + 68] = mem[idx + _25400 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_25866 + 68] = mem[_25866 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _25866 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= (95 * balanceOf[stor18[s].field_0] * stor25 / stor20) - (95 * (balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if (balanceOf[stor18[s].field_0] * stor25 / stor20) - ((balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = (balanceOf[stor18[s].field_0] * stor25 / stor20) - ((balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, (balanceOf[stor18[s].field_0] * stor25 / stor20) - ((balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = (balanceOf[stor18[s].field_0] * stor25 / stor20) - ((balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    emit Withdraw(((balanceOf[stor18[s].field_0] * stor25 / stor20) - ((balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                else:
                                    require ext_code.size(tokenAddress)
                                    call tokenAddress.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args farmerAddress, (balanceOf[stor18[s].field_0] * stor25 / stor20 * farmerRewardFee) - (stor31[stor18[s].field_0].field_256 * farmerRewardFee) / 10000
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_call.return_data[0]
                                    if not (balanceOf[stor18[s].field_0] * stor25 / stor20) - stor31[stor18[s].field_0].field_256:
                                        _18038 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_18038] = 26
                                        mem[_18038 + 32] = 'SafeMath: division by zero'
                                        require ext_code.size(tokenAddress)
                                        staticcall tokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(this.address)
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if 0 > ext_call.return_data[0]:
                                            emit 0x658fe604: 0, stor4
                                            sub_2445aefb--
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _19052 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_19052] = 30
                                            mem[_19052 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor19:
                                                _19407 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _19407 + 68] = mem[idx + _19052 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_19407 + 68] = mem[_19407 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _19407 + -mem[64] + 100
                                            stor19 -= stor31[stor18[s].field_0].field_256
                                            _19946 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_19946] = 30
                                            mem[_19946 + 32] = 'SafeMath: subtraction overflow'
                                            if balanceOf[stor18[s].field_0] > stor20:
                                                _20445 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _20445 + 68] = mem[idx + _19946 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_20445 + 68] = mem[_20445 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _20445 + -mem[64] + 100
                                            stor20 -= balanceOf[stor18[s].field_0]
                                            mem[0] = stor18[s].field_0
                                            stor21[stor18[s].field_0] = 0
                                            mem[32] = 31
                                            _21197 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_21197] = 30
                                            mem[_21197 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor8:
                                                _21742 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _21742 + 68] = mem[idx + _21197 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_21742 + 68] = mem[_21742 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _21742 + -mem[64] + 100
                                            stor8 -= stor31[stor18[s].field_0].field_256
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _22579 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_22579] = 30
                                            mem[_22579 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_512 > stor9:
                                                _23060 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _23060 + 68] = mem[idx + _22579 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_23060 + 68] = mem[_23060 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _23060 + -mem[64] + 100
                                            stor9 -= stor31[stor18[s].field_0].field_512
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            stor31[stor18[s].field_0].field_256 = 0
                                            stor31[stor18[s].field_0].field_512 = 0
                                            stor31[stor18[s].field_0].field_0 = 0
                                            stor10--
                                            investorCount--
                                            if not (balanceOf[stor18[s].field_0] * stor25 / stor20) - stor31[stor18[s].field_0].field_256:
                                                _24392 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24392] = 26
                                                mem[_24392 + 32] = 'SafeMath: division by zero'
                                                _25083 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_25083] = 30
                                                mem[_25083 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > balanceOf[stor18[s].field_0] * stor25 / stor20:
                                                    _25409 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _25409 + 68] = mem[idx + _25083 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_25409 + 68] = mem[_25409 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _25409 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= 95 * balanceOf[stor18[s].field_0] * stor25 / stor20 / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if balanceOf[stor18[s].field_0] * stor25 / stor20 <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = balanceOf[stor18[s].field_0] * stor25 / stor20
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, balanceOf[stor18[s].field_0] * stor25 / stor20
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = balanceOf[stor18[s].field_0] * stor25 / stor20
                                                    emit Withdraw((balanceOf[stor18[s].field_0] * stor25 / stor20), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                            else:
                                                if (balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / (balanceOf[stor18[s].field_0] * stor25 / stor20) - stor31[stor18[s].field_0].field_256 != uint16(teamRewardFee + farmerRewardFee):
                                                    revert with 0, 32, 33, 0x1f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _24536 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24536] = 26
                                                mem[_24536 + 32] = 'SafeMath: division by zero'
                                                _25224 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_25224] = 30
                                                mem[_25224 + 32] = 'SafeMath: subtraction overflow'
                                                if (balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000 > balanceOf[stor18[s].field_0] * stor25 / stor20:
                                                    _25627 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _25627 + 68] = mem[idx + _25224 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_25627 + 68] = mem[_25627 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _25627 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= (95 * balanceOf[stor18[s].field_0] * stor25 / stor20) - (95 * (balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if (balanceOf[stor18[s].field_0] * stor25 / stor20) - ((balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = (balanceOf[stor18[s].field_0] * stor25 / stor20) - ((balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, (balanceOf[stor18[s].field_0] * stor25 / stor20) - ((balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = (balanceOf[stor18[s].field_0] * stor25 / stor20) - ((balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    emit Withdraw(((balanceOf[stor18[s].field_0] * stor25 / stor20) - ((balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                        else:
                                            require ext_code.size(tokenAddress)
                                            call tokenAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args stor4, 0
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0]
                                            sub_2445aefb--
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _19754 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_19754] = 30
                                            mem[_19754 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor19:
                                                _20202 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _20202 + 68] = mem[idx + _19754 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_20202 + 68] = mem[_20202 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _20202 + -mem[64] + 100
                                            stor19 -= stor31[stor18[s].field_0].field_256
                                            _20881 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_20881] = 30
                                            mem[_20881 + 32] = 'SafeMath: subtraction overflow'
                                            if balanceOf[stor18[s].field_0] > stor20:
                                                _21499 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _21499 + 68] = mem[idx + _20881 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_21499 + 68] = mem[_21499 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _21499 + -mem[64] + 100
                                            stor20 -= balanceOf[stor18[s].field_0]
                                            mem[0] = stor18[s].field_0
                                            stor21[stor18[s].field_0] = 0
                                            mem[32] = 31
                                            _22280 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_22280] = 30
                                            mem[_22280 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor8:
                                                _22838 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _22838 + 68] = mem[idx + _22280 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_22838 + 68] = mem[_22838 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _22838 + -mem[64] + 100
                                            stor8 -= stor31[stor18[s].field_0].field_256
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _23497 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_23497] = 30
                                            mem[_23497 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_512 > stor9:
                                                _23928 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _23928 + 68] = mem[idx + _23497 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_23928 + 68] = mem[_23928 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _23928 + -mem[64] + 100
                                            stor9 -= stor31[stor18[s].field_0].field_512
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            stor31[stor18[s].field_0].field_256 = 0
                                            stor31[stor18[s].field_0].field_512 = 0
                                            stor31[stor18[s].field_0].field_0 = 0
                                            stor10--
                                            investorCount--
                                            if not (balanceOf[stor18[s].field_0] * stor25 / stor20) - stor31[stor18[s].field_0].field_256:
                                                _24847 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24847] = 26
                                                mem[_24847 + 32] = 'SafeMath: division by zero'
                                                _25883 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_25883] = 30
                                                mem[_25883 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > balanceOf[stor18[s].field_0] * stor25 / stor20:
                                                    _26529 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _26529 + 68] = mem[idx + _25883 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_26529 + 68] = mem[_26529 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _26529 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= 95 * balanceOf[stor18[s].field_0] * stor25 / stor20 / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if balanceOf[stor18[s].field_0] * stor25 / stor20 <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = balanceOf[stor18[s].field_0] * stor25 / stor20
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, balanceOf[stor18[s].field_0] * stor25 / stor20
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = balanceOf[stor18[s].field_0] * stor25 / stor20
                                                    emit Withdraw((balanceOf[stor18[s].field_0] * stor25 / stor20), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                            else:
                                                if (balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / (balanceOf[stor18[s].field_0] * stor25 / stor20) - stor31[stor18[s].field_0].field_256 != uint16(teamRewardFee + farmerRewardFee):
                                                    revert with 0, 32, 33, 0x1f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _24968 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24968] = 26
                                                mem[_24968 + 32] = 'SafeMath: division by zero'
                                                _26193 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_26193] = 30
                                                mem[_26193 + 32] = 'SafeMath: subtraction overflow'
                                                if (balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000 > balanceOf[stor18[s].field_0] * stor25 / stor20:
                                                    _26881 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _26881 + 68] = mem[idx + _26193 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_26881 + 68] = mem[_26881 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _26881 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= (95 * balanceOf[stor18[s].field_0] * stor25 / stor20) - (95 * (balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if (balanceOf[stor18[s].field_0] * stor25 / stor20) - ((balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = (balanceOf[stor18[s].field_0] * stor25 / stor20) - ((balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, (balanceOf[stor18[s].field_0] * stor25 / stor20) - ((balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = (balanceOf[stor18[s].field_0] * stor25 / stor20) - ((balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    emit Withdraw(((balanceOf[stor18[s].field_0] * stor25 / stor20) - ((balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                    else:
                                        if (balanceOf[stor18[s].field_0] * stor25 / stor20 * teamRewardFee) - (stor31[stor18[s].field_0].field_256 * teamRewardFee) / (balanceOf[stor18[s].field_0] * stor25 / stor20) - stor31[stor18[s].field_0].field_256 != teamRewardFee:
                                            revert with 0, 32, 33, 0x1f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _18082 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_18082] = 26
                                        mem[_18082 + 32] = 'SafeMath: division by zero'
                                        require ext_code.size(tokenAddress)
                                        staticcall tokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(this.address)
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if (balanceOf[stor18[s].field_0] * stor25 / stor20 * teamRewardFee) - (stor31[stor18[s].field_0].field_256 * teamRewardFee) / 10000 > ext_call.return_data[0]:
                                            emit 0x658fe604: ((balanceOf[stor18[s].field_0] * stor25 / stor20 * teamRewardFee) - (stor31[stor18[s].field_0].field_256 * teamRewardFee) / 10000), stor4
                                            sub_2445aefb--
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _19217 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_19217] = 30
                                            mem[_19217 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor19:
                                                _19592 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _19592 + 68] = mem[idx + _19217 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_19592 + 68] = mem[_19592 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _19592 + -mem[64] + 100
                                            stor19 -= stor31[stor18[s].field_0].field_256
                                            _20198 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_20198] = 30
                                            mem[_20198 + 32] = 'SafeMath: subtraction overflow'
                                            if balanceOf[stor18[s].field_0] > stor20:
                                                _20640 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _20640 + 68] = mem[idx + _20198 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_20640 + 68] = mem[_20640 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _20640 + -mem[64] + 100
                                            stor20 -= balanceOf[stor18[s].field_0]
                                            mem[0] = stor18[s].field_0
                                            stor21[stor18[s].field_0] = 0
                                            mem[32] = 31
                                            _21494 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_21494] = 30
                                            mem[_21494 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor8:
                                                _21986 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _21986 + 68] = mem[idx + _21494 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_21986 + 68] = mem[_21986 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _21986 + -mem[64] + 100
                                            stor8 -= stor31[stor18[s].field_0].field_256
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _22833 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_22833] = 30
                                            mem[_22833 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_512 > stor9:
                                                _23265 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _23265 + 68] = mem[idx + _22833 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_23265 + 68] = mem[_23265 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _23265 + -mem[64] + 100
                                            stor9 -= stor31[stor18[s].field_0].field_512
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            stor31[stor18[s].field_0].field_256 = 0
                                            stor31[stor18[s].field_0].field_512 = 0
                                            stor31[stor18[s].field_0].field_0 = 0
                                            stor10--
                                            investorCount--
                                            if not (balanceOf[stor18[s].field_0] * stor25 / stor20) - stor31[stor18[s].field_0].field_256:
                                                _24533 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24533] = 26
                                                mem[_24533 + 32] = 'SafeMath: division by zero'
                                                _25223 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_25223] = 30
                                                mem[_25223 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > balanceOf[stor18[s].field_0] * stor25 / stor20:
                                                    _25624 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _25624 + 68] = mem[idx + _25223 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_25624 + 68] = mem[_25624 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _25624 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= 95 * balanceOf[stor18[s].field_0] * stor25 / stor20 / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if balanceOf[stor18[s].field_0] * stor25 / stor20 <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = balanceOf[stor18[s].field_0] * stor25 / stor20
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, balanceOf[stor18[s].field_0] * stor25 / stor20
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = balanceOf[stor18[s].field_0] * stor25 / stor20
                                                    emit Withdraw((balanceOf[stor18[s].field_0] * stor25 / stor20), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                            else:
                                                if (balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / (balanceOf[stor18[s].field_0] * stor25 / stor20) - stor31[stor18[s].field_0].field_256 != uint16(teamRewardFee + farmerRewardFee):
                                                    revert with 0, 32, 33, 0x1f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _24631 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24631] = 26
                                                mem[_24631 + 32] = 'SafeMath: division by zero'
                                                _25408 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_25408] = 30
                                                mem[_25408 + 32] = 'SafeMath: subtraction overflow'
                                                if (balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000 > balanceOf[stor18[s].field_0] * stor25 / stor20:
                                                    _25877 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _25877 + 68] = mem[idx + _25408 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_25877 + 68] = mem[_25877 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _25877 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= (95 * balanceOf[stor18[s].field_0] * stor25 / stor20) - (95 * (balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if (balanceOf[stor18[s].field_0] * stor25 / stor20) - ((balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = (balanceOf[stor18[s].field_0] * stor25 / stor20) - ((balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, (balanceOf[stor18[s].field_0] * stor25 / stor20) - ((balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = (balanceOf[stor18[s].field_0] * stor25 / stor20) - ((balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    emit Withdraw(((balanceOf[stor18[s].field_0] * stor25 / stor20) - ((balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                        else:
                                            require ext_code.size(tokenAddress)
                                            call tokenAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args stor4, (balanceOf[stor18[s].field_0] * stor25 / stor20 * teamRewardFee) - (stor31[stor18[s].field_0].field_256 * teamRewardFee) / 10000
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0]
                                            sub_2445aefb--
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _19945 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_19945] = 30
                                            mem[_19945 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor19:
                                                _20442 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _20442 + 68] = mem[idx + _19945 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_20442 + 68] = mem[_20442 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _20442 + -mem[64] + 100
                                            stor19 -= stor31[stor18[s].field_0].field_256
                                            _21194 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_21194] = 30
                                            mem[_21194 + 32] = 'SafeMath: subtraction overflow'
                                            if balanceOf[stor18[s].field_0] > stor20:
                                                _21739 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _21739 + 68] = mem[idx + _21194 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_21739 + 68] = mem[_21739 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _21739 + -mem[64] + 100
                                            stor20 -= balanceOf[stor18[s].field_0]
                                            mem[0] = stor18[s].field_0
                                            stor21[stor18[s].field_0] = 0
                                            mem[32] = 31
                                            _22576 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_22576] = 30
                                            mem[_22576 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor8:
                                                _23057 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _23057 + 68] = mem[idx + _22576 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_23057 + 68] = mem[_23057 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _23057 + -mem[64] + 100
                                            stor8 -= stor31[stor18[s].field_0].field_256
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _23732 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_23732] = 30
                                            mem[_23732 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_512 > stor9:
                                                _24068 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _24068 + 68] = mem[idx + _23732 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_24068 + 68] = mem[_24068 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _24068 + -mem[64] + 100
                                            stor9 -= stor31[stor18[s].field_0].field_512
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            stor31[stor18[s].field_0].field_256 = 0
                                            stor31[stor18[s].field_0].field_512 = 0
                                            stor31[stor18[s].field_0].field_0 = 0
                                            stor10--
                                            investorCount--
                                            if not (balanceOf[stor18[s].field_0] * stor25 / stor20) - stor31[stor18[s].field_0].field_256:
                                                _24967 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24967] = 26
                                                mem[_24967 + 32] = 'SafeMath: division by zero'
                                                _26187 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_26187] = 30
                                                mem[_26187 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > balanceOf[stor18[s].field_0] * stor25 / stor20:
                                                    _26875 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _26875 + 68] = mem[idx + _26187 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_26875 + 68] = mem[_26875 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _26875 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= 95 * balanceOf[stor18[s].field_0] * stor25 / stor20 / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if balanceOf[stor18[s].field_0] * stor25 / stor20 <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = balanceOf[stor18[s].field_0] * stor25 / stor20
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, balanceOf[stor18[s].field_0] * stor25 / stor20
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = balanceOf[stor18[s].field_0] * stor25 / stor20
                                                    emit Withdraw((balanceOf[stor18[s].field_0] * stor25 / stor20), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                            else:
                                                if (balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / (balanceOf[stor18[s].field_0] * stor25 / stor20) - stor31[stor18[s].field_0].field_256 != uint16(teamRewardFee + farmerRewardFee):
                                                    revert with 0, 32, 33, 0x1f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _25082 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_25082] = 26
                                                mem[_25082 + 32] = 'SafeMath: division by zero'
                                                _26524 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_26524] = 30
                                                mem[_26524 + 32] = 'SafeMath: subtraction overflow'
                                                if (balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000 > balanceOf[stor18[s].field_0] * stor25 / stor20:
                                                    _27287 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _27287 + 68] = mem[idx + _26524 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_27287 + 68] = mem[_27287 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _27287 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= (95 * balanceOf[stor18[s].field_0] * stor25 / stor20) - (95 * (balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if (balanceOf[stor18[s].field_0] * stor25 / stor20) - ((balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = (balanceOf[stor18[s].field_0] * stor25 / stor20) - ((balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, (balanceOf[stor18[s].field_0] * stor25 / stor20) - ((balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = (balanceOf[stor18[s].field_0] * stor25 / stor20) - ((balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    emit Withdraw(((balanceOf[stor18[s].field_0] * stor25 / stor20) - ((balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                else:
                    require ext_code.size(tokenAddress)
                    staticcall tokenAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not stor18[s].field_0:
                        revert with 0, 32, 33, 0x7342455032303a206275726e2066726f6d20746865207a65726f20616464726573, mem[mem[64] + 101 len 31]
                    _16995 = mem[64]
                    mem[64] = mem[64] + 96
                    mem[_16995] = 34
                    mem[_16995 + 32 len 34] = 0x6f42455032303a206275726e20616d6f756e7420657863656564732062616c616e63
                    mem[32] = 32
                    if balanceOf[stor18[s].field_0] > balanceOf[stor18[s].field_0]:
                        _17031 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 34
                        idx = 0
                        while idx < 34:
                            mem[idx + _17031 + 68] = mem[idx + _16995 + 32]
                            idx = idx + 32
                            continue 
                        mem[_17031 + 100] = mem[_17031 + 130 len 2]
                        revert with memory
                          from mem[64]
                           len _17031 + -mem[64] + 132
                    mem[0] = stor18[s].field_0
                    mem[32] = 32
                    balanceOf[stor18[s].field_0] = 0
                    _17058 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_17058] = 30
                    mem[_17058 + 32] = 'SafeMath: subtraction overflow'
                    if balanceOf[stor18[s].field_0] > _totalSupply:
                        _17099 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 30
                        idx = 0
                        while idx < 30:
                            mem[idx + _17099 + 68] = mem[idx + _17058 + 32]
                            idx = idx + 32
                            continue 
                        mem[_17099 + 68] = mem[_17099 + 70 len 30]
                        revert with memory
                          from mem[64]
                           len _17099 + -mem[64] + 100
                    _totalSupply -= balanceOf[stor18[s].field_0]
                    emit Transfer(balanceOf[stor18[s].field_0], stor18[s].field_0, 0);
                    stor25 -= ext_call.return_data[0]
                    sub_a14ed18a -= ext_call.return_data[0]
                    if ext_call.return_data[0] <= stor31[stor18[s].field_0].field_256:
                        sub_2445aefb--
                        mem[0] = stor18[s].field_0
                        mem[32] = 31
                        _17211 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_17211] = 30
                        mem[_17211 + 32] = 'SafeMath: subtraction overflow'
                        if stor31[stor18[s].field_0].field_256 > stor19:
                            _17266 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[idx + _17266 + 68] = mem[idx + _17211 + 32]
                                idx = idx + 32
                                continue 
                            mem[_17266 + 68] = mem[_17266 + 70 len 30]
                            revert with memory
                              from mem[64]
                               len _17266 + -mem[64] + 100
                        stor19 -= stor31[stor18[s].field_0].field_256
                        _17363 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_17363] = 30
                        mem[_17363 + 32] = 'SafeMath: subtraction overflow'
                        if balanceOf[stor18[s].field_0] > stor20:
                            _17445 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[idx + _17445 + 68] = mem[idx + _17363 + 32]
                                idx = idx + 32
                                continue 
                            mem[_17445 + 68] = mem[_17445 + 70 len 30]
                            revert with memory
                              from mem[64]
                               len _17445 + -mem[64] + 100
                        stor20 -= balanceOf[stor18[s].field_0]
                        mem[0] = stor18[s].field_0
                        stor21[stor18[s].field_0] = 0
                        mem[32] = 31
                        _17600 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_17600] = 30
                        mem[_17600 + 32] = 'SafeMath: subtraction overflow'
                        if stor31[stor18[s].field_0].field_256 > stor8:
                            _17694 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[idx + _17694 + 68] = mem[idx + _17600 + 32]
                                idx = idx + 32
                                continue 
                            mem[_17694 + 68] = mem[_17694 + 70 len 30]
                            revert with memory
                              from mem[64]
                               len _17694 + -mem[64] + 100
                        stor8 -= stor31[stor18[s].field_0].field_256
                        mem[0] = stor18[s].field_0
                        mem[32] = 31
                        _17852 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_17852] = 30
                        mem[_17852 + 32] = 'SafeMath: subtraction overflow'
                        if stor31[stor18[s].field_0].field_512 > stor9:
                            _17936 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[idx + _17936 + 68] = mem[idx + _17852 + 32]
                                idx = idx + 32
                                continue 
                            mem[_17936 + 68] = mem[_17936 + 70 len 30]
                            revert with memory
                              from mem[64]
                               len _17936 + -mem[64] + 100
                        stor9 -= stor31[stor18[s].field_0].field_512
                        mem[0] = stor18[s].field_0
                        mem[32] = 31
                        stor31[stor18[s].field_0].field_256 = 0
                        stor31[stor18[s].field_0].field_512 = 0
                        stor31[stor18[s].field_0].field_0 = 0
                        stor10--
                        investorCount--
                        _18199 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_18199] = 26
                        mem[_18199 + 32] = 'SafeMath: division by zero'
                        _18806 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_18806] = 30
                        mem[_18806 + 32] = 'SafeMath: subtraction overflow'
                        if 0 > ext_call.return_data[0]:
                            _19081 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[idx + _19081 + 68] = mem[idx + _18806 + 32]
                                idx = idx + 32
                                continue 
                            mem[_19081 + 68] = mem[_19081 + 70 len 30]
                            revert with memory
                              from mem[64]
                               len _19081 + -mem[64] + 100
                        require ext_code.size(tokenAddress)
                        staticcall tokenAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args address(this.address)
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] <= 95 * ext_call.return_data[0] / 100:
                            revert with 0, 'pool doesnot have enough balance'
                        require ext_code.size(tokenAddress)
                        staticcall tokenAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] > ext_call.return_data[0]:
                            require ext_code.size(tokenAddress)
                            staticcall tokenAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                        mem[mem[64] + 4] = stor18[s].field_0
                        mem[mem[64] + 36] = ext_call.return_data[0]
                        require ext_code.size(tokenAddress)
                        call tokenAddress.0xa9059cbb with:
                             gas gas_remaining wei
                            args stor18[s].field_0, ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_call.return_data[0]
                        mem[mem[64]] = ext_call.return_data[0]
                        emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                    else:
                        mem[0] = stor18[s].field_0
                        mem[32] = 31
                        if not ext_call.return_data[0] - stor31[stor18[s].field_0].field_256:
                            sub_2445aefb--
                            mem[0] = stor18[s].field_0
                            mem[32] = 31
                            _17210 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_17210] = 30
                            mem[_17210 + 32] = 'SafeMath: subtraction overflow'
                            if stor31[stor18[s].field_0].field_256 > stor19:
                                _17263 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[idx + _17263 + 68] = mem[idx + _17210 + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_17263 + 68] = mem[_17263 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _17263 + -mem[64] + 100
                            stor19 -= stor31[stor18[s].field_0].field_256
                            _17359 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_17359] = 30
                            mem[_17359 + 32] = 'SafeMath: subtraction overflow'
                            if balanceOf[stor18[s].field_0] > stor20:
                                _17442 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[idx + _17442 + 68] = mem[idx + _17359 + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_17442 + 68] = mem[_17442 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _17442 + -mem[64] + 100
                            stor20 -= balanceOf[stor18[s].field_0]
                            mem[0] = stor18[s].field_0
                            stor21[stor18[s].field_0] = 0
                            mem[32] = 31
                            _17595 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_17595] = 30
                            mem[_17595 + 32] = 'SafeMath: subtraction overflow'
                            if stor31[stor18[s].field_0].field_256 > stor8:
                                _17689 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[idx + _17689 + 68] = mem[idx + _17595 + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_17689 + 68] = mem[_17689 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _17689 + -mem[64] + 100
                            stor8 -= stor31[stor18[s].field_0].field_256
                            mem[0] = stor18[s].field_0
                            mem[32] = 31
                            _17848 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_17848] = 30
                            mem[_17848 + 32] = 'SafeMath: subtraction overflow'
                            if stor31[stor18[s].field_0].field_512 > stor9:
                                _17932 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[idx + _17932 + 68] = mem[idx + _17848 + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_17932 + 68] = mem[_17932 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _17932 + -mem[64] + 100
                            stor9 -= stor31[stor18[s].field_0].field_512
                            mem[0] = stor18[s].field_0
                            mem[32] = 31
                            stor31[stor18[s].field_0].field_256 = 0
                            stor31[stor18[s].field_0].field_512 = 0
                            stor31[stor18[s].field_0].field_0 = 0
                            stor10--
                            investorCount--
                            if not ext_call.return_data[0] - stor31[stor18[s].field_0].field_256:
                                _18194 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_18194] = 26
                                mem[_18194 + 32] = 'SafeMath: division by zero'
                                _18794 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_18794] = 30
                                mem[_18794 + 32] = 'SafeMath: subtraction overflow'
                                if 0 > ext_call.return_data[0]:
                                    _19063 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[idx + _19063 + 68] = mem[idx + _18794 + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_19063 + 68] = mem[_19063 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _19063 + -mem[64] + 100
                                require ext_code.size(tokenAddress)
                                staticcall tokenAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args address(this.address)
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] <= 95 * ext_call.return_data[0] / 100:
                                    revert with 0, 'pool doesnot have enough balance'
                                require ext_code.size(tokenAddress)
                                staticcall tokenAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] > ext_call.return_data[0]:
                                    require ext_code.size(tokenAddress)
                                    staticcall tokenAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                mem[mem[64] + 4] = stor18[s].field_0
                                mem[mem[64] + 36] = ext_call.return_data[0]
                                require ext_code.size(tokenAddress)
                                call tokenAddress.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args stor18[s].field_0, ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_call.return_data[0]
                                mem[mem[64]] = ext_call.return_data[0]
                                emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                            else:
                                if (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / ext_call.return_data[0] - stor31[stor18[s].field_0].field_256 != uint16(teamRewardFee + farmerRewardFee):
                                    revert with 0, 32, 33, 0x1f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                _18280 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_18280] = 26
                                mem[_18280 + 32] = 'SafeMath: division by zero'
                                _18921 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_18921] = 30
                                mem[_18921 + 32] = 'SafeMath: subtraction overflow'
                                if (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000 > ext_call.return_data[0]:
                                    _19230 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[idx + _19230 + 68] = mem[idx + _18921 + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_19230 + 68] = mem[_19230 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _19230 + -mem[64] + 100
                                require ext_code.size(tokenAddress)
                                staticcall tokenAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args address(this.address)
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] <= (95 * ext_call.return_data[0]) - (95 * (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) / 100:
                                    revert with 0, 'pool doesnot have enough balance'
                                require ext_code.size(tokenAddress)
                                staticcall tokenAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) <= ext_call.return_data[0]:
                                    mem[mem[64] + 4] = stor18[s].field_0
                                    mem[mem[64] + 36] = ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                    require ext_code.size(tokenAddress)
                                    call tokenAddress.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args stor18[s].field_0, ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_call.return_data[0]
                                    mem[mem[64]] = ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                    emit Withdraw((ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)), stor18[s].field_0);
                                else:
                                    require ext_code.size(tokenAddress)
                                    staticcall tokenAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[mem[64] + 4] = stor18[s].field_0
                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                    require ext_code.size(tokenAddress)
                                    call tokenAddress.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args stor18[s].field_0, ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_call.return_data[0]
                                    mem[mem[64]] = ext_call.return_data[0]
                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                        else:
                            if not ext_call.return_data[0] - stor31[stor18[s].field_0].field_256:
                                _17316 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_17316] = 26
                                mem[_17316 + 32] = 'SafeMath: division by zero'
                                require ext_code.size(tokenAddress)
                                staticcall tokenAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args address(this.address)
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if 0 > ext_call.return_data[0]:
                                    mem[0] = stor18[s].field_0
                                    emit 0x658fe604: 0, farmerAddress
                                    if not ext_call.return_data[0] - stor31[stor18[s].field_0].field_256:
                                        _17998 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_17998] = 26
                                        mem[_17998 + 32] = 'SafeMath: division by zero'
                                        require ext_code.size(tokenAddress)
                                        staticcall tokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(this.address)
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if 0 > ext_call.return_data[0]:
                                            emit 0x658fe604: 0, stor4
                                            sub_2445aefb--
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _18927 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_18927] = 30
                                            mem[_18927 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor19:
                                                _19242 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _19242 + 68] = mem[idx + _18927 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_19242 + 68] = mem[_19242 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _19242 + -mem[64] + 100
                                            stor19 -= stor31[stor18[s].field_0].field_256
                                            _19781 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_19781] = 30
                                            mem[_19781 + 32] = 'SafeMath: subtraction overflow'
                                            if balanceOf[stor18[s].field_0] > stor20:
                                                _20243 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _20243 + 68] = mem[idx + _19781 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_20243 + 68] = mem[_20243 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _20243 + -mem[64] + 100
                                            stor20 -= balanceOf[stor18[s].field_0]
                                            mem[0] = stor18[s].field_0
                                            stor21[stor18[s].field_0] = 0
                                            mem[32] = 31
                                            _20924 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_20924] = 30
                                            mem[_20924 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor8:
                                                _21540 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _21540 + 68] = mem[idx + _20924 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_21540 + 68] = mem[_21540 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _21540 + -mem[64] + 100
                                            stor8 -= stor31[stor18[s].field_0].field_256
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _22330 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_22330] = 30
                                            mem[_22330 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_512 > stor9:
                                                _22875 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _22875 + 68] = mem[idx + _22330 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_22875 + 68] = mem[_22875 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _22875 + -mem[64] + 100
                                            stor9 -= stor31[stor18[s].field_0].field_512
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            stor31[stor18[s].field_0].field_256 = 0
                                            stor31[stor18[s].field_0].field_512 = 0
                                            stor31[stor18[s].field_0].field_0 = 0
                                            stor10--
                                            investorCount--
                                            if not ext_call.return_data[0] - stor31[stor18[s].field_0].field_256:
                                                _24244 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24244] = 26
                                                mem[_24244 + 32] = 'SafeMath: division by zero'
                                                _24986 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24986] = 30
                                                mem[_24986 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > ext_call.return_data[0]:
                                                    _25247 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _25247 + 68] = mem[idx + _24986 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_25247 + 68] = mem[_25247 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _25247 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= 95 * ext_call.return_data[0] / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] > ext_call.return_data[0]:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                mem[mem[64] + 4] = stor18[s].field_0
                                                mem[mem[64] + 36] = ext_call.return_data[0]
                                                require ext_code.size(tokenAddress)
                                                call tokenAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args stor18[s].field_0, ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                require ext_call.return_data[0]
                                                mem[mem[64]] = ext_call.return_data[0]
                                                emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                            else:
                                                if (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / ext_call.return_data[0] - stor31[stor18[s].field_0].field_256 != uint16(teamRewardFee + farmerRewardFee):
                                                    revert with 0, 32, 33, 0x1f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _24420 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24420] = 26
                                                mem[_24420 + 32] = 'SafeMath: division by zero'
                                                _25101 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_25101] = 30
                                                mem[_25101 + 32] = 'SafeMath: subtraction overflow'
                                                if (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000 > ext_call.return_data[0]:
                                                    _25441 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _25441 + 68] = mem[idx + _25101 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_25441 + 68] = mem[_25441 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _25441 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= (95 * ext_call.return_data[0]) - (95 * (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    emit Withdraw((ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                        else:
                                            require ext_code.size(tokenAddress)
                                            call tokenAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args stor4, 0
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0]
                                            sub_2445aefb--
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _19616 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_19616] = 30
                                            mem[_19616 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor19:
                                                _19981 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _19981 + 68] = mem[idx + _19616 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_19981 + 68] = mem[_19981 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _19981 + -mem[64] + 100
                                            stor19 -= stor31[stor18[s].field_0].field_256
                                            _20671 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_20671] = 30
                                            mem[_20671 + 32] = 'SafeMath: subtraction overflow'
                                            if balanceOf[stor18[s].field_0] > stor20:
                                                _21249 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _21249 + 68] = mem[idx + _20671 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_21249 + 68] = mem[_21249 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _21249 + -mem[64] + 100
                                            stor20 -= balanceOf[stor18[s].field_0]
                                            mem[0] = stor18[s].field_0
                                            stor21[stor18[s].field_0] = 0
                                            mem[32] = 31
                                            _22028 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_22028] = 30
                                            mem[_22028 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor8:
                                                _22625 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _22625 + 68] = mem[idx + _22028 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_22625 + 68] = mem[_22625 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _22625 + -mem[64] + 100
                                            stor8 -= stor31[stor18[s].field_0].field_256
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _23301 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_23301] = 30
                                            mem[_23301 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_512 > stor9:
                                                _23770 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _23770 + 68] = mem[idx + _23301 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_23770 + 68] = mem[_23770 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _23770 + -mem[64] + 100
                                            stor9 -= stor31[stor18[s].field_0].field_512
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            stor31[stor18[s].field_0].field_256 = 0
                                            stor31[stor18[s].field_0].field_512 = 0
                                            stor31[stor18[s].field_0].field_0 = 0
                                            stor10--
                                            investorCount--
                                            if not ext_call.return_data[0] - stor31[stor18[s].field_0].field_256:
                                                _24742 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24742] = 26
                                                mem[_24742 + 32] = 'SafeMath: division by zero'
                                                _25665 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_25665] = 30
                                                mem[_25665 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > ext_call.return_data[0]:
                                                    _26243 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _26243 + 68] = mem[idx + _25665 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_26243 + 68] = mem[_26243 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _26243 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= 95 * ext_call.return_data[0] / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] > ext_call.return_data[0]:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                mem[mem[64] + 4] = stor18[s].field_0
                                                mem[mem[64] + 36] = ext_call.return_data[0]
                                                require ext_code.size(tokenAddress)
                                                call tokenAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args stor18[s].field_0, ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                require ext_call.return_data[0]
                                                mem[mem[64]] = ext_call.return_data[0]
                                                emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                            else:
                                                if (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / ext_call.return_data[0] - stor31[stor18[s].field_0].field_256 != uint16(teamRewardFee + farmerRewardFee):
                                                    revert with 0, 32, 33, 0x1f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _24867 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24867] = 26
                                                mem[_24867 + 32] = 'SafeMath: division by zero'
                                                _25929 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_25929] = 30
                                                mem[_25929 + 32] = 'SafeMath: subtraction overflow'
                                                if (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000 > ext_call.return_data[0]:
                                                    _26582 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _26582 + 68] = mem[idx + _25929 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_26582 + 68] = mem[_26582 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _26582 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= (95 * ext_call.return_data[0]) - (95 * (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    emit Withdraw((ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                    else:
                                        if (ext_call.return_data[0] * teamRewardFee) - (stor31[stor18[s].field_0].field_256 * teamRewardFee) / ext_call.return_data[0] - stor31[stor18[s].field_0].field_256 != teamRewardFee:
                                            revert with 0, 32, 33, 0x1f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _18046 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_18046] = 26
                                        mem[_18046 + 32] = 'SafeMath: division by zero'
                                        require ext_code.size(tokenAddress)
                                        staticcall tokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(this.address)
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if (ext_call.return_data[0] * teamRewardFee) - (stor31[stor18[s].field_0].field_256 * teamRewardFee) / 10000 > ext_call.return_data[0]:
                                            emit 0x658fe604: ((ext_call.return_data[0] * teamRewardFee) - (stor31[stor18[s].field_0].field_256 * teamRewardFee) / 10000), stor4
                                            sub_2445aefb--
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _19072 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_19072] = 30
                                            mem[_19072 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor19:
                                                _19437 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _19437 + 68] = mem[idx + _19072 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_19437 + 68] = mem[_19437 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _19437 + -mem[64] + 100
                                            stor19 -= stor31[stor18[s].field_0].field_256
                                            _19977 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_19977] = 30
                                            mem[_19977 + 32] = 'SafeMath: subtraction overflow'
                                            if balanceOf[stor18[s].field_0] > stor20:
                                                _20474 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _20474 + 68] = mem[idx + _19977 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_20474 + 68] = mem[_20474 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _20474 + -mem[64] + 100
                                            stor20 -= balanceOf[stor18[s].field_0]
                                            mem[0] = stor18[s].field_0
                                            stor21[stor18[s].field_0] = 0
                                            mem[32] = 31
                                            _21244 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_21244] = 30
                                            mem[_21244 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor8:
                                                _21772 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _21772 + 68] = mem[idx + _21244 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_21772 + 68] = mem[_21772 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _21772 + -mem[64] + 100
                                            stor8 -= stor31[stor18[s].field_0].field_256
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _22620 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_22620] = 30
                                            mem[_22620 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_512 > stor9:
                                                _23087 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _23087 + 68] = mem[idx + _22620 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_23087 + 68] = mem[_23087 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _23087 + -mem[64] + 100
                                            stor9 -= stor31[stor18[s].field_0].field_512
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            stor31[stor18[s].field_0].field_256 = 0
                                            stor31[stor18[s].field_0].field_512 = 0
                                            stor31[stor18[s].field_0].field_0 = 0
                                            stor10--
                                            investorCount--
                                            if not ext_call.return_data[0] - stor31[stor18[s].field_0].field_256:
                                                _24417 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24417] = 26
                                                mem[_24417 + 32] = 'SafeMath: division by zero'
                                                _25100 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_25100] = 30
                                                mem[_25100 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > ext_call.return_data[0]:
                                                    _25438 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _25438 + 68] = mem[idx + _25100 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_25438 + 68] = mem[_25438 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _25438 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= 95 * ext_call.return_data[0] / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] > ext_call.return_data[0]:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                mem[mem[64] + 4] = stor18[s].field_0
                                                mem[mem[64] + 36] = ext_call.return_data[0]
                                                require ext_code.size(tokenAddress)
                                                call tokenAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args stor18[s].field_0, ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                require ext_call.return_data[0]
                                                mem[mem[64]] = ext_call.return_data[0]
                                                emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                            else:
                                                if (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / ext_call.return_data[0] - stor31[stor18[s].field_0].field_256 != uint16(teamRewardFee + farmerRewardFee):
                                                    revert with 0, 32, 33, 0x1f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _24554 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24554] = 26
                                                mem[_24554 + 32] = 'SafeMath: division by zero'
                                                _25246 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_25246] = 30
                                                mem[_25246 + 32] = 'SafeMath: subtraction overflow'
                                                if (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000 > ext_call.return_data[0]:
                                                    _25659 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _25659 + 68] = mem[idx + _25246 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_25659 + 68] = mem[_25659 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _25659 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= (95 * ext_call.return_data[0]) - (95 * (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    emit Withdraw((ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                        else:
                                            require ext_code.size(tokenAddress)
                                            call tokenAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args stor4, (ext_call.return_data[0] * teamRewardFee) - (stor31[stor18[s].field_0].field_256 * teamRewardFee) / 10000
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0]
                                            sub_2445aefb--
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _19780 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_19780] = 30
                                            mem[_19780 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor19:
                                                _20240 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _20240 + 68] = mem[idx + _19780 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_20240 + 68] = mem[_20240 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _20240 + -mem[64] + 100
                                            stor19 -= stor31[stor18[s].field_0].field_256
                                            _20921 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_20921] = 30
                                            mem[_20921 + 32] = 'SafeMath: subtraction overflow'
                                            if balanceOf[stor18[s].field_0] > stor20:
                                                _21537 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _21537 + 68] = mem[idx + _20921 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_21537 + 68] = mem[_21537 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _21537 + -mem[64] + 100
                                            stor20 -= balanceOf[stor18[s].field_0]
                                            mem[0] = stor18[s].field_0
                                            stor21[stor18[s].field_0] = 0
                                            mem[32] = 31
                                            _22327 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_22327] = 30
                                            mem[_22327 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor8:
                                                _22872 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _22872 + 68] = mem[idx + _22327 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_22872 + 68] = mem[_22872 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _22872 + -mem[64] + 100
                                            stor8 -= stor31[stor18[s].field_0].field_256
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _23535 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_23535] = 30
                                            mem[_23535 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_512 > stor9:
                                                _23952 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _23952 + 68] = mem[idx + _23535 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_23952 + 68] = mem[_23952 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _23952 + -mem[64] + 100
                                            stor9 -= stor31[stor18[s].field_0].field_512
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            stor31[stor18[s].field_0].field_256 = 0
                                            stor31[stor18[s].field_0].field_512 = 0
                                            stor31[stor18[s].field_0].field_0 = 0
                                            stor10--
                                            investorCount--
                                            if not ext_call.return_data[0] - stor31[stor18[s].field_0].field_256:
                                                _24866 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24866] = 26
                                                mem[_24866 + 32] = 'SafeMath: division by zero'
                                                _25923 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_25923] = 30
                                                mem[_25923 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > ext_call.return_data[0]:
                                                    _26576 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _26576 + 68] = mem[idx + _25923 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_26576 + 68] = mem[_26576 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _26576 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= 95 * ext_call.return_data[0] / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] > ext_call.return_data[0]:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                mem[mem[64] + 4] = stor18[s].field_0
                                                mem[mem[64] + 36] = ext_call.return_data[0]
                                                require ext_code.size(tokenAddress)
                                                call tokenAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args stor18[s].field_0, ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                require ext_call.return_data[0]
                                                mem[mem[64]] = ext_call.return_data[0]
                                                emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                            else:
                                                if (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / ext_call.return_data[0] - stor31[stor18[s].field_0].field_256 != uint16(teamRewardFee + farmerRewardFee):
                                                    revert with 0, 32, 33, 0x1f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _24985 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24985] = 26
                                                mem[_24985 + 32] = 'SafeMath: division by zero'
                                                _26238 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_26238] = 30
                                                mem[_26238 + 32] = 'SafeMath: subtraction overflow'
                                                if (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000 > ext_call.return_data[0]:
                                                    _26935 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _26935 + 68] = mem[idx + _26238 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_26935 + 68] = mem[_26935 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _26935 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= (95 * ext_call.return_data[0]) - (95 * (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    emit Withdraw((ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                else:
                                    require ext_code.size(tokenAddress)
                                    call tokenAddress.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args farmerAddress, 0
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_call.return_data[0]
                                    if not ext_call.return_data[0] - stor31[stor18[s].field_0].field_256:
                                        _18140 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_18140] = 26
                                        mem[_18140 + 32] = 'SafeMath: division by zero'
                                        require ext_code.size(tokenAddress)
                                        staticcall tokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(this.address)
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if 0 > ext_call.return_data[0]:
                                            emit 0x658fe604: 0, stor4
                                            sub_2445aefb--
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _19619 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_19619] = 30
                                            mem[_19619 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor19:
                                                _19984 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _19984 + 68] = mem[idx + _19619 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_19984 + 68] = mem[_19984 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _19984 + -mem[64] + 100
                                            stor19 -= stor31[stor18[s].field_0].field_256
                                            _20676 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_20676] = 30
                                            mem[_20676 + 32] = 'SafeMath: subtraction overflow'
                                            if balanceOf[stor18[s].field_0] > stor20:
                                                _21256 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _21256 + 68] = mem[idx + _20676 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_21256 + 68] = mem[_21256 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _21256 + -mem[64] + 100
                                            stor20 -= balanceOf[stor18[s].field_0]
                                            mem[0] = stor18[s].field_0
                                            stor21[stor18[s].field_0] = 0
                                            mem[32] = 31
                                            _22037 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_22037] = 30
                                            mem[_22037 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor8:
                                                _22632 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _22632 + 68] = mem[idx + _22037 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_22632 + 68] = mem[_22632 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _22632 + -mem[64] + 100
                                            stor8 -= stor31[stor18[s].field_0].field_256
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _23309 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_23309] = 30
                                            mem[_23309 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_512 > stor9:
                                                _23777 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _23777 + 68] = mem[idx + _23309 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_23777 + 68] = mem[_23777 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _23777 + -mem[64] + 100
                                            stor9 -= stor31[stor18[s].field_0].field_512
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            stor31[stor18[s].field_0].field_256 = 0
                                            stor31[stor18[s].field_0].field_512 = 0
                                            stor31[stor18[s].field_0].field_0 = 0
                                            stor10--
                                            investorCount--
                                            if not ext_call.return_data[0] - stor31[stor18[s].field_0].field_256:
                                                _24747 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24747] = 26
                                                mem[_24747 + 32] = 'SafeMath: division by zero'
                                                _25667 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_25667] = 30
                                                mem[_25667 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > ext_call.return_data[0]:
                                                    _26247 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _26247 + 68] = mem[idx + _25667 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_26247 + 68] = mem[_26247 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _26247 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= 95 * ext_call.return_data[0] / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] > ext_call.return_data[0]:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                mem[mem[64] + 4] = stor18[s].field_0
                                                mem[mem[64] + 36] = ext_call.return_data[0]
                                                require ext_code.size(tokenAddress)
                                                call tokenAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args stor18[s].field_0, ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                require ext_call.return_data[0]
                                                mem[mem[64]] = ext_call.return_data[0]
                                                emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                            else:
                                                if (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / ext_call.return_data[0] - stor31[stor18[s].field_0].field_256 != uint16(teamRewardFee + farmerRewardFee):
                                                    revert with 0, 32, 33, 0x1f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _24871 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24871] = 26
                                                mem[_24871 + 32] = 'SafeMath: division by zero'
                                                _25931 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_25931] = 30
                                                mem[_25931 + 32] = 'SafeMath: subtraction overflow'
                                                if (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000 > ext_call.return_data[0]:
                                                    _26588 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _26588 + 68] = mem[idx + _25931 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_26588 + 68] = mem[_26588 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _26588 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= (95 * ext_call.return_data[0]) - (95 * (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    emit Withdraw((ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                        else:
                                            require ext_code.size(tokenAddress)
                                            call tokenAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args stor4, 0
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0]
                                            sub_2445aefb--
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _20480 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_20480] = 30
                                            mem[_20480 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor19:
                                                _20932 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _20932 + 68] = mem[idx + _20480 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_20932 + 68] = mem[_20932 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _20932 + -mem[64] + 100
                                            stor19 -= stor31[stor18[s].field_0].field_256
                                            _21782 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_21782] = 30
                                            mem[_21782 + 32] = 'SafeMath: subtraction overflow'
                                            if balanceOf[stor18[s].field_0] > stor20:
                                                _22339 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _22339 + 68] = mem[idx + _21782 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_22339 + 68] = mem[_22339 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _22339 + -mem[64] + 100
                                            stor20 -= balanceOf[stor18[s].field_0]
                                            mem[0] = stor18[s].field_0
                                            stor21[stor18[s].field_0] = 0
                                            mem[32] = 31
                                            _23097 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_23097] = 30
                                            mem[_23097 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor8:
                                                _23546 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _23546 + 68] = mem[idx + _23097 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_23546 + 68] = mem[_23546 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _23546 + -mem[64] + 100
                                            stor8 -= stor31[stor18[s].field_0].field_256
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _24094 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_24094] = 30
                                            mem[_24094 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_512 > stor9:
                                                _24426 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _24426 + 68] = mem[idx + _24094 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_24426 + 68] = mem[_24426 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _24426 + -mem[64] + 100
                                            stor9 -= stor31[stor18[s].field_0].field_512
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            stor31[stor18[s].field_0].field_256 = 0
                                            stor31[stor18[s].field_0].field_512 = 0
                                            stor31[stor18[s].field_0].field_0 = 0
                                            stor10--
                                            investorCount--
                                            if not ext_call.return_data[0] - stor31[stor18[s].field_0].field_256:
                                                _25252 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_25252] = 26
                                                mem[_25252 + 32] = 'SafeMath: division by zero'
                                                _26952 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_26952] = 30
                                                mem[_26952 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > ext_call.return_data[0]:
                                                    _27832 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _27832 + 68] = mem[idx + _26952 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_27832 + 68] = mem[_27832 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _27832 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= 95 * ext_call.return_data[0] / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] > ext_call.return_data[0]:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                mem[mem[64] + 4] = stor18[s].field_0
                                                mem[mem[64] + 36] = ext_call.return_data[0]
                                                require ext_code.size(tokenAddress)
                                                call tokenAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args stor18[s].field_0, ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                require ext_call.return_data[0]
                                                mem[mem[64]] = ext_call.return_data[0]
                                                emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                            else:
                                                if (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / ext_call.return_data[0] - stor31[stor18[s].field_0].field_256 != uint16(teamRewardFee + farmerRewardFee):
                                                    revert with 0, 32, 33, 0x1f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _25445 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_25445] = 26
                                                mem[_25445 + 32] = 'SafeMath: division by zero'
                                                _27380 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_27380] = 30
                                                mem[_27380 + 32] = 'SafeMath: subtraction overflow'
                                                if (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000 > ext_call.return_data[0]:
                                                    _28228 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _28228 + 68] = mem[idx + _27380 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_28228 + 68] = mem[_28228 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _28228 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= (95 * ext_call.return_data[0]) - (95 * (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    emit Withdraw((ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                    else:
                                        if (ext_call.return_data[0] * teamRewardFee) - (stor31[stor18[s].field_0].field_256 * teamRewardFee) / ext_call.return_data[0] - stor31[stor18[s].field_0].field_256 != teamRewardFee:
                                            revert with 0, 32, 33, 0x1f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _18198 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_18198] = 26
                                        mem[_18198 + 32] = 'SafeMath: division by zero'
                                        require ext_code.size(tokenAddress)
                                        staticcall tokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(this.address)
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if (ext_call.return_data[0] * teamRewardFee) - (stor31[stor18[s].field_0].field_256 * teamRewardFee) / 10000 > ext_call.return_data[0]:
                                            emit 0x658fe604: ((ext_call.return_data[0] * teamRewardFee) - (stor31[stor18[s].field_0].field_256 * teamRewardFee) / 10000), stor4
                                            sub_2445aefb--
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _19784 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_19784] = 30
                                            mem[_19784 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor19:
                                                _20246 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _20246 + 68] = mem[idx + _19784 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_20246 + 68] = mem[_20246 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _20246 + -mem[64] + 100
                                            stor19 -= stor31[stor18[s].field_0].field_256
                                            _20928 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_20928] = 30
                                            mem[_20928 + 32] = 'SafeMath: subtraction overflow'
                                            if balanceOf[stor18[s].field_0] > stor20:
                                                _21543 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _21543 + 68] = mem[idx + _20928 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_21543 + 68] = mem[_21543 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _21543 + -mem[64] + 100
                                            stor20 -= balanceOf[stor18[s].field_0]
                                            mem[0] = stor18[s].field_0
                                            stor21[stor18[s].field_0] = 0
                                            mem[32] = 31
                                            _22334 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_22334] = 30
                                            mem[_22334 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor8:
                                                _22878 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _22878 + 68] = mem[idx + _22334 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_22878 + 68] = mem[_22878 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _22878 + -mem[64] + 100
                                            stor8 -= stor31[stor18[s].field_0].field_256
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _23541 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_23541] = 30
                                            mem[_23541 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_512 > stor9:
                                                _23955 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _23955 + 68] = mem[idx + _23541 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_23955 + 68] = mem[_23955 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _23955 + -mem[64] + 100
                                            stor9 -= stor31[stor18[s].field_0].field_512
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            stor31[stor18[s].field_0].field_256 = 0
                                            stor31[stor18[s].field_0].field_512 = 0
                                            stor31[stor18[s].field_0].field_0 = 0
                                            stor10--
                                            investorCount--
                                            if not ext_call.return_data[0] - stor31[stor18[s].field_0].field_256:
                                                _24868 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24868] = 26
                                                mem[_24868 + 32] = 'SafeMath: division by zero'
                                                _25930 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_25930] = 30
                                                mem[_25930 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > ext_call.return_data[0]:
                                                    _26585 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _26585 + 68] = mem[idx + _25930 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_26585 + 68] = mem[_26585 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _26585 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= 95 * ext_call.return_data[0] / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] > ext_call.return_data[0]:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                mem[mem[64] + 4] = stor18[s].field_0
                                                mem[mem[64] + 36] = ext_call.return_data[0]
                                                require ext_code.size(tokenAddress)
                                                call tokenAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args stor18[s].field_0, ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                require ext_call.return_data[0]
                                                mem[mem[64]] = ext_call.return_data[0]
                                                emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                            else:
                                                if (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / ext_call.return_data[0] - stor31[stor18[s].field_0].field_256 != uint16(teamRewardFee + farmerRewardFee):
                                                    revert with 0, 32, 33, 0x1f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _24987 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24987] = 26
                                                mem[_24987 + 32] = 'SafeMath: division by zero'
                                                _26246 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_26246] = 30
                                                mem[_26246 + 32] = 'SafeMath: subtraction overflow'
                                                if (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000 > ext_call.return_data[0]:
                                                    _26946 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _26946 + 68] = mem[idx + _26246 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_26946 + 68] = mem[_26946 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _26946 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= (95 * ext_call.return_data[0]) - (95 * (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    emit Withdraw((ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                        else:
                                            require ext_code.size(tokenAddress)
                                            call tokenAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args stor4, (ext_call.return_data[0] * teamRewardFee) - (stor31[stor18[s].field_0].field_256 * teamRewardFee) / 10000
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0]
                                            sub_2445aefb--
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _20675 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_20675] = 30
                                            mem[_20675 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor19:
                                                _21253 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _21253 + 68] = mem[idx + _20675 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_21253 + 68] = mem[_21253 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _21253 + -mem[64] + 100
                                            stor19 -= stor31[stor18[s].field_0].field_256
                                            _22034 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_22034] = 30
                                            mem[_22034 + 32] = 'SafeMath: subtraction overflow'
                                            if balanceOf[stor18[s].field_0] > stor20:
                                                _22629 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _22629 + 68] = mem[idx + _22034 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_22629 + 68] = mem[_22629 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _22629 + -mem[64] + 100
                                            stor20 -= balanceOf[stor18[s].field_0]
                                            mem[0] = stor18[s].field_0
                                            stor21[stor18[s].field_0] = 0
                                            mem[32] = 31
                                            _23306 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_23306] = 30
                                            mem[_23306 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor8:
                                                _23774 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _23774 + 68] = mem[idx + _23306 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_23774 + 68] = mem[_23774 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _23774 + -mem[64] + 100
                                            stor8 -= stor31[stor18[s].field_0].field_256
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _24249 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_24249] = 30
                                            mem[_24249 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_512 > stor9:
                                                _24557 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _24557 + 68] = mem[idx + _24249 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_24557 + 68] = mem[_24557 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _24557 + -mem[64] + 100
                                            stor9 -= stor31[stor18[s].field_0].field_512
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            stor31[stor18[s].field_0].field_256 = 0
                                            stor31[stor18[s].field_0].field_512 = 0
                                            stor31[stor18[s].field_0].field_0 = 0
                                            stor10--
                                            investorCount--
                                            if not ext_call.return_data[0] - stor31[stor18[s].field_0].field_256:
                                                _25444 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_25444] = 26
                                                mem[_25444 + 32] = 'SafeMath: division by zero'
                                                _27374 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_27374] = 30
                                                mem[_27374 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > ext_call.return_data[0]:
                                                    _28222 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _28222 + 68] = mem[idx + _27374 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_28222 + 68] = mem[_28222 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _28222 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= 95 * ext_call.return_data[0] / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] > ext_call.return_data[0]:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                mem[mem[64] + 4] = stor18[s].field_0
                                                mem[mem[64] + 36] = ext_call.return_data[0]
                                                require ext_code.size(tokenAddress)
                                                call tokenAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args stor18[s].field_0, ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                require ext_call.return_data[0]
                                                mem[mem[64]] = ext_call.return_data[0]
                                                emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                            else:
                                                if (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / ext_call.return_data[0] - stor31[stor18[s].field_0].field_256 != uint16(teamRewardFee + farmerRewardFee):
                                                    revert with 0, 32, 33, 0x1f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _25666 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_25666] = 26
                                                mem[_25666 + 32] = 'SafeMath: division by zero'
                                                _27827 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_27827] = 30
                                                mem[_27827 + 32] = 'SafeMath: subtraction overflow'
                                                if (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000 > ext_call.return_data[0]:
                                                    _28623 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _28623 + 68] = mem[idx + _27827 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_28623 + 68] = mem[_28623 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _28623 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= (95 * ext_call.return_data[0]) - (95 * (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    emit Withdraw((ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                            else:
                                if (ext_call.return_data[0] * farmerRewardFee) - (stor31[stor18[s].field_0].field_256 * farmerRewardFee) / ext_call.return_data[0] - stor31[stor18[s].field_0].field_256 != farmerRewardFee:
                                    revert with 0, 32, 33, 0x1f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                _17362 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_17362] = 26
                                mem[_17362 + 32] = 'SafeMath: division by zero'
                                require ext_code.size(tokenAddress)
                                staticcall tokenAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args address(this.address)
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if (ext_call.return_data[0] * farmerRewardFee) - (stor31[stor18[s].field_0].field_256 * farmerRewardFee) / 10000 > ext_call.return_data[0]:
                                    mem[0] = stor18[s].field_0
                                    emit 0x658fe604: ((ext_call.return_data[0] * farmerRewardFee) - (stor31[stor18[s].field_0].field_256 * farmerRewardFee) / 10000), farmerAddress
                                    if not ext_call.return_data[0] - stor31[stor18[s].field_0].field_256:
                                        _18045 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_18045] = 26
                                        mem[_18045 + 32] = 'SafeMath: division by zero'
                                        require ext_code.size(tokenAddress)
                                        staticcall tokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(this.address)
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if 0 > ext_call.return_data[0]:
                                            emit 0x658fe604: 0, stor4
                                            sub_2445aefb--
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _19068 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_19068] = 30
                                            mem[_19068 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor19:
                                                _19428 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _19428 + 68] = mem[idx + _19068 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_19428 + 68] = mem[_19428 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _19428 + -mem[64] + 100
                                            stor19 -= stor31[stor18[s].field_0].field_256
                                            _19972 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_19972] = 30
                                            mem[_19972 + 32] = 'SafeMath: subtraction overflow'
                                            if balanceOf[stor18[s].field_0] > stor20:
                                                _20467 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _20467 + 68] = mem[idx + _19972 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_20467 + 68] = mem[_20467 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _20467 + -mem[64] + 100
                                            stor20 -= balanceOf[stor18[s].field_0]
                                            mem[0] = stor18[s].field_0
                                            stor21[stor18[s].field_0] = 0
                                            mem[32] = 31
                                            _21233 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_21233] = 30
                                            mem[_21233 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor8:
                                                _21765 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _21765 + 68] = mem[idx + _21233 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_21765 + 68] = mem[_21765 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _21765 + -mem[64] + 100
                                            stor8 -= stor31[stor18[s].field_0].field_256
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _22608 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_22608] = 30
                                            mem[_22608 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_512 > stor9:
                                                _23078 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _23078 + 68] = mem[idx + _22608 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_23078 + 68] = mem[_23078 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _23078 + -mem[64] + 100
                                            stor9 -= stor31[stor18[s].field_0].field_512
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            stor31[stor18[s].field_0].field_256 = 0
                                            stor31[stor18[s].field_0].field_512 = 0
                                            stor31[stor18[s].field_0].field_0 = 0
                                            stor10--
                                            investorCount--
                                            if not ext_call.return_data[0] - stor31[stor18[s].field_0].field_256:
                                                _24406 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24406] = 26
                                                mem[_24406 + 32] = 'SafeMath: division by zero'
                                                _25097 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_25097] = 30
                                                mem[_25097 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > ext_call.return_data[0]:
                                                    _25432 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _25432 + 68] = mem[idx + _25097 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_25432 + 68] = mem[_25432 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _25432 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= 95 * ext_call.return_data[0] / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] > ext_call.return_data[0]:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                mem[mem[64] + 4] = stor18[s].field_0
                                                mem[mem[64] + 36] = ext_call.return_data[0]
                                                require ext_code.size(tokenAddress)
                                                call tokenAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args stor18[s].field_0, ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                require ext_call.return_data[0]
                                                mem[mem[64]] = ext_call.return_data[0]
                                                emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                            else:
                                                if (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / ext_call.return_data[0] - stor31[stor18[s].field_0].field_256 != uint16(teamRewardFee + farmerRewardFee):
                                                    revert with 0, 32, 33, 0x1f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _24545 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24545] = 26
                                                mem[_24545 + 32] = 'SafeMath: division by zero'
                                                _25243 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_25243] = 30
                                                mem[_25243 + 32] = 'SafeMath: subtraction overflow'
                                                if (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000 > ext_call.return_data[0]:
                                                    _25654 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _25654 + 68] = mem[idx + _25243 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_25654 + 68] = mem[_25654 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _25654 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= (95 * ext_call.return_data[0]) - (95 * (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    emit Withdraw((ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                        else:
                                            require ext_code.size(tokenAddress)
                                            call tokenAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args stor4, 0
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0]
                                            sub_2445aefb--
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _19774 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_19774] = 30
                                            mem[_19774 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor19:
                                                _20233 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _20233 + 68] = mem[idx + _19774 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_20233 + 68] = mem[_20233 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _20233 + -mem[64] + 100
                                            stor19 -= stor31[stor18[s].field_0].field_256
                                            _20910 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_20910] = 30
                                            mem[_20910 + 32] = 'SafeMath: subtraction overflow'
                                            if balanceOf[stor18[s].field_0] > stor20:
                                                _21526 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _21526 + 68] = mem[idx + _20910 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_21526 + 68] = mem[_21526 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _21526 + -mem[64] + 100
                                            stor20 -= balanceOf[stor18[s].field_0]
                                            mem[0] = stor18[s].field_0
                                            stor21[stor18[s].field_0] = 0
                                            mem[32] = 31
                                            _22312 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_22312] = 30
                                            mem[_22312 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor8:
                                                _22861 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _22861 + 68] = mem[idx + _22312 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_22861 + 68] = mem[_22861 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _22861 + -mem[64] + 100
                                            stor8 -= stor31[stor18[s].field_0].field_256
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _23521 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_23521] = 30
                                            mem[_23521 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_512 > stor9:
                                                _23941 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _23941 + 68] = mem[idx + _23521 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_23941 + 68] = mem[_23941 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _23941 + -mem[64] + 100
                                            stor9 -= stor31[stor18[s].field_0].field_512
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            stor31[stor18[s].field_0].field_256 = 0
                                            stor31[stor18[s].field_0].field_512 = 0
                                            stor31[stor18[s].field_0].field_0 = 0
                                            stor10--
                                            investorCount--
                                            if not ext_call.return_data[0] - stor31[stor18[s].field_0].field_256:
                                                _24858 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24858] = 26
                                                mem[_24858 + 32] = 'SafeMath: division by zero'
                                                _25917 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_25917] = 30
                                                mem[_25917 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > ext_call.return_data[0]:
                                                    _26565 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _26565 + 68] = mem[idx + _25917 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_26565 + 68] = mem[_26565 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _26565 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= 95 * ext_call.return_data[0] / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] > ext_call.return_data[0]:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                mem[mem[64] + 4] = stor18[s].field_0
                                                mem[mem[64] + 36] = ext_call.return_data[0]
                                                require ext_code.size(tokenAddress)
                                                call tokenAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args stor18[s].field_0, ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                require ext_call.return_data[0]
                                                mem[mem[64]] = ext_call.return_data[0]
                                                emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                            else:
                                                if (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / ext_call.return_data[0] - stor31[stor18[s].field_0].field_256 != uint16(teamRewardFee + farmerRewardFee):
                                                    revert with 0, 32, 33, 0x1f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _24979 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24979] = 26
                                                mem[_24979 + 32] = 'SafeMath: division by zero'
                                                _26230 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_26230] = 30
                                                mem[_26230 + 32] = 'SafeMath: subtraction overflow'
                                                if (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000 > ext_call.return_data[0]:
                                                    _26923 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _26923 + 68] = mem[idx + _26230 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_26923 + 68] = mem[_26923 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _26923 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= (95 * ext_call.return_data[0]) - (95 * (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    emit Withdraw((ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                    else:
                                        if (ext_call.return_data[0] * teamRewardFee) - (stor31[stor18[s].field_0].field_256 * teamRewardFee) / ext_call.return_data[0] - stor31[stor18[s].field_0].field_256 != teamRewardFee:
                                            revert with 0, 32, 33, 0x1f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _18086 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_18086] = 26
                                        mem[_18086 + 32] = 'SafeMath: division by zero'
                                        require ext_code.size(tokenAddress)
                                        staticcall tokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(this.address)
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if (ext_call.return_data[0] * teamRewardFee) - (stor31[stor18[s].field_0].field_256 * teamRewardFee) / 10000 > ext_call.return_data[0]:
                                            emit 0x658fe604: ((ext_call.return_data[0] * teamRewardFee) - (stor31[stor18[s].field_0].field_256 * teamRewardFee) / 10000), stor4
                                            sub_2445aefb--
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _19233 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_19233] = 30
                                            mem[_19233 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor19:
                                                _19608 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _19608 + 68] = mem[idx + _19233 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_19608 + 68] = mem[_19608 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _19608 + -mem[64] + 100
                                            stor19 -= stor31[stor18[s].field_0].field_256
                                            _20229 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_20229] = 30
                                            mem[_20229 + 32] = 'SafeMath: subtraction overflow'
                                            if balanceOf[stor18[s].field_0] > stor20:
                                                _20660 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _20660 + 68] = mem[idx + _20229 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_20660 + 68] = mem[_20660 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _20660 + -mem[64] + 100
                                            stor20 -= balanceOf[stor18[s].field_0]
                                            mem[0] = stor18[s].field_0
                                            stor21[stor18[s].field_0] = 0
                                            mem[32] = 31
                                            _21521 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_21521] = 30
                                            mem[_21521 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor8:
                                                _22010 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _22010 + 68] = mem[idx + _21521 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_22010 + 68] = mem[_22010 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _22010 + -mem[64] + 100
                                            stor8 -= stor31[stor18[s].field_0].field_256
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _22856 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_22856] = 30
                                            mem[_22856 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_512 > stor9:
                                                _23284 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _23284 + 68] = mem[idx + _22856 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_23284 + 68] = mem[_23284 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _23284 + -mem[64] + 100
                                            stor9 -= stor31[stor18[s].field_0].field_512
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            stor31[stor18[s].field_0].field_256 = 0
                                            stor31[stor18[s].field_0].field_512 = 0
                                            stor31[stor18[s].field_0].field_0 = 0
                                            stor10--
                                            investorCount--
                                            if not ext_call.return_data[0] - stor31[stor18[s].field_0].field_256:
                                                _24542 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24542] = 26
                                                mem[_24542 + 32] = 'SafeMath: division by zero'
                                                _25242 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_25242] = 30
                                                mem[_25242 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > ext_call.return_data[0]:
                                                    _25651 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _25651 + 68] = mem[idx + _25242 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_25651 + 68] = mem[_25651 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _25651 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= 95 * ext_call.return_data[0] / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] > ext_call.return_data[0]:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                mem[mem[64] + 4] = stor18[s].field_0
                                                mem[mem[64] + 36] = ext_call.return_data[0]
                                                require ext_code.size(tokenAddress)
                                                call tokenAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args stor18[s].field_0, ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                require ext_call.return_data[0]
                                                mem[mem[64]] = ext_call.return_data[0]
                                                emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                            else:
                                                if (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / ext_call.return_data[0] - stor31[stor18[s].field_0].field_256 != uint16(teamRewardFee + farmerRewardFee):
                                                    revert with 0, 32, 33, 0x1f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _24637 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24637] = 26
                                                mem[_24637 + 32] = 'SafeMath: division by zero'
                                                _25431 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_25431] = 30
                                                mem[_25431 + 32] = 'SafeMath: subtraction overflow'
                                                if (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000 > ext_call.return_data[0]:
                                                    _25911 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _25911 + 68] = mem[idx + _25431 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_25911 + 68] = mem[_25911 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _25911 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= (95 * ext_call.return_data[0]) - (95 * (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    emit Withdraw((ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                        else:
                                            require ext_code.size(tokenAddress)
                                            call tokenAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args stor4, (ext_call.return_data[0] * teamRewardFee) - (stor31[stor18[s].field_0].field_256 * teamRewardFee) / 10000
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0]
                                            sub_2445aefb--
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _19971 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_19971] = 30
                                            mem[_19971 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor19:
                                                _20464 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _20464 + 68] = mem[idx + _19971 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_20464 + 68] = mem[_20464 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _20464 + -mem[64] + 100
                                            stor19 -= stor31[stor18[s].field_0].field_256
                                            _21230 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_21230] = 30
                                            mem[_21230 + 32] = 'SafeMath: subtraction overflow'
                                            if balanceOf[stor18[s].field_0] > stor20:
                                                _21762 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _21762 + 68] = mem[idx + _21230 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_21762 + 68] = mem[_21762 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _21762 + -mem[64] + 100
                                            stor20 -= balanceOf[stor18[s].field_0]
                                            mem[0] = stor18[s].field_0
                                            stor21[stor18[s].field_0] = 0
                                            mem[32] = 31
                                            _22605 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_22605] = 30
                                            mem[_22605 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor8:
                                                _23075 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _23075 + 68] = mem[idx + _22605 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_23075 + 68] = mem[_23075 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _23075 + -mem[64] + 100
                                            stor8 -= stor31[stor18[s].field_0].field_256
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _23752 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_23752] = 30
                                            mem[_23752 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_512 > stor9:
                                                _24078 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _24078 + 68] = mem[idx + _23752 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_24078 + 68] = mem[_24078 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _24078 + -mem[64] + 100
                                            stor9 -= stor31[stor18[s].field_0].field_512
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            stor31[stor18[s].field_0].field_256 = 0
                                            stor31[stor18[s].field_0].field_512 = 0
                                            stor31[stor18[s].field_0].field_0 = 0
                                            stor10--
                                            investorCount--
                                            if not ext_call.return_data[0] - stor31[stor18[s].field_0].field_256:
                                                _24978 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24978] = 26
                                                mem[_24978 + 32] = 'SafeMath: division by zero'
                                                _26224 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_26224] = 30
                                                mem[_26224 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > ext_call.return_data[0]:
                                                    _26917 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _26917 + 68] = mem[idx + _26224 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_26917 + 68] = mem[_26917 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _26917 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= 95 * ext_call.return_data[0] / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] > ext_call.return_data[0]:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                mem[mem[64] + 4] = stor18[s].field_0
                                                mem[mem[64] + 36] = ext_call.return_data[0]
                                                require ext_code.size(tokenAddress)
                                                call tokenAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args stor18[s].field_0, ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                require ext_call.return_data[0]
                                                mem[mem[64]] = ext_call.return_data[0]
                                                emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                            else:
                                                if (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / ext_call.return_data[0] - stor31[stor18[s].field_0].field_256 != uint16(teamRewardFee + farmerRewardFee):
                                                    revert with 0, 32, 33, 0x1f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _25096 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_25096] = 26
                                                mem[_25096 + 32] = 'SafeMath: division by zero'
                                                _26560 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_26560] = 30
                                                mem[_26560 + 32] = 'SafeMath: subtraction overflow'
                                                if (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000 > ext_call.return_data[0]:
                                                    _27336 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _27336 + 68] = mem[idx + _26560 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_27336 + 68] = mem[_27336 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _27336 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= (95 * ext_call.return_data[0]) - (95 * (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    emit Withdraw((ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                else:
                                    require ext_code.size(tokenAddress)
                                    call tokenAddress.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args farmerAddress, (ext_call.return_data[0] * farmerRewardFee) - (stor31[stor18[s].field_0].field_256 * farmerRewardFee) / 10000
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_call.return_data[0]
                                    if not ext_call.return_data[0] - stor31[stor18[s].field_0].field_256:
                                        _18195 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_18195] = 26
                                        mem[_18195 + 32] = 'SafeMath: division by zero'
                                        require ext_code.size(tokenAddress)
                                        staticcall tokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(this.address)
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if 0 > ext_call.return_data[0]:
                                            emit 0x658fe604: 0, stor4
                                            sub_2445aefb--
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _19777 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_19777] = 30
                                            mem[_19777 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor19:
                                                _20236 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _20236 + 68] = mem[idx + _19777 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_20236 + 68] = mem[_20236 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _20236 + -mem[64] + 100
                                            stor19 -= stor31[stor18[s].field_0].field_256
                                            _20915 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_20915] = 30
                                            mem[_20915 + 32] = 'SafeMath: subtraction overflow'
                                            if balanceOf[stor18[s].field_0] > stor20:
                                                _21533 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _21533 + 68] = mem[idx + _20915 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_21533 + 68] = mem[_21533 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _21533 + -mem[64] + 100
                                            stor20 -= balanceOf[stor18[s].field_0]
                                            mem[0] = stor18[s].field_0
                                            stor21[stor18[s].field_0] = 0
                                            mem[32] = 31
                                            _22321 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_22321] = 30
                                            mem[_22321 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor8:
                                                _22868 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _22868 + 68] = mem[idx + _22321 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_22868 + 68] = mem[_22868 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _22868 + -mem[64] + 100
                                            stor8 -= stor31[stor18[s].field_0].field_256
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _23529 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_23529] = 30
                                            mem[_23529 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_512 > stor9:
                                                _23948 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _23948 + 68] = mem[idx + _23529 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_23948 + 68] = mem[_23948 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _23948 + -mem[64] + 100
                                            stor9 -= stor31[stor18[s].field_0].field_512
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            stor31[stor18[s].field_0].field_256 = 0
                                            stor31[stor18[s].field_0].field_512 = 0
                                            stor31[stor18[s].field_0].field_0 = 0
                                            stor10--
                                            investorCount--
                                            if not ext_call.return_data[0] - stor31[stor18[s].field_0].field_256:
                                                _24863 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24863] = 26
                                                mem[_24863 + 32] = 'SafeMath: division by zero'
                                                _25919 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_25919] = 30
                                                mem[_25919 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > ext_call.return_data[0]:
                                                    _26569 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _26569 + 68] = mem[idx + _25919 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_26569 + 68] = mem[_26569 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _26569 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= 95 * ext_call.return_data[0] / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] > ext_call.return_data[0]:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                mem[mem[64] + 4] = stor18[s].field_0
                                                mem[mem[64] + 36] = ext_call.return_data[0]
                                                require ext_code.size(tokenAddress)
                                                call tokenAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args stor18[s].field_0, ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                require ext_call.return_data[0]
                                                mem[mem[64]] = ext_call.return_data[0]
                                                emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                            else:
                                                if (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / ext_call.return_data[0] - stor31[stor18[s].field_0].field_256 != uint16(teamRewardFee + farmerRewardFee):
                                                    revert with 0, 32, 33, 0x1f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _24983 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24983] = 26
                                                mem[_24983 + 32] = 'SafeMath: division by zero'
                                                _26232 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_26232] = 30
                                                mem[_26232 + 32] = 'SafeMath: subtraction overflow'
                                                if (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000 > ext_call.return_data[0]:
                                                    _26929 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _26929 + 68] = mem[idx + _26232 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_26929 + 68] = mem[_26929 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _26929 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= (95 * ext_call.return_data[0]) - (95 * (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    emit Withdraw((ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                        else:
                                            require ext_code.size(tokenAddress)
                                            call tokenAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args stor4, 0
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0]
                                            sub_2445aefb--
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _20666 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_20666] = 30
                                            mem[_20666 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor19:
                                                _21241 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _21241 + 68] = mem[idx + _20666 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_21241 + 68] = mem[_21241 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _21241 + -mem[64] + 100
                                            stor19 -= stor31[stor18[s].field_0].field_256
                                            _22020 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_22020] = 30
                                            mem[_22020 + 32] = 'SafeMath: subtraction overflow'
                                            if balanceOf[stor18[s].field_0] > stor20:
                                                _22617 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _22617 + 68] = mem[idx + _22020 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_22617 + 68] = mem[_22617 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _22617 + -mem[64] + 100
                                            stor20 -= balanceOf[stor18[s].field_0]
                                            mem[0] = stor18[s].field_0
                                            stor21[stor18[s].field_0] = 0
                                            mem[32] = 31
                                            _23294 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_23294] = 30
                                            mem[_23294 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor8:
                                                _23763 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _23763 + 68] = mem[idx + _23294 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_23763 + 68] = mem[_23763 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _23763 + -mem[64] + 100
                                            stor8 -= stor31[stor18[s].field_0].field_256
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _24237 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_24237] = 30
                                            mem[_24237 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_512 > stor9:
                                                _24551 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _24551 + 68] = mem[idx + _24237 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_24551 + 68] = mem[_24551 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _24551 + -mem[64] + 100
                                            stor9 -= stor31[stor18[s].field_0].field_512
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            stor31[stor18[s].field_0].field_256 = 0
                                            stor31[stor18[s].field_0].field_512 = 0
                                            stor31[stor18[s].field_0].field_0 = 0
                                            stor10--
                                            investorCount--
                                            if not ext_call.return_data[0] - stor31[stor18[s].field_0].field_256:
                                                _25437 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_25437] = 26
                                                mem[_25437 + 32] = 'SafeMath: division by zero'
                                                _27353 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_27353] = 30
                                                mem[_27353 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > ext_call.return_data[0]:
                                                    _28205 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _28205 + 68] = mem[idx + _27353 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_28205 + 68] = mem[_28205 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _28205 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= 95 * ext_call.return_data[0] / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] > ext_call.return_data[0]:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                mem[mem[64] + 4] = stor18[s].field_0
                                                mem[mem[64] + 36] = ext_call.return_data[0]
                                                require ext_code.size(tokenAddress)
                                                call tokenAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args stor18[s].field_0, ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                require ext_call.return_data[0]
                                                mem[mem[64]] = ext_call.return_data[0]
                                                emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                            else:
                                                if (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / ext_call.return_data[0] - stor31[stor18[s].field_0].field_256 != uint16(teamRewardFee + farmerRewardFee):
                                                    revert with 0, 32, 33, 0x1f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _25658 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_25658] = 26
                                                mem[_25658 + 32] = 'SafeMath: division by zero'
                                                _27807 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_27807] = 30
                                                mem[_27807 + 32] = 'SafeMath: subtraction overflow'
                                                if (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000 > ext_call.return_data[0]:
                                                    _28602 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _28602 + 68] = mem[idx + _27807 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_28602 + 68] = mem[_28602 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _28602 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= (95 * ext_call.return_data[0]) - (95 * (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    emit Withdraw((ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                    else:
                                        if (ext_call.return_data[0] * teamRewardFee) - (stor31[stor18[s].field_0].field_256 * teamRewardFee) / ext_call.return_data[0] - stor31[stor18[s].field_0].field_256 != teamRewardFee:
                                            revert with 0, 32, 33, 0x1f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _18283 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_18283] = 26
                                        mem[_18283 + 32] = 'SafeMath: division by zero'
                                        require ext_code.size(tokenAddress)
                                        staticcall tokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(this.address)
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if (ext_call.return_data[0] * teamRewardFee) - (stor31[stor18[s].field_0].field_256 * teamRewardFee) / 10000 > ext_call.return_data[0]:
                                            emit 0x658fe604: ((ext_call.return_data[0] * teamRewardFee) - (stor31[stor18[s].field_0].field_256 * teamRewardFee) / 10000), stor4
                                            sub_2445aefb--
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _19975 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_19975] = 30
                                            mem[_19975 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor19:
                                                _20470 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _20470 + 68] = mem[idx + _19975 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_20470 + 68] = mem[_20470 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _20470 + -mem[64] + 100
                                            stor19 -= stor31[stor18[s].field_0].field_256
                                            _21237 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_21237] = 30
                                            mem[_21237 + 32] = 'SafeMath: subtraction overflow'
                                            if balanceOf[stor18[s].field_0] > stor20:
                                                _21768 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _21768 + 68] = mem[idx + _21237 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_21768 + 68] = mem[_21768 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _21768 + -mem[64] + 100
                                            stor20 -= balanceOf[stor18[s].field_0]
                                            mem[0] = stor18[s].field_0
                                            stor21[stor18[s].field_0] = 0
                                            mem[32] = 31
                                            _22612 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_22612] = 30
                                            mem[_22612 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor8:
                                                _23081 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _23081 + 68] = mem[idx + _22612 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_23081 + 68] = mem[_23081 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _23081 + -mem[64] + 100
                                            stor8 -= stor31[stor18[s].field_0].field_256
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _23758 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_23758] = 30
                                            mem[_23758 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_512 > stor9:
                                                _24081 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _24081 + 68] = mem[idx + _23758 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_24081 + 68] = mem[_24081 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _24081 + -mem[64] + 100
                                            stor9 -= stor31[stor18[s].field_0].field_512
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            stor31[stor18[s].field_0].field_256 = 0
                                            stor31[stor18[s].field_0].field_512 = 0
                                            stor31[stor18[s].field_0].field_0 = 0
                                            stor10--
                                            investorCount--
                                            if not ext_call.return_data[0] - stor31[stor18[s].field_0].field_256:
                                                _24980 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24980] = 26
                                                mem[_24980 + 32] = 'SafeMath: division by zero'
                                                _26231 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_26231] = 30
                                                mem[_26231 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > ext_call.return_data[0]:
                                                    _26926 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _26926 + 68] = mem[idx + _26231 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_26926 + 68] = mem[_26926 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _26926 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= 95 * ext_call.return_data[0] / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] > ext_call.return_data[0]:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                mem[mem[64] + 4] = stor18[s].field_0
                                                mem[mem[64] + 36] = ext_call.return_data[0]
                                                require ext_code.size(tokenAddress)
                                                call tokenAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args stor18[s].field_0, ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                require ext_call.return_data[0]
                                                mem[mem[64]] = ext_call.return_data[0]
                                                emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                            else:
                                                if (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / ext_call.return_data[0] - stor31[stor18[s].field_0].field_256 != uint16(teamRewardFee + farmerRewardFee):
                                                    revert with 0, 32, 33, 0x1f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _25098 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_25098] = 26
                                                mem[_25098 + 32] = 'SafeMath: division by zero'
                                                _26568 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_26568] = 30
                                                mem[_26568 + 32] = 'SafeMath: subtraction overflow'
                                                if (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000 > ext_call.return_data[0]:
                                                    _27347 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _27347 + 68] = mem[idx + _26568 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_27347 + 68] = mem[_27347 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _27347 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= (95 * ext_call.return_data[0]) - (95 * (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    emit Withdraw((ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                        else:
                                            require ext_code.size(tokenAddress)
                                            call tokenAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args stor4, (ext_call.return_data[0] * teamRewardFee) - (stor31[stor18[s].field_0].field_256 * teamRewardFee) / 10000
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0]
                                            sub_2445aefb--
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _20914 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_20914] = 30
                                            mem[_20914 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor19:
                                                _21530 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _21530 + 68] = mem[idx + _20914 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_21530 + 68] = mem[_21530 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _21530 + -mem[64] + 100
                                            stor19 -= stor31[stor18[s].field_0].field_256
                                            _22318 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_22318] = 30
                                            mem[_22318 + 32] = 'SafeMath: subtraction overflow'
                                            if balanceOf[stor18[s].field_0] > stor20:
                                                _22865 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _22865 + 68] = mem[idx + _22318 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_22865 + 68] = mem[_22865 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _22865 + -mem[64] + 100
                                            stor20 -= balanceOf[stor18[s].field_0]
                                            mem[0] = stor18[s].field_0
                                            stor21[stor18[s].field_0] = 0
                                            mem[32] = 31
                                            _23526 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_23526] = 30
                                            mem[_23526 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor8:
                                                _23945 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _23945 + 68] = mem[idx + _23526 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_23945 + 68] = mem[_23945 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _23945 + -mem[64] + 100
                                            stor8 -= stor31[stor18[s].field_0].field_256
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _24411 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_24411] = 30
                                            mem[_24411 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_512 > stor9:
                                                _24640 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _24640 + 68] = mem[idx + _24411 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_24640 + 68] = mem[_24640 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _24640 + -mem[64] + 100
                                            stor9 -= stor31[stor18[s].field_0].field_512
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            stor31[stor18[s].field_0].field_256 = 0
                                            stor31[stor18[s].field_0].field_512 = 0
                                            stor31[stor18[s].field_0].field_0 = 0
                                            stor10--
                                            investorCount--
                                            if not ext_call.return_data[0] - stor31[stor18[s].field_0].field_256:
                                                _25657 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_25657] = 26
                                                mem[_25657 + 32] = 'SafeMath: division by zero'
                                                _27801 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_27801] = 30
                                                mem[_27801 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > ext_call.return_data[0]:
                                                    _28596 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _28596 + 68] = mem[idx + _27801 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_28596 + 68] = mem[_28596 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _28596 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= 95 * ext_call.return_data[0] / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] > ext_call.return_data[0]:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                mem[mem[64] + 4] = stor18[s].field_0
                                                mem[mem[64] + 36] = ext_call.return_data[0]
                                                require ext_code.size(tokenAddress)
                                                call tokenAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args stor18[s].field_0, ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                require ext_call.return_data[0]
                                                mem[mem[64]] = ext_call.return_data[0]
                                                emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                            else:
                                                if (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / ext_call.return_data[0] - stor31[stor18[s].field_0].field_256 != uint16(teamRewardFee + farmerRewardFee):
                                                    revert with 0, 32, 33, 0x1f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _25918 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_25918] = 26
                                                mem[_25918 + 32] = 'SafeMath: division by zero'
                                                _28200 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_28200] = 30
                                                mem[_28200 + 32] = 'SafeMath: subtraction overflow'
                                                if (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000 > ext_call.return_data[0]:
                                                    _29090 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _29090 + 68] = mem[idx + _28200 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_29090 + 68] = mem[_29090 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _29090 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= (95 * ext_call.return_data[0]) - (95 * (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    emit Withdraw((ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
            s = s - 1
            idx = idx - 1
            continue 
    else:
        s = sub_2445aefb
        idx = sub_2445aefb
        while idx:
            require s - 1 < stor18.length
            mem[0] = stor18[s].field_0
            mem[32] = 32
            if not stor25:
                _16846 = mem[64]
                mem[64] = mem[64] + 64
                mem[_16846] = 26
                mem[_16846 + 32] = 'SafeMath: division by zero'
                if not stor20:
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 26
                    mem[mem[64] + 68] = 'SafeMath: division by zero'
                    idx = 32
                    while idx < 26:
                        mem[idx + mem[64] + 68] = mem[idx + _16846 + 32]
                        idx = idx + 32
                        continue 
                    revert with 0, 'SafeMath: division by zero'
                require ext_code.size(tokenAddress)
                staticcall tokenAddress.0x70a08231 with:
                        gas gas_remaining wei
                       args address(this.address)
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] <= 95 * 0 / stor20 / 100:
                    revert with 0, 'pool doesnot have enough balance'
                require ext_code.size(tokenAddress)
                staticcall tokenAddress.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if 0 / stor20 <= ext_call.return_data[0]:
                    if not stor18[s].field_0:
                        revert with 0, 32, 33, 0x7342455032303a206275726e2066726f6d20746865207a65726f20616464726573, mem[mem[64] + 101 len 31]
                    _16946 = mem[64]
                    mem[64] = mem[64] + 96
                    mem[_16946] = 34
                    mem[_16946 + 32 len 34] = 0x6f42455032303a206275726e20616d6f756e7420657863656564732062616c616e63
                    mem[32] = 32
                    if balanceOf[stor18[s].field_0] > balanceOf[stor18[s].field_0]:
                        _16968 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 34
                        idx = 0
                        while idx < 34:
                            mem[idx + _16968 + 68] = mem[idx + _16946 + 32]
                            idx = idx + 32
                            continue 
                        mem[_16968 + 100] = mem[_16968 + 130 len 2]
                        revert with memory
                          from mem[64]
                           len _16968 + -mem[64] + 132
                    mem[0] = stor18[s].field_0
                    mem[32] = 32
                    balanceOf[stor18[s].field_0] = 0
                    _16987 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_16987] = 30
                    mem[_16987 + 32] = 'SafeMath: subtraction overflow'
                    if balanceOf[stor18[s].field_0] > _totalSupply:
                        _17020 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 30
                        idx = 0
                        while idx < 30:
                            mem[idx + _17020 + 68] = mem[idx + _16987 + 32]
                            idx = idx + 32
                            continue 
                        mem[_17020 + 68] = mem[_17020 + 70 len 30]
                        revert with memory
                          from mem[64]
                           len _17020 + -mem[64] + 100
                    _totalSupply -= balanceOf[stor18[s].field_0]
                    emit Transfer(balanceOf[stor18[s].field_0], stor18[s].field_0, 0);
                    stor25 -= 0 / stor20
                    sub_a14ed18a -= 0 / stor20
                    if 0 / stor20 <= stor31[stor18[s].field_0].field_256:
                        sub_2445aefb--
                        mem[0] = stor18[s].field_0
                        mem[32] = 31
                        _17135 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_17135] = 30
                        mem[_17135 + 32] = 'SafeMath: subtraction overflow'
                        if stor31[stor18[s].field_0].field_256 > stor19:
                            _17166 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[idx + _17166 + 68] = mem[idx + _17135 + 32]
                                idx = idx + 32
                                continue 
                            mem[_17166 + 68] = mem[_17166 + 70 len 30]
                            revert with memory
                              from mem[64]
                               len _17166 + -mem[64] + 100
                        stor19 -= stor31[stor18[s].field_0].field_256
                        _17228 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_17228] = 30
                        mem[_17228 + 32] = 'SafeMath: subtraction overflow'
                        if balanceOf[stor18[s].field_0] > stor20:
                            _17288 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[idx + _17288 + 68] = mem[idx + _17228 + 32]
                                idx = idx + 32
                                continue 
                            mem[_17288 + 68] = mem[_17288 + 70 len 30]
                            revert with memory
                              from mem[64]
                               len _17288 + -mem[64] + 100
                        stor20 -= balanceOf[stor18[s].field_0]
                        mem[0] = stor18[s].field_0
                        stor21[stor18[s].field_0] = 0
                        mem[32] = 31
                        _17396 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_17396] = 30
                        mem[_17396 + 32] = 'SafeMath: subtraction overflow'
                        if stor31[stor18[s].field_0].field_256 > stor8:
                            _17470 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[idx + _17470 + 68] = mem[idx + _17396 + 32]
                                idx = idx + 32
                                continue 
                            mem[_17470 + 68] = mem[_17470 + 70 len 30]
                            revert with memory
                              from mem[64]
                               len _17470 + -mem[64] + 100
                        stor8 -= stor31[stor18[s].field_0].field_256
                        mem[0] = stor18[s].field_0
                        mem[32] = 31
                        _17635 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_17635] = 30
                        mem[_17635 + 32] = 'SafeMath: subtraction overflow'
                        if stor31[stor18[s].field_0].field_512 > stor9:
                            _17727 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[idx + _17727 + 68] = mem[idx + _17635 + 32]
                                idx = idx + 32
                                continue 
                            mem[_17727 + 68] = mem[_17727 + 70 len 30]
                            revert with memory
                              from mem[64]
                               len _17727 + -mem[64] + 100
                        stor9 -= stor31[stor18[s].field_0].field_512
                        mem[0] = stor18[s].field_0
                        mem[32] = 31
                        stor31[stor18[s].field_0].field_256 = 0
                        stor31[stor18[s].field_0].field_512 = 0
                        stor31[stor18[s].field_0].field_0 = 0
                        stor10--
                        investorCount--
                        _18030 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_18030] = 26
                        mem[_18030 + 32] = 'SafeMath: division by zero'
                        _18337 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_18337] = 30
                        mem[_18337 + 32] = 'SafeMath: subtraction overflow'
                        if 0 > 0 / stor20:
                            _18475 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[idx + _18475 + 68] = mem[idx + _18337 + 32]
                                idx = idx + 32
                                continue 
                            mem[_18475 + 68] = mem[_18475 + 70 len 30]
                            revert with memory
                              from mem[64]
                               len _18475 + -mem[64] + 100
                        require ext_code.size(tokenAddress)
                        staticcall tokenAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args address(this.address)
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] <= 95 * 0 / stor20 / 100:
                            revert with 0, 'pool doesnot have enough balance'
                        require ext_code.size(tokenAddress)
                        staticcall tokenAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if 0 / stor20 <= ext_call.return_data[0]:
                            mem[mem[64] + 4] = stor18[s].field_0
                            mem[mem[64] + 36] = 0 / stor20
                            require ext_code.size(tokenAddress)
                            call tokenAddress.0xa9059cbb with:
                                 gas gas_remaining wei
                                args stor18[s].field_0, 0 / stor20
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_call.return_data[0]
                            mem[mem[64]] = 0 / stor20
                            emit Withdraw((0 / stor20), stor18[s].field_0);
                        else:
                            require ext_code.size(tokenAddress)
                            staticcall tokenAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            mem[mem[64] + 4] = stor18[s].field_0
                            mem[mem[64] + 36] = ext_call.return_data[0]
                            require ext_code.size(tokenAddress)
                            call tokenAddress.0xa9059cbb with:
                                 gas gas_remaining wei
                                args stor18[s].field_0, ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_call.return_data[0]
                            mem[mem[64]] = ext_call.return_data[0]
                            emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                    else:
                        mem[0] = stor18[s].field_0
                        mem[32] = 31
                        if not (0 / stor20) - stor31[stor18[s].field_0].field_256:
                            sub_2445aefb--
                            mem[0] = stor18[s].field_0
                            mem[32] = 31
                            _17134 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_17134] = 30
                            mem[_17134 + 32] = 'SafeMath: subtraction overflow'
                            if stor31[stor18[s].field_0].field_256 > stor19:
                                _17163 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[idx + _17163 + 68] = mem[idx + _17134 + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_17163 + 68] = mem[_17163 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _17163 + -mem[64] + 100
                            stor19 -= stor31[stor18[s].field_0].field_256
                            _17224 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_17224] = 30
                            mem[_17224 + 32] = 'SafeMath: subtraction overflow'
                            if balanceOf[stor18[s].field_0] > stor20:
                                _17285 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[idx + _17285 + 68] = mem[idx + _17224 + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_17285 + 68] = mem[_17285 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _17285 + -mem[64] + 100
                            stor20 -= balanceOf[stor18[s].field_0]
                            mem[0] = stor18[s].field_0
                            stor21[stor18[s].field_0] = 0
                            mem[32] = 31
                            _17391 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_17391] = 30
                            mem[_17391 + 32] = 'SafeMath: subtraction overflow'
                            if stor31[stor18[s].field_0].field_256 > stor8:
                                _17465 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[idx + _17465 + 68] = mem[idx + _17391 + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_17465 + 68] = mem[_17465 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _17465 + -mem[64] + 100
                            stor8 -= stor31[stor18[s].field_0].field_256
                            mem[0] = stor18[s].field_0
                            mem[32] = 31
                            _17631 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_17631] = 30
                            mem[_17631 + 32] = 'SafeMath: subtraction overflow'
                            if stor31[stor18[s].field_0].field_512 > stor9:
                                _17723 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[idx + _17723 + 68] = mem[idx + _17631 + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_17723 + 68] = mem[_17723 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _17723 + -mem[64] + 100
                            stor9 -= stor31[stor18[s].field_0].field_512
                            mem[0] = stor18[s].field_0
                            mem[32] = 31
                            stor31[stor18[s].field_0].field_256 = 0
                            stor31[stor18[s].field_0].field_512 = 0
                            stor31[stor18[s].field_0].field_0 = 0
                            stor10--
                            investorCount--
                            if not (0 / stor20) - stor31[stor18[s].field_0].field_256:
                                _18025 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_18025] = 26
                                mem[_18025 + 32] = 'SafeMath: division by zero'
                                _18325 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_18325] = 30
                                mem[_18325 + 32] = 'SafeMath: subtraction overflow'
                                if 0 > 0 / stor20:
                                    _18457 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[idx + _18457 + 68] = mem[idx + _18325 + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_18457 + 68] = mem[_18457 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _18457 + -mem[64] + 100
                                require ext_code.size(tokenAddress)
                                staticcall tokenAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args address(this.address)
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] <= 95 * 0 / stor20 / 100:
                                    revert with 0, 'pool doesnot have enough balance'
                                require ext_code.size(tokenAddress)
                                staticcall tokenAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if 0 / stor20 <= ext_call.return_data[0]:
                                    mem[mem[64] + 4] = stor18[s].field_0
                                    mem[mem[64] + 36] = 0 / stor20
                                    require ext_code.size(tokenAddress)
                                    call tokenAddress.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args stor18[s].field_0, 0 / stor20
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_call.return_data[0]
                                    mem[mem[64]] = 0 / stor20
                                    emit Withdraw((0 / stor20), stor18[s].field_0);
                                else:
                                    require ext_code.size(tokenAddress)
                                    staticcall tokenAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[mem[64] + 4] = stor18[s].field_0
                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                    require ext_code.size(tokenAddress)
                                    call tokenAddress.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args stor18[s].field_0, ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_call.return_data[0]
                                    mem[mem[64]] = ext_call.return_data[0]
                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                            else:
                                if (0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / (0 / stor20) - stor31[stor18[s].field_0].field_256 != uint16(teamRewardFee + farmerRewardFee):
                                    revert with 0, 32, 33, 0x1f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                _18070 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_18070] = 26
                                mem[_18070 + 32] = 'SafeMath: division by zero'
                                _18386 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_18386] = 30
                                mem[_18386 + 32] = 'SafeMath: subtraction overflow'
                                if (0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000 > 0 / stor20:
                                    _18591 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[idx + _18591 + 68] = mem[idx + _18386 + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_18591 + 68] = mem[_18591 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _18591 + -mem[64] + 100
                                require ext_code.size(tokenAddress)
                                staticcall tokenAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args address(this.address)
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] <= (95 * 0 / stor20) - (95 * (0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) / 100:
                                    revert with 0, 'pool doesnot have enough balance'
                                require ext_code.size(tokenAddress)
                                staticcall tokenAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if (0 / stor20) - ((0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) <= ext_call.return_data[0]:
                                    mem[mem[64] + 4] = stor18[s].field_0
                                    mem[mem[64] + 36] = (0 / stor20) - ((0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                    require ext_code.size(tokenAddress)
                                    call tokenAddress.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args stor18[s].field_0, (0 / stor20) - ((0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_call.return_data[0]
                                    mem[mem[64]] = (0 / stor20) - ((0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                    emit Withdraw(((0 / stor20) - ((0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)), stor18[s].field_0);
                                else:
                                    require ext_code.size(tokenAddress)
                                    staticcall tokenAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[mem[64] + 4] = stor18[s].field_0
                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                    require ext_code.size(tokenAddress)
                                    call tokenAddress.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args stor18[s].field_0, ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_call.return_data[0]
                                    mem[mem[64]] = ext_call.return_data[0]
                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                        else:
                            if not (0 / stor20) - stor31[stor18[s].field_0].field_256:
                                _17203 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_17203] = 26
                                mem[_17203 + 32] = 'SafeMath: division by zero'
                                require ext_code.size(tokenAddress)
                                staticcall tokenAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args address(this.address)
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if 0 > ext_call.return_data[0]:
                                    mem[0] = stor18[s].field_0
                                    emit 0x658fe604: 0, farmerAddress
                                    if not (0 / stor20) - stor31[stor18[s].field_0].field_256:
                                        _17831 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_17831] = 26
                                        mem[_17831 + 32] = 'SafeMath: division by zero'
                                        require ext_code.size(tokenAddress)
                                        staticcall tokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(this.address)
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if 0 > ext_call.return_data[0]:
                                            emit 0x658fe604: 0, stor4
                                            sub_2445aefb--
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _18392 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_18392] = 30
                                            mem[_18392 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor19:
                                                _18603 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _18603 + 68] = mem[idx + _18392 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_18603 + 68] = mem[_18603 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _18603 + -mem[64] + 100
                                            stor19 -= stor31[stor18[s].field_0].field_256
                                            _19015 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_19015] = 30
                                            mem[_19015 + 32] = 'SafeMath: subtraction overflow'
                                            if balanceOf[stor18[s].field_0] > stor20:
                                                _19363 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _19363 + 68] = mem[idx + _19015 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_19363 + 68] = mem[_19363 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _19363 + -mem[64] + 100
                                            stor20 -= balanceOf[stor18[s].field_0]
                                            mem[0] = stor18[s].field_0
                                            stor21[stor18[s].field_0] = 0
                                            mem[32] = 31
                                            _19902 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_19902] = 30
                                            mem[_19902 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor8:
                                                _20400 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _20400 + 68] = mem[idx + _19902 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_20400 + 68] = mem[_20400 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _20400 + -mem[64] + 100
                                            stor8 -= stor31[stor18[s].field_0].field_256
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _21120 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_21120] = 30
                                            mem[_21120 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_512 > stor9:
                                                _21691 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _21691 + 68] = mem[idx + _21120 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_21691 + 68] = mem[_21691 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _21691 + -mem[64] + 100
                                            stor9 -= stor31[stor18[s].field_0].field_512
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            stor31[stor18[s].field_0].field_256 = 0
                                            stor31[stor18[s].field_0].field_512 = 0
                                            stor31[stor18[s].field_0].field_0 = 0
                                            stor10--
                                            investorCount--
                                            if not (0 / stor20) - stor31[stor18[s].field_0].field_256:
                                                _23444 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_23444] = 26
                                                mem[_23444 + 32] = 'SafeMath: division by zero'
                                                _24510 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24510] = 30
                                                mem[_24510 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > 0 / stor20:
                                                    _24701 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _24701 + 68] = mem[idx + _24510 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_24701 + 68] = mem[_24701 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _24701 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= 95 * 0 / stor20 / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if 0 / stor20 <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = 0 / stor20
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, 0 / stor20
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = 0 / stor20
                                                    emit Withdraw((0 / stor20), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                            else:
                                                if (0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / (0 / stor20) - stor31[stor18[s].field_0].field_256 != uint16(teamRewardFee + farmerRewardFee):
                                                    revert with 0, 32, 33, 0x1f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _23684 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_23684] = 26
                                                mem[_23684 + 32] = 'SafeMath: division by zero'
                                                _24614 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24614] = 30
                                                mem[_24614 + 32] = 'SafeMath: subtraction overflow'
                                                if (0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000 > 0 / stor20:
                                                    _24819 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _24819 + 68] = mem[idx + _24614 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_24819 + 68] = mem[_24819 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _24819 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= (95 * 0 / stor20) - (95 * (0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if (0 / stor20) - ((0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = (0 / stor20) - ((0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, (0 / stor20) - ((0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = (0 / stor20) - ((0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    emit Withdraw(((0 / stor20) - ((0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                        else:
                                            require ext_code.size(tokenAddress)
                                            call tokenAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args stor4, 0
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0]
                                            sub_2445aefb--
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _18884 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_18884] = 30
                                            mem[_18884 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor19:
                                                _19181 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _19181 + 68] = mem[idx + _18884 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_19181 + 68] = mem[_19181 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _19181 + -mem[64] + 100
                                            stor19 -= stor31[stor18[s].field_0].field_256
                                            _19718 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_19718] = 30
                                            mem[_19718 + 32] = 'SafeMath: subtraction overflow'
                                            if balanceOf[stor18[s].field_0] > stor20:
                                                _20139 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _20139 + 68] = mem[idx + _19718 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_20139 + 68] = mem[_20139 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _20139 + -mem[64] + 100
                                            stor20 -= balanceOf[stor18[s].field_0]
                                            mem[0] = stor18[s].field_0
                                            stor21[stor18[s].field_0] = 0
                                            mem[32] = 31
                                            _20820 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_20820] = 30
                                            mem[_20820 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor8:
                                                _21441 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _21441 + 68] = mem[idx + _20820 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_21441 + 68] = mem[_21441 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _21441 + -mem[64] + 100
                                            stor8 -= stor31[stor18[s].field_0].field_256
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _22208 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_22208] = 30
                                            mem[_22208 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_512 > stor9:
                                                _22785 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _22785 + 68] = mem[idx + _22208 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_22785 + 68] = mem[_22785 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _22785 + -mem[64] + 100
                                            stor9 -= stor31[stor18[s].field_0].field_512
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            stor31[stor18[s].field_0].field_256 = 0
                                            stor31[stor18[s].field_0].field_512 = 0
                                            stor31[stor18[s].field_0].field_0 = 0
                                            stor10--
                                            investorCount--
                                            if not (0 / stor20) - stor31[stor18[s].field_0].field_256:
                                                _24179 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24179] = 26
                                                mem[_24179 + 32] = 'SafeMath: division by zero'
                                                _24947 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24947] = 30
                                                mem[_24947 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > 0 / stor20:
                                                    _25195 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _25195 + 68] = mem[idx + _24947 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_25195 + 68] = mem[_25195 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _25195 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= 95 * 0 / stor20 / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if 0 / stor20 <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = 0 / stor20
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, 0 / stor20
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = 0 / stor20
                                                    emit Withdraw((0 / stor20), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                            else:
                                                if (0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / (0 / stor20) - stor31[stor18[s].field_0].field_256 != uint16(teamRewardFee + farmerRewardFee):
                                                    revert with 0, 32, 33, 0x1f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _24352 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24352] = 26
                                                mem[_24352 + 32] = 'SafeMath: division by zero'
                                                _25064 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_25064] = 30
                                                mem[_25064 + 32] = 'SafeMath: subtraction overflow'
                                                if (0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000 > 0 / stor20:
                                                    _25371 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _25371 + 68] = mem[idx + _25064 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_25371 + 68] = mem[_25371 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _25371 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= (95 * 0 / stor20) - (95 * (0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if (0 / stor20) - ((0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = (0 / stor20) - ((0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, (0 / stor20) - ((0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = (0 / stor20) - ((0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    emit Withdraw(((0 / stor20) - ((0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                    else:
                                        if (0 / stor20 * teamRewardFee) - (stor31[stor18[s].field_0].field_256 * teamRewardFee) / (0 / stor20) - stor31[stor18[s].field_0].field_256 != teamRewardFee:
                                            revert with 0, 32, 33, 0x1f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _17882 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_17882] = 26
                                        mem[_17882 + 32] = 'SafeMath: division by zero'
                                        require ext_code.size(tokenAddress)
                                        staticcall tokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(this.address)
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if (0 / stor20 * teamRewardFee) - (stor31[stor18[s].field_0].field_256 * teamRewardFee) / 10000 > ext_call.return_data[0]:
                                            emit 0x658fe604: ((0 / stor20 * teamRewardFee) - (stor31[stor18[s].field_0].field_256 * teamRewardFee) / 10000), stor4
                                            sub_2445aefb--
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _18466 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_18466] = 30
                                            mem[_18466 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor19:
                                                _18751 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _18751 + 68] = mem[idx + _18466 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_18751 + 68] = mem[_18751 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _18751 + -mem[64] + 100
                                            stor19 -= stor31[stor18[s].field_0].field_256
                                            _19177 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_19177] = 30
                                            mem[_19177 + 32] = 'SafeMath: subtraction overflow'
                                            if balanceOf[stor18[s].field_0] > stor20:
                                                _19554 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _19554 + 68] = mem[idx + _19177 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_19554 + 68] = mem[_19554 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _19554 + -mem[64] + 100
                                            stor20 -= balanceOf[stor18[s].field_0]
                                            mem[0] = stor18[s].field_0
                                            stor21[stor18[s].field_0] = 0
                                            mem[32] = 31
                                            _20134 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_20134] = 30
                                            mem[_20134 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor8:
                                                _20595 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _20595 + 68] = mem[idx + _20134 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_20595 + 68] = mem[_20595 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _20595 + -mem[64] + 100
                                            stor8 -= stor31[stor18[s].field_0].field_256
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _21436 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_21436] = 30
                                            mem[_21436 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_512 > stor9:
                                                _21926 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _21926 + 68] = mem[idx + _21436 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_21926 + 68] = mem[_21926 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _21926 + -mem[64] + 100
                                            stor9 -= stor31[stor18[s].field_0].field_512
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            stor31[stor18[s].field_0].field_256 = 0
                                            stor31[stor18[s].field_0].field_512 = 0
                                            stor31[stor18[s].field_0].field_0 = 0
                                            stor10--
                                            investorCount--
                                            if not (0 / stor20) - stor31[stor18[s].field_0].field_256:
                                                _23681 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_23681] = 26
                                                mem[_23681 + 32] = 'SafeMath: division by zero'
                                                _24613 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24613] = 30
                                                mem[_24613 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > 0 / stor20:
                                                    _24816 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _24816 + 68] = mem[idx + _24613 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_24816 + 68] = mem[_24816 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _24816 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= 95 * 0 / stor20 / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if 0 / stor20 <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = 0 / stor20
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, 0 / stor20
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = 0 / stor20
                                                    emit Withdraw((0 / stor20), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                            else:
                                                if (0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / (0 / stor20) - stor31[stor18[s].field_0].field_256 != uint16(teamRewardFee + farmerRewardFee):
                                                    revert with 0, 32, 33, 0x1f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _23890 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_23890] = 26
                                                mem[_23890 + 32] = 'SafeMath: division by zero'
                                                _24700 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24700] = 30
                                                mem[_24700 + 32] = 'SafeMath: subtraction overflow'
                                                if (0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000 > 0 / stor20:
                                                    _24941 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _24941 + 68] = mem[idx + _24700 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_24941 + 68] = mem[_24941 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _24941 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= (95 * 0 / stor20) - (95 * (0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if (0 / stor20) - ((0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = (0 / stor20) - ((0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, (0 / stor20) - ((0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = (0 / stor20) - ((0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    emit Withdraw(((0 / stor20) - ((0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                        else:
                                            require ext_code.size(tokenAddress)
                                            call tokenAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args stor4, (0 / stor20 * teamRewardFee) - (stor31[stor18[s].field_0].field_256 * teamRewardFee) / 10000
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0]
                                            sub_2445aefb--
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _19014 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_19014] = 30
                                            mem[_19014 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor19:
                                                _19360 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _19360 + 68] = mem[idx + _19014 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_19360 + 68] = mem[_19360 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _19360 + -mem[64] + 100
                                            stor19 -= stor31[stor18[s].field_0].field_256
                                            _19899 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_19899] = 30
                                            mem[_19899 + 32] = 'SafeMath: subtraction overflow'
                                            if balanceOf[stor18[s].field_0] > stor20:
                                                _20397 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _20397 + 68] = mem[idx + _19899 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_20397 + 68] = mem[_20397 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _20397 + -mem[64] + 100
                                            stor20 -= balanceOf[stor18[s].field_0]
                                            mem[0] = stor18[s].field_0
                                            stor21[stor18[s].field_0] = 0
                                            mem[32] = 31
                                            _21117 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_21117] = 30
                                            mem[_21117 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor8:
                                                _21688 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _21688 + 68] = mem[idx + _21117 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_21688 + 68] = mem[_21688 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _21688 + -mem[64] + 100
                                            stor8 -= stor31[stor18[s].field_0].field_256
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _22515 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_22515] = 30
                                            mem[_22515 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_512 > stor9:
                                                _23012 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _23012 + 68] = mem[idx + _22515 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_23012 + 68] = mem[_23012 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _23012 + -mem[64] + 100
                                            stor9 -= stor31[stor18[s].field_0].field_512
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            stor31[stor18[s].field_0].field_256 = 0
                                            stor31[stor18[s].field_0].field_512 = 0
                                            stor31[stor18[s].field_0].field_0 = 0
                                            stor10--
                                            investorCount--
                                            if not (0 / stor20) - stor31[stor18[s].field_0].field_256:
                                                _24351 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24351] = 26
                                                mem[_24351 + 32] = 'SafeMath: division by zero'
                                                _25058 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_25058] = 30
                                                mem[_25058 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > 0 / stor20:
                                                    _25365 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _25365 + 68] = mem[idx + _25058 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_25365 + 68] = mem[_25365 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _25365 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= 95 * 0 / stor20 / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if 0 / stor20 <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = 0 / stor20
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, 0 / stor20
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = 0 / stor20
                                                    emit Withdraw((0 / stor20), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                            else:
                                                if (0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / (0 / stor20) - stor31[stor18[s].field_0].field_256 != uint16(teamRewardFee + farmerRewardFee):
                                                    revert with 0, 32, 33, 0x1f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _24509 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24509] = 26
                                                mem[_24509 + 32] = 'SafeMath: division by zero'
                                                _25190 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_25190] = 30
                                                mem[_25190 + 32] = 'SafeMath: subtraction overflow'
                                                if (0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000 > 0 / stor20:
                                                    _25576 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _25576 + 68] = mem[idx + _25190 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_25576 + 68] = mem[_25576 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _25576 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= (95 * 0 / stor20) - (95 * (0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if (0 / stor20) - ((0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = (0 / stor20) - ((0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, (0 / stor20) - ((0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = (0 / stor20) - ((0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    emit Withdraw(((0 / stor20) - ((0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                else:
                                    require ext_code.size(tokenAddress)
                                    call tokenAddress.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args farmerAddress, 0
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_call.return_data[0]
                                    if not (0 / stor20) - stor31[stor18[s].field_0].field_256:
                                        _17981 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_17981] = 26
                                        mem[_17981 + 32] = 'SafeMath: division by zero'
                                        require ext_code.size(tokenAddress)
                                        staticcall tokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(this.address)
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if 0 > ext_call.return_data[0]:
                                            emit 0x658fe604: 0, stor4
                                            sub_2445aefb--
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _18887 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_18887] = 30
                                            mem[_18887 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor19:
                                                _19184 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _19184 + 68] = mem[idx + _18887 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_19184 + 68] = mem[_19184 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _19184 + -mem[64] + 100
                                            stor19 -= stor31[stor18[s].field_0].field_256
                                            _19723 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_19723] = 30
                                            mem[_19723 + 32] = 'SafeMath: subtraction overflow'
                                            if balanceOf[stor18[s].field_0] > stor20:
                                                _20146 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _20146 + 68] = mem[idx + _19723 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_20146 + 68] = mem[_20146 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _20146 + -mem[64] + 100
                                            stor20 -= balanceOf[stor18[s].field_0]
                                            mem[0] = stor18[s].field_0
                                            stor21[stor18[s].field_0] = 0
                                            mem[32] = 31
                                            _20829 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_20829] = 30
                                            mem[_20829 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor8:
                                                _21448 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _21448 + 68] = mem[idx + _20829 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_21448 + 68] = mem[_21448 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _21448 + -mem[64] + 100
                                            stor8 -= stor31[stor18[s].field_0].field_256
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _22216 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_22216] = 30
                                            mem[_22216 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_512 > stor9:
                                                _22792 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _22792 + 68] = mem[idx + _22216 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_22792 + 68] = mem[_22792 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _22792 + -mem[64] + 100
                                            stor9 -= stor31[stor18[s].field_0].field_512
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            stor31[stor18[s].field_0].field_256 = 0
                                            stor31[stor18[s].field_0].field_512 = 0
                                            stor31[stor18[s].field_0].field_0 = 0
                                            stor10--
                                            investorCount--
                                            if not (0 / stor20) - stor31[stor18[s].field_0].field_256:
                                                _24184 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24184] = 26
                                                mem[_24184 + 32] = 'SafeMath: division by zero'
                                                _24949 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24949] = 30
                                                mem[_24949 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > 0 / stor20:
                                                    _25199 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _25199 + 68] = mem[idx + _24949 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_25199 + 68] = mem[_25199 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _25199 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= 95 * 0 / stor20 / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if 0 / stor20 <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = 0 / stor20
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, 0 / stor20
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = 0 / stor20
                                                    emit Withdraw((0 / stor20), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                            else:
                                                if (0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / (0 / stor20) - stor31[stor18[s].field_0].field_256 != uint16(teamRewardFee + farmerRewardFee):
                                                    revert with 0, 32, 33, 0x1f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _24356 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24356] = 26
                                                mem[_24356 + 32] = 'SafeMath: division by zero'
                                                _25066 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_25066] = 30
                                                mem[_25066 + 32] = 'SafeMath: subtraction overflow'
                                                if (0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000 > 0 / stor20:
                                                    _25377 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _25377 + 68] = mem[idx + _25066 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_25377 + 68] = mem[_25377 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _25377 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= (95 * 0 / stor20) - (95 * (0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if (0 / stor20) - ((0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = (0 / stor20) - ((0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, (0 / stor20) - ((0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = (0 / stor20) - ((0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    emit Withdraw(((0 / stor20) - ((0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                        else:
                                            require ext_code.size(tokenAddress)
                                            call tokenAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args stor4, 0
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0]
                                            sub_2445aefb--
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _19560 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_19560] = 30
                                            mem[_19560 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor19:
                                                _19910 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _19910 + 68] = mem[idx + _19560 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_19910 + 68] = mem[_19910 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _19910 + -mem[64] + 100
                                            stor19 -= stor31[stor18[s].field_0].field_256
                                            _20605 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_20605] = 30
                                            mem[_20605 + 32] = 'SafeMath: subtraction overflow'
                                            if balanceOf[stor18[s].field_0] > stor20:
                                                _21129 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _21129 + 68] = mem[idx + _20605 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_21129 + 68] = mem[_21129 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _21129 + -mem[64] + 100
                                            stor20 -= balanceOf[stor18[s].field_0]
                                            mem[0] = stor18[s].field_0
                                            stor21[stor18[s].field_0] = 0
                                            mem[32] = 31
                                            _21936 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_21936] = 30
                                            mem[_21936 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor8:
                                                _22526 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _22526 + 68] = mem[idx + _21936 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_22526 + 68] = mem[_22526 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _22526 + -mem[64] + 100
                                            stor8 -= stor31[stor18[s].field_0].field_256
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _23224 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_23224] = 30
                                            mem[_23224 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_512 > stor9:
                                                _23690 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _23690 + 68] = mem[idx + _23224 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_23690 + 68] = mem[_23690 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _23690 + -mem[64] + 100
                                            stor9 -= stor31[stor18[s].field_0].field_512
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            stor31[stor18[s].field_0].field_256 = 0
                                            stor31[stor18[s].field_0].field_512 = 0
                                            stor31[stor18[s].field_0].field_0 = 0
                                            stor10--
                                            investorCount--
                                            if not (0 / stor20) - stor31[stor18[s].field_0].field_256:
                                                _24706 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24706] = 26
                                                mem[_24706 + 32] = 'SafeMath: division by zero'
                                                _25593 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_25593] = 30
                                                mem[_25593 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > 0 / stor20:
                                                    _26135 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _26135 + 68] = mem[idx + _25593 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_26135 + 68] = mem[_26135 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _26135 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= 95 * 0 / stor20 / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if 0 / stor20 <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = 0 / stor20
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, 0 / stor20
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = 0 / stor20
                                                    emit Withdraw((0 / stor20), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                            else:
                                                if (0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / (0 / stor20) - stor31[stor18[s].field_0].field_256 != uint16(teamRewardFee + farmerRewardFee):
                                                    revert with 0, 32, 33, 0x1f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _24823 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24823] = 26
                                                mem[_24823 + 32] = 'SafeMath: division by zero'
                                                _25841 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_25841] = 30
                                                mem[_25841 + 32] = 'SafeMath: subtraction overflow'
                                                if (0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000 > 0 / stor20:
                                                    _26466 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _26466 + 68] = mem[idx + _25841 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_26466 + 68] = mem[_26466 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _26466 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= (95 * 0 / stor20) - (95 * (0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if (0 / stor20) - ((0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = (0 / stor20) - ((0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, (0 / stor20) - ((0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = (0 / stor20) - ((0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    emit Withdraw(((0 / stor20) - ((0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                    else:
                                        if (0 / stor20 * teamRewardFee) - (stor31[stor18[s].field_0].field_256 * teamRewardFee) / (0 / stor20) - stor31[stor18[s].field_0].field_256 != teamRewardFee:
                                            revert with 0, 32, 33, 0x1f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _18029 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_18029] = 26
                                        mem[_18029 + 32] = 'SafeMath: division by zero'
                                        require ext_code.size(tokenAddress)
                                        staticcall tokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(this.address)
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if (0 / stor20 * teamRewardFee) - (stor31[stor18[s].field_0].field_256 * teamRewardFee) / 10000 > ext_call.return_data[0]:
                                            emit 0x658fe604: ((0 / stor20 * teamRewardFee) - (stor31[stor18[s].field_0].field_256 * teamRewardFee) / 10000), stor4
                                            sub_2445aefb--
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _19018 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_19018] = 30
                                            mem[_19018 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor19:
                                                _19366 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _19366 + 68] = mem[idx + _19018 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_19366 + 68] = mem[_19366 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _19366 + -mem[64] + 100
                                            stor19 -= stor31[stor18[s].field_0].field_256
                                            _19906 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_19906] = 30
                                            mem[_19906 + 32] = 'SafeMath: subtraction overflow'
                                            if balanceOf[stor18[s].field_0] > stor20:
                                                _20403 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _20403 + 68] = mem[idx + _19906 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_20403 + 68] = mem[_20403 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _20403 + -mem[64] + 100
                                            stor20 -= balanceOf[stor18[s].field_0]
                                            mem[0] = stor18[s].field_0
                                            stor21[stor18[s].field_0] = 0
                                            mem[32] = 31
                                            _21124 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_21124] = 30
                                            mem[_21124 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor8:
                                                _21694 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _21694 + 68] = mem[idx + _21124 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_21694 + 68] = mem[_21694 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _21694 + -mem[64] + 100
                                            stor8 -= stor31[stor18[s].field_0].field_256
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _22521 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_22521] = 30
                                            mem[_22521 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_512 > stor9:
                                                _23015 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _23015 + 68] = mem[idx + _22521 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_23015 + 68] = mem[_23015 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _23015 + -mem[64] + 100
                                            stor9 -= stor31[stor18[s].field_0].field_512
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            stor31[stor18[s].field_0].field_256 = 0
                                            stor31[stor18[s].field_0].field_512 = 0
                                            stor31[stor18[s].field_0].field_0 = 0
                                            stor10--
                                            investorCount--
                                            if not (0 / stor20) - stor31[stor18[s].field_0].field_256:
                                                _24353 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24353] = 26
                                                mem[_24353 + 32] = 'SafeMath: division by zero'
                                                _25065 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_25065] = 30
                                                mem[_25065 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > 0 / stor20:
                                                    _25374 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _25374 + 68] = mem[idx + _25065 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_25374 + 68] = mem[_25374 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _25374 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= 95 * 0 / stor20 / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if 0 / stor20 <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = 0 / stor20
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, 0 / stor20
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = 0 / stor20
                                                    emit Withdraw((0 / stor20), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                            else:
                                                if (0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / (0 / stor20) - stor31[stor18[s].field_0].field_256 != uint16(teamRewardFee + farmerRewardFee):
                                                    revert with 0, 32, 33, 0x1f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _24511 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24511] = 26
                                                mem[_24511 + 32] = 'SafeMath: division by zero'
                                                _25198 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_25198] = 30
                                                mem[_25198 + 32] = 'SafeMath: subtraction overflow'
                                                if (0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000 > 0 / stor20:
                                                    _25587 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _25587 + 68] = mem[idx + _25198 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_25587 + 68] = mem[_25587 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _25587 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= (95 * 0 / stor20) - (95 * (0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if (0 / stor20) - ((0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = (0 / stor20) - ((0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, (0 / stor20) - ((0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = (0 / stor20) - ((0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    emit Withdraw(((0 / stor20) - ((0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                        else:
                                            require ext_code.size(tokenAddress)
                                            call tokenAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args stor4, (0 / stor20 * teamRewardFee) - (stor31[stor18[s].field_0].field_256 * teamRewardFee) / 10000
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0]
                                            sub_2445aefb--
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _19722 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_19722] = 30
                                            mem[_19722 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor19:
                                                _20143 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _20143 + 68] = mem[idx + _19722 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_20143 + 68] = mem[_20143 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _20143 + -mem[64] + 100
                                            stor19 -= stor31[stor18[s].field_0].field_256
                                            _20826 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_20826] = 30
                                            mem[_20826 + 32] = 'SafeMath: subtraction overflow'
                                            if balanceOf[stor18[s].field_0] > stor20:
                                                _21445 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _21445 + 68] = mem[idx + _20826 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_21445 + 68] = mem[_21445 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _21445 + -mem[64] + 100
                                            stor20 -= balanceOf[stor18[s].field_0]
                                            mem[0] = stor18[s].field_0
                                            stor21[stor18[s].field_0] = 0
                                            mem[32] = 31
                                            _22213 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_22213] = 30
                                            mem[_22213 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor8:
                                                _22789 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _22789 + 68] = mem[idx + _22213 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_22789 + 68] = mem[_22789 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _22789 + -mem[64] + 100
                                            stor8 -= stor31[stor18[s].field_0].field_256
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _23449 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_23449] = 30
                                            mem[_23449 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_512 > stor9:
                                                _23893 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _23893 + 68] = mem[idx + _23449 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_23893 + 68] = mem[_23893 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _23893 + -mem[64] + 100
                                            stor9 -= stor31[stor18[s].field_0].field_512
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            stor31[stor18[s].field_0].field_256 = 0
                                            stor31[stor18[s].field_0].field_512 = 0
                                            stor31[stor18[s].field_0].field_0 = 0
                                            stor10--
                                            investorCount--
                                            if not (0 / stor20) - stor31[stor18[s].field_0].field_256:
                                                _24822 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24822] = 26
                                                mem[_24822 + 32] = 'SafeMath: division by zero'
                                                _25835 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_25835] = 30
                                                mem[_25835 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > 0 / stor20:
                                                    _26460 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _26460 + 68] = mem[idx + _25835 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_26460 + 68] = mem[_26460 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _26460 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= 95 * 0 / stor20 / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if 0 / stor20 <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = 0 / stor20
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, 0 / stor20
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = 0 / stor20
                                                    emit Withdraw((0 / stor20), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                            else:
                                                if (0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / (0 / stor20) - stor31[stor18[s].field_0].field_256 != uint16(teamRewardFee + farmerRewardFee):
                                                    revert with 0, 32, 33, 0x1f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _24948 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24948] = 26
                                                mem[_24948 + 32] = 'SafeMath: division by zero'
                                                _26130 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_26130] = 30
                                                mem[_26130 + 32] = 'SafeMath: subtraction overflow'
                                                if (0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000 > 0 / stor20:
                                                    _26810 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _26810 + 68] = mem[idx + _26130 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_26810 + 68] = mem[_26810 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _26810 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= (95 * 0 / stor20) - (95 * (0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if (0 / stor20) - ((0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = (0 / stor20) - ((0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, (0 / stor20) - ((0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = (0 / stor20) - ((0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    emit Withdraw(((0 / stor20) - ((0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                            else:
                                if (0 / stor20 * farmerRewardFee) - (stor31[stor18[s].field_0].field_256 * farmerRewardFee) / (0 / stor20) - stor31[stor18[s].field_0].field_256 != farmerRewardFee:
                                    revert with 0, 32, 33, 0x1f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                _17227 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_17227] = 26
                                mem[_17227 + 32] = 'SafeMath: division by zero'
                                require ext_code.size(tokenAddress)
                                staticcall tokenAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args address(this.address)
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if (0 / stor20 * farmerRewardFee) - (stor31[stor18[s].field_0].field_256 * farmerRewardFee) / 10000 > ext_call.return_data[0]:
                                    mem[0] = stor18[s].field_0
                                    emit 0x658fe604: ((0 / stor20 * farmerRewardFee) - (stor31[stor18[s].field_0].field_256 * farmerRewardFee) / 10000), farmerAddress
                                    if not (0 / stor20) - stor31[stor18[s].field_0].field_256:
                                        _17881 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_17881] = 26
                                        mem[_17881 + 32] = 'SafeMath: division by zero'
                                        require ext_code.size(tokenAddress)
                                        staticcall tokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(this.address)
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if 0 > ext_call.return_data[0]:
                                            emit 0x658fe604: 0, stor4
                                            sub_2445aefb--
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _18462 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_18462] = 30
                                            mem[_18462 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor19:
                                                _18742 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _18742 + 68] = mem[idx + _18462 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_18742 + 68] = mem[_18742 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _18742 + -mem[64] + 100
                                            stor19 -= stor31[stor18[s].field_0].field_256
                                            _19172 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_19172] = 30
                                            mem[_19172 + 32] = 'SafeMath: subtraction overflow'
                                            if balanceOf[stor18[s].field_0] > stor20:
                                                _19547 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _19547 + 68] = mem[idx + _19172 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_19547 + 68] = mem[_19547 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _19547 + -mem[64] + 100
                                            stor20 -= balanceOf[stor18[s].field_0]
                                            mem[0] = stor18[s].field_0
                                            stor21[stor18[s].field_0] = 0
                                            mem[32] = 31
                                            _20123 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_20123] = 30
                                            mem[_20123 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor8:
                                                _20588 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _20588 + 68] = mem[idx + _20123 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_20588 + 68] = mem[_20588 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _20588 + -mem[64] + 100
                                            stor8 -= stor31[stor18[s].field_0].field_256
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _21424 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_21424] = 30
                                            mem[_21424 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_512 > stor9:
                                                _21917 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _21917 + 68] = mem[idx + _21424 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_21917 + 68] = mem[_21917 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _21917 + -mem[64] + 100
                                            stor9 -= stor31[stor18[s].field_0].field_512
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            stor31[stor18[s].field_0].field_256 = 0
                                            stor31[stor18[s].field_0].field_512 = 0
                                            stor31[stor18[s].field_0].field_0 = 0
                                            stor10--
                                            investorCount--
                                            if not (0 / stor20) - stor31[stor18[s].field_0].field_256:
                                                _23670 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_23670] = 26
                                                mem[_23670 + 32] = 'SafeMath: division by zero'
                                                _24610 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24610] = 30
                                                mem[_24610 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > 0 / stor20:
                                                    _24810 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _24810 + 68] = mem[idx + _24610 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_24810 + 68] = mem[_24810 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _24810 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= 95 * 0 / stor20 / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if 0 / stor20 <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = 0 / stor20
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, 0 / stor20
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = 0 / stor20
                                                    emit Withdraw((0 / stor20), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                            else:
                                                if (0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / (0 / stor20) - stor31[stor18[s].field_0].field_256 != uint16(teamRewardFee + farmerRewardFee):
                                                    revert with 0, 32, 33, 0x1f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _23881 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_23881] = 26
                                                mem[_23881 + 32] = 'SafeMath: division by zero'
                                                _24697 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24697] = 30
                                                mem[_24697 + 32] = 'SafeMath: subtraction overflow'
                                                if (0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000 > 0 / stor20:
                                                    _24936 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _24936 + 68] = mem[idx + _24697 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_24936 + 68] = mem[_24936 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _24936 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= (95 * 0 / stor20) - (95 * (0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if (0 / stor20) - ((0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = (0 / stor20) - ((0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, (0 / stor20) - ((0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = (0 / stor20) - ((0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    emit Withdraw(((0 / stor20) - ((0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                        else:
                                            require ext_code.size(tokenAddress)
                                            call tokenAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args stor4, 0
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0]
                                            sub_2445aefb--
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _19008 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_19008] = 30
                                            mem[_19008 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor19:
                                                _19353 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _19353 + 68] = mem[idx + _19008 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_19353 + 68] = mem[_19353 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _19353 + -mem[64] + 100
                                            stor19 -= stor31[stor18[s].field_0].field_256
                                            _19888 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_19888] = 30
                                            mem[_19888 + 32] = 'SafeMath: subtraction overflow'
                                            if balanceOf[stor18[s].field_0] > stor20:
                                                _20386 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _20386 + 68] = mem[idx + _19888 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_20386 + 68] = mem[_20386 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _20386 + -mem[64] + 100
                                            stor20 -= balanceOf[stor18[s].field_0]
                                            mem[0] = stor18[s].field_0
                                            stor21[stor18[s].field_0] = 0
                                            mem[32] = 31
                                            _21102 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_21102] = 30
                                            mem[_21102 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor8:
                                                _21677 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _21677 + 68] = mem[idx + _21102 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_21677 + 68] = mem[_21677 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _21677 + -mem[64] + 100
                                            stor8 -= stor31[stor18[s].field_0].field_256
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _22501 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_22501] = 30
                                            mem[_22501 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_512 > stor9:
                                                _23001 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _23001 + 68] = mem[idx + _22501 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_23001 + 68] = mem[_23001 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _23001 + -mem[64] + 100
                                            stor9 -= stor31[stor18[s].field_0].field_512
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            stor31[stor18[s].field_0].field_256 = 0
                                            stor31[stor18[s].field_0].field_512 = 0
                                            stor31[stor18[s].field_0].field_0 = 0
                                            stor10--
                                            investorCount--
                                            if not (0 / stor20) - stor31[stor18[s].field_0].field_256:
                                                _24343 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24343] = 26
                                                mem[_24343 + 32] = 'SafeMath: division by zero'
                                                _25052 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_25052] = 30
                                                mem[_25052 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > 0 / stor20:
                                                    _25354 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _25354 + 68] = mem[idx + _25052 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_25354 + 68] = mem[_25354 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _25354 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= 95 * 0 / stor20 / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if 0 / stor20 <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = 0 / stor20
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, 0 / stor20
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = 0 / stor20
                                                    emit Withdraw((0 / stor20), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                            else:
                                                if (0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / (0 / stor20) - stor31[stor18[s].field_0].field_256 != uint16(teamRewardFee + farmerRewardFee):
                                                    revert with 0, 32, 33, 0x1f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _24503 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24503] = 26
                                                mem[_24503 + 32] = 'SafeMath: division by zero'
                                                _25182 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_25182] = 30
                                                mem[_25182 + 32] = 'SafeMath: subtraction overflow'
                                                if (0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000 > 0 / stor20:
                                                    _25564 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _25564 + 68] = mem[idx + _25182 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_25564 + 68] = mem[_25564 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _25564 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= (95 * 0 / stor20) - (95 * (0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if (0 / stor20) - ((0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = (0 / stor20) - ((0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, (0 / stor20) - ((0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = (0 / stor20) - ((0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    emit Withdraw(((0 / stor20) - ((0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                    else:
                                        if (0 / stor20 * teamRewardFee) - (stor31[stor18[s].field_0].field_256 * teamRewardFee) / (0 / stor20) - stor31[stor18[s].field_0].field_256 != teamRewardFee:
                                            revert with 0, 32, 33, 0x1f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _17920 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_17920] = 26
                                        mem[_17920 + 32] = 'SafeMath: division by zero'
                                        require ext_code.size(tokenAddress)
                                        staticcall tokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(this.address)
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if (0 / stor20 * teamRewardFee) - (stor31[stor18[s].field_0].field_256 * teamRewardFee) / 10000 > ext_call.return_data[0]:
                                            emit 0x658fe604: ((0 / stor20 * teamRewardFee) - (stor31[stor18[s].field_0].field_256 * teamRewardFee) / 10000), stor4
                                            sub_2445aefb--
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _18594 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_18594] = 30
                                            mem[_18594 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor19:
                                                _18876 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _18876 + 68] = mem[idx + _18594 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_18876 + 68] = mem[_18876 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _18876 + -mem[64] + 100
                                            stor19 -= stor31[stor18[s].field_0].field_256
                                            _19349 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_19349] = 30
                                            mem[_19349 + 32] = 'SafeMath: subtraction overflow'
                                            if balanceOf[stor18[s].field_0] > stor20:
                                                _19707 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _19707 + 68] = mem[idx + _19349 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_19707 + 68] = mem[_19707 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _19707 + -mem[64] + 100
                                            stor20 -= balanceOf[stor18[s].field_0]
                                            mem[0] = stor18[s].field_0
                                            stor21[stor18[s].field_0] = 0
                                            mem[32] = 31
                                            _20381 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_20381] = 30
                                            mem[_20381 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor8:
                                                _20802 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _20802 + 68] = mem[idx + _20381 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_20802 + 68] = mem[_20802 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _20802 + -mem[64] + 100
                                            stor8 -= stor31[stor18[s].field_0].field_256
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _21672 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_21672] = 30
                                            mem[_21672 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_512 > stor9:
                                                _22191 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _22191 + 68] = mem[idx + _21672 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_22191 + 68] = mem[_22191 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _22191 + -mem[64] + 100
                                            stor9 -= stor31[stor18[s].field_0].field_512
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            stor31[stor18[s].field_0].field_256 = 0
                                            stor31[stor18[s].field_0].field_512 = 0
                                            stor31[stor18[s].field_0].field_0 = 0
                                            stor10--
                                            investorCount--
                                            if not (0 / stor20) - stor31[stor18[s].field_0].field_256:
                                                _23878 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_23878] = 26
                                                mem[_23878 + 32] = 'SafeMath: division by zero'
                                                _24696 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24696] = 30
                                                mem[_24696 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > 0 / stor20:
                                                    _24933 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _24933 + 68] = mem[idx + _24696 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_24933 + 68] = mem[_24933 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _24933 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= 95 * 0 / stor20 / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if 0 / stor20 <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = 0 / stor20
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, 0 / stor20
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = 0 / stor20
                                                    emit Withdraw((0 / stor20), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                            else:
                                                if (0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / (0 / stor20) - stor31[stor18[s].field_0].field_256 != uint16(teamRewardFee + farmerRewardFee):
                                                    revert with 0, 32, 33, 0x1f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _24033 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24033] = 26
                                                mem[_24033 + 32] = 'SafeMath: division by zero'
                                                _24809 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24809] = 30
                                                mem[_24809 + 32] = 'SafeMath: subtraction overflow'
                                                if (0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000 > 0 / stor20:
                                                    _25046 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _25046 + 68] = mem[idx + _24809 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_25046 + 68] = mem[_25046 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _25046 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= (95 * 0 / stor20) - (95 * (0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if (0 / stor20) - ((0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = (0 / stor20) - ((0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, (0 / stor20) - ((0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = (0 / stor20) - ((0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    emit Withdraw(((0 / stor20) - ((0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                        else:
                                            require ext_code.size(tokenAddress)
                                            call tokenAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args stor4, (0 / stor20 * teamRewardFee) - (stor31[stor18[s].field_0].field_256 * teamRewardFee) / 10000
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0]
                                            sub_2445aefb--
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _19171 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_19171] = 30
                                            mem[_19171 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor19:
                                                _19544 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _19544 + 68] = mem[idx + _19171 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_19544 + 68] = mem[_19544 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _19544 + -mem[64] + 100
                                            stor19 -= stor31[stor18[s].field_0].field_256
                                            _20120 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_20120] = 30
                                            mem[_20120 + 32] = 'SafeMath: subtraction overflow'
                                            if balanceOf[stor18[s].field_0] > stor20:
                                                _20585 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _20585 + 68] = mem[idx + _20120 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_20585 + 68] = mem[_20585 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _20585 + -mem[64] + 100
                                            stor20 -= balanceOf[stor18[s].field_0]
                                            mem[0] = stor18[s].field_0
                                            stor21[stor18[s].field_0] = 0
                                            mem[32] = 31
                                            _21421 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_21421] = 30
                                            mem[_21421 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor8:
                                                _21914 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _21914 + 68] = mem[idx + _21421 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_21914 + 68] = mem[_21914 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _21914 + -mem[64] + 100
                                            stor8 -= stor31[stor18[s].field_0].field_256
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _22767 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_22767] = 30
                                            mem[_22767 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_512 > stor9:
                                                _23208 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _23208 + 68] = mem[idx + _22767 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_23208 + 68] = mem[_23208 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _23208 + -mem[64] + 100
                                            stor9 -= stor31[stor18[s].field_0].field_512
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            stor31[stor18[s].field_0].field_256 = 0
                                            stor31[stor18[s].field_0].field_512 = 0
                                            stor31[stor18[s].field_0].field_0 = 0
                                            stor10--
                                            investorCount--
                                            if not (0 / stor20) - stor31[stor18[s].field_0].field_256:
                                                _24502 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24502] = 26
                                                mem[_24502 + 32] = 'SafeMath: division by zero'
                                                _25176 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_25176] = 30
                                                mem[_25176 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > 0 / stor20:
                                                    _25558 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _25558 + 68] = mem[idx + _25176 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_25558 + 68] = mem[_25558 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _25558 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= 95 * 0 / stor20 / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if 0 / stor20 <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = 0 / stor20
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, 0 / stor20
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = 0 / stor20
                                                    emit Withdraw((0 / stor20), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                            else:
                                                if (0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / (0 / stor20) - stor31[stor18[s].field_0].field_256 != uint16(teamRewardFee + farmerRewardFee):
                                                    revert with 0, 32, 33, 0x1f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _24609 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24609] = 26
                                                mem[_24609 + 32] = 'SafeMath: division by zero'
                                                _25349 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_25349] = 30
                                                mem[_25349 + 32] = 'SafeMath: subtraction overflow'
                                                if (0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000 > 0 / stor20:
                                                    _25797 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _25797 + 68] = mem[idx + _25349 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_25797 + 68] = mem[_25797 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _25797 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= (95 * 0 / stor20) - (95 * (0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if (0 / stor20) - ((0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = (0 / stor20) - ((0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, (0 / stor20) - ((0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = (0 / stor20) - ((0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    emit Withdraw(((0 / stor20) - ((0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                else:
                                    require ext_code.size(tokenAddress)
                                    call tokenAddress.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args farmerAddress, (0 / stor20 * farmerRewardFee) - (stor31[stor18[s].field_0].field_256 * farmerRewardFee) / 10000
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_call.return_data[0]
                                    if not (0 / stor20) - stor31[stor18[s].field_0].field_256:
                                        _18026 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_18026] = 26
                                        mem[_18026 + 32] = 'SafeMath: division by zero'
                                        require ext_code.size(tokenAddress)
                                        staticcall tokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(this.address)
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if 0 > ext_call.return_data[0]:
                                            emit 0x658fe604: 0, stor4
                                            sub_2445aefb--
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _19011 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_19011] = 30
                                            mem[_19011 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor19:
                                                _19356 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _19356 + 68] = mem[idx + _19011 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_19356 + 68] = mem[_19356 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _19356 + -mem[64] + 100
                                            stor19 -= stor31[stor18[s].field_0].field_256
                                            _19893 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_19893] = 30
                                            mem[_19893 + 32] = 'SafeMath: subtraction overflow'
                                            if balanceOf[stor18[s].field_0] > stor20:
                                                _20393 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _20393 + 68] = mem[idx + _19893 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_20393 + 68] = mem[_20393 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _20393 + -mem[64] + 100
                                            stor20 -= balanceOf[stor18[s].field_0]
                                            mem[0] = stor18[s].field_0
                                            stor21[stor18[s].field_0] = 0
                                            mem[32] = 31
                                            _21111 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_21111] = 30
                                            mem[_21111 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor8:
                                                _21684 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _21684 + 68] = mem[idx + _21111 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_21684 + 68] = mem[_21684 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _21684 + -mem[64] + 100
                                            stor8 -= stor31[stor18[s].field_0].field_256
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _22509 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_22509] = 30
                                            mem[_22509 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_512 > stor9:
                                                _23008 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _23008 + 68] = mem[idx + _22509 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_23008 + 68] = mem[_23008 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _23008 + -mem[64] + 100
                                            stor9 -= stor31[stor18[s].field_0].field_512
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            stor31[stor18[s].field_0].field_256 = 0
                                            stor31[stor18[s].field_0].field_512 = 0
                                            stor31[stor18[s].field_0].field_0 = 0
                                            stor10--
                                            investorCount--
                                            if not (0 / stor20) - stor31[stor18[s].field_0].field_256:
                                                _24348 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24348] = 26
                                                mem[_24348 + 32] = 'SafeMath: division by zero'
                                                _25054 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_25054] = 30
                                                mem[_25054 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > 0 / stor20:
                                                    _25358 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _25358 + 68] = mem[idx + _25054 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_25358 + 68] = mem[_25358 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _25358 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= 95 * 0 / stor20 / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if 0 / stor20 <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = 0 / stor20
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, 0 / stor20
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = 0 / stor20
                                                    emit Withdraw((0 / stor20), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                            else:
                                                if (0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / (0 / stor20) - stor31[stor18[s].field_0].field_256 != uint16(teamRewardFee + farmerRewardFee):
                                                    revert with 0, 32, 33, 0x1f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _24507 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24507] = 26
                                                mem[_24507 + 32] = 'SafeMath: division by zero'
                                                _25184 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_25184] = 30
                                                mem[_25184 + 32] = 'SafeMath: subtraction overflow'
                                                if (0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000 > 0 / stor20:
                                                    _25570 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _25570 + 68] = mem[idx + _25184 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_25570 + 68] = mem[_25570 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _25570 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= (95 * 0 / stor20) - (95 * (0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if (0 / stor20) - ((0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = (0 / stor20) - ((0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, (0 / stor20) - ((0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = (0 / stor20) - ((0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    emit Withdraw(((0 / stor20) - ((0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                        else:
                                            require ext_code.size(tokenAddress)
                                            call tokenAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args stor4, 0
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0]
                                            sub_2445aefb--
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _19713 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_19713] = 30
                                            mem[_19713 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor19:
                                                _20131 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _20131 + 68] = mem[idx + _19713 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_20131 + 68] = mem[_20131 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _20131 + -mem[64] + 100
                                            stor19 -= stor31[stor18[s].field_0].field_256
                                            _20812 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_20812] = 30
                                            mem[_20812 + 32] = 'SafeMath: subtraction overflow'
                                            if balanceOf[stor18[s].field_0] > stor20:
                                                _21433 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _21433 + 68] = mem[idx + _20812 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_21433 + 68] = mem[_21433 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _21433 + -mem[64] + 100
                                            stor20 -= balanceOf[stor18[s].field_0]
                                            mem[0] = stor18[s].field_0
                                            stor21[stor18[s].field_0] = 0
                                            mem[32] = 31
                                            _22201 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_22201] = 30
                                            mem[_22201 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor8:
                                                _22778 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _22778 + 68] = mem[idx + _22201 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_22778 + 68] = mem[_22778 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _22778 + -mem[64] + 100
                                            stor8 -= stor31[stor18[s].field_0].field_256
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _23437 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_23437] = 30
                                            mem[_23437 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_512 > stor9:
                                                _23887 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _23887 + 68] = mem[idx + _23437 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_23887 + 68] = mem[_23887 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _23887 + -mem[64] + 100
                                            stor9 -= stor31[stor18[s].field_0].field_512
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            stor31[stor18[s].field_0].field_256 = 0
                                            stor31[stor18[s].field_0].field_512 = 0
                                            stor31[stor18[s].field_0].field_0 = 0
                                            stor10--
                                            investorCount--
                                            if not (0 / stor20) - stor31[stor18[s].field_0].field_256:
                                                _24815 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24815] = 26
                                                mem[_24815 + 32] = 'SafeMath: division by zero'
                                                _25814 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_25814] = 30
                                                mem[_25814 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > 0 / stor20:
                                                    _26443 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _26443 + 68] = mem[idx + _25814 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_26443 + 68] = mem[_26443 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _26443 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= 95 * 0 / stor20 / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if 0 / stor20 <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = 0 / stor20
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, 0 / stor20
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = 0 / stor20
                                                    emit Withdraw((0 / stor20), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                            else:
                                                if (0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / (0 / stor20) - stor31[stor18[s].field_0].field_256 != uint16(teamRewardFee + farmerRewardFee):
                                                    revert with 0, 32, 33, 0x1f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _24940 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24940] = 26
                                                mem[_24940 + 32] = 'SafeMath: division by zero'
                                                _26110 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_26110] = 30
                                                mem[_26110 + 32] = 'SafeMath: subtraction overflow'
                                                if (0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000 > 0 / stor20:
                                                    _26789 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _26789 + 68] = mem[idx + _26110 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_26789 + 68] = mem[_26789 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _26789 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= (95 * 0 / stor20) - (95 * (0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if (0 / stor20) - ((0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = (0 / stor20) - ((0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, (0 / stor20) - ((0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = (0 / stor20) - ((0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    emit Withdraw(((0 / stor20) - ((0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                    else:
                                        if (0 / stor20 * teamRewardFee) - (stor31[stor18[s].field_0].field_256 * teamRewardFee) / (0 / stor20) - stor31[stor18[s].field_0].field_256 != teamRewardFee:
                                            revert with 0, 32, 33, 0x1f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _18073 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_18073] = 26
                                        mem[_18073 + 32] = 'SafeMath: division by zero'
                                        require ext_code.size(tokenAddress)
                                        staticcall tokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(this.address)
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if (0 / stor20 * teamRewardFee) - (stor31[stor18[s].field_0].field_256 * teamRewardFee) / 10000 > ext_call.return_data[0]:
                                            emit 0x658fe604: ((0 / stor20 * teamRewardFee) - (stor31[stor18[s].field_0].field_256 * teamRewardFee) / 10000), stor4
                                            sub_2445aefb--
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _19175 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_19175] = 30
                                            mem[_19175 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor19:
                                                _19550 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _19550 + 68] = mem[idx + _19175 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_19550 + 68] = mem[_19550 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _19550 + -mem[64] + 100
                                            stor19 -= stor31[stor18[s].field_0].field_256
                                            _20127 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_20127] = 30
                                            mem[_20127 + 32] = 'SafeMath: subtraction overflow'
                                            if balanceOf[stor18[s].field_0] > stor20:
                                                _20591 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _20591 + 68] = mem[idx + _20127 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_20591 + 68] = mem[_20591 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _20591 + -mem[64] + 100
                                            stor20 -= balanceOf[stor18[s].field_0]
                                            mem[0] = stor18[s].field_0
                                            stor21[stor18[s].field_0] = 0
                                            mem[32] = 31
                                            _21428 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_21428] = 30
                                            mem[_21428 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor8:
                                                _21920 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _21920 + 68] = mem[idx + _21428 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_21920 + 68] = mem[_21920 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _21920 + -mem[64] + 100
                                            stor8 -= stor31[stor18[s].field_0].field_256
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _22773 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_22773] = 30
                                            mem[_22773 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_512 > stor9:
                                                _23211 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _23211 + 68] = mem[idx + _22773 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_23211 + 68] = mem[_23211 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _23211 + -mem[64] + 100
                                            stor9 -= stor31[stor18[s].field_0].field_512
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            stor31[stor18[s].field_0].field_256 = 0
                                            stor31[stor18[s].field_0].field_512 = 0
                                            stor31[stor18[s].field_0].field_0 = 0
                                            stor10--
                                            investorCount--
                                            if not (0 / stor20) - stor31[stor18[s].field_0].field_256:
                                                _24504 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24504] = 26
                                                mem[_24504 + 32] = 'SafeMath: division by zero'
                                                _25183 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_25183] = 30
                                                mem[_25183 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > 0 / stor20:
                                                    _25567 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _25567 + 68] = mem[idx + _25183 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_25567 + 68] = mem[_25567 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _25567 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= 95 * 0 / stor20 / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if 0 / stor20 <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = 0 / stor20
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, 0 / stor20
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = 0 / stor20
                                                    emit Withdraw((0 / stor20), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                            else:
                                                if (0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / (0 / stor20) - stor31[stor18[s].field_0].field_256 != uint16(teamRewardFee + farmerRewardFee):
                                                    revert with 0, 32, 33, 0x1f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _24611 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24611] = 26
                                                mem[_24611 + 32] = 'SafeMath: division by zero'
                                                _25357 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_25357] = 30
                                                mem[_25357 + 32] = 'SafeMath: subtraction overflow'
                                                if (0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000 > 0 / stor20:
                                                    _25808 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _25808 + 68] = mem[idx + _25357 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_25808 + 68] = mem[_25808 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _25808 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= (95 * 0 / stor20) - (95 * (0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if (0 / stor20) - ((0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = (0 / stor20) - ((0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, (0 / stor20) - ((0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = (0 / stor20) - ((0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    emit Withdraw(((0 / stor20) - ((0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                        else:
                                            require ext_code.size(tokenAddress)
                                            call tokenAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args stor4, (0 / stor20 * teamRewardFee) - (stor31[stor18[s].field_0].field_256 * teamRewardFee) / 10000
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0]
                                            sub_2445aefb--
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _19892 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_19892] = 30
                                            mem[_19892 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor19:
                                                _20390 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _20390 + 68] = mem[idx + _19892 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_20390 + 68] = mem[_20390 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _20390 + -mem[64] + 100
                                            stor19 -= stor31[stor18[s].field_0].field_256
                                            _21108 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_21108] = 30
                                            mem[_21108 + 32] = 'SafeMath: subtraction overflow'
                                            if balanceOf[stor18[s].field_0] > stor20:
                                                _21681 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _21681 + 68] = mem[idx + _21108 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_21681 + 68] = mem[_21681 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _21681 + -mem[64] + 100
                                            stor20 -= balanceOf[stor18[s].field_0]
                                            mem[0] = stor18[s].field_0
                                            stor21[stor18[s].field_0] = 0
                                            mem[32] = 31
                                            _22506 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_22506] = 30
                                            mem[_22506 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor8:
                                                _23005 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _23005 + 68] = mem[idx + _22506 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_23005 + 68] = mem[_23005 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _23005 + -mem[64] + 100
                                            stor8 -= stor31[stor18[s].field_0].field_256
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _23675 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_23675] = 30
                                            mem[_23675 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_512 > stor9:
                                                _24036 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _24036 + 68] = mem[idx + _23675 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_24036 + 68] = mem[_24036 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _24036 + -mem[64] + 100
                                            stor9 -= stor31[stor18[s].field_0].field_512
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            stor31[stor18[s].field_0].field_256 = 0
                                            stor31[stor18[s].field_0].field_512 = 0
                                            stor31[stor18[s].field_0].field_0 = 0
                                            stor10--
                                            investorCount--
                                            if not (0 / stor20) - stor31[stor18[s].field_0].field_256:
                                                _24939 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24939] = 26
                                                mem[_24939 + 32] = 'SafeMath: division by zero'
                                                _26104 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_26104] = 30
                                                mem[_26104 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > 0 / stor20:
                                                    _26783 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _26783 + 68] = mem[idx + _26104 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_26783 + 68] = mem[_26783 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _26783 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= 95 * 0 / stor20 / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if 0 / stor20 <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = 0 / stor20
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, 0 / stor20
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = 0 / stor20
                                                    emit Withdraw((0 / stor20), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                            else:
                                                if (0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / (0 / stor20) - stor31[stor18[s].field_0].field_256 != uint16(teamRewardFee + farmerRewardFee):
                                                    revert with 0, 32, 33, 0x1f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _25053 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_25053] = 26
                                                mem[_25053 + 32] = 'SafeMath: division by zero'
                                                _26438 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_26438] = 30
                                                mem[_26438 + 32] = 'SafeMath: subtraction overflow'
                                                if (0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000 > 0 / stor20:
                                                    _27175 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _27175 + 68] = mem[idx + _26438 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_27175 + 68] = mem[_27175 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _27175 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= (95 * 0 / stor20) - (95 * (0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if (0 / stor20) - ((0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = (0 / stor20) - ((0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, (0 / stor20) - ((0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = (0 / stor20) - ((0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    emit Withdraw(((0 / stor20) - ((0 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                else:
                    require ext_code.size(tokenAddress)
                    staticcall tokenAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not stor18[s].field_0:
                        revert with 0, 32, 33, 0x7342455032303a206275726e2066726f6d20746865207a65726f20616464726573, mem[mem[64] + 101 len 31]
                    _16989 = mem[64]
                    mem[64] = mem[64] + 96
                    mem[_16989] = 34
                    mem[_16989 + 32 len 34] = 0x6f42455032303a206275726e20616d6f756e7420657863656564732062616c616e63
                    mem[32] = 32
                    if balanceOf[stor18[s].field_0] > balanceOf[stor18[s].field_0]:
                        _17024 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 34
                        idx = 0
                        while idx < 34:
                            mem[idx + _17024 + 68] = mem[idx + _16989 + 32]
                            idx = idx + 32
                            continue 
                        mem[_17024 + 100] = mem[_17024 + 130 len 2]
                        revert with memory
                          from mem[64]
                           len _17024 + -mem[64] + 132
                    mem[0] = stor18[s].field_0
                    mem[32] = 32
                    balanceOf[stor18[s].field_0] = 0
                    _17053 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_17053] = 30
                    mem[_17053 + 32] = 'SafeMath: subtraction overflow'
                    if balanceOf[stor18[s].field_0] > _totalSupply:
                        _17093 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 30
                        idx = 0
                        while idx < 30:
                            mem[idx + _17093 + 68] = mem[idx + _17053 + 32]
                            idx = idx + 32
                            continue 
                        mem[_17093 + 68] = mem[_17093 + 70 len 30]
                        revert with memory
                          from mem[64]
                           len _17093 + -mem[64] + 100
                    _totalSupply -= balanceOf[stor18[s].field_0]
                    emit Transfer(balanceOf[stor18[s].field_0], stor18[s].field_0, 0);
                    stor25 -= ext_call.return_data[0]
                    sub_a14ed18a -= ext_call.return_data[0]
                    if ext_call.return_data[0] <= stor31[stor18[s].field_0].field_256:
                        sub_2445aefb--
                        mem[0] = stor18[s].field_0
                        mem[32] = 31
                        _17206 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_17206] = 30
                        mem[_17206 + 32] = 'SafeMath: subtraction overflow'
                        if stor31[stor18[s].field_0].field_256 > stor19:
                            _17258 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[idx + _17258 + 68] = mem[idx + _17206 + 32]
                                idx = idx + 32
                                continue 
                            mem[_17258 + 68] = mem[_17258 + 70 len 30]
                            revert with memory
                              from mem[64]
                               len _17258 + -mem[64] + 100
                        stor19 -= stor31[stor18[s].field_0].field_256
                        _17348 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_17348] = 30
                        mem[_17348 + 32] = 'SafeMath: subtraction overflow'
                        if balanceOf[stor18[s].field_0] > stor20:
                            _17436 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[idx + _17436 + 68] = mem[idx + _17348 + 32]
                                idx = idx + 32
                                continue 
                            mem[_17436 + 68] = mem[_17436 + 70 len 30]
                            revert with memory
                              from mem[64]
                               len _17436 + -mem[64] + 100
                        stor20 -= balanceOf[stor18[s].field_0]
                        mem[0] = stor18[s].field_0
                        stor21[stor18[s].field_0] = 0
                        mem[32] = 31
                        _17582 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_17582] = 30
                        mem[_17582 + 32] = 'SafeMath: subtraction overflow'
                        if stor31[stor18[s].field_0].field_256 > stor8:
                            _17682 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[idx + _17682 + 68] = mem[idx + _17582 + 32]
                                idx = idx + 32
                                continue 
                            mem[_17682 + 68] = mem[_17682 + 70 len 30]
                            revert with memory
                              from mem[64]
                               len _17682 + -mem[64] + 100
                        stor8 -= stor31[stor18[s].field_0].field_256
                        mem[0] = stor18[s].field_0
                        mem[32] = 31
                        _17838 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_17838] = 30
                        mem[_17838 + 32] = 'SafeMath: subtraction overflow'
                        if stor31[stor18[s].field_0].field_512 > stor9:
                            _17926 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[idx + _17926 + 68] = mem[idx + _17838 + 32]
                                idx = idx + 32
                                continue 
                            mem[_17926 + 68] = mem[_17926 + 70 len 30]
                            revert with memory
                              from mem[64]
                               len _17926 + -mem[64] + 100
                        stor9 -= stor31[stor18[s].field_0].field_512
                        mem[0] = stor18[s].field_0
                        mem[32] = 31
                        stor31[stor18[s].field_0].field_256 = 0
                        stor31[stor18[s].field_0].field_512 = 0
                        stor31[stor18[s].field_0].field_0 = 0
                        stor10--
                        investorCount--
                        _18182 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_18182] = 26
                        mem[_18182 + 32] = 'SafeMath: division by zero'
                        _18772 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_18772] = 30
                        mem[_18772 + 32] = 'SafeMath: subtraction overflow'
                        if 0 > ext_call.return_data[0]:
                            _19040 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[idx + _19040 + 68] = mem[idx + _18772 + 32]
                                idx = idx + 32
                                continue 
                            mem[_19040 + 68] = mem[_19040 + 70 len 30]
                            revert with memory
                              from mem[64]
                               len _19040 + -mem[64] + 100
                        require ext_code.size(tokenAddress)
                        staticcall tokenAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args address(this.address)
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] <= 95 * ext_call.return_data[0] / 100:
                            revert with 0, 'pool doesnot have enough balance'
                        require ext_code.size(tokenAddress)
                        staticcall tokenAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] > ext_call.return_data[0]:
                            require ext_code.size(tokenAddress)
                            staticcall tokenAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                        mem[mem[64] + 4] = stor18[s].field_0
                        mem[mem[64] + 36] = ext_call.return_data[0]
                        require ext_code.size(tokenAddress)
                        call tokenAddress.0xa9059cbb with:
                             gas gas_remaining wei
                            args stor18[s].field_0, ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_call.return_data[0]
                        mem[mem[64]] = ext_call.return_data[0]
                        emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                    else:
                        mem[0] = stor18[s].field_0
                        mem[32] = 31
                        if not ext_call.return_data[0] - stor31[stor18[s].field_0].field_256:
                            sub_2445aefb--
                            mem[0] = stor18[s].field_0
                            mem[32] = 31
                            _17205 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_17205] = 30
                            mem[_17205 + 32] = 'SafeMath: subtraction overflow'
                            if stor31[stor18[s].field_0].field_256 > stor19:
                                _17255 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[idx + _17255 + 68] = mem[idx + _17205 + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_17255 + 68] = mem[_17255 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _17255 + -mem[64] + 100
                            stor19 -= stor31[stor18[s].field_0].field_256
                            _17344 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_17344] = 30
                            mem[_17344 + 32] = 'SafeMath: subtraction overflow'
                            if balanceOf[stor18[s].field_0] > stor20:
                                _17433 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[idx + _17433 + 68] = mem[idx + _17344 + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_17433 + 68] = mem[_17433 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _17433 + -mem[64] + 100
                            stor20 -= balanceOf[stor18[s].field_0]
                            mem[0] = stor18[s].field_0
                            stor21[stor18[s].field_0] = 0
                            mem[32] = 31
                            _17577 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_17577] = 30
                            mem[_17577 + 32] = 'SafeMath: subtraction overflow'
                            if stor31[stor18[s].field_0].field_256 > stor8:
                                _17677 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[idx + _17677 + 68] = mem[idx + _17577 + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_17677 + 68] = mem[_17677 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _17677 + -mem[64] + 100
                            stor8 -= stor31[stor18[s].field_0].field_256
                            mem[0] = stor18[s].field_0
                            mem[32] = 31
                            _17834 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_17834] = 30
                            mem[_17834 + 32] = 'SafeMath: subtraction overflow'
                            if stor31[stor18[s].field_0].field_512 > stor9:
                                _17922 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[idx + _17922 + 68] = mem[idx + _17834 + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_17922 + 68] = mem[_17922 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _17922 + -mem[64] + 100
                            stor9 -= stor31[stor18[s].field_0].field_512
                            mem[0] = stor18[s].field_0
                            mem[32] = 31
                            stor31[stor18[s].field_0].field_256 = 0
                            stor31[stor18[s].field_0].field_512 = 0
                            stor31[stor18[s].field_0].field_0 = 0
                            stor10--
                            investorCount--
                            if not ext_call.return_data[0] - stor31[stor18[s].field_0].field_256:
                                _18177 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_18177] = 26
                                mem[_18177 + 32] = 'SafeMath: division by zero'
                                _18760 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_18760] = 30
                                mem[_18760 + 32] = 'SafeMath: subtraction overflow'
                                if 0 > ext_call.return_data[0]:
                                    _19022 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[idx + _19022 + 68] = mem[idx + _18760 + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_19022 + 68] = mem[_19022 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _19022 + -mem[64] + 100
                                require ext_code.size(tokenAddress)
                                staticcall tokenAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args address(this.address)
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] <= 95 * ext_call.return_data[0] / 100:
                                    revert with 0, 'pool doesnot have enough balance'
                                require ext_code.size(tokenAddress)
                                staticcall tokenAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] > ext_call.return_data[0]:
                                    require ext_code.size(tokenAddress)
                                    staticcall tokenAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                mem[mem[64] + 4] = stor18[s].field_0
                                mem[mem[64] + 36] = ext_call.return_data[0]
                                require ext_code.size(tokenAddress)
                                call tokenAddress.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args stor18[s].field_0, ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_call.return_data[0]
                                mem[mem[64]] = ext_call.return_data[0]
                                emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                            else:
                                if (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / ext_call.return_data[0] - stor31[stor18[s].field_0].field_256 != uint16(teamRewardFee + farmerRewardFee):
                                    revert with 0, 32, 33, 0x1f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                _18257 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_18257] = 26
                                mem[_18257 + 32] = 'SafeMath: division by zero'
                                _18891 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_18891] = 30
                                mem[_18891 + 32] = 'SafeMath: subtraction overflow'
                                if (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000 > ext_call.return_data[0]:
                                    _19188 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[idx + _19188 + 68] = mem[idx + _18891 + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_19188 + 68] = mem[_19188 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _19188 + -mem[64] + 100
                                require ext_code.size(tokenAddress)
                                staticcall tokenAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args address(this.address)
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] <= (95 * ext_call.return_data[0]) - (95 * (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) / 100:
                                    revert with 0, 'pool doesnot have enough balance'
                                require ext_code.size(tokenAddress)
                                staticcall tokenAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) <= ext_call.return_data[0]:
                                    mem[mem[64] + 4] = stor18[s].field_0
                                    mem[mem[64] + 36] = ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                    require ext_code.size(tokenAddress)
                                    call tokenAddress.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args stor18[s].field_0, ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_call.return_data[0]
                                    mem[mem[64]] = ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                    emit Withdraw((ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)), stor18[s].field_0);
                                else:
                                    require ext_code.size(tokenAddress)
                                    staticcall tokenAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[mem[64] + 4] = stor18[s].field_0
                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                    require ext_code.size(tokenAddress)
                                    call tokenAddress.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args stor18[s].field_0, ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_call.return_data[0]
                                    mem[mem[64]] = ext_call.return_data[0]
                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                        else:
                            if not ext_call.return_data[0] - stor31[stor18[s].field_0].field_256:
                                _17313 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_17313] = 26
                                mem[_17313 + 32] = 'SafeMath: division by zero'
                                require ext_code.size(tokenAddress)
                                staticcall tokenAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args address(this.address)
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if 0 > ext_call.return_data[0]:
                                    mem[0] = stor18[s].field_0
                                    emit 0x658fe604: 0, farmerAddress
                                    if not ext_call.return_data[0] - stor31[stor18[s].field_0].field_256:
                                        _17986 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_17986] = 26
                                        mem[_17986 + 32] = 'SafeMath: division by zero'
                                        require ext_code.size(tokenAddress)
                                        staticcall tokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(this.address)
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if 0 > ext_call.return_data[0]:
                                            emit 0x658fe604: 0, stor4
                                            sub_2445aefb--
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _18897 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_18897] = 30
                                            mem[_18897 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor19:
                                                _19200 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _19200 + 68] = mem[idx + _18897 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_19200 + 68] = mem[_19200 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _19200 + -mem[64] + 100
                                            stor19 -= stor31[stor18[s].field_0].field_256
                                            _19740 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_19740] = 30
                                            mem[_19740 + 32] = 'SafeMath: subtraction overflow'
                                            if balanceOf[stor18[s].field_0] > stor20:
                                                _20172 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _20172 + 68] = mem[idx + _19740 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_20172 + 68] = mem[_20172 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _20172 + -mem[64] + 100
                                            stor20 -= balanceOf[stor18[s].field_0]
                                            mem[0] = stor18[s].field_0
                                            stor21[stor18[s].field_0] = 0
                                            mem[32] = 31
                                            _20855 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_20855] = 30
                                            mem[_20855 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor8:
                                                _21474 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _21474 + 68] = mem[idx + _20855 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_21474 + 68] = mem[_21474 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _21474 + -mem[64] + 100
                                            stor8 -= stor31[stor18[s].field_0].field_256
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _22251 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_22251] = 30
                                            mem[_22251 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_512 > stor9:
                                                _22815 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _22815 + 68] = mem[idx + _22251 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_22815 + 68] = mem[_22815 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _22815 + -mem[64] + 100
                                            stor9 -= stor31[stor18[s].field_0].field_512
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            stor31[stor18[s].field_0].field_256 = 0
                                            stor31[stor18[s].field_0].field_512 = 0
                                            stor31[stor18[s].field_0].field_0 = 0
                                            stor10--
                                            investorCount--
                                            if not ext_call.return_data[0] - stor31[stor18[s].field_0].field_256:
                                                _24202 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24202] = 26
                                                mem[_24202 + 32] = 'SafeMath: division by zero'
                                                _24958 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24958] = 30
                                                mem[_24958 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > ext_call.return_data[0]:
                                                    _25207 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _25207 + 68] = mem[idx + _24958 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_25207 + 68] = mem[_25207 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _25207 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= 95 * ext_call.return_data[0] / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] > ext_call.return_data[0]:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                mem[mem[64] + 4] = stor18[s].field_0
                                                mem[mem[64] + 36] = ext_call.return_data[0]
                                                require ext_code.size(tokenAddress)
                                                call tokenAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args stor18[s].field_0, ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                require ext_call.return_data[0]
                                                mem[mem[64]] = ext_call.return_data[0]
                                                emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                            else:
                                                if (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / ext_call.return_data[0] - stor31[stor18[s].field_0].field_256 != uint16(teamRewardFee + farmerRewardFee):
                                                    revert with 0, 32, 33, 0x1f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _24376 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24376] = 26
                                                mem[_24376 + 32] = 'SafeMath: division by zero'
                                                _25072 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_25072] = 30
                                                mem[_25072 + 32] = 'SafeMath: subtraction overflow'
                                                if (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000 > ext_call.return_data[0]:
                                                    _25390 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _25390 + 68] = mem[idx + _25072 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_25390 + 68] = mem[_25390 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _25390 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= (95 * ext_call.return_data[0]) - (95 * (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    emit Withdraw((ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                        else:
                                            require ext_code.size(tokenAddress)
                                            call tokenAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args stor4, 0
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0]
                                            sub_2445aefb--
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _19574 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_19574] = 30
                                            mem[_19574 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor19:
                                                _19928 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _19928 + 68] = mem[idx + _19574 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_19928 + 68] = mem[_19928 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _19928 + -mem[64] + 100
                                            stor19 -= stor31[stor18[s].field_0].field_256
                                            _20622 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_20622] = 30
                                            mem[_20622 + 32] = 'SafeMath: subtraction overflow'
                                            if balanceOf[stor18[s].field_0] > stor20:
                                                _21163 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _21163 + 68] = mem[idx + _20622 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_21163 + 68] = mem[_21163 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _21163 + -mem[64] + 100
                                            stor20 -= balanceOf[stor18[s].field_0]
                                            mem[0] = stor18[s].field_0
                                            stor21[stor18[s].field_0] = 0
                                            mem[32] = 31
                                            _21962 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_21962] = 30
                                            mem[_21962 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor8:
                                                _22555 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _22555 + 68] = mem[idx + _21962 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_22555 + 68] = mem[_22555 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _22555 + -mem[64] + 100
                                            stor8 -= stor31[stor18[s].field_0].field_256
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _23247 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_23247] = 30
                                            mem[_23247 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_512 > stor9:
                                                _23713 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _23713 + 68] = mem[idx + _23247 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_23713 + 68] = mem[_23713 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _23713 + -mem[64] + 100
                                            stor9 -= stor31[stor18[s].field_0].field_512
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            stor31[stor18[s].field_0].field_256 = 0
                                            stor31[stor18[s].field_0].field_512 = 0
                                            stor31[stor18[s].field_0].field_0 = 0
                                            stor10--
                                            investorCount--
                                            if not ext_call.return_data[0] - stor31[stor18[s].field_0].field_256:
                                                _24715 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24715] = 26
                                                mem[_24715 + 32] = 'SafeMath: division by zero'
                                                _25608 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_25608] = 30
                                                mem[_25608 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > ext_call.return_data[0]:
                                                    _26160 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _26160 + 68] = mem[idx + _25608 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_26160 + 68] = mem[_26160 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _26160 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= 95 * ext_call.return_data[0] / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] > ext_call.return_data[0]:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                mem[mem[64] + 4] = stor18[s].field_0
                                                mem[mem[64] + 36] = ext_call.return_data[0]
                                                require ext_code.size(tokenAddress)
                                                call tokenAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args stor18[s].field_0, ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                require ext_call.return_data[0]
                                                mem[mem[64]] = ext_call.return_data[0]
                                                emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                            else:
                                                if (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / ext_call.return_data[0] - stor31[stor18[s].field_0].field_256 != uint16(teamRewardFee + farmerRewardFee):
                                                    revert with 0, 32, 33, 0x1f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _24835 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24835] = 26
                                                mem[_24835 + 32] = 'SafeMath: division by zero'
                                                _25860 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_25860] = 30
                                                mem[_25860 + 32] = 'SafeMath: subtraction overflow'
                                                if (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000 > ext_call.return_data[0]:
                                                    _26496 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _26496 + 68] = mem[idx + _25860 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_26496 + 68] = mem[_26496 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _26496 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= (95 * ext_call.return_data[0]) - (95 * (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    emit Withdraw((ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                    else:
                                        if (ext_call.return_data[0] * teamRewardFee) - (stor31[stor18[s].field_0].field_256 * teamRewardFee) / ext_call.return_data[0] - stor31[stor18[s].field_0].field_256 != teamRewardFee:
                                            revert with 0, 32, 33, 0x1f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _18034 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_18034] = 26
                                        mem[_18034 + 32] = 'SafeMath: division by zero'
                                        require ext_code.size(tokenAddress)
                                        staticcall tokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(this.address)
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if (ext_call.return_data[0] * teamRewardFee) - (stor31[stor18[s].field_0].field_256 * teamRewardFee) / 10000 > ext_call.return_data[0]:
                                            emit 0x658fe604: ((ext_call.return_data[0] * teamRewardFee) - (stor31[stor18[s].field_0].field_256 * teamRewardFee) / 10000), stor4
                                            sub_2445aefb--
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _19031 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_19031] = 30
                                            mem[_19031 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor19:
                                                _19386 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _19386 + 68] = mem[idx + _19031 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_19386 + 68] = mem[_19386 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _19386 + -mem[64] + 100
                                            stor19 -= stor31[stor18[s].field_0].field_256
                                            _19924 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_19924] = 30
                                            mem[_19924 + 32] = 'SafeMath: subtraction overflow'
                                            if balanceOf[stor18[s].field_0] > stor20:
                                                _20422 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _20422 + 68] = mem[idx + _19924 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_20422 + 68] = mem[_20422 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _20422 + -mem[64] + 100
                                            stor20 -= balanceOf[stor18[s].field_0]
                                            mem[0] = stor18[s].field_0
                                            stor21[stor18[s].field_0] = 0
                                            mem[32] = 31
                                            _21158 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_21158] = 30
                                            mem[_21158 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor8:
                                                _21714 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _21714 + 68] = mem[idx + _21158 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_21714 + 68] = mem[_21714 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _21714 + -mem[64] + 100
                                            stor8 -= stor31[stor18[s].field_0].field_256
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _22550 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_22550] = 30
                                            mem[_22550 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_512 > stor9:
                                                _23035 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _23035 + 68] = mem[idx + _22550 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_23035 + 68] = mem[_23035 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _23035 + -mem[64] + 100
                                            stor9 -= stor31[stor18[s].field_0].field_512
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            stor31[stor18[s].field_0].field_256 = 0
                                            stor31[stor18[s].field_0].field_512 = 0
                                            stor31[stor18[s].field_0].field_0 = 0
                                            stor10--
                                            investorCount--
                                            if not ext_call.return_data[0] - stor31[stor18[s].field_0].field_256:
                                                _24373 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24373] = 26
                                                mem[_24373 + 32] = 'SafeMath: division by zero'
                                                _25071 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_25071] = 30
                                                mem[_25071 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > ext_call.return_data[0]:
                                                    _25387 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _25387 + 68] = mem[idx + _25071 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_25387 + 68] = mem[_25387 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _25387 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= 95 * ext_call.return_data[0] / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] > ext_call.return_data[0]:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                mem[mem[64] + 4] = stor18[s].field_0
                                                mem[mem[64] + 36] = ext_call.return_data[0]
                                                require ext_code.size(tokenAddress)
                                                call tokenAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args stor18[s].field_0, ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                require ext_call.return_data[0]
                                                mem[mem[64]] = ext_call.return_data[0]
                                                emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                            else:
                                                if (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / ext_call.return_data[0] - stor31[stor18[s].field_0].field_256 != uint16(teamRewardFee + farmerRewardFee):
                                                    revert with 0, 32, 33, 0x1f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _24525 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24525] = 26
                                                mem[_24525 + 32] = 'SafeMath: division by zero'
                                                _25206 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_25206] = 30
                                                mem[_25206 + 32] = 'SafeMath: subtraction overflow'
                                                if (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000 > ext_call.return_data[0]:
                                                    _25602 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _25602 + 68] = mem[idx + _25206 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_25602 + 68] = mem[_25602 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _25602 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= (95 * ext_call.return_data[0]) - (95 * (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    emit Withdraw((ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                        else:
                                            require ext_code.size(tokenAddress)
                                            call tokenAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args stor4, (ext_call.return_data[0] * teamRewardFee) - (stor31[stor18[s].field_0].field_256 * teamRewardFee) / 10000
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0]
                                            sub_2445aefb--
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _19739 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_19739] = 30
                                            mem[_19739 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor19:
                                                _20169 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _20169 + 68] = mem[idx + _19739 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_20169 + 68] = mem[_20169 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _20169 + -mem[64] + 100
                                            stor19 -= stor31[stor18[s].field_0].field_256
                                            _20852 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_20852] = 30
                                            mem[_20852 + 32] = 'SafeMath: subtraction overflow'
                                            if balanceOf[stor18[s].field_0] > stor20:
                                                _21471 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _21471 + 68] = mem[idx + _20852 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_21471 + 68] = mem[_21471 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _21471 + -mem[64] + 100
                                            stor20 -= balanceOf[stor18[s].field_0]
                                            mem[0] = stor18[s].field_0
                                            stor21[stor18[s].field_0] = 0
                                            mem[32] = 31
                                            _22248 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_22248] = 30
                                            mem[_22248 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor8:
                                                _22812 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _22812 + 68] = mem[idx + _22248 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_22812 + 68] = mem[_22812 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _22812 + -mem[64] + 100
                                            stor8 -= stor31[stor18[s].field_0].field_256
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _23475 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_23475] = 30
                                            mem[_23475 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_512 > stor9:
                                                _23911 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _23911 + 68] = mem[idx + _23475 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_23911 + 68] = mem[_23911 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _23911 + -mem[64] + 100
                                            stor9 -= stor31[stor18[s].field_0].field_512
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            stor31[stor18[s].field_0].field_256 = 0
                                            stor31[stor18[s].field_0].field_512 = 0
                                            stor31[stor18[s].field_0].field_0 = 0
                                            stor10--
                                            investorCount--
                                            if not ext_call.return_data[0] - stor31[stor18[s].field_0].field_256:
                                                _24834 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24834] = 26
                                                mem[_24834 + 32] = 'SafeMath: division by zero'
                                                _25854 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_25854] = 30
                                                mem[_25854 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > ext_call.return_data[0]:
                                                    _26490 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _26490 + 68] = mem[idx + _25854 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_26490 + 68] = mem[_26490 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _26490 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= 95 * ext_call.return_data[0] / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] > ext_call.return_data[0]:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                mem[mem[64] + 4] = stor18[s].field_0
                                                mem[mem[64] + 36] = ext_call.return_data[0]
                                                require ext_code.size(tokenAddress)
                                                call tokenAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args stor18[s].field_0, ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                require ext_call.return_data[0]
                                                mem[mem[64]] = ext_call.return_data[0]
                                                emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                            else:
                                                if (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / ext_call.return_data[0] - stor31[stor18[s].field_0].field_256 != uint16(teamRewardFee + farmerRewardFee):
                                                    revert with 0, 32, 33, 0x1f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _24957 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24957] = 26
                                                mem[_24957 + 32] = 'SafeMath: division by zero'
                                                _26155 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_26155] = 30
                                                mem[_26155 + 32] = 'SafeMath: subtraction overflow'
                                                if (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000 > ext_call.return_data[0]:
                                                    _26843 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _26843 + 68] = mem[idx + _26155 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_26843 + 68] = mem[_26843 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _26843 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= (95 * ext_call.return_data[0]) - (95 * (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    emit Withdraw((ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                else:
                                    require ext_code.size(tokenAddress)
                                    call tokenAddress.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args farmerAddress, 0
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_call.return_data[0]
                                    if not ext_call.return_data[0] - stor31[stor18[s].field_0].field_256:
                                        _18132 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_18132] = 26
                                        mem[_18132 + 32] = 'SafeMath: division by zero'
                                        require ext_code.size(tokenAddress)
                                        staticcall tokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(this.address)
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if 0 > ext_call.return_data[0]:
                                            emit 0x658fe604: 0, stor4
                                            sub_2445aefb--
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _19577 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_19577] = 30
                                            mem[_19577 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor19:
                                                _19931 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _19931 + 68] = mem[idx + _19577 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_19931 + 68] = mem[_19931 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _19931 + -mem[64] + 100
                                            stor19 -= stor31[stor18[s].field_0].field_256
                                            _20627 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_20627] = 30
                                            mem[_20627 + 32] = 'SafeMath: subtraction overflow'
                                            if balanceOf[stor18[s].field_0] > stor20:
                                                _21170 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _21170 + 68] = mem[idx + _20627 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_21170 + 68] = mem[_21170 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _21170 + -mem[64] + 100
                                            stor20 -= balanceOf[stor18[s].field_0]
                                            mem[0] = stor18[s].field_0
                                            stor21[stor18[s].field_0] = 0
                                            mem[32] = 31
                                            _21971 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_21971] = 30
                                            mem[_21971 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor8:
                                                _22562 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _22562 + 68] = mem[idx + _21971 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_22562 + 68] = mem[_22562 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _22562 + -mem[64] + 100
                                            stor8 -= stor31[stor18[s].field_0].field_256
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _23255 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_23255] = 30
                                            mem[_23255 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_512 > stor9:
                                                _23720 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _23720 + 68] = mem[idx + _23255 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_23720 + 68] = mem[_23720 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _23720 + -mem[64] + 100
                                            stor9 -= stor31[stor18[s].field_0].field_512
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            stor31[stor18[s].field_0].field_256 = 0
                                            stor31[stor18[s].field_0].field_512 = 0
                                            stor31[stor18[s].field_0].field_0 = 0
                                            stor10--
                                            investorCount--
                                            if not ext_call.return_data[0] - stor31[stor18[s].field_0].field_256:
                                                _24720 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24720] = 26
                                                mem[_24720 + 32] = 'SafeMath: division by zero'
                                                _25610 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_25610] = 30
                                                mem[_25610 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > ext_call.return_data[0]:
                                                    _26164 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _26164 + 68] = mem[idx + _25610 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_26164 + 68] = mem[_26164 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _26164 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= 95 * ext_call.return_data[0] / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] > ext_call.return_data[0]:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                mem[mem[64] + 4] = stor18[s].field_0
                                                mem[mem[64] + 36] = ext_call.return_data[0]
                                                require ext_code.size(tokenAddress)
                                                call tokenAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args stor18[s].field_0, ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                require ext_call.return_data[0]
                                                mem[mem[64]] = ext_call.return_data[0]
                                                emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                            else:
                                                if (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / ext_call.return_data[0] - stor31[stor18[s].field_0].field_256 != uint16(teamRewardFee + farmerRewardFee):
                                                    revert with 0, 32, 33, 0x1f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _24839 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24839] = 26
                                                mem[_24839 + 32] = 'SafeMath: division by zero'
                                                _25862 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_25862] = 30
                                                mem[_25862 + 32] = 'SafeMath: subtraction overflow'
                                                if (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000 > ext_call.return_data[0]:
                                                    _26502 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _26502 + 68] = mem[idx + _25862 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_26502 + 68] = mem[_26502 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _26502 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= (95 * ext_call.return_data[0]) - (95 * (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    emit Withdraw((ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                        else:
                                            require ext_code.size(tokenAddress)
                                            call tokenAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args stor4, 0
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0]
                                            sub_2445aefb--
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _20428 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_20428] = 30
                                            mem[_20428 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor19:
                                                _20863 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _20863 + 68] = mem[idx + _20428 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_20863 + 68] = mem[_20863 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _20863 + -mem[64] + 100
                                            stor19 -= stor31[stor18[s].field_0].field_256
                                            _21724 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_21724] = 30
                                            mem[_21724 + 32] = 'SafeMath: subtraction overflow'
                                            if balanceOf[stor18[s].field_0] > stor20:
                                                _22260 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _22260 + 68] = mem[idx + _21724 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_22260 + 68] = mem[_22260 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _22260 + -mem[64] + 100
                                            stor20 -= balanceOf[stor18[s].field_0]
                                            mem[0] = stor18[s].field_0
                                            stor21[stor18[s].field_0] = 0
                                            mem[32] = 31
                                            _23045 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_23045] = 30
                                            mem[_23045 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor8:
                                                _23486 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _23486 + 68] = mem[idx + _23045 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_23486 + 68] = mem[_23486 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _23486 + -mem[64] + 100
                                            stor8 -= stor31[stor18[s].field_0].field_256
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _24062 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_24062] = 30
                                            mem[_24062 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_512 > stor9:
                                                _24382 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _24382 + 68] = mem[idx + _24062 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_24382 + 68] = mem[_24382 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _24382 + -mem[64] + 100
                                            stor9 -= stor31[stor18[s].field_0].field_512
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            stor31[stor18[s].field_0].field_256 = 0
                                            stor31[stor18[s].field_0].field_512 = 0
                                            stor31[stor18[s].field_0].field_0 = 0
                                            stor10--
                                            investorCount--
                                            if not ext_call.return_data[0] - stor31[stor18[s].field_0].field_256:
                                                _25212 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_25212] = 26
                                                mem[_25212 + 32] = 'SafeMath: division by zero'
                                                _26860 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_26860] = 30
                                                mem[_26860 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > ext_call.return_data[0]:
                                                    _27718 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _27718 + 68] = mem[idx + _26860 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_27718 + 68] = mem[_27718 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _27718 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= 95 * ext_call.return_data[0] / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] > ext_call.return_data[0]:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                mem[mem[64] + 4] = stor18[s].field_0
                                                mem[mem[64] + 36] = ext_call.return_data[0]
                                                require ext_code.size(tokenAddress)
                                                call tokenAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args stor18[s].field_0, ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                require ext_call.return_data[0]
                                                mem[mem[64]] = ext_call.return_data[0]
                                                emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                            else:
                                                if (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / ext_call.return_data[0] - stor31[stor18[s].field_0].field_256 != uint16(teamRewardFee + farmerRewardFee):
                                                    revert with 0, 32, 33, 0x1f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _25394 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_25394] = 26
                                                mem[_25394 + 32] = 'SafeMath: division by zero'
                                                _27268 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_27268] = 30
                                                mem[_27268 + 32] = 'SafeMath: subtraction overflow'
                                                if (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000 > ext_call.return_data[0]:
                                                    _28134 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _28134 + 68] = mem[idx + _27268 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_28134 + 68] = mem[_28134 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _28134 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= (95 * ext_call.return_data[0]) - (95 * (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    emit Withdraw((ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                    else:
                                        if (ext_call.return_data[0] * teamRewardFee) - (stor31[stor18[s].field_0].field_256 * teamRewardFee) / ext_call.return_data[0] - stor31[stor18[s].field_0].field_256 != teamRewardFee:
                                            revert with 0, 32, 33, 0x1f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _18181 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_18181] = 26
                                        mem[_18181 + 32] = 'SafeMath: division by zero'
                                        require ext_code.size(tokenAddress)
                                        staticcall tokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(this.address)
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if (ext_call.return_data[0] * teamRewardFee) - (stor31[stor18[s].field_0].field_256 * teamRewardFee) / 10000 > ext_call.return_data[0]:
                                            emit 0x658fe604: ((ext_call.return_data[0] * teamRewardFee) - (stor31[stor18[s].field_0].field_256 * teamRewardFee) / 10000), stor4
                                            sub_2445aefb--
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _19743 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_19743] = 30
                                            mem[_19743 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor19:
                                                _20175 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _20175 + 68] = mem[idx + _19743 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_20175 + 68] = mem[_20175 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _20175 + -mem[64] + 100
                                            stor19 -= stor31[stor18[s].field_0].field_256
                                            _20859 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_20859] = 30
                                            mem[_20859 + 32] = 'SafeMath: subtraction overflow'
                                            if balanceOf[stor18[s].field_0] > stor20:
                                                _21477 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _21477 + 68] = mem[idx + _20859 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_21477 + 68] = mem[_21477 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _21477 + -mem[64] + 100
                                            stor20 -= balanceOf[stor18[s].field_0]
                                            mem[0] = stor18[s].field_0
                                            stor21[stor18[s].field_0] = 0
                                            mem[32] = 31
                                            _22255 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_22255] = 30
                                            mem[_22255 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor8:
                                                _22818 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _22818 + 68] = mem[idx + _22255 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_22818 + 68] = mem[_22818 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _22818 + -mem[64] + 100
                                            stor8 -= stor31[stor18[s].field_0].field_256
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _23481 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_23481] = 30
                                            mem[_23481 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_512 > stor9:
                                                _23914 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _23914 + 68] = mem[idx + _23481 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_23914 + 68] = mem[_23914 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _23914 + -mem[64] + 100
                                            stor9 -= stor31[stor18[s].field_0].field_512
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            stor31[stor18[s].field_0].field_256 = 0
                                            stor31[stor18[s].field_0].field_512 = 0
                                            stor31[stor18[s].field_0].field_0 = 0
                                            stor10--
                                            investorCount--
                                            if not ext_call.return_data[0] - stor31[stor18[s].field_0].field_256:
                                                _24836 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24836] = 26
                                                mem[_24836 + 32] = 'SafeMath: division by zero'
                                                _25861 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_25861] = 30
                                                mem[_25861 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > ext_call.return_data[0]:
                                                    _26499 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _26499 + 68] = mem[idx + _25861 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_26499 + 68] = mem[_26499 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _26499 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= 95 * ext_call.return_data[0] / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] > ext_call.return_data[0]:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                mem[mem[64] + 4] = stor18[s].field_0
                                                mem[mem[64] + 36] = ext_call.return_data[0]
                                                require ext_code.size(tokenAddress)
                                                call tokenAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args stor18[s].field_0, ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                require ext_call.return_data[0]
                                                mem[mem[64]] = ext_call.return_data[0]
                                                emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                            else:
                                                if (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / ext_call.return_data[0] - stor31[stor18[s].field_0].field_256 != uint16(teamRewardFee + farmerRewardFee):
                                                    revert with 0, 32, 33, 0x1f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _24959 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24959] = 26
                                                mem[_24959 + 32] = 'SafeMath: division by zero'
                                                _26163 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_26163] = 30
                                                mem[_26163 + 32] = 'SafeMath: subtraction overflow'
                                                if (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000 > ext_call.return_data[0]:
                                                    _26854 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _26854 + 68] = mem[idx + _26163 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_26854 + 68] = mem[_26854 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _26854 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= (95 * ext_call.return_data[0]) - (95 * (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    emit Withdraw((ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                        else:
                                            require ext_code.size(tokenAddress)
                                            call tokenAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args stor4, (ext_call.return_data[0] * teamRewardFee) - (stor31[stor18[s].field_0].field_256 * teamRewardFee) / 10000
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0]
                                            sub_2445aefb--
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _20626 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_20626] = 30
                                            mem[_20626 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor19:
                                                _21167 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _21167 + 68] = mem[idx + _20626 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_21167 + 68] = mem[_21167 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _21167 + -mem[64] + 100
                                            stor19 -= stor31[stor18[s].field_0].field_256
                                            _21968 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_21968] = 30
                                            mem[_21968 + 32] = 'SafeMath: subtraction overflow'
                                            if balanceOf[stor18[s].field_0] > stor20:
                                                _22559 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _22559 + 68] = mem[idx + _21968 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_22559 + 68] = mem[_22559 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _22559 + -mem[64] + 100
                                            stor20 -= balanceOf[stor18[s].field_0]
                                            mem[0] = stor18[s].field_0
                                            stor21[stor18[s].field_0] = 0
                                            mem[32] = 31
                                            _23252 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_23252] = 30
                                            mem[_23252 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor8:
                                                _23717 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _23717 + 68] = mem[idx + _23252 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_23717 + 68] = mem[_23717 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _23717 + -mem[64] + 100
                                            stor8 -= stor31[stor18[s].field_0].field_256
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _24207 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_24207] = 30
                                            mem[_24207 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_512 > stor9:
                                                _24528 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _24528 + 68] = mem[idx + _24207 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_24528 + 68] = mem[_24528 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _24528 + -mem[64] + 100
                                            stor9 -= stor31[stor18[s].field_0].field_512
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            stor31[stor18[s].field_0].field_256 = 0
                                            stor31[stor18[s].field_0].field_512 = 0
                                            stor31[stor18[s].field_0].field_0 = 0
                                            stor10--
                                            investorCount--
                                            if not ext_call.return_data[0] - stor31[stor18[s].field_0].field_256:
                                                _25393 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_25393] = 26
                                                mem[_25393 + 32] = 'SafeMath: division by zero'
                                                _27262 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_27262] = 30
                                                mem[_27262 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > ext_call.return_data[0]:
                                                    _28128 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _28128 + 68] = mem[idx + _27262 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_28128 + 68] = mem[_28128 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _28128 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= 95 * ext_call.return_data[0] / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] > ext_call.return_data[0]:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                mem[mem[64] + 4] = stor18[s].field_0
                                                mem[mem[64] + 36] = ext_call.return_data[0]
                                                require ext_code.size(tokenAddress)
                                                call tokenAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args stor18[s].field_0, ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                require ext_call.return_data[0]
                                                mem[mem[64]] = ext_call.return_data[0]
                                                emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                            else:
                                                if (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / ext_call.return_data[0] - stor31[stor18[s].field_0].field_256 != uint16(teamRewardFee + farmerRewardFee):
                                                    revert with 0, 32, 33, 0x1f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _25609 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_25609] = 26
                                                mem[_25609 + 32] = 'SafeMath: division by zero'
                                                _27713 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_27713] = 30
                                                mem[_27713 + 32] = 'SafeMath: subtraction overflow'
                                                if (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000 > ext_call.return_data[0]:
                                                    _28520 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _28520 + 68] = mem[idx + _27713 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_28520 + 68] = mem[_28520 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _28520 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= (95 * ext_call.return_data[0]) - (95 * (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    emit Withdraw((ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                            else:
                                if (ext_call.return_data[0] * farmerRewardFee) - (stor31[stor18[s].field_0].field_256 * farmerRewardFee) / ext_call.return_data[0] - stor31[stor18[s].field_0].field_256 != farmerRewardFee:
                                    revert with 0, 32, 33, 0x1f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                _17347 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_17347] = 26
                                mem[_17347 + 32] = 'SafeMath: division by zero'
                                require ext_code.size(tokenAddress)
                                staticcall tokenAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args address(this.address)
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if (ext_call.return_data[0] * farmerRewardFee) - (stor31[stor18[s].field_0].field_256 * farmerRewardFee) / 10000 > ext_call.return_data[0]:
                                    mem[0] = stor18[s].field_0
                                    emit 0x658fe604: ((ext_call.return_data[0] * farmerRewardFee) - (stor31[stor18[s].field_0].field_256 * farmerRewardFee) / 10000), farmerAddress
                                    if not ext_call.return_data[0] - stor31[stor18[s].field_0].field_256:
                                        _18033 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_18033] = 26
                                        mem[_18033 + 32] = 'SafeMath: division by zero'
                                        require ext_code.size(tokenAddress)
                                        staticcall tokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(this.address)
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if 0 > ext_call.return_data[0]:
                                            emit 0x658fe604: 0, stor4
                                            sub_2445aefb--
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _19027 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_19027] = 30
                                            mem[_19027 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor19:
                                                _19377 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _19377 + 68] = mem[idx + _19027 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_19377 + 68] = mem[_19377 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _19377 + -mem[64] + 100
                                            stor19 -= stor31[stor18[s].field_0].field_256
                                            _19919 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_19919] = 30
                                            mem[_19919 + 32] = 'SafeMath: subtraction overflow'
                                            if balanceOf[stor18[s].field_0] > stor20:
                                                _20415 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _20415 + 68] = mem[idx + _19919 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_20415 + 68] = mem[_20415 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _20415 + -mem[64] + 100
                                            stor20 -= balanceOf[stor18[s].field_0]
                                            mem[0] = stor18[s].field_0
                                            stor21[stor18[s].field_0] = 0
                                            mem[32] = 31
                                            _21147 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_21147] = 30
                                            mem[_21147 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor8:
                                                _21707 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _21707 + 68] = mem[idx + _21147 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_21707 + 68] = mem[_21707 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _21707 + -mem[64] + 100
                                            stor8 -= stor31[stor18[s].field_0].field_256
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _22538 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_22538] = 30
                                            mem[_22538 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_512 > stor9:
                                                _23026 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _23026 + 68] = mem[idx + _22538 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_23026 + 68] = mem[_23026 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _23026 + -mem[64] + 100
                                            stor9 -= stor31[stor18[s].field_0].field_512
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            stor31[stor18[s].field_0].field_256 = 0
                                            stor31[stor18[s].field_0].field_512 = 0
                                            stor31[stor18[s].field_0].field_0 = 0
                                            stor10--
                                            investorCount--
                                            if not ext_call.return_data[0] - stor31[stor18[s].field_0].field_256:
                                                _24362 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24362] = 26
                                                mem[_24362 + 32] = 'SafeMath: division by zero'
                                                _25068 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_25068] = 30
                                                mem[_25068 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > ext_call.return_data[0]:
                                                    _25381 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _25381 + 68] = mem[idx + _25068 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_25381 + 68] = mem[_25381 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _25381 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= 95 * ext_call.return_data[0] / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] > ext_call.return_data[0]:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                mem[mem[64] + 4] = stor18[s].field_0
                                                mem[mem[64] + 36] = ext_call.return_data[0]
                                                require ext_code.size(tokenAddress)
                                                call tokenAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args stor18[s].field_0, ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                require ext_call.return_data[0]
                                                mem[mem[64]] = ext_call.return_data[0]
                                                emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                            else:
                                                if (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / ext_call.return_data[0] - stor31[stor18[s].field_0].field_256 != uint16(teamRewardFee + farmerRewardFee):
                                                    revert with 0, 32, 33, 0x1f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _24516 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24516] = 26
                                                mem[_24516 + 32] = 'SafeMath: division by zero'
                                                _25203 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_25203] = 30
                                                mem[_25203 + 32] = 'SafeMath: subtraction overflow'
                                                if (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000 > ext_call.return_data[0]:
                                                    _25597 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _25597 + 68] = mem[idx + _25203 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_25597 + 68] = mem[_25597 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _25597 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= (95 * ext_call.return_data[0]) - (95 * (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    emit Withdraw((ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                        else:
                                            require ext_code.size(tokenAddress)
                                            call tokenAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args stor4, 0
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0]
                                            sub_2445aefb--
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _19733 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_19733] = 30
                                            mem[_19733 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor19:
                                                _20162 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _20162 + 68] = mem[idx + _19733 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_20162 + 68] = mem[_20162 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _20162 + -mem[64] + 100
                                            stor19 -= stor31[stor18[s].field_0].field_256
                                            _20841 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_20841] = 30
                                            mem[_20841 + 32] = 'SafeMath: subtraction overflow'
                                            if balanceOf[stor18[s].field_0] > stor20:
                                                _21460 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _21460 + 68] = mem[idx + _20841 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_21460 + 68] = mem[_21460 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _21460 + -mem[64] + 100
                                            stor20 -= balanceOf[stor18[s].field_0]
                                            mem[0] = stor18[s].field_0
                                            stor21[stor18[s].field_0] = 0
                                            mem[32] = 31
                                            _22233 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_22233] = 30
                                            mem[_22233 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor8:
                                                _22801 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _22801 + 68] = mem[idx + _22233 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_22801 + 68] = mem[_22801 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _22801 + -mem[64] + 100
                                            stor8 -= stor31[stor18[s].field_0].field_256
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _23461 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_23461] = 30
                                            mem[_23461 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_512 > stor9:
                                                _23900 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _23900 + 68] = mem[idx + _23461 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_23900 + 68] = mem[_23900 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _23900 + -mem[64] + 100
                                            stor9 -= stor31[stor18[s].field_0].field_512
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            stor31[stor18[s].field_0].field_256 = 0
                                            stor31[stor18[s].field_0].field_512 = 0
                                            stor31[stor18[s].field_0].field_0 = 0
                                            stor10--
                                            investorCount--
                                            if not ext_call.return_data[0] - stor31[stor18[s].field_0].field_256:
                                                _24826 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24826] = 26
                                                mem[_24826 + 32] = 'SafeMath: division by zero'
                                                _25848 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_25848] = 30
                                                mem[_25848 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > ext_call.return_data[0]:
                                                    _26479 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _26479 + 68] = mem[idx + _25848 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_26479 + 68] = mem[_26479 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _26479 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= 95 * ext_call.return_data[0] / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] > ext_call.return_data[0]:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                mem[mem[64] + 4] = stor18[s].field_0
                                                mem[mem[64] + 36] = ext_call.return_data[0]
                                                require ext_code.size(tokenAddress)
                                                call tokenAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args stor18[s].field_0, ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                require ext_call.return_data[0]
                                                mem[mem[64]] = ext_call.return_data[0]
                                                emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                            else:
                                                if (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / ext_call.return_data[0] - stor31[stor18[s].field_0].field_256 != uint16(teamRewardFee + farmerRewardFee):
                                                    revert with 0, 32, 33, 0x1f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _24951 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24951] = 26
                                                mem[_24951 + 32] = 'SafeMath: division by zero'
                                                _26147 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_26147] = 30
                                                mem[_26147 + 32] = 'SafeMath: subtraction overflow'
                                                if (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000 > ext_call.return_data[0]:
                                                    _26831 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _26831 + 68] = mem[idx + _26147 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_26831 + 68] = mem[_26831 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _26831 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= (95 * ext_call.return_data[0]) - (95 * (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    emit Withdraw((ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                    else:
                                        if (ext_call.return_data[0] * teamRewardFee) - (stor31[stor18[s].field_0].field_256 * teamRewardFee) / ext_call.return_data[0] - stor31[stor18[s].field_0].field_256 != teamRewardFee:
                                            revert with 0, 32, 33, 0x1f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _18077 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_18077] = 26
                                        mem[_18077 + 32] = 'SafeMath: division by zero'
                                        require ext_code.size(tokenAddress)
                                        staticcall tokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(this.address)
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if (ext_call.return_data[0] * teamRewardFee) - (stor31[stor18[s].field_0].field_256 * teamRewardFee) / 10000 > ext_call.return_data[0]:
                                            emit 0x658fe604: ((ext_call.return_data[0] * teamRewardFee) - (stor31[stor18[s].field_0].field_256 * teamRewardFee) / 10000), stor4
                                            sub_2445aefb--
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _19191 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_19191] = 30
                                            mem[_19191 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor19:
                                                _19566 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _19566 + 68] = mem[idx + _19191 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_19566 + 68] = mem[_19566 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _19566 + -mem[64] + 100
                                            stor19 -= stor31[stor18[s].field_0].field_256
                                            _20158 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_20158] = 30
                                            mem[_20158 + 32] = 'SafeMath: subtraction overflow'
                                            if balanceOf[stor18[s].field_0] > stor20:
                                                _20611 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _20611 + 68] = mem[idx + _20158 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_20611 + 68] = mem[_20611 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _20611 + -mem[64] + 100
                                            stor20 -= balanceOf[stor18[s].field_0]
                                            mem[0] = stor18[s].field_0
                                            stor21[stor18[s].field_0] = 0
                                            mem[32] = 31
                                            _21455 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_21455] = 30
                                            mem[_21455 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor8:
                                                _21944 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _21944 + 68] = mem[idx + _21455 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_21944 + 68] = mem[_21944 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _21944 + -mem[64] + 100
                                            stor8 -= stor31[stor18[s].field_0].field_256
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _22796 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_22796] = 30
                                            mem[_22796 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_512 > stor9:
                                                _23230 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _23230 + 68] = mem[idx + _22796 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_23230 + 68] = mem[_23230 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _23230 + -mem[64] + 100
                                            stor9 -= stor31[stor18[s].field_0].field_512
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            stor31[stor18[s].field_0].field_256 = 0
                                            stor31[stor18[s].field_0].field_512 = 0
                                            stor31[stor18[s].field_0].field_0 = 0
                                            stor10--
                                            investorCount--
                                            if not ext_call.return_data[0] - stor31[stor18[s].field_0].field_256:
                                                _24513 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24513] = 26
                                                mem[_24513 + 32] = 'SafeMath: division by zero'
                                                _25202 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_25202] = 30
                                                mem[_25202 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > ext_call.return_data[0]:
                                                    _25594 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _25594 + 68] = mem[idx + _25202 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_25594 + 68] = mem[_25594 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _25594 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= 95 * ext_call.return_data[0] / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] > ext_call.return_data[0]:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                mem[mem[64] + 4] = stor18[s].field_0
                                                mem[mem[64] + 36] = ext_call.return_data[0]
                                                require ext_code.size(tokenAddress)
                                                call tokenAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args stor18[s].field_0, ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                require ext_call.return_data[0]
                                                mem[mem[64]] = ext_call.return_data[0]
                                                emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                            else:
                                                if (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / ext_call.return_data[0] - stor31[stor18[s].field_0].field_256 != uint16(teamRewardFee + farmerRewardFee):
                                                    revert with 0, 32, 33, 0x1f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _24617 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24617] = 26
                                                mem[_24617 + 32] = 'SafeMath: division by zero'
                                                _25380 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_25380] = 30
                                                mem[_25380 + 32] = 'SafeMath: subtraction overflow'
                                                if (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000 > ext_call.return_data[0]:
                                                    _25842 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _25842 + 68] = mem[idx + _25380 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_25842 + 68] = mem[_25842 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _25842 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= (95 * ext_call.return_data[0]) - (95 * (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    emit Withdraw((ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                        else:
                                            require ext_code.size(tokenAddress)
                                            call tokenAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args stor4, (ext_call.return_data[0] * teamRewardFee) - (stor31[stor18[s].field_0].field_256 * teamRewardFee) / 10000
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0]
                                            sub_2445aefb--
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _19918 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_19918] = 30
                                            mem[_19918 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor19:
                                                _20412 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _20412 + 68] = mem[idx + _19918 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_20412 + 68] = mem[_20412 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _20412 + -mem[64] + 100
                                            stor19 -= stor31[stor18[s].field_0].field_256
                                            _21144 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_21144] = 30
                                            mem[_21144 + 32] = 'SafeMath: subtraction overflow'
                                            if balanceOf[stor18[s].field_0] > stor20:
                                                _21704 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _21704 + 68] = mem[idx + _21144 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_21704 + 68] = mem[_21704 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _21704 + -mem[64] + 100
                                            stor20 -= balanceOf[stor18[s].field_0]
                                            mem[0] = stor18[s].field_0
                                            stor21[stor18[s].field_0] = 0
                                            mem[32] = 31
                                            _22535 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_22535] = 30
                                            mem[_22535 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor8:
                                                _23023 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _23023 + 68] = mem[idx + _22535 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_23023 + 68] = mem[_23023 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _23023 + -mem[64] + 100
                                            stor8 -= stor31[stor18[s].field_0].field_256
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _23695 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_23695] = 30
                                            mem[_23695 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_512 > stor9:
                                                _24046 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _24046 + 68] = mem[idx + _23695 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_24046 + 68] = mem[_24046 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _24046 + -mem[64] + 100
                                            stor9 -= stor31[stor18[s].field_0].field_512
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            stor31[stor18[s].field_0].field_256 = 0
                                            stor31[stor18[s].field_0].field_512 = 0
                                            stor31[stor18[s].field_0].field_0 = 0
                                            stor10--
                                            investorCount--
                                            if not ext_call.return_data[0] - stor31[stor18[s].field_0].field_256:
                                                _24950 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24950] = 26
                                                mem[_24950 + 32] = 'SafeMath: division by zero'
                                                _26141 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_26141] = 30
                                                mem[_26141 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > ext_call.return_data[0]:
                                                    _26825 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _26825 + 68] = mem[idx + _26141 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_26825 + 68] = mem[_26825 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _26825 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= 95 * ext_call.return_data[0] / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] > ext_call.return_data[0]:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                mem[mem[64] + 4] = stor18[s].field_0
                                                mem[mem[64] + 36] = ext_call.return_data[0]
                                                require ext_code.size(tokenAddress)
                                                call tokenAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args stor18[s].field_0, ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                require ext_call.return_data[0]
                                                mem[mem[64]] = ext_call.return_data[0]
                                                emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                            else:
                                                if (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / ext_call.return_data[0] - stor31[stor18[s].field_0].field_256 != uint16(teamRewardFee + farmerRewardFee):
                                                    revert with 0, 32, 33, 0x1f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _25067 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_25067] = 26
                                                mem[_25067 + 32] = 'SafeMath: division by zero'
                                                _26474 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_26474] = 30
                                                mem[_26474 + 32] = 'SafeMath: subtraction overflow'
                                                if (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000 > ext_call.return_data[0]:
                                                    _27224 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _27224 + 68] = mem[idx + _26474 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_27224 + 68] = mem[_27224 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _27224 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= (95 * ext_call.return_data[0]) - (95 * (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    emit Withdraw((ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                else:
                                    require ext_code.size(tokenAddress)
                                    call tokenAddress.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args farmerAddress, (ext_call.return_data[0] * farmerRewardFee) - (stor31[stor18[s].field_0].field_256 * farmerRewardFee) / 10000
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_call.return_data[0]
                                    if not ext_call.return_data[0] - stor31[stor18[s].field_0].field_256:
                                        _18178 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_18178] = 26
                                        mem[_18178 + 32] = 'SafeMath: division by zero'
                                        require ext_code.size(tokenAddress)
                                        staticcall tokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(this.address)
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if 0 > ext_call.return_data[0]:
                                            emit 0x658fe604: 0, stor4
                                            sub_2445aefb--
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _19736 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_19736] = 30
                                            mem[_19736 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor19:
                                                _20165 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _20165 + 68] = mem[idx + _19736 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_20165 + 68] = mem[_20165 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _20165 + -mem[64] + 100
                                            stor19 -= stor31[stor18[s].field_0].field_256
                                            _20846 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_20846] = 30
                                            mem[_20846 + 32] = 'SafeMath: subtraction overflow'
                                            if balanceOf[stor18[s].field_0] > stor20:
                                                _21467 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _21467 + 68] = mem[idx + _20846 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_21467 + 68] = mem[_21467 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _21467 + -mem[64] + 100
                                            stor20 -= balanceOf[stor18[s].field_0]
                                            mem[0] = stor18[s].field_0
                                            stor21[stor18[s].field_0] = 0
                                            mem[32] = 31
                                            _22242 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_22242] = 30
                                            mem[_22242 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor8:
                                                _22808 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _22808 + 68] = mem[idx + _22242 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_22808 + 68] = mem[_22808 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _22808 + -mem[64] + 100
                                            stor8 -= stor31[stor18[s].field_0].field_256
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _23469 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_23469] = 30
                                            mem[_23469 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_512 > stor9:
                                                _23907 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _23907 + 68] = mem[idx + _23469 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_23907 + 68] = mem[_23907 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _23907 + -mem[64] + 100
                                            stor9 -= stor31[stor18[s].field_0].field_512
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            stor31[stor18[s].field_0].field_256 = 0
                                            stor31[stor18[s].field_0].field_512 = 0
                                            stor31[stor18[s].field_0].field_0 = 0
                                            stor10--
                                            investorCount--
                                            if not ext_call.return_data[0] - stor31[stor18[s].field_0].field_256:
                                                _24831 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24831] = 26
                                                mem[_24831 + 32] = 'SafeMath: division by zero'
                                                _25850 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_25850] = 30
                                                mem[_25850 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > ext_call.return_data[0]:
                                                    _26483 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _26483 + 68] = mem[idx + _25850 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_26483 + 68] = mem[_26483 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _26483 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= 95 * ext_call.return_data[0] / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] > ext_call.return_data[0]:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                mem[mem[64] + 4] = stor18[s].field_0
                                                mem[mem[64] + 36] = ext_call.return_data[0]
                                                require ext_code.size(tokenAddress)
                                                call tokenAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args stor18[s].field_0, ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                require ext_call.return_data[0]
                                                mem[mem[64]] = ext_call.return_data[0]
                                                emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                            else:
                                                if (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / ext_call.return_data[0] - stor31[stor18[s].field_0].field_256 != uint16(teamRewardFee + farmerRewardFee):
                                                    revert with 0, 32, 33, 0x1f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _24955 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24955] = 26
                                                mem[_24955 + 32] = 'SafeMath: division by zero'
                                                _26149 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_26149] = 30
                                                mem[_26149 + 32] = 'SafeMath: subtraction overflow'
                                                if (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000 > ext_call.return_data[0]:
                                                    _26837 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _26837 + 68] = mem[idx + _26149 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_26837 + 68] = mem[_26837 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _26837 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= (95 * ext_call.return_data[0]) - (95 * (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    emit Withdraw((ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                        else:
                                            require ext_code.size(tokenAddress)
                                            call tokenAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args stor4, 0
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0]
                                            sub_2445aefb--
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _20617 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_20617] = 30
                                            mem[_20617 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor19:
                                                _21155 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _21155 + 68] = mem[idx + _20617 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_21155 + 68] = mem[_21155 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _21155 + -mem[64] + 100
                                            stor19 -= stor31[stor18[s].field_0].field_256
                                            _21954 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_21954] = 30
                                            mem[_21954 + 32] = 'SafeMath: subtraction overflow'
                                            if balanceOf[stor18[s].field_0] > stor20:
                                                _22547 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _22547 + 68] = mem[idx + _21954 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_22547 + 68] = mem[_22547 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _22547 + -mem[64] + 100
                                            stor20 -= balanceOf[stor18[s].field_0]
                                            mem[0] = stor18[s].field_0
                                            stor21[stor18[s].field_0] = 0
                                            mem[32] = 31
                                            _23240 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_23240] = 30
                                            mem[_23240 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor8:
                                                _23706 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _23706 + 68] = mem[idx + _23240 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_23706 + 68] = mem[_23706 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _23706 + -mem[64] + 100
                                            stor8 -= stor31[stor18[s].field_0].field_256
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _24195 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_24195] = 30
                                            mem[_24195 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_512 > stor9:
                                                _24522 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _24522 + 68] = mem[idx + _24195 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_24522 + 68] = mem[_24522 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _24522 + -mem[64] + 100
                                            stor9 -= stor31[stor18[s].field_0].field_512
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            stor31[stor18[s].field_0].field_256 = 0
                                            stor31[stor18[s].field_0].field_512 = 0
                                            stor31[stor18[s].field_0].field_0 = 0
                                            stor10--
                                            investorCount--
                                            if not ext_call.return_data[0] - stor31[stor18[s].field_0].field_256:
                                                _25386 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_25386] = 26
                                                mem[_25386 + 32] = 'SafeMath: division by zero'
                                                _27241 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_27241] = 30
                                                mem[_27241 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > ext_call.return_data[0]:
                                                    _28111 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _28111 + 68] = mem[idx + _27241 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_28111 + 68] = mem[_28111 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _28111 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= 95 * ext_call.return_data[0] / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] > ext_call.return_data[0]:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                mem[mem[64] + 4] = stor18[s].field_0
                                                mem[mem[64] + 36] = ext_call.return_data[0]
                                                require ext_code.size(tokenAddress)
                                                call tokenAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args stor18[s].field_0, ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                require ext_call.return_data[0]
                                                mem[mem[64]] = ext_call.return_data[0]
                                                emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                            else:
                                                if (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / ext_call.return_data[0] - stor31[stor18[s].field_0].field_256 != uint16(teamRewardFee + farmerRewardFee):
                                                    revert with 0, 32, 33, 0x1f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _25601 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_25601] = 26
                                                mem[_25601 + 32] = 'SafeMath: division by zero'
                                                _27693 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_27693] = 30
                                                mem[_27693 + 32] = 'SafeMath: subtraction overflow'
                                                if (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000 > ext_call.return_data[0]:
                                                    _28499 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _28499 + 68] = mem[idx + _27693 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_28499 + 68] = mem[_28499 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _28499 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= (95 * ext_call.return_data[0]) - (95 * (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    emit Withdraw((ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                    else:
                                        if (ext_call.return_data[0] * teamRewardFee) - (stor31[stor18[s].field_0].field_256 * teamRewardFee) / ext_call.return_data[0] - stor31[stor18[s].field_0].field_256 != teamRewardFee:
                                            revert with 0, 32, 33, 0x1f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _18260 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_18260] = 26
                                        mem[_18260 + 32] = 'SafeMath: division by zero'
                                        require ext_code.size(tokenAddress)
                                        staticcall tokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(this.address)
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if (ext_call.return_data[0] * teamRewardFee) - (stor31[stor18[s].field_0].field_256 * teamRewardFee) / 10000 > ext_call.return_data[0]:
                                            emit 0x658fe604: ((ext_call.return_data[0] * teamRewardFee) - (stor31[stor18[s].field_0].field_256 * teamRewardFee) / 10000), stor4
                                            sub_2445aefb--
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _19922 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_19922] = 30
                                            mem[_19922 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor19:
                                                _20418 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _20418 + 68] = mem[idx + _19922 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_20418 + 68] = mem[_20418 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _20418 + -mem[64] + 100
                                            stor19 -= stor31[stor18[s].field_0].field_256
                                            _21151 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_21151] = 30
                                            mem[_21151 + 32] = 'SafeMath: subtraction overflow'
                                            if balanceOf[stor18[s].field_0] > stor20:
                                                _21710 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _21710 + 68] = mem[idx + _21151 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_21710 + 68] = mem[_21710 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _21710 + -mem[64] + 100
                                            stor20 -= balanceOf[stor18[s].field_0]
                                            mem[0] = stor18[s].field_0
                                            stor21[stor18[s].field_0] = 0
                                            mem[32] = 31
                                            _22542 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_22542] = 30
                                            mem[_22542 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor8:
                                                _23029 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _23029 + 68] = mem[idx + _22542 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_23029 + 68] = mem[_23029 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _23029 + -mem[64] + 100
                                            stor8 -= stor31[stor18[s].field_0].field_256
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _23701 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_23701] = 30
                                            mem[_23701 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_512 > stor9:
                                                _24049 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _24049 + 68] = mem[idx + _23701 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_24049 + 68] = mem[_24049 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _24049 + -mem[64] + 100
                                            stor9 -= stor31[stor18[s].field_0].field_512
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            stor31[stor18[s].field_0].field_256 = 0
                                            stor31[stor18[s].field_0].field_512 = 0
                                            stor31[stor18[s].field_0].field_0 = 0
                                            stor10--
                                            investorCount--
                                            if not ext_call.return_data[0] - stor31[stor18[s].field_0].field_256:
                                                _24952 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24952] = 26
                                                mem[_24952 + 32] = 'SafeMath: division by zero'
                                                _26148 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_26148] = 30
                                                mem[_26148 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > ext_call.return_data[0]:
                                                    _26834 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _26834 + 68] = mem[idx + _26148 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_26834 + 68] = mem[_26834 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _26834 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= 95 * ext_call.return_data[0] / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] > ext_call.return_data[0]:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                mem[mem[64] + 4] = stor18[s].field_0
                                                mem[mem[64] + 36] = ext_call.return_data[0]
                                                require ext_code.size(tokenAddress)
                                                call tokenAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args stor18[s].field_0, ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                require ext_call.return_data[0]
                                                mem[mem[64]] = ext_call.return_data[0]
                                                emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                            else:
                                                if (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / ext_call.return_data[0] - stor31[stor18[s].field_0].field_256 != uint16(teamRewardFee + farmerRewardFee):
                                                    revert with 0, 32, 33, 0x1f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _25069 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_25069] = 26
                                                mem[_25069 + 32] = 'SafeMath: division by zero'
                                                _26482 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_26482] = 30
                                                mem[_26482 + 32] = 'SafeMath: subtraction overflow'
                                                if (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000 > ext_call.return_data[0]:
                                                    _27235 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _27235 + 68] = mem[idx + _26482 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_27235 + 68] = mem[_27235 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _27235 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= (95 * ext_call.return_data[0]) - (95 * (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    emit Withdraw((ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                        else:
                                            require ext_code.size(tokenAddress)
                                            call tokenAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args stor4, (ext_call.return_data[0] * teamRewardFee) - (stor31[stor18[s].field_0].field_256 * teamRewardFee) / 10000
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0]
                                            sub_2445aefb--
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _20845 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_20845] = 30
                                            mem[_20845 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor19:
                                                _21464 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _21464 + 68] = mem[idx + _20845 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_21464 + 68] = mem[_21464 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _21464 + -mem[64] + 100
                                            stor19 -= stor31[stor18[s].field_0].field_256
                                            _22239 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_22239] = 30
                                            mem[_22239 + 32] = 'SafeMath: subtraction overflow'
                                            if balanceOf[stor18[s].field_0] > stor20:
                                                _22805 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _22805 + 68] = mem[idx + _22239 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_22805 + 68] = mem[_22805 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _22805 + -mem[64] + 100
                                            stor20 -= balanceOf[stor18[s].field_0]
                                            mem[0] = stor18[s].field_0
                                            stor21[stor18[s].field_0] = 0
                                            mem[32] = 31
                                            _23466 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_23466] = 30
                                            mem[_23466 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor8:
                                                _23904 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _23904 + 68] = mem[idx + _23466 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_23904 + 68] = mem[_23904 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _23904 + -mem[64] + 100
                                            stor8 -= stor31[stor18[s].field_0].field_256
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _24367 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_24367] = 30
                                            mem[_24367 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_512 > stor9:
                                                _24620 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _24620 + 68] = mem[idx + _24367 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_24620 + 68] = mem[_24620 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _24620 + -mem[64] + 100
                                            stor9 -= stor31[stor18[s].field_0].field_512
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            stor31[stor18[s].field_0].field_256 = 0
                                            stor31[stor18[s].field_0].field_512 = 0
                                            stor31[stor18[s].field_0].field_0 = 0
                                            stor10--
                                            investorCount--
                                            if not ext_call.return_data[0] - stor31[stor18[s].field_0].field_256:
                                                _25600 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_25600] = 26
                                                mem[_25600 + 32] = 'SafeMath: division by zero'
                                                _27687 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_27687] = 30
                                                mem[_27687 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > ext_call.return_data[0]:
                                                    _28493 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _28493 + 68] = mem[idx + _27687 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_28493 + 68] = mem[_28493 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _28493 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= 95 * ext_call.return_data[0] / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] > ext_call.return_data[0]:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                mem[mem[64] + 4] = stor18[s].field_0
                                                mem[mem[64] + 36] = ext_call.return_data[0]
                                                require ext_code.size(tokenAddress)
                                                call tokenAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args stor18[s].field_0, ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                require ext_call.return_data[0]
                                                mem[mem[64]] = ext_call.return_data[0]
                                                emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                            else:
                                                if (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / ext_call.return_data[0] - stor31[stor18[s].field_0].field_256 != uint16(teamRewardFee + farmerRewardFee):
                                                    revert with 0, 32, 33, 0x1f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _25849 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_25849] = 26
                                                mem[_25849 + 32] = 'SafeMath: division by zero'
                                                _28106 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_28106] = 30
                                                mem[_28106 + 32] = 'SafeMath: subtraction overflow'
                                                if (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000 > ext_call.return_data[0]:
                                                    _28957 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _28957 + 68] = mem[idx + _28106 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_28957 + 68] = mem[_28957 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _28957 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= (95 * ext_call.return_data[0]) - (95 * (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    emit Withdraw((ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
            else:
                if balanceOf[stor18[s].field_0] * stor25 / stor25 != balanceOf[stor18[s].field_0]:
                    revert with 0, 32, 33, 0x1f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                _16848 = mem[64]
                mem[64] = mem[64] + 64
                mem[_16848] = 26
                mem[_16848 + 32] = 'SafeMath: division by zero'
                if not stor20:
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 26
                    mem[mem[64] + 68] = 'SafeMath: division by zero'
                    idx = 32
                    while idx < 26:
                        mem[idx + mem[64] + 68] = mem[idx + _16848 + 32]
                        idx = idx + 32
                        continue 
                    revert with 0, 'SafeMath: division by zero'
                require ext_code.size(tokenAddress)
                staticcall tokenAddress.0x70a08231 with:
                        gas gas_remaining wei
                       args address(this.address)
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] <= 95 * balanceOf[stor18[s].field_0] * stor25 / stor20 / 100:
                    revert with 0, 'pool doesnot have enough balance'
                require ext_code.size(tokenAddress)
                staticcall tokenAddress.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if balanceOf[stor18[s].field_0] * stor25 / stor20 <= ext_call.return_data[0]:
                    if not stor18[s].field_0:
                        revert with 0, 32, 33, 0x7342455032303a206275726e2066726f6d20746865207a65726f20616464726573, mem[mem[64] + 101 len 31]
                    _16957 = mem[64]
                    mem[64] = mem[64] + 96
                    mem[_16957] = 34
                    mem[_16957 + 32 len 34] = 0x6f42455032303a206275726e20616d6f756e7420657863656564732062616c616e63
                    mem[32] = 32
                    if balanceOf[stor18[s].field_0] > balanceOf[stor18[s].field_0]:
                        _16975 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 34
                        idx = 0
                        while idx < 34:
                            mem[idx + _16975 + 68] = mem[idx + _16957 + 32]
                            idx = idx + 32
                            continue 
                        mem[_16975 + 100] = mem[_16975 + 130 len 2]
                        revert with memory
                          from mem[64]
                           len _16975 + -mem[64] + 132
                    mem[0] = stor18[s].field_0
                    mem[32] = 32
                    balanceOf[stor18[s].field_0] = 0
                    _17001 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_17001] = 30
                    mem[_17001 + 32] = 'SafeMath: subtraction overflow'
                    if balanceOf[stor18[s].field_0] > _totalSupply:
                        _17035 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 30
                        idx = 0
                        while idx < 30:
                            mem[idx + _17035 + 68] = mem[idx + _17001 + 32]
                            idx = idx + 32
                            continue 
                        mem[_17035 + 68] = mem[_17035 + 70 len 30]
                        revert with memory
                          from mem[64]
                           len _17035 + -mem[64] + 100
                    _totalSupply -= balanceOf[stor18[s].field_0]
                    emit Transfer(balanceOf[stor18[s].field_0], stor18[s].field_0, 0);
                    stor25 -= balanceOf[stor18[s].field_0] * stor25 / stor20
                    sub_a14ed18a -= balanceOf[stor18[s].field_0] * stor25 / stor20
                    if balanceOf[stor18[s].field_0] * stor25 / stor20 <= stor31[stor18[s].field_0].field_256:
                        sub_2445aefb--
                        mem[0] = stor18[s].field_0
                        mem[32] = 31
                        _17147 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_17147] = 30
                        mem[_17147 + 32] = 'SafeMath: subtraction overflow'
                        if stor31[stor18[s].field_0].field_256 > stor19:
                            _17182 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[idx + _17182 + 68] = mem[idx + _17147 + 32]
                                idx = idx + 32
                                continue 
                            mem[_17182 + 68] = mem[_17182 + 70 len 30]
                            revert with memory
                              from mem[64]
                               len _17182 + -mem[64] + 100
                        stor19 -= stor31[stor18[s].field_0].field_256
                        _17250 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_17250] = 30
                        mem[_17250 + 32] = 'SafeMath: subtraction overflow'
                        if balanceOf[stor18[s].field_0] > stor20:
                            _17307 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[idx + _17307 + 68] = mem[idx + _17250 + 32]
                                idx = idx + 32
                                continue 
                            mem[_17307 + 68] = mem[_17307 + 70 len 30]
                            revert with memory
                              from mem[64]
                               len _17307 + -mem[64] + 100
                        stor20 -= balanceOf[stor18[s].field_0]
                        mem[0] = stor18[s].field_0
                        stor21[stor18[s].field_0] = 0
                        mem[32] = 31
                        _17425 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_17425] = 30
                        mem[_17425 + 32] = 'SafeMath: subtraction overflow'
                        if stor31[stor18[s].field_0].field_256 > stor8:
                            _17501 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[idx + _17501 + 68] = mem[idx + _17425 + 32]
                                idx = idx + 32
                                continue 
                            mem[_17501 + 68] = mem[_17501 + 70 len 30]
                            revert with memory
                              from mem[64]
                               len _17501 + -mem[64] + 100
                        stor8 -= stor31[stor18[s].field_0].field_256
                        mem[0] = stor18[s].field_0
                        mem[32] = 31
                        _17667 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_17667] = 30
                        mem[_17667 + 32] = 'SafeMath: subtraction overflow'
                        if stor31[stor18[s].field_0].field_512 > stor9:
                            _17767 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[idx + _17767 + 68] = mem[idx + _17667 + 32]
                                idx = idx + 32
                                continue 
                            mem[_17767 + 68] = mem[_17767 + 70 len 30]
                            revert with memory
                              from mem[64]
                               len _17767 + -mem[64] + 100
                        stor9 -= stor31[stor18[s].field_0].field_512
                        mem[0] = stor18[s].field_0
                        mem[32] = 31
                        stor31[stor18[s].field_0].field_256 = 0
                        stor31[stor18[s].field_0].field_512 = 0
                        stor31[stor18[s].field_0].field_0 = 0
                        stor10--
                        investorCount--
                        _18063 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_18063] = 26
                        mem[_18063 + 32] = 'SafeMath: division by zero'
                        _18382 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_18382] = 30
                        mem[_18382 + 32] = 'SafeMath: subtraction overflow'
                        if 0 > balanceOf[stor18[s].field_0] * stor25 / stor20:
                            _18577 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[idx + _18577 + 68] = mem[idx + _18382 + 32]
                                idx = idx + 32
                                continue 
                            mem[_18577 + 68] = mem[_18577 + 70 len 30]
                            revert with memory
                              from mem[64]
                               len _18577 + -mem[64] + 100
                        require ext_code.size(tokenAddress)
                        staticcall tokenAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args address(this.address)
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] <= 95 * balanceOf[stor18[s].field_0] * stor25 / stor20 / 100:
                            revert with 0, 'pool doesnot have enough balance'
                        require ext_code.size(tokenAddress)
                        staticcall tokenAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if balanceOf[stor18[s].field_0] * stor25 / stor20 <= ext_call.return_data[0]:
                            mem[mem[64] + 4] = stor18[s].field_0
                            mem[mem[64] + 36] = balanceOf[stor18[s].field_0] * stor25 / stor20
                            require ext_code.size(tokenAddress)
                            call tokenAddress.0xa9059cbb with:
                                 gas gas_remaining wei
                                args stor18[s].field_0, balanceOf[stor18[s].field_0] * stor25 / stor20
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_call.return_data[0]
                            mem[mem[64]] = balanceOf[stor18[s].field_0] * stor25 / stor20
                            emit Withdraw((balanceOf[stor18[s].field_0] * stor25 / stor20), stor18[s].field_0);
                        else:
                            require ext_code.size(tokenAddress)
                            staticcall tokenAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            mem[mem[64] + 4] = stor18[s].field_0
                            mem[mem[64] + 36] = ext_call.return_data[0]
                            require ext_code.size(tokenAddress)
                            call tokenAddress.0xa9059cbb with:
                                 gas gas_remaining wei
                                args stor18[s].field_0, ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_call.return_data[0]
                            mem[mem[64]] = ext_call.return_data[0]
                            emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                    else:
                        mem[0] = stor18[s].field_0
                        mem[32] = 31
                        if not (balanceOf[stor18[s].field_0] * stor25 / stor20) - stor31[stor18[s].field_0].field_256:
                            sub_2445aefb--
                            mem[0] = stor18[s].field_0
                            mem[32] = 31
                            _17146 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_17146] = 30
                            mem[_17146 + 32] = 'SafeMath: subtraction overflow'
                            if stor31[stor18[s].field_0].field_256 > stor19:
                                _17179 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[idx + _17179 + 68] = mem[idx + _17146 + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_17179 + 68] = mem[_17179 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _17179 + -mem[64] + 100
                            stor19 -= stor31[stor18[s].field_0].field_256
                            _17246 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_17246] = 30
                            mem[_17246 + 32] = 'SafeMath: subtraction overflow'
                            if balanceOf[stor18[s].field_0] > stor20:
                                _17304 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[idx + _17304 + 68] = mem[idx + _17246 + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_17304 + 68] = mem[_17304 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _17304 + -mem[64] + 100
                            stor20 -= balanceOf[stor18[s].field_0]
                            mem[0] = stor18[s].field_0
                            stor21[stor18[s].field_0] = 0
                            mem[32] = 31
                            _17420 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_17420] = 30
                            mem[_17420 + 32] = 'SafeMath: subtraction overflow'
                            if stor31[stor18[s].field_0].field_256 > stor8:
                                _17496 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[idx + _17496 + 68] = mem[idx + _17420 + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_17496 + 68] = mem[_17496 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _17496 + -mem[64] + 100
                            stor8 -= stor31[stor18[s].field_0].field_256
                            mem[0] = stor18[s].field_0
                            mem[32] = 31
                            _17663 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_17663] = 30
                            mem[_17663 + 32] = 'SafeMath: subtraction overflow'
                            if stor31[stor18[s].field_0].field_512 > stor9:
                                _17763 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[idx + _17763 + 68] = mem[idx + _17663 + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_17763 + 68] = mem[_17763 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _17763 + -mem[64] + 100
                            stor9 -= stor31[stor18[s].field_0].field_512
                            mem[0] = stor18[s].field_0
                            mem[32] = 31
                            stor31[stor18[s].field_0].field_256 = 0
                            stor31[stor18[s].field_0].field_512 = 0
                            stor31[stor18[s].field_0].field_0 = 0
                            stor10--
                            investorCount--
                            if not (balanceOf[stor18[s].field_0] * stor25 / stor20) - stor31[stor18[s].field_0].field_256:
                                _18058 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_18058] = 26
                                mem[_18058 + 32] = 'SafeMath: division by zero'
                                _18370 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_18370] = 30
                                mem[_18370 + 32] = 'SafeMath: subtraction overflow'
                                if 0 > balanceOf[stor18[s].field_0] * stor25 / stor20:
                                    _18559 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[idx + _18559 + 68] = mem[idx + _18370 + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_18559 + 68] = mem[_18559 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _18559 + -mem[64] + 100
                                require ext_code.size(tokenAddress)
                                staticcall tokenAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args address(this.address)
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] <= 95 * balanceOf[stor18[s].field_0] * stor25 / stor20 / 100:
                                    revert with 0, 'pool doesnot have enough balance'
                                require ext_code.size(tokenAddress)
                                staticcall tokenAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if balanceOf[stor18[s].field_0] * stor25 / stor20 <= ext_call.return_data[0]:
                                    mem[mem[64] + 4] = stor18[s].field_0
                                    mem[mem[64] + 36] = balanceOf[stor18[s].field_0] * stor25 / stor20
                                    require ext_code.size(tokenAddress)
                                    call tokenAddress.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args stor18[s].field_0, balanceOf[stor18[s].field_0] * stor25 / stor20
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_call.return_data[0]
                                    mem[mem[64]] = balanceOf[stor18[s].field_0] * stor25 / stor20
                                    emit Withdraw((balanceOf[stor18[s].field_0] * stor25 / stor20), stor18[s].field_0);
                                else:
                                    require ext_code.size(tokenAddress)
                                    staticcall tokenAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[mem[64] + 4] = stor18[s].field_0
                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                    require ext_code.size(tokenAddress)
                                    call tokenAddress.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args stor18[s].field_0, ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_call.return_data[0]
                                    mem[mem[64]] = ext_call.return_data[0]
                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                            else:
                                if (balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / (balanceOf[stor18[s].field_0] * stor25 / stor20) - stor31[stor18[s].field_0].field_256 != uint16(teamRewardFee + farmerRewardFee):
                                    revert with 0, 32, 33, 0x1f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                _18093 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_18093] = 26
                                mem[_18093 + 32] = 'SafeMath: division by zero'
                                _18444 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_18444] = 30
                                mem[_18444 + 32] = 'SafeMath: subtraction overflow'
                                if (balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000 > balanceOf[stor18[s].field_0] * stor25 / stor20:
                                    _18701 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[idx + _18701 + 68] = mem[idx + _18444 + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_18701 + 68] = mem[_18701 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _18701 + -mem[64] + 100
                                require ext_code.size(tokenAddress)
                                staticcall tokenAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args address(this.address)
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] <= (95 * balanceOf[stor18[s].field_0] * stor25 / stor20) - (95 * (balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) / 100:
                                    revert with 0, 'pool doesnot have enough balance'
                                require ext_code.size(tokenAddress)
                                staticcall tokenAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if (balanceOf[stor18[s].field_0] * stor25 / stor20) - ((balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) <= ext_call.return_data[0]:
                                    mem[mem[64] + 4] = stor18[s].field_0
                                    mem[mem[64] + 36] = (balanceOf[stor18[s].field_0] * stor25 / stor20) - ((balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                    require ext_code.size(tokenAddress)
                                    call tokenAddress.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args stor18[s].field_0, (balanceOf[stor18[s].field_0] * stor25 / stor20) - ((balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_call.return_data[0]
                                    mem[mem[64]] = (balanceOf[stor18[s].field_0] * stor25 / stor20) - ((balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                    emit Withdraw(((balanceOf[stor18[s].field_0] * stor25 / stor20) - ((balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)), stor18[s].field_0);
                                else:
                                    require ext_code.size(tokenAddress)
                                    staticcall tokenAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[mem[64] + 4] = stor18[s].field_0
                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                    require ext_code.size(tokenAddress)
                                    call tokenAddress.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args stor18[s].field_0, ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_call.return_data[0]
                                    mem[mem[64]] = ext_call.return_data[0]
                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                        else:
                            if not (balanceOf[stor18[s].field_0] * stor25 / stor20) - stor31[stor18[s].field_0].field_256:
                                _17220 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_17220] = 26
                                mem[_17220 + 32] = 'SafeMath: division by zero'
                                require ext_code.size(tokenAddress)
                                staticcall tokenAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args address(this.address)
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if 0 > ext_call.return_data[0]:
                                    mem[0] = stor18[s].field_0
                                    emit 0x658fe604: 0, farmerAddress
                                    if not (balanceOf[stor18[s].field_0] * stor25 / stor20) - stor31[stor18[s].field_0].field_256:
                                        _17869 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_17869] = 26
                                        mem[_17869 + 32] = 'SafeMath: division by zero'
                                        require ext_code.size(tokenAddress)
                                        staticcall tokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(this.address)
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if 0 > ext_call.return_data[0]:
                                            emit 0x658fe604: 0, stor4
                                            sub_2445aefb--
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _18450 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_18450] = 30
                                            mem[_18450 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor19:
                                                _18713 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _18713 + 68] = mem[idx + _18450 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_18713 + 68] = mem[_18713 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _18713 + -mem[64] + 100
                                            stor19 -= stor31[stor18[s].field_0].field_256
                                            _19139 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_19139] = 30
                                            mem[_19139 + 32] = 'SafeMath: subtraction overflow'
                                            if balanceOf[stor18[s].field_0] > stor20:
                                                _19507 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _19507 + 68] = mem[idx + _19139 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_19507 + 68] = mem[_19507 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _19507 + -mem[64] + 100
                                            stor20 -= balanceOf[stor18[s].field_0]
                                            mem[0] = stor18[s].field_0
                                            stor21[stor18[s].field_0] = 0
                                            mem[32] = 31
                                            _20079 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_20079] = 30
                                            mem[_20079 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor8:
                                                _20553 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _20553 + 68] = mem[idx + _20079 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_20553 + 68] = mem[_20553 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _20553 + -mem[64] + 100
                                            stor8 -= stor31[stor18[s].field_0].field_256
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _21358 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_21358] = 30
                                            mem[_21358 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_512 > stor9:
                                                _21873 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _21873 + 68] = mem[idx + _21358 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_21873 + 68] = mem[_21873 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _21873 + -mem[64] + 100
                                            stor9 -= stor31[stor18[s].field_0].field_512
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            stor31[stor18[s].field_0].field_256 = 0
                                            stor31[stor18[s].field_0].field_512 = 0
                                            stor31[stor18[s].field_0].field_0 = 0
                                            stor10--
                                            investorCount--
                                            if not (balanceOf[stor18[s].field_0] * stor25 / stor20) - stor31[stor18[s].field_0].field_256:
                                                _23621 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_23621] = 26
                                                mem[_23621 + 32] = 'SafeMath: division by zero'
                                                _24588 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24588] = 30
                                                mem[_24588 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > balanceOf[stor18[s].field_0] * stor25 / stor20:
                                                    _24787 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _24787 + 68] = mem[idx + _24588 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_24787 + 68] = mem[_24787 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _24787 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= 95 * balanceOf[stor18[s].field_0] * stor25 / stor20 / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if balanceOf[stor18[s].field_0] * stor25 / stor20 <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = balanceOf[stor18[s].field_0] * stor25 / stor20
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, balanceOf[stor18[s].field_0] * stor25 / stor20
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = balanceOf[stor18[s].field_0] * stor25 / stor20
                                                    emit Withdraw((balanceOf[stor18[s].field_0] * stor25 / stor20), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                            else:
                                                if (balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / (balanceOf[stor18[s].field_0] * stor25 / stor20) - stor31[stor18[s].field_0].field_256 != uint16(teamRewardFee + farmerRewardFee):
                                                    revert with 0, 32, 33, 0x1f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _23839 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_23839] = 26
                                                mem[_23839 + 32] = 'SafeMath: division by zero'
                                                _24681 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24681] = 30
                                                mem[_24681 + 32] = 'SafeMath: subtraction overflow'
                                                if (balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000 > balanceOf[stor18[s].field_0] * stor25 / stor20:
                                                    _24911 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _24911 + 68] = mem[idx + _24681 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_24911 + 68] = mem[_24911 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _24911 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= (95 * balanceOf[stor18[s].field_0] * stor25 / stor20) - (95 * (balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if (balanceOf[stor18[s].field_0] * stor25 / stor20) - ((balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = (balanceOf[stor18[s].field_0] * stor25 / stor20) - ((balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, (balanceOf[stor18[s].field_0] * stor25 / stor20) - ((balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = (balanceOf[stor18[s].field_0] * stor25 / stor20) - ((balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    emit Withdraw(((balanceOf[stor18[s].field_0] * stor25 / stor20) - ((balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                        else:
                                            require ext_code.size(tokenAddress)
                                            call tokenAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args stor4, 0
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0]
                                            sub_2445aefb--
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _18985 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_18985] = 30
                                            mem[_18985 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor19:
                                                _19316 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _19316 + 68] = mem[idx + _18985 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_19316 + 68] = mem[_19316 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _19316 + -mem[64] + 100
                                            stor19 -= stor31[stor18[s].field_0].field_256
                                            _19853 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_19853] = 30
                                            mem[_19853 + 32] = 'SafeMath: subtraction overflow'
                                            if balanceOf[stor18[s].field_0] > stor20:
                                                _20333 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _20333 + 68] = mem[idx + _19853 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_20333 + 68] = mem[_20333 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _20333 + -mem[64] + 100
                                            stor20 -= balanceOf[stor18[s].field_0]
                                            mem[0] = stor18[s].field_0
                                            stor21[stor18[s].field_0] = 0
                                            mem[32] = 31
                                            _21044 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_21044] = 30
                                            mem[_21044 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor8:
                                                _21631 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _21631 + 68] = mem[idx + _21044 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_21631 + 68] = mem[_21631 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _21631 + -mem[64] + 100
                                            stor8 -= stor31[stor18[s].field_0].field_256
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _22436 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_22436] = 30
                                            mem[_22436 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_512 > stor9:
                                                _22957 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _22957 + 68] = mem[idx + _22436 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_22957 + 68] = mem[_22957 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _22957 + -mem[64] + 100
                                            stor9 -= stor31[stor18[s].field_0].field_512
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            stor31[stor18[s].field_0].field_256 = 0
                                            stor31[stor18[s].field_0].field_512 = 0
                                            stor31[stor18[s].field_0].field_0 = 0
                                            stor10--
                                            investorCount--
                                            if not (balanceOf[stor18[s].field_0] * stor25 / stor20) - stor31[stor18[s].field_0].field_256:
                                                _24307 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24307] = 26
                                                mem[_24307 + 32] = 'SafeMath: division by zero'
                                                _25032 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_25032] = 30
                                                mem[_25032 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > balanceOf[stor18[s].field_0] * stor25 / stor20:
                                                    _25326 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _25326 + 68] = mem[idx + _25032 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_25326 + 68] = mem[_25326 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _25326 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= 95 * balanceOf[stor18[s].field_0] * stor25 / stor20 / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if balanceOf[stor18[s].field_0] * stor25 / stor20 <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = balanceOf[stor18[s].field_0] * stor25 / stor20
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, balanceOf[stor18[s].field_0] * stor25 / stor20
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = balanceOf[stor18[s].field_0] * stor25 / stor20
                                                    emit Withdraw((balanceOf[stor18[s].field_0] * stor25 / stor20), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                            else:
                                                if (balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / (balanceOf[stor18[s].field_0] * stor25 / stor20) - stor31[stor18[s].field_0].field_256 != uint16(teamRewardFee + farmerRewardFee):
                                                    revert with 0, 32, 33, 0x1f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _24469 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24469] = 26
                                                mem[_24469 + 32] = 'SafeMath: division by zero'
                                                _25162 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_25162] = 30
                                                mem[_25162 + 32] = 'SafeMath: subtraction overflow'
                                                if (balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000 > balanceOf[stor18[s].field_0] * stor25 / stor20:
                                                    _25530 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _25530 + 68] = mem[idx + _25162 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_25530 + 68] = mem[_25530 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _25530 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= (95 * balanceOf[stor18[s].field_0] * stor25 / stor20) - (95 * (balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if (balanceOf[stor18[s].field_0] * stor25 / stor20) - ((balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = (balanceOf[stor18[s].field_0] * stor25 / stor20) - ((balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, (balanceOf[stor18[s].field_0] * stor25 / stor20) - ((balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = (balanceOf[stor18[s].field_0] * stor25 / stor20) - ((balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    emit Withdraw(((balanceOf[stor18[s].field_0] * stor25 / stor20) - ((balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                    else:
                                        if (balanceOf[stor18[s].field_0] * stor25 / stor20 * teamRewardFee) - (stor31[stor18[s].field_0].field_256 * teamRewardFee) / (balanceOf[stor18[s].field_0] * stor25 / stor20) - stor31[stor18[s].field_0].field_256 != teamRewardFee:
                                            revert with 0, 32, 33, 0x1f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _17912 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_17912] = 26
                                        mem[_17912 + 32] = 'SafeMath: division by zero'
                                        require ext_code.size(tokenAddress)
                                        staticcall tokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(this.address)
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if (balanceOf[stor18[s].field_0] * stor25 / stor20 * teamRewardFee) - (stor31[stor18[s].field_0].field_256 * teamRewardFee) / 10000 > ext_call.return_data[0]:
                                            emit 0x658fe604: ((balanceOf[stor18[s].field_0] * stor25 / stor20 * teamRewardFee) - (stor31[stor18[s].field_0].field_256 * teamRewardFee) / 10000), stor4
                                            sub_2445aefb--
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _18568 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_18568] = 30
                                            mem[_18568 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor19:
                                                _18849 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _18849 + 68] = mem[idx + _18568 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_18849 + 68] = mem[_18849 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _18849 + -mem[64] + 100
                                            stor19 -= stor31[stor18[s].field_0].field_256
                                            _19312 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_19312] = 30
                                            mem[_19312 + 32] = 'SafeMath: subtraction overflow'
                                            if balanceOf[stor18[s].field_0] > stor20:
                                                _19679 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _19679 + 68] = mem[idx + _19312 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_19679 + 68] = mem[_19679 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _19679 + -mem[64] + 100
                                            stor20 -= balanceOf[stor18[s].field_0]
                                            mem[0] = stor18[s].field_0
                                            stor21[stor18[s].field_0] = 0
                                            mem[32] = 31
                                            _20328 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_20328] = 30
                                            mem[_20328 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor8:
                                                _20762 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _20762 + 68] = mem[idx + _20328 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_20762 + 68] = mem[_20762 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _20762 + -mem[64] + 100
                                            stor8 -= stor31[stor18[s].field_0].field_256
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _21626 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_21626] = 30
                                            mem[_21626 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_512 > stor9:
                                                _22137 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _22137 + 68] = mem[idx + _21626 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_22137 + 68] = mem[_22137 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _22137 + -mem[64] + 100
                                            stor9 -= stor31[stor18[s].field_0].field_512
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            stor31[stor18[s].field_0].field_256 = 0
                                            stor31[stor18[s].field_0].field_512 = 0
                                            stor31[stor18[s].field_0].field_0 = 0
                                            stor10--
                                            investorCount--
                                            if not (balanceOf[stor18[s].field_0] * stor25 / stor20) - stor31[stor18[s].field_0].field_256:
                                                _23836 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_23836] = 26
                                                mem[_23836 + 32] = 'SafeMath: division by zero'
                                                _24680 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24680] = 30
                                                mem[_24680 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > balanceOf[stor18[s].field_0] * stor25 / stor20:
                                                    _24908 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _24908 + 68] = mem[idx + _24680 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_24908 + 68] = mem[_24908 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _24908 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= 95 * balanceOf[stor18[s].field_0] * stor25 / stor20 / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if balanceOf[stor18[s].field_0] * stor25 / stor20 <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = balanceOf[stor18[s].field_0] * stor25 / stor20
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, balanceOf[stor18[s].field_0] * stor25 / stor20
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = balanceOf[stor18[s].field_0] * stor25 / stor20
                                                    emit Withdraw((balanceOf[stor18[s].field_0] * stor25 / stor20), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                            else:
                                                if (balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / (balanceOf[stor18[s].field_0] * stor25 / stor20) - stor31[stor18[s].field_0].field_256 != uint16(teamRewardFee + farmerRewardFee):
                                                    revert with 0, 32, 33, 0x1f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _24004 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24004] = 26
                                                mem[_24004 + 32] = 'SafeMath: division by zero'
                                                _24786 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24786] = 30
                                                mem[_24786 + 32] = 'SafeMath: subtraction overflow'
                                                if (balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000 > balanceOf[stor18[s].field_0] * stor25 / stor20:
                                                    _25026 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _25026 + 68] = mem[idx + _24786 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_25026 + 68] = mem[_25026 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _25026 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= (95 * balanceOf[stor18[s].field_0] * stor25 / stor20) - (95 * (balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if (balanceOf[stor18[s].field_0] * stor25 / stor20) - ((balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = (balanceOf[stor18[s].field_0] * stor25 / stor20) - ((balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, (balanceOf[stor18[s].field_0] * stor25 / stor20) - ((balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = (balanceOf[stor18[s].field_0] * stor25 / stor20) - ((balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    emit Withdraw(((balanceOf[stor18[s].field_0] * stor25 / stor20) - ((balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                        else:
                                            require ext_code.size(tokenAddress)
                                            call tokenAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args stor4, (balanceOf[stor18[s].field_0] * stor25 / stor20 * teamRewardFee) - (stor31[stor18[s].field_0].field_256 * teamRewardFee) / 10000
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0]
                                            sub_2445aefb--
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _19138 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_19138] = 30
                                            mem[_19138 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor19:
                                                _19504 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _19504 + 68] = mem[idx + _19138 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_19504 + 68] = mem[_19504 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _19504 + -mem[64] + 100
                                            stor19 -= stor31[stor18[s].field_0].field_256
                                            _20076 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_20076] = 30
                                            mem[_20076 + 32] = 'SafeMath: subtraction overflow'
                                            if balanceOf[stor18[s].field_0] > stor20:
                                                _20550 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _20550 + 68] = mem[idx + _20076 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_20550 + 68] = mem[_20550 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _20550 + -mem[64] + 100
                                            stor20 -= balanceOf[stor18[s].field_0]
                                            mem[0] = stor18[s].field_0
                                            stor21[stor18[s].field_0] = 0
                                            mem[32] = 31
                                            _21355 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_21355] = 30
                                            mem[_21355 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor8:
                                                _21870 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _21870 + 68] = mem[idx + _21355 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_21870 + 68] = mem[_21870 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _21870 + -mem[64] + 100
                                            stor8 -= stor31[stor18[s].field_0].field_256
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _22715 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_22715] = 30
                                            mem[_22715 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_512 > stor9:
                                                _23170 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _23170 + 68] = mem[idx + _22715 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_23170 + 68] = mem[_23170 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _23170 + -mem[64] + 100
                                            stor9 -= stor31[stor18[s].field_0].field_512
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            stor31[stor18[s].field_0].field_256 = 0
                                            stor31[stor18[s].field_0].field_512 = 0
                                            stor31[stor18[s].field_0].field_0 = 0
                                            stor10--
                                            investorCount--
                                            if not (balanceOf[stor18[s].field_0] * stor25 / stor20) - stor31[stor18[s].field_0].field_256:
                                                _24468 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24468] = 26
                                                mem[_24468 + 32] = 'SafeMath: division by zero'
                                                _25156 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_25156] = 30
                                                mem[_25156 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > balanceOf[stor18[s].field_0] * stor25 / stor20:
                                                    _25524 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _25524 + 68] = mem[idx + _25156 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_25524 + 68] = mem[_25524 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _25524 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= 95 * balanceOf[stor18[s].field_0] * stor25 / stor20 / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if balanceOf[stor18[s].field_0] * stor25 / stor20 <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = balanceOf[stor18[s].field_0] * stor25 / stor20
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, balanceOf[stor18[s].field_0] * stor25 / stor20
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = balanceOf[stor18[s].field_0] * stor25 / stor20
                                                    emit Withdraw((balanceOf[stor18[s].field_0] * stor25 / stor20), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                            else:
                                                if (balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / (balanceOf[stor18[s].field_0] * stor25 / stor20) - stor31[stor18[s].field_0].field_256 != uint16(teamRewardFee + farmerRewardFee):
                                                    revert with 0, 32, 33, 0x1f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _24587 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24587] = 26
                                                mem[_24587 + 32] = 'SafeMath: division by zero'
                                                _25321 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_25321] = 30
                                                mem[_25321 + 32] = 'SafeMath: subtraction overflow'
                                                if (balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000 > balanceOf[stor18[s].field_0] * stor25 / stor20:
                                                    _25759 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _25759 + 68] = mem[idx + _25321 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_25759 + 68] = mem[_25759 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _25759 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= (95 * balanceOf[stor18[s].field_0] * stor25 / stor20) - (95 * (balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if (balanceOf[stor18[s].field_0] * stor25 / stor20) - ((balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = (balanceOf[stor18[s].field_0] * stor25 / stor20) - ((balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, (balanceOf[stor18[s].field_0] * stor25 / stor20) - ((balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = (balanceOf[stor18[s].field_0] * stor25 / stor20) - ((balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    emit Withdraw(((balanceOf[stor18[s].field_0] * stor25 / stor20) - ((balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                else:
                                    require ext_code.size(tokenAddress)
                                    call tokenAddress.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args farmerAddress, 0
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_call.return_data[0]
                                    if not (balanceOf[stor18[s].field_0] * stor25 / stor20) - stor31[stor18[s].field_0].field_256:
                                        _18017 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_18017] = 26
                                        mem[_18017 + 32] = 'SafeMath: division by zero'
                                        require ext_code.size(tokenAddress)
                                        staticcall tokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(this.address)
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if 0 > ext_call.return_data[0]:
                                            emit 0x658fe604: 0, stor4
                                            sub_2445aefb--
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _18988 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_18988] = 30
                                            mem[_18988 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor19:
                                                _19319 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _19319 + 68] = mem[idx + _18988 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_19319 + 68] = mem[_19319 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _19319 + -mem[64] + 100
                                            stor19 -= stor31[stor18[s].field_0].field_256
                                            _19858 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_19858] = 30
                                            mem[_19858 + 32] = 'SafeMath: subtraction overflow'
                                            if balanceOf[stor18[s].field_0] > stor20:
                                                _20340 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _20340 + 68] = mem[idx + _19858 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_20340 + 68] = mem[_20340 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _20340 + -mem[64] + 100
                                            stor20 -= balanceOf[stor18[s].field_0]
                                            mem[0] = stor18[s].field_0
                                            stor21[stor18[s].field_0] = 0
                                            mem[32] = 31
                                            _21053 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_21053] = 30
                                            mem[_21053 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor8:
                                                _21638 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _21638 + 68] = mem[idx + _21053 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_21638 + 68] = mem[_21638 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _21638 + -mem[64] + 100
                                            stor8 -= stor31[stor18[s].field_0].field_256
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _22444 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_22444] = 30
                                            mem[_22444 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_512 > stor9:
                                                _22964 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _22964 + 68] = mem[idx + _22444 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_22964 + 68] = mem[_22964 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _22964 + -mem[64] + 100
                                            stor9 -= stor31[stor18[s].field_0].field_512
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            stor31[stor18[s].field_0].field_256 = 0
                                            stor31[stor18[s].field_0].field_512 = 0
                                            stor31[stor18[s].field_0].field_0 = 0
                                            stor10--
                                            investorCount--
                                            if not (balanceOf[stor18[s].field_0] * stor25 / stor20) - stor31[stor18[s].field_0].field_256:
                                                _24312 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24312] = 26
                                                mem[_24312 + 32] = 'SafeMath: division by zero'
                                                _25034 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_25034] = 30
                                                mem[_25034 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > balanceOf[stor18[s].field_0] * stor25 / stor20:
                                                    _25330 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _25330 + 68] = mem[idx + _25034 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_25330 + 68] = mem[_25330 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _25330 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= 95 * balanceOf[stor18[s].field_0] * stor25 / stor20 / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if balanceOf[stor18[s].field_0] * stor25 / stor20 <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = balanceOf[stor18[s].field_0] * stor25 / stor20
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, balanceOf[stor18[s].field_0] * stor25 / stor20
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = balanceOf[stor18[s].field_0] * stor25 / stor20
                                                    emit Withdraw((balanceOf[stor18[s].field_0] * stor25 / stor20), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                            else:
                                                if (balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / (balanceOf[stor18[s].field_0] * stor25 / stor20) - stor31[stor18[s].field_0].field_256 != uint16(teamRewardFee + farmerRewardFee):
                                                    revert with 0, 32, 33, 0x1f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _24473 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24473] = 26
                                                mem[_24473 + 32] = 'SafeMath: division by zero'
                                                _25164 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_25164] = 30
                                                mem[_25164 + 32] = 'SafeMath: subtraction overflow'
                                                if (balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000 > balanceOf[stor18[s].field_0] * stor25 / stor20:
                                                    _25536 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _25536 + 68] = mem[idx + _25164 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_25536 + 68] = mem[_25536 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _25536 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= (95 * balanceOf[stor18[s].field_0] * stor25 / stor20) - (95 * (balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if (balanceOf[stor18[s].field_0] * stor25 / stor20) - ((balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = (balanceOf[stor18[s].field_0] * stor25 / stor20) - ((balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, (balanceOf[stor18[s].field_0] * stor25 / stor20) - ((balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = (balanceOf[stor18[s].field_0] * stor25 / stor20) - ((balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    emit Withdraw(((balanceOf[stor18[s].field_0] * stor25 / stor20) - ((balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                        else:
                                            require ext_code.size(tokenAddress)
                                            call tokenAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args stor4, 0
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0]
                                            sub_2445aefb--
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _19685 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_19685] = 30
                                            mem[_19685 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor19:
                                                _20087 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _20087 + 68] = mem[idx + _19685 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_20087 + 68] = mem[_20087 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _20087 + -mem[64] + 100
                                            stor19 -= stor31[stor18[s].field_0].field_256
                                            _20772 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_20772] = 30
                                            mem[_20772 + 32] = 'SafeMath: subtraction overflow'
                                            if balanceOf[stor18[s].field_0] > stor20:
                                                _21367 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _21367 + 68] = mem[idx + _20772 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_21367 + 68] = mem[_21367 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _21367 + -mem[64] + 100
                                            stor20 -= balanceOf[stor18[s].field_0]
                                            mem[0] = stor18[s].field_0
                                            stor21[stor18[s].field_0] = 0
                                            mem[32] = 31
                                            _22147 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_22147] = 30
                                            mem[_22147 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor8:
                                                _22726 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _22726 + 68] = mem[idx + _22147 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_22726 + 68] = mem[_22726 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _22726 + -mem[64] + 100
                                            stor8 -= stor31[stor18[s].field_0].field_256
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _23392 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_23392] = 30
                                            mem[_23392 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_512 > stor9:
                                                _23845 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _23845 + 68] = mem[idx + _23392 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_23845 + 68] = mem[_23845 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _23845 + -mem[64] + 100
                                            stor9 -= stor31[stor18[s].field_0].field_512
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            stor31[stor18[s].field_0].field_256 = 0
                                            stor31[stor18[s].field_0].field_512 = 0
                                            stor31[stor18[s].field_0].field_0 = 0
                                            stor10--
                                            investorCount--
                                            if not (balanceOf[stor18[s].field_0] * stor25 / stor20) - stor31[stor18[s].field_0].field_256:
                                                _24792 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24792] = 26
                                                mem[_24792 + 32] = 'SafeMath: division by zero'
                                                _25776 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_25776] = 30
                                                mem[_25776 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > balanceOf[stor18[s].field_0] * stor25 / stor20:
                                                    _26387 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _26387 + 68] = mem[idx + _25776 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_26387 + 68] = mem[_26387 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _26387 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= 95 * balanceOf[stor18[s].field_0] * stor25 / stor20 / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if balanceOf[stor18[s].field_0] * stor25 / stor20 <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = balanceOf[stor18[s].field_0] * stor25 / stor20
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, balanceOf[stor18[s].field_0] * stor25 / stor20
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = balanceOf[stor18[s].field_0] * stor25 / stor20
                                                    emit Withdraw((balanceOf[stor18[s].field_0] * stor25 / stor20), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                            else:
                                                if (balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / (balanceOf[stor18[s].field_0] * stor25 / stor20) - stor31[stor18[s].field_0].field_256 != uint16(teamRewardFee + farmerRewardFee):
                                                    revert with 0, 32, 33, 0x1f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _24915 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24915] = 26
                                                mem[_24915 + 32] = 'SafeMath: division by zero'
                                                _26062 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_26062] = 30
                                                mem[_26062 + 32] = 'SafeMath: subtraction overflow'
                                                if (balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000 > balanceOf[stor18[s].field_0] * stor25 / stor20:
                                                    _26730 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _26730 + 68] = mem[idx + _26062 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_26730 + 68] = mem[_26730 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _26730 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= (95 * balanceOf[stor18[s].field_0] * stor25 / stor20) - (95 * (balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if (balanceOf[stor18[s].field_0] * stor25 / stor20) - ((balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = (balanceOf[stor18[s].field_0] * stor25 / stor20) - ((balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, (balanceOf[stor18[s].field_0] * stor25 / stor20) - ((balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = (balanceOf[stor18[s].field_0] * stor25 / stor20) - ((balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    emit Withdraw(((balanceOf[stor18[s].field_0] * stor25 / stor20) - ((balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                    else:
                                        if (balanceOf[stor18[s].field_0] * stor25 / stor20 * teamRewardFee) - (stor31[stor18[s].field_0].field_256 * teamRewardFee) / (balanceOf[stor18[s].field_0] * stor25 / stor20) - stor31[stor18[s].field_0].field_256 != teamRewardFee:
                                            revert with 0, 32, 33, 0x1f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _18062 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_18062] = 26
                                        mem[_18062 + 32] = 'SafeMath: division by zero'
                                        require ext_code.size(tokenAddress)
                                        staticcall tokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(this.address)
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if (balanceOf[stor18[s].field_0] * stor25 / stor20 * teamRewardFee) - (stor31[stor18[s].field_0].field_256 * teamRewardFee) / 10000 > ext_call.return_data[0]:
                                            emit 0x658fe604: ((balanceOf[stor18[s].field_0] * stor25 / stor20 * teamRewardFee) - (stor31[stor18[s].field_0].field_256 * teamRewardFee) / 10000), stor4
                                            sub_2445aefb--
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _19142 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_19142] = 30
                                            mem[_19142 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor19:
                                                _19510 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _19510 + 68] = mem[idx + _19142 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_19510 + 68] = mem[_19510 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _19510 + -mem[64] + 100
                                            stor19 -= stor31[stor18[s].field_0].field_256
                                            _20083 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_20083] = 30
                                            mem[_20083 + 32] = 'SafeMath: subtraction overflow'
                                            if balanceOf[stor18[s].field_0] > stor20:
                                                _20556 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _20556 + 68] = mem[idx + _20083 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_20556 + 68] = mem[_20556 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _20556 + -mem[64] + 100
                                            stor20 -= balanceOf[stor18[s].field_0]
                                            mem[0] = stor18[s].field_0
                                            stor21[stor18[s].field_0] = 0
                                            mem[32] = 31
                                            _21362 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_21362] = 30
                                            mem[_21362 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor8:
                                                _21876 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _21876 + 68] = mem[idx + _21362 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_21876 + 68] = mem[_21876 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _21876 + -mem[64] + 100
                                            stor8 -= stor31[stor18[s].field_0].field_256
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _22721 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_22721] = 30
                                            mem[_22721 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_512 > stor9:
                                                _23173 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _23173 + 68] = mem[idx + _22721 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_23173 + 68] = mem[_23173 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _23173 + -mem[64] + 100
                                            stor9 -= stor31[stor18[s].field_0].field_512
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            stor31[stor18[s].field_0].field_256 = 0
                                            stor31[stor18[s].field_0].field_512 = 0
                                            stor31[stor18[s].field_0].field_0 = 0
                                            stor10--
                                            investorCount--
                                            if not (balanceOf[stor18[s].field_0] * stor25 / stor20) - stor31[stor18[s].field_0].field_256:
                                                _24470 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24470] = 26
                                                mem[_24470 + 32] = 'SafeMath: division by zero'
                                                _25163 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_25163] = 30
                                                mem[_25163 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > balanceOf[stor18[s].field_0] * stor25 / stor20:
                                                    _25533 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _25533 + 68] = mem[idx + _25163 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_25533 + 68] = mem[_25533 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _25533 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= 95 * balanceOf[stor18[s].field_0] * stor25 / stor20 / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if balanceOf[stor18[s].field_0] * stor25 / stor20 <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = balanceOf[stor18[s].field_0] * stor25 / stor20
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, balanceOf[stor18[s].field_0] * stor25 / stor20
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = balanceOf[stor18[s].field_0] * stor25 / stor20
                                                    emit Withdraw((balanceOf[stor18[s].field_0] * stor25 / stor20), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                            else:
                                                if (balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / (balanceOf[stor18[s].field_0] * stor25 / stor20) - stor31[stor18[s].field_0].field_256 != uint16(teamRewardFee + farmerRewardFee):
                                                    revert with 0, 32, 33, 0x1f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _24589 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24589] = 26
                                                mem[_24589 + 32] = 'SafeMath: division by zero'
                                                _25329 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_25329] = 30
                                                mem[_25329 + 32] = 'SafeMath: subtraction overflow'
                                                if (balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000 > balanceOf[stor18[s].field_0] * stor25 / stor20:
                                                    _25770 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _25770 + 68] = mem[idx + _25329 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_25770 + 68] = mem[_25770 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _25770 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= (95 * balanceOf[stor18[s].field_0] * stor25 / stor20) - (95 * (balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if (balanceOf[stor18[s].field_0] * stor25 / stor20) - ((balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = (balanceOf[stor18[s].field_0] * stor25 / stor20) - ((balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, (balanceOf[stor18[s].field_0] * stor25 / stor20) - ((balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = (balanceOf[stor18[s].field_0] * stor25 / stor20) - ((balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    emit Withdraw(((balanceOf[stor18[s].field_0] * stor25 / stor20) - ((balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                        else:
                                            require ext_code.size(tokenAddress)
                                            call tokenAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args stor4, (balanceOf[stor18[s].field_0] * stor25 / stor20 * teamRewardFee) - (stor31[stor18[s].field_0].field_256 * teamRewardFee) / 10000
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0]
                                            sub_2445aefb--
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _19857 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_19857] = 30
                                            mem[_19857 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor19:
                                                _20337 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _20337 + 68] = mem[idx + _19857 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_20337 + 68] = mem[_20337 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _20337 + -mem[64] + 100
                                            stor19 -= stor31[stor18[s].field_0].field_256
                                            _21050 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_21050] = 30
                                            mem[_21050 + 32] = 'SafeMath: subtraction overflow'
                                            if balanceOf[stor18[s].field_0] > stor20:
                                                _21635 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _21635 + 68] = mem[idx + _21050 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_21635 + 68] = mem[_21635 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _21635 + -mem[64] + 100
                                            stor20 -= balanceOf[stor18[s].field_0]
                                            mem[0] = stor18[s].field_0
                                            stor21[stor18[s].field_0] = 0
                                            mem[32] = 31
                                            _22441 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_22441] = 30
                                            mem[_22441 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor8:
                                                _22961 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _22961 + 68] = mem[idx + _22441 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_22961 + 68] = mem[_22961 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _22961 + -mem[64] + 100
                                            stor8 -= stor31[stor18[s].field_0].field_256
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _23626 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_23626] = 30
                                            mem[_23626 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_512 > stor9:
                                                _24007 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _24007 + 68] = mem[idx + _23626 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_24007 + 68] = mem[_24007 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _24007 + -mem[64] + 100
                                            stor9 -= stor31[stor18[s].field_0].field_512
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            stor31[stor18[s].field_0].field_256 = 0
                                            stor31[stor18[s].field_0].field_512 = 0
                                            stor31[stor18[s].field_0].field_0 = 0
                                            stor10--
                                            investorCount--
                                            if not (balanceOf[stor18[s].field_0] * stor25 / stor20) - stor31[stor18[s].field_0].field_256:
                                                _24914 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24914] = 26
                                                mem[_24914 + 32] = 'SafeMath: division by zero'
                                                _26056 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_26056] = 30
                                                mem[_26056 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > balanceOf[stor18[s].field_0] * stor25 / stor20:
                                                    _26724 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _26724 + 68] = mem[idx + _26056 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_26724 + 68] = mem[_26724 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _26724 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= 95 * balanceOf[stor18[s].field_0] * stor25 / stor20 / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if balanceOf[stor18[s].field_0] * stor25 / stor20 <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = balanceOf[stor18[s].field_0] * stor25 / stor20
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, balanceOf[stor18[s].field_0] * stor25 / stor20
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = balanceOf[stor18[s].field_0] * stor25 / stor20
                                                    emit Withdraw((balanceOf[stor18[s].field_0] * stor25 / stor20), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                            else:
                                                if (balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / (balanceOf[stor18[s].field_0] * stor25 / stor20) - stor31[stor18[s].field_0].field_256 != uint16(teamRewardFee + farmerRewardFee):
                                                    revert with 0, 32, 33, 0x1f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _25033 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_25033] = 26
                                                mem[_25033 + 32] = 'SafeMath: division by zero'
                                                _26382 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_26382] = 30
                                                mem[_26382 + 32] = 'SafeMath: subtraction overflow'
                                                if (balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000 > balanceOf[stor18[s].field_0] * stor25 / stor20:
                                                    _27106 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _27106 + 68] = mem[idx + _26382 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_27106 + 68] = mem[_27106 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _27106 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= (95 * balanceOf[stor18[s].field_0] * stor25 / stor20) - (95 * (balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if (balanceOf[stor18[s].field_0] * stor25 / stor20) - ((balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = (balanceOf[stor18[s].field_0] * stor25 / stor20) - ((balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, (balanceOf[stor18[s].field_0] * stor25 / stor20) - ((balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = (balanceOf[stor18[s].field_0] * stor25 / stor20) - ((balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    emit Withdraw(((balanceOf[stor18[s].field_0] * stor25 / stor20) - ((balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                            else:
                                if (balanceOf[stor18[s].field_0] * stor25 / stor20 * farmerRewardFee) - (stor31[stor18[s].field_0].field_256 * farmerRewardFee) / (balanceOf[stor18[s].field_0] * stor25 / stor20) - stor31[stor18[s].field_0].field_256 != farmerRewardFee:
                                    revert with 0, 32, 33, 0x1f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                _17249 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_17249] = 26
                                mem[_17249 + 32] = 'SafeMath: division by zero'
                                require ext_code.size(tokenAddress)
                                staticcall tokenAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args address(this.address)
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if (balanceOf[stor18[s].field_0] * stor25 / stor20 * farmerRewardFee) - (stor31[stor18[s].field_0].field_256 * farmerRewardFee) / 10000 > ext_call.return_data[0]:
                                    mem[0] = stor18[s].field_0
                                    emit 0x658fe604: ((balanceOf[stor18[s].field_0] * stor25 / stor20 * farmerRewardFee) - (stor31[stor18[s].field_0].field_256 * farmerRewardFee) / 10000), farmerAddress
                                    if not (balanceOf[stor18[s].field_0] * stor25 / stor20) - stor31[stor18[s].field_0].field_256:
                                        _17911 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_17911] = 26
                                        mem[_17911 + 32] = 'SafeMath: division by zero'
                                        require ext_code.size(tokenAddress)
                                        staticcall tokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(this.address)
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if 0 > ext_call.return_data[0]:
                                            emit 0x658fe604: 0, stor4
                                            sub_2445aefb--
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _18564 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_18564] = 30
                                            mem[_18564 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor19:
                                                _18840 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _18840 + 68] = mem[idx + _18564 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_18840 + 68] = mem[_18840 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _18840 + -mem[64] + 100
                                            stor19 -= stor31[stor18[s].field_0].field_256
                                            _19307 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_19307] = 30
                                            mem[_19307 + 32] = 'SafeMath: subtraction overflow'
                                            if balanceOf[stor18[s].field_0] > stor20:
                                                _19672 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _19672 + 68] = mem[idx + _19307 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_19672 + 68] = mem[_19672 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _19672 + -mem[64] + 100
                                            stor20 -= balanceOf[stor18[s].field_0]
                                            mem[0] = stor18[s].field_0
                                            stor21[stor18[s].field_0] = 0
                                            mem[32] = 31
                                            _20317 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_20317] = 30
                                            mem[_20317 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor8:
                                                _20755 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _20755 + 68] = mem[idx + _20317 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_20755 + 68] = mem[_20755 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _20755 + -mem[64] + 100
                                            stor8 -= stor31[stor18[s].field_0].field_256
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _21614 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_21614] = 30
                                            mem[_21614 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_512 > stor9:
                                                _22128 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _22128 + 68] = mem[idx + _21614 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_22128 + 68] = mem[_22128 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _22128 + -mem[64] + 100
                                            stor9 -= stor31[stor18[s].field_0].field_512
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            stor31[stor18[s].field_0].field_256 = 0
                                            stor31[stor18[s].field_0].field_512 = 0
                                            stor31[stor18[s].field_0].field_0 = 0
                                            stor10--
                                            investorCount--
                                            if not (balanceOf[stor18[s].field_0] * stor25 / stor20) - stor31[stor18[s].field_0].field_256:
                                                _23825 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_23825] = 26
                                                mem[_23825 + 32] = 'SafeMath: division by zero'
                                                _24677 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24677] = 30
                                                mem[_24677 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > balanceOf[stor18[s].field_0] * stor25 / stor20:
                                                    _24902 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _24902 + 68] = mem[idx + _24677 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_24902 + 68] = mem[_24902 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _24902 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= 95 * balanceOf[stor18[s].field_0] * stor25 / stor20 / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if balanceOf[stor18[s].field_0] * stor25 / stor20 <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = balanceOf[stor18[s].field_0] * stor25 / stor20
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, balanceOf[stor18[s].field_0] * stor25 / stor20
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = balanceOf[stor18[s].field_0] * stor25 / stor20
                                                    emit Withdraw((balanceOf[stor18[s].field_0] * stor25 / stor20), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                            else:
                                                if (balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / (balanceOf[stor18[s].field_0] * stor25 / stor20) - stor31[stor18[s].field_0].field_256 != uint16(teamRewardFee + farmerRewardFee):
                                                    revert with 0, 32, 33, 0x1f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _23995 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_23995] = 26
                                                mem[_23995 + 32] = 'SafeMath: division by zero'
                                                _24783 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24783] = 30
                                                mem[_24783 + 32] = 'SafeMath: subtraction overflow'
                                                if (balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000 > balanceOf[stor18[s].field_0] * stor25 / stor20:
                                                    _25021 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _25021 + 68] = mem[idx + _24783 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_25021 + 68] = mem[_25021 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _25021 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= (95 * balanceOf[stor18[s].field_0] * stor25 / stor20) - (95 * (balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if (balanceOf[stor18[s].field_0] * stor25 / stor20) - ((balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = (balanceOf[stor18[s].field_0] * stor25 / stor20) - ((balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, (balanceOf[stor18[s].field_0] * stor25 / stor20) - ((balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = (balanceOf[stor18[s].field_0] * stor25 / stor20) - ((balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    emit Withdraw(((balanceOf[stor18[s].field_0] * stor25 / stor20) - ((balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                        else:
                                            require ext_code.size(tokenAddress)
                                            call tokenAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args stor4, 0
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0]
                                            sub_2445aefb--
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _19132 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_19132] = 30
                                            mem[_19132 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor19:
                                                _19497 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _19497 + 68] = mem[idx + _19132 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_19497 + 68] = mem[_19497 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _19497 + -mem[64] + 100
                                            stor19 -= stor31[stor18[s].field_0].field_256
                                            _20065 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_20065] = 30
                                            mem[_20065 + 32] = 'SafeMath: subtraction overflow'
                                            if balanceOf[stor18[s].field_0] > stor20:
                                                _20539 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _20539 + 68] = mem[idx + _20065 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_20539 + 68] = mem[_20539 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _20539 + -mem[64] + 100
                                            stor20 -= balanceOf[stor18[s].field_0]
                                            mem[0] = stor18[s].field_0
                                            stor21[stor18[s].field_0] = 0
                                            mem[32] = 31
                                            _21340 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_21340] = 30
                                            mem[_21340 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor8:
                                                _21859 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _21859 + 68] = mem[idx + _21340 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_21859 + 68] = mem[_21859 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _21859 + -mem[64] + 100
                                            stor8 -= stor31[stor18[s].field_0].field_256
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _22701 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_22701] = 30
                                            mem[_22701 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_512 > stor9:
                                                _23159 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _23159 + 68] = mem[idx + _22701 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_23159 + 68] = mem[_23159 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _23159 + -mem[64] + 100
                                            stor9 -= stor31[stor18[s].field_0].field_512
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            stor31[stor18[s].field_0].field_256 = 0
                                            stor31[stor18[s].field_0].field_512 = 0
                                            stor31[stor18[s].field_0].field_0 = 0
                                            stor10--
                                            investorCount--
                                            if not (balanceOf[stor18[s].field_0] * stor25 / stor20) - stor31[stor18[s].field_0].field_256:
                                                _24460 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24460] = 26
                                                mem[_24460 + 32] = 'SafeMath: division by zero'
                                                _25150 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_25150] = 30
                                                mem[_25150 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > balanceOf[stor18[s].field_0] * stor25 / stor20:
                                                    _25513 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _25513 + 68] = mem[idx + _25150 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_25513 + 68] = mem[_25513 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _25513 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= 95 * balanceOf[stor18[s].field_0] * stor25 / stor20 / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if balanceOf[stor18[s].field_0] * stor25 / stor20 <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = balanceOf[stor18[s].field_0] * stor25 / stor20
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, balanceOf[stor18[s].field_0] * stor25 / stor20
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = balanceOf[stor18[s].field_0] * stor25 / stor20
                                                    emit Withdraw((balanceOf[stor18[s].field_0] * stor25 / stor20), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                            else:
                                                if (balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / (balanceOf[stor18[s].field_0] * stor25 / stor20) - stor31[stor18[s].field_0].field_256 != uint16(teamRewardFee + farmerRewardFee):
                                                    revert with 0, 32, 33, 0x1f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _24581 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24581] = 26
                                                mem[_24581 + 32] = 'SafeMath: division by zero'
                                                _25313 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_25313] = 30
                                                mem[_25313 + 32] = 'SafeMath: subtraction overflow'
                                                if (balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000 > balanceOf[stor18[s].field_0] * stor25 / stor20:
                                                    _25747 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _25747 + 68] = mem[idx + _25313 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_25747 + 68] = mem[_25747 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _25747 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= (95 * balanceOf[stor18[s].field_0] * stor25 / stor20) - (95 * (balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if (balanceOf[stor18[s].field_0] * stor25 / stor20) - ((balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = (balanceOf[stor18[s].field_0] * stor25 / stor20) - ((balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, (balanceOf[stor18[s].field_0] * stor25 / stor20) - ((balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = (balanceOf[stor18[s].field_0] * stor25 / stor20) - ((balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    emit Withdraw(((balanceOf[stor18[s].field_0] * stor25 / stor20) - ((balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                    else:
                                        if (balanceOf[stor18[s].field_0] * stor25 / stor20 * teamRewardFee) - (stor31[stor18[s].field_0].field_256 * teamRewardFee) / (balanceOf[stor18[s].field_0] * stor25 / stor20) - stor31[stor18[s].field_0].field_256 != teamRewardFee:
                                            revert with 0, 32, 33, 0x1f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _17944 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_17944] = 26
                                        mem[_17944 + 32] = 'SafeMath: division by zero'
                                        require ext_code.size(tokenAddress)
                                        staticcall tokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(this.address)
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if (balanceOf[stor18[s].field_0] * stor25 / stor20 * teamRewardFee) - (stor31[stor18[s].field_0].field_256 * teamRewardFee) / 10000 > ext_call.return_data[0]:
                                            emit 0x658fe604: ((balanceOf[stor18[s].field_0] * stor25 / stor20 * teamRewardFee) - (stor31[stor18[s].field_0].field_256 * teamRewardFee) / 10000), stor4
                                            sub_2445aefb--
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _18704 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_18704] = 30
                                            mem[_18704 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor19:
                                                _18977 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _18977 + 68] = mem[idx + _18704 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_18977 + 68] = mem[_18977 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _18977 + -mem[64] + 100
                                            stor19 -= stor31[stor18[s].field_0].field_256
                                            _19493 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_19493] = 30
                                            mem[_19493 + 32] = 'SafeMath: subtraction overflow'
                                            if balanceOf[stor18[s].field_0] > stor20:
                                                _19842 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _19842 + 68] = mem[idx + _19493 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_19842 + 68] = mem[_19842 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _19842 + -mem[64] + 100
                                            stor20 -= balanceOf[stor18[s].field_0]
                                            mem[0] = stor18[s].field_0
                                            stor21[stor18[s].field_0] = 0
                                            mem[32] = 31
                                            _20534 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_20534] = 30
                                            mem[_20534 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor8:
                                                _21026 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _21026 + 68] = mem[idx + _20534 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_21026 + 68] = mem[_21026 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _21026 + -mem[64] + 100
                                            stor8 -= stor31[stor18[s].field_0].field_256
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _21854 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_21854] = 30
                                            mem[_21854 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_512 > stor9:
                                                _22419 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _22419 + 68] = mem[idx + _21854 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_22419 + 68] = mem[_22419 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _22419 + -mem[64] + 100
                                            stor9 -= stor31[stor18[s].field_0].field_512
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            stor31[stor18[s].field_0].field_256 = 0
                                            stor31[stor18[s].field_0].field_512 = 0
                                            stor31[stor18[s].field_0].field_0 = 0
                                            stor10--
                                            investorCount--
                                            if not (balanceOf[stor18[s].field_0] * stor25 / stor20) - stor31[stor18[s].field_0].field_256:
                                                _23992 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_23992] = 26
                                                mem[_23992 + 32] = 'SafeMath: division by zero'
                                                _24782 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24782] = 30
                                                mem[_24782 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > balanceOf[stor18[s].field_0] * stor25 / stor20:
                                                    _25018 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _25018 + 68] = mem[idx + _24782 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_25018 + 68] = mem[_25018 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _25018 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= 95 * balanceOf[stor18[s].field_0] * stor25 / stor20 / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if balanceOf[stor18[s].field_0] * stor25 / stor20 <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = balanceOf[stor18[s].field_0] * stor25 / stor20
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, balanceOf[stor18[s].field_0] * stor25 / stor20
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = balanceOf[stor18[s].field_0] * stor25 / stor20
                                                    emit Withdraw((balanceOf[stor18[s].field_0] * stor25 / stor20), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                            else:
                                                if (balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / (balanceOf[stor18[s].field_0] * stor25 / stor20) - stor31[stor18[s].field_0].field_256 != uint16(teamRewardFee + farmerRewardFee):
                                                    revert with 0, 32, 33, 0x1f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _24139 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24139] = 26
                                                mem[_24139 + 32] = 'SafeMath: division by zero'
                                                _24901 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24901] = 30
                                                mem[_24901 + 32] = 'SafeMath: subtraction overflow'
                                                if (balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000 > balanceOf[stor18[s].field_0] * stor25 / stor20:
                                                    _25144 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _25144 + 68] = mem[idx + _24901 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_25144 + 68] = mem[_25144 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _25144 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= (95 * balanceOf[stor18[s].field_0] * stor25 / stor20) - (95 * (balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if (balanceOf[stor18[s].field_0] * stor25 / stor20) - ((balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = (balanceOf[stor18[s].field_0] * stor25 / stor20) - ((balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, (balanceOf[stor18[s].field_0] * stor25 / stor20) - ((balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = (balanceOf[stor18[s].field_0] * stor25 / stor20) - ((balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    emit Withdraw(((balanceOf[stor18[s].field_0] * stor25 / stor20) - ((balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                        else:
                                            require ext_code.size(tokenAddress)
                                            call tokenAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args stor4, (balanceOf[stor18[s].field_0] * stor25 / stor20 * teamRewardFee) - (stor31[stor18[s].field_0].field_256 * teamRewardFee) / 10000
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0]
                                            sub_2445aefb--
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _19306 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_19306] = 30
                                            mem[_19306 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor19:
                                                _19669 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _19669 + 68] = mem[idx + _19306 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_19669 + 68] = mem[_19669 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _19669 + -mem[64] + 100
                                            stor19 -= stor31[stor18[s].field_0].field_256
                                            _20314 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_20314] = 30
                                            mem[_20314 + 32] = 'SafeMath: subtraction overflow'
                                            if balanceOf[stor18[s].field_0] > stor20:
                                                _20752 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _20752 + 68] = mem[idx + _20314 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_20752 + 68] = mem[_20752 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _20752 + -mem[64] + 100
                                            stor20 -= balanceOf[stor18[s].field_0]
                                            mem[0] = stor18[s].field_0
                                            stor21[stor18[s].field_0] = 0
                                            mem[32] = 31
                                            _21611 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_21611] = 30
                                            mem[_21611 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor8:
                                                _22125 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _22125 + 68] = mem[idx + _21611 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_22125 + 68] = mem[_22125 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _22125 + -mem[64] + 100
                                            stor8 -= stor31[stor18[s].field_0].field_256
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _22939 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_22939] = 30
                                            mem[_22939 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_512 > stor9:
                                                _23376 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _23376 + 68] = mem[idx + _22939 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_23376 + 68] = mem[_23376 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _23376 + -mem[64] + 100
                                            stor9 -= stor31[stor18[s].field_0].field_512
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            stor31[stor18[s].field_0].field_256 = 0
                                            stor31[stor18[s].field_0].field_512 = 0
                                            stor31[stor18[s].field_0].field_0 = 0
                                            stor10--
                                            investorCount--
                                            if not (balanceOf[stor18[s].field_0] * stor25 / stor20) - stor31[stor18[s].field_0].field_256:
                                                _24580 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24580] = 26
                                                mem[_24580 + 32] = 'SafeMath: division by zero'
                                                _25307 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_25307] = 30
                                                mem[_25307 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > balanceOf[stor18[s].field_0] * stor25 / stor20:
                                                    _25741 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _25741 + 68] = mem[idx + _25307 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_25741 + 68] = mem[_25741 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _25741 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= 95 * balanceOf[stor18[s].field_0] * stor25 / stor20 / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if balanceOf[stor18[s].field_0] * stor25 / stor20 <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = balanceOf[stor18[s].field_0] * stor25 / stor20
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, balanceOf[stor18[s].field_0] * stor25 / stor20
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = balanceOf[stor18[s].field_0] * stor25 / stor20
                                                    emit Withdraw((balanceOf[stor18[s].field_0] * stor25 / stor20), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                            else:
                                                if (balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / (balanceOf[stor18[s].field_0] * stor25 / stor20) - stor31[stor18[s].field_0].field_256 != uint16(teamRewardFee + farmerRewardFee):
                                                    revert with 0, 32, 33, 0x1f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _24676 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24676] = 26
                                                mem[_24676 + 32] = 'SafeMath: division by zero'
                                                _25508 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_25508] = 30
                                                mem[_25508 + 32] = 'SafeMath: subtraction overflow'
                                                if (balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000 > balanceOf[stor18[s].field_0] * stor25 / stor20:
                                                    _26018 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _26018 + 68] = mem[idx + _25508 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_26018 + 68] = mem[_26018 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _26018 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= (95 * balanceOf[stor18[s].field_0] * stor25 / stor20) - (95 * (balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if (balanceOf[stor18[s].field_0] * stor25 / stor20) - ((balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = (balanceOf[stor18[s].field_0] * stor25 / stor20) - ((balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, (balanceOf[stor18[s].field_0] * stor25 / stor20) - ((balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = (balanceOf[stor18[s].field_0] * stor25 / stor20) - ((balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    emit Withdraw(((balanceOf[stor18[s].field_0] * stor25 / stor20) - ((balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                else:
                                    require ext_code.size(tokenAddress)
                                    call tokenAddress.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args farmerAddress, (balanceOf[stor18[s].field_0] * stor25 / stor20 * farmerRewardFee) - (stor31[stor18[s].field_0].field_256 * farmerRewardFee) / 10000
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_call.return_data[0]
                                    if not (balanceOf[stor18[s].field_0] * stor25 / stor20) - stor31[stor18[s].field_0].field_256:
                                        _18059 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_18059] = 26
                                        mem[_18059 + 32] = 'SafeMath: division by zero'
                                        require ext_code.size(tokenAddress)
                                        staticcall tokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(this.address)
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if 0 > ext_call.return_data[0]:
                                            emit 0x658fe604: 0, stor4
                                            sub_2445aefb--
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _19135 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_19135] = 30
                                            mem[_19135 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor19:
                                                _19500 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _19500 + 68] = mem[idx + _19135 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_19500 + 68] = mem[_19500 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _19500 + -mem[64] + 100
                                            stor19 -= stor31[stor18[s].field_0].field_256
                                            _20070 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_20070] = 30
                                            mem[_20070 + 32] = 'SafeMath: subtraction overflow'
                                            if balanceOf[stor18[s].field_0] > stor20:
                                                _20546 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _20546 + 68] = mem[idx + _20070 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_20546 + 68] = mem[_20546 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _20546 + -mem[64] + 100
                                            stor20 -= balanceOf[stor18[s].field_0]
                                            mem[0] = stor18[s].field_0
                                            stor21[stor18[s].field_0] = 0
                                            mem[32] = 31
                                            _21349 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_21349] = 30
                                            mem[_21349 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor8:
                                                _21866 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _21866 + 68] = mem[idx + _21349 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_21866 + 68] = mem[_21866 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _21866 + -mem[64] + 100
                                            stor8 -= stor31[stor18[s].field_0].field_256
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _22709 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_22709] = 30
                                            mem[_22709 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_512 > stor9:
                                                _23166 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _23166 + 68] = mem[idx + _22709 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_23166 + 68] = mem[_23166 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _23166 + -mem[64] + 100
                                            stor9 -= stor31[stor18[s].field_0].field_512
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            stor31[stor18[s].field_0].field_256 = 0
                                            stor31[stor18[s].field_0].field_512 = 0
                                            stor31[stor18[s].field_0].field_0 = 0
                                            stor10--
                                            investorCount--
                                            if not (balanceOf[stor18[s].field_0] * stor25 / stor20) - stor31[stor18[s].field_0].field_256:
                                                _24465 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24465] = 26
                                                mem[_24465 + 32] = 'SafeMath: division by zero'
                                                _25152 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_25152] = 30
                                                mem[_25152 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > balanceOf[stor18[s].field_0] * stor25 / stor20:
                                                    _25517 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _25517 + 68] = mem[idx + _25152 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_25517 + 68] = mem[_25517 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _25517 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= 95 * balanceOf[stor18[s].field_0] * stor25 / stor20 / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if balanceOf[stor18[s].field_0] * stor25 / stor20 <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = balanceOf[stor18[s].field_0] * stor25 / stor20
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, balanceOf[stor18[s].field_0] * stor25 / stor20
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = balanceOf[stor18[s].field_0] * stor25 / stor20
                                                    emit Withdraw((balanceOf[stor18[s].field_0] * stor25 / stor20), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                            else:
                                                if (balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / (balanceOf[stor18[s].field_0] * stor25 / stor20) - stor31[stor18[s].field_0].field_256 != uint16(teamRewardFee + farmerRewardFee):
                                                    revert with 0, 32, 33, 0x1f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _24585 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24585] = 26
                                                mem[_24585 + 32] = 'SafeMath: division by zero'
                                                _25315 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_25315] = 30
                                                mem[_25315 + 32] = 'SafeMath: subtraction overflow'
                                                if (balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000 > balanceOf[stor18[s].field_0] * stor25 / stor20:
                                                    _25753 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _25753 + 68] = mem[idx + _25315 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_25753 + 68] = mem[_25753 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _25753 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= (95 * balanceOf[stor18[s].field_0] * stor25 / stor20) - (95 * (balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if (balanceOf[stor18[s].field_0] * stor25 / stor20) - ((balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = (balanceOf[stor18[s].field_0] * stor25 / stor20) - ((balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, (balanceOf[stor18[s].field_0] * stor25 / stor20) - ((balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = (balanceOf[stor18[s].field_0] * stor25 / stor20) - ((balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    emit Withdraw(((balanceOf[stor18[s].field_0] * stor25 / stor20) - ((balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                        else:
                                            require ext_code.size(tokenAddress)
                                            call tokenAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args stor4, 0
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0]
                                            sub_2445aefb--
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _19848 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_19848] = 30
                                            mem[_19848 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor19:
                                                _20325 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _20325 + 68] = mem[idx + _19848 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_20325 + 68] = mem[_20325 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _20325 + -mem[64] + 100
                                            stor19 -= stor31[stor18[s].field_0].field_256
                                            _21036 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_21036] = 30
                                            mem[_21036 + 32] = 'SafeMath: subtraction overflow'
                                            if balanceOf[stor18[s].field_0] > stor20:
                                                _21623 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _21623 + 68] = mem[idx + _21036 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_21623 + 68] = mem[_21623 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _21623 + -mem[64] + 100
                                            stor20 -= balanceOf[stor18[s].field_0]
                                            mem[0] = stor18[s].field_0
                                            stor21[stor18[s].field_0] = 0
                                            mem[32] = 31
                                            _22429 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_22429] = 30
                                            mem[_22429 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor8:
                                                _22950 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _22950 + 68] = mem[idx + _22429 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_22950 + 68] = mem[_22950 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _22950 + -mem[64] + 100
                                            stor8 -= stor31[stor18[s].field_0].field_256
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _23614 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_23614] = 30
                                            mem[_23614 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_512 > stor9:
                                                _24001 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _24001 + 68] = mem[idx + _23614 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_24001 + 68] = mem[_24001 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _24001 + -mem[64] + 100
                                            stor9 -= stor31[stor18[s].field_0].field_512
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            stor31[stor18[s].field_0].field_256 = 0
                                            stor31[stor18[s].field_0].field_512 = 0
                                            stor31[stor18[s].field_0].field_0 = 0
                                            stor10--
                                            investorCount--
                                            if not (balanceOf[stor18[s].field_0] * stor25 / stor20) - stor31[stor18[s].field_0].field_256:
                                                _24907 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24907] = 26
                                                mem[_24907 + 32] = 'SafeMath: division by zero'
                                                _26035 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_26035] = 30
                                                mem[_26035 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > balanceOf[stor18[s].field_0] * stor25 / stor20:
                                                    _26707 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _26707 + 68] = mem[idx + _26035 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_26707 + 68] = mem[_26707 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _26707 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= 95 * balanceOf[stor18[s].field_0] * stor25 / stor20 / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if balanceOf[stor18[s].field_0] * stor25 / stor20 <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = balanceOf[stor18[s].field_0] * stor25 / stor20
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, balanceOf[stor18[s].field_0] * stor25 / stor20
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = balanceOf[stor18[s].field_0] * stor25 / stor20
                                                    emit Withdraw((balanceOf[stor18[s].field_0] * stor25 / stor20), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                            else:
                                                if (balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / (balanceOf[stor18[s].field_0] * stor25 / stor20) - stor31[stor18[s].field_0].field_256 != uint16(teamRewardFee + farmerRewardFee):
                                                    revert with 0, 32, 33, 0x1f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _25025 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_25025] = 26
                                                mem[_25025 + 32] = 'SafeMath: division by zero'
                                                _26362 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_26362] = 30
                                                mem[_26362 + 32] = 'SafeMath: subtraction overflow'
                                                if (balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000 > balanceOf[stor18[s].field_0] * stor25 / stor20:
                                                    _27085 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _27085 + 68] = mem[idx + _26362 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_27085 + 68] = mem[_27085 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _27085 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= (95 * balanceOf[stor18[s].field_0] * stor25 / stor20) - (95 * (balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if (balanceOf[stor18[s].field_0] * stor25 / stor20) - ((balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = (balanceOf[stor18[s].field_0] * stor25 / stor20) - ((balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, (balanceOf[stor18[s].field_0] * stor25 / stor20) - ((balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = (balanceOf[stor18[s].field_0] * stor25 / stor20) - ((balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    emit Withdraw(((balanceOf[stor18[s].field_0] * stor25 / stor20) - ((balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                    else:
                                        if (balanceOf[stor18[s].field_0] * stor25 / stor20 * teamRewardFee) - (stor31[stor18[s].field_0].field_256 * teamRewardFee) / (balanceOf[stor18[s].field_0] * stor25 / stor20) - stor31[stor18[s].field_0].field_256 != teamRewardFee:
                                            revert with 0, 32, 33, 0x1f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _18096 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_18096] = 26
                                        mem[_18096 + 32] = 'SafeMath: division by zero'
                                        require ext_code.size(tokenAddress)
                                        staticcall tokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(this.address)
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if (balanceOf[stor18[s].field_0] * stor25 / stor20 * teamRewardFee) - (stor31[stor18[s].field_0].field_256 * teamRewardFee) / 10000 > ext_call.return_data[0]:
                                            emit 0x658fe604: ((balanceOf[stor18[s].field_0] * stor25 / stor20 * teamRewardFee) - (stor31[stor18[s].field_0].field_256 * teamRewardFee) / 10000), stor4
                                            sub_2445aefb--
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _19310 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_19310] = 30
                                            mem[_19310 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor19:
                                                _19675 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _19675 + 68] = mem[idx + _19310 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_19675 + 68] = mem[_19675 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _19675 + -mem[64] + 100
                                            stor19 -= stor31[stor18[s].field_0].field_256
                                            _20321 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_20321] = 30
                                            mem[_20321 + 32] = 'SafeMath: subtraction overflow'
                                            if balanceOf[stor18[s].field_0] > stor20:
                                                _20758 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _20758 + 68] = mem[idx + _20321 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_20758 + 68] = mem[_20758 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _20758 + -mem[64] + 100
                                            stor20 -= balanceOf[stor18[s].field_0]
                                            mem[0] = stor18[s].field_0
                                            stor21[stor18[s].field_0] = 0
                                            mem[32] = 31
                                            _21618 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_21618] = 30
                                            mem[_21618 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor8:
                                                _22131 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _22131 + 68] = mem[idx + _21618 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_22131 + 68] = mem[_22131 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _22131 + -mem[64] + 100
                                            stor8 -= stor31[stor18[s].field_0].field_256
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _22945 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_22945] = 30
                                            mem[_22945 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_512 > stor9:
                                                _23379 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _23379 + 68] = mem[idx + _22945 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_23379 + 68] = mem[_23379 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _23379 + -mem[64] + 100
                                            stor9 -= stor31[stor18[s].field_0].field_512
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            stor31[stor18[s].field_0].field_256 = 0
                                            stor31[stor18[s].field_0].field_512 = 0
                                            stor31[stor18[s].field_0].field_0 = 0
                                            stor10--
                                            investorCount--
                                            if not (balanceOf[stor18[s].field_0] * stor25 / stor20) - stor31[stor18[s].field_0].field_256:
                                                _24582 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24582] = 26
                                                mem[_24582 + 32] = 'SafeMath: division by zero'
                                                _25314 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_25314] = 30
                                                mem[_25314 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > balanceOf[stor18[s].field_0] * stor25 / stor20:
                                                    _25750 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _25750 + 68] = mem[idx + _25314 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_25750 + 68] = mem[_25750 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _25750 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= 95 * balanceOf[stor18[s].field_0] * stor25 / stor20 / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if balanceOf[stor18[s].field_0] * stor25 / stor20 <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = balanceOf[stor18[s].field_0] * stor25 / stor20
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, balanceOf[stor18[s].field_0] * stor25 / stor20
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = balanceOf[stor18[s].field_0] * stor25 / stor20
                                                    emit Withdraw((balanceOf[stor18[s].field_0] * stor25 / stor20), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                            else:
                                                if (balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / (balanceOf[stor18[s].field_0] * stor25 / stor20) - stor31[stor18[s].field_0].field_256 != uint16(teamRewardFee + farmerRewardFee):
                                                    revert with 0, 32, 33, 0x1f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _24678 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24678] = 26
                                                mem[_24678 + 32] = 'SafeMath: division by zero'
                                                _25516 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_25516] = 30
                                                mem[_25516 + 32] = 'SafeMath: subtraction overflow'
                                                if (balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000 > balanceOf[stor18[s].field_0] * stor25 / stor20:
                                                    _26029 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _26029 + 68] = mem[idx + _25516 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_26029 + 68] = mem[_26029 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _26029 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= (95 * balanceOf[stor18[s].field_0] * stor25 / stor20) - (95 * (balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if (balanceOf[stor18[s].field_0] * stor25 / stor20) - ((balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = (balanceOf[stor18[s].field_0] * stor25 / stor20) - ((balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, (balanceOf[stor18[s].field_0] * stor25 / stor20) - ((balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = (balanceOf[stor18[s].field_0] * stor25 / stor20) - ((balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    emit Withdraw(((balanceOf[stor18[s].field_0] * stor25 / stor20) - ((balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                        else:
                                            require ext_code.size(tokenAddress)
                                            call tokenAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args stor4, (balanceOf[stor18[s].field_0] * stor25 / stor20 * teamRewardFee) - (stor31[stor18[s].field_0].field_256 * teamRewardFee) / 10000
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0]
                                            sub_2445aefb--
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _20069 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_20069] = 30
                                            mem[_20069 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor19:
                                                _20543 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _20543 + 68] = mem[idx + _20069 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_20543 + 68] = mem[_20543 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _20543 + -mem[64] + 100
                                            stor19 -= stor31[stor18[s].field_0].field_256
                                            _21346 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_21346] = 30
                                            mem[_21346 + 32] = 'SafeMath: subtraction overflow'
                                            if balanceOf[stor18[s].field_0] > stor20:
                                                _21863 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _21863 + 68] = mem[idx + _21346 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_21863 + 68] = mem[_21863 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _21863 + -mem[64] + 100
                                            stor20 -= balanceOf[stor18[s].field_0]
                                            mem[0] = stor18[s].field_0
                                            stor21[stor18[s].field_0] = 0
                                            mem[32] = 31
                                            _22706 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_22706] = 30
                                            mem[_22706 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor8:
                                                _23163 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _23163 + 68] = mem[idx + _22706 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_23163 + 68] = mem[_23163 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _23163 + -mem[64] + 100
                                            stor8 -= stor31[stor18[s].field_0].field_256
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _23830 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_23830] = 30
                                            mem[_23830 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_512 > stor9:
                                                _24142 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _24142 + 68] = mem[idx + _23830 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_24142 + 68] = mem[_24142 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _24142 + -mem[64] + 100
                                            stor9 -= stor31[stor18[s].field_0].field_512
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            stor31[stor18[s].field_0].field_256 = 0
                                            stor31[stor18[s].field_0].field_512 = 0
                                            stor31[stor18[s].field_0].field_0 = 0
                                            stor10--
                                            investorCount--
                                            if not (balanceOf[stor18[s].field_0] * stor25 / stor20) - stor31[stor18[s].field_0].field_256:
                                                _25024 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_25024] = 26
                                                mem[_25024 + 32] = 'SafeMath: division by zero'
                                                _26356 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_26356] = 30
                                                mem[_26356 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > balanceOf[stor18[s].field_0] * stor25 / stor20:
                                                    _27079 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _27079 + 68] = mem[idx + _26356 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_27079 + 68] = mem[_27079 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _27079 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= 95 * balanceOf[stor18[s].field_0] * stor25 / stor20 / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if balanceOf[stor18[s].field_0] * stor25 / stor20 <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = balanceOf[stor18[s].field_0] * stor25 / stor20
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, balanceOf[stor18[s].field_0] * stor25 / stor20
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = balanceOf[stor18[s].field_0] * stor25 / stor20
                                                    emit Withdraw((balanceOf[stor18[s].field_0] * stor25 / stor20), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                            else:
                                                if (balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / (balanceOf[stor18[s].field_0] * stor25 / stor20) - stor31[stor18[s].field_0].field_256 != uint16(teamRewardFee + farmerRewardFee):
                                                    revert with 0, 32, 33, 0x1f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _25151 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_25151] = 26
                                                mem[_25151 + 32] = 'SafeMath: division by zero'
                                                _26702 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_26702] = 30
                                                mem[_26702 + 32] = 'SafeMath: subtraction overflow'
                                                if (balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000 > balanceOf[stor18[s].field_0] * stor25 / stor20:
                                                    _27513 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _27513 + 68] = mem[idx + _26702 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_27513 + 68] = mem[_27513 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _27513 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= (95 * balanceOf[stor18[s].field_0] * stor25 / stor20) - (95 * (balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if (balanceOf[stor18[s].field_0] * stor25 / stor20) - ((balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = (balanceOf[stor18[s].field_0] * stor25 / stor20) - ((balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, (balanceOf[stor18[s].field_0] * stor25 / stor20) - ((balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = (balanceOf[stor18[s].field_0] * stor25 / stor20) - ((balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    emit Withdraw(((balanceOf[stor18[s].field_0] * stor25 / stor20) - ((balanceOf[stor18[s].field_0] * stor25 / stor20 * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                else:
                    require ext_code.size(tokenAddress)
                    staticcall tokenAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not stor18[s].field_0:
                        revert with 0, 32, 33, 0x7342455032303a206275726e2066726f6d20746865207a65726f20616464726573, mem[mem[64] + 101 len 31]
                    _17003 = mem[64]
                    mem[64] = mem[64] + 96
                    mem[_17003] = 34
                    mem[_17003 + 32 len 34] = 0x6f42455032303a206275726e20616d6f756e7420657863656564732062616c616e63
                    mem[32] = 32
                    if balanceOf[stor18[s].field_0] > balanceOf[stor18[s].field_0]:
                        _17039 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 34
                        idx = 0
                        while idx < 34:
                            mem[idx + _17039 + 68] = mem[idx + _17003 + 32]
                            idx = idx + 32
                            continue 
                        mem[_17039 + 100] = mem[_17039 + 130 len 2]
                        revert with memory
                          from mem[64]
                           len _17039 + -mem[64] + 132
                    mem[0] = stor18[s].field_0
                    mem[32] = 32
                    balanceOf[stor18[s].field_0] = 0
                    _17068 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_17068] = 30
                    mem[_17068 + 32] = 'SafeMath: subtraction overflow'
                    if balanceOf[stor18[s].field_0] > _totalSupply:
                        _17105 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 30
                        idx = 0
                        while idx < 30:
                            mem[idx + _17105 + 68] = mem[idx + _17068 + 32]
                            idx = idx + 32
                            continue 
                        mem[_17105 + 68] = mem[_17105 + 70 len 30]
                        revert with memory
                          from mem[64]
                           len _17105 + -mem[64] + 100
                    _totalSupply -= balanceOf[stor18[s].field_0]
                    emit Transfer(balanceOf[stor18[s].field_0], stor18[s].field_0, 0);
                    stor25 -= ext_call.return_data[0]
                    sub_a14ed18a -= ext_call.return_data[0]
                    if ext_call.return_data[0] <= stor31[stor18[s].field_0].field_256:
                        sub_2445aefb--
                        mem[0] = stor18[s].field_0
                        mem[32] = 31
                        _17223 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_17223] = 30
                        mem[_17223 + 32] = 'SafeMath: subtraction overflow'
                        if stor31[stor18[s].field_0].field_256 > stor19:
                            _17282 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[idx + _17282 + 68] = mem[idx + _17223 + 32]
                                idx = idx + 32
                                continue 
                            mem[_17282 + 68] = mem[_17282 + 70 len 30]
                            revert with memory
                              from mem[64]
                               len _17282 + -mem[64] + 100
                        stor19 -= stor31[stor18[s].field_0].field_256
                        _17388 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_17388] = 30
                        mem[_17388 + 32] = 'SafeMath: subtraction overflow'
                        if balanceOf[stor18[s].field_0] > stor20:
                            _17462 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[idx + _17462 + 68] = mem[idx + _17388 + 32]
                                idx = idx + 32
                                continue 
                            mem[_17462 + 68] = mem[_17462 + 70 len 30]
                            revert with memory
                              from mem[64]
                               len _17462 + -mem[64] + 100
                        stor20 -= balanceOf[stor18[s].field_0]
                        mem[0] = stor18[s].field_0
                        stor21[stor18[s].field_0] = 0
                        mem[32] = 31
                        _17628 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_17628] = 30
                        mem[_17628 + 32] = 'SafeMath: subtraction overflow'
                        if stor31[stor18[s].field_0].field_256 > stor8:
                            _17720 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[idx + _17720 + 68] = mem[idx + _17628 + 32]
                                idx = idx + 32
                                continue 
                            mem[_17720 + 68] = mem[_17720 + 70 len 30]
                            revert with memory
                              from mem[64]
                               len _17720 + -mem[64] + 100
                        stor8 -= stor31[stor18[s].field_0].field_256
                        mem[0] = stor18[s].field_0
                        mem[32] = 31
                        _17876 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_17876] = 30
                        mem[_17876 + 32] = 'SafeMath: subtraction overflow'
                        if stor31[stor18[s].field_0].field_512 > stor9:
                            _17950 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[idx + _17950 + 68] = mem[idx + _17876 + 32]
                                idx = idx + 32
                                continue 
                            mem[_17950 + 68] = mem[_17950 + 70 len 30]
                            revert with memory
                              from mem[64]
                               len _17950 + -mem[64] + 100
                        stor9 -= stor31[stor18[s].field_0].field_512
                        mem[0] = stor18[s].field_0
                        mem[32] = 31
                        stor31[stor18[s].field_0].field_256 = 0
                        stor31[stor18[s].field_0].field_512 = 0
                        stor31[stor18[s].field_0].field_0 = 0
                        stor10--
                        investorCount--
                        _18239 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_18239] = 26
                        mem[_18239 + 32] = 'SafeMath: division by zero'
                        _18870 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_18870] = 30
                        mem[_18870 + 32] = 'SafeMath: subtraction overflow'
                        if 0 > ext_call.return_data[0]:
                            _19164 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[idx + _19164 + 68] = mem[idx + _18870 + 32]
                                idx = idx + 32
                                continue 
                            mem[_19164 + 68] = mem[_19164 + 70 len 30]
                            revert with memory
                              from mem[64]
                               len _19164 + -mem[64] + 100
                        require ext_code.size(tokenAddress)
                        staticcall tokenAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args address(this.address)
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] <= 95 * ext_call.return_data[0] / 100:
                            revert with 0, 'pool doesnot have enough balance'
                        require ext_code.size(tokenAddress)
                        staticcall tokenAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] > ext_call.return_data[0]:
                            require ext_code.size(tokenAddress)
                            staticcall tokenAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                        mem[mem[64] + 4] = stor18[s].field_0
                        mem[mem[64] + 36] = ext_call.return_data[0]
                        require ext_code.size(tokenAddress)
                        call tokenAddress.0xa9059cbb with:
                             gas gas_remaining wei
                            args stor18[s].field_0, ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_call.return_data[0]
                        mem[mem[64]] = ext_call.return_data[0]
                        emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                    else:
                        mem[0] = stor18[s].field_0
                        mem[32] = 31
                        if not ext_call.return_data[0] - stor31[stor18[s].field_0].field_256:
                            sub_2445aefb--
                            mem[0] = stor18[s].field_0
                            mem[32] = 31
                            _17222 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_17222] = 30
                            mem[_17222 + 32] = 'SafeMath: subtraction overflow'
                            if stor31[stor18[s].field_0].field_256 > stor19:
                                _17279 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[idx + _17279 + 68] = mem[idx + _17222 + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_17279 + 68] = mem[_17279 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _17279 + -mem[64] + 100
                            stor19 -= stor31[stor18[s].field_0].field_256
                            _17384 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_17384] = 30
                            mem[_17384 + 32] = 'SafeMath: subtraction overflow'
                            if balanceOf[stor18[s].field_0] > stor20:
                                _17459 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[idx + _17459 + 68] = mem[idx + _17384 + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_17459 + 68] = mem[_17459 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _17459 + -mem[64] + 100
                            stor20 -= balanceOf[stor18[s].field_0]
                            mem[0] = stor18[s].field_0
                            stor21[stor18[s].field_0] = 0
                            mem[32] = 31
                            _17623 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_17623] = 30
                            mem[_17623 + 32] = 'SafeMath: subtraction overflow'
                            if stor31[stor18[s].field_0].field_256 > stor8:
                                _17715 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[idx + _17715 + 68] = mem[idx + _17623 + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_17715 + 68] = mem[_17715 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _17715 + -mem[64] + 100
                            stor8 -= stor31[stor18[s].field_0].field_256
                            mem[0] = stor18[s].field_0
                            mem[32] = 31
                            _17872 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_17872] = 30
                            mem[_17872 + 32] = 'SafeMath: subtraction overflow'
                            if stor31[stor18[s].field_0].field_512 > stor9:
                                _17946 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[idx + _17946 + 68] = mem[idx + _17872 + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_17946 + 68] = mem[_17946 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _17946 + -mem[64] + 100
                            stor9 -= stor31[stor18[s].field_0].field_512
                            mem[0] = stor18[s].field_0
                            mem[32] = 31
                            stor31[stor18[s].field_0].field_256 = 0
                            stor31[stor18[s].field_0].field_512 = 0
                            stor31[stor18[s].field_0].field_0 = 0
                            stor10--
                            investorCount--
                            if not ext_call.return_data[0] - stor31[stor18[s].field_0].field_256:
                                _18234 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_18234] = 26
                                mem[_18234 + 32] = 'SafeMath: division by zero'
                                _18858 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_18858] = 30
                                mem[_18858 + 32] = 'SafeMath: subtraction overflow'
                                if 0 > ext_call.return_data[0]:
                                    _19146 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[idx + _19146 + 68] = mem[idx + _18858 + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_19146 + 68] = mem[_19146 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _19146 + -mem[64] + 100
                                require ext_code.size(tokenAddress)
                                staticcall tokenAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args address(this.address)
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] <= 95 * ext_call.return_data[0] / 100:
                                    revert with 0, 'pool doesnot have enough balance'
                                require ext_code.size(tokenAddress)
                                staticcall tokenAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] > ext_call.return_data[0]:
                                    require ext_code.size(tokenAddress)
                                    staticcall tokenAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                mem[mem[64] + 4] = stor18[s].field_0
                                mem[mem[64] + 36] = ext_call.return_data[0]
                                require ext_code.size(tokenAddress)
                                call tokenAddress.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args stor18[s].field_0, ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_call.return_data[0]
                                mem[mem[64]] = ext_call.return_data[0]
                                emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                            else:
                                if (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / ext_call.return_data[0] - stor31[stor18[s].field_0].field_256 != uint16(teamRewardFee + farmerRewardFee):
                                    revert with 0, 32, 33, 0x1f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                _18319 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_18319] = 26
                                mem[_18319 + 32] = 'SafeMath: division by zero'
                                _18992 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_18992] = 30
                                mem[_18992 + 32] = 'SafeMath: subtraction overflow'
                                if (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000 > ext_call.return_data[0]:
                                    _19323 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    idx = 0
                                    while idx < 30:
                                        mem[idx + _19323 + 68] = mem[idx + _18992 + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_19323 + 68] = mem[_19323 + 70 len 30]
                                    revert with memory
                                      from mem[64]
                                       len _19323 + -mem[64] + 100
                                require ext_code.size(tokenAddress)
                                staticcall tokenAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args address(this.address)
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] <= (95 * ext_call.return_data[0]) - (95 * (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) / 100:
                                    revert with 0, 'pool doesnot have enough balance'
                                require ext_code.size(tokenAddress)
                                staticcall tokenAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) <= ext_call.return_data[0]:
                                    mem[mem[64] + 4] = stor18[s].field_0
                                    mem[mem[64] + 36] = ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                    require ext_code.size(tokenAddress)
                                    call tokenAddress.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args stor18[s].field_0, ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_call.return_data[0]
                                    mem[mem[64]] = ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                    emit Withdraw((ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)), stor18[s].field_0);
                                else:
                                    require ext_code.size(tokenAddress)
                                    staticcall tokenAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[mem[64] + 4] = stor18[s].field_0
                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                    require ext_code.size(tokenAddress)
                                    call tokenAddress.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args stor18[s].field_0, ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_call.return_data[0]
                                    mem[mem[64]] = ext_call.return_data[0]
                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                        else:
                            if not ext_call.return_data[0] - stor31[stor18[s].field_0].field_256:
                                _17334 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_17334] = 26
                                mem[_17334 + 32] = 'SafeMath: division by zero'
                                require ext_code.size(tokenAddress)
                                staticcall tokenAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args address(this.address)
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if 0 > ext_call.return_data[0]:
                                    mem[0] = stor18[s].field_0
                                    emit 0x658fe604: 0, farmerAddress
                                    if not ext_call.return_data[0] - stor31[stor18[s].field_0].field_256:
                                        _18022 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_18022] = 26
                                        mem[_18022 + 32] = 'SafeMath: division by zero'
                                        require ext_code.size(tokenAddress)
                                        staticcall tokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(this.address)
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if 0 > ext_call.return_data[0]:
                                            emit 0x658fe604: 0, stor4
                                            sub_2445aefb--
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _18998 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_18998] = 30
                                            mem[_18998 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor19:
                                                _19335 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _19335 + 68] = mem[idx + _18998 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_19335 + 68] = mem[_19335 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _19335 + -mem[64] + 100
                                            stor19 -= stor31[stor18[s].field_0].field_256
                                            _19875 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_19875] = 30
                                            mem[_19875 + 32] = 'SafeMath: subtraction overflow'
                                            if balanceOf[stor18[s].field_0] > stor20:
                                                _20366 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _20366 + 68] = mem[idx + _19875 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_20366 + 68] = mem[_20366 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _20366 + -mem[64] + 100
                                            stor20 -= balanceOf[stor18[s].field_0]
                                            mem[0] = stor18[s].field_0
                                            stor21[stor18[s].field_0] = 0
                                            mem[32] = 31
                                            _21079 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_21079] = 30
                                            mem[_21079 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor8:
                                                _21664 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _21664 + 68] = mem[idx + _21079 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_21664 + 68] = mem[_21664 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _21664 + -mem[64] + 100
                                            stor8 -= stor31[stor18[s].field_0].field_256
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _22479 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_22479] = 30
                                            mem[_22479 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_512 > stor9:
                                                _22987 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _22987 + 68] = mem[idx + _22479 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_22987 + 68] = mem[_22987 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _22987 + -mem[64] + 100
                                            stor9 -= stor31[stor18[s].field_0].field_512
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            stor31[stor18[s].field_0].field_256 = 0
                                            stor31[stor18[s].field_0].field_512 = 0
                                            stor31[stor18[s].field_0].field_0 = 0
                                            stor10--
                                            investorCount--
                                            if not ext_call.return_data[0] - stor31[stor18[s].field_0].field_256:
                                                _24330 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24330] = 26
                                                mem[_24330 + 32] = 'SafeMath: division by zero'
                                                _25043 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_25043] = 30
                                                mem[_25043 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > ext_call.return_data[0]:
                                                    _25338 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _25338 + 68] = mem[idx + _25043 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_25338 + 68] = mem[_25338 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _25338 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= 95 * ext_call.return_data[0] / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] > ext_call.return_data[0]:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                mem[mem[64] + 4] = stor18[s].field_0
                                                mem[mem[64] + 36] = ext_call.return_data[0]
                                                require ext_code.size(tokenAddress)
                                                call tokenAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args stor18[s].field_0, ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                require ext_call.return_data[0]
                                                mem[mem[64]] = ext_call.return_data[0]
                                                emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                            else:
                                                if (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / ext_call.return_data[0] - stor31[stor18[s].field_0].field_256 != uint16(teamRewardFee + farmerRewardFee):
                                                    revert with 0, 32, 33, 0x1f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _24493 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24493] = 26
                                                mem[_24493 + 32] = 'SafeMath: division by zero'
                                                _25170 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_25170] = 30
                                                mem[_25170 + 32] = 'SafeMath: subtraction overflow'
                                                if (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000 > ext_call.return_data[0]:
                                                    _25549 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _25549 + 68] = mem[idx + _25170 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_25549 + 68] = mem[_25549 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _25549 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= (95 * ext_call.return_data[0]) - (95 * (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    emit Withdraw((ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                        else:
                                            require ext_code.size(tokenAddress)
                                            call tokenAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args stor4, 0
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0]
                                            sub_2445aefb--
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _19699 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_19699] = 30
                                            mem[_19699 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor19:
                                                _20105 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _20105 + 68] = mem[idx + _19699 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_20105 + 68] = mem[_20105 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _20105 + -mem[64] + 100
                                            stor19 -= stor31[stor18[s].field_0].field_256
                                            _20789 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_20789] = 30
                                            mem[_20789 + 32] = 'SafeMath: subtraction overflow'
                                            if balanceOf[stor18[s].field_0] > stor20:
                                                _21401 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _21401 + 68] = mem[idx + _20789 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_21401 + 68] = mem[_21401 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _21401 + -mem[64] + 100
                                            stor20 -= balanceOf[stor18[s].field_0]
                                            mem[0] = stor18[s].field_0
                                            stor21[stor18[s].field_0] = 0
                                            mem[32] = 31
                                            _22173 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_22173] = 30
                                            mem[_22173 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor8:
                                                _22755 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _22755 + 68] = mem[idx + _22173 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_22755 + 68] = mem[_22755 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _22755 + -mem[64] + 100
                                            stor8 -= stor31[stor18[s].field_0].field_256
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _23415 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_23415] = 30
                                            mem[_23415 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_512 > stor9:
                                                _23868 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _23868 + 68] = mem[idx + _23415 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_23868 + 68] = mem[_23868 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _23868 + -mem[64] + 100
                                            stor9 -= stor31[stor18[s].field_0].field_512
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            stor31[stor18[s].field_0].field_256 = 0
                                            stor31[stor18[s].field_0].field_512 = 0
                                            stor31[stor18[s].field_0].field_0 = 0
                                            stor10--
                                            investorCount--
                                            if not ext_call.return_data[0] - stor31[stor18[s].field_0].field_256:
                                                _24801 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24801] = 26
                                                mem[_24801 + 32] = 'SafeMath: division by zero'
                                                _25791 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_25791] = 30
                                                mem[_25791 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > ext_call.return_data[0]:
                                                    _26412 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _26412 + 68] = mem[idx + _25791 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_26412 + 68] = mem[_26412 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _26412 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= 95 * ext_call.return_data[0] / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] > ext_call.return_data[0]:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                mem[mem[64] + 4] = stor18[s].field_0
                                                mem[mem[64] + 36] = ext_call.return_data[0]
                                                require ext_code.size(tokenAddress)
                                                call tokenAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args stor18[s].field_0, ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                require ext_call.return_data[0]
                                                mem[mem[64]] = ext_call.return_data[0]
                                                emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                            else:
                                                if (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / ext_call.return_data[0] - stor31[stor18[s].field_0].field_256 != uint16(teamRewardFee + farmerRewardFee):
                                                    revert with 0, 32, 33, 0x1f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _24927 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24927] = 26
                                                mem[_24927 + 32] = 'SafeMath: division by zero'
                                                _26081 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_26081] = 30
                                                mem[_26081 + 32] = 'SafeMath: subtraction overflow'
                                                if (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000 > ext_call.return_data[0]:
                                                    _26760 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _26760 + 68] = mem[idx + _26081 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_26760 + 68] = mem[_26760 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _26760 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= (95 * ext_call.return_data[0]) - (95 * (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    emit Withdraw((ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                    else:
                                        if (ext_call.return_data[0] * teamRewardFee) - (stor31[stor18[s].field_0].field_256 * teamRewardFee) / ext_call.return_data[0] - stor31[stor18[s].field_0].field_256 != teamRewardFee:
                                            revert with 0, 32, 33, 0x1f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _18067 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_18067] = 26
                                        mem[_18067 + 32] = 'SafeMath: division by zero'
                                        require ext_code.size(tokenAddress)
                                        staticcall tokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(this.address)
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if (ext_call.return_data[0] * teamRewardFee) - (stor31[stor18[s].field_0].field_256 * teamRewardFee) / 10000 > ext_call.return_data[0]:
                                            emit 0x658fe604: ((ext_call.return_data[0] * teamRewardFee) - (stor31[stor18[s].field_0].field_256 * teamRewardFee) / 10000), stor4
                                            sub_2445aefb--
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _19155 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_19155] = 30
                                            mem[_19155 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor19:
                                                _19530 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _19530 + 68] = mem[idx + _19155 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_19530 + 68] = mem[_19530 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _19530 + -mem[64] + 100
                                            stor19 -= stor31[stor18[s].field_0].field_256
                                            _20101 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_20101] = 30
                                            mem[_20101 + 32] = 'SafeMath: subtraction overflow'
                                            if balanceOf[stor18[s].field_0] > stor20:
                                                _20575 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _20575 + 68] = mem[idx + _20101 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_20575 + 68] = mem[_20575 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _20575 + -mem[64] + 100
                                            stor20 -= balanceOf[stor18[s].field_0]
                                            mem[0] = stor18[s].field_0
                                            stor21[stor18[s].field_0] = 0
                                            mem[32] = 31
                                            _21396 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_21396] = 30
                                            mem[_21396 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor8:
                                                _21896 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _21896 + 68] = mem[idx + _21396 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_21896 + 68] = mem[_21896 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _21896 + -mem[64] + 100
                                            stor8 -= stor31[stor18[s].field_0].field_256
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _22750 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_22750] = 30
                                            mem[_22750 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_512 > stor9:
                                                _23193 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _23193 + 68] = mem[idx + _22750 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_23193 + 68] = mem[_23193 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _23193 + -mem[64] + 100
                                            stor9 -= stor31[stor18[s].field_0].field_512
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            stor31[stor18[s].field_0].field_256 = 0
                                            stor31[stor18[s].field_0].field_512 = 0
                                            stor31[stor18[s].field_0].field_0 = 0
                                            stor10--
                                            investorCount--
                                            if not ext_call.return_data[0] - stor31[stor18[s].field_0].field_256:
                                                _24490 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24490] = 26
                                                mem[_24490 + 32] = 'SafeMath: division by zero'
                                                _25169 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_25169] = 30
                                                mem[_25169 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > ext_call.return_data[0]:
                                                    _25546 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _25546 + 68] = mem[idx + _25169 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_25546 + 68] = mem[_25546 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _25546 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= 95 * ext_call.return_data[0] / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] > ext_call.return_data[0]:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                mem[mem[64] + 4] = stor18[s].field_0
                                                mem[mem[64] + 36] = ext_call.return_data[0]
                                                require ext_code.size(tokenAddress)
                                                call tokenAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args stor18[s].field_0, ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                require ext_call.return_data[0]
                                                mem[mem[64]] = ext_call.return_data[0]
                                                emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                            else:
                                                if (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / ext_call.return_data[0] - stor31[stor18[s].field_0].field_256 != uint16(teamRewardFee + farmerRewardFee):
                                                    revert with 0, 32, 33, 0x1f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _24603 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24603] = 26
                                                mem[_24603 + 32] = 'SafeMath: division by zero'
                                                _25337 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_25337] = 30
                                                mem[_25337 + 32] = 'SafeMath: subtraction overflow'
                                                if (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000 > ext_call.return_data[0]:
                                                    _25785 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _25785 + 68] = mem[idx + _25337 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_25785 + 68] = mem[_25785 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _25785 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= (95 * ext_call.return_data[0]) - (95 * (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    emit Withdraw((ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                        else:
                                            require ext_code.size(tokenAddress)
                                            call tokenAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args stor4, (ext_call.return_data[0] * teamRewardFee) - (stor31[stor18[s].field_0].field_256 * teamRewardFee) / 10000
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0]
                                            sub_2445aefb--
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _19874 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_19874] = 30
                                            mem[_19874 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor19:
                                                _20363 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _20363 + 68] = mem[idx + _19874 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_20363 + 68] = mem[_20363 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _20363 + -mem[64] + 100
                                            stor19 -= stor31[stor18[s].field_0].field_256
                                            _21076 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_21076] = 30
                                            mem[_21076 + 32] = 'SafeMath: subtraction overflow'
                                            if balanceOf[stor18[s].field_0] > stor20:
                                                _21661 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _21661 + 68] = mem[idx + _21076 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_21661 + 68] = mem[_21661 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _21661 + -mem[64] + 100
                                            stor20 -= balanceOf[stor18[s].field_0]
                                            mem[0] = stor18[s].field_0
                                            stor21[stor18[s].field_0] = 0
                                            mem[32] = 31
                                            _22476 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_22476] = 30
                                            mem[_22476 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor8:
                                                _22984 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _22984 + 68] = mem[idx + _22476 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_22984 + 68] = mem[_22984 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _22984 + -mem[64] + 100
                                            stor8 -= stor31[stor18[s].field_0].field_256
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _23652 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_23652] = 30
                                            mem[_23652 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_512 > stor9:
                                                _24025 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _24025 + 68] = mem[idx + _23652 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_24025 + 68] = mem[_24025 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _24025 + -mem[64] + 100
                                            stor9 -= stor31[stor18[s].field_0].field_512
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            stor31[stor18[s].field_0].field_256 = 0
                                            stor31[stor18[s].field_0].field_512 = 0
                                            stor31[stor18[s].field_0].field_0 = 0
                                            stor10--
                                            investorCount--
                                            if not ext_call.return_data[0] - stor31[stor18[s].field_0].field_256:
                                                _24926 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24926] = 26
                                                mem[_24926 + 32] = 'SafeMath: division by zero'
                                                _26075 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_26075] = 30
                                                mem[_26075 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > ext_call.return_data[0]:
                                                    _26754 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _26754 + 68] = mem[idx + _26075 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_26754 + 68] = mem[_26754 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _26754 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= 95 * ext_call.return_data[0] / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] > ext_call.return_data[0]:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                mem[mem[64] + 4] = stor18[s].field_0
                                                mem[mem[64] + 36] = ext_call.return_data[0]
                                                require ext_code.size(tokenAddress)
                                                call tokenAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args stor18[s].field_0, ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                require ext_call.return_data[0]
                                                mem[mem[64]] = ext_call.return_data[0]
                                                emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                            else:
                                                if (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / ext_call.return_data[0] - stor31[stor18[s].field_0].field_256 != uint16(teamRewardFee + farmerRewardFee):
                                                    revert with 0, 32, 33, 0x1f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _25042 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_25042] = 26
                                                mem[_25042 + 32] = 'SafeMath: division by zero'
                                                _26407 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_26407] = 30
                                                mem[_26407 + 32] = 'SafeMath: subtraction overflow'
                                                if (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000 > ext_call.return_data[0]:
                                                    _27139 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _27139 + 68] = mem[idx + _26407 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_27139 + 68] = mem[_27139 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _27139 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= (95 * ext_call.return_data[0]) - (95 * (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    emit Withdraw((ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                else:
                                    require ext_code.size(tokenAddress)
                                    call tokenAddress.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args farmerAddress, 0
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_call.return_data[0]
                                    if not ext_call.return_data[0] - stor31[stor18[s].field_0].field_256:
                                        _18165 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_18165] = 26
                                        mem[_18165 + 32] = 'SafeMath: division by zero'
                                        require ext_code.size(tokenAddress)
                                        staticcall tokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(this.address)
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if 0 > ext_call.return_data[0]:
                                            emit 0x658fe604: 0, stor4
                                            sub_2445aefb--
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _19702 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_19702] = 30
                                            mem[_19702 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor19:
                                                _20108 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _20108 + 68] = mem[idx + _19702 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_20108 + 68] = mem[_20108 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _20108 + -mem[64] + 100
                                            stor19 -= stor31[stor18[s].field_0].field_256
                                            _20794 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_20794] = 30
                                            mem[_20794 + 32] = 'SafeMath: subtraction overflow'
                                            if balanceOf[stor18[s].field_0] > stor20:
                                                _21408 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _21408 + 68] = mem[idx + _20794 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_21408 + 68] = mem[_21408 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _21408 + -mem[64] + 100
                                            stor20 -= balanceOf[stor18[s].field_0]
                                            mem[0] = stor18[s].field_0
                                            stor21[stor18[s].field_0] = 0
                                            mem[32] = 31
                                            _22182 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_22182] = 30
                                            mem[_22182 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor8:
                                                _22762 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _22762 + 68] = mem[idx + _22182 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_22762 + 68] = mem[_22762 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _22762 + -mem[64] + 100
                                            stor8 -= stor31[stor18[s].field_0].field_256
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _23423 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_23423] = 30
                                            mem[_23423 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_512 > stor9:
                                                _23875 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _23875 + 68] = mem[idx + _23423 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_23875 + 68] = mem[_23875 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _23875 + -mem[64] + 100
                                            stor9 -= stor31[stor18[s].field_0].field_512
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            stor31[stor18[s].field_0].field_256 = 0
                                            stor31[stor18[s].field_0].field_512 = 0
                                            stor31[stor18[s].field_0].field_0 = 0
                                            stor10--
                                            investorCount--
                                            if not ext_call.return_data[0] - stor31[stor18[s].field_0].field_256:
                                                _24806 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24806] = 26
                                                mem[_24806 + 32] = 'SafeMath: division by zero'
                                                _25793 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_25793] = 30
                                                mem[_25793 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > ext_call.return_data[0]:
                                                    _26416 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _26416 + 68] = mem[idx + _25793 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_26416 + 68] = mem[_26416 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _26416 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= 95 * ext_call.return_data[0] / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] > ext_call.return_data[0]:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                mem[mem[64] + 4] = stor18[s].field_0
                                                mem[mem[64] + 36] = ext_call.return_data[0]
                                                require ext_code.size(tokenAddress)
                                                call tokenAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args stor18[s].field_0, ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                require ext_call.return_data[0]
                                                mem[mem[64]] = ext_call.return_data[0]
                                                emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                            else:
                                                if (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / ext_call.return_data[0] - stor31[stor18[s].field_0].field_256 != uint16(teamRewardFee + farmerRewardFee):
                                                    revert with 0, 32, 33, 0x1f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _24931 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24931] = 26
                                                mem[_24931 + 32] = 'SafeMath: division by zero'
                                                _26083 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_26083] = 30
                                                mem[_26083 + 32] = 'SafeMath: subtraction overflow'
                                                if (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000 > ext_call.return_data[0]:
                                                    _26766 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _26766 + 68] = mem[idx + _26083 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_26766 + 68] = mem[_26766 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _26766 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= (95 * ext_call.return_data[0]) - (95 * (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    emit Withdraw((ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                        else:
                                            require ext_code.size(tokenAddress)
                                            call tokenAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args stor4, 0
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0]
                                            sub_2445aefb--
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _20581 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_20581] = 30
                                            mem[_20581 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor19:
                                                _21087 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _21087 + 68] = mem[idx + _20581 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_21087 + 68] = mem[_21087 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _21087 + -mem[64] + 100
                                            stor19 -= stor31[stor18[s].field_0].field_256
                                            _21906 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_21906] = 30
                                            mem[_21906 + 32] = 'SafeMath: subtraction overflow'
                                            if balanceOf[stor18[s].field_0] > stor20:
                                                _22488 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _22488 + 68] = mem[idx + _21906 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_22488 + 68] = mem[_22488 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _22488 + -mem[64] + 100
                                            stor20 -= balanceOf[stor18[s].field_0]
                                            mem[0] = stor18[s].field_0
                                            stor21[stor18[s].field_0] = 0
                                            mem[32] = 31
                                            _23203 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_23203] = 30
                                            mem[_23203 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor8:
                                                _23663 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _23663 + 68] = mem[idx + _23203 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_23663 + 68] = mem[_23663 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _23663 + -mem[64] + 100
                                            stor8 -= stor31[stor18[s].field_0].field_256
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _24168 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_24168] = 30
                                            mem[_24168 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_512 > stor9:
                                                _24499 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _24499 + 68] = mem[idx + _24168 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_24499 + 68] = mem[_24499 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _24499 + -mem[64] + 100
                                            stor9 -= stor31[stor18[s].field_0].field_512
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            stor31[stor18[s].field_0].field_256 = 0
                                            stor31[stor18[s].field_0].field_512 = 0
                                            stor31[stor18[s].field_0].field_0 = 0
                                            stor10--
                                            investorCount--
                                            if not ext_call.return_data[0] - stor31[stor18[s].field_0].field_256:
                                                _25343 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_25343] = 26
                                                mem[_25343 + 32] = 'SafeMath: division by zero'
                                                _27156 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_27156] = 30
                                                mem[_27156 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > ext_call.return_data[0]:
                                                    _28040 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _28040 + 68] = mem[idx + _27156 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_28040 + 68] = mem[_28040 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _28040 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= 95 * ext_call.return_data[0] / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] > ext_call.return_data[0]:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                mem[mem[64] + 4] = stor18[s].field_0
                                                mem[mem[64] + 36] = ext_call.return_data[0]
                                                require ext_code.size(tokenAddress)
                                                call tokenAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args stor18[s].field_0, ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                require ext_call.return_data[0]
                                                mem[mem[64]] = ext_call.return_data[0]
                                                emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                            else:
                                                if (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / ext_call.return_data[0] - stor31[stor18[s].field_0].field_256 != uint16(teamRewardFee + farmerRewardFee):
                                                    revert with 0, 32, 33, 0x1f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _25553 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_25553] = 26
                                                mem[_25553 + 32] = 'SafeMath: division by zero'
                                                _27606 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_27606] = 30
                                                mem[_27606 + 32] = 'SafeMath: subtraction overflow'
                                                if (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000 > ext_call.return_data[0]:
                                                    _28425 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _28425 + 68] = mem[idx + _27606 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_28425 + 68] = mem[_28425 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _28425 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= (95 * ext_call.return_data[0]) - (95 * (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    emit Withdraw((ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                    else:
                                        if (ext_call.return_data[0] * teamRewardFee) - (stor31[stor18[s].field_0].field_256 * teamRewardFee) / ext_call.return_data[0] - stor31[stor18[s].field_0].field_256 != teamRewardFee:
                                            revert with 0, 32, 33, 0x1f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _18238 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_18238] = 26
                                        mem[_18238 + 32] = 'SafeMath: division by zero'
                                        require ext_code.size(tokenAddress)
                                        staticcall tokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(this.address)
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if (ext_call.return_data[0] * teamRewardFee) - (stor31[stor18[s].field_0].field_256 * teamRewardFee) / 10000 > ext_call.return_data[0]:
                                            emit 0x658fe604: ((ext_call.return_data[0] * teamRewardFee) - (stor31[stor18[s].field_0].field_256 * teamRewardFee) / 10000), stor4
                                            sub_2445aefb--
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _19878 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_19878] = 30
                                            mem[_19878 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor19:
                                                _20369 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _20369 + 68] = mem[idx + _19878 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_20369 + 68] = mem[_20369 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _20369 + -mem[64] + 100
                                            stor19 -= stor31[stor18[s].field_0].field_256
                                            _21083 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_21083] = 30
                                            mem[_21083 + 32] = 'SafeMath: subtraction overflow'
                                            if balanceOf[stor18[s].field_0] > stor20:
                                                _21667 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _21667 + 68] = mem[idx + _21083 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_21667 + 68] = mem[_21667 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _21667 + -mem[64] + 100
                                            stor20 -= balanceOf[stor18[s].field_0]
                                            mem[0] = stor18[s].field_0
                                            stor21[stor18[s].field_0] = 0
                                            mem[32] = 31
                                            _22483 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_22483] = 30
                                            mem[_22483 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor8:
                                                _22990 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _22990 + 68] = mem[idx + _22483 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_22990 + 68] = mem[_22990 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _22990 + -mem[64] + 100
                                            stor8 -= stor31[stor18[s].field_0].field_256
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _23658 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_23658] = 30
                                            mem[_23658 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_512 > stor9:
                                                _24028 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _24028 + 68] = mem[idx + _23658 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_24028 + 68] = mem[_24028 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _24028 + -mem[64] + 100
                                            stor9 -= stor31[stor18[s].field_0].field_512
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            stor31[stor18[s].field_0].field_256 = 0
                                            stor31[stor18[s].field_0].field_512 = 0
                                            stor31[stor18[s].field_0].field_0 = 0
                                            stor10--
                                            investorCount--
                                            if not ext_call.return_data[0] - stor31[stor18[s].field_0].field_256:
                                                _24928 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24928] = 26
                                                mem[_24928 + 32] = 'SafeMath: division by zero'
                                                _26082 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_26082] = 30
                                                mem[_26082 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > ext_call.return_data[0]:
                                                    _26763 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _26763 + 68] = mem[idx + _26082 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_26763 + 68] = mem[_26763 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _26763 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= 95 * ext_call.return_data[0] / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] > ext_call.return_data[0]:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                mem[mem[64] + 4] = stor18[s].field_0
                                                mem[mem[64] + 36] = ext_call.return_data[0]
                                                require ext_code.size(tokenAddress)
                                                call tokenAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args stor18[s].field_0, ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                require ext_call.return_data[0]
                                                mem[mem[64]] = ext_call.return_data[0]
                                                emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                            else:
                                                if (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / ext_call.return_data[0] - stor31[stor18[s].field_0].field_256 != uint16(teamRewardFee + farmerRewardFee):
                                                    revert with 0, 32, 33, 0x1f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _25044 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_25044] = 26
                                                mem[_25044 + 32] = 'SafeMath: division by zero'
                                                _26415 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_26415] = 30
                                                mem[_26415 + 32] = 'SafeMath: subtraction overflow'
                                                if (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000 > ext_call.return_data[0]:
                                                    _27150 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _27150 + 68] = mem[idx + _26415 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_27150 + 68] = mem[_27150 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _27150 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= (95 * ext_call.return_data[0]) - (95 * (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    emit Withdraw((ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                        else:
                                            require ext_code.size(tokenAddress)
                                            call tokenAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args stor4, (ext_call.return_data[0] * teamRewardFee) - (stor31[stor18[s].field_0].field_256 * teamRewardFee) / 10000
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0]
                                            sub_2445aefb--
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _20793 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_20793] = 30
                                            mem[_20793 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor19:
                                                _21405 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _21405 + 68] = mem[idx + _20793 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_21405 + 68] = mem[_21405 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _21405 + -mem[64] + 100
                                            stor19 -= stor31[stor18[s].field_0].field_256
                                            _22179 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_22179] = 30
                                            mem[_22179 + 32] = 'SafeMath: subtraction overflow'
                                            if balanceOf[stor18[s].field_0] > stor20:
                                                _22759 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _22759 + 68] = mem[idx + _22179 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_22759 + 68] = mem[_22759 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _22759 + -mem[64] + 100
                                            stor20 -= balanceOf[stor18[s].field_0]
                                            mem[0] = stor18[s].field_0
                                            stor21[stor18[s].field_0] = 0
                                            mem[32] = 31
                                            _23420 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_23420] = 30
                                            mem[_23420 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor8:
                                                _23872 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _23872 + 68] = mem[idx + _23420 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_23872 + 68] = mem[_23872 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _23872 + -mem[64] + 100
                                            stor8 -= stor31[stor18[s].field_0].field_256
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _24335 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_24335] = 30
                                            mem[_24335 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_512 > stor9:
                                                _24606 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _24606 + 68] = mem[idx + _24335 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_24606 + 68] = mem[_24606 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _24606 + -mem[64] + 100
                                            stor9 -= stor31[stor18[s].field_0].field_512
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            stor31[stor18[s].field_0].field_256 = 0
                                            stor31[stor18[s].field_0].field_512 = 0
                                            stor31[stor18[s].field_0].field_0 = 0
                                            stor10--
                                            investorCount--
                                            if not ext_call.return_data[0] - stor31[stor18[s].field_0].field_256:
                                                _25552 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_25552] = 26
                                                mem[_25552 + 32] = 'SafeMath: division by zero'
                                                _27600 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_27600] = 30
                                                mem[_27600 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > ext_call.return_data[0]:
                                                    _28419 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _28419 + 68] = mem[idx + _27600 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_28419 + 68] = mem[_28419 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _28419 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= 95 * ext_call.return_data[0] / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] > ext_call.return_data[0]:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                mem[mem[64] + 4] = stor18[s].field_0
                                                mem[mem[64] + 36] = ext_call.return_data[0]
                                                require ext_code.size(tokenAddress)
                                                call tokenAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args stor18[s].field_0, ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                require ext_call.return_data[0]
                                                mem[mem[64]] = ext_call.return_data[0]
                                                emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                            else:
                                                if (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / ext_call.return_data[0] - stor31[stor18[s].field_0].field_256 != uint16(teamRewardFee + farmerRewardFee):
                                                    revert with 0, 32, 33, 0x1f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _25792 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_25792] = 26
                                                mem[_25792 + 32] = 'SafeMath: division by zero'
                                                _28035 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_28035] = 30
                                                mem[_28035 + 32] = 'SafeMath: subtraction overflow'
                                                if (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000 > ext_call.return_data[0]:
                                                    _28859 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _28859 + 68] = mem[idx + _28035 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_28859 + 68] = mem[_28859 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _28859 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= (95 * ext_call.return_data[0]) - (95 * (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    emit Withdraw((ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                            else:
                                if (ext_call.return_data[0] * farmerRewardFee) - (stor31[stor18[s].field_0].field_256 * farmerRewardFee) / ext_call.return_data[0] - stor31[stor18[s].field_0].field_256 != farmerRewardFee:
                                    revert with 0, 32, 33, 0x1f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                _17387 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_17387] = 26
                                mem[_17387 + 32] = 'SafeMath: division by zero'
                                require ext_code.size(tokenAddress)
                                staticcall tokenAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args address(this.address)
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if (ext_call.return_data[0] * farmerRewardFee) - (stor31[stor18[s].field_0].field_256 * farmerRewardFee) / 10000 > ext_call.return_data[0]:
                                    mem[0] = stor18[s].field_0
                                    emit 0x658fe604: ((ext_call.return_data[0] * farmerRewardFee) - (stor31[stor18[s].field_0].field_256 * farmerRewardFee) / 10000), farmerAddress
                                    if not ext_call.return_data[0] - stor31[stor18[s].field_0].field_256:
                                        _18066 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_18066] = 26
                                        mem[_18066 + 32] = 'SafeMath: division by zero'
                                        require ext_code.size(tokenAddress)
                                        staticcall tokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(this.address)
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if 0 > ext_call.return_data[0]:
                                            emit 0x658fe604: 0, stor4
                                            sub_2445aefb--
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _19151 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_19151] = 30
                                            mem[_19151 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor19:
                                                _19521 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _19521 + 68] = mem[idx + _19151 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_19521 + 68] = mem[_19521 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _19521 + -mem[64] + 100
                                            stor19 -= stor31[stor18[s].field_0].field_256
                                            _20096 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_20096] = 30
                                            mem[_20096 + 32] = 'SafeMath: subtraction overflow'
                                            if balanceOf[stor18[s].field_0] > stor20:
                                                _20568 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _20568 + 68] = mem[idx + _20096 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_20568 + 68] = mem[_20568 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _20568 + -mem[64] + 100
                                            stor20 -= balanceOf[stor18[s].field_0]
                                            mem[0] = stor18[s].field_0
                                            stor21[stor18[s].field_0] = 0
                                            mem[32] = 31
                                            _21385 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_21385] = 30
                                            mem[_21385 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor8:
                                                _21889 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _21889 + 68] = mem[idx + _21385 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_21889 + 68] = mem[_21889 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _21889 + -mem[64] + 100
                                            stor8 -= stor31[stor18[s].field_0].field_256
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _22738 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_22738] = 30
                                            mem[_22738 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_512 > stor9:
                                                _23184 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _23184 + 68] = mem[idx + _22738 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_23184 + 68] = mem[_23184 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _23184 + -mem[64] + 100
                                            stor9 -= stor31[stor18[s].field_0].field_512
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            stor31[stor18[s].field_0].field_256 = 0
                                            stor31[stor18[s].field_0].field_512 = 0
                                            stor31[stor18[s].field_0].field_0 = 0
                                            stor10--
                                            investorCount--
                                            if not ext_call.return_data[0] - stor31[stor18[s].field_0].field_256:
                                                _24479 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24479] = 26
                                                mem[_24479 + 32] = 'SafeMath: division by zero'
                                                _25166 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_25166] = 30
                                                mem[_25166 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > ext_call.return_data[0]:
                                                    _25540 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _25540 + 68] = mem[idx + _25166 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_25540 + 68] = mem[_25540 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _25540 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= 95 * ext_call.return_data[0] / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] > ext_call.return_data[0]:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                mem[mem[64] + 4] = stor18[s].field_0
                                                mem[mem[64] + 36] = ext_call.return_data[0]
                                                require ext_code.size(tokenAddress)
                                                call tokenAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args stor18[s].field_0, ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                require ext_call.return_data[0]
                                                mem[mem[64]] = ext_call.return_data[0]
                                                emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                            else:
                                                if (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / ext_call.return_data[0] - stor31[stor18[s].field_0].field_256 != uint16(teamRewardFee + farmerRewardFee):
                                                    revert with 0, 32, 33, 0x1f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _24594 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24594] = 26
                                                mem[_24594 + 32] = 'SafeMath: division by zero'
                                                _25334 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_25334] = 30
                                                mem[_25334 + 32] = 'SafeMath: subtraction overflow'
                                                if (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000 > ext_call.return_data[0]:
                                                    _25780 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _25780 + 68] = mem[idx + _25334 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_25780 + 68] = mem[_25780 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _25780 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= (95 * ext_call.return_data[0]) - (95 * (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    emit Withdraw((ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                        else:
                                            require ext_code.size(tokenAddress)
                                            call tokenAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args stor4, 0
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0]
                                            sub_2445aefb--
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _19868 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_19868] = 30
                                            mem[_19868 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor19:
                                                _20356 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _20356 + 68] = mem[idx + _19868 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_20356 + 68] = mem[_20356 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _20356 + -mem[64] + 100
                                            stor19 -= stor31[stor18[s].field_0].field_256
                                            _21065 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_21065] = 30
                                            mem[_21065 + 32] = 'SafeMath: subtraction overflow'
                                            if balanceOf[stor18[s].field_0] > stor20:
                                                _21650 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _21650 + 68] = mem[idx + _21065 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_21650 + 68] = mem[_21650 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _21650 + -mem[64] + 100
                                            stor20 -= balanceOf[stor18[s].field_0]
                                            mem[0] = stor18[s].field_0
                                            stor21[stor18[s].field_0] = 0
                                            mem[32] = 31
                                            _22461 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_22461] = 30
                                            mem[_22461 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor8:
                                                _22973 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _22973 + 68] = mem[idx + _22461 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_22973 + 68] = mem[_22973 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _22973 + -mem[64] + 100
                                            stor8 -= stor31[stor18[s].field_0].field_256
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _23638 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_23638] = 30
                                            mem[_23638 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_512 > stor9:
                                                _24014 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _24014 + 68] = mem[idx + _23638 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_24014 + 68] = mem[_24014 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _24014 + -mem[64] + 100
                                            stor9 -= stor31[stor18[s].field_0].field_512
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            stor31[stor18[s].field_0].field_256 = 0
                                            stor31[stor18[s].field_0].field_512 = 0
                                            stor31[stor18[s].field_0].field_0 = 0
                                            stor10--
                                            investorCount--
                                            if not ext_call.return_data[0] - stor31[stor18[s].field_0].field_256:
                                                _24918 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24918] = 26
                                                mem[_24918 + 32] = 'SafeMath: division by zero'
                                                _26069 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_26069] = 30
                                                mem[_26069 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > ext_call.return_data[0]:
                                                    _26743 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _26743 + 68] = mem[idx + _26069 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_26743 + 68] = mem[_26743 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _26743 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= 95 * ext_call.return_data[0] / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] > ext_call.return_data[0]:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                mem[mem[64] + 4] = stor18[s].field_0
                                                mem[mem[64] + 36] = ext_call.return_data[0]
                                                require ext_code.size(tokenAddress)
                                                call tokenAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args stor18[s].field_0, ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                require ext_call.return_data[0]
                                                mem[mem[64]] = ext_call.return_data[0]
                                                emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                            else:
                                                if (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / ext_call.return_data[0] - stor31[stor18[s].field_0].field_256 != uint16(teamRewardFee + farmerRewardFee):
                                                    revert with 0, 32, 33, 0x1f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _25036 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_25036] = 26
                                                mem[_25036 + 32] = 'SafeMath: division by zero'
                                                _26399 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_26399] = 30
                                                mem[_26399 + 32] = 'SafeMath: subtraction overflow'
                                                if (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000 > ext_call.return_data[0]:
                                                    _27127 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _27127 + 68] = mem[idx + _26399 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_27127 + 68] = mem[_27127 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _27127 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= (95 * ext_call.return_data[0]) - (95 * (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    emit Withdraw((ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                    else:
                                        if (ext_call.return_data[0] * teamRewardFee) - (stor31[stor18[s].field_0].field_256 * teamRewardFee) / ext_call.return_data[0] - stor31[stor18[s].field_0].field_256 != teamRewardFee:
                                            revert with 0, 32, 33, 0x1f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _18100 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_18100] = 26
                                        mem[_18100 + 32] = 'SafeMath: division by zero'
                                        require ext_code.size(tokenAddress)
                                        staticcall tokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(this.address)
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if (ext_call.return_data[0] * teamRewardFee) - (stor31[stor18[s].field_0].field_256 * teamRewardFee) / 10000 > ext_call.return_data[0]:
                                            emit 0x658fe604: ((ext_call.return_data[0] * teamRewardFee) - (stor31[stor18[s].field_0].field_256 * teamRewardFee) / 10000), stor4
                                            sub_2445aefb--
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _19326 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_19326] = 30
                                            mem[_19326 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor19:
                                                _19691 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _19691 + 68] = mem[idx + _19326 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_19691 + 68] = mem[_19691 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _19691 + -mem[64] + 100
                                            stor19 -= stor31[stor18[s].field_0].field_256
                                            _20352 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_20352] = 30
                                            mem[_20352 + 32] = 'SafeMath: subtraction overflow'
                                            if balanceOf[stor18[s].field_0] > stor20:
                                                _20778 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _20778 + 68] = mem[idx + _20352 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_20778 + 68] = mem[_20778 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _20778 + -mem[64] + 100
                                            stor20 -= balanceOf[stor18[s].field_0]
                                            mem[0] = stor18[s].field_0
                                            stor21[stor18[s].field_0] = 0
                                            mem[32] = 31
                                            _21645 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_21645] = 30
                                            mem[_21645 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor8:
                                                _22155 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _22155 + 68] = mem[idx + _21645 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_22155 + 68] = mem[_22155 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _22155 + -mem[64] + 100
                                            stor8 -= stor31[stor18[s].field_0].field_256
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _22968 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_22968] = 30
                                            mem[_22968 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_512 > stor9:
                                                _23398 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _23398 + 68] = mem[idx + _22968 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_23398 + 68] = mem[_23398 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _23398 + -mem[64] + 100
                                            stor9 -= stor31[stor18[s].field_0].field_512
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            stor31[stor18[s].field_0].field_256 = 0
                                            stor31[stor18[s].field_0].field_512 = 0
                                            stor31[stor18[s].field_0].field_0 = 0
                                            stor10--
                                            investorCount--
                                            if not ext_call.return_data[0] - stor31[stor18[s].field_0].field_256:
                                                _24591 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24591] = 26
                                                mem[_24591 + 32] = 'SafeMath: division by zero'
                                                _25333 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_25333] = 30
                                                mem[_25333 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > ext_call.return_data[0]:
                                                    _25777 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _25777 + 68] = mem[idx + _25333 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_25777 + 68] = mem[_25777 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _25777 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= 95 * ext_call.return_data[0] / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] > ext_call.return_data[0]:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                mem[mem[64] + 4] = stor18[s].field_0
                                                mem[mem[64] + 36] = ext_call.return_data[0]
                                                require ext_code.size(tokenAddress)
                                                call tokenAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args stor18[s].field_0, ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                require ext_call.return_data[0]
                                                mem[mem[64]] = ext_call.return_data[0]
                                                emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                            else:
                                                if (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / ext_call.return_data[0] - stor31[stor18[s].field_0].field_256 != uint16(teamRewardFee + farmerRewardFee):
                                                    revert with 0, 32, 33, 0x1f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _24684 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24684] = 26
                                                mem[_24684 + 32] = 'SafeMath: division by zero'
                                                _25539 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_25539] = 30
                                                mem[_25539 + 32] = 'SafeMath: subtraction overflow'
                                                if (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000 > ext_call.return_data[0]:
                                                    _26063 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _26063 + 68] = mem[idx + _25539 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_26063 + 68] = mem[_26063 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _26063 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= (95 * ext_call.return_data[0]) - (95 * (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    emit Withdraw((ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                        else:
                                            require ext_code.size(tokenAddress)
                                            call tokenAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args stor4, (ext_call.return_data[0] * teamRewardFee) - (stor31[stor18[s].field_0].field_256 * teamRewardFee) / 10000
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0]
                                            sub_2445aefb--
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _20095 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_20095] = 30
                                            mem[_20095 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor19:
                                                _20565 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _20565 + 68] = mem[idx + _20095 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_20565 + 68] = mem[_20565 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _20565 + -mem[64] + 100
                                            stor19 -= stor31[stor18[s].field_0].field_256
                                            _21382 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_21382] = 30
                                            mem[_21382 + 32] = 'SafeMath: subtraction overflow'
                                            if balanceOf[stor18[s].field_0] > stor20:
                                                _21886 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _21886 + 68] = mem[idx + _21382 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_21886 + 68] = mem[_21886 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _21886 + -mem[64] + 100
                                            stor20 -= balanceOf[stor18[s].field_0]
                                            mem[0] = stor18[s].field_0
                                            stor21[stor18[s].field_0] = 0
                                            mem[32] = 31
                                            _22735 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_22735] = 30
                                            mem[_22735 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor8:
                                                _23181 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _23181 + 68] = mem[idx + _22735 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_23181 + 68] = mem[_23181 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _23181 + -mem[64] + 100
                                            stor8 -= stor31[stor18[s].field_0].field_256
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _23850 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_23850] = 30
                                            mem[_23850 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_512 > stor9:
                                                _24152 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _24152 + 68] = mem[idx + _23850 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_24152 + 68] = mem[_24152 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _24152 + -mem[64] + 100
                                            stor9 -= stor31[stor18[s].field_0].field_512
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            stor31[stor18[s].field_0].field_256 = 0
                                            stor31[stor18[s].field_0].field_512 = 0
                                            stor31[stor18[s].field_0].field_0 = 0
                                            stor10--
                                            investorCount--
                                            if not ext_call.return_data[0] - stor31[stor18[s].field_0].field_256:
                                                _25035 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_25035] = 26
                                                mem[_25035 + 32] = 'SafeMath: division by zero'
                                                _26393 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_26393] = 30
                                                mem[_26393 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > ext_call.return_data[0]:
                                                    _27121 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _27121 + 68] = mem[idx + _26393 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_27121 + 68] = mem[_27121 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _27121 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= 95 * ext_call.return_data[0] / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] > ext_call.return_data[0]:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                mem[mem[64] + 4] = stor18[s].field_0
                                                mem[mem[64] + 36] = ext_call.return_data[0]
                                                require ext_code.size(tokenAddress)
                                                call tokenAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args stor18[s].field_0, ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                require ext_call.return_data[0]
                                                mem[mem[64]] = ext_call.return_data[0]
                                                emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                            else:
                                                if (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / ext_call.return_data[0] - stor31[stor18[s].field_0].field_256 != uint16(teamRewardFee + farmerRewardFee):
                                                    revert with 0, 32, 33, 0x1f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _25165 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_25165] = 26
                                                mem[_25165 + 32] = 'SafeMath: division by zero'
                                                _26738 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_26738] = 30
                                                mem[_26738 + 32] = 'SafeMath: subtraction overflow'
                                                if (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000 > ext_call.return_data[0]:
                                                    _27562 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _27562 + 68] = mem[idx + _26738 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_27562 + 68] = mem[_27562 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _27562 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= (95 * ext_call.return_data[0]) - (95 * (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    emit Withdraw((ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                else:
                                    require ext_code.size(tokenAddress)
                                    call tokenAddress.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args farmerAddress, (ext_call.return_data[0] * farmerRewardFee) - (stor31[stor18[s].field_0].field_256 * farmerRewardFee) / 10000
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_call.return_data[0]
                                    if not ext_call.return_data[0] - stor31[stor18[s].field_0].field_256:
                                        _18235 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_18235] = 26
                                        mem[_18235 + 32] = 'SafeMath: division by zero'
                                        require ext_code.size(tokenAddress)
                                        staticcall tokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(this.address)
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if 0 > ext_call.return_data[0]:
                                            emit 0x658fe604: 0, stor4
                                            sub_2445aefb--
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _19871 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_19871] = 30
                                            mem[_19871 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor19:
                                                _20359 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _20359 + 68] = mem[idx + _19871 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_20359 + 68] = mem[_20359 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _20359 + -mem[64] + 100
                                            stor19 -= stor31[stor18[s].field_0].field_256
                                            _21070 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_21070] = 30
                                            mem[_21070 + 32] = 'SafeMath: subtraction overflow'
                                            if balanceOf[stor18[s].field_0] > stor20:
                                                _21657 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _21657 + 68] = mem[idx + _21070 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_21657 + 68] = mem[_21657 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _21657 + -mem[64] + 100
                                            stor20 -= balanceOf[stor18[s].field_0]
                                            mem[0] = stor18[s].field_0
                                            stor21[stor18[s].field_0] = 0
                                            mem[32] = 31
                                            _22470 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_22470] = 30
                                            mem[_22470 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor8:
                                                _22980 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _22980 + 68] = mem[idx + _22470 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_22980 + 68] = mem[_22980 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _22980 + -mem[64] + 100
                                            stor8 -= stor31[stor18[s].field_0].field_256
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _23646 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_23646] = 30
                                            mem[_23646 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_512 > stor9:
                                                _24021 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _24021 + 68] = mem[idx + _23646 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_24021 + 68] = mem[_24021 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _24021 + -mem[64] + 100
                                            stor9 -= stor31[stor18[s].field_0].field_512
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            stor31[stor18[s].field_0].field_256 = 0
                                            stor31[stor18[s].field_0].field_512 = 0
                                            stor31[stor18[s].field_0].field_0 = 0
                                            stor10--
                                            investorCount--
                                            if not ext_call.return_data[0] - stor31[stor18[s].field_0].field_256:
                                                _24923 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_24923] = 26
                                                mem[_24923 + 32] = 'SafeMath: division by zero'
                                                _26071 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_26071] = 30
                                                mem[_26071 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > ext_call.return_data[0]:
                                                    _26747 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _26747 + 68] = mem[idx + _26071 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_26747 + 68] = mem[_26747 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _26747 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= 95 * ext_call.return_data[0] / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] > ext_call.return_data[0]:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                mem[mem[64] + 4] = stor18[s].field_0
                                                mem[mem[64] + 36] = ext_call.return_data[0]
                                                require ext_code.size(tokenAddress)
                                                call tokenAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args stor18[s].field_0, ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                require ext_call.return_data[0]
                                                mem[mem[64]] = ext_call.return_data[0]
                                                emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                            else:
                                                if (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / ext_call.return_data[0] - stor31[stor18[s].field_0].field_256 != uint16(teamRewardFee + farmerRewardFee):
                                                    revert with 0, 32, 33, 0x1f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _25040 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_25040] = 26
                                                mem[_25040 + 32] = 'SafeMath: division by zero'
                                                _26401 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_26401] = 30
                                                mem[_26401 + 32] = 'SafeMath: subtraction overflow'
                                                if (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000 > ext_call.return_data[0]:
                                                    _27133 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _27133 + 68] = mem[idx + _26401 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_27133 + 68] = mem[_27133 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _27133 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= (95 * ext_call.return_data[0]) - (95 * (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    emit Withdraw((ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                        else:
                                            require ext_code.size(tokenAddress)
                                            call tokenAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args stor4, 0
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0]
                                            sub_2445aefb--
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _20784 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_20784] = 30
                                            mem[_20784 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor19:
                                                _21393 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _21393 + 68] = mem[idx + _20784 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_21393 + 68] = mem[_21393 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _21393 + -mem[64] + 100
                                            stor19 -= stor31[stor18[s].field_0].field_256
                                            _22165 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_22165] = 30
                                            mem[_22165 + 32] = 'SafeMath: subtraction overflow'
                                            if balanceOf[stor18[s].field_0] > stor20:
                                                _22747 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _22747 + 68] = mem[idx + _22165 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_22747 + 68] = mem[_22747 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _22747 + -mem[64] + 100
                                            stor20 -= balanceOf[stor18[s].field_0]
                                            mem[0] = stor18[s].field_0
                                            stor21[stor18[s].field_0] = 0
                                            mem[32] = 31
                                            _23408 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_23408] = 30
                                            mem[_23408 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor8:
                                                _23861 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _23861 + 68] = mem[idx + _23408 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_23861 + 68] = mem[_23861 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _23861 + -mem[64] + 100
                                            stor8 -= stor31[stor18[s].field_0].field_256
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _24323 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_24323] = 30
                                            mem[_24323 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_512 > stor9:
                                                _24600 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _24600 + 68] = mem[idx + _24323 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_24600 + 68] = mem[_24600 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _24600 + -mem[64] + 100
                                            stor9 -= stor31[stor18[s].field_0].field_512
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            stor31[stor18[s].field_0].field_256 = 0
                                            stor31[stor18[s].field_0].field_512 = 0
                                            stor31[stor18[s].field_0].field_0 = 0
                                            stor10--
                                            investorCount--
                                            if not ext_call.return_data[0] - stor31[stor18[s].field_0].field_256:
                                                _25545 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_25545] = 26
                                                mem[_25545 + 32] = 'SafeMath: division by zero'
                                                _27579 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_27579] = 30
                                                mem[_27579 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > ext_call.return_data[0]:
                                                    _28402 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _28402 + 68] = mem[idx + _27579 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_28402 + 68] = mem[_28402 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _28402 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= 95 * ext_call.return_data[0] / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] > ext_call.return_data[0]:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                mem[mem[64] + 4] = stor18[s].field_0
                                                mem[mem[64] + 36] = ext_call.return_data[0]
                                                require ext_code.size(tokenAddress)
                                                call tokenAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args stor18[s].field_0, ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                require ext_call.return_data[0]
                                                mem[mem[64]] = ext_call.return_data[0]
                                                emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                            else:
                                                if (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / ext_call.return_data[0] - stor31[stor18[s].field_0].field_256 != uint16(teamRewardFee + farmerRewardFee):
                                                    revert with 0, 32, 33, 0x1f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _25784 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_25784] = 26
                                                mem[_25784 + 32] = 'SafeMath: division by zero'
                                                _28015 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_28015] = 30
                                                mem[_28015 + 32] = 'SafeMath: subtraction overflow'
                                                if (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000 > ext_call.return_data[0]:
                                                    _28838 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _28838 + 68] = mem[idx + _28015 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_28838 + 68] = mem[_28838 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _28838 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= (95 * ext_call.return_data[0]) - (95 * (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    emit Withdraw((ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                    else:
                                        if (ext_call.return_data[0] * teamRewardFee) - (stor31[stor18[s].field_0].field_256 * teamRewardFee) / ext_call.return_data[0] - stor31[stor18[s].field_0].field_256 != teamRewardFee:
                                            revert with 0, 32, 33, 0x1f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _18322 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_18322] = 26
                                        mem[_18322 + 32] = 'SafeMath: division by zero'
                                        require ext_code.size(tokenAddress)
                                        staticcall tokenAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(this.address)
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if (ext_call.return_data[0] * teamRewardFee) - (stor31[stor18[s].field_0].field_256 * teamRewardFee) / 10000 > ext_call.return_data[0]:
                                            emit 0x658fe604: ((ext_call.return_data[0] * teamRewardFee) - (stor31[stor18[s].field_0].field_256 * teamRewardFee) / 10000), stor4
                                            sub_2445aefb--
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _20099 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_20099] = 30
                                            mem[_20099 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor19:
                                                _20571 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _20571 + 68] = mem[idx + _20099 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_20571 + 68] = mem[_20571 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _20571 + -mem[64] + 100
                                            stor19 -= stor31[stor18[s].field_0].field_256
                                            _21389 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_21389] = 30
                                            mem[_21389 + 32] = 'SafeMath: subtraction overflow'
                                            if balanceOf[stor18[s].field_0] > stor20:
                                                _21892 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _21892 + 68] = mem[idx + _21389 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_21892 + 68] = mem[_21892 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _21892 + -mem[64] + 100
                                            stor20 -= balanceOf[stor18[s].field_0]
                                            mem[0] = stor18[s].field_0
                                            stor21[stor18[s].field_0] = 0
                                            mem[32] = 31
                                            _22742 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_22742] = 30
                                            mem[_22742 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor8:
                                                _23187 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _23187 + 68] = mem[idx + _22742 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_23187 + 68] = mem[_23187 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _23187 + -mem[64] + 100
                                            stor8 -= stor31[stor18[s].field_0].field_256
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _23856 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_23856] = 30
                                            mem[_23856 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_512 > stor9:
                                                _24155 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _24155 + 68] = mem[idx + _23856 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_24155 + 68] = mem[_24155 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _24155 + -mem[64] + 100
                                            stor9 -= stor31[stor18[s].field_0].field_512
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            stor31[stor18[s].field_0].field_256 = 0
                                            stor31[stor18[s].field_0].field_512 = 0
                                            stor31[stor18[s].field_0].field_0 = 0
                                            stor10--
                                            investorCount--
                                            if not ext_call.return_data[0] - stor31[stor18[s].field_0].field_256:
                                                _25037 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_25037] = 26
                                                mem[_25037 + 32] = 'SafeMath: division by zero'
                                                _26400 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_26400] = 30
                                                mem[_26400 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > ext_call.return_data[0]:
                                                    _27130 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _27130 + 68] = mem[idx + _26400 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_27130 + 68] = mem[_27130 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _27130 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= 95 * ext_call.return_data[0] / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] > ext_call.return_data[0]:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                mem[mem[64] + 4] = stor18[s].field_0
                                                mem[mem[64] + 36] = ext_call.return_data[0]
                                                require ext_code.size(tokenAddress)
                                                call tokenAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args stor18[s].field_0, ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                require ext_call.return_data[0]
                                                mem[mem[64]] = ext_call.return_data[0]
                                                emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                            else:
                                                if (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / ext_call.return_data[0] - stor31[stor18[s].field_0].field_256 != uint16(teamRewardFee + farmerRewardFee):
                                                    revert with 0, 32, 33, 0x1f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _25167 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_25167] = 26
                                                mem[_25167 + 32] = 'SafeMath: division by zero'
                                                _26746 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_26746] = 30
                                                mem[_26746 + 32] = 'SafeMath: subtraction overflow'
                                                if (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000 > ext_call.return_data[0]:
                                                    _27573 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _27573 + 68] = mem[idx + _26746 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_27573 + 68] = mem[_27573 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _27573 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= (95 * ext_call.return_data[0]) - (95 * (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    emit Withdraw((ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                        else:
                                            require ext_code.size(tokenAddress)
                                            call tokenAddress.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args stor4, (ext_call.return_data[0] * teamRewardFee) - (stor31[stor18[s].field_0].field_256 * teamRewardFee) / 10000
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0]
                                            sub_2445aefb--
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _21069 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_21069] = 30
                                            mem[_21069 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor19:
                                                _21654 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _21654 + 68] = mem[idx + _21069 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_21654 + 68] = mem[_21654 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _21654 + -mem[64] + 100
                                            stor19 -= stor31[stor18[s].field_0].field_256
                                            _22467 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_22467] = 30
                                            mem[_22467 + 32] = 'SafeMath: subtraction overflow'
                                            if balanceOf[stor18[s].field_0] > stor20:
                                                _22977 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _22977 + 68] = mem[idx + _22467 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_22977 + 68] = mem[_22977 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _22977 + -mem[64] + 100
                                            stor20 -= balanceOf[stor18[s].field_0]
                                            mem[0] = stor18[s].field_0
                                            stor21[stor18[s].field_0] = 0
                                            mem[32] = 31
                                            _23643 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_23643] = 30
                                            mem[_23643 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_256 > stor8:
                                                _24018 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _24018 + 68] = mem[idx + _23643 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_24018 + 68] = mem[_24018 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _24018 + -mem[64] + 100
                                            stor8 -= stor31[stor18[s].field_0].field_256
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            _24484 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_24484] = 30
                                            mem[_24484 + 32] = 'SafeMath: subtraction overflow'
                                            if stor31[stor18[s].field_0].field_512 > stor9:
                                                _24687 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _24687 + 68] = mem[idx + _24484 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_24687 + 68] = mem[_24687 + 70 len 30]
                                                revert with memory
                                                  from mem[64]
                                                   len _24687 + -mem[64] + 100
                                            stor9 -= stor31[stor18[s].field_0].field_512
                                            mem[0] = stor18[s].field_0
                                            mem[32] = 31
                                            stor31[stor18[s].field_0].field_256 = 0
                                            stor31[stor18[s].field_0].field_512 = 0
                                            stor31[stor18[s].field_0].field_0 = 0
                                            stor10--
                                            investorCount--
                                            if not ext_call.return_data[0] - stor31[stor18[s].field_0].field_256:
                                                _25783 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_25783] = 26
                                                mem[_25783 + 32] = 'SafeMath: division by zero'
                                                _28009 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_28009] = 30
                                                mem[_28009 + 32] = 'SafeMath: subtraction overflow'
                                                if 0 > ext_call.return_data[0]:
                                                    _28832 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _28832 + 68] = mem[idx + _28009 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_28832 + 68] = mem[_28832 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _28832 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= 95 * ext_call.return_data[0] / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] > ext_call.return_data[0]:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                mem[mem[64] + 4] = stor18[s].field_0
                                                mem[mem[64] + 36] = ext_call.return_data[0]
                                                require ext_code.size(tokenAddress)
                                                call tokenAddress.0xa9059cbb with:
                                                     gas gas_remaining wei
                                                    args stor18[s].field_0, ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                require ext_call.return_data[0]
                                                mem[mem[64]] = ext_call.return_data[0]
                                                emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
                                            else:
                                                if (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / ext_call.return_data[0] - stor31[stor18[s].field_0].field_256 != uint16(teamRewardFee + farmerRewardFee):
                                                    revert with 0, 32, 33, 0x1f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _26070 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_26070] = 26
                                                mem[_26070 + 32] = 'SafeMath: division by zero'
                                                _28397 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_28397] = 30
                                                mem[_28397 + 32] = 'SafeMath: subtraction overflow'
                                                if (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000 > ext_call.return_data[0]:
                                                    _29342 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 30
                                                    idx = 0
                                                    while idx < 30:
                                                        mem[idx + _29342 + 68] = mem[idx + _28397 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_29342 + 68] = mem[_29342 + 70 len 30]
                                                    revert with memory
                                                      from mem[64]
                                                       len _29342 + -mem[64] + 100
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args address(this.address)
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= (95 * ext_call.return_data[0]) - (95 * (ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) / 100:
                                                    revert with 0, 'pool doesnot have enough balance'
                                                require ext_code.size(tokenAddress)
                                                staticcall tokenAddress.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000) <= ext_call.return_data[0]:
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)
                                                    emit Withdraw((ext_call.return_data[0] - ((ext_call.return_data[0] * uint16(teamRewardFee + farmerRewardFee)) - (stor31[stor18[s].field_0].field_256 * uint16(teamRewardFee + farmerRewardFee)) / 10000)), stor18[s].field_0);
                                                else:
                                                    require ext_code.size(tokenAddress)
                                                    staticcall tokenAddress.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    mem[mem[64] + 4] = stor18[s].field_0
                                                    mem[mem[64] + 36] = ext_call.return_data[0]
                                                    require ext_code.size(tokenAddress)
                                                    call tokenAddress.0xa9059cbb with:
                                                         gas gas_remaining wei
                                                        args stor18[s].field_0, ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    require ext_call.return_data[0]
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    emit Withdraw(ext_call.return_data[0], stor18[s].field_0);
            s = s - 1
            idx = idx - 1
            continue 
    if not sub_2445aefb:
        stor18.length = 0
        idx = 0
        while stor18.length > idx:
            stor18[idx].field_0 = 0
            idx = idx + 1
            continue 
    stor30 = 0
}



}
