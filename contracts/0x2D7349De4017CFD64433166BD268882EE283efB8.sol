contract main {




// =====================  Runtime code  =====================


const name = '', 0


address owner;

function owner() payable {
    return owner
}

function _fallback() payable {
    revert
}

function changeOwner(address arg1) payable {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    if owner != msg.sender:
        revert with 0, 'Not owner'
    owner = arg1
}

function getColor(uint256 arg1) payable {
    require calldata.size - 4 >= 32
    if owner != msg.sender:
        revert with 0, 'Not owner'
    mem[416] = 6
    mem[448] = 0x6530353561610000000000000000000000000000000000000000000000000000
    mem[96] = 416
    mem[480] = 6
    mem[512] = 0x3933313139620000000000000000000000000000000000000000000000000000
    mem[128] = 480
    mem[544] = 6
    mem[576] = 0x6534336263630000000000000000000000000000000000000000000000000000
    mem[160] = 544
    mem[608] = 6
    mem[640] = 0x6533393862650000000000000000000000000000000000000000000000000000
    mem[192] = 608
    mem[672] = 6
    mem[704] = 0x6564363362300000000000000000000000000000000000000000000000000000
    mem[224] = 672
    mem[736] = 6
    mem[768] = 0x3934333363660000000000000000000000000000000000000000000000000000
    mem[256] = 736
    mem[800] = 6
    mem[832] = 0x6166353338610000000000000000000000000000000000000000000000000000
    mem[288] = 800
    mem[864] = 6
    mem[896] = 0x6634373466660000000000000000000000000000000000000000000000000000
    mem[320] = 864
    mem[928] = 6
    mem[960] = 0x3963363963630000000000000000000000000000000000000000000000000000
    mem[352] = 928
    mem[992] = 6
    mem[1024] = 0x6235353564360000000000000000000000000000000000000000000000000000
    mem[384] = 992
    if arg1 >= 10:
        revert with 0, 50
    _12 = mem[(32 * arg1) + 96]
    mem[64] = 1120
    mem[1056] = 10
    mem[1088] = 0x526f756e64436f6c6f7200000000000000000000000000000000000000000000
    mem[1120] = 64
    _16 = mem[_12]
    mem[1184] = mem[_12]
    mem[1216 len ceil32(_16)] = mem[_12 + 32 len ceil32(_16)]
    if ceil32(_16) <= _16:
        return 64, ceil32(_16) + 96, mem[1184 len ceil32(_16) + 32], 10, 0, 0
    mem[_16 + 1216] = 0
    mem[ceil32(_16) + 1216] = 10
    mem[ceil32(_16) + 1248] = 0x526f756e64436f6c6f7200000000000000000000000000000000000000000000
    return 64, ceil32(_16) + 96, mem[1184 len _16 + 32], 0, mem[_16 + 1248 len ceil32(_16) + -_16 + 10], 0
}

function getPart(uint256 arg1) payable {
    require calldata.size - 4 >= 32
    if owner != msg.sender:
        revert with 0, 'Not owner'
    mem[320] = 95
    mem[352 len 95] = 0xfe3c672069643d2268656164223e3c656c6c697073652063783d223830372e303931222063793d223336332e353735222072783d223236332e353738222072793d223232382e393436222069643d22526f756e64436f6c6f72222f3e3c2f67
    mem[96] = 320
    mem[448] = 96
    mem[480 len 96] = 0x3e3c672069643d2262656c6c79223e3c656c6c697073652063783d223738342e303431222063793d223737332e393737222072783d223336332e323032222072793d223335342e393638222069643d22526f756e64436f6c6f72222f3e3c2f67
    mem[128] = 448
    mem[576] = 249
    mem[608 len 249] = 0x3e3c672069643d227061775f72223e3c7061746820643d224d3432362e3634342c3435342e363031633130332e3831342c33352e343438203137312e3034392c3131342e313538203135302e30352c3137352e363537632d32302e3939392c36312e35202d3132322e3333322c38322e3635202d3232362e3134362c34372e323033632d3130332e3831342c2d33352e343438202d3137312e3034392c2d3131342e313538202d3135302e30352c2d3137352e3635376332302e3939392c2d36312e35203132322e3333322c2d38322e3635203232362e3134362c2d34372e3230335a222069643d22526f756e64436f6c6f72222f3e3c2f67
    mem[160] = 576
    mem[864] = 96
    mem[896 len 96] = 0x3e3c672069643d227061775f6c223e3c656c6c697073652063783d22313137332e3039222063793d223638382e363233222072783d223139382e373631222072793d223131372e373436222069643d22526f756e64436f6c6f72222f3e3c2f67
    mem[192] = 864
    mem[992] = 251
    mem[1024 len 251] = 0x3e3c672069643d226c65675f6c223e3c7061746820643d224d313038352e38372c313039312e32326338322e3632392c37322e313536203131352e30312c3137302e3437372037322e3236352c3231392e343237632d34322e3734352c34382e393439202d3134342e3533322c33302e313039202d3232372e3136312c2d34322e303436632d38322e3632392c2d37322e313536202d3131352e30312c2d3137302e343737202d37322e3236352c2d3231392e3432376334322e3734352c2d34382e393439203134342e3533332c2d33302e313039203232372e3136312c34322e3034365a222069643d22526f756e64436f6c6f72222f3e3c2f67
    mem[224] = 992
    mem[1280] = 244
    mem[1312 len 244] = 0x3e3c672069643d226c65675f72223e3c7061746820643d224d3330382e3930322c3933372e3637376339362e3534362c2d35322e303836203139392e3937392c2d34372e3934203233302e3833352c392e3235346333302e3835362c35372e313933202d32322e3437352c3134352e393134202d3131392e3032312c313938632d39362e3534352c35322e303837202d3139392e3937382c34372e3934202d3233302e3833342c2d392e323533632d33302e3835362c2d35372e3139342032322e3437352c2d3134352e393135203131392e30322c2d3139382e3030315a222069643d22526f756e64436f6c6f72222f3e3c2f67
    mem[256] = 1280
    mem[64] = 1856
    mem[1568] = 252
    mem[1600 len 252] = 0x3e3c672069643d22616464223e3c7061746820643d224d313138312e38342c3434352e3831376339382e3233392c33372e363531203133312e3038322c3139302e36332037332e3239362c3334312e343037632d35372e3738372c3135302e373736202d3138342e3435392c3234322e3632202d3238322e3639382c3230342e3937632d39382e3233392c2d33372e363531202d3133312e3038322c2d3139302e3633202d37332e3239362c2d3334312e3430376335372e3738362c2d3135302e373737203138342e3435392c2d3234322e363231203238322e3639382c2d3230342e39375a222069643d22526f756e64436f6c6f72222f3e3c2f67
    mem[288] = 1568
    if arg1 >= 7:
        revert with 0, 50
    _10 = mem[(32 * arg1) + 96]
    mem[1856] = 32
    _13 = mem[_10]
    mem[1888] = mem[_10]
    mem[1920 len ceil32(_13)] = mem[_10 + 32 len ceil32(_13)]
    if ceil32(_13) > _13:
        mem[_13 + 1920] = 0
    return 32, mem[1888 len ceil32(_13) + 32]
}



}
