contract main {




// =====================  Runtime code  =====================


#
#  - sub_669da54c(?)
#  - sub_bf7f678d(?)
#
function _fallback() payable {
    revert
}

function sub_5b2e4dc5(?) payable {
    require calldata.size - 4 >= 96
    require arg1 == address(arg1)
    require arg2 == address(arg2)
    staticcall address(arg1).oracle() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
    staticcall address(ext_call.return_data[0]).getUnderlyingPrice(address arg1) with:
            gas gas_remaining wei
           args address(arg2)
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if not ext_call.return_data[0]:
        return 0
    if not arg3:
        return 0
    if ext_call.return_data[0] and arg3 > -1 / ext_call.return_data[0]:
        revert with 'NH{q', 17
    if not ext_call.return_data[0]:
        revert with 'NH{q', 18
    if ext_call.return_data[0] * arg3 / ext_call.return_data[0] != arg3:
        revert with 0, 'multiplication overflow', 0
    return (ext_call.return_data[0] * arg3 / 10^18)
}

function sub_1c1ebd7b(?) payable {
    require calldata.size - 4 >= 64
    require arg1 == address(arg1)
    require arg2 == address(arg2)
    staticcall address(arg2).0x70a08231 with:
            gas gas_remaining wei
           args address(arg1)
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if ext_call.return_data[0] <= 0:
        return 0
    staticcall address(arg2).exchangeRateStored() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if not ext_call.return_data[0]:
        return 0
    if not ext_call.return_data[0]:
        return 0
    if ext_call.return_data[0] and ext_call.return_data[0] > -1 / ext_call.return_data[0]:
        revert with 'NH{q', 17
    if not ext_call.return_data[0]:
        revert with 'NH{q', 18
    if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
        revert with 0, 'multiplication overflow', 0
    return (ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
}

function sub_d04203a4(?) payable {
    require calldata.size - 4 >= 64
    require arg1 == address(arg1)
    require arg2 == address(arg2)
    staticcall address(arg1).closeFactorMantissa() with:
            gas gas_remaining wei
    mem[96] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    mem[ceil32(return_data.size) + 96] = 0xabfceffc00000000000000000000000000000000000000000000000000000000
    mem[ceil32(return_data.size) + 100] = address(arg2)
    staticcall address(arg1).getAssetsIn(address arg1) with:
            gas gas_remaining wei
           args address(arg2)
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    mem[ceil32(return_data.size) + 96 len return_data.size] = ext_call.return_data[0 len return_data.size]
    mem[64] = (2 * ceil32(return_data.size)) + 96
    require return_data.size >= 32
    _8 = mem[ceil32(return_data.size) + 96 len 4], address(arg2) << 64
    require mem[ceil32(return_data.size) + 96 len 4], address(arg2) << 64 <= test266151307()
    require ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], address(arg2) << 64 + 127 < ceil32(return_data.size) + return_data.size + 96
    _9 = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], address(arg2) << 64 + 96]
    if mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], address(arg2) << 64 + 96] > test266151307():
        revert with 'NH{q', 65
    if (2 * ceil32(return_data.size)) + ceil32(32 * mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], address(arg2) << 64 + 96]) + 97 > test266151307() or ceil32(32 * mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], address(arg2) << 64 + 96]) + 1 < 0:
        revert with 'NH{q', 65
    mem[64] = (2 * ceil32(return_data.size)) + ceil32(32 * mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], address(arg2) << 64 + 96]) + 97
    mem[(2 * ceil32(return_data.size)) + 96] = mem[ceil32(return_data.size) + mem[ceil32(return_data.size) + 96 len 4], address(arg2) << 64 + 96]
    require (32 * _9) + _8 + 32 <= return_data.size
    s = (2 * ceil32(return_data.size)) + 128
    idx = ceil32(return_data.size) + _8 + 128
    while idx < (32 * _9) + ceil32(return_data.size) + _8 + 128:
        require mem[idx] == mem[idx + 12 len 20]
        mem[s] = mem[idx]
        s = s + 32
        idx = idx + 32
        continue 
    if _9 > test266151307():
        revert with 'NH{q', 65
    _227 = mem[64]
    mem[mem[64]] = _9
    mem[64] = mem[64] + (32 * _9) + 32
    if not _9:
        idx = 0
        while idx < _9:
            if idx >= mem[(2 * ceil32(return_data.size)) + 96]:
                revert with 'NH{q', 50
            _443 = mem[(32 * idx) + (2 * ceil32(return_data.size)) + 128]
            mem[mem[64] + 4] = address(arg2)
            staticcall address(_443).borrowBalanceStored(address arg1) with:
                    gas gas_remaining wei
                   args address(arg2)
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _448 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _455 = mem[_448]
            _458 = mem[64]
            mem[64] = mem[64] + 128
            if idx >= mem[(2 * ceil32(return_data.size)) + 96]:
                revert with 'NH{q', 50
            mem[_458] = mem[(32 * idx) + (2 * ceil32(return_data.size)) + 140 len 20]
            if idx >= mem[(2 * ceil32(return_data.size)) + 96]:
                revert with 'NH{q', 50
            _468 = mem[(32 * idx) + (2 * ceil32(return_data.size)) + 128]
            mem[mem[64] + 4] = address(arg2)
            staticcall address(_468).0x70a08231 with:
                    gas gas_remaining wei
                   args address(arg2)
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _477 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _483 = mem[_477]
            if mem[_477] <= 0:
                mem[_458 + 32] = 0
                mem[_458 + 64] = _455
                _492 = mem[64]
                mem[64] = mem[64] + 32
                mem[_492] = ext_call.return_data[0]
                _495 = mem[64]
                mem[64] = mem[64] + 32
                mem[_495] = 0
                _496 = mem[64]
                mem[64] = mem[64] + 32
                _501 = mem[64]
                mem[64] = mem[64] + 64
                mem[_501] = 23
                mem[_501 + 32] = 'multiplication overflow'
                if not ext_call.return_data[0]:
                    mem[_496] = 0
                    mem[_458 + 96] = 0 / 10^18
                    if idx >= mem[_227]:
                        revert with 'NH{q', 50
                    mem[(32 * idx) + _227 + 32] = _458
                    if idx == -1:
                        revert with 'NH{q', 17
                    idx = idx + 1
                    continue 
                if not _455:
                    mem[_496] = 0
                    mem[_458 + 96] = 0 / 10^18
                    if idx >= mem[_227]:
                        revert with 'NH{q', 50
                    mem[(32 * idx) + _227 + 32] = _458
                    if idx == -1:
                        revert with 'NH{q', 17
                    idx = idx + 1
                    continue 
                if ext_call.return_data[0] and _455 > -1 / ext_call.return_data[0]:
                    revert with 'NH{q', 17
                if not ext_call.return_data[0]:
                    revert with 'NH{q', 18
                if ext_call.return_data[0] * _455 / ext_call.return_data[0] == _455:
                    mem[_496] = ext_call.return_data[0] * _455
                    mem[_458 + 96] = ext_call.return_data[0] * _455 / 10^18
                    if idx >= mem[_227]:
                        revert with 'NH{q', 50
                    mem[(32 * idx) + _227 + 32] = _458
                    if idx == -1:
                        revert with 'NH{q', 17
                    idx = idx + 1
                    continue 
                _521 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 23
                idx = 0
                while idx < 23:
                    mem[idx + _521 + 68] = mem[idx + _501 + 32]
                    idx = idx + 32
                    continue 
                mem[_521 + 91] = 0
                revert with memory
                  from mem[64]
                   len _521 + -mem[64] + 100
            _487 = mem[64]
            mem[64] = mem[64] + 32
            staticcall address(_468).exchangeRateStored() with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _491 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[_487] = mem[_491]
            _503 = mem[64]
            mem[64] = mem[64] + 32
            mem[_503] = 0
            _504 = mem[64]
            mem[64] = mem[64] + 32
            _505 = mem[_487]
            _507 = mem[64]
            mem[64] = mem[64] + 64
            mem[_507] = 23
            mem[_507 + 32] = 'multiplication overflow'
            if not _505:
                mem[_504] = 0
                mem[_458 + 32] = 0 / 10^18
                mem[_458 + 64] = _455
                _540 = mem[64]
                mem[64] = mem[64] + 32
                mem[_540] = ext_call.return_data[0]
                _549 = mem[64]
                mem[64] = mem[64] + 32
                mem[_549] = 0
                _550 = mem[64]
                mem[64] = mem[64] + 32
                _554 = mem[64]
                mem[64] = mem[64] + 64
                mem[_554] = 23
                mem[_554 + 32] = 'multiplication overflow'
                if not ext_call.return_data[0]:
                    mem[_550] = 0
                    mem[_458 + 96] = 0 / 10^18
                    if idx >= mem[_227]:
                        revert with 'NH{q', 50
                    mem[(32 * idx) + _227 + 32] = _458
                    if idx == -1:
                        revert with 'NH{q', 17
                    idx = idx + 1
                    continue 
                if not _455:
                    mem[_550] = 0
                    mem[_458 + 96] = 0 / 10^18
                    if idx >= mem[_227]:
                        revert with 'NH{q', 50
                    mem[(32 * idx) + _227 + 32] = _458
                    if idx == -1:
                        revert with 'NH{q', 17
                    idx = idx + 1
                    continue 
                if ext_call.return_data[0] and _455 > -1 / ext_call.return_data[0]:
                    revert with 'NH{q', 17
                if not ext_call.return_data[0]:
                    revert with 'NH{q', 18
                if ext_call.return_data[0] * _455 / ext_call.return_data[0] == _455:
                    mem[_550] = ext_call.return_data[0] * _455
                    mem[_458 + 96] = ext_call.return_data[0] * _455 / 10^18
                    if idx >= mem[_227]:
                        revert with 'NH{q', 50
                    mem[(32 * idx) + _227 + 32] = _458
                    if idx == -1:
                        revert with 'NH{q', 17
                    idx = idx + 1
                    continue 
                _585 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 23
                idx = 0
                while idx < 23:
                    mem[idx + _585 + 68] = mem[idx + _554 + 32]
                    idx = idx + 32
                    continue 
                mem[_585 + 91] = 0
                revert with memory
                  from mem[64]
                   len _585 + -mem[64] + 100
            if not _483:
                mem[_504] = 0
                mem[_458 + 32] = 0 / 10^18
                mem[_458 + 64] = _455
                _546 = mem[64]
                mem[64] = mem[64] + 32
                mem[_546] = ext_call.return_data[0]
                _555 = mem[64]
                mem[64] = mem[64] + 32
                mem[_555] = 0
                _556 = mem[64]
                mem[64] = mem[64] + 32
                _561 = mem[64]
                mem[64] = mem[64] + 64
                mem[_561] = 23
                mem[_561 + 32] = 'multiplication overflow'
                if not ext_call.return_data[0]:
                    mem[_556] = 0
                    mem[_458 + 96] = 0 / 10^18
                    if idx >= mem[_227]:
                        revert with 'NH{q', 50
                    mem[(32 * idx) + _227 + 32] = _458
                    if idx == -1:
                        revert with 'NH{q', 17
                    idx = idx + 1
                    continue 
                if not _455:
                    mem[_556] = 0
                    mem[_458 + 96] = 0 / 10^18
                    if idx >= mem[_227]:
                        revert with 'NH{q', 50
                    mem[(32 * idx) + _227 + 32] = _458
                    if idx == -1:
                        revert with 'NH{q', 17
                    idx = idx + 1
                    continue 
                if ext_call.return_data[0] and _455 > -1 / ext_call.return_data[0]:
                    revert with 'NH{q', 17
                if not ext_call.return_data[0]:
                    revert with 'NH{q', 18
                if ext_call.return_data[0] * _455 / ext_call.return_data[0] == _455:
                    mem[_556] = ext_call.return_data[0] * _455
                    mem[_458 + 96] = ext_call.return_data[0] * _455 / 10^18
                    if idx >= mem[_227]:
                        revert with 'NH{q', 50
                    mem[(32 * idx) + _227 + 32] = _458
                    if idx == -1:
                        revert with 'NH{q', 17
                    idx = idx + 1
                    continue 
                _590 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 23
                idx = 0
                while idx < 23:
                    mem[idx + _590 + 68] = mem[idx + _561 + 32]
                    idx = idx + 32
                    continue 
                mem[_590 + 91] = 0
                revert with memory
                  from mem[64]
                   len _590 + -mem[64] + 100
            if _505 and _483 > -1 / _505:
                revert with 'NH{q', 17
            if not _505:
                revert with 'NH{q', 18
            if _505 * _483 / _505 != _483:
                _524 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 23
                idx = 0
                while idx < 23:
                    mem[idx + _524 + 68] = mem[idx + _507 + 32]
                    idx = idx + 32
                    continue 
                mem[_524 + 91] = 0
                revert with memory
                  from mem[64]
                   len _524 + -mem[64] + 100
            mem[_504] = _505 * _483
            mem[_458 + 32] = _505 * _483 / 10^18
            mem[_458 + 64] = _455
            _569 = mem[64]
            mem[64] = mem[64] + 32
            mem[_569] = ext_call.return_data[0]
            _576 = mem[64]
            mem[64] = mem[64] + 32
            mem[_576] = 0
            _577 = mem[64]
            mem[64] = mem[64] + 32
            _580 = mem[64]
            mem[64] = mem[64] + 64
            mem[_580] = 23
            mem[_580 + 32] = 'multiplication overflow'
            if not ext_call.return_data[0]:
                mem[_577] = 0
                mem[_458 + 96] = 0 / 10^18
                if idx >= mem[_227]:
                    revert with 'NH{q', 50
                mem[(32 * idx) + _227 + 32] = _458
                if idx == -1:
                    revert with 'NH{q', 17
                idx = idx + 1
                continue 
            if not _455:
                mem[_577] = 0
                mem[_458 + 96] = 0 / 10^18
                if idx >= mem[_227]:
                    revert with 'NH{q', 50
                mem[(32 * idx) + _227 + 32] = _458
                if idx == -1:
                    revert with 'NH{q', 17
                idx = idx + 1
                continue 
            if ext_call.return_data[0] and _455 > -1 / ext_call.return_data[0]:
                revert with 'NH{q', 17
            if not ext_call.return_data[0]:
                revert with 'NH{q', 18
            if ext_call.return_data[0] * _455 / ext_call.return_data[0] == _455:
                mem[_577] = ext_call.return_data[0] * _455
                mem[_458 + 96] = ext_call.return_data[0] * _455 / 10^18
                if idx >= mem[_227]:
                    revert with 'NH{q', 50
                mem[(32 * idx) + _227 + 32] = _458
                if idx == -1:
                    revert with 'NH{q', 17
                idx = idx + 1
                continue 
            _614 = mem[64]
            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = 32
            mem[mem[64] + 36] = 23
            idx = 0
            while idx < 23:
                mem[idx + _614 + 68] = mem[idx + _580 + 32]
                idx = idx + 32
                continue 
            mem[_614 + 91] = 0
            revert with memory
              from mem[64]
               len _614 + -mem[64] + 100
        _442 = mem[64]
        mem[mem[64]] = 32
        _447 = mem[_227]
        mem[mem[64] + 32] = mem[_227]
        idx = 0
        s = _227 + 32
        t = mem[64] + 64
        while idx < _447:
            _651 = mem[s]
            mem[t] = mem[mem[s] + 12 len 20]
            mem[t + 32] = mem[_651 + 32]
            mem[t + 64] = mem[_651 + 64]
            mem[t + 96] = mem[_651 + 96]
            idx = idx + 1
            s = s + 32
            t = t + 128
            continue 
        return memory
          from mem[64]
           len _442 + (128 * _447) + -mem[64] + 64
    mem[64] = _227 + (32 * _9) + 160
    mem[_227 + (32 * _9) + 32] = 0
    mem[_227 + (32 * _9) + 64] = 0
    mem[_227 + (32 * _9) + 96] = 0
    mem[_227 + (32 * _9) + 128] = 0
    mem[var34002] = var34001
    if not var34003 - 1:
        idx = 0
        while idx < _9:
            if idx >= mem[(2 * ceil32(return_data.size)) + 96]:
                revert with 'NH{q', 50
            _888 = mem[(32 * idx) + (2 * ceil32(return_data.size)) + 128]
            mem[mem[64] + 4] = address(arg2)
            staticcall address(_888).borrowBalanceStored(address arg1) with:
                    gas gas_remaining wei
                   args address(arg2)
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _892 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _900 = mem[_892]
            _906 = mem[64]
            mem[64] = mem[64] + 128
            if idx >= mem[(2 * ceil32(return_data.size)) + 96]:
                revert with 'NH{q', 50
            mem[_906] = mem[(32 * idx) + (2 * ceil32(return_data.size)) + 140 len 20]
            if idx >= mem[(2 * ceil32(return_data.size)) + 96]:
                revert with 'NH{q', 50
            _912 = mem[(32 * idx) + (2 * ceil32(return_data.size)) + 128]
            mem[mem[64] + 4] = address(arg2)
            staticcall address(_912).0x70a08231 with:
                    gas gas_remaining wei
                   args address(arg2)
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _924 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _928 = mem[_924]
            if mem[_924] <= 0:
                mem[_906 + 32] = 0
                mem[_906 + 64] = _900
                _937 = mem[64]
                mem[64] = mem[64] + 32
                mem[_937] = ext_call.return_data[0]
                _942 = mem[64]
                mem[64] = mem[64] + 32
                mem[_942] = 0
                _943 = mem[64]
                mem[64] = mem[64] + 32
                _946 = mem[64]
                mem[64] = mem[64] + 64
                mem[_946] = 23
                mem[_946 + 32] = 'multiplication overflow'
                if not ext_call.return_data[0]:
                    mem[_943] = 0
                    mem[_906 + 96] = 0 / 10^18
                    if idx >= mem[_227]:
                        revert with 'NH{q', 50
                    mem[(32 * idx) + _227 + 32] = _906
                    if idx == -1:
                        revert with 'NH{q', 17
                    idx = idx + 1
                    continue 
                if not _900:
                    mem[_943] = 0
                    mem[_906 + 96] = 0 / 10^18
                    if idx >= mem[_227]:
                        revert with 'NH{q', 50
                    mem[(32 * idx) + _227 + 32] = _906
                    if idx == -1:
                        revert with 'NH{q', 17
                    idx = idx + 1
                    continue 
                if ext_call.return_data[0] and _900 > -1 / ext_call.return_data[0]:
                    revert with 'NH{q', 17
                if not ext_call.return_data[0]:
                    revert with 'NH{q', 18
                if ext_call.return_data[0] * _900 / ext_call.return_data[0] == _900:
                    mem[_943] = ext_call.return_data[0] * _900
                    mem[_906 + 96] = ext_call.return_data[0] * _900 / 10^18
                    if idx >= mem[_227]:
                        revert with 'NH{q', 50
                    mem[(32 * idx) + _227 + 32] = _906
                    if idx == -1:
                        revert with 'NH{q', 17
                    idx = idx + 1
                    continue 
                _965 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 23
                idx = 0
                while idx < 23:
                    mem[idx + _965 + 68] = mem[idx + _946 + 32]
                    idx = idx + 32
                    continue 
                mem[_965 + 91] = 0
                revert with memory
                  from mem[64]
                   len _965 + -mem[64] + 100
            _932 = mem[64]
            mem[64] = mem[64] + 32
            staticcall address(_912).exchangeRateStored() with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _935 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[_932] = mem[_935]
            _948 = mem[64]
            mem[64] = mem[64] + 32
            mem[_948] = 0
            _949 = mem[64]
            mem[64] = mem[64] + 32
            _950 = mem[_932]
            _952 = mem[64]
            mem[64] = mem[64] + 64
            mem[_952] = 23
            mem[_952 + 32] = 'multiplication overflow'
            if not _950:
                mem[_949] = 0
                mem[_906 + 32] = 0 / 10^18
                mem[_906 + 64] = _900
                _987 = mem[64]
                mem[64] = mem[64] + 32
                mem[_987] = ext_call.return_data[0]
                _995 = mem[64]
                mem[64] = mem[64] + 32
                mem[_995] = 0
                _996 = mem[64]
                mem[64] = mem[64] + 32
                _1000 = mem[64]
                mem[64] = mem[64] + 64
                mem[_1000] = 23
                mem[_1000 + 32] = 'multiplication overflow'
                if not ext_call.return_data[0]:
                    mem[_996] = 0
                    mem[_906 + 96] = 0 / 10^18
                    if idx >= mem[_227]:
                        revert with 'NH{q', 50
                    mem[(32 * idx) + _227 + 32] = _906
                    if idx == -1:
                        revert with 'NH{q', 17
                    idx = idx + 1
                    continue 
                if not _900:
                    mem[_996] = 0
                    mem[_906 + 96] = 0 / 10^18
                    if idx >= mem[_227]:
                        revert with 'NH{q', 50
                    mem[(32 * idx) + _227 + 32] = _906
                    if idx == -1:
                        revert with 'NH{q', 17
                    idx = idx + 1
                    continue 
                if ext_call.return_data[0] and _900 > -1 / ext_call.return_data[0]:
                    revert with 'NH{q', 17
                if not ext_call.return_data[0]:
                    revert with 'NH{q', 18
                if ext_call.return_data[0] * _900 / ext_call.return_data[0] == _900:
                    mem[_996] = ext_call.return_data[0] * _900
                    mem[_906 + 96] = ext_call.return_data[0] * _900 / 10^18
                    if idx >= mem[_227]:
                        revert with 'NH{q', 50
                    mem[(32 * idx) + _227 + 32] = _906
                    if idx == -1:
                        revert with 'NH{q', 17
                    idx = idx + 1
                    continue 
                _1032 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 23
                idx = 0
                while idx < 23:
                    mem[idx + _1032 + 68] = mem[idx + _1000 + 32]
                    idx = idx + 32
                    continue 
                mem[_1032 + 91] = 0
                revert with memory
                  from mem[64]
                   len _1032 + -mem[64] + 100
            if not _928:
                mem[_949] = 0
                mem[_906 + 32] = 0 / 10^18
                mem[_906 + 64] = _900
                _992 = mem[64]
                mem[64] = mem[64] + 32
                mem[_992] = ext_call.return_data[0]
                _1001 = mem[64]
                mem[64] = mem[64] + 32
                mem[_1001] = 0
                _1002 = mem[64]
                mem[64] = mem[64] + 32
                _1007 = mem[64]
                mem[64] = mem[64] + 64
                mem[_1007] = 23
                mem[_1007 + 32] = 'multiplication overflow'
                if not ext_call.return_data[0]:
                    mem[_1002] = 0
                    mem[_906 + 96] = 0 / 10^18
                    if idx >= mem[_227]:
                        revert with 'NH{q', 50
                    mem[(32 * idx) + _227 + 32] = _906
                    if idx == -1:
                        revert with 'NH{q', 17
                    idx = idx + 1
                    continue 
                if not _900:
                    mem[_1002] = 0
                    mem[_906 + 96] = 0 / 10^18
                    if idx >= mem[_227]:
                        revert with 'NH{q', 50
                    mem[(32 * idx) + _227 + 32] = _906
                    if idx == -1:
                        revert with 'NH{q', 17
                    idx = idx + 1
                    continue 
                if ext_call.return_data[0] and _900 > -1 / ext_call.return_data[0]:
                    revert with 'NH{q', 17
                if not ext_call.return_data[0]:
                    revert with 'NH{q', 18
                if ext_call.return_data[0] * _900 / ext_call.return_data[0] == _900:
                    mem[_1002] = ext_call.return_data[0] * _900
                    mem[_906 + 96] = ext_call.return_data[0] * _900 / 10^18
                    if idx >= mem[_227]:
                        revert with 'NH{q', 50
                    mem[(32 * idx) + _227 + 32] = _906
                    if idx == -1:
                        revert with 'NH{q', 17
                    idx = idx + 1
                    continue 
                _1036 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 23
                idx = 0
                while idx < 23:
                    mem[idx + _1036 + 68] = mem[idx + _1007 + 32]
                    idx = idx + 32
                    continue 
                mem[_1036 + 91] = 0
                revert with memory
                  from mem[64]
                   len _1036 + -mem[64] + 100
            if _950 and _928 > -1 / _950:
                revert with 'NH{q', 17
            if not _950:
                revert with 'NH{q', 18
            if _950 * _928 / _950 != _928:
                _969 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 23
                idx = 0
                while idx < 23:
                    mem[idx + _969 + 68] = mem[idx + _952 + 32]
                    idx = idx + 32
                    continue 
                mem[_969 + 91] = 0
                revert with memory
                  from mem[64]
                   len _969 + -mem[64] + 100
            mem[_949] = _950 * _928
            mem[_906 + 32] = _950 * _928 / 10^18
            mem[_906 + 64] = _900
            _1018 = mem[64]
            mem[64] = mem[64] + 32
            mem[_1018] = ext_call.return_data[0]
            _1020 = mem[64]
            mem[64] = mem[64] + 32
            mem[_1020] = 0
            _1021 = mem[64]
            mem[64] = mem[64] + 32
            _1024 = mem[64]
            mem[64] = mem[64] + 64
            mem[_1024] = 23
            mem[_1024 + 32] = 'multiplication overflow'
            if not ext_call.return_data[0]:
                mem[_1021] = 0
                mem[_906 + 96] = 0 / 10^18
                if idx >= mem[_227]:
                    revert with 'NH{q', 50
                mem[(32 * idx) + _227 + 32] = _906
                if idx == -1:
                    revert with 'NH{q', 17
                idx = idx + 1
                continue 
            if not _900:
                mem[_1021] = 0
                mem[_906 + 96] = 0 / 10^18
                if idx >= mem[_227]:
                    revert with 'NH{q', 50
                mem[(32 * idx) + _227 + 32] = _906
                if idx == -1:
                    revert with 'NH{q', 17
                idx = idx + 1
                continue 
            if ext_call.return_data[0] and _900 > -1 / ext_call.return_data[0]:
                revert with 'NH{q', 17
            if not ext_call.return_data[0]:
                revert with 'NH{q', 18
            if ext_call.return_data[0] * _900 / ext_call.return_data[0] == _900:
                mem[_1021] = ext_call.return_data[0] * _900
                mem[_906 + 96] = ext_call.return_data[0] * _900 / 10^18
                if idx >= mem[_227]:
                    revert with 'NH{q', 50
                mem[(32 * idx) + _227 + 32] = _906
                if idx == -1:
                    revert with 'NH{q', 17
                idx = idx + 1
                continue 
            _1060 = mem[64]
            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = 32
            mem[mem[64] + 36] = 23
            idx = 0
            while idx < 23:
                mem[idx + _1060 + 68] = mem[idx + _1024 + 32]
                idx = idx + 32
                continue 
            mem[_1060 + 91] = 0
            revert with memory
              from mem[64]
               len _1060 + -mem[64] + 100
        _887 = mem[64]
        mem[mem[64]] = 32
        _891 = mem[_227]
        mem[mem[64] + 32] = mem[_227]
        idx = 0
        s = _227 + 32
        t = mem[64] + 64
        while idx < _891:
            _1096 = mem[s]
            mem[t] = mem[mem[s] + 12 len 20]
            mem[t + 32] = mem[_1096 + 32]
            mem[t + 64] = mem[_1096 + 64]
            mem[t + 96] = mem[_1096 + 96]
            idx = idx + 1
            s = s + 32
            t = t + 128
            continue 
        return memory
          from mem[64]
           len _887 + (128 * _891) + -mem[64] + 64
    mem[64] = _227 + (32 * _9) + 288
    mem[_227 + (32 * _9) + 160] = 0
    mem[_227 + (32 * _9) + 192] = 0
    mem[_227 + (32 * _9) + 224] = 0
    mem[_227 + (32 * _9) + 256] = 0
    mem[var38002] = var38001
    if not var38003 - 1:
        idx = 0
        while idx < _9:
            if idx >= mem[(2 * ceil32(return_data.size)) + 96]:
                revert with 'NH{q', 50
            _1332 = mem[(32 * idx) + (2 * ceil32(return_data.size)) + 128]
            mem[mem[64] + 4] = address(arg2)
            staticcall address(_1332).borrowBalanceStored(address arg1) with:
                    gas gas_remaining wei
                   args address(arg2)
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _1336 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _1344 = mem[_1336]
            _1350 = mem[64]
            mem[64] = mem[64] + 128
            if idx >= mem[(2 * ceil32(return_data.size)) + 96]:
                revert with 'NH{q', 50
            mem[_1350] = mem[(32 * idx) + (2 * ceil32(return_data.size)) + 140 len 20]
            if idx >= mem[(2 * ceil32(return_data.size)) + 96]:
                revert with 'NH{q', 50
            _1356 = mem[(32 * idx) + (2 * ceil32(return_data.size)) + 128]
            mem[mem[64] + 4] = address(arg2)
            staticcall address(_1356).0x70a08231 with:
                    gas gas_remaining wei
                   args address(arg2)
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _1368 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _1372 = mem[_1368]
            if mem[_1368] <= 0:
                mem[_1350 + 32] = 0
                mem[_1350 + 64] = _1344
                _1381 = mem[64]
                mem[64] = mem[64] + 32
                mem[_1381] = ext_call.return_data[0]
                _1386 = mem[64]
                mem[64] = mem[64] + 32
                mem[_1386] = 0
                _1387 = mem[64]
                mem[64] = mem[64] + 32
                _1390 = mem[64]
                mem[64] = mem[64] + 64
                mem[_1390] = 23
                mem[_1390 + 32] = 'multiplication overflow'
                if not ext_call.return_data[0]:
                    mem[_1387] = 0
                    mem[_1350 + 96] = 0 / 10^18
                    if idx >= mem[_227]:
                        revert with 'NH{q', 50
                    mem[(32 * idx) + _227 + 32] = _1350
                    if idx == -1:
                        revert with 'NH{q', 17
                    idx = idx + 1
                    continue 
                if not _1344:
                    mem[_1387] = 0
                    mem[_1350 + 96] = 0 / 10^18
                    if idx >= mem[_227]:
                        revert with 'NH{q', 50
                    mem[(32 * idx) + _227 + 32] = _1350
                    if idx == -1:
                        revert with 'NH{q', 17
                    idx = idx + 1
                    continue 
                if ext_call.return_data[0] and _1344 > -1 / ext_call.return_data[0]:
                    revert with 'NH{q', 17
                if not ext_call.return_data[0]:
                    revert with 'NH{q', 18
                if ext_call.return_data[0] * _1344 / ext_call.return_data[0] == _1344:
                    mem[_1387] = ext_call.return_data[0] * _1344
                    mem[_1350 + 96] = ext_call.return_data[0] * _1344 / 10^18
                    if idx >= mem[_227]:
                        revert with 'NH{q', 50
                    mem[(32 * idx) + _227 + 32] = _1350
                    if idx == -1:
                        revert with 'NH{q', 17
                    idx = idx + 1
                    continue 
                _1409 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 23
                idx = 0
                while idx < 23:
                    mem[idx + _1409 + 68] = mem[idx + _1390 + 32]
                    idx = idx + 32
                    continue 
                mem[_1409 + 91] = 0
                revert with memory
                  from mem[64]
                   len _1409 + -mem[64] + 100
            _1376 = mem[64]
            mem[64] = mem[64] + 32
            staticcall address(_1356).exchangeRateStored() with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _1379 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[_1376] = mem[_1379]
            _1392 = mem[64]
            mem[64] = mem[64] + 32
            mem[_1392] = 0
            _1393 = mem[64]
            mem[64] = mem[64] + 32
            _1394 = mem[_1376]
            _1396 = mem[64]
            mem[64] = mem[64] + 64
            mem[_1396] = 23
            mem[_1396 + 32] = 'multiplication overflow'
            if not _1394:
                mem[_1393] = 0
                mem[_1350 + 32] = 0 / 10^18
                mem[_1350 + 64] = _1344
                _1431 = mem[64]
                mem[64] = mem[64] + 32
                mem[_1431] = ext_call.return_data[0]
                _1439 = mem[64]
                mem[64] = mem[64] + 32
                mem[_1439] = 0
                _1440 = mem[64]
                mem[64] = mem[64] + 32
                _1444 = mem[64]
                mem[64] = mem[64] + 64
                mem[_1444] = 23
                mem[_1444 + 32] = 'multiplication overflow'
                if not ext_call.return_data[0]:
                    mem[_1440] = 0
                    mem[_1350 + 96] = 0 / 10^18
                    if idx >= mem[_227]:
                        revert with 'NH{q', 50
                    mem[(32 * idx) + _227 + 32] = _1350
                    if idx == -1:
                        revert with 'NH{q', 17
                    idx = idx + 1
                    continue 
                if not _1344:
                    mem[_1440] = 0
                    mem[_1350 + 96] = 0 / 10^18
                    if idx >= mem[_227]:
                        revert with 'NH{q', 50
                    mem[(32 * idx) + _227 + 32] = _1350
                    if idx == -1:
                        revert with 'NH{q', 17
                    idx = idx + 1
                    continue 
                if ext_call.return_data[0] and _1344 > -1 / ext_call.return_data[0]:
                    revert with 'NH{q', 17
                if not ext_call.return_data[0]:
                    revert with 'NH{q', 18
                if ext_call.return_data[0] * _1344 / ext_call.return_data[0] == _1344:
                    mem[_1440] = ext_call.return_data[0] * _1344
                    mem[_1350 + 96] = ext_call.return_data[0] * _1344 / 10^18
                    if idx >= mem[_227]:
                        revert with 'NH{q', 50
                    mem[(32 * idx) + _227 + 32] = _1350
                    if idx == -1:
                        revert with 'NH{q', 17
                    idx = idx + 1
                    continue 
                _1476 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 23
                idx = 0
                while idx < 23:
                    mem[idx + _1476 + 68] = mem[idx + _1444 + 32]
                    idx = idx + 32
                    continue 
                mem[_1476 + 91] = 0
                revert with memory
                  from mem[64]
                   len _1476 + -mem[64] + 100
            if not _1372:
                mem[_1393] = 0
                mem[_1350 + 32] = 0 / 10^18
                mem[_1350 + 64] = _1344
                _1436 = mem[64]
                mem[64] = mem[64] + 32
                mem[_1436] = ext_call.return_data[0]
                _1445 = mem[64]
                mem[64] = mem[64] + 32
                mem[_1445] = 0
                _1446 = mem[64]
                mem[64] = mem[64] + 32
                _1451 = mem[64]
                mem[64] = mem[64] + 64
                mem[_1451] = 23
                mem[_1451 + 32] = 'multiplication overflow'
                if not ext_call.return_data[0]:
                    mem[_1446] = 0
                    mem[_1350 + 96] = 0 / 10^18
                    if idx >= mem[_227]:
                        revert with 'NH{q', 50
                    mem[(32 * idx) + _227 + 32] = _1350
                    if idx == -1:
                        revert with 'NH{q', 17
                    idx = idx + 1
                    continue 
                if not _1344:
                    mem[_1446] = 0
                    mem[_1350 + 96] = 0 / 10^18
                    if idx >= mem[_227]:
                        revert with 'NH{q', 50
                    mem[(32 * idx) + _227 + 32] = _1350
                    if idx == -1:
                        revert with 'NH{q', 17
                    idx = idx + 1
                    continue 
                if ext_call.return_data[0] and _1344 > -1 / ext_call.return_data[0]:
                    revert with 'NH{q', 17
                if not ext_call.return_data[0]:
                    revert with 'NH{q', 18
                if ext_call.return_data[0] * _1344 / ext_call.return_data[0] == _1344:
                    mem[_1446] = ext_call.return_data[0] * _1344
                    mem[_1350 + 96] = ext_call.return_data[0] * _1344 / 10^18
                    if idx >= mem[_227]:
                        revert with 'NH{q', 50
                    mem[(32 * idx) + _227 + 32] = _1350
                    if idx == -1:
                        revert with 'NH{q', 17
                    idx = idx + 1
                    continue 
                _1480 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 23
                idx = 0
                while idx < 23:
                    mem[idx + _1480 + 68] = mem[idx + _1451 + 32]
                    idx = idx + 32
                    continue 
                mem[_1480 + 91] = 0
                revert with memory
                  from mem[64]
                   len _1480 + -mem[64] + 100
            if _1394 and _1372 > -1 / _1394:
                revert with 'NH{q', 17
            if not _1394:
                revert with 'NH{q', 18
            if _1394 * _1372 / _1394 != _1372:
                _1413 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 23
                idx = 0
                while idx < 23:
                    mem[idx + _1413 + 68] = mem[idx + _1396 + 32]
                    idx = idx + 32
                    continue 
                mem[_1413 + 91] = 0
                revert with memory
                  from mem[64]
                   len _1413 + -mem[64] + 100
            mem[_1393] = _1394 * _1372
            mem[_1350 + 32] = _1394 * _1372 / 10^18
            mem[_1350 + 64] = _1344
            _1462 = mem[64]
            mem[64] = mem[64] + 32
            mem[_1462] = ext_call.return_data[0]
            _1464 = mem[64]
            mem[64] = mem[64] + 32
            mem[_1464] = 0
            _1465 = mem[64]
            mem[64] = mem[64] + 32
            _1468 = mem[64]
            mem[64] = mem[64] + 64
            mem[_1468] = 23
            mem[_1468 + 32] = 'multiplication overflow'
            if not ext_call.return_data[0]:
                mem[_1465] = 0
                mem[_1350 + 96] = 0 / 10^18
                if idx >= mem[_227]:
                    revert with 'NH{q', 50
                mem[(32 * idx) + _227 + 32] = _1350
                if idx == -1:
                    revert with 'NH{q', 17
                idx = idx + 1
                continue 
            if not _1344:
                mem[_1465] = 0
                mem[_1350 + 96] = 0 / 10^18
                if idx >= mem[_227]:
                    revert with 'NH{q', 50
                mem[(32 * idx) + _227 + 32] = _1350
                if idx == -1:
                    revert with 'NH{q', 17
                idx = idx + 1
                continue 
            if ext_call.return_data[0] and _1344 > -1 / ext_call.return_data[0]:
                revert with 'NH{q', 17
            if not ext_call.return_data[0]:
                revert with 'NH{q', 18
            if ext_call.return_data[0] * _1344 / ext_call.return_data[0] == _1344:
                mem[_1465] = ext_call.return_data[0] * _1344
                mem[_1350 + 96] = ext_call.return_data[0] * _1344 / 10^18
                if idx >= mem[_227]:
                    revert with 'NH{q', 50
                mem[(32 * idx) + _227 + 32] = _1350
                if idx == -1:
                    revert with 'NH{q', 17
                idx = idx + 1
                continue 
            _1504 = mem[64]
            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = 32
            mem[mem[64] + 36] = 23
            idx = 0
            while idx < 23:
                mem[idx + _1504 + 68] = mem[idx + _1468 + 32]
                idx = idx + 32
                continue 
            mem[_1504 + 91] = 0
            revert with memory
              from mem[64]
               len _1504 + -mem[64] + 100
        _1331 = mem[64]
        mem[mem[64]] = 32
        _1335 = mem[_227]
        mem[mem[64] + 32] = mem[_227]
        idx = 0
        s = _227 + 32
        t = mem[64] + 64
        while idx < _1335:
            _1540 = mem[s]
            mem[t] = mem[mem[s] + 12 len 20]
            mem[t + 32] = mem[_1540 + 32]
            mem[t + 64] = mem[_1540 + 64]
            mem[t + 96] = mem[_1540 + 96]
            idx = idx + 1
            s = s + 32
            t = t + 128
            continue 
        return memory
          from mem[64]
           len _1331 + (128 * _1335) + -mem[64] + 64
    mem[64] = _227 + (32 * _9) + 416
    mem[_227 + (32 * _9) + 288] = 0
    mem[_227 + (32 * _9) + 320] = 0
    mem[_227 + (32 * _9) + 352] = 0
    mem[_227 + (32 * _9) + 384] = 0
    mem[var42002] = var42001
    if not var42003 - 1:
        idx = 0
        while idx < _9:
            if idx >= mem[(2 * ceil32(return_data.size)) + 96]:
                revert with 'NH{q', 50
            _1776 = mem[(32 * idx) + (2 * ceil32(return_data.size)) + 128]
            mem[mem[64] + 4] = address(arg2)
            staticcall address(_1776).borrowBalanceStored(address arg1) with:
                    gas gas_remaining wei
                   args address(arg2)
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _1780 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _1788 = mem[_1780]
            _1794 = mem[64]
            mem[64] = mem[64] + 128
            if idx >= mem[(2 * ceil32(return_data.size)) + 96]:
                revert with 'NH{q', 50
            mem[_1794] = mem[(32 * idx) + (2 * ceil32(return_data.size)) + 140 len 20]
            if idx >= mem[(2 * ceil32(return_data.size)) + 96]:
                revert with 'NH{q', 50
            _1800 = mem[(32 * idx) + (2 * ceil32(return_data.size)) + 128]
            mem[mem[64] + 4] = address(arg2)
            staticcall address(_1800).0x70a08231 with:
                    gas gas_remaining wei
                   args address(arg2)
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _1812 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _1816 = mem[_1812]
            if mem[_1812] <= 0:
                mem[_1794 + 32] = 0
                mem[_1794 + 64] = _1788
                _1825 = mem[64]
                mem[64] = mem[64] + 32
                mem[_1825] = ext_call.return_data[0]
                _1830 = mem[64]
                mem[64] = mem[64] + 32
                mem[_1830] = 0
                _1831 = mem[64]
                mem[64] = mem[64] + 32
                _1834 = mem[64]
                mem[64] = mem[64] + 64
                mem[_1834] = 23
                mem[_1834 + 32] = 'multiplication overflow'
                if not ext_call.return_data[0]:
                    mem[_1831] = 0
                    mem[_1794 + 96] = 0 / 10^18
                    if idx >= mem[_227]:
                        revert with 'NH{q', 50
                    mem[(32 * idx) + _227 + 32] = _1794
                    if idx == -1:
                        revert with 'NH{q', 17
                    idx = idx + 1
                    continue 
                if not _1788:
                    mem[_1831] = 0
                    mem[_1794 + 96] = 0 / 10^18
                    if idx >= mem[_227]:
                        revert with 'NH{q', 50
                    mem[(32 * idx) + _227 + 32] = _1794
                    if idx == -1:
                        revert with 'NH{q', 17
                    idx = idx + 1
                    continue 
                if ext_call.return_data[0] and _1788 > -1 / ext_call.return_data[0]:
                    revert with 'NH{q', 17
                if not ext_call.return_data[0]:
                    revert with 'NH{q', 18
                if ext_call.return_data[0] * _1788 / ext_call.return_data[0] == _1788:
                    mem[_1831] = ext_call.return_data[0] * _1788
                    mem[_1794 + 96] = ext_call.return_data[0] * _1788 / 10^18
                    if idx >= mem[_227]:
                        revert with 'NH{q', 50
                    mem[(32 * idx) + _227 + 32] = _1794
                    if idx == -1:
                        revert with 'NH{q', 17
                    idx = idx + 1
                    continue 
                _1853 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 23
                idx = 0
                while idx < 23:
                    mem[idx + _1853 + 68] = mem[idx + _1834 + 32]
                    idx = idx + 32
                    continue 
                mem[_1853 + 91] = 0
                revert with memory
                  from mem[64]
                   len _1853 + -mem[64] + 100
            _1820 = mem[64]
            mem[64] = mem[64] + 32
            staticcall address(_1800).exchangeRateStored() with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _1823 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[_1820] = mem[_1823]
            _1836 = mem[64]
            mem[64] = mem[64] + 32
            mem[_1836] = 0
            _1837 = mem[64]
            mem[64] = mem[64] + 32
            _1838 = mem[_1820]
            _1840 = mem[64]
            mem[64] = mem[64] + 64
            mem[_1840] = 23
            mem[_1840 + 32] = 'multiplication overflow'
            if not _1838:
                mem[_1837] = 0
                mem[_1794 + 32] = 0 / 10^18
                mem[_1794 + 64] = _1788
                _1875 = mem[64]
                mem[64] = mem[64] + 32
                mem[_1875] = ext_call.return_data[0]
                _1883 = mem[64]
                mem[64] = mem[64] + 32
                mem[_1883] = 0
                _1884 = mem[64]
                mem[64] = mem[64] + 32
                _1888 = mem[64]
                mem[64] = mem[64] + 64
                mem[_1888] = 23
                mem[_1888 + 32] = 'multiplication overflow'
                if not ext_call.return_data[0]:
                    mem[_1884] = 0
                    mem[_1794 + 96] = 0 / 10^18
                    if idx >= mem[_227]:
                        revert with 'NH{q', 50
                    mem[(32 * idx) + _227 + 32] = _1794
                    if idx == -1:
                        revert with 'NH{q', 17
                    idx = idx + 1
                    continue 
                if not _1788:
                    mem[_1884] = 0
                    mem[_1794 + 96] = 0 / 10^18
                    if idx >= mem[_227]:
                        revert with 'NH{q', 50
                    mem[(32 * idx) + _227 + 32] = _1794
                    if idx == -1:
                        revert with 'NH{q', 17
                    idx = idx + 1
                    continue 
                if ext_call.return_data[0] and _1788 > -1 / ext_call.return_data[0]:
                    revert with 'NH{q', 17
                if not ext_call.return_data[0]:
                    revert with 'NH{q', 18
                if ext_call.return_data[0] * _1788 / ext_call.return_data[0] == _1788:
                    mem[_1884] = ext_call.return_data[0] * _1788
                    mem[_1794 + 96] = ext_call.return_data[0] * _1788 / 10^18
                    if idx >= mem[_227]:
                        revert with 'NH{q', 50
                    mem[(32 * idx) + _227 + 32] = _1794
                    if idx == -1:
                        revert with 'NH{q', 17
                    idx = idx + 1
                    continue 
                _1920 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 23
                idx = 0
                while idx < 23:
                    mem[idx + _1920 + 68] = mem[idx + _1888 + 32]
                    idx = idx + 32
                    continue 
                mem[_1920 + 91] = 0
                revert with memory
                  from mem[64]
                   len _1920 + -mem[64] + 100
            if not _1816:
                mem[_1837] = 0
                mem[_1794 + 32] = 0 / 10^18
                mem[_1794 + 64] = _1788
                _1880 = mem[64]
                mem[64] = mem[64] + 32
                mem[_1880] = ext_call.return_data[0]
                _1889 = mem[64]
                mem[64] = mem[64] + 32
                mem[_1889] = 0
                _1890 = mem[64]
                mem[64] = mem[64] + 32
                _1895 = mem[64]
                mem[64] = mem[64] + 64
                mem[_1895] = 23
                mem[_1895 + 32] = 'multiplication overflow'
                if not ext_call.return_data[0]:
                    mem[_1890] = 0
                    mem[_1794 + 96] = 0 / 10^18
                    if idx >= mem[_227]:
                        revert with 'NH{q', 50
                    mem[(32 * idx) + _227 + 32] = _1794
                    if idx == -1:
                        revert with 'NH{q', 17
                    idx = idx + 1
                    continue 
                if not _1788:
                    mem[_1890] = 0
                    mem[_1794 + 96] = 0 / 10^18
                    if idx >= mem[_227]:
                        revert with 'NH{q', 50
                    mem[(32 * idx) + _227 + 32] = _1794
                    if idx == -1:
                        revert with 'NH{q', 17
                    idx = idx + 1
                    continue 
                if ext_call.return_data[0] and _1788 > -1 / ext_call.return_data[0]:
                    revert with 'NH{q', 17
                if not ext_call.return_data[0]:
                    revert with 'NH{q', 18
                if ext_call.return_data[0] * _1788 / ext_call.return_data[0] == _1788:
                    mem[_1890] = ext_call.return_data[0] * _1788
                    mem[_1794 + 96] = ext_call.return_data[0] * _1788 / 10^18
                    if idx >= mem[_227]:
                        revert with 'NH{q', 50
                    mem[(32 * idx) + _227 + 32] = _1794
                    if idx == -1:
                        revert with 'NH{q', 17
                    idx = idx + 1
                    continue 
                _1924 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 23
                idx = 0
                while idx < 23:
                    mem[idx + _1924 + 68] = mem[idx + _1895 + 32]
                    idx = idx + 32
                    continue 
                mem[_1924 + 91] = 0
                revert with memory
                  from mem[64]
                   len _1924 + -mem[64] + 100
            if _1838 and _1816 > -1 / _1838:
                revert with 'NH{q', 17
            if not _1838:
                revert with 'NH{q', 18
            if _1838 * _1816 / _1838 != _1816:
                _1857 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 23
                idx = 0
                while idx < 23:
                    mem[idx + _1857 + 68] = mem[idx + _1840 + 32]
                    idx = idx + 32
                    continue 
                mem[_1857 + 91] = 0
                revert with memory
                  from mem[64]
                   len _1857 + -mem[64] + 100
            mem[_1837] = _1838 * _1816
            mem[_1794 + 32] = _1838 * _1816 / 10^18
            mem[_1794 + 64] = _1788
            _1906 = mem[64]
            mem[64] = mem[64] + 32
            mem[_1906] = ext_call.return_data[0]
            _1908 = mem[64]
            mem[64] = mem[64] + 32
            mem[_1908] = 0
            _1909 = mem[64]
            mem[64] = mem[64] + 32
            _1912 = mem[64]
            mem[64] = mem[64] + 64
            mem[_1912] = 23
            mem[_1912 + 32] = 'multiplication overflow'
            if not ext_call.return_data[0]:
                mem[_1909] = 0
                mem[_1794 + 96] = 0 / 10^18
                if idx >= mem[_227]:
                    revert with 'NH{q', 50
                mem[(32 * idx) + _227 + 32] = _1794
                if idx == -1:
                    revert with 'NH{q', 17
                idx = idx + 1
                continue 
            if not _1788:
                mem[_1909] = 0
                mem[_1794 + 96] = 0 / 10^18
                if idx >= mem[_227]:
                    revert with 'NH{q', 50
                mem[(32 * idx) + _227 + 32] = _1794
                if idx == -1:
                    revert with 'NH{q', 17
                idx = idx + 1
                continue 
            if ext_call.return_data[0] and _1788 > -1 / ext_call.return_data[0]:
                revert with 'NH{q', 17
            if not ext_call.return_data[0]:
                revert with 'NH{q', 18
            if ext_call.return_data[0] * _1788 / ext_call.return_data[0] == _1788:
                mem[_1909] = ext_call.return_data[0] * _1788
                mem[_1794 + 96] = ext_call.return_data[0] * _1788 / 10^18
                if idx >= mem[_227]:
                    revert with 'NH{q', 50
                mem[(32 * idx) + _227 + 32] = _1794
                if idx == -1:
                    revert with 'NH{q', 17
                idx = idx + 1
                continue 
            _1948 = mem[64]
            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = 32
            mem[mem[64] + 36] = 23
            idx = 0
            while idx < 23:
                mem[idx + _1948 + 68] = mem[idx + _1912 + 32]
                idx = idx + 32
                continue 
            mem[_1948 + 91] = 0
            revert with memory
              from mem[64]
               len _1948 + -mem[64] + 100
        _1775 = mem[64]
        mem[mem[64]] = 32
        _1779 = mem[_227]
        mem[mem[64] + 32] = mem[_227]
        idx = 0
        s = _227 + 32
        t = mem[64] + 64
        while idx < _1779:
            _1984 = mem[s]
            mem[t] = mem[mem[s] + 12 len 20]
            mem[t + 32] = mem[_1984 + 32]
            mem[t + 64] = mem[_1984 + 64]
            mem[t + 96] = mem[_1984 + 96]
            idx = idx + 1
            s = s + 32
            t = t + 128
            continue 
        return memory
          from mem[64]
           len _1775 + (128 * _1779) + -mem[64] + 64
    mem[64] = _227 + (32 * _9) + 544
    mem[_227 + (32 * _9) + 416] = 0
    mem[_227 + (32 * _9) + 448] = 0
    mem[_227 + (32 * _9) + 480] = 0
    mem[_227 + (32 * _9) + 512] = 0
    mem[var46002] = var46001
    if not var46003 - 1:
        idx = 0
        while idx < _9:
            if idx >= mem[(2 * ceil32(return_data.size)) + 96]:
                revert with 'NH{q', 50
            _2220 = mem[(32 * idx) + (2 * ceil32(return_data.size)) + 128]
            mem[mem[64] + 4] = address(arg2)
            staticcall address(_2220).borrowBalanceStored(address arg1) with:
                    gas gas_remaining wei
                   args address(arg2)
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _2224 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _2232 = mem[_2224]
            _2238 = mem[64]
            mem[64] = mem[64] + 128
            if idx >= mem[(2 * ceil32(return_data.size)) + 96]:
                revert with 'NH{q', 50
            mem[_2238] = mem[(32 * idx) + (2 * ceil32(return_data.size)) + 140 len 20]
            if idx >= mem[(2 * ceil32(return_data.size)) + 96]:
                revert with 'NH{q', 50
            _2244 = mem[(32 * idx) + (2 * ceil32(return_data.size)) + 128]
            mem[mem[64] + 4] = address(arg2)
            staticcall address(_2244).0x70a08231 with:
                    gas gas_remaining wei
                   args address(arg2)
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _2256 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _2260 = mem[_2256]
            if mem[_2256] <= 0:
                mem[_2238 + 32] = 0
                mem[_2238 + 64] = _2232
                _2269 = mem[64]
                mem[64] = mem[64] + 32
                mem[_2269] = ext_call.return_data[0]
                _2274 = mem[64]
                mem[64] = mem[64] + 32
                mem[_2274] = 0
                _2275 = mem[64]
                mem[64] = mem[64] + 32
                _2278 = mem[64]
                mem[64] = mem[64] + 64
                mem[_2278] = 23
                mem[_2278 + 32] = 'multiplication overflow'
                if not ext_call.return_data[0]:
                    mem[_2275] = 0
                    mem[_2238 + 96] = 0 / 10^18
                    if idx >= mem[_227]:
                        revert with 'NH{q', 50
                    mem[(32 * idx) + _227 + 32] = _2238
                    if idx == -1:
                        revert with 'NH{q', 17
                    idx = idx + 1
                    continue 
                if not _2232:
                    mem[_2275] = 0
                    mem[_2238 + 96] = 0 / 10^18
                    if idx >= mem[_227]:
                        revert with 'NH{q', 50
                    mem[(32 * idx) + _227 + 32] = _2238
                    if idx == -1:
                        revert with 'NH{q', 17
                    idx = idx + 1
                    continue 
                if ext_call.return_data[0] and _2232 > -1 / ext_call.return_data[0]:
                    revert with 'NH{q', 17
                if not ext_call.return_data[0]:
                    revert with 'NH{q', 18
                if ext_call.return_data[0] * _2232 / ext_call.return_data[0] == _2232:
                    mem[_2275] = ext_call.return_data[0] * _2232
                    mem[_2238 + 96] = ext_call.return_data[0] * _2232 / 10^18
                    if idx >= mem[_227]:
                        revert with 'NH{q', 50
                    mem[(32 * idx) + _227 + 32] = _2238
                    if idx == -1:
                        revert with 'NH{q', 17
                    idx = idx + 1
                    continue 
                _2297 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 23
                idx = 0
                while idx < 23:
                    mem[idx + _2297 + 68] = mem[idx + _2278 + 32]
                    idx = idx + 32
                    continue 
                mem[_2297 + 91] = 0
                revert with memory
                  from mem[64]
                   len _2297 + -mem[64] + 100
            _2264 = mem[64]
            mem[64] = mem[64] + 32
            staticcall address(_2244).exchangeRateStored() with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _2267 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[_2264] = mem[_2267]
            _2280 = mem[64]
            mem[64] = mem[64] + 32
            mem[_2280] = 0
            _2281 = mem[64]
            mem[64] = mem[64] + 32
            _2282 = mem[_2264]
            _2284 = mem[64]
            mem[64] = mem[64] + 64
            mem[_2284] = 23
            mem[_2284 + 32] = 'multiplication overflow'
            if not _2282:
                mem[_2281] = 0
                mem[_2238 + 32] = 0 / 10^18
                mem[_2238 + 64] = _2232
                _2319 = mem[64]
                mem[64] = mem[64] + 32
                mem[_2319] = ext_call.return_data[0]
                _2327 = mem[64]
                mem[64] = mem[64] + 32
                mem[_2327] = 0
                _2328 = mem[64]
                mem[64] = mem[64] + 32
                _2332 = mem[64]
                mem[64] = mem[64] + 64
                mem[_2332] = 23
                mem[_2332 + 32] = 'multiplication overflow'
                if not ext_call.return_data[0]:
                    mem[_2328] = 0
                    mem[_2238 + 96] = 0 / 10^18
                    if idx >= mem[_227]:
                        revert with 'NH{q', 50
                    mem[(32 * idx) + _227 + 32] = _2238
                    if idx == -1:
                        revert with 'NH{q', 17
                    idx = idx + 1
                    continue 
                if not _2232:
                    mem[_2328] = 0
                    mem[_2238 + 96] = 0 / 10^18
                    if idx >= mem[_227]:
                        revert with 'NH{q', 50
                    mem[(32 * idx) + _227 + 32] = _2238
                    if idx == -1:
                        revert with 'NH{q', 17
                    idx = idx + 1
                    continue 
                if ext_call.return_data[0] and _2232 > -1 / ext_call.return_data[0]:
                    revert with 'NH{q', 17
                if not ext_call.return_data[0]:
                    revert with 'NH{q', 18
                if ext_call.return_data[0] * _2232 / ext_call.return_data[0] == _2232:
                    mem[_2328] = ext_call.return_data[0] * _2232
                    mem[_2238 + 96] = ext_call.return_data[0] * _2232 / 10^18
                    if idx >= mem[_227]:
                        revert with 'NH{q', 50
                    mem[(32 * idx) + _227 + 32] = _2238
                    if idx == -1:
                        revert with 'NH{q', 17
                    idx = idx + 1
                    continue 
                _2364 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 23
                idx = 0
                while idx < 23:
                    mem[idx + _2364 + 68] = mem[idx + _2332 + 32]
                    idx = idx + 32
                    continue 
                mem[_2364 + 91] = 0
                revert with memory
                  from mem[64]
                   len _2364 + -mem[64] + 100
            if not _2260:
                mem[_2281] = 0
                mem[_2238 + 32] = 0 / 10^18
                mem[_2238 + 64] = _2232
                _2324 = mem[64]
                mem[64] = mem[64] + 32
                mem[_2324] = ext_call.return_data[0]
                _2333 = mem[64]
                mem[64] = mem[64] + 32
                mem[_2333] = 0
                _2334 = mem[64]
                mem[64] = mem[64] + 32
                _2339 = mem[64]
                mem[64] = mem[64] + 64
                mem[_2339] = 23
                mem[_2339 + 32] = 'multiplication overflow'
                if not ext_call.return_data[0]:
                    mem[_2334] = 0
                    mem[_2238 + 96] = 0 / 10^18
                    if idx >= mem[_227]:
                        revert with 'NH{q', 50
                    mem[(32 * idx) + _227 + 32] = _2238
                    if idx == -1:
                        revert with 'NH{q', 17
                    idx = idx + 1
                    continue 
                if not _2232:
                    mem[_2334] = 0
                    mem[_2238 + 96] = 0 / 10^18
                    if idx >= mem[_227]:
                        revert with 'NH{q', 50
                    mem[(32 * idx) + _227 + 32] = _2238
                    if idx == -1:
                        revert with 'NH{q', 17
                    idx = idx + 1
                    continue 
                if ext_call.return_data[0] and _2232 > -1 / ext_call.return_data[0]:
                    revert with 'NH{q', 17
                if not ext_call.return_data[0]:
                    revert with 'NH{q', 18
                if ext_call.return_data[0] * _2232 / ext_call.return_data[0] == _2232:
                    mem[_2334] = ext_call.return_data[0] * _2232
                    mem[_2238 + 96] = ext_call.return_data[0] * _2232 / 10^18
                    if idx >= mem[_227]:
                        revert with 'NH{q', 50
                    mem[(32 * idx) + _227 + 32] = _2238
                    if idx == -1:
                        revert with 'NH{q', 17
                    idx = idx + 1
                    continue 
                _2368 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 23
                idx = 0
                while idx < 23:
                    mem[idx + _2368 + 68] = mem[idx + _2339 + 32]
                    idx = idx + 32
                    continue 
                mem[_2368 + 91] = 0
                revert with memory
                  from mem[64]
                   len _2368 + -mem[64] + 100
            if _2282 and _2260 > -1 / _2282:
                revert with 'NH{q', 17
            if not _2282:
                revert with 'NH{q', 18
            if _2282 * _2260 / _2282 != _2260:
                _2301 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 23
                idx = 0
                while idx < 23:
                    mem[idx + _2301 + 68] = mem[idx + _2284 + 32]
                    idx = idx + 32
                    continue 
                mem[_2301 + 91] = 0
                revert with memory
                  from mem[64]
                   len _2301 + -mem[64] + 100
            mem[_2281] = _2282 * _2260
            mem[_2238 + 32] = _2282 * _2260 / 10^18
            mem[_2238 + 64] = _2232
            _2350 = mem[64]
            mem[64] = mem[64] + 32
            mem[_2350] = ext_call.return_data[0]
            _2352 = mem[64]
            mem[64] = mem[64] + 32
            mem[_2352] = 0
            _2353 = mem[64]
            mem[64] = mem[64] + 32
            _2356 = mem[64]
            mem[64] = mem[64] + 64
            mem[_2356] = 23
            mem[_2356 + 32] = 'multiplication overflow'
            if not ext_call.return_data[0]:
                mem[_2353] = 0
                mem[_2238 + 96] = 0 / 10^18
                if idx >= mem[_227]:
                    revert with 'NH{q', 50
                mem[(32 * idx) + _227 + 32] = _2238
                if idx == -1:
                    revert with 'NH{q', 17
                idx = idx + 1
                continue 
            if not _2232:
                mem[_2353] = 0
                mem[_2238 + 96] = 0 / 10^18
                if idx >= mem[_227]:
                    revert with 'NH{q', 50
                mem[(32 * idx) + _227 + 32] = _2238
                if idx == -1:
                    revert with 'NH{q', 17
                idx = idx + 1
                continue 
            if ext_call.return_data[0] and _2232 > -1 / ext_call.return_data[0]:
                revert with 'NH{q', 17
            if not ext_call.return_data[0]:
                revert with 'NH{q', 18
            if ext_call.return_data[0] * _2232 / ext_call.return_data[0] == _2232:
                mem[_2353] = ext_call.return_data[0] * _2232
                mem[_2238 + 96] = ext_call.return_data[0] * _2232 / 10^18
                if idx >= mem[_227]:
                    revert with 'NH{q', 50
                mem[(32 * idx) + _227 + 32] = _2238
                if idx == -1:
                    revert with 'NH{q', 17
                idx = idx + 1
                continue 
            _2392 = mem[64]
            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = 32
            mem[mem[64] + 36] = 23
            idx = 0
            while idx < 23:
                mem[idx + _2392 + 68] = mem[idx + _2356 + 32]
                idx = idx + 32
                continue 
            mem[_2392 + 91] = 0
            revert with memory
              from mem[64]
               len _2392 + -mem[64] + 100
        _2219 = mem[64]
        mem[mem[64]] = 32
        _2223 = mem[_227]
        mem[mem[64] + 32] = mem[_227]
        idx = 0
        s = _227 + 32
        t = mem[64] + 64
        while idx < _2223:
            _2428 = mem[s]
            mem[t] = mem[mem[s] + 12 len 20]
            mem[t + 32] = mem[_2428 + 32]
            mem[t + 64] = mem[_2428 + 64]
            mem[t + 96] = mem[_2428 + 96]
            idx = idx + 1
            s = s + 32
            t = t + 128
            continue 
        return memory
          from mem[64]
           len _2219 + (128 * _2223) + -mem[64] + 64
    mem[64] = _227 + (32 * _9) + 672
    mem[_227 + (32 * _9) + 544] = 0
    mem[_227 + (32 * _9) + 576] = 0
    mem[_227 + (32 * _9) + 608] = 0
    mem[_227 + (32 * _9) + 640] = 0
    mem[var50002] = var50001
    if not var50003 - 1:
        idx = 0
        while idx < _9:
            if idx >= mem[(2 * ceil32(return_data.size)) + 96]:
                revert with 'NH{q', 50
            _2664 = mem[(32 * idx) + (2 * ceil32(return_data.size)) + 128]
            mem[mem[64] + 4] = address(arg2)
            staticcall address(_2664).borrowBalanceStored(address arg1) with:
                    gas gas_remaining wei
                   args address(arg2)
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _2668 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _2676 = mem[_2668]
            _2682 = mem[64]
            mem[64] = mem[64] + 128
            if idx >= mem[(2 * ceil32(return_data.size)) + 96]:
                revert with 'NH{q', 50
            mem[_2682] = mem[(32 * idx) + (2 * ceil32(return_data.size)) + 140 len 20]
            if idx >= mem[(2 * ceil32(return_data.size)) + 96]:
                revert with 'NH{q', 50
            _2688 = mem[(32 * idx) + (2 * ceil32(return_data.size)) + 128]
            mem[mem[64] + 4] = address(arg2)
            staticcall address(_2688).0x70a08231 with:
                    gas gas_remaining wei
                   args address(arg2)
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _2700 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _2704 = mem[_2700]
            if mem[_2700] <= 0:
                mem[_2682 + 32] = 0
                mem[_2682 + 64] = _2676
                _2713 = mem[64]
                mem[64] = mem[64] + 32
                mem[_2713] = ext_call.return_data[0]
                _2718 = mem[64]
                mem[64] = mem[64] + 32
                mem[_2718] = 0
                _2719 = mem[64]
                mem[64] = mem[64] + 32
                _2722 = mem[64]
                mem[64] = mem[64] + 64
                mem[_2722] = 23
                mem[_2722 + 32] = 'multiplication overflow'
                if not ext_call.return_data[0]:
                    mem[_2719] = 0
                    mem[_2682 + 96] = 0 / 10^18
                    if idx >= mem[_227]:
                        revert with 'NH{q', 50
                    mem[(32 * idx) + _227 + 32] = _2682
                    if idx == -1:
                        revert with 'NH{q', 17
                    idx = idx + 1
                    continue 
                if not _2676:
                    mem[_2719] = 0
                    mem[_2682 + 96] = 0 / 10^18
                    if idx >= mem[_227]:
                        revert with 'NH{q', 50
                    mem[(32 * idx) + _227 + 32] = _2682
                    if idx == -1:
                        revert with 'NH{q', 17
                    idx = idx + 1
                    continue 
                if ext_call.return_data[0] and _2676 > -1 / ext_call.return_data[0]:
                    revert with 'NH{q', 17
                if not ext_call.return_data[0]:
                    revert with 'NH{q', 18
                if ext_call.return_data[0] * _2676 / ext_call.return_data[0] == _2676:
                    mem[_2719] = ext_call.return_data[0] * _2676
                    mem[_2682 + 96] = ext_call.return_data[0] * _2676 / 10^18
                    if idx >= mem[_227]:
                        revert with 'NH{q', 50
                    mem[(32 * idx) + _227 + 32] = _2682
                    if idx == -1:
                        revert with 'NH{q', 17
                    idx = idx + 1
                    continue 
                _2741 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 23
                idx = 0
                while idx < 23:
                    mem[idx + _2741 + 68] = mem[idx + _2722 + 32]
                    idx = idx + 32
                    continue 
                mem[_2741 + 91] = 0
                revert with memory
                  from mem[64]
                   len _2741 + -mem[64] + 100
            _2708 = mem[64]
            mem[64] = mem[64] + 32
            staticcall address(_2688).exchangeRateStored() with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _2711 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[_2708] = mem[_2711]
            _2724 = mem[64]
            mem[64] = mem[64] + 32
            mem[_2724] = 0
            _2725 = mem[64]
            mem[64] = mem[64] + 32
            _2726 = mem[_2708]
            _2728 = mem[64]
            mem[64] = mem[64] + 64
            mem[_2728] = 23
            mem[_2728 + 32] = 'multiplication overflow'
            if not _2726:
                mem[_2725] = 0
                mem[_2682 + 32] = 0 / 10^18
                mem[_2682 + 64] = _2676
                _2763 = mem[64]
                mem[64] = mem[64] + 32
                mem[_2763] = ext_call.return_data[0]
                _2771 = mem[64]
                mem[64] = mem[64] + 32
                mem[_2771] = 0
                _2772 = mem[64]
                mem[64] = mem[64] + 32
                _2776 = mem[64]
                mem[64] = mem[64] + 64
                mem[_2776] = 23
                mem[_2776 + 32] = 'multiplication overflow'
                if not ext_call.return_data[0]:
                    mem[_2772] = 0
                    mem[_2682 + 96] = 0 / 10^18
                    if idx >= mem[_227]:
                        revert with 'NH{q', 50
                    mem[(32 * idx) + _227 + 32] = _2682
                    if idx == -1:
                        revert with 'NH{q', 17
                    idx = idx + 1
                    continue 
                if not _2676:
                    mem[_2772] = 0
                    mem[_2682 + 96] = 0 / 10^18
                    if idx >= mem[_227]:
                        revert with 'NH{q', 50
                    mem[(32 * idx) + _227 + 32] = _2682
                    if idx == -1:
                        revert with 'NH{q', 17
                    idx = idx + 1
                    continue 
                if ext_call.return_data[0] and _2676 > -1 / ext_call.return_data[0]:
                    revert with 'NH{q', 17
                if not ext_call.return_data[0]:
                    revert with 'NH{q', 18
                if ext_call.return_data[0] * _2676 / ext_call.return_data[0] == _2676:
                    mem[_2772] = ext_call.return_data[0] * _2676
                    mem[_2682 + 96] = ext_call.return_data[0] * _2676 / 10^18
                    if idx >= mem[_227]:
                        revert with 'NH{q', 50
                    mem[(32 * idx) + _227 + 32] = _2682
                    if idx == -1:
                        revert with 'NH{q', 17
                    idx = idx + 1
                    continue 
                _2808 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 23
                idx = 0
                while idx < 23:
                    mem[idx + _2808 + 68] = mem[idx + _2776 + 32]
                    idx = idx + 32
                    continue 
                mem[_2808 + 91] = 0
                revert with memory
                  from mem[64]
                   len _2808 + -mem[64] + 100
            if not _2704:
                mem[_2725] = 0
                mem[_2682 + 32] = 0 / 10^18
                mem[_2682 + 64] = _2676
                _2768 = mem[64]
                mem[64] = mem[64] + 32
                mem[_2768] = ext_call.return_data[0]
                _2777 = mem[64]
                mem[64] = mem[64] + 32
                mem[_2777] = 0
                _2778 = mem[64]
                mem[64] = mem[64] + 32
                _2783 = mem[64]
                mem[64] = mem[64] + 64
                mem[_2783] = 23
                mem[_2783 + 32] = 'multiplication overflow'
                if not ext_call.return_data[0]:
                    mem[_2778] = 0
                    mem[_2682 + 96] = 0 / 10^18
                    if idx >= mem[_227]:
                        revert with 'NH{q', 50
                    mem[(32 * idx) + _227 + 32] = _2682
                    if idx == -1:
                        revert with 'NH{q', 17
                    idx = idx + 1
                    continue 
                if not _2676:
                    mem[_2778] = 0
                    mem[_2682 + 96] = 0 / 10^18
                    if idx >= mem[_227]:
                        revert with 'NH{q', 50
                    mem[(32 * idx) + _227 + 32] = _2682
                    if idx == -1:
                        revert with 'NH{q', 17
                    idx = idx + 1
                    continue 
                if ext_call.return_data[0] and _2676 > -1 / ext_call.return_data[0]:
                    revert with 'NH{q', 17
                if not ext_call.return_data[0]:
                    revert with 'NH{q', 18
                if ext_call.return_data[0] * _2676 / ext_call.return_data[0] == _2676:
                    mem[_2778] = ext_call.return_data[0] * _2676
                    mem[_2682 + 96] = ext_call.return_data[0] * _2676 / 10^18
                    if idx >= mem[_227]:
                        revert with 'NH{q', 50
                    mem[(32 * idx) + _227 + 32] = _2682
                    if idx == -1:
                        revert with 'NH{q', 17
                    idx = idx + 1
                    continue 
                _2812 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 23
                idx = 0
                while idx < 23:
                    mem[idx + _2812 + 68] = mem[idx + _2783 + 32]
                    idx = idx + 32
                    continue 
                mem[_2812 + 91] = 0
                revert with memory
                  from mem[64]
                   len _2812 + -mem[64] + 100
            if _2726 and _2704 > -1 / _2726:
                revert with 'NH{q', 17
            if not _2726:
                revert with 'NH{q', 18
            if _2726 * _2704 / _2726 != _2704:
                _2745 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 23
                idx = 0
                while idx < 23:
                    mem[idx + _2745 + 68] = mem[idx + _2728 + 32]
                    idx = idx + 32
                    continue 
                mem[_2745 + 91] = 0
                revert with memory
                  from mem[64]
                   len _2745 + -mem[64] + 100
            mem[_2725] = _2726 * _2704
            mem[_2682 + 32] = _2726 * _2704 / 10^18
            mem[_2682 + 64] = _2676
            _2794 = mem[64]
            mem[64] = mem[64] + 32
            mem[_2794] = ext_call.return_data[0]
            _2796 = mem[64]
            mem[64] = mem[64] + 32
            mem[_2796] = 0
            _2797 = mem[64]
            mem[64] = mem[64] + 32
            _2800 = mem[64]
            mem[64] = mem[64] + 64
            mem[_2800] = 23
            mem[_2800 + 32] = 'multiplication overflow'
            if not ext_call.return_data[0]:
                mem[_2797] = 0
                mem[_2682 + 96] = 0 / 10^18
                if idx >= mem[_227]:
                    revert with 'NH{q', 50
                mem[(32 * idx) + _227 + 32] = _2682
                if idx == -1:
                    revert with 'NH{q', 17
                idx = idx + 1
                continue 
            if not _2676:
                mem[_2797] = 0
                mem[_2682 + 96] = 0 / 10^18
                if idx >= mem[_227]:
                    revert with 'NH{q', 50
                mem[(32 * idx) + _227 + 32] = _2682
                if idx == -1:
                    revert with 'NH{q', 17
                idx = idx + 1
                continue 
            if ext_call.return_data[0] and _2676 > -1 / ext_call.return_data[0]:
                revert with 'NH{q', 17
            if not ext_call.return_data[0]:
                revert with 'NH{q', 18
            if ext_call.return_data[0] * _2676 / ext_call.return_data[0] == _2676:
                mem[_2797] = ext_call.return_data[0] * _2676
                mem[_2682 + 96] = ext_call.return_data[0] * _2676 / 10^18
                if idx >= mem[_227]:
                    revert with 'NH{q', 50
                mem[(32 * idx) + _227 + 32] = _2682
                if idx == -1:
                    revert with 'NH{q', 17
                idx = idx + 1
                continue 
            _2836 = mem[64]
            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = 32
            mem[mem[64] + 36] = 23
            idx = 0
            while idx < 23:
                mem[idx + _2836 + 68] = mem[idx + _2800 + 32]
                idx = idx + 32
                continue 
            mem[_2836 + 91] = 0
            revert with memory
              from mem[64]
               len _2836 + -mem[64] + 100
        _2663 = mem[64]
        mem[mem[64]] = 32
        _2667 = mem[_227]
        mem[mem[64] + 32] = mem[_227]
        idx = 0
        s = _227 + 32
        t = mem[64] + 64
        while idx < _2667:
            _2872 = mem[s]
            mem[t] = mem[mem[s] + 12 len 20]
            mem[t + 32] = mem[_2872 + 32]
            mem[t + 64] = mem[_2872 + 64]
            mem[t + 96] = mem[_2872 + 96]
            idx = idx + 1
            s = s + 32
            t = t + 128
            continue 
        return memory
          from mem[64]
           len _2663 + (128 * _2667) + -mem[64] + 64
    mem[64] = _227 + (32 * _9) + 800
    mem[_227 + (32 * _9) + 672] = 0
    mem[_227 + (32 * _9) + 704] = 0
    mem[_227 + (32 * _9) + 736] = 0
    mem[_227 + (32 * _9) + 768] = 0
    mem[var54002] = var54001
    if not var54003 - 1:
        idx = 0
        while idx < _9:
            if idx >= mem[(2 * ceil32(return_data.size)) + 96]:
                revert with 'NH{q', 50
            _3108 = mem[(32 * idx) + (2 * ceil32(return_data.size)) + 128]
            mem[mem[64] + 4] = address(arg2)
            staticcall address(_3108).borrowBalanceStored(address arg1) with:
                    gas gas_remaining wei
                   args address(arg2)
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _3112 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _3120 = mem[_3112]
            _3126 = mem[64]
            mem[64] = mem[64] + 128
            if idx >= mem[(2 * ceil32(return_data.size)) + 96]:
                revert with 'NH{q', 50
            mem[_3126] = mem[(32 * idx) + (2 * ceil32(return_data.size)) + 140 len 20]
            if idx >= mem[(2 * ceil32(return_data.size)) + 96]:
                revert with 'NH{q', 50
            _3132 = mem[(32 * idx) + (2 * ceil32(return_data.size)) + 128]
            mem[mem[64] + 4] = address(arg2)
            staticcall address(_3132).0x70a08231 with:
                    gas gas_remaining wei
                   args address(arg2)
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _3144 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _3148 = mem[_3144]
            if mem[_3144] <= 0:
                mem[_3126 + 32] = 0
                mem[_3126 + 64] = _3120
                _3157 = mem[64]
                mem[64] = mem[64] + 32
                mem[_3157] = ext_call.return_data[0]
                _3162 = mem[64]
                mem[64] = mem[64] + 32
                mem[_3162] = 0
                _3163 = mem[64]
                mem[64] = mem[64] + 32
                _3166 = mem[64]
                mem[64] = mem[64] + 64
                mem[_3166] = 23
                mem[_3166 + 32] = 'multiplication overflow'
                if not ext_call.return_data[0]:
                    mem[_3163] = 0
                    mem[_3126 + 96] = 0 / 10^18
                    if idx >= mem[_227]:
                        revert with 'NH{q', 50
                    mem[(32 * idx) + _227 + 32] = _3126
                    if idx == -1:
                        revert with 'NH{q', 17
                    idx = idx + 1
                    continue 
                if not _3120:
                    mem[_3163] = 0
                    mem[_3126 + 96] = 0 / 10^18
                    if idx >= mem[_227]:
                        revert with 'NH{q', 50
                    mem[(32 * idx) + _227 + 32] = _3126
                    if idx == -1:
                        revert with 'NH{q', 17
                    idx = idx + 1
                    continue 
                if ext_call.return_data[0] and _3120 > -1 / ext_call.return_data[0]:
                    revert with 'NH{q', 17
                if not ext_call.return_data[0]:
                    revert with 'NH{q', 18
                if ext_call.return_data[0] * _3120 / ext_call.return_data[0] == _3120:
                    mem[_3163] = ext_call.return_data[0] * _3120
                    mem[_3126 + 96] = ext_call.return_data[0] * _3120 / 10^18
                    if idx >= mem[_227]:
                        revert with 'NH{q', 50
                    mem[(32 * idx) + _227 + 32] = _3126
                    if idx == -1:
                        revert with 'NH{q', 17
                    idx = idx + 1
                    continue 
                _3185 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 23
                idx = 0
                while idx < 23:
                    mem[idx + _3185 + 68] = mem[idx + _3166 + 32]
                    idx = idx + 32
                    continue 
                mem[_3185 + 91] = 0
                revert with memory
                  from mem[64]
                   len _3185 + -mem[64] + 100
            _3152 = mem[64]
            mem[64] = mem[64] + 32
            staticcall address(_3132).exchangeRateStored() with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _3155 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[_3152] = mem[_3155]
            _3168 = mem[64]
            mem[64] = mem[64] + 32
            mem[_3168] = 0
            _3169 = mem[64]
            mem[64] = mem[64] + 32
            _3170 = mem[_3152]
            _3172 = mem[64]
            mem[64] = mem[64] + 64
            mem[_3172] = 23
            mem[_3172 + 32] = 'multiplication overflow'
            if not _3170:
                mem[_3169] = 0
                mem[_3126 + 32] = 0 / 10^18
                mem[_3126 + 64] = _3120
                _3207 = mem[64]
                mem[64] = mem[64] + 32
                mem[_3207] = ext_call.return_data[0]
                _3215 = mem[64]
                mem[64] = mem[64] + 32
                mem[_3215] = 0
                _3216 = mem[64]
                mem[64] = mem[64] + 32
                _3220 = mem[64]
                mem[64] = mem[64] + 64
                mem[_3220] = 23
                mem[_3220 + 32] = 'multiplication overflow'
                if not ext_call.return_data[0]:
                    mem[_3216] = 0
                    mem[_3126 + 96] = 0 / 10^18
                    if idx >= mem[_227]:
                        revert with 'NH{q', 50
                    mem[(32 * idx) + _227 + 32] = _3126
                    if idx == -1:
                        revert with 'NH{q', 17
                    idx = idx + 1
                    continue 
                if not _3120:
                    mem[_3216] = 0
                    mem[_3126 + 96] = 0 / 10^18
                    if idx >= mem[_227]:
                        revert with 'NH{q', 50
                    mem[(32 * idx) + _227 + 32] = _3126
                    if idx == -1:
                        revert with 'NH{q', 17
                    idx = idx + 1
                    continue 
                if ext_call.return_data[0] and _3120 > -1 / ext_call.return_data[0]:
                    revert with 'NH{q', 17
                if not ext_call.return_data[0]:
                    revert with 'NH{q', 18
                if ext_call.return_data[0] * _3120 / ext_call.return_data[0] == _3120:
                    mem[_3216] = ext_call.return_data[0] * _3120
                    mem[_3126 + 96] = ext_call.return_data[0] * _3120 / 10^18
                    if idx >= mem[_227]:
                        revert with 'NH{q', 50
                    mem[(32 * idx) + _227 + 32] = _3126
                    if idx == -1:
                        revert with 'NH{q', 17
                    idx = idx + 1
                    continue 
                _3252 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 23
                idx = 0
                while idx < 23:
                    mem[idx + _3252 + 68] = mem[idx + _3220 + 32]
                    idx = idx + 32
                    continue 
                mem[_3252 + 91] = 0
                revert with memory
                  from mem[64]
                   len _3252 + -mem[64] + 100
            if not _3148:
                mem[_3169] = 0
                mem[_3126 + 32] = 0 / 10^18
                mem[_3126 + 64] = _3120
                _3212 = mem[64]
                mem[64] = mem[64] + 32
                mem[_3212] = ext_call.return_data[0]
                _3221 = mem[64]
                mem[64] = mem[64] + 32
                mem[_3221] = 0
                _3222 = mem[64]
                mem[64] = mem[64] + 32
                _3227 = mem[64]
                mem[64] = mem[64] + 64
                mem[_3227] = 23
                mem[_3227 + 32] = 'multiplication overflow'
                if not ext_call.return_data[0]:
                    mem[_3222] = 0
                    mem[_3126 + 96] = 0 / 10^18
                    if idx >= mem[_227]:
                        revert with 'NH{q', 50
                    mem[(32 * idx) + _227 + 32] = _3126
                    if idx == -1:
                        revert with 'NH{q', 17
                    idx = idx + 1
                    continue 
                if not _3120:
                    mem[_3222] = 0
                    mem[_3126 + 96] = 0 / 10^18
                    if idx >= mem[_227]:
                        revert with 'NH{q', 50
                    mem[(32 * idx) + _227 + 32] = _3126
                    if idx == -1:
                        revert with 'NH{q', 17
                    idx = idx + 1
                    continue 
                if ext_call.return_data[0] and _3120 > -1 / ext_call.return_data[0]:
                    revert with 'NH{q', 17
                if not ext_call.return_data[0]:
                    revert with 'NH{q', 18
                if ext_call.return_data[0] * _3120 / ext_call.return_data[0] == _3120:
                    mem[_3222] = ext_call.return_data[0] * _3120
                    mem[_3126 + 96] = ext_call.return_data[0] * _3120 / 10^18
                    if idx >= mem[_227]:
                        revert with 'NH{q', 50
                    mem[(32 * idx) + _227 + 32] = _3126
                    if idx == -1:
                        revert with 'NH{q', 17
                    idx = idx + 1
                    continue 
                _3256 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 23
                idx = 0
                while idx < 23:
                    mem[idx + _3256 + 68] = mem[idx + _3227 + 32]
                    idx = idx + 32
                    continue 
                mem[_3256 + 91] = 0
                revert with memory
                  from mem[64]
                   len _3256 + -mem[64] + 100
            if _3170 and _3148 > -1 / _3170:
                revert with 'NH{q', 17
            if not _3170:
                revert with 'NH{q', 18
            if _3170 * _3148 / _3170 != _3148:
                _3189 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 23
                idx = 0
                while idx < 23:
                    mem[idx + _3189 + 68] = mem[idx + _3172 + 32]
                    idx = idx + 32
                    continue 
                mem[_3189 + 91] = 0
                revert with memory
                  from mem[64]
                   len _3189 + -mem[64] + 100
            mem[_3169] = _3170 * _3148
            mem[_3126 + 32] = _3170 * _3148 / 10^18
            mem[_3126 + 64] = _3120
            _3238 = mem[64]
            mem[64] = mem[64] + 32
            mem[_3238] = ext_call.return_data[0]
            _3240 = mem[64]
            mem[64] = mem[64] + 32
            mem[_3240] = 0
            _3241 = mem[64]
            mem[64] = mem[64] + 32
            _3244 = mem[64]
            mem[64] = mem[64] + 64
            mem[_3244] = 23
            mem[_3244 + 32] = 'multiplication overflow'
            if not ext_call.return_data[0]:
                mem[_3241] = 0
                mem[_3126 + 96] = 0 / 10^18
                if idx >= mem[_227]:
                    revert with 'NH{q', 50
                mem[(32 * idx) + _227 + 32] = _3126
                if idx == -1:
                    revert with 'NH{q', 17
                idx = idx + 1
                continue 
            if not _3120:
                mem[_3241] = 0
                mem[_3126 + 96] = 0 / 10^18
                if idx >= mem[_227]:
                    revert with 'NH{q', 50
                mem[(32 * idx) + _227 + 32] = _3126
                if idx == -1:
                    revert with 'NH{q', 17
                idx = idx + 1
                continue 
            if ext_call.return_data[0] and _3120 > -1 / ext_call.return_data[0]:
                revert with 'NH{q', 17
            if not ext_call.return_data[0]:
                revert with 'NH{q', 18
            if ext_call.return_data[0] * _3120 / ext_call.return_data[0] == _3120:
                mem[_3241] = ext_call.return_data[0] * _3120
                mem[_3126 + 96] = ext_call.return_data[0] * _3120 / 10^18
                if idx >= mem[_227]:
                    revert with 'NH{q', 50
                mem[(32 * idx) + _227 + 32] = _3126
                if idx == -1:
                    revert with 'NH{q', 17
                idx = idx + 1
                continue 
            _3280 = mem[64]
            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = 32
            mem[mem[64] + 36] = 23
            idx = 0
            while idx < 23:
                mem[idx + _3280 + 68] = mem[idx + _3244 + 32]
                idx = idx + 32
                continue 
            mem[_3280 + 91] = 0
            revert with memory
              from mem[64]
               len _3280 + -mem[64] + 100
        _3107 = mem[64]
        mem[mem[64]] = 32
        _3111 = mem[_227]
        mem[mem[64] + 32] = mem[_227]
        idx = 0
        s = _227 + 32
        t = mem[64] + 64
        while idx < _3111:
            _3316 = mem[s]
            mem[t] = mem[mem[s] + 12 len 20]
            mem[t + 32] = mem[_3316 + 32]
            mem[t + 64] = mem[_3316 + 64]
            mem[t + 96] = mem[_3316 + 96]
            idx = idx + 1
            s = s + 32
            t = t + 128
            continue 
        return memory
          from mem[64]
           len _3107 + (128 * _3111) + -mem[64] + 64
    mem[64] = _227 + (32 * _9) + 928
    mem[_227 + (32 * _9) + 800] = 0
    mem[_227 + (32 * _9) + 832] = 0
    mem[_227 + (32 * _9) + 864] = 0
    mem[_227 + (32 * _9) + 896] = 0
    mem[var58002] = var58001
    if not var58003 - 1:
        idx = 0
        while idx < _9:
            if idx >= mem[(2 * ceil32(return_data.size)) + 96]:
                revert with 'NH{q', 50
            _3552 = mem[(32 * idx) + (2 * ceil32(return_data.size)) + 128]
            mem[mem[64] + 4] = address(arg2)
            staticcall address(_3552).borrowBalanceStored(address arg1) with:
                    gas gas_remaining wei
                   args address(arg2)
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _3556 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _3564 = mem[_3556]
            _3570 = mem[64]
            mem[64] = mem[64] + 128
            if idx >= mem[(2 * ceil32(return_data.size)) + 96]:
                revert with 'NH{q', 50
            mem[_3570] = mem[(32 * idx) + (2 * ceil32(return_data.size)) + 140 len 20]
            if idx >= mem[(2 * ceil32(return_data.size)) + 96]:
                revert with 'NH{q', 50
            _3576 = mem[(32 * idx) + (2 * ceil32(return_data.size)) + 128]
            mem[mem[64] + 4] = address(arg2)
            staticcall address(_3576).0x70a08231 with:
                    gas gas_remaining wei
                   args address(arg2)
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _3588 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _3592 = mem[_3588]
            if mem[_3588] <= 0:
                mem[_3570 + 32] = 0
                mem[_3570 + 64] = _3564
                _3601 = mem[64]
                mem[64] = mem[64] + 32
                mem[_3601] = ext_call.return_data[0]
                _3606 = mem[64]
                mem[64] = mem[64] + 32
                mem[_3606] = 0
                _3607 = mem[64]
                mem[64] = mem[64] + 32
                _3610 = mem[64]
                mem[64] = mem[64] + 64
                mem[_3610] = 23
                mem[_3610 + 32] = 'multiplication overflow'
                if not ext_call.return_data[0]:
                    mem[_3607] = 0
                    mem[_3570 + 96] = 0 / 10^18
                    if idx >= mem[_227]:
                        revert with 'NH{q', 50
                    mem[(32 * idx) + _227 + 32] = _3570
                    if idx == -1:
                        revert with 'NH{q', 17
                    idx = idx + 1
                    continue 
                if not _3564:
                    mem[_3607] = 0
                    mem[_3570 + 96] = 0 / 10^18
                    if idx >= mem[_227]:
                        revert with 'NH{q', 50
                    mem[(32 * idx) + _227 + 32] = _3570
                    if idx == -1:
                        revert with 'NH{q', 17
                    idx = idx + 1
                    continue 
                if ext_call.return_data[0] and _3564 > -1 / ext_call.return_data[0]:
                    revert with 'NH{q', 17
                if not ext_call.return_data[0]:
                    revert with 'NH{q', 18
                if ext_call.return_data[0] * _3564 / ext_call.return_data[0] == _3564:
                    mem[_3607] = ext_call.return_data[0] * _3564
                    mem[_3570 + 96] = ext_call.return_data[0] * _3564 / 10^18
                    if idx >= mem[_227]:
                        revert with 'NH{q', 50
                    mem[(32 * idx) + _227 + 32] = _3570
                    if idx == -1:
                        revert with 'NH{q', 17
                    idx = idx + 1
                    continue 
                _3629 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 23
                idx = 0
                while idx < 23:
                    mem[idx + _3629 + 68] = mem[idx + _3610 + 32]
                    idx = idx + 32
                    continue 
                mem[_3629 + 91] = 0
                revert with memory
                  from mem[64]
                   len _3629 + -mem[64] + 100
            _3596 = mem[64]
            mem[64] = mem[64] + 32
            staticcall address(_3576).exchangeRateStored() with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _3599 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[_3596] = mem[_3599]
            _3612 = mem[64]
            mem[64] = mem[64] + 32
            mem[_3612] = 0
            _3613 = mem[64]
            mem[64] = mem[64] + 32
            _3614 = mem[_3596]
            _3616 = mem[64]
            mem[64] = mem[64] + 64
            mem[_3616] = 23
            mem[_3616 + 32] = 'multiplication overflow'
            if not _3614:
                mem[_3613] = 0
                mem[_3570 + 32] = 0 / 10^18
                mem[_3570 + 64] = _3564
                _3651 = mem[64]
                mem[64] = mem[64] + 32
                mem[_3651] = ext_call.return_data[0]
                _3659 = mem[64]
                mem[64] = mem[64] + 32
                mem[_3659] = 0
                _3660 = mem[64]
                mem[64] = mem[64] + 32
                _3664 = mem[64]
                mem[64] = mem[64] + 64
                mem[_3664] = 23
                mem[_3664 + 32] = 'multiplication overflow'
                if not ext_call.return_data[0]:
                    mem[_3660] = 0
                    mem[_3570 + 96] = 0 / 10^18
                    if idx >= mem[_227]:
                        revert with 'NH{q', 50
                    mem[(32 * idx) + _227 + 32] = _3570
                    if idx == -1:
                        revert with 'NH{q', 17
                    idx = idx + 1
                    continue 
                if not _3564:
                    mem[_3660] = 0
                    mem[_3570 + 96] = 0 / 10^18
                    if idx >= mem[_227]:
                        revert with 'NH{q', 50
                    mem[(32 * idx) + _227 + 32] = _3570
                    if idx == -1:
                        revert with 'NH{q', 17
                    idx = idx + 1
                    continue 
                if ext_call.return_data[0] and _3564 > -1 / ext_call.return_data[0]:
                    revert with 'NH{q', 17
                if not ext_call.return_data[0]:
                    revert with 'NH{q', 18
                if ext_call.return_data[0] * _3564 / ext_call.return_data[0] == _3564:
                    mem[_3660] = ext_call.return_data[0] * _3564
                    mem[_3570 + 96] = ext_call.return_data[0] * _3564 / 10^18
                    if idx >= mem[_227]:
                        revert with 'NH{q', 50
                    mem[(32 * idx) + _227 + 32] = _3570
                    if idx == -1:
                        revert with 'NH{q', 17
                    idx = idx + 1
                    continue 
                _3696 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 23
                idx = 0
                while idx < 23:
                    mem[idx + _3696 + 68] = mem[idx + _3664 + 32]
                    idx = idx + 32
                    continue 
                mem[_3696 + 91] = 0
                revert with memory
                  from mem[64]
                   len _3696 + -mem[64] + 100
            if not _3592:
                mem[_3613] = 0
                mem[_3570 + 32] = 0 / 10^18
                mem[_3570 + 64] = _3564
                _3656 = mem[64]
                mem[64] = mem[64] + 32
                mem[_3656] = ext_call.return_data[0]
                _3665 = mem[64]
                mem[64] = mem[64] + 32
                mem[_3665] = 0
                _3666 = mem[64]
                mem[64] = mem[64] + 32
                _3671 = mem[64]
                mem[64] = mem[64] + 64
                mem[_3671] = 23
                mem[_3671 + 32] = 'multiplication overflow'
                if not ext_call.return_data[0]:
                    mem[_3666] = 0
                    mem[_3570 + 96] = 0 / 10^18
                    if idx >= mem[_227]:
                        revert with 'NH{q', 50
                    mem[(32 * idx) + _227 + 32] = _3570
                    if idx == -1:
                        revert with 'NH{q', 17
                    idx = idx + 1
                    continue 
                if not _3564:
                    mem[_3666] = 0
                    mem[_3570 + 96] = 0 / 10^18
                    if idx >= mem[_227]:
                        revert with 'NH{q', 50
                    mem[(32 * idx) + _227 + 32] = _3570
                    if idx == -1:
                        revert with 'NH{q', 17
                    idx = idx + 1
                    continue 
                if ext_call.return_data[0] and _3564 > -1 / ext_call.return_data[0]:
                    revert with 'NH{q', 17
                if not ext_call.return_data[0]:
                    revert with 'NH{q', 18
                if ext_call.return_data[0] * _3564 / ext_call.return_data[0] == _3564:
                    mem[_3666] = ext_call.return_data[0] * _3564
                    mem[_3570 + 96] = ext_call.return_data[0] * _3564 / 10^18
                    if idx >= mem[_227]:
                        revert with 'NH{q', 50
                    mem[(32 * idx) + _227 + 32] = _3570
                    if idx == -1:
                        revert with 'NH{q', 17
                    idx = idx + 1
                    continue 
                _3700 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 23
                idx = 0
                while idx < 23:
                    mem[idx + _3700 + 68] = mem[idx + _3671 + 32]
                    idx = idx + 32
                    continue 
                mem[_3700 + 91] = 0
                revert with memory
                  from mem[64]
                   len _3700 + -mem[64] + 100
            if _3614 and _3592 > -1 / _3614:
                revert with 'NH{q', 17
            if not _3614:
                revert with 'NH{q', 18
            if _3614 * _3592 / _3614 != _3592:
                _3633 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 23
                idx = 0
                while idx < 23:
                    mem[idx + _3633 + 68] = mem[idx + _3616 + 32]
                    idx = idx + 32
                    continue 
                mem[_3633 + 91] = 0
                revert with memory
                  from mem[64]
                   len _3633 + -mem[64] + 100
            mem[_3613] = _3614 * _3592
            mem[_3570 + 32] = _3614 * _3592 / 10^18
            mem[_3570 + 64] = _3564
            _3682 = mem[64]
            mem[64] = mem[64] + 32
            mem[_3682] = ext_call.return_data[0]
            _3684 = mem[64]
            mem[64] = mem[64] + 32
            mem[_3684] = 0
            _3685 = mem[64]
            mem[64] = mem[64] + 32
            _3688 = mem[64]
            mem[64] = mem[64] + 64
            mem[_3688] = 23
            mem[_3688 + 32] = 'multiplication overflow'
            if not ext_call.return_data[0]:
                mem[_3685] = 0
                mem[_3570 + 96] = 0 / 10^18
                if idx >= mem[_227]:
                    revert with 'NH{q', 50
                mem[(32 * idx) + _227 + 32] = _3570
                if idx == -1:
                    revert with 'NH{q', 17
                idx = idx + 1
                continue 
            if not _3564:
                mem[_3685] = 0
                mem[_3570 + 96] = 0 / 10^18
                if idx >= mem[_227]:
                    revert with 'NH{q', 50
                mem[(32 * idx) + _227 + 32] = _3570
                if idx == -1:
                    revert with 'NH{q', 17
                idx = idx + 1
                continue 
            if ext_call.return_data[0] and _3564 > -1 / ext_call.return_data[0]:
                revert with 'NH{q', 17
            if not ext_call.return_data[0]:
                revert with 'NH{q', 18
            if ext_call.return_data[0] * _3564 / ext_call.return_data[0] == _3564:
                mem[_3685] = ext_call.return_data[0] * _3564
                mem[_3570 + 96] = ext_call.return_data[0] * _3564 / 10^18
                if idx >= mem[_227]:
                    revert with 'NH{q', 50
                mem[(32 * idx) + _227 + 32] = _3570
                if idx == -1:
                    revert with 'NH{q', 17
                idx = idx + 1
                continue 
            _3724 = mem[64]
            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = 32
            mem[mem[64] + 36] = 23
            idx = 0
            while idx < 23:
                mem[idx + _3724 + 68] = mem[idx + _3688 + 32]
                idx = idx + 32
                continue 
            mem[_3724 + 91] = 0
            revert with memory
              from mem[64]
               len _3724 + -mem[64] + 100
        _3551 = mem[64]
        mem[mem[64]] = 32
        _3555 = mem[_227]
        mem[mem[64] + 32] = mem[_227]
        idx = 0
        s = _227 + 32
        t = mem[64] + 64
        while idx < _3555:
            _3760 = mem[s]
            mem[t] = mem[mem[s] + 12 len 20]
            mem[t + 32] = mem[_3760 + 32]
            mem[t + 64] = mem[_3760 + 64]
            mem[t + 96] = mem[_3760 + 96]
            idx = idx + 1
            s = s + 32
            t = t + 128
            continue 
        return memory
          from mem[64]
           len _3551 + (128 * _3555) + -mem[64] + 64
    mem[64] = _227 + (32 * _9) + 1056
    mem[_227 + (32 * _9) + 928] = 0
    mem[_227 + (32 * _9) + 960] = 0
    mem[_227 + (32 * _9) + 992] = 0
    mem[_227 + (32 * _9) + 1024] = 0
    mem[var62002] = var62001
    if var62003 - 1:
        # nil
    else:
        idx = 0
        while idx < _9:
            if idx >= mem[(2 * ceil32(return_data.size)) + 96]:
                revert with 'NH{q', 50
            _3996 = mem[(32 * idx) + (2 * ceil32(return_data.size)) + 128]
            mem[mem[64] + 4] = address(arg2)
            staticcall address(_3996).borrowBalanceStored(address arg1) with:
                    gas gas_remaining wei
                   args address(arg2)
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _4000 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _4008 = mem[_4000]
            _4014 = mem[64]
            mem[64] = mem[64] + 128
            if idx >= mem[(2 * ceil32(return_data.size)) + 96]:
                revert with 'NH{q', 50
            mem[_4014] = mem[(32 * idx) + (2 * ceil32(return_data.size)) + 140 len 20]
            if idx >= mem[(2 * ceil32(return_data.size)) + 96]:
                revert with 'NH{q', 50
            _4020 = mem[(32 * idx) + (2 * ceil32(return_data.size)) + 128]
            mem[mem[64] + 4] = address(arg2)
            staticcall address(_4020).0x70a08231 with:
                    gas gas_remaining wei
                   args address(arg2)
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _4032 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _4036 = mem[_4032]
            if mem[_4032] <= 0:
                mem[_4014 + 32] = 0
                mem[_4014 + 64] = _4008
                _4045 = mem[64]
                mem[64] = mem[64] + 32
                mem[_4045] = ext_call.return_data[0]
                _4050 = mem[64]
                mem[64] = mem[64] + 32
                mem[_4050] = 0
                _4051 = mem[64]
                mem[64] = mem[64] + 32
                _4054 = mem[64]
                mem[64] = mem[64] + 64
                mem[_4054] = 23
                mem[_4054 + 32] = 'multiplication overflow'
                if not ext_call.return_data[0]:
                    mem[_4051] = 0
                    mem[_4014 + 96] = 0 / 10^18
                    if idx >= mem[_227]:
                        revert with 'NH{q', 50
                    mem[(32 * idx) + _227 + 32] = _4014
                    if idx == -1:
                        revert with 'NH{q', 17
                    idx = idx + 1
                    continue 
                if not _4008:
                    mem[_4051] = 0
                    mem[_4014 + 96] = 0 / 10^18
                    if idx >= mem[_227]:
                        revert with 'NH{q', 50
                    mem[(32 * idx) + _227 + 32] = _4014
                    if idx == -1:
                        revert with 'NH{q', 17
                    idx = idx + 1
                    continue 
                if ext_call.return_data[0] and _4008 > -1 / ext_call.return_data[0]:
                    revert with 'NH{q', 17
                if not ext_call.return_data[0]:
                    revert with 'NH{q', 18
                if ext_call.return_data[0] * _4008 / ext_call.return_data[0] == _4008:
                    mem[_4051] = ext_call.return_data[0] * _4008
                    mem[_4014 + 96] = ext_call.return_data[0] * _4008 / 10^18
                    if idx >= mem[_227]:
                        revert with 'NH{q', 50
                    mem[(32 * idx) + _227 + 32] = _4014
                    if idx == -1:
                        revert with 'NH{q', 17
                    idx = idx + 1
                    continue 
                _4073 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 23
                idx = 0
                while idx < 23:
                    mem[idx + _4073 + 68] = mem[idx + _4054 + 32]
                    idx = idx + 32
                    continue 
                mem[_4073 + 91] = 0
                revert with memory
                  from mem[64]
                   len _4073 + -mem[64] + 100
            _4040 = mem[64]
            mem[64] = mem[64] + 32
            staticcall address(_4020).exchangeRateStored() with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _4043 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[_4040] = mem[_4043]
            _4056 = mem[64]
            mem[64] = mem[64] + 32
            mem[_4056] = 0
            _4057 = mem[64]
            mem[64] = mem[64] + 32
            _4058 = mem[_4040]
            _4060 = mem[64]
            mem[64] = mem[64] + 64
            mem[_4060] = 23
            mem[_4060 + 32] = 'multiplication overflow'
            if not _4058:
                mem[_4057] = 0
                mem[_4014 + 32] = 0 / 10^18
                mem[_4014 + 64] = _4008
                _4095 = mem[64]
                mem[64] = mem[64] + 32
                mem[_4095] = ext_call.return_data[0]
                _4103 = mem[64]
                mem[64] = mem[64] + 32
                mem[_4103] = 0
                _4104 = mem[64]
                mem[64] = mem[64] + 32
                _4108 = mem[64]
                mem[64] = mem[64] + 64
                mem[_4108] = 23
                mem[_4108 + 32] = 'multiplication overflow'
                if not ext_call.return_data[0]:
                    mem[_4104] = 0
                    mem[_4014 + 96] = 0 / 10^18
                    if idx >= mem[_227]:
                        revert with 'NH{q', 50
                    mem[(32 * idx) + _227 + 32] = _4014
                    if idx == -1:
                        revert with 'NH{q', 17
                    idx = idx + 1
                    continue 
                if not _4008:
                    mem[_4104] = 0
                    mem[_4014 + 96] = 0 / 10^18
                    if idx >= mem[_227]:
                        revert with 'NH{q', 50
                    mem[(32 * idx) + _227 + 32] = _4014
                    if idx == -1:
                        revert with 'NH{q', 17
                    idx = idx + 1
                    continue 
                if ext_call.return_data[0] and _4008 > -1 / ext_call.return_data[0]:
                    revert with 'NH{q', 17
                if not ext_call.return_data[0]:
                    revert with 'NH{q', 18
                if ext_call.return_data[0] * _4008 / ext_call.return_data[0] == _4008:
                    mem[_4104] = ext_call.return_data[0] * _4008
                    mem[_4014 + 96] = ext_call.return_data[0] * _4008 / 10^18
                    if idx >= mem[_227]:
                        revert with 'NH{q', 50
                    mem[(32 * idx) + _227 + 32] = _4014
                    if idx == -1:
                        revert with 'NH{q', 17
                    idx = idx + 1
                    continue 
                _4140 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 23
                idx = 0
                while idx < 23:
                    mem[idx + _4140 + 68] = mem[idx + _4108 + 32]
                    idx = idx + 32
                    continue 
                mem[_4140 + 91] = 0
                revert with memory
                  from mem[64]
                   len _4140 + -mem[64] + 100
            if not _4036:
                mem[_4057] = 0
                mem[_4014 + 32] = 0 / 10^18
                mem[_4014 + 64] = _4008
                _4100 = mem[64]
                mem[64] = mem[64] + 32
                mem[_4100] = ext_call.return_data[0]
                _4109 = mem[64]
                mem[64] = mem[64] + 32
                mem[_4109] = 0
                _4110 = mem[64]
                mem[64] = mem[64] + 32
                _4115 = mem[64]
                mem[64] = mem[64] + 64
                mem[_4115] = 23
                mem[_4115 + 32] = 'multiplication overflow'
                if not ext_call.return_data[0]:
                    mem[_4110] = 0
                    mem[_4014 + 96] = 0 / 10^18
                    if idx >= mem[_227]:
                        revert with 'NH{q', 50
                    mem[(32 * idx) + _227 + 32] = _4014
                    if idx == -1:
                        revert with 'NH{q', 17
                    idx = idx + 1
                    continue 
                if not _4008:
                    mem[_4110] = 0
                    mem[_4014 + 96] = 0 / 10^18
                    if idx >= mem[_227]:
                        revert with 'NH{q', 50
                    mem[(32 * idx) + _227 + 32] = _4014
                    if idx == -1:
                        revert with 'NH{q', 17
                    idx = idx + 1
                    continue 
                if ext_call.return_data[0] and _4008 > -1 / ext_call.return_data[0]:
                    revert with 'NH{q', 17
                if not ext_call.return_data[0]:
                    revert with 'NH{q', 18
                if ext_call.return_data[0] * _4008 / ext_call.return_data[0] == _4008:
                    mem[_4110] = ext_call.return_data[0] * _4008
                    mem[_4014 + 96] = ext_call.return_data[0] * _4008 / 10^18
                    if idx >= mem[_227]:
                        revert with 'NH{q', 50
                    mem[(32 * idx) + _227 + 32] = _4014
                    if idx == -1:
                        revert with 'NH{q', 17
                    idx = idx + 1
                    continue 
                _4144 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 23
                idx = 0
                while idx < 23:
                    mem[idx + _4144 + 68] = mem[idx + _4115 + 32]
                    idx = idx + 32
                    continue 
                mem[_4144 + 91] = 0
                revert with memory
                  from mem[64]
                   len _4144 + -mem[64] + 100
            if _4058 and _4036 > -1 / _4058:
                revert with 'NH{q', 17
            if not _4058:
                revert with 'NH{q', 18
            if _4058 * _4036 / _4058 != _4036:
                _4077 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 23
                idx = 0
                while idx < 23:
                    mem[idx + _4077 + 68] = mem[idx + _4060 + 32]
                    idx = idx + 32
                    continue 
                mem[_4077 + 91] = 0
                revert with memory
                  from mem[64]
                   len _4077 + -mem[64] + 100
            mem[_4057] = _4058 * _4036
            mem[_4014 + 32] = _4058 * _4036 / 10^18
            mem[_4014 + 64] = _4008
            _4126 = mem[64]
            mem[64] = mem[64] + 32
            mem[_4126] = ext_call.return_data[0]
            _4128 = mem[64]
            mem[64] = mem[64] + 32
            mem[_4128] = 0
            _4129 = mem[64]
            mem[64] = mem[64] + 32
            _4132 = mem[64]
            mem[64] = mem[64] + 64
            mem[_4132] = 23
            mem[_4132 + 32] = 'multiplication overflow'
            if not ext_call.return_data[0]:
                mem[_4129] = 0
                mem[_4014 + 96] = 0 / 10^18
                if idx >= mem[_227]:
                    revert with 'NH{q', 50
                mem[(32 * idx) + _227 + 32] = _4014
                if idx == -1:
                    revert with 'NH{q', 17
                idx = idx + 1
                continue 
            if not _4008:
                mem[_4129] = 0
                mem[_4014 + 96] = 0 / 10^18
                if idx >= mem[_227]:
                    revert with 'NH{q', 50
                mem[(32 * idx) + _227 + 32] = _4014
                if idx == -1:
                    revert with 'NH{q', 17
                idx = idx + 1
                continue 
            if ext_call.return_data[0] and _4008 > -1 / ext_call.return_data[0]:
                revert with 'NH{q', 17
            if not ext_call.return_data[0]:
                revert with 'NH{q', 18
            if ext_call.return_data[0] * _4008 / ext_call.return_data[0] == _4008:
                mem[_4129] = ext_call.return_data[0] * _4008
                mem[_4014 + 96] = ext_call.return_data[0] * _4008 / 10^18
                if idx >= mem[_227]:
                    revert with 'NH{q', 50
                mem[(32 * idx) + _227 + 32] = _4014
                if idx == -1:
                    revert with 'NH{q', 17
                idx = idx + 1
                continue 
            _4168 = mem[64]
            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = 32
            mem[mem[64] + 36] = 23
            idx = 0
            while idx < 23:
                mem[idx + _4168 + 68] = mem[idx + _4132 + 32]
                idx = idx + 32
                continue 
            mem[_4168 + 91] = 0
            revert with memory
              from mem[64]
               len _4168 + -mem[64] + 100
        _3995 = mem[64]
        mem[mem[64]] = 32
        _3999 = mem[_227]
        mem[mem[64] + 32] = mem[_227]
        idx = 0
        s = _227 + 32
        t = mem[64] + 64
        while idx < _3999:
            _4204 = mem[s]
            mem[t] = mem[mem[s] + 12 len 20]
            mem[t + 32] = mem[_4204 + 32]
            mem[t + 64] = mem[_4204 + 64]
            mem[t + 96] = mem[_4204 + 96]
            idx = idx + 1
            s = s + 32
            t = t + 128
            continue 
        return memory
          from mem[64]
           len _3995 + (128 * _3999) + -mem[64] + 64
}

function sub_ec0cdb96(?) payable {
    require calldata.size - 4 >= 64
    require arg1 == address(arg1)
    require arg2 == address(arg2)
    mem[128] = 0
    mem[160] = 0
    mem[192] = 0
    mem[224] = 0
    staticcall address(arg1).getAccountLiquidity(address arg1) with:
            gas gas_remaining wei
           args address(arg2)
    mem[288 len 96] = ext_call.return_data[0 len 96]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 96
    mem[96] = address(arg2)
    if not ext_call.return_data[64]:
        return arg2 << 192, 0, 0, 0, 0, 0
    mem[256] = 1
    staticcall address(arg1).closeFactorMantissa() with:
            gas gas_remaining wei
    mem[ceil32(return_data.size) + 288] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    mem[(2 * ceil32(return_data.size)) + 288] = 0xabfceffc00000000000000000000000000000000000000000000000000000000
    mem[(2 * ceil32(return_data.size)) + 292] = address(arg2)
    staticcall address(arg1).getAssetsIn(address arg1) with:
            gas gas_remaining wei
           args address(arg2)
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    mem[(2 * ceil32(return_data.size)) + 288 len return_data.size] = ext_call.return_data[0 len return_data.size]
    mem[64] = (4 * ceil32(return_data.size)) + 288
    require return_data.size >= 32
    _23 = mem[(2 * ceil32(return_data.size)) + 288 len 4], address(arg2) << 64
    require mem[(2 * ceil32(return_data.size)) + 288 len 4], address(arg2) << 64 <= test266151307()
    require (2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 288 len 4], address(arg2) << 64 + 319 < (2 * ceil32(return_data.size)) + return_data.size + 288
    _24 = mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 288 len 4], address(arg2) << 64 + 288]
    if mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 288 len 4], address(arg2) << 64 + 288] > test266151307():
        revert with 'NH{q', 65
    if (4 * ceil32(return_data.size)) + ceil32(32 * mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 288 len 4], address(arg2) << 64 + 288]) + 289 > test266151307() or ceil32(32 * mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 288 len 4], address(arg2) << 64 + 288]) + 1 < 0:
        revert with 'NH{q', 65
    mem[64] = (4 * ceil32(return_data.size)) + ceil32(32 * mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 288 len 4], address(arg2) << 64 + 288]) + 289
    mem[(4 * ceil32(return_data.size)) + 288] = mem[(2 * ceil32(return_data.size)) + mem[(2 * ceil32(return_data.size)) + 288 len 4], address(arg2) << 64 + 288]
    require (32 * _24) + _23 + 32 <= return_data.size
    s = (4 * ceil32(return_data.size)) + 320
    idx = (2 * ceil32(return_data.size)) + _23 + 320
    while idx < (32 * _24) + (2 * ceil32(return_data.size)) + _23 + 320:
        require mem[idx] == mem[idx + 12 len 20]
        mem[s] = mem[idx]
        s = s + 32
        idx = idx + 32
        continue 
    if _24 > test266151307():
        revert with 'NH{q', 65
    _1826 = mem[64]
    mem[mem[64]] = _24
    mem[64] = mem[64] + (32 * _24) + 32
    if not _24:
        idx = 0
        while idx < _24:
            if idx >= mem[(4 * ceil32(return_data.size)) + 288]:
                revert with 'NH{q', 50
            _3626 = mem[(32 * idx) + (4 * ceil32(return_data.size)) + 320]
            mem[mem[64] + 4] = address(arg2)
            staticcall address(_3626).borrowBalanceStored(address arg1) with:
                    gas gas_remaining wei
                   args address(arg2)
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _3630 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _3638 = mem[_3630]
            _3642 = mem[64]
            mem[64] = mem[64] + 128
            if idx >= mem[(4 * ceil32(return_data.size)) + 288]:
                revert with 'NH{q', 50
            mem[_3642] = mem[(32 * idx) + (4 * ceil32(return_data.size)) + 332 len 20]
            if idx >= mem[(4 * ceil32(return_data.size)) + 288]:
                revert with 'NH{q', 50
            _3656 = mem[(32 * idx) + (4 * ceil32(return_data.size)) + 320]
            mem[mem[64] + 4] = address(arg2)
            staticcall address(_3656).0x70a08231 with:
                    gas gas_remaining wei
                   args address(arg2)
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _3678 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _3692 = mem[_3678]
            if mem[_3678] <= 0:
                mem[_3642 + 32] = 0
                mem[_3642 + 64] = _3638
                _3726 = mem[64]
                mem[64] = mem[64] + 32
                mem[_3726] = ext_call.return_data[0]
                _3733 = mem[64]
                mem[64] = mem[64] + 32
                mem[_3733] = 0
                _3734 = mem[64]
                mem[64] = mem[64] + 32
                _3739 = mem[64]
                mem[64] = mem[64] + 64
                mem[_3739] = 23
                mem[_3739 + 32] = 'multiplication overflow'
                if not ext_call.return_data[0]:
                    mem[_3734] = 0
                    mem[_3642 + 96] = 0 / 10^18
                    if idx >= mem[_1826]:
                        revert with 'NH{q', 50
                    mem[(32 * idx) + _1826 + 32] = _3642
                    if idx == -1:
                        revert with 'NH{q', 17
                    idx = idx + 1
                    continue 
                if not _3638:
                    mem[_3734] = 0
                    mem[_3642 + 96] = 0 / 10^18
                    if idx >= mem[_1826]:
                        revert with 'NH{q', 50
                    mem[(32 * idx) + _1826 + 32] = _3642
                    if idx == -1:
                        revert with 'NH{q', 17
                    idx = idx + 1
                    continue 
                if ext_call.return_data[0] and _3638 > -1 / ext_call.return_data[0]:
                    revert with 'NH{q', 17
                if not ext_call.return_data[0]:
                    revert with 'NH{q', 18
                if ext_call.return_data[0] * _3638 / ext_call.return_data[0] == _3638:
                    mem[_3734] = ext_call.return_data[0] * _3638
                    mem[_3642 + 96] = ext_call.return_data[0] * _3638 / 10^18
                    if idx >= mem[_1826]:
                        revert with 'NH{q', 50
                    mem[(32 * idx) + _1826 + 32] = _3642
                    if idx == -1:
                        revert with 'NH{q', 17
                    idx = idx + 1
                    continue 
                _3786 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 23
                idx = 0
                while idx < 23:
                    mem[idx + _3786 + 68] = mem[idx + _3739 + 32]
                    idx = idx + 32
                    continue 
                mem[_3786 + 91] = 0
                revert with memory
                  from mem[64]
                   len _3786 + -mem[64] + 100
            _3711 = mem[64]
            mem[64] = mem[64] + 32
            staticcall address(_3656).exchangeRateStored() with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _3719 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[_3711] = mem[_3719]
            _3745 = mem[64]
            mem[64] = mem[64] + 32
            mem[_3745] = 0
            _3746 = mem[64]
            mem[64] = mem[64] + 32
            _3747 = mem[_3711]
            _3751 = mem[64]
            mem[64] = mem[64] + 64
            mem[_3751] = 23
            mem[_3751 + 32] = 'multiplication overflow'
            if not _3747:
                mem[_3746] = 0
                mem[_3642 + 32] = 0 / 10^18
                mem[_3642 + 64] = _3638
                _3838 = mem[64]
                mem[64] = mem[64] + 32
                mem[_3838] = ext_call.return_data[0]
                _3856 = mem[64]
                mem[64] = mem[64] + 32
                mem[_3856] = 0
                _3857 = mem[64]
                mem[64] = mem[64] + 32
                _3863 = mem[64]
                mem[64] = mem[64] + 64
                mem[_3863] = 23
                mem[_3863 + 32] = 'multiplication overflow'
                if not ext_call.return_data[0]:
                    mem[_3857] = 0
                    mem[_3642 + 96] = 0 / 10^18
                    if idx >= mem[_1826]:
                        revert with 'NH{q', 50
                    mem[(32 * idx) + _1826 + 32] = _3642
                    if idx == -1:
                        revert with 'NH{q', 17
                    idx = idx + 1
                    continue 
                if not _3638:
                    mem[_3857] = 0
                    mem[_3642 + 96] = 0 / 10^18
                    if idx >= mem[_1826]:
                        revert with 'NH{q', 50
                    mem[(32 * idx) + _1826 + 32] = _3642
                    if idx == -1:
                        revert with 'NH{q', 17
                    idx = idx + 1
                    continue 
                if ext_call.return_data[0] and _3638 > -1 / ext_call.return_data[0]:
                    revert with 'NH{q', 17
                if not ext_call.return_data[0]:
                    revert with 'NH{q', 18
                if ext_call.return_data[0] * _3638 / ext_call.return_data[0] == _3638:
                    mem[_3857] = ext_call.return_data[0] * _3638
                    mem[_3642 + 96] = ext_call.return_data[0] * _3638 / 10^18
                    if idx >= mem[_1826]:
                        revert with 'NH{q', 50
                    mem[(32 * idx) + _1826 + 32] = _3642
                    if idx == -1:
                        revert with 'NH{q', 17
                    idx = idx + 1
                    continue 
                _3915 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 23
                idx = 0
                while idx < 23:
                    mem[idx + _3915 + 68] = mem[idx + _3863 + 32]
                    idx = idx + 32
                    continue 
                mem[_3915 + 91] = 0
                revert with memory
                  from mem[64]
                   len _3915 + -mem[64] + 100
            if not _3692:
                mem[_3746] = 0
                mem[_3642 + 32] = 0 / 10^18
                mem[_3642 + 64] = _3638
                _3849 = mem[64]
                mem[64] = mem[64] + 32
                mem[_3849] = ext_call.return_data[0]
                _3864 = mem[64]
                mem[64] = mem[64] + 32
                mem[_3864] = 0
                _3865 = mem[64]
                mem[64] = mem[64] + 32
                _3875 = mem[64]
                mem[64] = mem[64] + 64
                mem[_3875] = 23
                mem[_3875 + 32] = 'multiplication overflow'
                if not ext_call.return_data[0]:
                    mem[_3865] = 0
                    mem[_3642 + 96] = 0 / 10^18
                    if idx >= mem[_1826]:
                        revert with 'NH{q', 50
                    mem[(32 * idx) + _1826 + 32] = _3642
                    if idx == -1:
                        revert with 'NH{q', 17
                    idx = idx + 1
                    continue 
                if not _3638:
                    mem[_3865] = 0
                    mem[_3642 + 96] = 0 / 10^18
                    if idx >= mem[_1826]:
                        revert with 'NH{q', 50
                    mem[(32 * idx) + _1826 + 32] = _3642
                    if idx == -1:
                        revert with 'NH{q', 17
                    idx = idx + 1
                    continue 
                if ext_call.return_data[0] and _3638 > -1 / ext_call.return_data[0]:
                    revert with 'NH{q', 17
                if not ext_call.return_data[0]:
                    revert with 'NH{q', 18
                if ext_call.return_data[0] * _3638 / ext_call.return_data[0] == _3638:
                    mem[_3865] = ext_call.return_data[0] * _3638
                    mem[_3642 + 96] = ext_call.return_data[0] * _3638 / 10^18
                    if idx >= mem[_1826]:
                        revert with 'NH{q', 50
                    mem[(32 * idx) + _1826 + 32] = _3642
                    if idx == -1:
                        revert with 'NH{q', 17
                    idx = idx + 1
                    continue 
                _3923 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 23
                idx = 0
                while idx < 23:
                    mem[idx + _3923 + 68] = mem[idx + _3875 + 32]
                    idx = idx + 32
                    continue 
                mem[_3923 + 91] = 0
                revert with memory
                  from mem[64]
                   len _3923 + -mem[64] + 100
            if _3747 and _3692 > -1 / _3747:
                revert with 'NH{q', 17
            if not _3747:
                revert with 'NH{q', 18
            if _3747 * _3692 / _3747 != _3692:
                _3796 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 23
                idx = 0
                while idx < 23:
                    mem[idx + _3796 + 68] = mem[idx + _3751 + 32]
                    idx = idx + 32
                    continue 
                mem[_3796 + 91] = 0
                revert with memory
                  from mem[64]
                   len _3796 + -mem[64] + 100
            mem[_3746] = _3747 * _3692
            mem[_3642 + 32] = _3747 * _3692 / 10^18
            mem[_3642 + 64] = _3638
            _3889 = mem[64]
            mem[64] = mem[64] + 32
            mem[_3889] = ext_call.return_data[0]
            _3898 = mem[64]
            mem[64] = mem[64] + 32
            mem[_3898] = 0
            _3899 = mem[64]
            mem[64] = mem[64] + 32
            _3904 = mem[64]
            mem[64] = mem[64] + 64
            mem[_3904] = 23
            mem[_3904 + 32] = 'multiplication overflow'
            if not ext_call.return_data[0]:
                mem[_3899] = 0
                mem[_3642 + 96] = 0 / 10^18
                if idx >= mem[_1826]:
                    revert with 'NH{q', 50
                mem[(32 * idx) + _1826 + 32] = _3642
                if idx == -1:
                    revert with 'NH{q', 17
                idx = idx + 1
                continue 
            if not _3638:
                mem[_3899] = 0
                mem[_3642 + 96] = 0 / 10^18
                if idx >= mem[_1826]:
                    revert with 'NH{q', 50
                mem[(32 * idx) + _1826 + 32] = _3642
                if idx == -1:
                    revert with 'NH{q', 17
                idx = idx + 1
                continue 
            if ext_call.return_data[0] and _3638 > -1 / ext_call.return_data[0]:
                revert with 'NH{q', 17
            if not ext_call.return_data[0]:
                revert with 'NH{q', 18
            if ext_call.return_data[0] * _3638 / ext_call.return_data[0] == _3638:
                mem[_3899] = ext_call.return_data[0] * _3638
                mem[_3642 + 96] = ext_call.return_data[0] * _3638 / 10^18
                if idx >= mem[_1826]:
                    revert with 'NH{q', 50
                mem[(32 * idx) + _1826 + 32] = _3642
                if idx == -1:
                    revert with 'NH{q', 17
                idx = idx + 1
                continue 
            _4047 = mem[64]
            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = 32
            mem[mem[64] + 36] = 23
            idx = 0
            while idx < 23:
                mem[idx + _4047 + 68] = mem[idx + _3904 + 32]
                idx = idx + 32
                continue 
            mem[_4047 + 91] = 0
            revert with memory
              from mem[64]
               len _4047 + -mem[64] + 100
        _3625 = mem[64]
        mem[64] = mem[64] + 192
        mem[_3625] = 0
        mem[_3625 + 32] = 0
        mem[_3625 + 64] = 0
        mem[_3625 + 96] = 0
        mem[_3625 + 128] = 0
        mem[_3625 + 160] = 0
        _5418 = mem[_1826]
        idx = 0
        while idx < _5418:
            if idx >= mem[_1826]:
                revert with 'NH{q', 50
            if idx >= mem[_1826]:
                revert with 'NH{q', 50
            if mem[mem[(32 * idx) + _1826 + 32] + 32] > 0:
                staticcall address(arg1).markets(address arg1) with:
                        gas gas_remaining wei
                       args address(mem[mem[(32 * idx) + _1826 + 32]])
                mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _5464 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 96
                require mem[_5464] == bool(mem[_5464])
                _5501 = mem[_5464 + 32]
                require mem[_5464 + 64] == bool(mem[_5464 + 64])
                if mem[_5464]:
                    staticcall address(arg1).oracle() with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _5568 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _5580 = mem[_5568]
                    require mem[_5568] == mem[_5568 + 12 len 20]
                    if idx >= mem[_1826]:
                        revert with 'NH{q', 50
                    _5613 = mem[mem[(32 * idx) + _1826 + 32]]
                    mem[mem[64] + 4] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                    staticcall address(_5580).getUnderlyingPrice(address arg1) with:
                            gas gas_remaining wei
                           args address(_5613)
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _5619 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _5636 = mem[_5619]
                    _5640 = mem[64]
                    mem[64] = mem[64] + 32
                    mem[_5640] = _5636
                    if idx >= mem[_1826]:
                        revert with 'NH{q', 50
                    _5646 = mem[mem[(32 * idx) + _1826 + 32] + 32]
                    _5654 = mem[64]
                    mem[64] = mem[64] + 32
                    mem[_5654] = 0
                    _5655 = mem[64]
                    mem[64] = mem[64] + 32
                    _5665 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_5665] = 23
                    mem[_5665 + 32] = 'multiplication overflow'
                    if not _5636:
                        mem[_5655] = 0
                        if _5501 <= 0:
                            _5792 = mem[64]
                            mem[64] = mem[64] + 32
                            mem[_5792] = _5636
                            if idx >= mem[_1826]:
                                revert with 'NH{q', 50
                            _5799 = mem[mem[(32 * idx) + _1826 + 32] + 96]
                            _5833 = mem[64]
                            mem[64] = mem[64] + 32
                            mem[_5833] = 0
                            _5834 = mem[64]
                            mem[64] = mem[64] + 32
                            _5858 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_5858] = 23
                            mem[_5858 + 32] = 'multiplication overflow'
                            if not _5636:
                                mem[_5834] = 0
                                if 0 / 10^18 > mem[_3625 + 160]:
                                    if idx >= mem[_1826]:
                                        revert with 'NH{q', 50
                                    mem[_3625 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                    mem[_3625 + 160] = 0 / 10^18
                                    if idx >= mem[_1826]:
                                        revert with 'NH{q', 50
                                    mem[_3625 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                            else:
                                if not _5799:
                                    mem[_5834] = 0
                                    if 0 / 10^18 > mem[_3625 + 160]:
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        mem[_3625 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                        mem[_3625 + 160] = 0 / 10^18
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        mem[_3625 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                else:
                                    if _5636 and _5799 > -1 / _5636:
                                        revert with 'NH{q', 17
                                    if not _5636:
                                        revert with 'NH{q', 18
                                    if _5636 * _5799 / _5636 != _5799:
                                        _6225 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 23
                                        idx = 0
                                        while idx < 23:
                                            mem[idx + _6225 + 68] = mem[idx + _5858 + 32]
                                            _5418 = mem[_1826]
                                            idx = idx + 32
                                            continue 
                                        mem[_6225 + 91] = 0
                                        revert with memory
                                          from mem[64]
                                           len _6225 + -mem[64] + 100
                                    mem[_5834] = _5636 * _5799
                                    if _5636 * _5799 / 10^18 > mem[_3625 + 160]:
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        mem[_3625 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                        mem[_3625 + 160] = _5636 * _5799 / 10^18
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        mem[_3625 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                        else:
                            if 0 / 10^18 <= mem[_3625 + 96]:
                                _5800 = mem[64]
                                mem[64] = mem[64] + 32
                                mem[_5800] = _5636
                                if idx >= mem[_1826]:
                                    revert with 'NH{q', 50
                                _5815 = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                _5859 = mem[64]
                                mem[64] = mem[64] + 32
                                mem[_5859] = 0
                                _5860 = mem[64]
                                mem[64] = mem[64] + 32
                                _5885 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_5885] = 23
                                mem[_5885 + 32] = 'multiplication overflow'
                                if not _5636:
                                    mem[_5860] = 0
                                    if 0 / 10^18 > mem[_3625 + 160]:
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        mem[_3625 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                        mem[_3625 + 160] = 0 / 10^18
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        mem[_3625 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                else:
                                    if not _5815:
                                        mem[_5860] = 0
                                        if 0 / 10^18 > mem[_3625 + 160]:
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_3625 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                            mem[_3625 + 160] = 0 / 10^18
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_3625 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                    else:
                                        if _5636 and _5815 > -1 / _5636:
                                            revert with 'NH{q', 17
                                        if not _5636:
                                            revert with 'NH{q', 18
                                        if _5636 * _5815 / _5636 != _5815:
                                            _6272 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 23
                                            idx = 0
                                            while idx < 23:
                                                mem[idx + _6272 + 68] = mem[idx + _5885 + 32]
                                                _5418 = mem[_1826]
                                                idx = idx + 32
                                                continue 
                                            mem[_6272 + 91] = 0
                                            revert with memory
                                              from mem[64]
                                               len _6272 + -mem[64] + 100
                                        mem[_5860] = _5636 * _5815
                                        if _5636 * _5815 / 10^18 > mem[_3625 + 160]:
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_3625 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                            mem[_3625 + 160] = _5636 * _5815 / 10^18
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_3625 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                            else:
                                if idx >= mem[_1826]:
                                    revert with 'NH{q', 50
                                mem[_3625 + 64] = mem[mem[(32 * idx) + _1826 + 32] + 32]
                                mem[_3625 + 96] = 0 / 10^18
                                if idx >= mem[_1826]:
                                    revert with 'NH{q', 50
                                mem[_3625] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                _5862 = mem[64]
                                mem[64] = mem[64] + 32
                                mem[_5862] = _5636
                                if idx >= mem[_1826]:
                                    revert with 'NH{q', 50
                                _5887 = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                _5931 = mem[64]
                                mem[64] = mem[64] + 32
                                mem[_5931] = 0
                                _5932 = mem[64]
                                mem[64] = mem[64] + 32
                                _5954 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_5954] = 23
                                mem[_5954 + 32] = 'multiplication overflow'
                                if not _5636:
                                    mem[_5932] = 0
                                    if 0 / 10^18 > mem[_3625 + 160]:
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        mem[_3625 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                        mem[_3625 + 160] = 0 / 10^18
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        mem[_3625 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                else:
                                    if not _5887:
                                        mem[_5932] = 0
                                        if 0 / 10^18 > mem[_3625 + 160]:
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_3625 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                            mem[_3625 + 160] = 0 / 10^18
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_3625 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                    else:
                                        if _5636 and _5887 > -1 / _5636:
                                            revert with 'NH{q', 17
                                        if not _5636:
                                            revert with 'NH{q', 18
                                        if _5636 * _5887 / _5636 != _5887:
                                            _6394 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 23
                                            idx = 0
                                            while idx < 23:
                                                mem[idx + _6394 + 68] = mem[idx + _5954 + 32]
                                                _5418 = mem[_1826]
                                                idx = idx + 32
                                                continue 
                                            mem[_6394 + 91] = 0
                                            revert with memory
                                              from mem[64]
                                               len _6394 + -mem[64] + 100
                                        mem[_5932] = _5636 * _5887
                                        if _5636 * _5887 / 10^18 > mem[_3625 + 160]:
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_3625 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                            mem[_3625 + 160] = _5636 * _5887 / 10^18
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_3625 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                    else:
                        if not _5646:
                            mem[_5655] = 0
                            if _5501 <= 0:
                                _5804 = mem[64]
                                mem[64] = mem[64] + 32
                                mem[_5804] = _5636
                                if idx >= mem[_1826]:
                                    revert with 'NH{q', 50
                                _5820 = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                _5864 = mem[64]
                                mem[64] = mem[64] + 32
                                mem[_5864] = 0
                                _5865 = mem[64]
                                mem[64] = mem[64] + 32
                                _5888 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_5888] = 23
                                mem[_5888 + 32] = 'multiplication overflow'
                                if not _5636:
                                    mem[_5865] = 0
                                    if 0 / 10^18 > mem[_3625 + 160]:
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        mem[_3625 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                        mem[_3625 + 160] = 0 / 10^18
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        mem[_3625 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                else:
                                    if not _5820:
                                        mem[_5865] = 0
                                        if 0 / 10^18 > mem[_3625 + 160]:
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_3625 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                            mem[_3625 + 160] = 0 / 10^18
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_3625 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                    else:
                                        if _5636 and _5820 > -1 / _5636:
                                            revert with 'NH{q', 17
                                        if not _5636:
                                            revert with 'NH{q', 18
                                        if _5636 * _5820 / _5636 != _5820:
                                            _6275 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 23
                                            idx = 0
                                            while idx < 23:
                                                mem[idx + _6275 + 68] = mem[idx + _5888 + 32]
                                                _5418 = mem[_1826]
                                                idx = idx + 32
                                                continue 
                                            mem[_6275 + 91] = 0
                                            revert with memory
                                              from mem[64]
                                               len _6275 + -mem[64] + 100
                                        mem[_5865] = _5636 * _5820
                                        if _5636 * _5820 / 10^18 > mem[_3625 + 160]:
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_3625 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                            mem[_3625 + 160] = _5636 * _5820 / 10^18
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_3625 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                            else:
                                if 0 / 10^18 <= mem[_3625 + 96]:
                                    _5821 = mem[64]
                                    mem[64] = mem[64] + 32
                                    mem[_5821] = _5636
                                    if idx >= mem[_1826]:
                                        revert with 'NH{q', 50
                                    _5839 = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                    _5889 = mem[64]
                                    mem[64] = mem[64] + 32
                                    mem[_5889] = 0
                                    _5890 = mem[64]
                                    mem[64] = mem[64] + 32
                                    _5911 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_5911] = 23
                                    mem[_5911 + 32] = 'multiplication overflow'
                                    if not _5636:
                                        mem[_5890] = 0
                                        if 0 / 10^18 > mem[_3625 + 160]:
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_3625 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                            mem[_3625 + 160] = 0 / 10^18
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_3625 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                    else:
                                        if not _5839:
                                            mem[_5890] = 0
                                            if 0 / 10^18 > mem[_3625 + 160]:
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_3625 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                mem[_3625 + 160] = 0 / 10^18
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_3625 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                        else:
                                            if _5636 and _5839 > -1 / _5636:
                                                revert with 'NH{q', 17
                                            if not _5636:
                                                revert with 'NH{q', 18
                                            if _5636 * _5839 / _5636 != _5839:
                                                _6314 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 23
                                                idx = 0
                                                while idx < 23:
                                                    mem[idx + _6314 + 68] = mem[idx + _5911 + 32]
                                                    _5418 = mem[_1826]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_6314 + 91] = 0
                                                revert with memory
                                                  from mem[64]
                                                   len _6314 + -mem[64] + 100
                                            mem[_5890] = _5636 * _5839
                                            if _5636 * _5839 / 10^18 > mem[_3625 + 160]:
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_3625 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                mem[_3625 + 160] = _5636 * _5839 / 10^18
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_3625 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                else:
                                    if idx >= mem[_1826]:
                                        revert with 'NH{q', 50
                                    mem[_3625 + 64] = mem[mem[(32 * idx) + _1826 + 32] + 32]
                                    mem[_3625 + 96] = 0 / 10^18
                                    if idx >= mem[_1826]:
                                        revert with 'NH{q', 50
                                    mem[_3625] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                    _5892 = mem[64]
                                    mem[64] = mem[64] + 32
                                    mem[_5892] = _5636
                                    if idx >= mem[_1826]:
                                        revert with 'NH{q', 50
                                    _5913 = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                    _5960 = mem[64]
                                    mem[64] = mem[64] + 32
                                    mem[_5960] = 0
                                    _5961 = mem[64]
                                    mem[64] = mem[64] + 32
                                    _5988 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_5988] = 23
                                    mem[_5988 + 32] = 'multiplication overflow'
                                    if not _5636:
                                        mem[_5961] = 0
                                        if 0 / 10^18 > mem[_3625 + 160]:
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_3625 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                            mem[_3625 + 160] = 0 / 10^18
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_3625 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                    else:
                                        if not _5913:
                                            mem[_5961] = 0
                                            if 0 / 10^18 > mem[_3625 + 160]:
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_3625 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                mem[_3625 + 160] = 0 / 10^18
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_3625 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                        else:
                                            if _5636 and _5913 > -1 / _5636:
                                                revert with 'NH{q', 17
                                            if not _5636:
                                                revert with 'NH{q', 18
                                            if _5636 * _5913 / _5636 != _5913:
                                                _6447 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 23
                                                idx = 0
                                                while idx < 23:
                                                    mem[idx + _6447 + 68] = mem[idx + _5988 + 32]
                                                    _5418 = mem[_1826]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_6447 + 91] = 0
                                                revert with memory
                                                  from mem[64]
                                                   len _6447 + -mem[64] + 100
                                            mem[_5961] = _5636 * _5913
                                            if _5636 * _5913 / 10^18 > mem[_3625 + 160]:
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_3625 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                mem[_3625 + 160] = _5636 * _5913 / 10^18
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_3625 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                        else:
                            if _5636 and _5646 > -1 / _5636:
                                revert with 'NH{q', 17
                            if not _5636:
                                revert with 'NH{q', 18
                            if _5636 * _5646 / _5636 != _5646:
                                _5761 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 23
                                idx = 0
                                while idx < 23:
                                    mem[idx + _5761 + 68] = mem[idx + _5665 + 32]
                                    _5418 = mem[_1826]
                                    idx = idx + 32
                                    continue 
                                mem[_5761 + 91] = 0
                                revert with memory
                                  from mem[64]
                                   len _5761 + -mem[64] + 100
                            mem[_5655] = _5636 * _5646
                            if _5501 <= 0:
                                _5934 = mem[64]
                                mem[64] = mem[64] + 32
                                mem[_5934] = _5636
                                if idx >= mem[_1826]:
                                    revert with 'NH{q', 50
                                _5956 = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                _6019 = mem[64]
                                mem[64] = mem[64] + 32
                                mem[_6019] = 0
                                _6020 = mem[64]
                                mem[64] = mem[64] + 32
                                _6068 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_6068] = 23
                                mem[_6068 + 32] = 'multiplication overflow'
                                if not _5636:
                                    mem[_6020] = 0
                                    if 0 / 10^18 > mem[_3625 + 160]:
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        mem[_3625 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                        mem[_3625 + 160] = 0 / 10^18
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        mem[_3625 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                else:
                                    if not _5956:
                                        mem[_6020] = 0
                                        if 0 / 10^18 > mem[_3625 + 160]:
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_3625 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                            mem[_3625 + 160] = 0 / 10^18
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_3625 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                    else:
                                        if _5636 and _5956 > -1 / _5636:
                                            revert with 'NH{q', 17
                                        if not _5636:
                                            revert with 'NH{q', 18
                                        if _5636 * _5956 / _5636 != _5956:
                                            _6542 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 23
                                            idx = 0
                                            while idx < 23:
                                                mem[idx + _6542 + 68] = mem[idx + _6068 + 32]
                                                _5418 = mem[_1826]
                                                idx = idx + 32
                                                continue 
                                            mem[_6542 + 91] = 0
                                            revert with memory
                                              from mem[64]
                                               len _6542 + -mem[64] + 100
                                        mem[_6020] = _5636 * _5956
                                        if _5636 * _5956 / 10^18 > mem[_3625 + 160]:
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_3625 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                            mem[_3625 + 160] = _5636 * _5956 / 10^18
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_3625 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                            else:
                                if _5636 * _5646 / 10^18 <= mem[_3625 + 96]:
                                    _5957 = mem[64]
                                    mem[64] = mem[64] + 32
                                    mem[_5957] = _5636
                                    if idx >= mem[_1826]:
                                        revert with 'NH{q', 50
                                    _5984 = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                    _6069 = mem[64]
                                    mem[64] = mem[64] + 32
                                    mem[_6069] = 0
                                    _6070 = mem[64]
                                    mem[64] = mem[64] + 32
                                    _6124 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_6124] = 23
                                    mem[_6124 + 32] = 'multiplication overflow'
                                    if not _5636:
                                        mem[_6070] = 0
                                        if 0 / 10^18 > mem[_3625 + 160]:
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_3625 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                            mem[_3625 + 160] = 0 / 10^18
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_3625 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                    else:
                                        if not _5984:
                                            mem[_6070] = 0
                                            if 0 / 10^18 > mem[_3625 + 160]:
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_3625 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                mem[_3625 + 160] = 0 / 10^18
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_3625 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                        else:
                                            if _5636 and _5984 > -1 / _5636:
                                                revert with 'NH{q', 17
                                            if not _5636:
                                                revert with 'NH{q', 18
                                            if _5636 * _5984 / _5636 != _5984:
                                                _6599 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 23
                                                idx = 0
                                                while idx < 23:
                                                    mem[idx + _6599 + 68] = mem[idx + _6124 + 32]
                                                    _5418 = mem[_1826]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_6599 + 91] = 0
                                                revert with memory
                                                  from mem[64]
                                                   len _6599 + -mem[64] + 100
                                            mem[_6070] = _5636 * _5984
                                            if _5636 * _5984 / 10^18 > mem[_3625 + 160]:
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_3625 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                mem[_3625 + 160] = _5636 * _5984 / 10^18
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_3625 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                else:
                                    if idx >= mem[_1826]:
                                        revert with 'NH{q', 50
                                    mem[_3625 + 64] = mem[mem[(32 * idx) + _1826 + 32] + 32]
                                    mem[_3625 + 96] = _5636 * _5646 / 10^18
                                    if idx >= mem[_1826]:
                                        revert with 'NH{q', 50
                                    mem[_3625] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                    _6072 = mem[64]
                                    mem[64] = mem[64] + 32
                                    mem[_6072] = _5636
                                    if idx >= mem[_1826]:
                                        revert with 'NH{q', 50
                                    _6126 = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                    _6226 = mem[64]
                                    mem[64] = mem[64] + 32
                                    mem[_6226] = 0
                                    _6227 = mem[64]
                                    mem[64] = mem[64] + 32
                                    _6274 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_6274] = 23
                                    mem[_6274 + 32] = 'multiplication overflow'
                                    if not _5636:
                                        mem[_6227] = 0
                                        if 0 / 10^18 > mem[_3625 + 160]:
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_3625 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                            mem[_3625 + 160] = 0 / 10^18
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_3625 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                    else:
                                        if not _6126:
                                            mem[_6227] = 0
                                            if 0 / 10^18 > mem[_3625 + 160]:
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_3625 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                mem[_3625 + 160] = 0 / 10^18
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_3625 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                        else:
                                            if _5636 and _6126 > -1 / _5636:
                                                revert with 'NH{q', 17
                                            if not _5636:
                                                revert with 'NH{q', 18
                                            if _5636 * _6126 / _5636 != _6126:
                                                _6765 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 23
                                                idx = 0
                                                while idx < 23:
                                                    mem[idx + _6765 + 68] = mem[idx + _6274 + 32]
                                                    _5418 = mem[_1826]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_6765 + 91] = 0
                                                revert with memory
                                                  from mem[64]
                                                   len _6765 + -mem[64] + 100
                                            mem[_6227] = _5636 * _6126
                                            if _5636 * _6126 / 10^18 > mem[_3625 + 160]:
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_3625 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                mem[_3625 + 160] = _5636 * _6126 / 10^18
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_3625 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
            else:
                if mem[mem[(32 * idx) + _1826 + 32] + 64] > 0:
                    if idx >= mem[_1826]:
                        revert with 'NH{q', 50
                    staticcall address(arg1).markets(address arg1) with:
                            gas gas_remaining wei
                           args address(mem[mem[(32 * idx) + _1826 + 32]])
                    mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _5478 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 96
                    require mem[_5478] == bool(mem[_5478])
                    _5528 = mem[_5478 + 32]
                    require mem[_5478 + 64] == bool(mem[_5478 + 64])
                    if mem[_5478]:
                        staticcall address(arg1).oracle() with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _5581 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _5592 = mem[_5581]
                        require mem[_5581] == mem[_5581 + 12 len 20]
                        if idx >= mem[_1826]:
                            revert with 'NH{q', 50
                        _5629 = mem[mem[(32 * idx) + _1826 + 32]]
                        mem[mem[64] + 4] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                        staticcall address(_5592).getUnderlyingPrice(address arg1) with:
                                gas gas_remaining wei
                               args address(_5629)
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _5637 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _5647 = mem[_5637]
                        _5649 = mem[64]
                        mem[64] = mem[64] + 32
                        mem[_5649] = _5647
                        if idx >= mem[_1826]:
                            revert with 'NH{q', 50
                        _5658 = mem[mem[(32 * idx) + _1826 + 32] + 32]
                        _5672 = mem[64]
                        mem[64] = mem[64] + 32
                        mem[_5672] = 0
                        _5673 = mem[64]
                        mem[64] = mem[64] + 32
                        _5685 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_5685] = 23
                        mem[_5685 + 32] = 'multiplication overflow'
                        if not _5647:
                            mem[_5673] = 0
                            if _5528 <= 0:
                                _5824 = mem[64]
                                mem[64] = mem[64] + 32
                                mem[_5824] = _5647
                                if idx >= mem[_1826]:
                                    revert with 'NH{q', 50
                                _5844 = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                _5894 = mem[64]
                                mem[64] = mem[64] + 32
                                mem[_5894] = 0
                                _5895 = mem[64]
                                mem[64] = mem[64] + 32
                                _5914 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_5914] = 23
                                mem[_5914 + 32] = 'multiplication overflow'
                                if not _5647:
                                    mem[_5895] = 0
                                    if 0 / 10^18 > mem[_3625 + 160]:
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        mem[_3625 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                        mem[_3625 + 160] = 0 / 10^18
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        mem[_3625 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                else:
                                    if not _5844:
                                        mem[_5895] = 0
                                        if 0 / 10^18 > mem[_3625 + 160]:
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_3625 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                            mem[_3625 + 160] = 0 / 10^18
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_3625 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                    else:
                                        if _5647 and _5844 > -1 / _5647:
                                            revert with 'NH{q', 17
                                        if not _5647:
                                            revert with 'NH{q', 18
                                        if _5647 * _5844 / _5647 != _5844:
                                            _6316 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 23
                                            idx = 0
                                            while idx < 23:
                                                mem[idx + _6316 + 68] = mem[idx + _5914 + 32]
                                                _5418 = mem[_1826]
                                                idx = idx + 32
                                                continue 
                                            mem[_6316 + 91] = 0
                                            revert with memory
                                              from mem[64]
                                               len _6316 + -mem[64] + 100
                                        mem[_5895] = _5647 * _5844
                                        if _5647 * _5844 / 10^18 > mem[_3625 + 160]:
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_3625 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                            mem[_3625 + 160] = _5647 * _5844 / 10^18
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_3625 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                            else:
                                if 0 / 10^18 <= mem[_3625 + 96]:
                                    _5845 = mem[64]
                                    mem[64] = mem[64] + 32
                                    mem[_5845] = _5647
                                    if idx >= mem[_1826]:
                                        revert with 'NH{q', 50
                                    _5870 = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                    _5915 = mem[64]
                                    mem[64] = mem[64] + 32
                                    mem[_5915] = 0
                                    _5916 = mem[64]
                                    mem[64] = mem[64] + 32
                                    _5936 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_5936] = 23
                                    mem[_5936 + 32] = 'multiplication overflow'
                                    if not _5647:
                                        mem[_5916] = 0
                                        if 0 / 10^18 > mem[_3625 + 160]:
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_3625 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                            mem[_3625 + 160] = 0 / 10^18
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_3625 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                    else:
                                        if not _5870:
                                            mem[_5916] = 0
                                            if 0 / 10^18 > mem[_3625 + 160]:
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_3625 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                mem[_3625 + 160] = 0 / 10^18
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_3625 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                        else:
                                            if _5647 and _5870 > -1 / _5647:
                                                revert with 'NH{q', 17
                                            if not _5647:
                                                revert with 'NH{q', 18
                                            if _5647 * _5870 / _5647 != _5870:
                                                _6354 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 23
                                                idx = 0
                                                while idx < 23:
                                                    mem[idx + _6354 + 68] = mem[idx + _5936 + 32]
                                                    _5418 = mem[_1826]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_6354 + 91] = 0
                                                revert with memory
                                                  from mem[64]
                                                   len _6354 + -mem[64] + 100
                                            mem[_5916] = _5647 * _5870
                                            if _5647 * _5870 / 10^18 > mem[_3625 + 160]:
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_3625 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                mem[_3625 + 160] = _5647 * _5870 / 10^18
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_3625 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                else:
                                    if idx >= mem[_1826]:
                                        revert with 'NH{q', 50
                                    mem[_3625 + 64] = mem[mem[(32 * idx) + _1826 + 32] + 32]
                                    mem[_3625 + 96] = 0 / 10^18
                                    if idx >= mem[_1826]:
                                        revert with 'NH{q', 50
                                    mem[_3625] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                    _5918 = mem[64]
                                    mem[64] = mem[64] + 32
                                    mem[_5918] = _5647
                                    if idx >= mem[_1826]:
                                        revert with 'NH{q', 50
                                    _5938 = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                    _5989 = mem[64]
                                    mem[64] = mem[64] + 32
                                    mem[_5989] = 0
                                    _5990 = mem[64]
                                    mem[64] = mem[64] + 32
                                    _6024 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_6024] = 23
                                    mem[_6024 + 32] = 'multiplication overflow'
                                    if not _5647:
                                        mem[_5990] = 0
                                        if 0 / 10^18 > mem[_3625 + 160]:
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_3625 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                            mem[_3625 + 160] = 0 / 10^18
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_3625 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                    else:
                                        if not _5938:
                                            mem[_5990] = 0
                                            if 0 / 10^18 > mem[_3625 + 160]:
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_3625 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                mem[_3625 + 160] = 0 / 10^18
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_3625 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                        else:
                                            if _5647 and _5938 > -1 / _5647:
                                                revert with 'NH{q', 17
                                            if not _5647:
                                                revert with 'NH{q', 18
                                            if _5647 * _5938 / _5647 != _5938:
                                                _6504 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 23
                                                idx = 0
                                                while idx < 23:
                                                    mem[idx + _6504 + 68] = mem[idx + _6024 + 32]
                                                    _5418 = mem[_1826]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_6504 + 91] = 0
                                                revert with memory
                                                  from mem[64]
                                                   len _6504 + -mem[64] + 100
                                            mem[_5990] = _5647 * _5938
                                            if _5647 * _5938 / 10^18 > mem[_3625 + 160]:
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_3625 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                mem[_3625 + 160] = _5647 * _5938 / 10^18
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_3625 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                        else:
                            if not _5658:
                                mem[_5673] = 0
                                if _5528 <= 0:
                                    _5849 = mem[64]
                                    mem[64] = mem[64] + 32
                                    mem[_5849] = _5647
                                    if idx >= mem[_1826]:
                                        revert with 'NH{q', 50
                                    _5875 = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                    _5920 = mem[64]
                                    mem[64] = mem[64] + 32
                                    mem[_5920] = 0
                                    _5921 = mem[64]
                                    mem[64] = mem[64] + 32
                                    _5939 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_5939] = 23
                                    mem[_5939 + 32] = 'multiplication overflow'
                                    if not _5647:
                                        mem[_5921] = 0
                                        if 0 / 10^18 > mem[_3625 + 160]:
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_3625 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                            mem[_3625 + 160] = 0 / 10^18
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_3625 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                    else:
                                        if not _5875:
                                            mem[_5921] = 0
                                            if 0 / 10^18 > mem[_3625 + 160]:
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_3625 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                mem[_3625 + 160] = 0 / 10^18
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_3625 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                        else:
                                            if _5647 and _5875 > -1 / _5647:
                                                revert with 'NH{q', 17
                                            if not _5647:
                                                revert with 'NH{q', 18
                                            if _5647 * _5875 / _5647 != _5875:
                                                _6357 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 23
                                                idx = 0
                                                while idx < 23:
                                                    mem[idx + _6357 + 68] = mem[idx + _5939 + 32]
                                                    _5418 = mem[_1826]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_6357 + 91] = 0
                                                revert with memory
                                                  from mem[64]
                                                   len _6357 + -mem[64] + 100
                                            mem[_5921] = _5647 * _5875
                                            if _5647 * _5875 / 10^18 > mem[_3625 + 160]:
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_3625 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                mem[_3625 + 160] = _5647 * _5875 / 10^18
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_3625 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                else:
                                    if 0 / 10^18 <= mem[_3625 + 96]:
                                        _5876 = mem[64]
                                        mem[64] = mem[64] + 32
                                        mem[_5876] = _5647
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        _5900 = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                        _5940 = mem[64]
                                        mem[64] = mem[64] + 32
                                        mem[_5940] = 0
                                        _5941 = mem[64]
                                        mem[64] = mem[64] + 32
                                        _5964 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_5964] = 23
                                        mem[_5964 + 32] = 'multiplication overflow'
                                        if not _5647:
                                            mem[_5941] = 0
                                            if 0 / 10^18 > mem[_3625 + 160]:
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_3625 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                mem[_3625 + 160] = 0 / 10^18
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_3625 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                        else:
                                            if not _5900:
                                                mem[_5941] = 0
                                                if 0 / 10^18 > mem[_3625 + 160]:
                                                    if idx >= mem[_1826]:
                                                        revert with 'NH{q', 50
                                                    mem[_3625 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                    mem[_3625 + 160] = 0 / 10^18
                                                    if idx >= mem[_1826]:
                                                        revert with 'NH{q', 50
                                                    mem[_3625 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                            else:
                                                if _5647 and _5900 > -1 / _5647:
                                                    revert with 'NH{q', 17
                                                if not _5647:
                                                    revert with 'NH{q', 18
                                                if _5647 * _5900 / _5647 != _5900:
                                                    _6401 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 23
                                                    idx = 0
                                                    while idx < 23:
                                                        mem[idx + _6401 + 68] = mem[idx + _5964 + 32]
                                                        _5418 = mem[_1826]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_6401 + 91] = 0
                                                    revert with memory
                                                      from mem[64]
                                                       len _6401 + -mem[64] + 100
                                                mem[_5941] = _5647 * _5900
                                                if _5647 * _5900 / 10^18 > mem[_3625 + 160]:
                                                    if idx >= mem[_1826]:
                                                        revert with 'NH{q', 50
                                                    mem[_3625 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                    mem[_3625 + 160] = _5647 * _5900 / 10^18
                                                    if idx >= mem[_1826]:
                                                        revert with 'NH{q', 50
                                                    mem[_3625 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                    else:
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        mem[_3625 + 64] = mem[mem[(32 * idx) + _1826 + 32] + 32]
                                        mem[_3625 + 96] = 0 / 10^18
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        mem[_3625] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                        _5943 = mem[64]
                                        mem[64] = mem[64] + 32
                                        mem[_5943] = _5647
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        _5966 = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                        _6030 = mem[64]
                                        mem[64] = mem[64] + 32
                                        mem[_6030] = 0
                                        _6031 = mem[64]
                                        mem[64] = mem[64] + 32
                                        _6079 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_6079] = 23
                                        mem[_6079 + 32] = 'multiplication overflow'
                                        if not _5647:
                                            mem[_6031] = 0
                                            if 0 / 10^18 > mem[_3625 + 160]:
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_3625 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                mem[_3625 + 160] = 0 / 10^18
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_3625 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                        else:
                                            if not _5966:
                                                mem[_6031] = 0
                                                if 0 / 10^18 > mem[_3625 + 160]:
                                                    if idx >= mem[_1826]:
                                                        revert with 'NH{q', 50
                                                    mem[_3625 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                    mem[_3625 + 160] = 0 / 10^18
                                                    if idx >= mem[_1826]:
                                                        revert with 'NH{q', 50
                                                    mem[_3625 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                            else:
                                                if _5647 and _5966 > -1 / _5647:
                                                    revert with 'NH{q', 17
                                                if not _5647:
                                                    revert with 'NH{q', 18
                                                if _5647 * _5966 / _5647 != _5966:
                                                    _6570 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 23
                                                    idx = 0
                                                    while idx < 23:
                                                        mem[idx + _6570 + 68] = mem[idx + _6079 + 32]
                                                        _5418 = mem[_1826]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_6570 + 91] = 0
                                                    revert with memory
                                                      from mem[64]
                                                       len _6570 + -mem[64] + 100
                                                mem[_6031] = _5647 * _5966
                                                if _5647 * _5966 / 10^18 > mem[_3625 + 160]:
                                                    if idx >= mem[_1826]:
                                                        revert with 'NH{q', 50
                                                    mem[_3625 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                    mem[_3625 + 160] = _5647 * _5966 / 10^18
                                                    if idx >= mem[_1826]:
                                                        revert with 'NH{q', 50
                                                    mem[_3625 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                            else:
                                if _5647 and _5658 > -1 / _5647:
                                    revert with 'NH{q', 17
                                if not _5647:
                                    revert with 'NH{q', 18
                                if _5647 * _5658 / _5647 != _5658:
                                    _5779 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 23
                                    idx = 0
                                    while idx < 23:
                                        mem[idx + _5779 + 68] = mem[idx + _5685 + 32]
                                        _5418 = mem[_1826]
                                        idx = idx + 32
                                        continue 
                                    mem[_5779 + 91] = 0
                                    revert with memory
                                      from mem[64]
                                       len _5779 + -mem[64] + 100
                                mem[_5673] = _5647 * _5658
                                if _5528 <= 0:
                                    _5992 = mem[64]
                                    mem[64] = mem[64] + 32
                                    mem[_5992] = _5647
                                    if idx >= mem[_1826]:
                                        revert with 'NH{q', 50
                                    _6026 = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                    _6128 = mem[64]
                                    mem[64] = mem[64] + 32
                                    mem[_6128] = 0
                                    _6129 = mem[64]
                                    mem[64] = mem[64] + 32
                                    _6180 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_6180] = 23
                                    mem[_6180 + 32] = 'multiplication overflow'
                                    if not _5647:
                                        mem[_6129] = 0
                                        if 0 / 10^18 > mem[_3625 + 160]:
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_3625 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                            mem[_3625 + 160] = 0 / 10^18
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_3625 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                    else:
                                        if not _6026:
                                            mem[_6129] = 0
                                            if 0 / 10^18 > mem[_3625 + 160]:
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_3625 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                mem[_3625 + 160] = 0 / 10^18
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_3625 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                        else:
                                            if _5647 and _6026 > -1 / _5647:
                                                revert with 'NH{q', 17
                                            if not _5647:
                                                revert with 'NH{q', 18
                                            if _5647 * _6026 / _5647 != _6026:
                                                _6673 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 23
                                                idx = 0
                                                while idx < 23:
                                                    mem[idx + _6673 + 68] = mem[idx + _6180 + 32]
                                                    _5418 = mem[_1826]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_6673 + 91] = 0
                                                revert with memory
                                                  from mem[64]
                                                   len _6673 + -mem[64] + 100
                                            mem[_6129] = _5647 * _6026
                                            if _5647 * _6026 / 10^18 > mem[_3625 + 160]:
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_3625 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                mem[_3625 + 160] = _5647 * _6026 / 10^18
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_3625 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                else:
                                    if _5647 * _5658 / 10^18 <= mem[_3625 + 96]:
                                        _6027 = mem[64]
                                        mem[64] = mem[64] + 32
                                        mem[_6027] = _5647
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        _6075 = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                        _6181 = mem[64]
                                        mem[64] = mem[64] + 32
                                        mem[_6181] = 0
                                        _6182 = mem[64]
                                        mem[64] = mem[64] + 32
                                        _6232 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_6232] = 23
                                        mem[_6232 + 32] = 'multiplication overflow'
                                        if not _5647:
                                            mem[_6182] = 0
                                            if 0 / 10^18 > mem[_3625 + 160]:
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_3625 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                mem[_3625 + 160] = 0 / 10^18
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_3625 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                        else:
                                            if not _6075:
                                                mem[_6182] = 0
                                                if 0 / 10^18 > mem[_3625 + 160]:
                                                    if idx >= mem[_1826]:
                                                        revert with 'NH{q', 50
                                                    mem[_3625 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                    mem[_3625 + 160] = 0 / 10^18
                                                    if idx >= mem[_1826]:
                                                        revert with 'NH{q', 50
                                                    mem[_3625 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                            else:
                                                if _5647 and _6075 > -1 / _5647:
                                                    revert with 'NH{q', 17
                                                if not _5647:
                                                    revert with 'NH{q', 18
                                                if _5647 * _6075 / _5647 != _6075:
                                                    _6726 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 23
                                                    idx = 0
                                                    while idx < 23:
                                                        mem[idx + _6726 + 68] = mem[idx + _6232 + 32]
                                                        _5418 = mem[_1826]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_6726 + 91] = 0
                                                    revert with memory
                                                      from mem[64]
                                                       len _6726 + -mem[64] + 100
                                                mem[_6182] = _5647 * _6075
                                                if _5647 * _6075 / 10^18 > mem[_3625 + 160]:
                                                    if idx >= mem[_1826]:
                                                        revert with 'NH{q', 50
                                                    mem[_3625 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                    mem[_3625 + 160] = _5647 * _6075 / 10^18
                                                    if idx >= mem[_1826]:
                                                        revert with 'NH{q', 50
                                                    mem[_3625 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                    else:
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        mem[_3625 + 64] = mem[mem[(32 * idx) + _1826 + 32] + 32]
                                        mem[_3625 + 96] = _5647 * _5658 / 10^18
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        mem[_3625] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                        _6184 = mem[64]
                                        mem[64] = mem[64] + 32
                                        mem[_6184] = _5647
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        _6234 = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                        _6317 = mem[64]
                                        mem[64] = mem[64] + 32
                                        mem[_6317] = 0
                                        _6318 = mem[64]
                                        mem[64] = mem[64] + 32
                                        _6356 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_6356] = 23
                                        mem[_6356 + 32] = 'multiplication overflow'
                                        if not _5647:
                                            mem[_6318] = 0
                                            if 0 / 10^18 > mem[_3625 + 160]:
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_3625 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                mem[_3625 + 160] = 0 / 10^18
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_3625 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                        else:
                                            if not _6234:
                                                mem[_6318] = 0
                                                if 0 / 10^18 > mem[_3625 + 160]:
                                                    if idx >= mem[_1826]:
                                                        revert with 'NH{q', 50
                                                    mem[_3625 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                    mem[_3625 + 160] = 0 / 10^18
                                                    if idx >= mem[_1826]:
                                                        revert with 'NH{q', 50
                                                    mem[_3625 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                            else:
                                                if _5647 and _6234 > -1 / _5647:
                                                    revert with 'NH{q', 17
                                                if not _5647:
                                                    revert with 'NH{q', 18
                                                if _5647 * _6234 / _5647 != _6234:
                                                    _6899 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 23
                                                    idx = 0
                                                    while idx < 23:
                                                        mem[idx + _6899 + 68] = mem[idx + _6356 + 32]
                                                        _5418 = mem[_1826]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_6899 + 91] = 0
                                                    revert with memory
                                                      from mem[64]
                                                       len _6899 + -mem[64] + 100
                                                mem[_6318] = _5647 * _6234
                                                if _5647 * _6234 / 10^18 > mem[_3625 + 160]:
                                                    if idx >= mem[_1826]:
                                                        revert with 'NH{q', 50
                                                    mem[_3625 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                    mem[_3625 + 160] = _5647 * _6234 / 10^18
                                                    if idx >= mem[_1826]:
                                                        revert with 'NH{q', 50
                                                    mem[_3625 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
            if idx == -1:
                revert with 'NH{q', 17
            _5418 = mem[_1826]
            idx = idx + 1
            continue 
        _5419 = mem[_3625 + 32]
        _5420 = mem[_3625]
        _5421 = mem[_3625 + 128]
        mem[224] = mem[_3625 + 160]
        mem[192] = _5421
        mem[160] = address(_5420)
        mem[128] = address(_5419)
        mem[mem[64]] = mem[108 len 20]
        mem[mem[64] + 32] = address(_5419)
        mem[mem[64] + 64] = address(_5420)
        mem[mem[64] + 96] = _5421
        mem[mem[64] + 128] = mem[224]
        mem[mem[64] + 160] = bool(mem[256])
        return mem[mem[64]], address(_5419), address(_5420), _5421, mem[mem[64] + 128 len 64]
    mem[64] = _1826 + (32 * _24) + 160
    mem[_1826 + (32 * _24) + 32] = 0
    mem[_1826 + (32 * _24) + 64] = 0
    mem[_1826 + (32 * _24) + 96] = 0
    mem[_1826 + (32 * _24) + 128] = 0
    mem[var41002] = var41001
    if not var41003 - 1:
        idx = 0
        while idx < _24:
            if idx >= mem[(4 * ceil32(return_data.size)) + 288]:
                revert with 'NH{q', 50
            _8052 = mem[(32 * idx) + (4 * ceil32(return_data.size)) + 320]
            mem[mem[64] + 4] = address(arg2)
            staticcall address(_8052).borrowBalanceStored(address arg1) with:
                    gas gas_remaining wei
                   args address(arg2)
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _8075 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _8104 = mem[_8075]
            _8111 = mem[64]
            mem[64] = mem[64] + 128
            if idx >= mem[(4 * ceil32(return_data.size)) + 288]:
                revert with 'NH{q', 50
            mem[_8111] = mem[(32 * idx) + (4 * ceil32(return_data.size)) + 332 len 20]
            if idx >= mem[(4 * ceil32(return_data.size)) + 288]:
                revert with 'NH{q', 50
            _8122 = mem[(32 * idx) + (4 * ceil32(return_data.size)) + 320]
            mem[mem[64] + 4] = address(arg2)
            staticcall address(_8122).0x70a08231 with:
                    gas gas_remaining wei
                   args address(arg2)
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _8147 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _8162 = mem[_8147]
            if mem[_8147] <= 0:
                mem[_8111 + 32] = 0
                mem[_8111 + 64] = _8104
                _8193 = mem[64]
                mem[64] = mem[64] + 32
                mem[_8193] = ext_call.return_data[0]
                _8201 = mem[64]
                mem[64] = mem[64] + 32
                mem[_8201] = 0
                _8202 = mem[64]
                mem[64] = mem[64] + 32
                _8207 = mem[64]
                mem[64] = mem[64] + 64
                mem[_8207] = 23
                mem[_8207 + 32] = 'multiplication overflow'
                if not ext_call.return_data[0]:
                    mem[_8202] = 0
                    mem[_8111 + 96] = 0 / 10^18
                    if idx >= mem[_1826]:
                        revert with 'NH{q', 50
                    mem[(32 * idx) + _1826 + 32] = _8111
                    if idx == -1:
                        revert with 'NH{q', 17
                    idx = idx + 1
                    continue 
                if not _8104:
                    mem[_8202] = 0
                    mem[_8111 + 96] = 0 / 10^18
                    if idx >= mem[_1826]:
                        revert with 'NH{q', 50
                    mem[(32 * idx) + _1826 + 32] = _8111
                    if idx == -1:
                        revert with 'NH{q', 17
                    idx = idx + 1
                    continue 
                if ext_call.return_data[0] and _8104 > -1 / ext_call.return_data[0]:
                    revert with 'NH{q', 17
                if not ext_call.return_data[0]:
                    revert with 'NH{q', 18
                if ext_call.return_data[0] * _8104 / ext_call.return_data[0] == _8104:
                    mem[_8202] = ext_call.return_data[0] * _8104
                    mem[_8111 + 96] = ext_call.return_data[0] * _8104 / 10^18
                    if idx >= mem[_1826]:
                        revert with 'NH{q', 50
                    mem[(32 * idx) + _1826 + 32] = _8111
                    if idx == -1:
                        revert with 'NH{q', 17
                    idx = idx + 1
                    continue 
                _8252 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 23
                idx = 0
                while idx < 23:
                    mem[idx + _8252 + 68] = mem[idx + _8207 + 32]
                    idx = idx + 32
                    continue 
                mem[_8252 + 91] = 0
                revert with memory
                  from mem[64]
                   len _8252 + -mem[64] + 100
            _8179 = mem[64]
            mem[64] = mem[64] + 32
            staticcall address(_8122).exchangeRateStored() with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _8189 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[_8179] = mem[_8189]
            _8212 = mem[64]
            mem[64] = mem[64] + 32
            mem[_8212] = 0
            _8213 = mem[64]
            mem[64] = mem[64] + 32
            _8214 = mem[_8179]
            _8218 = mem[64]
            mem[64] = mem[64] + 64
            mem[_8218] = 23
            mem[_8218 + 32] = 'multiplication overflow'
            if not _8214:
                mem[_8213] = 0
                mem[_8111 + 32] = 0 / 10^18
                mem[_8111 + 64] = _8104
                _8308 = mem[64]
                mem[64] = mem[64] + 32
                mem[_8308] = ext_call.return_data[0]
                _8325 = mem[64]
                mem[64] = mem[64] + 32
                mem[_8325] = 0
                _8326 = mem[64]
                mem[64] = mem[64] + 32
                _8335 = mem[64]
                mem[64] = mem[64] + 64
                mem[_8335] = 23
                mem[_8335 + 32] = 'multiplication overflow'
                if not ext_call.return_data[0]:
                    mem[_8326] = 0
                    mem[_8111 + 96] = 0 / 10^18
                    if idx >= mem[_1826]:
                        revert with 'NH{q', 50
                    mem[(32 * idx) + _1826 + 32] = _8111
                    if idx == -1:
                        revert with 'NH{q', 17
                    idx = idx + 1
                    continue 
                if not _8104:
                    mem[_8326] = 0
                    mem[_8111 + 96] = 0 / 10^18
                    if idx >= mem[_1826]:
                        revert with 'NH{q', 50
                    mem[(32 * idx) + _1826 + 32] = _8111
                    if idx == -1:
                        revert with 'NH{q', 17
                    idx = idx + 1
                    continue 
                if ext_call.return_data[0] and _8104 > -1 / ext_call.return_data[0]:
                    revert with 'NH{q', 17
                if not ext_call.return_data[0]:
                    revert with 'NH{q', 18
                if ext_call.return_data[0] * _8104 / ext_call.return_data[0] == _8104:
                    mem[_8326] = ext_call.return_data[0] * _8104
                    mem[_8111 + 96] = ext_call.return_data[0] * _8104 / 10^18
                    if idx >= mem[_1826]:
                        revert with 'NH{q', 50
                    mem[(32 * idx) + _1826 + 32] = _8111
                    if idx == -1:
                        revert with 'NH{q', 17
                    idx = idx + 1
                    continue 
                _8384 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 23
                idx = 0
                while idx < 23:
                    mem[idx + _8384 + 68] = mem[idx + _8335 + 32]
                    idx = idx + 32
                    continue 
                mem[_8384 + 91] = 0
                revert with memory
                  from mem[64]
                   len _8384 + -mem[64] + 100
            if not _8162:
                mem[_8213] = 0
                mem[_8111 + 32] = 0 / 10^18
                mem[_8111 + 64] = _8104
                _8319 = mem[64]
                mem[64] = mem[64] + 32
                mem[_8319] = ext_call.return_data[0]
                _8336 = mem[64]
                mem[64] = mem[64] + 32
                mem[_8336] = 0
                _8337 = mem[64]
                mem[64] = mem[64] + 32
                _8343 = mem[64]
                mem[64] = mem[64] + 64
                mem[_8343] = 23
                mem[_8343 + 32] = 'multiplication overflow'
                if not ext_call.return_data[0]:
                    mem[_8337] = 0
                    mem[_8111 + 96] = 0 / 10^18
                    if idx >= mem[_1826]:
                        revert with 'NH{q', 50
                    mem[(32 * idx) + _1826 + 32] = _8111
                    if idx == -1:
                        revert with 'NH{q', 17
                    idx = idx + 1
                    continue 
                if not _8104:
                    mem[_8337] = 0
                    mem[_8111 + 96] = 0 / 10^18
                    if idx >= mem[_1826]:
                        revert with 'NH{q', 50
                    mem[(32 * idx) + _1826 + 32] = _8111
                    if idx == -1:
                        revert with 'NH{q', 17
                    idx = idx + 1
                    continue 
                if ext_call.return_data[0] and _8104 > -1 / ext_call.return_data[0]:
                    revert with 'NH{q', 17
                if not ext_call.return_data[0]:
                    revert with 'NH{q', 18
                if ext_call.return_data[0] * _8104 / ext_call.return_data[0] == _8104:
                    mem[_8337] = ext_call.return_data[0] * _8104
                    mem[_8111 + 96] = ext_call.return_data[0] * _8104 / 10^18
                    if idx >= mem[_1826]:
                        revert with 'NH{q', 50
                    mem[(32 * idx) + _1826 + 32] = _8111
                    if idx == -1:
                        revert with 'NH{q', 17
                    idx = idx + 1
                    continue 
                _8392 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 23
                idx = 0
                while idx < 23:
                    mem[idx + _8392 + 68] = mem[idx + _8343 + 32]
                    idx = idx + 32
                    continue 
                mem[_8392 + 91] = 0
                revert with memory
                  from mem[64]
                   len _8392 + -mem[64] + 100
            if _8214 and _8162 > -1 / _8214:
                revert with 'NH{q', 17
            if not _8214:
                revert with 'NH{q', 18
            if _8214 * _8162 / _8214 != _8162:
                _8263 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 23
                idx = 0
                while idx < 23:
                    mem[idx + _8263 + 68] = mem[idx + _8218 + 32]
                    idx = idx + 32
                    continue 
                mem[_8263 + 91] = 0
                revert with memory
                  from mem[64]
                   len _8263 + -mem[64] + 100
            mem[_8213] = _8214 * _8162
            mem[_8111 + 32] = _8214 * _8162 / 10^18
            mem[_8111 + 64] = _8104
            _8359 = mem[64]
            mem[64] = mem[64] + 32
            mem[_8359] = ext_call.return_data[0]
            _8363 = mem[64]
            mem[64] = mem[64] + 32
            mem[_8363] = 0
            _8364 = mem[64]
            mem[64] = mem[64] + 32
            _8369 = mem[64]
            mem[64] = mem[64] + 64
            mem[_8369] = 23
            mem[_8369 + 32] = 'multiplication overflow'
            if not ext_call.return_data[0]:
                mem[_8364] = 0
                mem[_8111 + 96] = 0 / 10^18
                if idx >= mem[_1826]:
                    revert with 'NH{q', 50
                mem[(32 * idx) + _1826 + 32] = _8111
                if idx == -1:
                    revert with 'NH{q', 17
                idx = idx + 1
                continue 
            if not _8104:
                mem[_8364] = 0
                mem[_8111 + 96] = 0 / 10^18
                if idx >= mem[_1826]:
                    revert with 'NH{q', 50
                mem[(32 * idx) + _1826 + 32] = _8111
                if idx == -1:
                    revert with 'NH{q', 17
                idx = idx + 1
                continue 
            if ext_call.return_data[0] and _8104 > -1 / ext_call.return_data[0]:
                revert with 'NH{q', 17
            if not ext_call.return_data[0]:
                revert with 'NH{q', 18
            if ext_call.return_data[0] * _8104 / ext_call.return_data[0] == _8104:
                mem[_8364] = ext_call.return_data[0] * _8104
                mem[_8111 + 96] = ext_call.return_data[0] * _8104 / 10^18
                if idx >= mem[_1826]:
                    revert with 'NH{q', 50
                mem[(32 * idx) + _1826 + 32] = _8111
                if idx == -1:
                    revert with 'NH{q', 17
                idx = idx + 1
                continue 
            _8524 = mem[64]
            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = 32
            mem[mem[64] + 36] = 23
            idx = 0
            while idx < 23:
                mem[idx + _8524 + 68] = mem[idx + _8369 + 32]
                idx = idx + 32
                continue 
            mem[_8524 + 91] = 0
            revert with memory
              from mem[64]
               len _8524 + -mem[64] + 100
        _8051 = mem[64]
        mem[64] = mem[64] + 192
        mem[_8051] = 0
        mem[_8051 + 32] = 0
        mem[_8051 + 64] = 0
        mem[_8051 + 96] = 0
        mem[_8051 + 128] = 0
        mem[_8051 + 160] = 0
        _9883 = mem[_1826]
        idx = 0
        while idx < _9883:
            if idx >= mem[_1826]:
                revert with 'NH{q', 50
            if idx >= mem[_1826]:
                revert with 'NH{q', 50
            if mem[mem[(32 * idx) + _1826 + 32] + 32] > 0:
                staticcall address(arg1).markets(address arg1) with:
                        gas gas_remaining wei
                       args address(mem[mem[(32 * idx) + _1826 + 32]])
                mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _9931 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 96
                require mem[_9931] == bool(mem[_9931])
                _9975 = mem[_9931 + 32]
                require mem[_9931 + 64] == bool(mem[_9931 + 64])
                if mem[_9931]:
                    staticcall address(arg1).oracle() with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _10038 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _10050 = mem[_10038]
                    require mem[_10038] == mem[_10038 + 12 len 20]
                    if idx >= mem[_1826]:
                        revert with 'NH{q', 50
                    _10081 = mem[mem[(32 * idx) + _1826 + 32]]
                    mem[mem[64] + 4] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                    staticcall address(_10050).getUnderlyingPrice(address arg1) with:
                            gas gas_remaining wei
                           args address(_10081)
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _10091 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _10103 = mem[_10091]
                    _10108 = mem[64]
                    mem[64] = mem[64] + 32
                    mem[_10108] = _10103
                    if idx >= mem[_1826]:
                        revert with 'NH{q', 50
                    _10112 = mem[mem[(32 * idx) + _1826 + 32] + 32]
                    _10125 = mem[64]
                    mem[64] = mem[64] + 32
                    mem[_10125] = 0
                    _10126 = mem[64]
                    mem[64] = mem[64] + 32
                    _10136 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_10136] = 23
                    mem[_10136 + 32] = 'multiplication overflow'
                    if not _10103:
                        mem[_10126] = 0
                        if _9975 <= 0:
                            _10258 = mem[64]
                            mem[64] = mem[64] + 32
                            mem[_10258] = _10103
                            if idx >= mem[_1826]:
                                revert with 'NH{q', 50
                            _10270 = mem[mem[(32 * idx) + _1826 + 32] + 96]
                            _10305 = mem[64]
                            mem[64] = mem[64] + 32
                            mem[_10305] = 0
                            _10306 = mem[64]
                            mem[64] = mem[64] + 32
                            _10329 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_10329] = 23
                            mem[_10329 + 32] = 'multiplication overflow'
                            if not _10103:
                                mem[_10306] = 0
                                if 0 / 10^18 > mem[_8051 + 160]:
                                    if idx >= mem[_1826]:
                                        revert with 'NH{q', 50
                                    mem[_8051 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                    mem[_8051 + 160] = 0 / 10^18
                                    if idx >= mem[_1826]:
                                        revert with 'NH{q', 50
                                    mem[_8051 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                            else:
                                if not _10270:
                                    mem[_10306] = 0
                                    if 0 / 10^18 > mem[_8051 + 160]:
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        mem[_8051 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                        mem[_8051 + 160] = 0 / 10^18
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        mem[_8051 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                else:
                                    if _10103 and _10270 > -1 / _10103:
                                        revert with 'NH{q', 17
                                    if not _10103:
                                        revert with 'NH{q', 18
                                    if _10103 * _10270 / _10103 != _10270:
                                        _10725 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 23
                                        idx = 0
                                        while idx < 23:
                                            mem[idx + _10725 + 68] = mem[idx + _10329 + 32]
                                            _9883 = mem[_1826]
                                            idx = idx + 32
                                            continue 
                                        mem[_10725 + 91] = 0
                                        revert with memory
                                          from mem[64]
                                           len _10725 + -mem[64] + 100
                                    mem[_10306] = _10103 * _10270
                                    if _10103 * _10270 / 10^18 > mem[_8051 + 160]:
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        mem[_8051 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                        mem[_8051 + 160] = _10103 * _10270 / 10^18
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        mem[_8051 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                        else:
                            if 0 / 10^18 <= mem[_8051 + 96]:
                                _10271 = mem[64]
                                mem[64] = mem[64] + 32
                                mem[_10271] = _10103
                                if idx >= mem[_1826]:
                                    revert with 'NH{q', 50
                                _10285 = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                _10330 = mem[64]
                                mem[64] = mem[64] + 32
                                mem[_10330] = 0
                                _10331 = mem[64]
                                mem[64] = mem[64] + 32
                                _10356 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_10356] = 23
                                mem[_10356 + 32] = 'multiplication overflow'
                                if not _10103:
                                    mem[_10331] = 0
                                    if 0 / 10^18 > mem[_8051 + 160]:
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        mem[_8051 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                        mem[_8051 + 160] = 0 / 10^18
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        mem[_8051 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                else:
                                    if not _10285:
                                        mem[_10331] = 0
                                        if 0 / 10^18 > mem[_8051 + 160]:
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_8051 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                            mem[_8051 + 160] = 0 / 10^18
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_8051 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                    else:
                                        if _10103 and _10285 > -1 / _10103:
                                            revert with 'NH{q', 17
                                        if not _10103:
                                            revert with 'NH{q', 18
                                        if _10103 * _10285 / _10103 != _10285:
                                            _10769 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 23
                                            idx = 0
                                            while idx < 23:
                                                mem[idx + _10769 + 68] = mem[idx + _10356 + 32]
                                                _9883 = mem[_1826]
                                                idx = idx + 32
                                                continue 
                                            mem[_10769 + 91] = 0
                                            revert with memory
                                              from mem[64]
                                               len _10769 + -mem[64] + 100
                                        mem[_10331] = _10103 * _10285
                                        if _10103 * _10285 / 10^18 > mem[_8051 + 160]:
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_8051 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                            mem[_8051 + 160] = _10103 * _10285 / 10^18
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_8051 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                            else:
                                if idx >= mem[_1826]:
                                    revert with 'NH{q', 50
                                mem[_8051 + 64] = mem[mem[(32 * idx) + _1826 + 32] + 32]
                                mem[_8051 + 96] = 0 / 10^18
                                if idx >= mem[_1826]:
                                    revert with 'NH{q', 50
                                mem[_8051] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                _10333 = mem[64]
                                mem[64] = mem[64] + 32
                                mem[_10333] = _10103
                                if idx >= mem[_1826]:
                                    revert with 'NH{q', 50
                                _10358 = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                _10405 = mem[64]
                                mem[64] = mem[64] + 32
                                mem[_10405] = 0
                                _10406 = mem[64]
                                mem[64] = mem[64] + 32
                                _10435 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_10435] = 23
                                mem[_10435 + 32] = 'multiplication overflow'
                                if not _10103:
                                    mem[_10406] = 0
                                    if 0 / 10^18 > mem[_8051 + 160]:
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        mem[_8051 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                        mem[_8051 + 160] = 0 / 10^18
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        mem[_8051 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                else:
                                    if not _10358:
                                        mem[_10406] = 0
                                        if 0 / 10^18 > mem[_8051 + 160]:
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_8051 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                            mem[_8051 + 160] = 0 / 10^18
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_8051 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                    else:
                                        if _10103 and _10358 > -1 / _10103:
                                            revert with 'NH{q', 17
                                        if not _10103:
                                            revert with 'NH{q', 18
                                        if _10103 * _10358 / _10103 != _10358:
                                            _10887 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 23
                                            idx = 0
                                            while idx < 23:
                                                mem[idx + _10887 + 68] = mem[idx + _10435 + 32]
                                                _9883 = mem[_1826]
                                                idx = idx + 32
                                                continue 
                                            mem[_10887 + 91] = 0
                                            revert with memory
                                              from mem[64]
                                               len _10887 + -mem[64] + 100
                                        mem[_10406] = _10103 * _10358
                                        if _10103 * _10358 / 10^18 > mem[_8051 + 160]:
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_8051 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                            mem[_8051 + 160] = _10103 * _10358 / 10^18
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_8051 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                    else:
                        if not _10112:
                            mem[_10126] = 0
                            if _9975 <= 0:
                                _10275 = mem[64]
                                mem[64] = mem[64] + 32
                                mem[_10275] = _10103
                                if idx >= mem[_1826]:
                                    revert with 'NH{q', 50
                                _10290 = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                _10335 = mem[64]
                                mem[64] = mem[64] + 32
                                mem[_10335] = 0
                                _10336 = mem[64]
                                mem[64] = mem[64] + 32
                                _10359 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_10359] = 23
                                mem[_10359 + 32] = 'multiplication overflow'
                                if not _10103:
                                    mem[_10336] = 0
                                    if 0 / 10^18 > mem[_8051 + 160]:
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        mem[_8051 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                        mem[_8051 + 160] = 0 / 10^18
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        mem[_8051 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                else:
                                    if not _10290:
                                        mem[_10336] = 0
                                        if 0 / 10^18 > mem[_8051 + 160]:
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_8051 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                            mem[_8051 + 160] = 0 / 10^18
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_8051 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                    else:
                                        if _10103 and _10290 > -1 / _10103:
                                            revert with 'NH{q', 17
                                        if not _10103:
                                            revert with 'NH{q', 18
                                        if _10103 * _10290 / _10103 != _10290:
                                            _10772 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 23
                                            idx = 0
                                            while idx < 23:
                                                mem[idx + _10772 + 68] = mem[idx + _10359 + 32]
                                                _9883 = mem[_1826]
                                                idx = idx + 32
                                                continue 
                                            mem[_10772 + 91] = 0
                                            revert with memory
                                              from mem[64]
                                               len _10772 + -mem[64] + 100
                                        mem[_10336] = _10103 * _10290
                                        if _10103 * _10290 / 10^18 > mem[_8051 + 160]:
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_8051 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                            mem[_8051 + 160] = _10103 * _10290 / 10^18
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_8051 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                            else:
                                if 0 / 10^18 <= mem[_8051 + 96]:
                                    _10291 = mem[64]
                                    mem[64] = mem[64] + 32
                                    mem[_10291] = _10103
                                    if idx >= mem[_1826]:
                                        revert with 'NH{q', 50
                                    _10311 = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                    _10360 = mem[64]
                                    mem[64] = mem[64] + 32
                                    mem[_10360] = 0
                                    _10361 = mem[64]
                                    mem[64] = mem[64] + 32
                                    _10382 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_10382] = 23
                                    mem[_10382 + 32] = 'multiplication overflow'
                                    if not _10103:
                                        mem[_10361] = 0
                                        if 0 / 10^18 > mem[_8051 + 160]:
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_8051 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                            mem[_8051 + 160] = 0 / 10^18
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_8051 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                    else:
                                        if not _10311:
                                            mem[_10361] = 0
                                            if 0 / 10^18 > mem[_8051 + 160]:
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_8051 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                mem[_8051 + 160] = 0 / 10^18
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_8051 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                        else:
                                            if _10103 and _10311 > -1 / _10103:
                                                revert with 'NH{q', 17
                                            if not _10103:
                                                revert with 'NH{q', 18
                                            if _10103 * _10311 / _10103 != _10311:
                                                _10807 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 23
                                                idx = 0
                                                while idx < 23:
                                                    mem[idx + _10807 + 68] = mem[idx + _10382 + 32]
                                                    _9883 = mem[_1826]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_10807 + 91] = 0
                                                revert with memory
                                                  from mem[64]
                                                   len _10807 + -mem[64] + 100
                                            mem[_10361] = _10103 * _10311
                                            if _10103 * _10311 / 10^18 > mem[_8051 + 160]:
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_8051 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                mem[_8051 + 160] = _10103 * _10311 / 10^18
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_8051 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                else:
                                    if idx >= mem[_1826]:
                                        revert with 'NH{q', 50
                                    mem[_8051 + 64] = mem[mem[(32 * idx) + _1826 + 32] + 32]
                                    mem[_8051 + 96] = 0 / 10^18
                                    if idx >= mem[_1826]:
                                        revert with 'NH{q', 50
                                    mem[_8051] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                    _10363 = mem[64]
                                    mem[64] = mem[64] + 32
                                    mem[_10363] = _10103
                                    if idx >= mem[_1826]:
                                        revert with 'NH{q', 50
                                    _10384 = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                    _10441 = mem[64]
                                    mem[64] = mem[64] + 32
                                    mem[_10441] = 0
                                    _10442 = mem[64]
                                    mem[64] = mem[64] + 32
                                    _10478 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_10478] = 23
                                    mem[_10478 + 32] = 'multiplication overflow'
                                    if not _10103:
                                        mem[_10442] = 0
                                        if 0 / 10^18 > mem[_8051 + 160]:
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_8051 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                            mem[_8051 + 160] = 0 / 10^18
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_8051 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                    else:
                                        if not _10384:
                                            mem[_10442] = 0
                                            if 0 / 10^18 > mem[_8051 + 160]:
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_8051 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                mem[_8051 + 160] = 0 / 10^18
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_8051 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                        else:
                                            if _10103 and _10384 > -1 / _10103:
                                                revert with 'NH{q', 17
                                            if not _10103:
                                                revert with 'NH{q', 18
                                            if _10103 * _10384 / _10103 != _10384:
                                                _10938 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 23
                                                idx = 0
                                                while idx < 23:
                                                    mem[idx + _10938 + 68] = mem[idx + _10478 + 32]
                                                    _9883 = mem[_1826]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_10938 + 91] = 0
                                                revert with memory
                                                  from mem[64]
                                                   len _10938 + -mem[64] + 100
                                            mem[_10442] = _10103 * _10384
                                            if _10103 * _10384 / 10^18 > mem[_8051 + 160]:
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_8051 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                mem[_8051 + 160] = _10103 * _10384 / 10^18
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_8051 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                        else:
                            if _10103 and _10112 > -1 / _10103:
                                revert with 'NH{q', 17
                            if not _10103:
                                revert with 'NH{q', 18
                            if _10103 * _10112 / _10103 != _10112:
                                _10236 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 23
                                idx = 0
                                while idx < 23:
                                    mem[idx + _10236 + 68] = mem[idx + _10136 + 32]
                                    _9883 = mem[_1826]
                                    idx = idx + 32
                                    continue 
                                mem[_10236 + 91] = 0
                                revert with memory
                                  from mem[64]
                                   len _10236 + -mem[64] + 100
                            mem[_10126] = _10103 * _10112
                            if _9975 <= 0:
                                _10408 = mem[64]
                                mem[64] = mem[64] + 32
                                mem[_10408] = _10103
                                if idx >= mem[_1826]:
                                    revert with 'NH{q', 50
                                _10437 = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                _10518 = mem[64]
                                mem[64] = mem[64] + 32
                                mem[_10518] = 0
                                _10519 = mem[64]
                                mem[64] = mem[64] + 32
                                _10575 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_10575] = 23
                                mem[_10575 + 32] = 'multiplication overflow'
                                if not _10103:
                                    mem[_10519] = 0
                                    if 0 / 10^18 > mem[_8051 + 160]:
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        mem[_8051 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                        mem[_8051 + 160] = 0 / 10^18
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        mem[_8051 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                else:
                                    if not _10437:
                                        mem[_10519] = 0
                                        if 0 / 10^18 > mem[_8051 + 160]:
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_8051 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                            mem[_8051 + 160] = 0 / 10^18
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_8051 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                    else:
                                        if _10103 and _10437 > -1 / _10103:
                                            revert with 'NH{q', 17
                                        if not _10103:
                                            revert with 'NH{q', 18
                                        if _10103 * _10437 / _10103 != _10437:
                                            _11029 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 23
                                            idx = 0
                                            while idx < 23:
                                                mem[idx + _11029 + 68] = mem[idx + _10575 + 32]
                                                _9883 = mem[_1826]
                                                idx = idx + 32
                                                continue 
                                            mem[_11029 + 91] = 0
                                            revert with memory
                                              from mem[64]
                                               len _11029 + -mem[64] + 100
                                        mem[_10519] = _10103 * _10437
                                        if _10103 * _10437 / 10^18 > mem[_8051 + 160]:
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_8051 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                            mem[_8051 + 160] = _10103 * _10437 / 10^18
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_8051 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                            else:
                                if _10103 * _10112 / 10^18 <= mem[_8051 + 96]:
                                    _10438 = mem[64]
                                    mem[64] = mem[64] + 32
                                    mem[_10438] = _10103
                                    if idx >= mem[_1826]:
                                        revert with 'NH{q', 50
                                    _10474 = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                    _10576 = mem[64]
                                    mem[64] = mem[64] + 32
                                    mem[_10576] = 0
                                    _10577 = mem[64]
                                    mem[64] = mem[64] + 32
                                    _10632 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_10632] = 23
                                    mem[_10632 + 32] = 'multiplication overflow'
                                    if not _10103:
                                        mem[_10577] = 0
                                        if 0 / 10^18 > mem[_8051 + 160]:
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_8051 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                            mem[_8051 + 160] = 0 / 10^18
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_8051 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                    else:
                                        if not _10474:
                                            mem[_10577] = 0
                                            if 0 / 10^18 > mem[_8051 + 160]:
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_8051 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                mem[_8051 + 160] = 0 / 10^18
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_8051 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                        else:
                                            if _10103 and _10474 > -1 / _10103:
                                                revert with 'NH{q', 17
                                            if not _10103:
                                                revert with 'NH{q', 18
                                            if _10103 * _10474 / _10103 != _10474:
                                                _11083 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 23
                                                idx = 0
                                                while idx < 23:
                                                    mem[idx + _11083 + 68] = mem[idx + _10632 + 32]
                                                    _9883 = mem[_1826]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_11083 + 91] = 0
                                                revert with memory
                                                  from mem[64]
                                                   len _11083 + -mem[64] + 100
                                            mem[_10577] = _10103 * _10474
                                            if _10103 * _10474 / 10^18 > mem[_8051 + 160]:
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_8051 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                mem[_8051 + 160] = _10103 * _10474 / 10^18
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_8051 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                else:
                                    if idx >= mem[_1826]:
                                        revert with 'NH{q', 50
                                    mem[_8051 + 64] = mem[mem[(32 * idx) + _1826 + 32] + 32]
                                    mem[_8051 + 96] = _10103 * _10112 / 10^18
                                    if idx >= mem[_1826]:
                                        revert with 'NH{q', 50
                                    mem[_8051] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                    _10579 = mem[64]
                                    mem[64] = mem[64] + 32
                                    mem[_10579] = _10103
                                    if idx >= mem[_1826]:
                                        revert with 'NH{q', 50
                                    _10634 = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                    _10726 = mem[64]
                                    mem[64] = mem[64] + 32
                                    mem[_10726] = 0
                                    _10727 = mem[64]
                                    mem[64] = mem[64] + 32
                                    _10771 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_10771] = 23
                                    mem[_10771 + 32] = 'multiplication overflow'
                                    if not _10103:
                                        mem[_10727] = 0
                                        if 0 / 10^18 > mem[_8051 + 160]:
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_8051 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                            mem[_8051 + 160] = 0 / 10^18
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_8051 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                    else:
                                        if not _10634:
                                            mem[_10727] = 0
                                            if 0 / 10^18 > mem[_8051 + 160]:
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_8051 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                mem[_8051 + 160] = 0 / 10^18
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_8051 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                        else:
                                            if _10103 and _10634 > -1 / _10103:
                                                revert with 'NH{q', 17
                                            if not _10103:
                                                revert with 'NH{q', 18
                                            if _10103 * _10634 / _10103 != _10634:
                                                _11254 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 23
                                                idx = 0
                                                while idx < 23:
                                                    mem[idx + _11254 + 68] = mem[idx + _10771 + 32]
                                                    _9883 = mem[_1826]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_11254 + 91] = 0
                                                revert with memory
                                                  from mem[64]
                                                   len _11254 + -mem[64] + 100
                                            mem[_10727] = _10103 * _10634
                                            if _10103 * _10634 / 10^18 > mem[_8051 + 160]:
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_8051 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                mem[_8051 + 160] = _10103 * _10634 / 10^18
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_8051 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
            else:
                if mem[mem[(32 * idx) + _1826 + 32] + 64] > 0:
                    if idx >= mem[_1826]:
                        revert with 'NH{q', 50
                    staticcall address(arg1).markets(address arg1) with:
                            gas gas_remaining wei
                           args address(mem[mem[(32 * idx) + _1826 + 32]])
                    mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _9950 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 96
                    require mem[_9950] == bool(mem[_9950])
                    _10001 = mem[_9950 + 32]
                    require mem[_9950 + 64] == bool(mem[_9950 + 64])
                    if mem[_9950]:
                        staticcall address(arg1).oracle() with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _10051 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _10063 = mem[_10051]
                        require mem[_10051] == mem[_10051 + 12 len 20]
                        if idx >= mem[_1826]:
                            revert with 'NH{q', 50
                        _10098 = mem[mem[(32 * idx) + _1826 + 32]]
                        mem[mem[64] + 4] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                        staticcall address(_10063).getUnderlyingPrice(address arg1) with:
                                gas gas_remaining wei
                               args address(_10098)
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _10104 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _10113 = mem[_10104]
                        _10117 = mem[64]
                        mem[64] = mem[64] + 32
                        mem[_10117] = _10113
                        if idx >= mem[_1826]:
                            revert with 'NH{q', 50
                        _10129 = mem[mem[(32 * idx) + _1826 + 32] + 32]
                        _10147 = mem[64]
                        mem[64] = mem[64] + 32
                        mem[_10147] = 0
                        _10148 = mem[64]
                        mem[64] = mem[64] + 32
                        _10157 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_10157] = 23
                        mem[_10157 + 32] = 'multiplication overflow'
                        if not _10113:
                            mem[_10148] = 0
                            if _10001 <= 0:
                                _10294 = mem[64]
                                mem[64] = mem[64] + 32
                                mem[_10294] = _10113
                                if idx >= mem[_1826]:
                                    revert with 'NH{q', 50
                                _10316 = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                _10365 = mem[64]
                                mem[64] = mem[64] + 32
                                mem[_10365] = 0
                                _10366 = mem[64]
                                mem[64] = mem[64] + 32
                                _10385 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_10385] = 23
                                mem[_10385 + 32] = 'multiplication overflow'
                                if not _10113:
                                    mem[_10366] = 0
                                    if 0 / 10^18 > mem[_8051 + 160]:
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        mem[_8051 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                        mem[_8051 + 160] = 0 / 10^18
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        mem[_8051 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                else:
                                    if not _10316:
                                        mem[_10366] = 0
                                        if 0 / 10^18 > mem[_8051 + 160]:
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_8051 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                            mem[_8051 + 160] = 0 / 10^18
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_8051 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                    else:
                                        if _10113 and _10316 > -1 / _10113:
                                            revert with 'NH{q', 17
                                        if not _10113:
                                            revert with 'NH{q', 18
                                        if _10113 * _10316 / _10113 != _10316:
                                            _10809 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 23
                                            idx = 0
                                            while idx < 23:
                                                mem[idx + _10809 + 68] = mem[idx + _10385 + 32]
                                                _9883 = mem[_1826]
                                                idx = idx + 32
                                                continue 
                                            mem[_10809 + 91] = 0
                                            revert with memory
                                              from mem[64]
                                               len _10809 + -mem[64] + 100
                                        mem[_10366] = _10113 * _10316
                                        if _10113 * _10316 / 10^18 > mem[_8051 + 160]:
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_8051 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                            mem[_8051 + 160] = _10113 * _10316 / 10^18
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_8051 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                            else:
                                if 0 / 10^18 <= mem[_8051 + 96]:
                                    _10317 = mem[64]
                                    mem[64] = mem[64] + 32
                                    mem[_10317] = _10113
                                    if idx >= mem[_1826]:
                                        revert with 'NH{q', 50
                                    _10341 = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                    _10386 = mem[64]
                                    mem[64] = mem[64] + 32
                                    mem[_10386] = 0
                                    _10387 = mem[64]
                                    mem[64] = mem[64] + 32
                                    _10410 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_10410] = 23
                                    mem[_10410 + 32] = 'multiplication overflow'
                                    if not _10113:
                                        mem[_10387] = 0
                                        if 0 / 10^18 > mem[_8051 + 160]:
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_8051 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                            mem[_8051 + 160] = 0 / 10^18
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_8051 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                    else:
                                        if not _10341:
                                            mem[_10387] = 0
                                            if 0 / 10^18 > mem[_8051 + 160]:
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_8051 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                mem[_8051 + 160] = 0 / 10^18
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_8051 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                        else:
                                            if _10113 and _10341 > -1 / _10113:
                                                revert with 'NH{q', 17
                                            if not _10113:
                                                revert with 'NH{q', 18
                                            if _10113 * _10341 / _10113 != _10341:
                                                _10850 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 23
                                                idx = 0
                                                while idx < 23:
                                                    mem[idx + _10850 + 68] = mem[idx + _10410 + 32]
                                                    _9883 = mem[_1826]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_10850 + 91] = 0
                                                revert with memory
                                                  from mem[64]
                                                   len _10850 + -mem[64] + 100
                                            mem[_10387] = _10113 * _10341
                                            if _10113 * _10341 / 10^18 > mem[_8051 + 160]:
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_8051 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                mem[_8051 + 160] = _10113 * _10341 / 10^18
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_8051 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                else:
                                    if idx >= mem[_1826]:
                                        revert with 'NH{q', 50
                                    mem[_8051 + 64] = mem[mem[(32 * idx) + _1826 + 32] + 32]
                                    mem[_8051 + 96] = 0 / 10^18
                                    if idx >= mem[_1826]:
                                        revert with 'NH{q', 50
                                    mem[_8051] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                    _10389 = mem[64]
                                    mem[64] = mem[64] + 32
                                    mem[_10389] = _10113
                                    if idx >= mem[_1826]:
                                        revert with 'NH{q', 50
                                    _10412 = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                    _10479 = mem[64]
                                    mem[64] = mem[64] + 32
                                    mem[_10479] = 0
                                    _10480 = mem[64]
                                    mem[64] = mem[64] + 32
                                    _10523 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_10523] = 23
                                    mem[_10523 + 32] = 'multiplication overflow'
                                    if not _10113:
                                        mem[_10480] = 0
                                        if 0 / 10^18 > mem[_8051 + 160]:
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_8051 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                            mem[_8051 + 160] = 0 / 10^18
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_8051 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                    else:
                                        if not _10412:
                                            mem[_10480] = 0
                                            if 0 / 10^18 > mem[_8051 + 160]:
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_8051 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                mem[_8051 + 160] = 0 / 10^18
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_8051 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                        else:
                                            if _10113 and _10412 > -1 / _10113:
                                                revert with 'NH{q', 17
                                            if not _10113:
                                                revert with 'NH{q', 18
                                            if _10113 * _10412 / _10113 != _10412:
                                                _10993 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 23
                                                idx = 0
                                                while idx < 23:
                                                    mem[idx + _10993 + 68] = mem[idx + _10523 + 32]
                                                    _9883 = mem[_1826]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_10993 + 91] = 0
                                                revert with memory
                                                  from mem[64]
                                                   len _10993 + -mem[64] + 100
                                            mem[_10480] = _10113 * _10412
                                            if _10113 * _10412 / 10^18 > mem[_8051 + 160]:
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_8051 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                mem[_8051 + 160] = _10113 * _10412 / 10^18
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_8051 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                        else:
                            if not _10129:
                                mem[_10148] = 0
                                if _10001 <= 0:
                                    _10321 = mem[64]
                                    mem[64] = mem[64] + 32
                                    mem[_10321] = _10113
                                    if idx >= mem[_1826]:
                                        revert with 'NH{q', 50
                                    _10346 = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                    _10391 = mem[64]
                                    mem[64] = mem[64] + 32
                                    mem[_10391] = 0
                                    _10392 = mem[64]
                                    mem[64] = mem[64] + 32
                                    _10413 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_10413] = 23
                                    mem[_10413 + 32] = 'multiplication overflow'
                                    if not _10113:
                                        mem[_10392] = 0
                                        if 0 / 10^18 > mem[_8051 + 160]:
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_8051 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                            mem[_8051 + 160] = 0 / 10^18
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_8051 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                    else:
                                        if not _10346:
                                            mem[_10392] = 0
                                            if 0 / 10^18 > mem[_8051 + 160]:
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_8051 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                mem[_8051 + 160] = 0 / 10^18
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_8051 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                        else:
                                            if _10113 and _10346 > -1 / _10113:
                                                revert with 'NH{q', 17
                                            if not _10113:
                                                revert with 'NH{q', 18
                                            if _10113 * _10346 / _10113 != _10346:
                                                _10853 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 23
                                                idx = 0
                                                while idx < 23:
                                                    mem[idx + _10853 + 68] = mem[idx + _10413 + 32]
                                                    _9883 = mem[_1826]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_10853 + 91] = 0
                                                revert with memory
                                                  from mem[64]
                                                   len _10853 + -mem[64] + 100
                                            mem[_10392] = _10113 * _10346
                                            if _10113 * _10346 / 10^18 > mem[_8051 + 160]:
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_8051 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                mem[_8051 + 160] = _10113 * _10346 / 10^18
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_8051 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                else:
                                    if 0 / 10^18 <= mem[_8051 + 96]:
                                        _10347 = mem[64]
                                        mem[64] = mem[64] + 32
                                        mem[_10347] = _10113
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        _10371 = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                        _10414 = mem[64]
                                        mem[64] = mem[64] + 32
                                        mem[_10414] = 0
                                        _10415 = mem[64]
                                        mem[64] = mem[64] + 32
                                        _10445 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_10445] = 23
                                        mem[_10445 + 32] = 'multiplication overflow'
                                        if not _10113:
                                            mem[_10415] = 0
                                            if 0 / 10^18 > mem[_8051 + 160]:
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_8051 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                mem[_8051 + 160] = 0 / 10^18
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_8051 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                        else:
                                            if not _10371:
                                                mem[_10415] = 0
                                                if 0 / 10^18 > mem[_8051 + 160]:
                                                    if idx >= mem[_1826]:
                                                        revert with 'NH{q', 50
                                                    mem[_8051 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                    mem[_8051 + 160] = 0 / 10^18
                                                    if idx >= mem[_1826]:
                                                        revert with 'NH{q', 50
                                                    mem[_8051 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                            else:
                                                if _10113 and _10371 > -1 / _10113:
                                                    revert with 'NH{q', 17
                                                if not _10113:
                                                    revert with 'NH{q', 18
                                                if _10113 * _10371 / _10113 != _10371:
                                                    _10894 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 23
                                                    idx = 0
                                                    while idx < 23:
                                                        mem[idx + _10894 + 68] = mem[idx + _10445 + 32]
                                                        _9883 = mem[_1826]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_10894 + 91] = 0
                                                    revert with memory
                                                      from mem[64]
                                                       len _10894 + -mem[64] + 100
                                                mem[_10415] = _10113 * _10371
                                                if _10113 * _10371 / 10^18 > mem[_8051 + 160]:
                                                    if idx >= mem[_1826]:
                                                        revert with 'NH{q', 50
                                                    mem[_8051 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                    mem[_8051 + 160] = _10113 * _10371 / 10^18
                                                    if idx >= mem[_1826]:
                                                        revert with 'NH{q', 50
                                                    mem[_8051 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                    else:
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        mem[_8051 + 64] = mem[mem[(32 * idx) + _1826 + 32] + 32]
                                        mem[_8051 + 96] = 0 / 10^18
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        mem[_8051] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                        _10417 = mem[64]
                                        mem[64] = mem[64] + 32
                                        mem[_10417] = _10113
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        _10447 = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                        _10529 = mem[64]
                                        mem[64] = mem[64] + 32
                                        mem[_10529] = 0
                                        _10530 = mem[64]
                                        mem[64] = mem[64] + 32
                                        _10586 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_10586] = 23
                                        mem[_10586 + 32] = 'multiplication overflow'
                                        if not _10113:
                                            mem[_10530] = 0
                                            if 0 / 10^18 > mem[_8051 + 160]:
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_8051 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                mem[_8051 + 160] = 0 / 10^18
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_8051 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                        else:
                                            if not _10447:
                                                mem[_10530] = 0
                                                if 0 / 10^18 > mem[_8051 + 160]:
                                                    if idx >= mem[_1826]:
                                                        revert with 'NH{q', 50
                                                    mem[_8051 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                    mem[_8051 + 160] = 0 / 10^18
                                                    if idx >= mem[_1826]:
                                                        revert with 'NH{q', 50
                                                    mem[_8051 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                            else:
                                                if _10113 and _10447 > -1 / _10113:
                                                    revert with 'NH{q', 17
                                                if not _10113:
                                                    revert with 'NH{q', 18
                                                if _10113 * _10447 / _10113 != _10447:
                                                    _11057 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 23
                                                    idx = 0
                                                    while idx < 23:
                                                        mem[idx + _11057 + 68] = mem[idx + _10586 + 32]
                                                        _9883 = mem[_1826]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_11057 + 91] = 0
                                                    revert with memory
                                                      from mem[64]
                                                       len _11057 + -mem[64] + 100
                                                mem[_10530] = _10113 * _10447
                                                if _10113 * _10447 / 10^18 > mem[_8051 + 160]:
                                                    if idx >= mem[_1826]:
                                                        revert with 'NH{q', 50
                                                    mem[_8051 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                    mem[_8051 + 160] = _10113 * _10447 / 10^18
                                                    if idx >= mem[_1826]:
                                                        revert with 'NH{q', 50
                                                    mem[_8051 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                            else:
                                if _10113 and _10129 > -1 / _10113:
                                    revert with 'NH{q', 17
                                if not _10113:
                                    revert with 'NH{q', 18
                                if _10113 * _10129 / _10113 != _10129:
                                    _10249 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 23
                                    idx = 0
                                    while idx < 23:
                                        mem[idx + _10249 + 68] = mem[idx + _10157 + 32]
                                        _9883 = mem[_1826]
                                        idx = idx + 32
                                        continue 
                                    mem[_10249 + 91] = 0
                                    revert with memory
                                      from mem[64]
                                       len _10249 + -mem[64] + 100
                                mem[_10148] = _10113 * _10129
                                if _10001 <= 0:
                                    _10482 = mem[64]
                                    mem[64] = mem[64] + 32
                                    mem[_10482] = _10113
                                    if idx >= mem[_1826]:
                                        revert with 'NH{q', 50
                                    _10525 = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                    _10636 = mem[64]
                                    mem[64] = mem[64] + 32
                                    mem[_10636] = 0
                                    _10637 = mem[64]
                                    mem[64] = mem[64] + 32
                                    _10684 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_10684] = 23
                                    mem[_10684 + 32] = 'multiplication overflow'
                                    if not _10113:
                                        mem[_10637] = 0
                                        if 0 / 10^18 > mem[_8051 + 160]:
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_8051 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                            mem[_8051 + 160] = 0 / 10^18
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_8051 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                    else:
                                        if not _10525:
                                            mem[_10637] = 0
                                            if 0 / 10^18 > mem[_8051 + 160]:
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_8051 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                mem[_8051 + 160] = 0 / 10^18
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_8051 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                        else:
                                            if _10113 and _10525 > -1 / _10113:
                                                revert with 'NH{q', 17
                                            if not _10113:
                                                revert with 'NH{q', 18
                                            if _10113 * _10525 / _10113 != _10525:
                                                _11159 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 23
                                                idx = 0
                                                while idx < 23:
                                                    mem[idx + _11159 + 68] = mem[idx + _10684 + 32]
                                                    _9883 = mem[_1826]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_11159 + 91] = 0
                                                revert with memory
                                                  from mem[64]
                                                   len _11159 + -mem[64] + 100
                                            mem[_10637] = _10113 * _10525
                                            if _10113 * _10525 / 10^18 > mem[_8051 + 160]:
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_8051 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                mem[_8051 + 160] = _10113 * _10525 / 10^18
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_8051 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                else:
                                    if _10113 * _10129 / 10^18 <= mem[_8051 + 96]:
                                        _10526 = mem[64]
                                        mem[64] = mem[64] + 32
                                        mem[_10526] = _10113
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        _10582 = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                        _10685 = mem[64]
                                        mem[64] = mem[64] + 32
                                        mem[_10685] = 0
                                        _10686 = mem[64]
                                        mem[64] = mem[64] + 32
                                        _10732 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_10732] = 23
                                        mem[_10732 + 32] = 'multiplication overflow'
                                        if not _10113:
                                            mem[_10686] = 0
                                            if 0 / 10^18 > mem[_8051 + 160]:
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_8051 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                mem[_8051 + 160] = 0 / 10^18
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_8051 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                        else:
                                            if not _10582:
                                                mem[_10686] = 0
                                                if 0 / 10^18 > mem[_8051 + 160]:
                                                    if idx >= mem[_1826]:
                                                        revert with 'NH{q', 50
                                                    mem[_8051 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                    mem[_8051 + 160] = 0 / 10^18
                                                    if idx >= mem[_1826]:
                                                        revert with 'NH{q', 50
                                                    mem[_8051 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                            else:
                                                if _10113 and _10582 > -1 / _10113:
                                                    revert with 'NH{q', 17
                                                if not _10113:
                                                    revert with 'NH{q', 18
                                                if _10113 * _10582 / _10113 != _10582:
                                                    _11209 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 23
                                                    idx = 0
                                                    while idx < 23:
                                                        mem[idx + _11209 + 68] = mem[idx + _10732 + 32]
                                                        _9883 = mem[_1826]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_11209 + 91] = 0
                                                    revert with memory
                                                      from mem[64]
                                                       len _11209 + -mem[64] + 100
                                                mem[_10686] = _10113 * _10582
                                                if _10113 * _10582 / 10^18 > mem[_8051 + 160]:
                                                    if idx >= mem[_1826]:
                                                        revert with 'NH{q', 50
                                                    mem[_8051 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                    mem[_8051 + 160] = _10113 * _10582 / 10^18
                                                    if idx >= mem[_1826]:
                                                        revert with 'NH{q', 50
                                                    mem[_8051 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                    else:
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        mem[_8051 + 64] = mem[mem[(32 * idx) + _1826 + 32] + 32]
                                        mem[_8051 + 96] = _10113 * _10129 / 10^18
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        mem[_8051] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                        _10688 = mem[64]
                                        mem[64] = mem[64] + 32
                                        mem[_10688] = _10113
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        _10734 = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                        _10810 = mem[64]
                                        mem[64] = mem[64] + 32
                                        mem[_10810] = 0
                                        _10811 = mem[64]
                                        mem[64] = mem[64] + 32
                                        _10852 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_10852] = 23
                                        mem[_10852 + 32] = 'multiplication overflow'
                                        if not _10113:
                                            mem[_10811] = 0
                                            if 0 / 10^18 > mem[_8051 + 160]:
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_8051 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                mem[_8051 + 160] = 0 / 10^18
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_8051 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                        else:
                                            if not _10734:
                                                mem[_10811] = 0
                                                if 0 / 10^18 > mem[_8051 + 160]:
                                                    if idx >= mem[_1826]:
                                                        revert with 'NH{q', 50
                                                    mem[_8051 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                    mem[_8051 + 160] = 0 / 10^18
                                                    if idx >= mem[_1826]:
                                                        revert with 'NH{q', 50
                                                    mem[_8051 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                            else:
                                                if _10113 and _10734 > -1 / _10113:
                                                    revert with 'NH{q', 17
                                                if not _10113:
                                                    revert with 'NH{q', 18
                                                if _10113 * _10734 / _10113 != _10734:
                                                    _11408 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 23
                                                    idx = 0
                                                    while idx < 23:
                                                        mem[idx + _11408 + 68] = mem[idx + _10852 + 32]
                                                        _9883 = mem[_1826]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_11408 + 91] = 0
                                                    revert with memory
                                                      from mem[64]
                                                       len _11408 + -mem[64] + 100
                                                mem[_10811] = _10113 * _10734
                                                if _10113 * _10734 / 10^18 > mem[_8051 + 160]:
                                                    if idx >= mem[_1826]:
                                                        revert with 'NH{q', 50
                                                    mem[_8051 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                    mem[_8051 + 160] = _10113 * _10734 / 10^18
                                                    if idx >= mem[_1826]:
                                                        revert with 'NH{q', 50
                                                    mem[_8051 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
            if idx == -1:
                revert with 'NH{q', 17
            _9883 = mem[_1826]
            idx = idx + 1
            continue 
        _9885 = mem[_8051 + 32]
        _9886 = mem[_8051]
        _9887 = mem[_8051 + 128]
        mem[224] = mem[_8051 + 160]
        mem[192] = _9887
        mem[160] = address(_9886)
        mem[128] = address(_9885)
        mem[mem[64]] = mem[108 len 20]
        mem[mem[64] + 32] = address(_9885)
        mem[mem[64] + 64] = address(_9886)
        mem[mem[64] + 96] = _9887
        mem[mem[64] + 128] = mem[224]
        mem[mem[64] + 160] = bool(mem[256])
        return mem[mem[64]], address(_9885), address(_9886), _9887, mem[mem[64] + 128 len 64]
    mem[64] = _1826 + (32 * _24) + 288
    mem[_1826 + (32 * _24) + 160] = 0
    mem[_1826 + (32 * _24) + 192] = 0
    mem[_1826 + (32 * _24) + 224] = 0
    mem[_1826 + (32 * _24) + 256] = 0
    mem[var45002] = var45001
    if not var45003 - 1:
        idx = 0
        while idx < _24:
            if idx >= mem[(4 * ceil32(return_data.size)) + 288]:
                revert with 'NH{q', 50
            _12517 = mem[(32 * idx) + (4 * ceil32(return_data.size)) + 320]
            mem[mem[64] + 4] = address(arg2)
            staticcall address(_12517).borrowBalanceStored(address arg1) with:
                    gas gas_remaining wei
                   args address(arg2)
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _12520 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _12569 = mem[_12520]
            _12576 = mem[64]
            mem[64] = mem[64] + 128
            if idx >= mem[(4 * ceil32(return_data.size)) + 288]:
                revert with 'NH{q', 50
            mem[_12576] = mem[(32 * idx) + (4 * ceil32(return_data.size)) + 332 len 20]
            if idx >= mem[(4 * ceil32(return_data.size)) + 288]:
                revert with 'NH{q', 50
            _12587 = mem[(32 * idx) + (4 * ceil32(return_data.size)) + 320]
            mem[mem[64] + 4] = address(arg2)
            staticcall address(_12587).0x70a08231 with:
                    gas gas_remaining wei
                   args address(arg2)
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _12612 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _12627 = mem[_12612]
            if mem[_12612] <= 0:
                mem[_12576 + 32] = 0
                mem[_12576 + 64] = _12569
                _12658 = mem[64]
                mem[64] = mem[64] + 32
                mem[_12658] = ext_call.return_data[0]
                _12666 = mem[64]
                mem[64] = mem[64] + 32
                mem[_12666] = 0
                _12667 = mem[64]
                mem[64] = mem[64] + 32
                _12672 = mem[64]
                mem[64] = mem[64] + 64
                mem[_12672] = 23
                mem[_12672 + 32] = 'multiplication overflow'
                if not ext_call.return_data[0]:
                    mem[_12667] = 0
                    mem[_12576 + 96] = 0 / 10^18
                    if idx >= mem[_1826]:
                        revert with 'NH{q', 50
                    mem[(32 * idx) + _1826 + 32] = _12576
                    if idx == -1:
                        revert with 'NH{q', 17
                    idx = idx + 1
                    continue 
                if not _12569:
                    mem[_12667] = 0
                    mem[_12576 + 96] = 0 / 10^18
                    if idx >= mem[_1826]:
                        revert with 'NH{q', 50
                    mem[(32 * idx) + _1826 + 32] = _12576
                    if idx == -1:
                        revert with 'NH{q', 17
                    idx = idx + 1
                    continue 
                if ext_call.return_data[0] and _12569 > -1 / ext_call.return_data[0]:
                    revert with 'NH{q', 17
                if not ext_call.return_data[0]:
                    revert with 'NH{q', 18
                if ext_call.return_data[0] * _12569 / ext_call.return_data[0] == _12569:
                    mem[_12667] = ext_call.return_data[0] * _12569
                    mem[_12576 + 96] = ext_call.return_data[0] * _12569 / 10^18
                    if idx >= mem[_1826]:
                        revert with 'NH{q', 50
                    mem[(32 * idx) + _1826 + 32] = _12576
                    if idx == -1:
                        revert with 'NH{q', 17
                    idx = idx + 1
                    continue 
                _12717 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 23
                idx = 0
                while idx < 23:
                    mem[idx + _12717 + 68] = mem[idx + _12672 + 32]
                    idx = idx + 32
                    continue 
                mem[_12717 + 91] = 0
                revert with memory
                  from mem[64]
                   len _12717 + -mem[64] + 100
            _12644 = mem[64]
            mem[64] = mem[64] + 32
            staticcall address(_12587).exchangeRateStored() with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _12654 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[_12644] = mem[_12654]
            _12677 = mem[64]
            mem[64] = mem[64] + 32
            mem[_12677] = 0
            _12678 = mem[64]
            mem[64] = mem[64] + 32
            _12679 = mem[_12644]
            _12683 = mem[64]
            mem[64] = mem[64] + 64
            mem[_12683] = 23
            mem[_12683 + 32] = 'multiplication overflow'
            if not _12679:
                mem[_12678] = 0
                mem[_12576 + 32] = 0 / 10^18
                mem[_12576 + 64] = _12569
                _12773 = mem[64]
                mem[64] = mem[64] + 32
                mem[_12773] = ext_call.return_data[0]
                _12790 = mem[64]
                mem[64] = mem[64] + 32
                mem[_12790] = 0
                _12791 = mem[64]
                mem[64] = mem[64] + 32
                _12800 = mem[64]
                mem[64] = mem[64] + 64
                mem[_12800] = 23
                mem[_12800 + 32] = 'multiplication overflow'
                if not ext_call.return_data[0]:
                    mem[_12791] = 0
                    mem[_12576 + 96] = 0 / 10^18
                    if idx >= mem[_1826]:
                        revert with 'NH{q', 50
                    mem[(32 * idx) + _1826 + 32] = _12576
                    if idx == -1:
                        revert with 'NH{q', 17
                    idx = idx + 1
                    continue 
                if not _12569:
                    mem[_12791] = 0
                    mem[_12576 + 96] = 0 / 10^18
                    if idx >= mem[_1826]:
                        revert with 'NH{q', 50
                    mem[(32 * idx) + _1826 + 32] = _12576
                    if idx == -1:
                        revert with 'NH{q', 17
                    idx = idx + 1
                    continue 
                if ext_call.return_data[0] and _12569 > -1 / ext_call.return_data[0]:
                    revert with 'NH{q', 17
                if not ext_call.return_data[0]:
                    revert with 'NH{q', 18
                if ext_call.return_data[0] * _12569 / ext_call.return_data[0] == _12569:
                    mem[_12791] = ext_call.return_data[0] * _12569
                    mem[_12576 + 96] = ext_call.return_data[0] * _12569 / 10^18
                    if idx >= mem[_1826]:
                        revert with 'NH{q', 50
                    mem[(32 * idx) + _1826 + 32] = _12576
                    if idx == -1:
                        revert with 'NH{q', 17
                    idx = idx + 1
                    continue 
                _12849 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 23
                idx = 0
                while idx < 23:
                    mem[idx + _12849 + 68] = mem[idx + _12800 + 32]
                    idx = idx + 32
                    continue 
                mem[_12849 + 91] = 0
                revert with memory
                  from mem[64]
                   len _12849 + -mem[64] + 100
            if not _12627:
                mem[_12678] = 0
                mem[_12576 + 32] = 0 / 10^18
                mem[_12576 + 64] = _12569
                _12784 = mem[64]
                mem[64] = mem[64] + 32
                mem[_12784] = ext_call.return_data[0]
                _12801 = mem[64]
                mem[64] = mem[64] + 32
                mem[_12801] = 0
                _12802 = mem[64]
                mem[64] = mem[64] + 32
                _12808 = mem[64]
                mem[64] = mem[64] + 64
                mem[_12808] = 23
                mem[_12808 + 32] = 'multiplication overflow'
                if not ext_call.return_data[0]:
                    mem[_12802] = 0
                    mem[_12576 + 96] = 0 / 10^18
                    if idx >= mem[_1826]:
                        revert with 'NH{q', 50
                    mem[(32 * idx) + _1826 + 32] = _12576
                    if idx == -1:
                        revert with 'NH{q', 17
                    idx = idx + 1
                    continue 
                if not _12569:
                    mem[_12802] = 0
                    mem[_12576 + 96] = 0 / 10^18
                    if idx >= mem[_1826]:
                        revert with 'NH{q', 50
                    mem[(32 * idx) + _1826 + 32] = _12576
                    if idx == -1:
                        revert with 'NH{q', 17
                    idx = idx + 1
                    continue 
                if ext_call.return_data[0] and _12569 > -1 / ext_call.return_data[0]:
                    revert with 'NH{q', 17
                if not ext_call.return_data[0]:
                    revert with 'NH{q', 18
                if ext_call.return_data[0] * _12569 / ext_call.return_data[0] == _12569:
                    mem[_12802] = ext_call.return_data[0] * _12569
                    mem[_12576 + 96] = ext_call.return_data[0] * _12569 / 10^18
                    if idx >= mem[_1826]:
                        revert with 'NH{q', 50
                    mem[(32 * idx) + _1826 + 32] = _12576
                    if idx == -1:
                        revert with 'NH{q', 17
                    idx = idx + 1
                    continue 
                _12857 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 23
                idx = 0
                while idx < 23:
                    mem[idx + _12857 + 68] = mem[idx + _12808 + 32]
                    idx = idx + 32
                    continue 
                mem[_12857 + 91] = 0
                revert with memory
                  from mem[64]
                   len _12857 + -mem[64] + 100
            if _12679 and _12627 > -1 / _12679:
                revert with 'NH{q', 17
            if not _12679:
                revert with 'NH{q', 18
            if _12679 * _12627 / _12679 != _12627:
                _12728 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 23
                idx = 0
                while idx < 23:
                    mem[idx + _12728 + 68] = mem[idx + _12683 + 32]
                    idx = idx + 32
                    continue 
                mem[_12728 + 91] = 0
                revert with memory
                  from mem[64]
                   len _12728 + -mem[64] + 100
            mem[_12678] = _12679 * _12627
            mem[_12576 + 32] = _12679 * _12627 / 10^18
            mem[_12576 + 64] = _12569
            _12824 = mem[64]
            mem[64] = mem[64] + 32
            mem[_12824] = ext_call.return_data[0]
            _12828 = mem[64]
            mem[64] = mem[64] + 32
            mem[_12828] = 0
            _12829 = mem[64]
            mem[64] = mem[64] + 32
            _12834 = mem[64]
            mem[64] = mem[64] + 64
            mem[_12834] = 23
            mem[_12834 + 32] = 'multiplication overflow'
            if not ext_call.return_data[0]:
                mem[_12829] = 0
                mem[_12576 + 96] = 0 / 10^18
                if idx >= mem[_1826]:
                    revert with 'NH{q', 50
                mem[(32 * idx) + _1826 + 32] = _12576
                if idx == -1:
                    revert with 'NH{q', 17
                idx = idx + 1
                continue 
            if not _12569:
                mem[_12829] = 0
                mem[_12576 + 96] = 0 / 10^18
                if idx >= mem[_1826]:
                    revert with 'NH{q', 50
                mem[(32 * idx) + _1826 + 32] = _12576
                if idx == -1:
                    revert with 'NH{q', 17
                idx = idx + 1
                continue 
            if ext_call.return_data[0] and _12569 > -1 / ext_call.return_data[0]:
                revert with 'NH{q', 17
            if not ext_call.return_data[0]:
                revert with 'NH{q', 18
            if ext_call.return_data[0] * _12569 / ext_call.return_data[0] == _12569:
                mem[_12829] = ext_call.return_data[0] * _12569
                mem[_12576 + 96] = ext_call.return_data[0] * _12569 / 10^18
                if idx >= mem[_1826]:
                    revert with 'NH{q', 50
                mem[(32 * idx) + _1826 + 32] = _12576
                if idx == -1:
                    revert with 'NH{q', 17
                idx = idx + 1
                continue 
            _12989 = mem[64]
            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = 32
            mem[mem[64] + 36] = 23
            idx = 0
            while idx < 23:
                mem[idx + _12989 + 68] = mem[idx + _12834 + 32]
                idx = idx + 32
                continue 
            mem[_12989 + 91] = 0
            revert with memory
              from mem[64]
               len _12989 + -mem[64] + 100
        _12516 = mem[64]
        mem[64] = mem[64] + 192
        mem[_12516] = 0
        mem[_12516 + 32] = 0
        mem[_12516 + 64] = 0
        mem[_12516 + 96] = 0
        mem[_12516 + 128] = 0
        mem[_12516 + 160] = 0
        _14348 = mem[_1826]
        idx = 0
        while idx < _14348:
            if idx >= mem[_1826]:
                revert with 'NH{q', 50
            if idx >= mem[_1826]:
                revert with 'NH{q', 50
            if mem[mem[(32 * idx) + _1826 + 32] + 32] > 0:
                staticcall address(arg1).markets(address arg1) with:
                        gas gas_remaining wei
                       args address(mem[mem[(32 * idx) + _1826 + 32]])
                mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _14396 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 96
                require mem[_14396] == bool(mem[_14396])
                _14440 = mem[_14396 + 32]
                require mem[_14396 + 64] == bool(mem[_14396 + 64])
                if mem[_14396]:
                    staticcall address(arg1).oracle() with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _14503 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _14515 = mem[_14503]
                    require mem[_14503] == mem[_14503 + 12 len 20]
                    if idx >= mem[_1826]:
                        revert with 'NH{q', 50
                    _14546 = mem[mem[(32 * idx) + _1826 + 32]]
                    mem[mem[64] + 4] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                    staticcall address(_14515).getUnderlyingPrice(address arg1) with:
                            gas gas_remaining wei
                           args address(_14546)
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _14556 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _14568 = mem[_14556]
                    _14573 = mem[64]
                    mem[64] = mem[64] + 32
                    mem[_14573] = _14568
                    if idx >= mem[_1826]:
                        revert with 'NH{q', 50
                    _14577 = mem[mem[(32 * idx) + _1826 + 32] + 32]
                    _14590 = mem[64]
                    mem[64] = mem[64] + 32
                    mem[_14590] = 0
                    _14591 = mem[64]
                    mem[64] = mem[64] + 32
                    _14601 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_14601] = 23
                    mem[_14601 + 32] = 'multiplication overflow'
                    if not _14568:
                        mem[_14591] = 0
                        if _14440 <= 0:
                            _14723 = mem[64]
                            mem[64] = mem[64] + 32
                            mem[_14723] = _14568
                            if idx >= mem[_1826]:
                                revert with 'NH{q', 50
                            _14735 = mem[mem[(32 * idx) + _1826 + 32] + 96]
                            _14770 = mem[64]
                            mem[64] = mem[64] + 32
                            mem[_14770] = 0
                            _14771 = mem[64]
                            mem[64] = mem[64] + 32
                            _14794 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_14794] = 23
                            mem[_14794 + 32] = 'multiplication overflow'
                            if not _14568:
                                mem[_14771] = 0
                                if 0 / 10^18 > mem[_12516 + 160]:
                                    if idx >= mem[_1826]:
                                        revert with 'NH{q', 50
                                    mem[_12516 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                    mem[_12516 + 160] = 0 / 10^18
                                    if idx >= mem[_1826]:
                                        revert with 'NH{q', 50
                                    mem[_12516 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                            else:
                                if not _14735:
                                    mem[_14771] = 0
                                    if 0 / 10^18 > mem[_12516 + 160]:
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        mem[_12516 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                        mem[_12516 + 160] = 0 / 10^18
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        mem[_12516 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                else:
                                    if _14568 and _14735 > -1 / _14568:
                                        revert with 'NH{q', 17
                                    if not _14568:
                                        revert with 'NH{q', 18
                                    if _14568 * _14735 / _14568 != _14735:
                                        _15190 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 23
                                        idx = 0
                                        while idx < 23:
                                            mem[idx + _15190 + 68] = mem[idx + _14794 + 32]
                                            _14348 = mem[_1826]
                                            idx = idx + 32
                                            continue 
                                        mem[_15190 + 91] = 0
                                        revert with memory
                                          from mem[64]
                                           len _15190 + -mem[64] + 100
                                    mem[_14771] = _14568 * _14735
                                    if _14568 * _14735 / 10^18 > mem[_12516 + 160]:
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        mem[_12516 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                        mem[_12516 + 160] = _14568 * _14735 / 10^18
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        mem[_12516 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                        else:
                            if 0 / 10^18 <= mem[_12516 + 96]:
                                _14736 = mem[64]
                                mem[64] = mem[64] + 32
                                mem[_14736] = _14568
                                if idx >= mem[_1826]:
                                    revert with 'NH{q', 50
                                _14750 = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                _14795 = mem[64]
                                mem[64] = mem[64] + 32
                                mem[_14795] = 0
                                _14796 = mem[64]
                                mem[64] = mem[64] + 32
                                _14821 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_14821] = 23
                                mem[_14821 + 32] = 'multiplication overflow'
                                if not _14568:
                                    mem[_14796] = 0
                                    if 0 / 10^18 > mem[_12516 + 160]:
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        mem[_12516 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                        mem[_12516 + 160] = 0 / 10^18
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        mem[_12516 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                else:
                                    if not _14750:
                                        mem[_14796] = 0
                                        if 0 / 10^18 > mem[_12516 + 160]:
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_12516 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                            mem[_12516 + 160] = 0 / 10^18
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_12516 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                    else:
                                        if _14568 and _14750 > -1 / _14568:
                                            revert with 'NH{q', 17
                                        if not _14568:
                                            revert with 'NH{q', 18
                                        if _14568 * _14750 / _14568 != _14750:
                                            _15234 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 23
                                            idx = 0
                                            while idx < 23:
                                                mem[idx + _15234 + 68] = mem[idx + _14821 + 32]
                                                _14348 = mem[_1826]
                                                idx = idx + 32
                                                continue 
                                            mem[_15234 + 91] = 0
                                            revert with memory
                                              from mem[64]
                                               len _15234 + -mem[64] + 100
                                        mem[_14796] = _14568 * _14750
                                        if _14568 * _14750 / 10^18 > mem[_12516 + 160]:
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_12516 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                            mem[_12516 + 160] = _14568 * _14750 / 10^18
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_12516 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                            else:
                                if idx >= mem[_1826]:
                                    revert with 'NH{q', 50
                                mem[_12516 + 64] = mem[mem[(32 * idx) + _1826 + 32] + 32]
                                mem[_12516 + 96] = 0 / 10^18
                                if idx >= mem[_1826]:
                                    revert with 'NH{q', 50
                                mem[_12516] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                _14798 = mem[64]
                                mem[64] = mem[64] + 32
                                mem[_14798] = _14568
                                if idx >= mem[_1826]:
                                    revert with 'NH{q', 50
                                _14823 = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                _14870 = mem[64]
                                mem[64] = mem[64] + 32
                                mem[_14870] = 0
                                _14871 = mem[64]
                                mem[64] = mem[64] + 32
                                _14900 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_14900] = 23
                                mem[_14900 + 32] = 'multiplication overflow'
                                if not _14568:
                                    mem[_14871] = 0
                                    if 0 / 10^18 > mem[_12516 + 160]:
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        mem[_12516 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                        mem[_12516 + 160] = 0 / 10^18
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        mem[_12516 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                else:
                                    if not _14823:
                                        mem[_14871] = 0
                                        if 0 / 10^18 > mem[_12516 + 160]:
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_12516 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                            mem[_12516 + 160] = 0 / 10^18
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_12516 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                    else:
                                        if _14568 and _14823 > -1 / _14568:
                                            revert with 'NH{q', 17
                                        if not _14568:
                                            revert with 'NH{q', 18
                                        if _14568 * _14823 / _14568 != _14823:
                                            _15352 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 23
                                            idx = 0
                                            while idx < 23:
                                                mem[idx + _15352 + 68] = mem[idx + _14900 + 32]
                                                _14348 = mem[_1826]
                                                idx = idx + 32
                                                continue 
                                            mem[_15352 + 91] = 0
                                            revert with memory
                                              from mem[64]
                                               len _15352 + -mem[64] + 100
                                        mem[_14871] = _14568 * _14823
                                        if _14568 * _14823 / 10^18 > mem[_12516 + 160]:
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_12516 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                            mem[_12516 + 160] = _14568 * _14823 / 10^18
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_12516 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                    else:
                        if not _14577:
                            mem[_14591] = 0
                            if _14440 <= 0:
                                _14740 = mem[64]
                                mem[64] = mem[64] + 32
                                mem[_14740] = _14568
                                if idx >= mem[_1826]:
                                    revert with 'NH{q', 50
                                _14755 = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                _14800 = mem[64]
                                mem[64] = mem[64] + 32
                                mem[_14800] = 0
                                _14801 = mem[64]
                                mem[64] = mem[64] + 32
                                _14824 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_14824] = 23
                                mem[_14824 + 32] = 'multiplication overflow'
                                if not _14568:
                                    mem[_14801] = 0
                                    if 0 / 10^18 > mem[_12516 + 160]:
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        mem[_12516 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                        mem[_12516 + 160] = 0 / 10^18
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        mem[_12516 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                else:
                                    if not _14755:
                                        mem[_14801] = 0
                                        if 0 / 10^18 > mem[_12516 + 160]:
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_12516 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                            mem[_12516 + 160] = 0 / 10^18
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_12516 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                    else:
                                        if _14568 and _14755 > -1 / _14568:
                                            revert with 'NH{q', 17
                                        if not _14568:
                                            revert with 'NH{q', 18
                                        if _14568 * _14755 / _14568 != _14755:
                                            _15237 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 23
                                            idx = 0
                                            while idx < 23:
                                                mem[idx + _15237 + 68] = mem[idx + _14824 + 32]
                                                _14348 = mem[_1826]
                                                idx = idx + 32
                                                continue 
                                            mem[_15237 + 91] = 0
                                            revert with memory
                                              from mem[64]
                                               len _15237 + -mem[64] + 100
                                        mem[_14801] = _14568 * _14755
                                        if _14568 * _14755 / 10^18 > mem[_12516 + 160]:
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_12516 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                            mem[_12516 + 160] = _14568 * _14755 / 10^18
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_12516 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                            else:
                                if 0 / 10^18 <= mem[_12516 + 96]:
                                    _14756 = mem[64]
                                    mem[64] = mem[64] + 32
                                    mem[_14756] = _14568
                                    if idx >= mem[_1826]:
                                        revert with 'NH{q', 50
                                    _14776 = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                    _14825 = mem[64]
                                    mem[64] = mem[64] + 32
                                    mem[_14825] = 0
                                    _14826 = mem[64]
                                    mem[64] = mem[64] + 32
                                    _14847 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_14847] = 23
                                    mem[_14847 + 32] = 'multiplication overflow'
                                    if not _14568:
                                        mem[_14826] = 0
                                        if 0 / 10^18 > mem[_12516 + 160]:
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_12516 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                            mem[_12516 + 160] = 0 / 10^18
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_12516 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                    else:
                                        if not _14776:
                                            mem[_14826] = 0
                                            if 0 / 10^18 > mem[_12516 + 160]:
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_12516 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                mem[_12516 + 160] = 0 / 10^18
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_12516 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                        else:
                                            if _14568 and _14776 > -1 / _14568:
                                                revert with 'NH{q', 17
                                            if not _14568:
                                                revert with 'NH{q', 18
                                            if _14568 * _14776 / _14568 != _14776:
                                                _15272 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 23
                                                idx = 0
                                                while idx < 23:
                                                    mem[idx + _15272 + 68] = mem[idx + _14847 + 32]
                                                    _14348 = mem[_1826]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_15272 + 91] = 0
                                                revert with memory
                                                  from mem[64]
                                                   len _15272 + -mem[64] + 100
                                            mem[_14826] = _14568 * _14776
                                            if _14568 * _14776 / 10^18 > mem[_12516 + 160]:
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_12516 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                mem[_12516 + 160] = _14568 * _14776 / 10^18
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_12516 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                else:
                                    if idx >= mem[_1826]:
                                        revert with 'NH{q', 50
                                    mem[_12516 + 64] = mem[mem[(32 * idx) + _1826 + 32] + 32]
                                    mem[_12516 + 96] = 0 / 10^18
                                    if idx >= mem[_1826]:
                                        revert with 'NH{q', 50
                                    mem[_12516] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                    _14828 = mem[64]
                                    mem[64] = mem[64] + 32
                                    mem[_14828] = _14568
                                    if idx >= mem[_1826]:
                                        revert with 'NH{q', 50
                                    _14849 = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                    _14906 = mem[64]
                                    mem[64] = mem[64] + 32
                                    mem[_14906] = 0
                                    _14907 = mem[64]
                                    mem[64] = mem[64] + 32
                                    _14943 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_14943] = 23
                                    mem[_14943 + 32] = 'multiplication overflow'
                                    if not _14568:
                                        mem[_14907] = 0
                                        if 0 / 10^18 > mem[_12516 + 160]:
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_12516 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                            mem[_12516 + 160] = 0 / 10^18
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_12516 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                    else:
                                        if not _14849:
                                            mem[_14907] = 0
                                            if 0 / 10^18 > mem[_12516 + 160]:
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_12516 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                mem[_12516 + 160] = 0 / 10^18
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_12516 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                        else:
                                            if _14568 and _14849 > -1 / _14568:
                                                revert with 'NH{q', 17
                                            if not _14568:
                                                revert with 'NH{q', 18
                                            if _14568 * _14849 / _14568 != _14849:
                                                _15403 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 23
                                                idx = 0
                                                while idx < 23:
                                                    mem[idx + _15403 + 68] = mem[idx + _14943 + 32]
                                                    _14348 = mem[_1826]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_15403 + 91] = 0
                                                revert with memory
                                                  from mem[64]
                                                   len _15403 + -mem[64] + 100
                                            mem[_14907] = _14568 * _14849
                                            if _14568 * _14849 / 10^18 > mem[_12516 + 160]:
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_12516 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                mem[_12516 + 160] = _14568 * _14849 / 10^18
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_12516 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                        else:
                            if _14568 and _14577 > -1 / _14568:
                                revert with 'NH{q', 17
                            if not _14568:
                                revert with 'NH{q', 18
                            if _14568 * _14577 / _14568 != _14577:
                                _14701 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 23
                                idx = 0
                                while idx < 23:
                                    mem[idx + _14701 + 68] = mem[idx + _14601 + 32]
                                    _14348 = mem[_1826]
                                    idx = idx + 32
                                    continue 
                                mem[_14701 + 91] = 0
                                revert with memory
                                  from mem[64]
                                   len _14701 + -mem[64] + 100
                            mem[_14591] = _14568 * _14577
                            if _14440 <= 0:
                                _14873 = mem[64]
                                mem[64] = mem[64] + 32
                                mem[_14873] = _14568
                                if idx >= mem[_1826]:
                                    revert with 'NH{q', 50
                                _14902 = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                _14983 = mem[64]
                                mem[64] = mem[64] + 32
                                mem[_14983] = 0
                                _14984 = mem[64]
                                mem[64] = mem[64] + 32
                                _15040 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_15040] = 23
                                mem[_15040 + 32] = 'multiplication overflow'
                                if not _14568:
                                    mem[_14984] = 0
                                    if 0 / 10^18 > mem[_12516 + 160]:
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        mem[_12516 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                        mem[_12516 + 160] = 0 / 10^18
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        mem[_12516 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                else:
                                    if not _14902:
                                        mem[_14984] = 0
                                        if 0 / 10^18 > mem[_12516 + 160]:
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_12516 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                            mem[_12516 + 160] = 0 / 10^18
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_12516 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                    else:
                                        if _14568 and _14902 > -1 / _14568:
                                            revert with 'NH{q', 17
                                        if not _14568:
                                            revert with 'NH{q', 18
                                        if _14568 * _14902 / _14568 != _14902:
                                            _15494 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 23
                                            idx = 0
                                            while idx < 23:
                                                mem[idx + _15494 + 68] = mem[idx + _15040 + 32]
                                                _14348 = mem[_1826]
                                                idx = idx + 32
                                                continue 
                                            mem[_15494 + 91] = 0
                                            revert with memory
                                              from mem[64]
                                               len _15494 + -mem[64] + 100
                                        mem[_14984] = _14568 * _14902
                                        if _14568 * _14902 / 10^18 > mem[_12516 + 160]:
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_12516 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                            mem[_12516 + 160] = _14568 * _14902 / 10^18
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_12516 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                            else:
                                if _14568 * _14577 / 10^18 <= mem[_12516 + 96]:
                                    _14903 = mem[64]
                                    mem[64] = mem[64] + 32
                                    mem[_14903] = _14568
                                    if idx >= mem[_1826]:
                                        revert with 'NH{q', 50
                                    _14939 = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                    _15041 = mem[64]
                                    mem[64] = mem[64] + 32
                                    mem[_15041] = 0
                                    _15042 = mem[64]
                                    mem[64] = mem[64] + 32
                                    _15097 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_15097] = 23
                                    mem[_15097 + 32] = 'multiplication overflow'
                                    if not _14568:
                                        mem[_15042] = 0
                                        if 0 / 10^18 > mem[_12516 + 160]:
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_12516 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                            mem[_12516 + 160] = 0 / 10^18
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_12516 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                    else:
                                        if not _14939:
                                            mem[_15042] = 0
                                            if 0 / 10^18 > mem[_12516 + 160]:
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_12516 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                mem[_12516 + 160] = 0 / 10^18
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_12516 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                        else:
                                            if _14568 and _14939 > -1 / _14568:
                                                revert with 'NH{q', 17
                                            if not _14568:
                                                revert with 'NH{q', 18
                                            if _14568 * _14939 / _14568 != _14939:
                                                _15548 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 23
                                                idx = 0
                                                while idx < 23:
                                                    mem[idx + _15548 + 68] = mem[idx + _15097 + 32]
                                                    _14348 = mem[_1826]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_15548 + 91] = 0
                                                revert with memory
                                                  from mem[64]
                                                   len _15548 + -mem[64] + 100
                                            mem[_15042] = _14568 * _14939
                                            if _14568 * _14939 / 10^18 > mem[_12516 + 160]:
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_12516 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                mem[_12516 + 160] = _14568 * _14939 / 10^18
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_12516 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                else:
                                    if idx >= mem[_1826]:
                                        revert with 'NH{q', 50
                                    mem[_12516 + 64] = mem[mem[(32 * idx) + _1826 + 32] + 32]
                                    mem[_12516 + 96] = _14568 * _14577 / 10^18
                                    if idx >= mem[_1826]:
                                        revert with 'NH{q', 50
                                    mem[_12516] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                    _15044 = mem[64]
                                    mem[64] = mem[64] + 32
                                    mem[_15044] = _14568
                                    if idx >= mem[_1826]:
                                        revert with 'NH{q', 50
                                    _15099 = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                    _15191 = mem[64]
                                    mem[64] = mem[64] + 32
                                    mem[_15191] = 0
                                    _15192 = mem[64]
                                    mem[64] = mem[64] + 32
                                    _15236 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_15236] = 23
                                    mem[_15236 + 32] = 'multiplication overflow'
                                    if not _14568:
                                        mem[_15192] = 0
                                        if 0 / 10^18 > mem[_12516 + 160]:
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_12516 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                            mem[_12516 + 160] = 0 / 10^18
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_12516 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                    else:
                                        if not _15099:
                                            mem[_15192] = 0
                                            if 0 / 10^18 > mem[_12516 + 160]:
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_12516 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                mem[_12516 + 160] = 0 / 10^18
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_12516 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                        else:
                                            if _14568 and _15099 > -1 / _14568:
                                                revert with 'NH{q', 17
                                            if not _14568:
                                                revert with 'NH{q', 18
                                            if _14568 * _15099 / _14568 != _15099:
                                                _15719 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 23
                                                idx = 0
                                                while idx < 23:
                                                    mem[idx + _15719 + 68] = mem[idx + _15236 + 32]
                                                    _14348 = mem[_1826]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_15719 + 91] = 0
                                                revert with memory
                                                  from mem[64]
                                                   len _15719 + -mem[64] + 100
                                            mem[_15192] = _14568 * _15099
                                            if _14568 * _15099 / 10^18 > mem[_12516 + 160]:
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_12516 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                mem[_12516 + 160] = _14568 * _15099 / 10^18
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_12516 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
            else:
                if mem[mem[(32 * idx) + _1826 + 32] + 64] > 0:
                    if idx >= mem[_1826]:
                        revert with 'NH{q', 50
                    staticcall address(arg1).markets(address arg1) with:
                            gas gas_remaining wei
                           args address(mem[mem[(32 * idx) + _1826 + 32]])
                    mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _14415 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 96
                    require mem[_14415] == bool(mem[_14415])
                    _14466 = mem[_14415 + 32]
                    require mem[_14415 + 64] == bool(mem[_14415 + 64])
                    if mem[_14415]:
                        staticcall address(arg1).oracle() with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _14516 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _14528 = mem[_14516]
                        require mem[_14516] == mem[_14516 + 12 len 20]
                        if idx >= mem[_1826]:
                            revert with 'NH{q', 50
                        _14563 = mem[mem[(32 * idx) + _1826 + 32]]
                        mem[mem[64] + 4] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                        staticcall address(_14528).getUnderlyingPrice(address arg1) with:
                                gas gas_remaining wei
                               args address(_14563)
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _14569 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _14578 = mem[_14569]
                        _14582 = mem[64]
                        mem[64] = mem[64] + 32
                        mem[_14582] = _14578
                        if idx >= mem[_1826]:
                            revert with 'NH{q', 50
                        _14594 = mem[mem[(32 * idx) + _1826 + 32] + 32]
                        _14612 = mem[64]
                        mem[64] = mem[64] + 32
                        mem[_14612] = 0
                        _14613 = mem[64]
                        mem[64] = mem[64] + 32
                        _14622 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_14622] = 23
                        mem[_14622 + 32] = 'multiplication overflow'
                        if not _14578:
                            mem[_14613] = 0
                            if _14466 <= 0:
                                _14759 = mem[64]
                                mem[64] = mem[64] + 32
                                mem[_14759] = _14578
                                if idx >= mem[_1826]:
                                    revert with 'NH{q', 50
                                _14781 = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                _14830 = mem[64]
                                mem[64] = mem[64] + 32
                                mem[_14830] = 0
                                _14831 = mem[64]
                                mem[64] = mem[64] + 32
                                _14850 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_14850] = 23
                                mem[_14850 + 32] = 'multiplication overflow'
                                if not _14578:
                                    mem[_14831] = 0
                                    if 0 / 10^18 > mem[_12516 + 160]:
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        mem[_12516 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                        mem[_12516 + 160] = 0 / 10^18
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        mem[_12516 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                else:
                                    if not _14781:
                                        mem[_14831] = 0
                                        if 0 / 10^18 > mem[_12516 + 160]:
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_12516 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                            mem[_12516 + 160] = 0 / 10^18
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_12516 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                    else:
                                        if _14578 and _14781 > -1 / _14578:
                                            revert with 'NH{q', 17
                                        if not _14578:
                                            revert with 'NH{q', 18
                                        if _14578 * _14781 / _14578 != _14781:
                                            _15274 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 23
                                            idx = 0
                                            while idx < 23:
                                                mem[idx + _15274 + 68] = mem[idx + _14850 + 32]
                                                _14348 = mem[_1826]
                                                idx = idx + 32
                                                continue 
                                            mem[_15274 + 91] = 0
                                            revert with memory
                                              from mem[64]
                                               len _15274 + -mem[64] + 100
                                        mem[_14831] = _14578 * _14781
                                        if _14578 * _14781 / 10^18 > mem[_12516 + 160]:
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_12516 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                            mem[_12516 + 160] = _14578 * _14781 / 10^18
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_12516 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                            else:
                                if 0 / 10^18 <= mem[_12516 + 96]:
                                    _14782 = mem[64]
                                    mem[64] = mem[64] + 32
                                    mem[_14782] = _14578
                                    if idx >= mem[_1826]:
                                        revert with 'NH{q', 50
                                    _14806 = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                    _14851 = mem[64]
                                    mem[64] = mem[64] + 32
                                    mem[_14851] = 0
                                    _14852 = mem[64]
                                    mem[64] = mem[64] + 32
                                    _14875 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_14875] = 23
                                    mem[_14875 + 32] = 'multiplication overflow'
                                    if not _14578:
                                        mem[_14852] = 0
                                        if 0 / 10^18 > mem[_12516 + 160]:
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_12516 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                            mem[_12516 + 160] = 0 / 10^18
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_12516 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                    else:
                                        if not _14806:
                                            mem[_14852] = 0
                                            if 0 / 10^18 > mem[_12516 + 160]:
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_12516 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                mem[_12516 + 160] = 0 / 10^18
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_12516 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                        else:
                                            if _14578 and _14806 > -1 / _14578:
                                                revert with 'NH{q', 17
                                            if not _14578:
                                                revert with 'NH{q', 18
                                            if _14578 * _14806 / _14578 != _14806:
                                                _15315 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 23
                                                idx = 0
                                                while idx < 23:
                                                    mem[idx + _15315 + 68] = mem[idx + _14875 + 32]
                                                    _14348 = mem[_1826]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_15315 + 91] = 0
                                                revert with memory
                                                  from mem[64]
                                                   len _15315 + -mem[64] + 100
                                            mem[_14852] = _14578 * _14806
                                            if _14578 * _14806 / 10^18 > mem[_12516 + 160]:
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_12516 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                mem[_12516 + 160] = _14578 * _14806 / 10^18
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_12516 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                else:
                                    if idx >= mem[_1826]:
                                        revert with 'NH{q', 50
                                    mem[_12516 + 64] = mem[mem[(32 * idx) + _1826 + 32] + 32]
                                    mem[_12516 + 96] = 0 / 10^18
                                    if idx >= mem[_1826]:
                                        revert with 'NH{q', 50
                                    mem[_12516] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                    _14854 = mem[64]
                                    mem[64] = mem[64] + 32
                                    mem[_14854] = _14578
                                    if idx >= mem[_1826]:
                                        revert with 'NH{q', 50
                                    _14877 = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                    _14944 = mem[64]
                                    mem[64] = mem[64] + 32
                                    mem[_14944] = 0
                                    _14945 = mem[64]
                                    mem[64] = mem[64] + 32
                                    _14988 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_14988] = 23
                                    mem[_14988 + 32] = 'multiplication overflow'
                                    if not _14578:
                                        mem[_14945] = 0
                                        if 0 / 10^18 > mem[_12516 + 160]:
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_12516 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                            mem[_12516 + 160] = 0 / 10^18
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_12516 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                    else:
                                        if not _14877:
                                            mem[_14945] = 0
                                            if 0 / 10^18 > mem[_12516 + 160]:
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_12516 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                mem[_12516 + 160] = 0 / 10^18
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_12516 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                        else:
                                            if _14578 and _14877 > -1 / _14578:
                                                revert with 'NH{q', 17
                                            if not _14578:
                                                revert with 'NH{q', 18
                                            if _14578 * _14877 / _14578 != _14877:
                                                _15458 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 23
                                                idx = 0
                                                while idx < 23:
                                                    mem[idx + _15458 + 68] = mem[idx + _14988 + 32]
                                                    _14348 = mem[_1826]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_15458 + 91] = 0
                                                revert with memory
                                                  from mem[64]
                                                   len _15458 + -mem[64] + 100
                                            mem[_14945] = _14578 * _14877
                                            if _14578 * _14877 / 10^18 > mem[_12516 + 160]:
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_12516 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                mem[_12516 + 160] = _14578 * _14877 / 10^18
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_12516 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                        else:
                            if not _14594:
                                mem[_14613] = 0
                                if _14466 <= 0:
                                    _14786 = mem[64]
                                    mem[64] = mem[64] + 32
                                    mem[_14786] = _14578
                                    if idx >= mem[_1826]:
                                        revert with 'NH{q', 50
                                    _14811 = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                    _14856 = mem[64]
                                    mem[64] = mem[64] + 32
                                    mem[_14856] = 0
                                    _14857 = mem[64]
                                    mem[64] = mem[64] + 32
                                    _14878 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_14878] = 23
                                    mem[_14878 + 32] = 'multiplication overflow'
                                    if not _14578:
                                        mem[_14857] = 0
                                        if 0 / 10^18 > mem[_12516 + 160]:
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_12516 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                            mem[_12516 + 160] = 0 / 10^18
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_12516 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                    else:
                                        if not _14811:
                                            mem[_14857] = 0
                                            if 0 / 10^18 > mem[_12516 + 160]:
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_12516 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                mem[_12516 + 160] = 0 / 10^18
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_12516 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                        else:
                                            if _14578 and _14811 > -1 / _14578:
                                                revert with 'NH{q', 17
                                            if not _14578:
                                                revert with 'NH{q', 18
                                            if _14578 * _14811 / _14578 != _14811:
                                                _15318 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 23
                                                idx = 0
                                                while idx < 23:
                                                    mem[idx + _15318 + 68] = mem[idx + _14878 + 32]
                                                    _14348 = mem[_1826]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_15318 + 91] = 0
                                                revert with memory
                                                  from mem[64]
                                                   len _15318 + -mem[64] + 100
                                            mem[_14857] = _14578 * _14811
                                            if _14578 * _14811 / 10^18 > mem[_12516 + 160]:
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_12516 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                mem[_12516 + 160] = _14578 * _14811 / 10^18
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_12516 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                else:
                                    if 0 / 10^18 <= mem[_12516 + 96]:
                                        _14812 = mem[64]
                                        mem[64] = mem[64] + 32
                                        mem[_14812] = _14578
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        _14836 = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                        _14879 = mem[64]
                                        mem[64] = mem[64] + 32
                                        mem[_14879] = 0
                                        _14880 = mem[64]
                                        mem[64] = mem[64] + 32
                                        _14910 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_14910] = 23
                                        mem[_14910 + 32] = 'multiplication overflow'
                                        if not _14578:
                                            mem[_14880] = 0
                                            if 0 / 10^18 > mem[_12516 + 160]:
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_12516 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                mem[_12516 + 160] = 0 / 10^18
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_12516 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                        else:
                                            if not _14836:
                                                mem[_14880] = 0
                                                if 0 / 10^18 > mem[_12516 + 160]:
                                                    if idx >= mem[_1826]:
                                                        revert with 'NH{q', 50
                                                    mem[_12516 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                    mem[_12516 + 160] = 0 / 10^18
                                                    if idx >= mem[_1826]:
                                                        revert with 'NH{q', 50
                                                    mem[_12516 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                            else:
                                                if _14578 and _14836 > -1 / _14578:
                                                    revert with 'NH{q', 17
                                                if not _14578:
                                                    revert with 'NH{q', 18
                                                if _14578 * _14836 / _14578 != _14836:
                                                    _15359 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 23
                                                    idx = 0
                                                    while idx < 23:
                                                        mem[idx + _15359 + 68] = mem[idx + _14910 + 32]
                                                        _14348 = mem[_1826]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_15359 + 91] = 0
                                                    revert with memory
                                                      from mem[64]
                                                       len _15359 + -mem[64] + 100
                                                mem[_14880] = _14578 * _14836
                                                if _14578 * _14836 / 10^18 > mem[_12516 + 160]:
                                                    if idx >= mem[_1826]:
                                                        revert with 'NH{q', 50
                                                    mem[_12516 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                    mem[_12516 + 160] = _14578 * _14836 / 10^18
                                                    if idx >= mem[_1826]:
                                                        revert with 'NH{q', 50
                                                    mem[_12516 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                    else:
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        mem[_12516 + 64] = mem[mem[(32 * idx) + _1826 + 32] + 32]
                                        mem[_12516 + 96] = 0 / 10^18
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        mem[_12516] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                        _14882 = mem[64]
                                        mem[64] = mem[64] + 32
                                        mem[_14882] = _14578
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        _14912 = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                        _14994 = mem[64]
                                        mem[64] = mem[64] + 32
                                        mem[_14994] = 0
                                        _14995 = mem[64]
                                        mem[64] = mem[64] + 32
                                        _15051 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_15051] = 23
                                        mem[_15051 + 32] = 'multiplication overflow'
                                        if not _14578:
                                            mem[_14995] = 0
                                            if 0 / 10^18 > mem[_12516 + 160]:
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_12516 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                mem[_12516 + 160] = 0 / 10^18
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_12516 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                        else:
                                            if not _14912:
                                                mem[_14995] = 0
                                                if 0 / 10^18 > mem[_12516 + 160]:
                                                    if idx >= mem[_1826]:
                                                        revert with 'NH{q', 50
                                                    mem[_12516 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                    mem[_12516 + 160] = 0 / 10^18
                                                    if idx >= mem[_1826]:
                                                        revert with 'NH{q', 50
                                                    mem[_12516 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                            else:
                                                if _14578 and _14912 > -1 / _14578:
                                                    revert with 'NH{q', 17
                                                if not _14578:
                                                    revert with 'NH{q', 18
                                                if _14578 * _14912 / _14578 != _14912:
                                                    _15522 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 23
                                                    idx = 0
                                                    while idx < 23:
                                                        mem[idx + _15522 + 68] = mem[idx + _15051 + 32]
                                                        _14348 = mem[_1826]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_15522 + 91] = 0
                                                    revert with memory
                                                      from mem[64]
                                                       len _15522 + -mem[64] + 100
                                                mem[_14995] = _14578 * _14912
                                                if _14578 * _14912 / 10^18 > mem[_12516 + 160]:
                                                    if idx >= mem[_1826]:
                                                        revert with 'NH{q', 50
                                                    mem[_12516 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                    mem[_12516 + 160] = _14578 * _14912 / 10^18
                                                    if idx >= mem[_1826]:
                                                        revert with 'NH{q', 50
                                                    mem[_12516 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                            else:
                                if _14578 and _14594 > -1 / _14578:
                                    revert with 'NH{q', 17
                                if not _14578:
                                    revert with 'NH{q', 18
                                if _14578 * _14594 / _14578 != _14594:
                                    _14714 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 23
                                    idx = 0
                                    while idx < 23:
                                        mem[idx + _14714 + 68] = mem[idx + _14622 + 32]
                                        _14348 = mem[_1826]
                                        idx = idx + 32
                                        continue 
                                    mem[_14714 + 91] = 0
                                    revert with memory
                                      from mem[64]
                                       len _14714 + -mem[64] + 100
                                mem[_14613] = _14578 * _14594
                                if _14466 <= 0:
                                    _14947 = mem[64]
                                    mem[64] = mem[64] + 32
                                    mem[_14947] = _14578
                                    if idx >= mem[_1826]:
                                        revert with 'NH{q', 50
                                    _14990 = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                    _15101 = mem[64]
                                    mem[64] = mem[64] + 32
                                    mem[_15101] = 0
                                    _15102 = mem[64]
                                    mem[64] = mem[64] + 32
                                    _15149 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_15149] = 23
                                    mem[_15149 + 32] = 'multiplication overflow'
                                    if not _14578:
                                        mem[_15102] = 0
                                        if 0 / 10^18 > mem[_12516 + 160]:
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_12516 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                            mem[_12516 + 160] = 0 / 10^18
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_12516 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                    else:
                                        if not _14990:
                                            mem[_15102] = 0
                                            if 0 / 10^18 > mem[_12516 + 160]:
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_12516 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                mem[_12516 + 160] = 0 / 10^18
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_12516 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                        else:
                                            if _14578 and _14990 > -1 / _14578:
                                                revert with 'NH{q', 17
                                            if not _14578:
                                                revert with 'NH{q', 18
                                            if _14578 * _14990 / _14578 != _14990:
                                                _15624 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 23
                                                idx = 0
                                                while idx < 23:
                                                    mem[idx + _15624 + 68] = mem[idx + _15149 + 32]
                                                    _14348 = mem[_1826]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_15624 + 91] = 0
                                                revert with memory
                                                  from mem[64]
                                                   len _15624 + -mem[64] + 100
                                            mem[_15102] = _14578 * _14990
                                            if _14578 * _14990 / 10^18 > mem[_12516 + 160]:
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_12516 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                mem[_12516 + 160] = _14578 * _14990 / 10^18
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_12516 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                else:
                                    if _14578 * _14594 / 10^18 <= mem[_12516 + 96]:
                                        _14991 = mem[64]
                                        mem[64] = mem[64] + 32
                                        mem[_14991] = _14578
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        _15047 = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                        _15150 = mem[64]
                                        mem[64] = mem[64] + 32
                                        mem[_15150] = 0
                                        _15151 = mem[64]
                                        mem[64] = mem[64] + 32
                                        _15197 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_15197] = 23
                                        mem[_15197 + 32] = 'multiplication overflow'
                                        if not _14578:
                                            mem[_15151] = 0
                                            if 0 / 10^18 > mem[_12516 + 160]:
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_12516 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                mem[_12516 + 160] = 0 / 10^18
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_12516 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                        else:
                                            if not _15047:
                                                mem[_15151] = 0
                                                if 0 / 10^18 > mem[_12516 + 160]:
                                                    if idx >= mem[_1826]:
                                                        revert with 'NH{q', 50
                                                    mem[_12516 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                    mem[_12516 + 160] = 0 / 10^18
                                                    if idx >= mem[_1826]:
                                                        revert with 'NH{q', 50
                                                    mem[_12516 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                            else:
                                                if _14578 and _15047 > -1 / _14578:
                                                    revert with 'NH{q', 17
                                                if not _14578:
                                                    revert with 'NH{q', 18
                                                if _14578 * _15047 / _14578 != _15047:
                                                    _15674 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 23
                                                    idx = 0
                                                    while idx < 23:
                                                        mem[idx + _15674 + 68] = mem[idx + _15197 + 32]
                                                        _14348 = mem[_1826]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_15674 + 91] = 0
                                                    revert with memory
                                                      from mem[64]
                                                       len _15674 + -mem[64] + 100
                                                mem[_15151] = _14578 * _15047
                                                if _14578 * _15047 / 10^18 > mem[_12516 + 160]:
                                                    if idx >= mem[_1826]:
                                                        revert with 'NH{q', 50
                                                    mem[_12516 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                    mem[_12516 + 160] = _14578 * _15047 / 10^18
                                                    if idx >= mem[_1826]:
                                                        revert with 'NH{q', 50
                                                    mem[_12516 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                    else:
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        mem[_12516 + 64] = mem[mem[(32 * idx) + _1826 + 32] + 32]
                                        mem[_12516 + 96] = _14578 * _14594 / 10^18
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        mem[_12516] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                        _15153 = mem[64]
                                        mem[64] = mem[64] + 32
                                        mem[_15153] = _14578
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        _15199 = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                        _15275 = mem[64]
                                        mem[64] = mem[64] + 32
                                        mem[_15275] = 0
                                        _15276 = mem[64]
                                        mem[64] = mem[64] + 32
                                        _15317 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_15317] = 23
                                        mem[_15317 + 32] = 'multiplication overflow'
                                        if not _14578:
                                            mem[_15276] = 0
                                            if 0 / 10^18 > mem[_12516 + 160]:
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_12516 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                mem[_12516 + 160] = 0 / 10^18
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_12516 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                        else:
                                            if not _15199:
                                                mem[_15276] = 0
                                                if 0 / 10^18 > mem[_12516 + 160]:
                                                    if idx >= mem[_1826]:
                                                        revert with 'NH{q', 50
                                                    mem[_12516 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                    mem[_12516 + 160] = 0 / 10^18
                                                    if idx >= mem[_1826]:
                                                        revert with 'NH{q', 50
                                                    mem[_12516 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                            else:
                                                if _14578 and _15199 > -1 / _14578:
                                                    revert with 'NH{q', 17
                                                if not _14578:
                                                    revert with 'NH{q', 18
                                                if _14578 * _15199 / _14578 != _15199:
                                                    _15873 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 23
                                                    idx = 0
                                                    while idx < 23:
                                                        mem[idx + _15873 + 68] = mem[idx + _15317 + 32]
                                                        _14348 = mem[_1826]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_15873 + 91] = 0
                                                    revert with memory
                                                      from mem[64]
                                                       len _15873 + -mem[64] + 100
                                                mem[_15276] = _14578 * _15199
                                                if _14578 * _15199 / 10^18 > mem[_12516 + 160]:
                                                    if idx >= mem[_1826]:
                                                        revert with 'NH{q', 50
                                                    mem[_12516 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                    mem[_12516 + 160] = _14578 * _15199 / 10^18
                                                    if idx >= mem[_1826]:
                                                        revert with 'NH{q', 50
                                                    mem[_12516 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
            if idx == -1:
                revert with 'NH{q', 17
            _14348 = mem[_1826]
            idx = idx + 1
            continue 
        _14350 = mem[_12516 + 32]
        _14351 = mem[_12516]
        _14352 = mem[_12516 + 128]
        mem[224] = mem[_12516 + 160]
        mem[192] = _14352
        mem[160] = address(_14351)
        mem[128] = address(_14350)
        mem[mem[64]] = mem[108 len 20]
        mem[mem[64] + 32] = address(_14350)
        mem[mem[64] + 64] = address(_14351)
        mem[mem[64] + 96] = _14352
        mem[mem[64] + 128] = mem[224]
        mem[mem[64] + 160] = bool(mem[256])
        return mem[mem[64]], address(_14350), address(_14351), _14352, mem[mem[64] + 128 len 64]
    mem[64] = _1826 + (32 * _24) + 416
    mem[_1826 + (32 * _24) + 288] = 0
    mem[_1826 + (32 * _24) + 320] = 0
    mem[_1826 + (32 * _24) + 352] = 0
    mem[_1826 + (32 * _24) + 384] = 0
    mem[var49002] = var49001
    if not var49003 - 1:
        idx = 0
        while idx < _24:
            if idx >= mem[(4 * ceil32(return_data.size)) + 288]:
                revert with 'NH{q', 50
            _16982 = mem[(32 * idx) + (4 * ceil32(return_data.size)) + 320]
            mem[mem[64] + 4] = address(arg2)
            staticcall address(_16982).borrowBalanceStored(address arg1) with:
                    gas gas_remaining wei
                   args address(arg2)
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _16985 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _17034 = mem[_16985]
            _17041 = mem[64]
            mem[64] = mem[64] + 128
            if idx >= mem[(4 * ceil32(return_data.size)) + 288]:
                revert with 'NH{q', 50
            mem[_17041] = mem[(32 * idx) + (4 * ceil32(return_data.size)) + 332 len 20]
            if idx >= mem[(4 * ceil32(return_data.size)) + 288]:
                revert with 'NH{q', 50
            _17052 = mem[(32 * idx) + (4 * ceil32(return_data.size)) + 320]
            mem[mem[64] + 4] = address(arg2)
            staticcall address(_17052).0x70a08231 with:
                    gas gas_remaining wei
                   args address(arg2)
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _17077 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _17092 = mem[_17077]
            if mem[_17077] <= 0:
                mem[_17041 + 32] = 0
                mem[_17041 + 64] = _17034
                _17123 = mem[64]
                mem[64] = mem[64] + 32
                mem[_17123] = ext_call.return_data[0]
                _17131 = mem[64]
                mem[64] = mem[64] + 32
                mem[_17131] = 0
                _17132 = mem[64]
                mem[64] = mem[64] + 32
                _17137 = mem[64]
                mem[64] = mem[64] + 64
                mem[_17137] = 23
                mem[_17137 + 32] = 'multiplication overflow'
                if not ext_call.return_data[0]:
                    mem[_17132] = 0
                    mem[_17041 + 96] = 0 / 10^18
                    if idx >= mem[_1826]:
                        revert with 'NH{q', 50
                    mem[(32 * idx) + _1826 + 32] = _17041
                    if idx == -1:
                        revert with 'NH{q', 17
                    idx = idx + 1
                    continue 
                if not _17034:
                    mem[_17132] = 0
                    mem[_17041 + 96] = 0 / 10^18
                    if idx >= mem[_1826]:
                        revert with 'NH{q', 50
                    mem[(32 * idx) + _1826 + 32] = _17041
                    if idx == -1:
                        revert with 'NH{q', 17
                    idx = idx + 1
                    continue 
                if ext_call.return_data[0] and _17034 > -1 / ext_call.return_data[0]:
                    revert with 'NH{q', 17
                if not ext_call.return_data[0]:
                    revert with 'NH{q', 18
                if ext_call.return_data[0] * _17034 / ext_call.return_data[0] == _17034:
                    mem[_17132] = ext_call.return_data[0] * _17034
                    mem[_17041 + 96] = ext_call.return_data[0] * _17034 / 10^18
                    if idx >= mem[_1826]:
                        revert with 'NH{q', 50
                    mem[(32 * idx) + _1826 + 32] = _17041
                    if idx == -1:
                        revert with 'NH{q', 17
                    idx = idx + 1
                    continue 
                _17182 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 23
                idx = 0
                while idx < 23:
                    mem[idx + _17182 + 68] = mem[idx + _17137 + 32]
                    idx = idx + 32
                    continue 
                mem[_17182 + 91] = 0
                revert with memory
                  from mem[64]
                   len _17182 + -mem[64] + 100
            _17109 = mem[64]
            mem[64] = mem[64] + 32
            staticcall address(_17052).exchangeRateStored() with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _17119 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[_17109] = mem[_17119]
            _17142 = mem[64]
            mem[64] = mem[64] + 32
            mem[_17142] = 0
            _17143 = mem[64]
            mem[64] = mem[64] + 32
            _17144 = mem[_17109]
            _17148 = mem[64]
            mem[64] = mem[64] + 64
            mem[_17148] = 23
            mem[_17148 + 32] = 'multiplication overflow'
            if not _17144:
                mem[_17143] = 0
                mem[_17041 + 32] = 0 / 10^18
                mem[_17041 + 64] = _17034
                _17238 = mem[64]
                mem[64] = mem[64] + 32
                mem[_17238] = ext_call.return_data[0]
                _17255 = mem[64]
                mem[64] = mem[64] + 32
                mem[_17255] = 0
                _17256 = mem[64]
                mem[64] = mem[64] + 32
                _17265 = mem[64]
                mem[64] = mem[64] + 64
                mem[_17265] = 23
                mem[_17265 + 32] = 'multiplication overflow'
                if not ext_call.return_data[0]:
                    mem[_17256] = 0
                    mem[_17041 + 96] = 0 / 10^18
                    if idx >= mem[_1826]:
                        revert with 'NH{q', 50
                    mem[(32 * idx) + _1826 + 32] = _17041
                    if idx == -1:
                        revert with 'NH{q', 17
                    idx = idx + 1
                    continue 
                if not _17034:
                    mem[_17256] = 0
                    mem[_17041 + 96] = 0 / 10^18
                    if idx >= mem[_1826]:
                        revert with 'NH{q', 50
                    mem[(32 * idx) + _1826 + 32] = _17041
                    if idx == -1:
                        revert with 'NH{q', 17
                    idx = idx + 1
                    continue 
                if ext_call.return_data[0] and _17034 > -1 / ext_call.return_data[0]:
                    revert with 'NH{q', 17
                if not ext_call.return_data[0]:
                    revert with 'NH{q', 18
                if ext_call.return_data[0] * _17034 / ext_call.return_data[0] == _17034:
                    mem[_17256] = ext_call.return_data[0] * _17034
                    mem[_17041 + 96] = ext_call.return_data[0] * _17034 / 10^18
                    if idx >= mem[_1826]:
                        revert with 'NH{q', 50
                    mem[(32 * idx) + _1826 + 32] = _17041
                    if idx == -1:
                        revert with 'NH{q', 17
                    idx = idx + 1
                    continue 
                _17314 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 23
                idx = 0
                while idx < 23:
                    mem[idx + _17314 + 68] = mem[idx + _17265 + 32]
                    idx = idx + 32
                    continue 
                mem[_17314 + 91] = 0
                revert with memory
                  from mem[64]
                   len _17314 + -mem[64] + 100
            if not _17092:
                mem[_17143] = 0
                mem[_17041 + 32] = 0 / 10^18
                mem[_17041 + 64] = _17034
                _17249 = mem[64]
                mem[64] = mem[64] + 32
                mem[_17249] = ext_call.return_data[0]
                _17266 = mem[64]
                mem[64] = mem[64] + 32
                mem[_17266] = 0
                _17267 = mem[64]
                mem[64] = mem[64] + 32
                _17273 = mem[64]
                mem[64] = mem[64] + 64
                mem[_17273] = 23
                mem[_17273 + 32] = 'multiplication overflow'
                if not ext_call.return_data[0]:
                    mem[_17267] = 0
                    mem[_17041 + 96] = 0 / 10^18
                    if idx >= mem[_1826]:
                        revert with 'NH{q', 50
                    mem[(32 * idx) + _1826 + 32] = _17041
                    if idx == -1:
                        revert with 'NH{q', 17
                    idx = idx + 1
                    continue 
                if not _17034:
                    mem[_17267] = 0
                    mem[_17041 + 96] = 0 / 10^18
                    if idx >= mem[_1826]:
                        revert with 'NH{q', 50
                    mem[(32 * idx) + _1826 + 32] = _17041
                    if idx == -1:
                        revert with 'NH{q', 17
                    idx = idx + 1
                    continue 
                if ext_call.return_data[0] and _17034 > -1 / ext_call.return_data[0]:
                    revert with 'NH{q', 17
                if not ext_call.return_data[0]:
                    revert with 'NH{q', 18
                if ext_call.return_data[0] * _17034 / ext_call.return_data[0] == _17034:
                    mem[_17267] = ext_call.return_data[0] * _17034
                    mem[_17041 + 96] = ext_call.return_data[0] * _17034 / 10^18
                    if idx >= mem[_1826]:
                        revert with 'NH{q', 50
                    mem[(32 * idx) + _1826 + 32] = _17041
                    if idx == -1:
                        revert with 'NH{q', 17
                    idx = idx + 1
                    continue 
                _17322 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 23
                idx = 0
                while idx < 23:
                    mem[idx + _17322 + 68] = mem[idx + _17273 + 32]
                    idx = idx + 32
                    continue 
                mem[_17322 + 91] = 0
                revert with memory
                  from mem[64]
                   len _17322 + -mem[64] + 100
            if _17144 and _17092 > -1 / _17144:
                revert with 'NH{q', 17
            if not _17144:
                revert with 'NH{q', 18
            if _17144 * _17092 / _17144 != _17092:
                _17193 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 23
                idx = 0
                while idx < 23:
                    mem[idx + _17193 + 68] = mem[idx + _17148 + 32]
                    idx = idx + 32
                    continue 
                mem[_17193 + 91] = 0
                revert with memory
                  from mem[64]
                   len _17193 + -mem[64] + 100
            mem[_17143] = _17144 * _17092
            mem[_17041 + 32] = _17144 * _17092 / 10^18
            mem[_17041 + 64] = _17034
            _17289 = mem[64]
            mem[64] = mem[64] + 32
            mem[_17289] = ext_call.return_data[0]
            _17293 = mem[64]
            mem[64] = mem[64] + 32
            mem[_17293] = 0
            _17294 = mem[64]
            mem[64] = mem[64] + 32
            _17299 = mem[64]
            mem[64] = mem[64] + 64
            mem[_17299] = 23
            mem[_17299 + 32] = 'multiplication overflow'
            if not ext_call.return_data[0]:
                mem[_17294] = 0
                mem[_17041 + 96] = 0 / 10^18
                if idx >= mem[_1826]:
                    revert with 'NH{q', 50
                mem[(32 * idx) + _1826 + 32] = _17041
                if idx == -1:
                    revert with 'NH{q', 17
                idx = idx + 1
                continue 
            if not _17034:
                mem[_17294] = 0
                mem[_17041 + 96] = 0 / 10^18
                if idx >= mem[_1826]:
                    revert with 'NH{q', 50
                mem[(32 * idx) + _1826 + 32] = _17041
                if idx == -1:
                    revert with 'NH{q', 17
                idx = idx + 1
                continue 
            if ext_call.return_data[0] and _17034 > -1 / ext_call.return_data[0]:
                revert with 'NH{q', 17
            if not ext_call.return_data[0]:
                revert with 'NH{q', 18
            if ext_call.return_data[0] * _17034 / ext_call.return_data[0] == _17034:
                mem[_17294] = ext_call.return_data[0] * _17034
                mem[_17041 + 96] = ext_call.return_data[0] * _17034 / 10^18
                if idx >= mem[_1826]:
                    revert with 'NH{q', 50
                mem[(32 * idx) + _1826 + 32] = _17041
                if idx == -1:
                    revert with 'NH{q', 17
                idx = idx + 1
                continue 
            _17454 = mem[64]
            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = 32
            mem[mem[64] + 36] = 23
            idx = 0
            while idx < 23:
                mem[idx + _17454 + 68] = mem[idx + _17299 + 32]
                idx = idx + 32
                continue 
            mem[_17454 + 91] = 0
            revert with memory
              from mem[64]
               len _17454 + -mem[64] + 100
        _16981 = mem[64]
        mem[64] = mem[64] + 192
        mem[_16981] = 0
        mem[_16981 + 32] = 0
        mem[_16981 + 64] = 0
        mem[_16981 + 96] = 0
        mem[_16981 + 128] = 0
        mem[_16981 + 160] = 0
        _18813 = mem[_1826]
        idx = 0
        while idx < _18813:
            if idx >= mem[_1826]:
                revert with 'NH{q', 50
            if idx >= mem[_1826]:
                revert with 'NH{q', 50
            if mem[mem[(32 * idx) + _1826 + 32] + 32] > 0:
                staticcall address(arg1).markets(address arg1) with:
                        gas gas_remaining wei
                       args address(mem[mem[(32 * idx) + _1826 + 32]])
                mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _18861 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 96
                require mem[_18861] == bool(mem[_18861])
                _18905 = mem[_18861 + 32]
                require mem[_18861 + 64] == bool(mem[_18861 + 64])
                if mem[_18861]:
                    staticcall address(arg1).oracle() with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _18968 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _18980 = mem[_18968]
                    require mem[_18968] == mem[_18968 + 12 len 20]
                    if idx >= mem[_1826]:
                        revert with 'NH{q', 50
                    _19011 = mem[mem[(32 * idx) + _1826 + 32]]
                    mem[mem[64] + 4] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                    staticcall address(_18980).getUnderlyingPrice(address arg1) with:
                            gas gas_remaining wei
                           args address(_19011)
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _19021 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _19033 = mem[_19021]
                    _19038 = mem[64]
                    mem[64] = mem[64] + 32
                    mem[_19038] = _19033
                    if idx >= mem[_1826]:
                        revert with 'NH{q', 50
                    _19042 = mem[mem[(32 * idx) + _1826 + 32] + 32]
                    _19055 = mem[64]
                    mem[64] = mem[64] + 32
                    mem[_19055] = 0
                    _19056 = mem[64]
                    mem[64] = mem[64] + 32
                    _19066 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_19066] = 23
                    mem[_19066 + 32] = 'multiplication overflow'
                    if not _19033:
                        mem[_19056] = 0
                        if _18905 <= 0:
                            _19188 = mem[64]
                            mem[64] = mem[64] + 32
                            mem[_19188] = _19033
                            if idx >= mem[_1826]:
                                revert with 'NH{q', 50
                            _19200 = mem[mem[(32 * idx) + _1826 + 32] + 96]
                            _19235 = mem[64]
                            mem[64] = mem[64] + 32
                            mem[_19235] = 0
                            _19236 = mem[64]
                            mem[64] = mem[64] + 32
                            _19259 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_19259] = 23
                            mem[_19259 + 32] = 'multiplication overflow'
                            if not _19033:
                                mem[_19236] = 0
                                if 0 / 10^18 > mem[_16981 + 160]:
                                    if idx >= mem[_1826]:
                                        revert with 'NH{q', 50
                                    mem[_16981 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                    mem[_16981 + 160] = 0 / 10^18
                                    if idx >= mem[_1826]:
                                        revert with 'NH{q', 50
                                    mem[_16981 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                            else:
                                if not _19200:
                                    mem[_19236] = 0
                                    if 0 / 10^18 > mem[_16981 + 160]:
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        mem[_16981 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                        mem[_16981 + 160] = 0 / 10^18
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        mem[_16981 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                else:
                                    if _19033 and _19200 > -1 / _19033:
                                        revert with 'NH{q', 17
                                    if not _19033:
                                        revert with 'NH{q', 18
                                    if _19033 * _19200 / _19033 != _19200:
                                        _19655 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 23
                                        idx = 0
                                        while idx < 23:
                                            mem[idx + _19655 + 68] = mem[idx + _19259 + 32]
                                            _18813 = mem[_1826]
                                            idx = idx + 32
                                            continue 
                                        mem[_19655 + 91] = 0
                                        revert with memory
                                          from mem[64]
                                           len _19655 + -mem[64] + 100
                                    mem[_19236] = _19033 * _19200
                                    if _19033 * _19200 / 10^18 > mem[_16981 + 160]:
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        mem[_16981 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                        mem[_16981 + 160] = _19033 * _19200 / 10^18
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        mem[_16981 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                        else:
                            if 0 / 10^18 <= mem[_16981 + 96]:
                                _19201 = mem[64]
                                mem[64] = mem[64] + 32
                                mem[_19201] = _19033
                                if idx >= mem[_1826]:
                                    revert with 'NH{q', 50
                                _19215 = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                _19260 = mem[64]
                                mem[64] = mem[64] + 32
                                mem[_19260] = 0
                                _19261 = mem[64]
                                mem[64] = mem[64] + 32
                                _19286 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_19286] = 23
                                mem[_19286 + 32] = 'multiplication overflow'
                                if not _19033:
                                    mem[_19261] = 0
                                    if 0 / 10^18 > mem[_16981 + 160]:
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        mem[_16981 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                        mem[_16981 + 160] = 0 / 10^18
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        mem[_16981 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                else:
                                    if not _19215:
                                        mem[_19261] = 0
                                        if 0 / 10^18 > mem[_16981 + 160]:
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_16981 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                            mem[_16981 + 160] = 0 / 10^18
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_16981 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                    else:
                                        if _19033 and _19215 > -1 / _19033:
                                            revert with 'NH{q', 17
                                        if not _19033:
                                            revert with 'NH{q', 18
                                        if _19033 * _19215 / _19033 != _19215:
                                            _19699 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 23
                                            idx = 0
                                            while idx < 23:
                                                mem[idx + _19699 + 68] = mem[idx + _19286 + 32]
                                                _18813 = mem[_1826]
                                                idx = idx + 32
                                                continue 
                                            mem[_19699 + 91] = 0
                                            revert with memory
                                              from mem[64]
                                               len _19699 + -mem[64] + 100
                                        mem[_19261] = _19033 * _19215
                                        if _19033 * _19215 / 10^18 > mem[_16981 + 160]:
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_16981 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                            mem[_16981 + 160] = _19033 * _19215 / 10^18
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_16981 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                            else:
                                if idx >= mem[_1826]:
                                    revert with 'NH{q', 50
                                mem[_16981 + 64] = mem[mem[(32 * idx) + _1826 + 32] + 32]
                                mem[_16981 + 96] = 0 / 10^18
                                if idx >= mem[_1826]:
                                    revert with 'NH{q', 50
                                mem[_16981] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                _19263 = mem[64]
                                mem[64] = mem[64] + 32
                                mem[_19263] = _19033
                                if idx >= mem[_1826]:
                                    revert with 'NH{q', 50
                                _19288 = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                _19335 = mem[64]
                                mem[64] = mem[64] + 32
                                mem[_19335] = 0
                                _19336 = mem[64]
                                mem[64] = mem[64] + 32
                                _19365 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_19365] = 23
                                mem[_19365 + 32] = 'multiplication overflow'
                                if not _19033:
                                    mem[_19336] = 0
                                    if 0 / 10^18 > mem[_16981 + 160]:
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        mem[_16981 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                        mem[_16981 + 160] = 0 / 10^18
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        mem[_16981 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                else:
                                    if not _19288:
                                        mem[_19336] = 0
                                        if 0 / 10^18 > mem[_16981 + 160]:
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_16981 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                            mem[_16981 + 160] = 0 / 10^18
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_16981 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                    else:
                                        if _19033 and _19288 > -1 / _19033:
                                            revert with 'NH{q', 17
                                        if not _19033:
                                            revert with 'NH{q', 18
                                        if _19033 * _19288 / _19033 != _19288:
                                            _19817 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 23
                                            idx = 0
                                            while idx < 23:
                                                mem[idx + _19817 + 68] = mem[idx + _19365 + 32]
                                                _18813 = mem[_1826]
                                                idx = idx + 32
                                                continue 
                                            mem[_19817 + 91] = 0
                                            revert with memory
                                              from mem[64]
                                               len _19817 + -mem[64] + 100
                                        mem[_19336] = _19033 * _19288
                                        if _19033 * _19288 / 10^18 > mem[_16981 + 160]:
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_16981 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                            mem[_16981 + 160] = _19033 * _19288 / 10^18
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_16981 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                    else:
                        if not _19042:
                            mem[_19056] = 0
                            if _18905 <= 0:
                                _19205 = mem[64]
                                mem[64] = mem[64] + 32
                                mem[_19205] = _19033
                                if idx >= mem[_1826]:
                                    revert with 'NH{q', 50
                                _19220 = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                _19265 = mem[64]
                                mem[64] = mem[64] + 32
                                mem[_19265] = 0
                                _19266 = mem[64]
                                mem[64] = mem[64] + 32
                                _19289 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_19289] = 23
                                mem[_19289 + 32] = 'multiplication overflow'
                                if not _19033:
                                    mem[_19266] = 0
                                    if 0 / 10^18 > mem[_16981 + 160]:
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        mem[_16981 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                        mem[_16981 + 160] = 0 / 10^18
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        mem[_16981 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                else:
                                    if not _19220:
                                        mem[_19266] = 0
                                        if 0 / 10^18 > mem[_16981 + 160]:
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_16981 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                            mem[_16981 + 160] = 0 / 10^18
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_16981 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                    else:
                                        if _19033 and _19220 > -1 / _19033:
                                            revert with 'NH{q', 17
                                        if not _19033:
                                            revert with 'NH{q', 18
                                        if _19033 * _19220 / _19033 != _19220:
                                            _19702 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 23
                                            idx = 0
                                            while idx < 23:
                                                mem[idx + _19702 + 68] = mem[idx + _19289 + 32]
                                                _18813 = mem[_1826]
                                                idx = idx + 32
                                                continue 
                                            mem[_19702 + 91] = 0
                                            revert with memory
                                              from mem[64]
                                               len _19702 + -mem[64] + 100
                                        mem[_19266] = _19033 * _19220
                                        if _19033 * _19220 / 10^18 > mem[_16981 + 160]:
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_16981 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                            mem[_16981 + 160] = _19033 * _19220 / 10^18
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_16981 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                            else:
                                if 0 / 10^18 <= mem[_16981 + 96]:
                                    _19221 = mem[64]
                                    mem[64] = mem[64] + 32
                                    mem[_19221] = _19033
                                    if idx >= mem[_1826]:
                                        revert with 'NH{q', 50
                                    _19241 = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                    _19290 = mem[64]
                                    mem[64] = mem[64] + 32
                                    mem[_19290] = 0
                                    _19291 = mem[64]
                                    mem[64] = mem[64] + 32
                                    _19312 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_19312] = 23
                                    mem[_19312 + 32] = 'multiplication overflow'
                                    if not _19033:
                                        mem[_19291] = 0
                                        if 0 / 10^18 > mem[_16981 + 160]:
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_16981 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                            mem[_16981 + 160] = 0 / 10^18
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_16981 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                    else:
                                        if not _19241:
                                            mem[_19291] = 0
                                            if 0 / 10^18 > mem[_16981 + 160]:
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_16981 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                mem[_16981 + 160] = 0 / 10^18
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_16981 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                        else:
                                            if _19033 and _19241 > -1 / _19033:
                                                revert with 'NH{q', 17
                                            if not _19033:
                                                revert with 'NH{q', 18
                                            if _19033 * _19241 / _19033 != _19241:
                                                _19737 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 23
                                                idx = 0
                                                while idx < 23:
                                                    mem[idx + _19737 + 68] = mem[idx + _19312 + 32]
                                                    _18813 = mem[_1826]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_19737 + 91] = 0
                                                revert with memory
                                                  from mem[64]
                                                   len _19737 + -mem[64] + 100
                                            mem[_19291] = _19033 * _19241
                                            if _19033 * _19241 / 10^18 > mem[_16981 + 160]:
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_16981 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                mem[_16981 + 160] = _19033 * _19241 / 10^18
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_16981 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                else:
                                    if idx >= mem[_1826]:
                                        revert with 'NH{q', 50
                                    mem[_16981 + 64] = mem[mem[(32 * idx) + _1826 + 32] + 32]
                                    mem[_16981 + 96] = 0 / 10^18
                                    if idx >= mem[_1826]:
                                        revert with 'NH{q', 50
                                    mem[_16981] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                    _19293 = mem[64]
                                    mem[64] = mem[64] + 32
                                    mem[_19293] = _19033
                                    if idx >= mem[_1826]:
                                        revert with 'NH{q', 50
                                    _19314 = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                    _19371 = mem[64]
                                    mem[64] = mem[64] + 32
                                    mem[_19371] = 0
                                    _19372 = mem[64]
                                    mem[64] = mem[64] + 32
                                    _19408 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_19408] = 23
                                    mem[_19408 + 32] = 'multiplication overflow'
                                    if not _19033:
                                        mem[_19372] = 0
                                        if 0 / 10^18 > mem[_16981 + 160]:
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_16981 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                            mem[_16981 + 160] = 0 / 10^18
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_16981 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                    else:
                                        if not _19314:
                                            mem[_19372] = 0
                                            if 0 / 10^18 > mem[_16981 + 160]:
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_16981 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                mem[_16981 + 160] = 0 / 10^18
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_16981 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                        else:
                                            if _19033 and _19314 > -1 / _19033:
                                                revert with 'NH{q', 17
                                            if not _19033:
                                                revert with 'NH{q', 18
                                            if _19033 * _19314 / _19033 != _19314:
                                                _19868 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 23
                                                idx = 0
                                                while idx < 23:
                                                    mem[idx + _19868 + 68] = mem[idx + _19408 + 32]
                                                    _18813 = mem[_1826]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_19868 + 91] = 0
                                                revert with memory
                                                  from mem[64]
                                                   len _19868 + -mem[64] + 100
                                            mem[_19372] = _19033 * _19314
                                            if _19033 * _19314 / 10^18 > mem[_16981 + 160]:
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_16981 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                mem[_16981 + 160] = _19033 * _19314 / 10^18
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_16981 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                        else:
                            if _19033 and _19042 > -1 / _19033:
                                revert with 'NH{q', 17
                            if not _19033:
                                revert with 'NH{q', 18
                            if _19033 * _19042 / _19033 != _19042:
                                _19166 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 23
                                idx = 0
                                while idx < 23:
                                    mem[idx + _19166 + 68] = mem[idx + _19066 + 32]
                                    _18813 = mem[_1826]
                                    idx = idx + 32
                                    continue 
                                mem[_19166 + 91] = 0
                                revert with memory
                                  from mem[64]
                                   len _19166 + -mem[64] + 100
                            mem[_19056] = _19033 * _19042
                            if _18905 <= 0:
                                _19338 = mem[64]
                                mem[64] = mem[64] + 32
                                mem[_19338] = _19033
                                if idx >= mem[_1826]:
                                    revert with 'NH{q', 50
                                _19367 = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                _19448 = mem[64]
                                mem[64] = mem[64] + 32
                                mem[_19448] = 0
                                _19449 = mem[64]
                                mem[64] = mem[64] + 32
                                _19505 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_19505] = 23
                                mem[_19505 + 32] = 'multiplication overflow'
                                if not _19033:
                                    mem[_19449] = 0
                                    if 0 / 10^18 > mem[_16981 + 160]:
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        mem[_16981 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                        mem[_16981 + 160] = 0 / 10^18
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        mem[_16981 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                else:
                                    if not _19367:
                                        mem[_19449] = 0
                                        if 0 / 10^18 > mem[_16981 + 160]:
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_16981 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                            mem[_16981 + 160] = 0 / 10^18
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_16981 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                    else:
                                        if _19033 and _19367 > -1 / _19033:
                                            revert with 'NH{q', 17
                                        if not _19033:
                                            revert with 'NH{q', 18
                                        if _19033 * _19367 / _19033 != _19367:
                                            _19959 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 23
                                            idx = 0
                                            while idx < 23:
                                                mem[idx + _19959 + 68] = mem[idx + _19505 + 32]
                                                _18813 = mem[_1826]
                                                idx = idx + 32
                                                continue 
                                            mem[_19959 + 91] = 0
                                            revert with memory
                                              from mem[64]
                                               len _19959 + -mem[64] + 100
                                        mem[_19449] = _19033 * _19367
                                        if _19033 * _19367 / 10^18 > mem[_16981 + 160]:
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_16981 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                            mem[_16981 + 160] = _19033 * _19367 / 10^18
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_16981 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                            else:
                                if _19033 * _19042 / 10^18 <= mem[_16981 + 96]:
                                    _19368 = mem[64]
                                    mem[64] = mem[64] + 32
                                    mem[_19368] = _19033
                                    if idx >= mem[_1826]:
                                        revert with 'NH{q', 50
                                    _19404 = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                    _19506 = mem[64]
                                    mem[64] = mem[64] + 32
                                    mem[_19506] = 0
                                    _19507 = mem[64]
                                    mem[64] = mem[64] + 32
                                    _19562 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_19562] = 23
                                    mem[_19562 + 32] = 'multiplication overflow'
                                    if not _19033:
                                        mem[_19507] = 0
                                        if 0 / 10^18 > mem[_16981 + 160]:
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_16981 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                            mem[_16981 + 160] = 0 / 10^18
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_16981 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                    else:
                                        if not _19404:
                                            mem[_19507] = 0
                                            if 0 / 10^18 > mem[_16981 + 160]:
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_16981 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                mem[_16981 + 160] = 0 / 10^18
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_16981 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                        else:
                                            if _19033 and _19404 > -1 / _19033:
                                                revert with 'NH{q', 17
                                            if not _19033:
                                                revert with 'NH{q', 18
                                            if _19033 * _19404 / _19033 != _19404:
                                                _20013 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 23
                                                idx = 0
                                                while idx < 23:
                                                    mem[idx + _20013 + 68] = mem[idx + _19562 + 32]
                                                    _18813 = mem[_1826]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_20013 + 91] = 0
                                                revert with memory
                                                  from mem[64]
                                                   len _20013 + -mem[64] + 100
                                            mem[_19507] = _19033 * _19404
                                            if _19033 * _19404 / 10^18 > mem[_16981 + 160]:
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_16981 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                mem[_16981 + 160] = _19033 * _19404 / 10^18
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_16981 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                else:
                                    if idx >= mem[_1826]:
                                        revert with 'NH{q', 50
                                    mem[_16981 + 64] = mem[mem[(32 * idx) + _1826 + 32] + 32]
                                    mem[_16981 + 96] = _19033 * _19042 / 10^18
                                    if idx >= mem[_1826]:
                                        revert with 'NH{q', 50
                                    mem[_16981] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                    _19509 = mem[64]
                                    mem[64] = mem[64] + 32
                                    mem[_19509] = _19033
                                    if idx >= mem[_1826]:
                                        revert with 'NH{q', 50
                                    _19564 = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                    _19656 = mem[64]
                                    mem[64] = mem[64] + 32
                                    mem[_19656] = 0
                                    _19657 = mem[64]
                                    mem[64] = mem[64] + 32
                                    _19701 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_19701] = 23
                                    mem[_19701 + 32] = 'multiplication overflow'
                                    if not _19033:
                                        mem[_19657] = 0
                                        if 0 / 10^18 > mem[_16981 + 160]:
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_16981 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                            mem[_16981 + 160] = 0 / 10^18
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_16981 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                    else:
                                        if not _19564:
                                            mem[_19657] = 0
                                            if 0 / 10^18 > mem[_16981 + 160]:
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_16981 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                mem[_16981 + 160] = 0 / 10^18
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_16981 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                        else:
                                            if _19033 and _19564 > -1 / _19033:
                                                revert with 'NH{q', 17
                                            if not _19033:
                                                revert with 'NH{q', 18
                                            if _19033 * _19564 / _19033 != _19564:
                                                _20184 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 23
                                                idx = 0
                                                while idx < 23:
                                                    mem[idx + _20184 + 68] = mem[idx + _19701 + 32]
                                                    _18813 = mem[_1826]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_20184 + 91] = 0
                                                revert with memory
                                                  from mem[64]
                                                   len _20184 + -mem[64] + 100
                                            mem[_19657] = _19033 * _19564
                                            if _19033 * _19564 / 10^18 > mem[_16981 + 160]:
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_16981 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                mem[_16981 + 160] = _19033 * _19564 / 10^18
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_16981 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
            else:
                if mem[mem[(32 * idx) + _1826 + 32] + 64] > 0:
                    if idx >= mem[_1826]:
                        revert with 'NH{q', 50
                    staticcall address(arg1).markets(address arg1) with:
                            gas gas_remaining wei
                           args address(mem[mem[(32 * idx) + _1826 + 32]])
                    mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _18880 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 96
                    require mem[_18880] == bool(mem[_18880])
                    _18931 = mem[_18880 + 32]
                    require mem[_18880 + 64] == bool(mem[_18880 + 64])
                    if mem[_18880]:
                        staticcall address(arg1).oracle() with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _18981 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _18993 = mem[_18981]
                        require mem[_18981] == mem[_18981 + 12 len 20]
                        if idx >= mem[_1826]:
                            revert with 'NH{q', 50
                        _19028 = mem[mem[(32 * idx) + _1826 + 32]]
                        mem[mem[64] + 4] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                        staticcall address(_18993).getUnderlyingPrice(address arg1) with:
                                gas gas_remaining wei
                               args address(_19028)
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _19034 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _19043 = mem[_19034]
                        _19047 = mem[64]
                        mem[64] = mem[64] + 32
                        mem[_19047] = _19043
                        if idx >= mem[_1826]:
                            revert with 'NH{q', 50
                        _19059 = mem[mem[(32 * idx) + _1826 + 32] + 32]
                        _19077 = mem[64]
                        mem[64] = mem[64] + 32
                        mem[_19077] = 0
                        _19078 = mem[64]
                        mem[64] = mem[64] + 32
                        _19087 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_19087] = 23
                        mem[_19087 + 32] = 'multiplication overflow'
                        if not _19043:
                            mem[_19078] = 0
                            if _18931 <= 0:
                                _19224 = mem[64]
                                mem[64] = mem[64] + 32
                                mem[_19224] = _19043
                                if idx >= mem[_1826]:
                                    revert with 'NH{q', 50
                                _19246 = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                _19295 = mem[64]
                                mem[64] = mem[64] + 32
                                mem[_19295] = 0
                                _19296 = mem[64]
                                mem[64] = mem[64] + 32
                                _19315 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_19315] = 23
                                mem[_19315 + 32] = 'multiplication overflow'
                                if not _19043:
                                    mem[_19296] = 0
                                    if 0 / 10^18 > mem[_16981 + 160]:
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        mem[_16981 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                        mem[_16981 + 160] = 0 / 10^18
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        mem[_16981 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                else:
                                    if not _19246:
                                        mem[_19296] = 0
                                        if 0 / 10^18 > mem[_16981 + 160]:
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_16981 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                            mem[_16981 + 160] = 0 / 10^18
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_16981 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                    else:
                                        if _19043 and _19246 > -1 / _19043:
                                            revert with 'NH{q', 17
                                        if not _19043:
                                            revert with 'NH{q', 18
                                        if _19043 * _19246 / _19043 != _19246:
                                            _19739 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 23
                                            idx = 0
                                            while idx < 23:
                                                mem[idx + _19739 + 68] = mem[idx + _19315 + 32]
                                                _18813 = mem[_1826]
                                                idx = idx + 32
                                                continue 
                                            mem[_19739 + 91] = 0
                                            revert with memory
                                              from mem[64]
                                               len _19739 + -mem[64] + 100
                                        mem[_19296] = _19043 * _19246
                                        if _19043 * _19246 / 10^18 > mem[_16981 + 160]:
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_16981 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                            mem[_16981 + 160] = _19043 * _19246 / 10^18
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_16981 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                            else:
                                if 0 / 10^18 <= mem[_16981 + 96]:
                                    _19247 = mem[64]
                                    mem[64] = mem[64] + 32
                                    mem[_19247] = _19043
                                    if idx >= mem[_1826]:
                                        revert with 'NH{q', 50
                                    _19271 = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                    _19316 = mem[64]
                                    mem[64] = mem[64] + 32
                                    mem[_19316] = 0
                                    _19317 = mem[64]
                                    mem[64] = mem[64] + 32
                                    _19340 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_19340] = 23
                                    mem[_19340 + 32] = 'multiplication overflow'
                                    if not _19043:
                                        mem[_19317] = 0
                                        if 0 / 10^18 > mem[_16981 + 160]:
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_16981 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                            mem[_16981 + 160] = 0 / 10^18
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_16981 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                    else:
                                        if not _19271:
                                            mem[_19317] = 0
                                            if 0 / 10^18 > mem[_16981 + 160]:
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_16981 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                mem[_16981 + 160] = 0 / 10^18
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_16981 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                        else:
                                            if _19043 and _19271 > -1 / _19043:
                                                revert with 'NH{q', 17
                                            if not _19043:
                                                revert with 'NH{q', 18
                                            if _19043 * _19271 / _19043 != _19271:
                                                _19780 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 23
                                                idx = 0
                                                while idx < 23:
                                                    mem[idx + _19780 + 68] = mem[idx + _19340 + 32]
                                                    _18813 = mem[_1826]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_19780 + 91] = 0
                                                revert with memory
                                                  from mem[64]
                                                   len _19780 + -mem[64] + 100
                                            mem[_19317] = _19043 * _19271
                                            if _19043 * _19271 / 10^18 > mem[_16981 + 160]:
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_16981 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                mem[_16981 + 160] = _19043 * _19271 / 10^18
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_16981 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                else:
                                    if idx >= mem[_1826]:
                                        revert with 'NH{q', 50
                                    mem[_16981 + 64] = mem[mem[(32 * idx) + _1826 + 32] + 32]
                                    mem[_16981 + 96] = 0 / 10^18
                                    if idx >= mem[_1826]:
                                        revert with 'NH{q', 50
                                    mem[_16981] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                    _19319 = mem[64]
                                    mem[64] = mem[64] + 32
                                    mem[_19319] = _19043
                                    if idx >= mem[_1826]:
                                        revert with 'NH{q', 50
                                    _19342 = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                    _19409 = mem[64]
                                    mem[64] = mem[64] + 32
                                    mem[_19409] = 0
                                    _19410 = mem[64]
                                    mem[64] = mem[64] + 32
                                    _19453 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_19453] = 23
                                    mem[_19453 + 32] = 'multiplication overflow'
                                    if not _19043:
                                        mem[_19410] = 0
                                        if 0 / 10^18 > mem[_16981 + 160]:
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_16981 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                            mem[_16981 + 160] = 0 / 10^18
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_16981 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                    else:
                                        if not _19342:
                                            mem[_19410] = 0
                                            if 0 / 10^18 > mem[_16981 + 160]:
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_16981 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                mem[_16981 + 160] = 0 / 10^18
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_16981 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                        else:
                                            if _19043 and _19342 > -1 / _19043:
                                                revert with 'NH{q', 17
                                            if not _19043:
                                                revert with 'NH{q', 18
                                            if _19043 * _19342 / _19043 != _19342:
                                                _19923 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 23
                                                idx = 0
                                                while idx < 23:
                                                    mem[idx + _19923 + 68] = mem[idx + _19453 + 32]
                                                    _18813 = mem[_1826]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_19923 + 91] = 0
                                                revert with memory
                                                  from mem[64]
                                                   len _19923 + -mem[64] + 100
                                            mem[_19410] = _19043 * _19342
                                            if _19043 * _19342 / 10^18 > mem[_16981 + 160]:
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_16981 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                mem[_16981 + 160] = _19043 * _19342 / 10^18
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_16981 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                        else:
                            if not _19059:
                                mem[_19078] = 0
                                if _18931 <= 0:
                                    _19251 = mem[64]
                                    mem[64] = mem[64] + 32
                                    mem[_19251] = _19043
                                    if idx >= mem[_1826]:
                                        revert with 'NH{q', 50
                                    _19276 = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                    _19321 = mem[64]
                                    mem[64] = mem[64] + 32
                                    mem[_19321] = 0
                                    _19322 = mem[64]
                                    mem[64] = mem[64] + 32
                                    _19343 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_19343] = 23
                                    mem[_19343 + 32] = 'multiplication overflow'
                                    if not _19043:
                                        mem[_19322] = 0
                                        if 0 / 10^18 > mem[_16981 + 160]:
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_16981 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                            mem[_16981 + 160] = 0 / 10^18
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_16981 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                    else:
                                        if not _19276:
                                            mem[_19322] = 0
                                            if 0 / 10^18 > mem[_16981 + 160]:
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_16981 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                mem[_16981 + 160] = 0 / 10^18
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_16981 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                        else:
                                            if _19043 and _19276 > -1 / _19043:
                                                revert with 'NH{q', 17
                                            if not _19043:
                                                revert with 'NH{q', 18
                                            if _19043 * _19276 / _19043 != _19276:
                                                _19783 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 23
                                                idx = 0
                                                while idx < 23:
                                                    mem[idx + _19783 + 68] = mem[idx + _19343 + 32]
                                                    _18813 = mem[_1826]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_19783 + 91] = 0
                                                revert with memory
                                                  from mem[64]
                                                   len _19783 + -mem[64] + 100
                                            mem[_19322] = _19043 * _19276
                                            if _19043 * _19276 / 10^18 > mem[_16981 + 160]:
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_16981 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                mem[_16981 + 160] = _19043 * _19276 / 10^18
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_16981 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                else:
                                    if 0 / 10^18 <= mem[_16981 + 96]:
                                        _19277 = mem[64]
                                        mem[64] = mem[64] + 32
                                        mem[_19277] = _19043
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        _19301 = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                        _19344 = mem[64]
                                        mem[64] = mem[64] + 32
                                        mem[_19344] = 0
                                        _19345 = mem[64]
                                        mem[64] = mem[64] + 32
                                        _19375 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_19375] = 23
                                        mem[_19375 + 32] = 'multiplication overflow'
                                        if not _19043:
                                            mem[_19345] = 0
                                            if 0 / 10^18 > mem[_16981 + 160]:
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_16981 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                mem[_16981 + 160] = 0 / 10^18
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_16981 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                        else:
                                            if not _19301:
                                                mem[_19345] = 0
                                                if 0 / 10^18 > mem[_16981 + 160]:
                                                    if idx >= mem[_1826]:
                                                        revert with 'NH{q', 50
                                                    mem[_16981 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                    mem[_16981 + 160] = 0 / 10^18
                                                    if idx >= mem[_1826]:
                                                        revert with 'NH{q', 50
                                                    mem[_16981 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                            else:
                                                if _19043 and _19301 > -1 / _19043:
                                                    revert with 'NH{q', 17
                                                if not _19043:
                                                    revert with 'NH{q', 18
                                                if _19043 * _19301 / _19043 != _19301:
                                                    _19824 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 23
                                                    idx = 0
                                                    while idx < 23:
                                                        mem[idx + _19824 + 68] = mem[idx + _19375 + 32]
                                                        _18813 = mem[_1826]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_19824 + 91] = 0
                                                    revert with memory
                                                      from mem[64]
                                                       len _19824 + -mem[64] + 100
                                                mem[_19345] = _19043 * _19301
                                                if _19043 * _19301 / 10^18 > mem[_16981 + 160]:
                                                    if idx >= mem[_1826]:
                                                        revert with 'NH{q', 50
                                                    mem[_16981 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                    mem[_16981 + 160] = _19043 * _19301 / 10^18
                                                    if idx >= mem[_1826]:
                                                        revert with 'NH{q', 50
                                                    mem[_16981 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                    else:
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        mem[_16981 + 64] = mem[mem[(32 * idx) + _1826 + 32] + 32]
                                        mem[_16981 + 96] = 0 / 10^18
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        mem[_16981] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                        _19347 = mem[64]
                                        mem[64] = mem[64] + 32
                                        mem[_19347] = _19043
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        _19377 = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                        _19459 = mem[64]
                                        mem[64] = mem[64] + 32
                                        mem[_19459] = 0
                                        _19460 = mem[64]
                                        mem[64] = mem[64] + 32
                                        _19516 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_19516] = 23
                                        mem[_19516 + 32] = 'multiplication overflow'
                                        if not _19043:
                                            mem[_19460] = 0
                                            if 0 / 10^18 > mem[_16981 + 160]:
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_16981 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                mem[_16981 + 160] = 0 / 10^18
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_16981 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                        else:
                                            if not _19377:
                                                mem[_19460] = 0
                                                if 0 / 10^18 > mem[_16981 + 160]:
                                                    if idx >= mem[_1826]:
                                                        revert with 'NH{q', 50
                                                    mem[_16981 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                    mem[_16981 + 160] = 0 / 10^18
                                                    if idx >= mem[_1826]:
                                                        revert with 'NH{q', 50
                                                    mem[_16981 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                            else:
                                                if _19043 and _19377 > -1 / _19043:
                                                    revert with 'NH{q', 17
                                                if not _19043:
                                                    revert with 'NH{q', 18
                                                if _19043 * _19377 / _19043 != _19377:
                                                    _19987 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 23
                                                    idx = 0
                                                    while idx < 23:
                                                        mem[idx + _19987 + 68] = mem[idx + _19516 + 32]
                                                        _18813 = mem[_1826]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_19987 + 91] = 0
                                                    revert with memory
                                                      from mem[64]
                                                       len _19987 + -mem[64] + 100
                                                mem[_19460] = _19043 * _19377
                                                if _19043 * _19377 / 10^18 > mem[_16981 + 160]:
                                                    if idx >= mem[_1826]:
                                                        revert with 'NH{q', 50
                                                    mem[_16981 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                    mem[_16981 + 160] = _19043 * _19377 / 10^18
                                                    if idx >= mem[_1826]:
                                                        revert with 'NH{q', 50
                                                    mem[_16981 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                            else:
                                if _19043 and _19059 > -1 / _19043:
                                    revert with 'NH{q', 17
                                if not _19043:
                                    revert with 'NH{q', 18
                                if _19043 * _19059 / _19043 != _19059:
                                    _19179 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 23
                                    idx = 0
                                    while idx < 23:
                                        mem[idx + _19179 + 68] = mem[idx + _19087 + 32]
                                        _18813 = mem[_1826]
                                        idx = idx + 32
                                        continue 
                                    mem[_19179 + 91] = 0
                                    revert with memory
                                      from mem[64]
                                       len _19179 + -mem[64] + 100
                                mem[_19078] = _19043 * _19059
                                if _18931 <= 0:
                                    _19412 = mem[64]
                                    mem[64] = mem[64] + 32
                                    mem[_19412] = _19043
                                    if idx >= mem[_1826]:
                                        revert with 'NH{q', 50
                                    _19455 = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                    _19566 = mem[64]
                                    mem[64] = mem[64] + 32
                                    mem[_19566] = 0
                                    _19567 = mem[64]
                                    mem[64] = mem[64] + 32
                                    _19614 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_19614] = 23
                                    mem[_19614 + 32] = 'multiplication overflow'
                                    if not _19043:
                                        mem[_19567] = 0
                                        if 0 / 10^18 > mem[_16981 + 160]:
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_16981 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                            mem[_16981 + 160] = 0 / 10^18
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_16981 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                    else:
                                        if not _19455:
                                            mem[_19567] = 0
                                            if 0 / 10^18 > mem[_16981 + 160]:
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_16981 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                mem[_16981 + 160] = 0 / 10^18
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_16981 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                        else:
                                            if _19043 and _19455 > -1 / _19043:
                                                revert with 'NH{q', 17
                                            if not _19043:
                                                revert with 'NH{q', 18
                                            if _19043 * _19455 / _19043 != _19455:
                                                _20089 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 23
                                                idx = 0
                                                while idx < 23:
                                                    mem[idx + _20089 + 68] = mem[idx + _19614 + 32]
                                                    _18813 = mem[_1826]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_20089 + 91] = 0
                                                revert with memory
                                                  from mem[64]
                                                   len _20089 + -mem[64] + 100
                                            mem[_19567] = _19043 * _19455
                                            if _19043 * _19455 / 10^18 > mem[_16981 + 160]:
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_16981 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                mem[_16981 + 160] = _19043 * _19455 / 10^18
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_16981 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                else:
                                    if _19043 * _19059 / 10^18 <= mem[_16981 + 96]:
                                        _19456 = mem[64]
                                        mem[64] = mem[64] + 32
                                        mem[_19456] = _19043
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        _19512 = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                        _19615 = mem[64]
                                        mem[64] = mem[64] + 32
                                        mem[_19615] = 0
                                        _19616 = mem[64]
                                        mem[64] = mem[64] + 32
                                        _19662 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_19662] = 23
                                        mem[_19662 + 32] = 'multiplication overflow'
                                        if not _19043:
                                            mem[_19616] = 0
                                            if 0 / 10^18 > mem[_16981 + 160]:
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_16981 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                mem[_16981 + 160] = 0 / 10^18
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_16981 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                        else:
                                            if not _19512:
                                                mem[_19616] = 0
                                                if 0 / 10^18 > mem[_16981 + 160]:
                                                    if idx >= mem[_1826]:
                                                        revert with 'NH{q', 50
                                                    mem[_16981 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                    mem[_16981 + 160] = 0 / 10^18
                                                    if idx >= mem[_1826]:
                                                        revert with 'NH{q', 50
                                                    mem[_16981 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                            else:
                                                if _19043 and _19512 > -1 / _19043:
                                                    revert with 'NH{q', 17
                                                if not _19043:
                                                    revert with 'NH{q', 18
                                                if _19043 * _19512 / _19043 != _19512:
                                                    _20139 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 23
                                                    idx = 0
                                                    while idx < 23:
                                                        mem[idx + _20139 + 68] = mem[idx + _19662 + 32]
                                                        _18813 = mem[_1826]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_20139 + 91] = 0
                                                    revert with memory
                                                      from mem[64]
                                                       len _20139 + -mem[64] + 100
                                                mem[_19616] = _19043 * _19512
                                                if _19043 * _19512 / 10^18 > mem[_16981 + 160]:
                                                    if idx >= mem[_1826]:
                                                        revert with 'NH{q', 50
                                                    mem[_16981 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                    mem[_16981 + 160] = _19043 * _19512 / 10^18
                                                    if idx >= mem[_1826]:
                                                        revert with 'NH{q', 50
                                                    mem[_16981 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                    else:
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        mem[_16981 + 64] = mem[mem[(32 * idx) + _1826 + 32] + 32]
                                        mem[_16981 + 96] = _19043 * _19059 / 10^18
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        mem[_16981] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                        _19618 = mem[64]
                                        mem[64] = mem[64] + 32
                                        mem[_19618] = _19043
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        _19664 = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                        _19740 = mem[64]
                                        mem[64] = mem[64] + 32
                                        mem[_19740] = 0
                                        _19741 = mem[64]
                                        mem[64] = mem[64] + 32
                                        _19782 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_19782] = 23
                                        mem[_19782 + 32] = 'multiplication overflow'
                                        if not _19043:
                                            mem[_19741] = 0
                                            if 0 / 10^18 > mem[_16981 + 160]:
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_16981 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                mem[_16981 + 160] = 0 / 10^18
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_16981 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                        else:
                                            if not _19664:
                                                mem[_19741] = 0
                                                if 0 / 10^18 > mem[_16981 + 160]:
                                                    if idx >= mem[_1826]:
                                                        revert with 'NH{q', 50
                                                    mem[_16981 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                    mem[_16981 + 160] = 0 / 10^18
                                                    if idx >= mem[_1826]:
                                                        revert with 'NH{q', 50
                                                    mem[_16981 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                            else:
                                                if _19043 and _19664 > -1 / _19043:
                                                    revert with 'NH{q', 17
                                                if not _19043:
                                                    revert with 'NH{q', 18
                                                if _19043 * _19664 / _19043 != _19664:
                                                    _20338 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 23
                                                    idx = 0
                                                    while idx < 23:
                                                        mem[idx + _20338 + 68] = mem[idx + _19782 + 32]
                                                        _18813 = mem[_1826]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_20338 + 91] = 0
                                                    revert with memory
                                                      from mem[64]
                                                       len _20338 + -mem[64] + 100
                                                mem[_19741] = _19043 * _19664
                                                if _19043 * _19664 / 10^18 > mem[_16981 + 160]:
                                                    if idx >= mem[_1826]:
                                                        revert with 'NH{q', 50
                                                    mem[_16981 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                    mem[_16981 + 160] = _19043 * _19664 / 10^18
                                                    if idx >= mem[_1826]:
                                                        revert with 'NH{q', 50
                                                    mem[_16981 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
            if idx == -1:
                revert with 'NH{q', 17
            _18813 = mem[_1826]
            idx = idx + 1
            continue 
        _18815 = mem[_16981 + 32]
        _18816 = mem[_16981]
        _18817 = mem[_16981 + 128]
        mem[224] = mem[_16981 + 160]
        mem[192] = _18817
        mem[160] = address(_18816)
        mem[128] = address(_18815)
        mem[mem[64]] = mem[108 len 20]
        mem[mem[64] + 32] = address(_18815)
        mem[mem[64] + 64] = address(_18816)
        mem[mem[64] + 96] = _18817
        mem[mem[64] + 128] = mem[224]
        mem[mem[64] + 160] = bool(mem[256])
        return mem[mem[64]], address(_18815), address(_18816), _18817, mem[mem[64] + 128 len 64]
    mem[64] = _1826 + (32 * _24) + 544
    mem[_1826 + (32 * _24) + 416] = 0
    mem[_1826 + (32 * _24) + 448] = 0
    mem[_1826 + (32 * _24) + 480] = 0
    mem[_1826 + (32 * _24) + 512] = 0
    mem[var53002] = var53001
    if not var53003 - 1:
        idx = 0
        while idx < _24:
            if idx >= mem[(4 * ceil32(return_data.size)) + 288]:
                revert with 'NH{q', 50
            _21447 = mem[(32 * idx) + (4 * ceil32(return_data.size)) + 320]
            mem[mem[64] + 4] = address(arg2)
            staticcall address(_21447).borrowBalanceStored(address arg1) with:
                    gas gas_remaining wei
                   args address(arg2)
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _21450 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _21499 = mem[_21450]
            _21506 = mem[64]
            mem[64] = mem[64] + 128
            if idx >= mem[(4 * ceil32(return_data.size)) + 288]:
                revert with 'NH{q', 50
            mem[_21506] = mem[(32 * idx) + (4 * ceil32(return_data.size)) + 332 len 20]
            if idx >= mem[(4 * ceil32(return_data.size)) + 288]:
                revert with 'NH{q', 50
            _21517 = mem[(32 * idx) + (4 * ceil32(return_data.size)) + 320]
            mem[mem[64] + 4] = address(arg2)
            staticcall address(_21517).0x70a08231 with:
                    gas gas_remaining wei
                   args address(arg2)
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _21542 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _21557 = mem[_21542]
            if mem[_21542] <= 0:
                mem[_21506 + 32] = 0
                mem[_21506 + 64] = _21499
                _21588 = mem[64]
                mem[64] = mem[64] + 32
                mem[_21588] = ext_call.return_data[0]
                _21596 = mem[64]
                mem[64] = mem[64] + 32
                mem[_21596] = 0
                _21597 = mem[64]
                mem[64] = mem[64] + 32
                _21602 = mem[64]
                mem[64] = mem[64] + 64
                mem[_21602] = 23
                mem[_21602 + 32] = 'multiplication overflow'
                if not ext_call.return_data[0]:
                    mem[_21597] = 0
                    mem[_21506 + 96] = 0 / 10^18
                    if idx >= mem[_1826]:
                        revert with 'NH{q', 50
                    mem[(32 * idx) + _1826 + 32] = _21506
                    if idx == -1:
                        revert with 'NH{q', 17
                    idx = idx + 1
                    continue 
                if not _21499:
                    mem[_21597] = 0
                    mem[_21506 + 96] = 0 / 10^18
                    if idx >= mem[_1826]:
                        revert with 'NH{q', 50
                    mem[(32 * idx) + _1826 + 32] = _21506
                    if idx == -1:
                        revert with 'NH{q', 17
                    idx = idx + 1
                    continue 
                if ext_call.return_data[0] and _21499 > -1 / ext_call.return_data[0]:
                    revert with 'NH{q', 17
                if not ext_call.return_data[0]:
                    revert with 'NH{q', 18
                if ext_call.return_data[0] * _21499 / ext_call.return_data[0] == _21499:
                    mem[_21597] = ext_call.return_data[0] * _21499
                    mem[_21506 + 96] = ext_call.return_data[0] * _21499 / 10^18
                    if idx >= mem[_1826]:
                        revert with 'NH{q', 50
                    mem[(32 * idx) + _1826 + 32] = _21506
                    if idx == -1:
                        revert with 'NH{q', 17
                    idx = idx + 1
                    continue 
                _21647 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 23
                idx = 0
                while idx < 23:
                    mem[idx + _21647 + 68] = mem[idx + _21602 + 32]
                    idx = idx + 32
                    continue 
                mem[_21647 + 91] = 0
                revert with memory
                  from mem[64]
                   len _21647 + -mem[64] + 100
            _21574 = mem[64]
            mem[64] = mem[64] + 32
            staticcall address(_21517).exchangeRateStored() with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _21584 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[_21574] = mem[_21584]
            _21607 = mem[64]
            mem[64] = mem[64] + 32
            mem[_21607] = 0
            _21608 = mem[64]
            mem[64] = mem[64] + 32
            _21609 = mem[_21574]
            _21613 = mem[64]
            mem[64] = mem[64] + 64
            mem[_21613] = 23
            mem[_21613 + 32] = 'multiplication overflow'
            if not _21609:
                mem[_21608] = 0
                mem[_21506 + 32] = 0 / 10^18
                mem[_21506 + 64] = _21499
                _21703 = mem[64]
                mem[64] = mem[64] + 32
                mem[_21703] = ext_call.return_data[0]
                _21720 = mem[64]
                mem[64] = mem[64] + 32
                mem[_21720] = 0
                _21721 = mem[64]
                mem[64] = mem[64] + 32
                _21730 = mem[64]
                mem[64] = mem[64] + 64
                mem[_21730] = 23
                mem[_21730 + 32] = 'multiplication overflow'
                if not ext_call.return_data[0]:
                    mem[_21721] = 0
                    mem[_21506 + 96] = 0 / 10^18
                    if idx >= mem[_1826]:
                        revert with 'NH{q', 50
                    mem[(32 * idx) + _1826 + 32] = _21506
                    if idx == -1:
                        revert with 'NH{q', 17
                    idx = idx + 1
                    continue 
                if not _21499:
                    mem[_21721] = 0
                    mem[_21506 + 96] = 0 / 10^18
                    if idx >= mem[_1826]:
                        revert with 'NH{q', 50
                    mem[(32 * idx) + _1826 + 32] = _21506
                    if idx == -1:
                        revert with 'NH{q', 17
                    idx = idx + 1
                    continue 
                if ext_call.return_data[0] and _21499 > -1 / ext_call.return_data[0]:
                    revert with 'NH{q', 17
                if not ext_call.return_data[0]:
                    revert with 'NH{q', 18
                if ext_call.return_data[0] * _21499 / ext_call.return_data[0] == _21499:
                    mem[_21721] = ext_call.return_data[0] * _21499
                    mem[_21506 + 96] = ext_call.return_data[0] * _21499 / 10^18
                    if idx >= mem[_1826]:
                        revert with 'NH{q', 50
                    mem[(32 * idx) + _1826 + 32] = _21506
                    if idx == -1:
                        revert with 'NH{q', 17
                    idx = idx + 1
                    continue 
                _21779 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 23
                idx = 0
                while idx < 23:
                    mem[idx + _21779 + 68] = mem[idx + _21730 + 32]
                    idx = idx + 32
                    continue 
                mem[_21779 + 91] = 0
                revert with memory
                  from mem[64]
                   len _21779 + -mem[64] + 100
            if not _21557:
                mem[_21608] = 0
                mem[_21506 + 32] = 0 / 10^18
                mem[_21506 + 64] = _21499
                _21714 = mem[64]
                mem[64] = mem[64] + 32
                mem[_21714] = ext_call.return_data[0]
                _21731 = mem[64]
                mem[64] = mem[64] + 32
                mem[_21731] = 0
                _21732 = mem[64]
                mem[64] = mem[64] + 32
                _21738 = mem[64]
                mem[64] = mem[64] + 64
                mem[_21738] = 23
                mem[_21738 + 32] = 'multiplication overflow'
                if not ext_call.return_data[0]:
                    mem[_21732] = 0
                    mem[_21506 + 96] = 0 / 10^18
                    if idx >= mem[_1826]:
                        revert with 'NH{q', 50
                    mem[(32 * idx) + _1826 + 32] = _21506
                    if idx == -1:
                        revert with 'NH{q', 17
                    idx = idx + 1
                    continue 
                if not _21499:
                    mem[_21732] = 0
                    mem[_21506 + 96] = 0 / 10^18
                    if idx >= mem[_1826]:
                        revert with 'NH{q', 50
                    mem[(32 * idx) + _1826 + 32] = _21506
                    if idx == -1:
                        revert with 'NH{q', 17
                    idx = idx + 1
                    continue 
                if ext_call.return_data[0] and _21499 > -1 / ext_call.return_data[0]:
                    revert with 'NH{q', 17
                if not ext_call.return_data[0]:
                    revert with 'NH{q', 18
                if ext_call.return_data[0] * _21499 / ext_call.return_data[0] == _21499:
                    mem[_21732] = ext_call.return_data[0] * _21499
                    mem[_21506 + 96] = ext_call.return_data[0] * _21499 / 10^18
                    if idx >= mem[_1826]:
                        revert with 'NH{q', 50
                    mem[(32 * idx) + _1826 + 32] = _21506
                    if idx == -1:
                        revert with 'NH{q', 17
                    idx = idx + 1
                    continue 
                _21787 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 23
                idx = 0
                while idx < 23:
                    mem[idx + _21787 + 68] = mem[idx + _21738 + 32]
                    idx = idx + 32
                    continue 
                mem[_21787 + 91] = 0
                revert with memory
                  from mem[64]
                   len _21787 + -mem[64] + 100
            if _21609 and _21557 > -1 / _21609:
                revert with 'NH{q', 17
            if not _21609:
                revert with 'NH{q', 18
            if _21609 * _21557 / _21609 != _21557:
                _21658 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 23
                idx = 0
                while idx < 23:
                    mem[idx + _21658 + 68] = mem[idx + _21613 + 32]
                    idx = idx + 32
                    continue 
                mem[_21658 + 91] = 0
                revert with memory
                  from mem[64]
                   len _21658 + -mem[64] + 100
            mem[_21608] = _21609 * _21557
            mem[_21506 + 32] = _21609 * _21557 / 10^18
            mem[_21506 + 64] = _21499
            _21754 = mem[64]
            mem[64] = mem[64] + 32
            mem[_21754] = ext_call.return_data[0]
            _21758 = mem[64]
            mem[64] = mem[64] + 32
            mem[_21758] = 0
            _21759 = mem[64]
            mem[64] = mem[64] + 32
            _21764 = mem[64]
            mem[64] = mem[64] + 64
            mem[_21764] = 23
            mem[_21764 + 32] = 'multiplication overflow'
            if not ext_call.return_data[0]:
                mem[_21759] = 0
                mem[_21506 + 96] = 0 / 10^18
                if idx >= mem[_1826]:
                    revert with 'NH{q', 50
                mem[(32 * idx) + _1826 + 32] = _21506
                if idx == -1:
                    revert with 'NH{q', 17
                idx = idx + 1
                continue 
            if not _21499:
                mem[_21759] = 0
                mem[_21506 + 96] = 0 / 10^18
                if idx >= mem[_1826]:
                    revert with 'NH{q', 50
                mem[(32 * idx) + _1826 + 32] = _21506
                if idx == -1:
                    revert with 'NH{q', 17
                idx = idx + 1
                continue 
            if ext_call.return_data[0] and _21499 > -1 / ext_call.return_data[0]:
                revert with 'NH{q', 17
            if not ext_call.return_data[0]:
                revert with 'NH{q', 18
            if ext_call.return_data[0] * _21499 / ext_call.return_data[0] == _21499:
                mem[_21759] = ext_call.return_data[0] * _21499
                mem[_21506 + 96] = ext_call.return_data[0] * _21499 / 10^18
                if idx >= mem[_1826]:
                    revert with 'NH{q', 50
                mem[(32 * idx) + _1826 + 32] = _21506
                if idx == -1:
                    revert with 'NH{q', 17
                idx = idx + 1
                continue 
            _21919 = mem[64]
            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = 32
            mem[mem[64] + 36] = 23
            idx = 0
            while idx < 23:
                mem[idx + _21919 + 68] = mem[idx + _21764 + 32]
                idx = idx + 32
                continue 
            mem[_21919 + 91] = 0
            revert with memory
              from mem[64]
               len _21919 + -mem[64] + 100
        _21446 = mem[64]
        mem[64] = mem[64] + 192
        mem[_21446] = 0
        mem[_21446 + 32] = 0
        mem[_21446 + 64] = 0
        mem[_21446 + 96] = 0
        mem[_21446 + 128] = 0
        mem[_21446 + 160] = 0
        _23278 = mem[_1826]
        idx = 0
        while idx < _23278:
            if idx >= mem[_1826]:
                revert with 'NH{q', 50
            if idx >= mem[_1826]:
                revert with 'NH{q', 50
            if mem[mem[(32 * idx) + _1826 + 32] + 32] > 0:
                staticcall address(arg1).markets(address arg1) with:
                        gas gas_remaining wei
                       args address(mem[mem[(32 * idx) + _1826 + 32]])
                mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _23326 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 96
                require mem[_23326] == bool(mem[_23326])
                _23370 = mem[_23326 + 32]
                require mem[_23326 + 64] == bool(mem[_23326 + 64])
                if mem[_23326]:
                    staticcall address(arg1).oracle() with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _23433 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _23445 = mem[_23433]
                    require mem[_23433] == mem[_23433 + 12 len 20]
                    if idx >= mem[_1826]:
                        revert with 'NH{q', 50
                    _23476 = mem[mem[(32 * idx) + _1826 + 32]]
                    mem[mem[64] + 4] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                    staticcall address(_23445).getUnderlyingPrice(address arg1) with:
                            gas gas_remaining wei
                           args address(_23476)
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _23486 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _23498 = mem[_23486]
                    _23503 = mem[64]
                    mem[64] = mem[64] + 32
                    mem[_23503] = _23498
                    if idx >= mem[_1826]:
                        revert with 'NH{q', 50
                    _23507 = mem[mem[(32 * idx) + _1826 + 32] + 32]
                    _23520 = mem[64]
                    mem[64] = mem[64] + 32
                    mem[_23520] = 0
                    _23521 = mem[64]
                    mem[64] = mem[64] + 32
                    _23531 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_23531] = 23
                    mem[_23531 + 32] = 'multiplication overflow'
                    if not _23498:
                        mem[_23521] = 0
                        if _23370 <= 0:
                            _23653 = mem[64]
                            mem[64] = mem[64] + 32
                            mem[_23653] = _23498
                            if idx >= mem[_1826]:
                                revert with 'NH{q', 50
                            _23665 = mem[mem[(32 * idx) + _1826 + 32] + 96]
                            _23700 = mem[64]
                            mem[64] = mem[64] + 32
                            mem[_23700] = 0
                            _23701 = mem[64]
                            mem[64] = mem[64] + 32
                            _23724 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_23724] = 23
                            mem[_23724 + 32] = 'multiplication overflow'
                            if not _23498:
                                mem[_23701] = 0
                                if 0 / 10^18 > mem[_21446 + 160]:
                                    if idx >= mem[_1826]:
                                        revert with 'NH{q', 50
                                    mem[_21446 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                    mem[_21446 + 160] = 0 / 10^18
                                    if idx >= mem[_1826]:
                                        revert with 'NH{q', 50
                                    mem[_21446 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                            else:
                                if not _23665:
                                    mem[_23701] = 0
                                    if 0 / 10^18 > mem[_21446 + 160]:
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        mem[_21446 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                        mem[_21446 + 160] = 0 / 10^18
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        mem[_21446 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                else:
                                    if _23498 and _23665 > -1 / _23498:
                                        revert with 'NH{q', 17
                                    if not _23498:
                                        revert with 'NH{q', 18
                                    if _23498 * _23665 / _23498 != _23665:
                                        _24120 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 23
                                        idx = 0
                                        while idx < 23:
                                            mem[idx + _24120 + 68] = mem[idx + _23724 + 32]
                                            _23278 = mem[_1826]
                                            idx = idx + 32
                                            continue 
                                        mem[_24120 + 91] = 0
                                        revert with memory
                                          from mem[64]
                                           len _24120 + -mem[64] + 100
                                    mem[_23701] = _23498 * _23665
                                    if _23498 * _23665 / 10^18 > mem[_21446 + 160]:
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        mem[_21446 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                        mem[_21446 + 160] = _23498 * _23665 / 10^18
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        mem[_21446 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                        else:
                            if 0 / 10^18 <= mem[_21446 + 96]:
                                _23666 = mem[64]
                                mem[64] = mem[64] + 32
                                mem[_23666] = _23498
                                if idx >= mem[_1826]:
                                    revert with 'NH{q', 50
                                _23680 = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                _23725 = mem[64]
                                mem[64] = mem[64] + 32
                                mem[_23725] = 0
                                _23726 = mem[64]
                                mem[64] = mem[64] + 32
                                _23751 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_23751] = 23
                                mem[_23751 + 32] = 'multiplication overflow'
                                if not _23498:
                                    mem[_23726] = 0
                                    if 0 / 10^18 > mem[_21446 + 160]:
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        mem[_21446 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                        mem[_21446 + 160] = 0 / 10^18
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        mem[_21446 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                else:
                                    if not _23680:
                                        mem[_23726] = 0
                                        if 0 / 10^18 > mem[_21446 + 160]:
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_21446 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                            mem[_21446 + 160] = 0 / 10^18
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_21446 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                    else:
                                        if _23498 and _23680 > -1 / _23498:
                                            revert with 'NH{q', 17
                                        if not _23498:
                                            revert with 'NH{q', 18
                                        if _23498 * _23680 / _23498 != _23680:
                                            _24164 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 23
                                            idx = 0
                                            while idx < 23:
                                                mem[idx + _24164 + 68] = mem[idx + _23751 + 32]
                                                _23278 = mem[_1826]
                                                idx = idx + 32
                                                continue 
                                            mem[_24164 + 91] = 0
                                            revert with memory
                                              from mem[64]
                                               len _24164 + -mem[64] + 100
                                        mem[_23726] = _23498 * _23680
                                        if _23498 * _23680 / 10^18 > mem[_21446 + 160]:
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_21446 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                            mem[_21446 + 160] = _23498 * _23680 / 10^18
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_21446 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                            else:
                                if idx >= mem[_1826]:
                                    revert with 'NH{q', 50
                                mem[_21446 + 64] = mem[mem[(32 * idx) + _1826 + 32] + 32]
                                mem[_21446 + 96] = 0 / 10^18
                                if idx >= mem[_1826]:
                                    revert with 'NH{q', 50
                                mem[_21446] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                _23728 = mem[64]
                                mem[64] = mem[64] + 32
                                mem[_23728] = _23498
                                if idx >= mem[_1826]:
                                    revert with 'NH{q', 50
                                _23753 = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                _23800 = mem[64]
                                mem[64] = mem[64] + 32
                                mem[_23800] = 0
                                _23801 = mem[64]
                                mem[64] = mem[64] + 32
                                _23830 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_23830] = 23
                                mem[_23830 + 32] = 'multiplication overflow'
                                if not _23498:
                                    mem[_23801] = 0
                                    if 0 / 10^18 > mem[_21446 + 160]:
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        mem[_21446 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                        mem[_21446 + 160] = 0 / 10^18
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        mem[_21446 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                else:
                                    if not _23753:
                                        mem[_23801] = 0
                                        if 0 / 10^18 > mem[_21446 + 160]:
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_21446 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                            mem[_21446 + 160] = 0 / 10^18
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_21446 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                    else:
                                        if _23498 and _23753 > -1 / _23498:
                                            revert with 'NH{q', 17
                                        if not _23498:
                                            revert with 'NH{q', 18
                                        if _23498 * _23753 / _23498 != _23753:
                                            _24282 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 23
                                            idx = 0
                                            while idx < 23:
                                                mem[idx + _24282 + 68] = mem[idx + _23830 + 32]
                                                _23278 = mem[_1826]
                                                idx = idx + 32
                                                continue 
                                            mem[_24282 + 91] = 0
                                            revert with memory
                                              from mem[64]
                                               len _24282 + -mem[64] + 100
                                        mem[_23801] = _23498 * _23753
                                        if _23498 * _23753 / 10^18 > mem[_21446 + 160]:
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_21446 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                            mem[_21446 + 160] = _23498 * _23753 / 10^18
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_21446 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                    else:
                        if not _23507:
                            mem[_23521] = 0
                            if _23370 <= 0:
                                _23670 = mem[64]
                                mem[64] = mem[64] + 32
                                mem[_23670] = _23498
                                if idx >= mem[_1826]:
                                    revert with 'NH{q', 50
                                _23685 = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                _23730 = mem[64]
                                mem[64] = mem[64] + 32
                                mem[_23730] = 0
                                _23731 = mem[64]
                                mem[64] = mem[64] + 32
                                _23754 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_23754] = 23
                                mem[_23754 + 32] = 'multiplication overflow'
                                if not _23498:
                                    mem[_23731] = 0
                                    if 0 / 10^18 > mem[_21446 + 160]:
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        mem[_21446 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                        mem[_21446 + 160] = 0 / 10^18
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        mem[_21446 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                else:
                                    if not _23685:
                                        mem[_23731] = 0
                                        if 0 / 10^18 > mem[_21446 + 160]:
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_21446 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                            mem[_21446 + 160] = 0 / 10^18
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_21446 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                    else:
                                        if _23498 and _23685 > -1 / _23498:
                                            revert with 'NH{q', 17
                                        if not _23498:
                                            revert with 'NH{q', 18
                                        if _23498 * _23685 / _23498 != _23685:
                                            _24167 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 23
                                            idx = 0
                                            while idx < 23:
                                                mem[idx + _24167 + 68] = mem[idx + _23754 + 32]
                                                _23278 = mem[_1826]
                                                idx = idx + 32
                                                continue 
                                            mem[_24167 + 91] = 0
                                            revert with memory
                                              from mem[64]
                                               len _24167 + -mem[64] + 100
                                        mem[_23731] = _23498 * _23685
                                        if _23498 * _23685 / 10^18 > mem[_21446 + 160]:
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_21446 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                            mem[_21446 + 160] = _23498 * _23685 / 10^18
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_21446 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                            else:
                                if 0 / 10^18 <= mem[_21446 + 96]:
                                    _23686 = mem[64]
                                    mem[64] = mem[64] + 32
                                    mem[_23686] = _23498
                                    if idx >= mem[_1826]:
                                        revert with 'NH{q', 50
                                    _23706 = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                    _23755 = mem[64]
                                    mem[64] = mem[64] + 32
                                    mem[_23755] = 0
                                    _23756 = mem[64]
                                    mem[64] = mem[64] + 32
                                    _23777 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_23777] = 23
                                    mem[_23777 + 32] = 'multiplication overflow'
                                    if not _23498:
                                        mem[_23756] = 0
                                        if 0 / 10^18 > mem[_21446 + 160]:
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_21446 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                            mem[_21446 + 160] = 0 / 10^18
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_21446 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                    else:
                                        if not _23706:
                                            mem[_23756] = 0
                                            if 0 / 10^18 > mem[_21446 + 160]:
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_21446 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                mem[_21446 + 160] = 0 / 10^18
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_21446 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                        else:
                                            if _23498 and _23706 > -1 / _23498:
                                                revert with 'NH{q', 17
                                            if not _23498:
                                                revert with 'NH{q', 18
                                            if _23498 * _23706 / _23498 != _23706:
                                                _24202 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 23
                                                idx = 0
                                                while idx < 23:
                                                    mem[idx + _24202 + 68] = mem[idx + _23777 + 32]
                                                    _23278 = mem[_1826]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_24202 + 91] = 0
                                                revert with memory
                                                  from mem[64]
                                                   len _24202 + -mem[64] + 100
                                            mem[_23756] = _23498 * _23706
                                            if _23498 * _23706 / 10^18 > mem[_21446 + 160]:
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_21446 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                mem[_21446 + 160] = _23498 * _23706 / 10^18
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_21446 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                else:
                                    if idx >= mem[_1826]:
                                        revert with 'NH{q', 50
                                    mem[_21446 + 64] = mem[mem[(32 * idx) + _1826 + 32] + 32]
                                    mem[_21446 + 96] = 0 / 10^18
                                    if idx >= mem[_1826]:
                                        revert with 'NH{q', 50
                                    mem[_21446] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                    _23758 = mem[64]
                                    mem[64] = mem[64] + 32
                                    mem[_23758] = _23498
                                    if idx >= mem[_1826]:
                                        revert with 'NH{q', 50
                                    _23779 = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                    _23836 = mem[64]
                                    mem[64] = mem[64] + 32
                                    mem[_23836] = 0
                                    _23837 = mem[64]
                                    mem[64] = mem[64] + 32
                                    _23873 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_23873] = 23
                                    mem[_23873 + 32] = 'multiplication overflow'
                                    if not _23498:
                                        mem[_23837] = 0
                                        if 0 / 10^18 > mem[_21446 + 160]:
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_21446 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                            mem[_21446 + 160] = 0 / 10^18
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_21446 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                    else:
                                        if not _23779:
                                            mem[_23837] = 0
                                            if 0 / 10^18 > mem[_21446 + 160]:
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_21446 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                mem[_21446 + 160] = 0 / 10^18
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_21446 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                        else:
                                            if _23498 and _23779 > -1 / _23498:
                                                revert with 'NH{q', 17
                                            if not _23498:
                                                revert with 'NH{q', 18
                                            if _23498 * _23779 / _23498 != _23779:
                                                _24333 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 23
                                                idx = 0
                                                while idx < 23:
                                                    mem[idx + _24333 + 68] = mem[idx + _23873 + 32]
                                                    _23278 = mem[_1826]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_24333 + 91] = 0
                                                revert with memory
                                                  from mem[64]
                                                   len _24333 + -mem[64] + 100
                                            mem[_23837] = _23498 * _23779
                                            if _23498 * _23779 / 10^18 > mem[_21446 + 160]:
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_21446 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                mem[_21446 + 160] = _23498 * _23779 / 10^18
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_21446 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                        else:
                            if _23498 and _23507 > -1 / _23498:
                                revert with 'NH{q', 17
                            if not _23498:
                                revert with 'NH{q', 18
                            if _23498 * _23507 / _23498 != _23507:
                                _23631 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 23
                                idx = 0
                                while idx < 23:
                                    mem[idx + _23631 + 68] = mem[idx + _23531 + 32]
                                    _23278 = mem[_1826]
                                    idx = idx + 32
                                    continue 
                                mem[_23631 + 91] = 0
                                revert with memory
                                  from mem[64]
                                   len _23631 + -mem[64] + 100
                            mem[_23521] = _23498 * _23507
                            if _23370 <= 0:
                                _23803 = mem[64]
                                mem[64] = mem[64] + 32
                                mem[_23803] = _23498
                                if idx >= mem[_1826]:
                                    revert with 'NH{q', 50
                                _23832 = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                _23913 = mem[64]
                                mem[64] = mem[64] + 32
                                mem[_23913] = 0
                                _23914 = mem[64]
                                mem[64] = mem[64] + 32
                                _23970 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_23970] = 23
                                mem[_23970 + 32] = 'multiplication overflow'
                                if not _23498:
                                    mem[_23914] = 0
                                    if 0 / 10^18 > mem[_21446 + 160]:
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        mem[_21446 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                        mem[_21446 + 160] = 0 / 10^18
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        mem[_21446 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                else:
                                    if not _23832:
                                        mem[_23914] = 0
                                        if 0 / 10^18 > mem[_21446 + 160]:
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_21446 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                            mem[_21446 + 160] = 0 / 10^18
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_21446 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                    else:
                                        if _23498 and _23832 > -1 / _23498:
                                            revert with 'NH{q', 17
                                        if not _23498:
                                            revert with 'NH{q', 18
                                        if _23498 * _23832 / _23498 != _23832:
                                            _24424 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 23
                                            idx = 0
                                            while idx < 23:
                                                mem[idx + _24424 + 68] = mem[idx + _23970 + 32]
                                                _23278 = mem[_1826]
                                                idx = idx + 32
                                                continue 
                                            mem[_24424 + 91] = 0
                                            revert with memory
                                              from mem[64]
                                               len _24424 + -mem[64] + 100
                                        mem[_23914] = _23498 * _23832
                                        if _23498 * _23832 / 10^18 > mem[_21446 + 160]:
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_21446 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                            mem[_21446 + 160] = _23498 * _23832 / 10^18
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_21446 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                            else:
                                if _23498 * _23507 / 10^18 <= mem[_21446 + 96]:
                                    _23833 = mem[64]
                                    mem[64] = mem[64] + 32
                                    mem[_23833] = _23498
                                    if idx >= mem[_1826]:
                                        revert with 'NH{q', 50
                                    _23869 = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                    _23971 = mem[64]
                                    mem[64] = mem[64] + 32
                                    mem[_23971] = 0
                                    _23972 = mem[64]
                                    mem[64] = mem[64] + 32
                                    _24027 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_24027] = 23
                                    mem[_24027 + 32] = 'multiplication overflow'
                                    if not _23498:
                                        mem[_23972] = 0
                                        if 0 / 10^18 > mem[_21446 + 160]:
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_21446 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                            mem[_21446 + 160] = 0 / 10^18
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_21446 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                    else:
                                        if not _23869:
                                            mem[_23972] = 0
                                            if 0 / 10^18 > mem[_21446 + 160]:
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_21446 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                mem[_21446 + 160] = 0 / 10^18
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_21446 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                        else:
                                            if _23498 and _23869 > -1 / _23498:
                                                revert with 'NH{q', 17
                                            if not _23498:
                                                revert with 'NH{q', 18
                                            if _23498 * _23869 / _23498 != _23869:
                                                _24478 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 23
                                                idx = 0
                                                while idx < 23:
                                                    mem[idx + _24478 + 68] = mem[idx + _24027 + 32]
                                                    _23278 = mem[_1826]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_24478 + 91] = 0
                                                revert with memory
                                                  from mem[64]
                                                   len _24478 + -mem[64] + 100
                                            mem[_23972] = _23498 * _23869
                                            if _23498 * _23869 / 10^18 > mem[_21446 + 160]:
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_21446 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                mem[_21446 + 160] = _23498 * _23869 / 10^18
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_21446 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                else:
                                    if idx >= mem[_1826]:
                                        revert with 'NH{q', 50
                                    mem[_21446 + 64] = mem[mem[(32 * idx) + _1826 + 32] + 32]
                                    mem[_21446 + 96] = _23498 * _23507 / 10^18
                                    if idx >= mem[_1826]:
                                        revert with 'NH{q', 50
                                    mem[_21446] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                    _23974 = mem[64]
                                    mem[64] = mem[64] + 32
                                    mem[_23974] = _23498
                                    if idx >= mem[_1826]:
                                        revert with 'NH{q', 50
                                    _24029 = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                    _24121 = mem[64]
                                    mem[64] = mem[64] + 32
                                    mem[_24121] = 0
                                    _24122 = mem[64]
                                    mem[64] = mem[64] + 32
                                    _24166 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_24166] = 23
                                    mem[_24166 + 32] = 'multiplication overflow'
                                    if not _23498:
                                        mem[_24122] = 0
                                        if 0 / 10^18 > mem[_21446 + 160]:
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_21446 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                            mem[_21446 + 160] = 0 / 10^18
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_21446 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                    else:
                                        if not _24029:
                                            mem[_24122] = 0
                                            if 0 / 10^18 > mem[_21446 + 160]:
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_21446 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                mem[_21446 + 160] = 0 / 10^18
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_21446 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                        else:
                                            if _23498 and _24029 > -1 / _23498:
                                                revert with 'NH{q', 17
                                            if not _23498:
                                                revert with 'NH{q', 18
                                            if _23498 * _24029 / _23498 != _24029:
                                                _24649 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 23
                                                idx = 0
                                                while idx < 23:
                                                    mem[idx + _24649 + 68] = mem[idx + _24166 + 32]
                                                    _23278 = mem[_1826]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_24649 + 91] = 0
                                                revert with memory
                                                  from mem[64]
                                                   len _24649 + -mem[64] + 100
                                            mem[_24122] = _23498 * _24029
                                            if _23498 * _24029 / 10^18 > mem[_21446 + 160]:
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_21446 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                mem[_21446 + 160] = _23498 * _24029 / 10^18
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_21446 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
            else:
                if mem[mem[(32 * idx) + _1826 + 32] + 64] > 0:
                    if idx >= mem[_1826]:
                        revert with 'NH{q', 50
                    staticcall address(arg1).markets(address arg1) with:
                            gas gas_remaining wei
                           args address(mem[mem[(32 * idx) + _1826 + 32]])
                    mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _23345 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 96
                    require mem[_23345] == bool(mem[_23345])
                    _23396 = mem[_23345 + 32]
                    require mem[_23345 + 64] == bool(mem[_23345 + 64])
                    if mem[_23345]:
                        staticcall address(arg1).oracle() with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _23446 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _23458 = mem[_23446]
                        require mem[_23446] == mem[_23446 + 12 len 20]
                        if idx >= mem[_1826]:
                            revert with 'NH{q', 50
                        _23493 = mem[mem[(32 * idx) + _1826 + 32]]
                        mem[mem[64] + 4] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                        staticcall address(_23458).getUnderlyingPrice(address arg1) with:
                                gas gas_remaining wei
                               args address(_23493)
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _23499 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _23508 = mem[_23499]
                        _23512 = mem[64]
                        mem[64] = mem[64] + 32
                        mem[_23512] = _23508
                        if idx >= mem[_1826]:
                            revert with 'NH{q', 50
                        _23524 = mem[mem[(32 * idx) + _1826 + 32] + 32]
                        _23542 = mem[64]
                        mem[64] = mem[64] + 32
                        mem[_23542] = 0
                        _23543 = mem[64]
                        mem[64] = mem[64] + 32
                        _23552 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_23552] = 23
                        mem[_23552 + 32] = 'multiplication overflow'
                        if not _23508:
                            mem[_23543] = 0
                            if _23396 <= 0:
                                _23689 = mem[64]
                                mem[64] = mem[64] + 32
                                mem[_23689] = _23508
                                if idx >= mem[_1826]:
                                    revert with 'NH{q', 50
                                _23711 = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                _23760 = mem[64]
                                mem[64] = mem[64] + 32
                                mem[_23760] = 0
                                _23761 = mem[64]
                                mem[64] = mem[64] + 32
                                _23780 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_23780] = 23
                                mem[_23780 + 32] = 'multiplication overflow'
                                if not _23508:
                                    mem[_23761] = 0
                                    if 0 / 10^18 > mem[_21446 + 160]:
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        mem[_21446 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                        mem[_21446 + 160] = 0 / 10^18
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        mem[_21446 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                else:
                                    if not _23711:
                                        mem[_23761] = 0
                                        if 0 / 10^18 > mem[_21446 + 160]:
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_21446 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                            mem[_21446 + 160] = 0 / 10^18
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_21446 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                    else:
                                        if _23508 and _23711 > -1 / _23508:
                                            revert with 'NH{q', 17
                                        if not _23508:
                                            revert with 'NH{q', 18
                                        if _23508 * _23711 / _23508 != _23711:
                                            _24204 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 23
                                            idx = 0
                                            while idx < 23:
                                                mem[idx + _24204 + 68] = mem[idx + _23780 + 32]
                                                _23278 = mem[_1826]
                                                idx = idx + 32
                                                continue 
                                            mem[_24204 + 91] = 0
                                            revert with memory
                                              from mem[64]
                                               len _24204 + -mem[64] + 100
                                        mem[_23761] = _23508 * _23711
                                        if _23508 * _23711 / 10^18 > mem[_21446 + 160]:
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_21446 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                            mem[_21446 + 160] = _23508 * _23711 / 10^18
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_21446 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                            else:
                                if 0 / 10^18 <= mem[_21446 + 96]:
                                    _23712 = mem[64]
                                    mem[64] = mem[64] + 32
                                    mem[_23712] = _23508
                                    if idx >= mem[_1826]:
                                        revert with 'NH{q', 50
                                    _23736 = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                    _23781 = mem[64]
                                    mem[64] = mem[64] + 32
                                    mem[_23781] = 0
                                    _23782 = mem[64]
                                    mem[64] = mem[64] + 32
                                    _23805 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_23805] = 23
                                    mem[_23805 + 32] = 'multiplication overflow'
                                    if not _23508:
                                        mem[_23782] = 0
                                        if 0 / 10^18 > mem[_21446 + 160]:
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_21446 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                            mem[_21446 + 160] = 0 / 10^18
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_21446 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                    else:
                                        if not _23736:
                                            mem[_23782] = 0
                                            if 0 / 10^18 > mem[_21446 + 160]:
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_21446 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                mem[_21446 + 160] = 0 / 10^18
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_21446 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                        else:
                                            if _23508 and _23736 > -1 / _23508:
                                                revert with 'NH{q', 17
                                            if not _23508:
                                                revert with 'NH{q', 18
                                            if _23508 * _23736 / _23508 != _23736:
                                                _24245 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 23
                                                idx = 0
                                                while idx < 23:
                                                    mem[idx + _24245 + 68] = mem[idx + _23805 + 32]
                                                    _23278 = mem[_1826]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_24245 + 91] = 0
                                                revert with memory
                                                  from mem[64]
                                                   len _24245 + -mem[64] + 100
                                            mem[_23782] = _23508 * _23736
                                            if _23508 * _23736 / 10^18 > mem[_21446 + 160]:
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_21446 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                mem[_21446 + 160] = _23508 * _23736 / 10^18
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_21446 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                else:
                                    if idx >= mem[_1826]:
                                        revert with 'NH{q', 50
                                    mem[_21446 + 64] = mem[mem[(32 * idx) + _1826 + 32] + 32]
                                    mem[_21446 + 96] = 0 / 10^18
                                    if idx >= mem[_1826]:
                                        revert with 'NH{q', 50
                                    mem[_21446] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                    _23784 = mem[64]
                                    mem[64] = mem[64] + 32
                                    mem[_23784] = _23508
                                    if idx >= mem[_1826]:
                                        revert with 'NH{q', 50
                                    _23807 = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                    _23874 = mem[64]
                                    mem[64] = mem[64] + 32
                                    mem[_23874] = 0
                                    _23875 = mem[64]
                                    mem[64] = mem[64] + 32
                                    _23918 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_23918] = 23
                                    mem[_23918 + 32] = 'multiplication overflow'
                                    if not _23508:
                                        mem[_23875] = 0
                                        if 0 / 10^18 > mem[_21446 + 160]:
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_21446 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                            mem[_21446 + 160] = 0 / 10^18
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_21446 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                    else:
                                        if not _23807:
                                            mem[_23875] = 0
                                            if 0 / 10^18 > mem[_21446 + 160]:
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_21446 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                mem[_21446 + 160] = 0 / 10^18
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_21446 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                        else:
                                            if _23508 and _23807 > -1 / _23508:
                                                revert with 'NH{q', 17
                                            if not _23508:
                                                revert with 'NH{q', 18
                                            if _23508 * _23807 / _23508 != _23807:
                                                _24388 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 23
                                                idx = 0
                                                while idx < 23:
                                                    mem[idx + _24388 + 68] = mem[idx + _23918 + 32]
                                                    _23278 = mem[_1826]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_24388 + 91] = 0
                                                revert with memory
                                                  from mem[64]
                                                   len _24388 + -mem[64] + 100
                                            mem[_23875] = _23508 * _23807
                                            if _23508 * _23807 / 10^18 > mem[_21446 + 160]:
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_21446 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                mem[_21446 + 160] = _23508 * _23807 / 10^18
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_21446 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                        else:
                            if not _23524:
                                mem[_23543] = 0
                                if _23396 <= 0:
                                    _23716 = mem[64]
                                    mem[64] = mem[64] + 32
                                    mem[_23716] = _23508
                                    if idx >= mem[_1826]:
                                        revert with 'NH{q', 50
                                    _23741 = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                    _23786 = mem[64]
                                    mem[64] = mem[64] + 32
                                    mem[_23786] = 0
                                    _23787 = mem[64]
                                    mem[64] = mem[64] + 32
                                    _23808 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_23808] = 23
                                    mem[_23808 + 32] = 'multiplication overflow'
                                    if not _23508:
                                        mem[_23787] = 0
                                        if 0 / 10^18 > mem[_21446 + 160]:
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_21446 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                            mem[_21446 + 160] = 0 / 10^18
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_21446 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                    else:
                                        if not _23741:
                                            mem[_23787] = 0
                                            if 0 / 10^18 > mem[_21446 + 160]:
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_21446 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                mem[_21446 + 160] = 0 / 10^18
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_21446 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                        else:
                                            if _23508 and _23741 > -1 / _23508:
                                                revert with 'NH{q', 17
                                            if not _23508:
                                                revert with 'NH{q', 18
                                            if _23508 * _23741 / _23508 != _23741:
                                                _24248 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 23
                                                idx = 0
                                                while idx < 23:
                                                    mem[idx + _24248 + 68] = mem[idx + _23808 + 32]
                                                    _23278 = mem[_1826]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_24248 + 91] = 0
                                                revert with memory
                                                  from mem[64]
                                                   len _24248 + -mem[64] + 100
                                            mem[_23787] = _23508 * _23741
                                            if _23508 * _23741 / 10^18 > mem[_21446 + 160]:
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_21446 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                mem[_21446 + 160] = _23508 * _23741 / 10^18
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_21446 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                else:
                                    if 0 / 10^18 <= mem[_21446 + 96]:
                                        _23742 = mem[64]
                                        mem[64] = mem[64] + 32
                                        mem[_23742] = _23508
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        _23766 = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                        _23809 = mem[64]
                                        mem[64] = mem[64] + 32
                                        mem[_23809] = 0
                                        _23810 = mem[64]
                                        mem[64] = mem[64] + 32
                                        _23840 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_23840] = 23
                                        mem[_23840 + 32] = 'multiplication overflow'
                                        if not _23508:
                                            mem[_23810] = 0
                                            if 0 / 10^18 > mem[_21446 + 160]:
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_21446 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                mem[_21446 + 160] = 0 / 10^18
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_21446 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                        else:
                                            if not _23766:
                                                mem[_23810] = 0
                                                if 0 / 10^18 > mem[_21446 + 160]:
                                                    if idx >= mem[_1826]:
                                                        revert with 'NH{q', 50
                                                    mem[_21446 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                    mem[_21446 + 160] = 0 / 10^18
                                                    if idx >= mem[_1826]:
                                                        revert with 'NH{q', 50
                                                    mem[_21446 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                            else:
                                                if _23508 and _23766 > -1 / _23508:
                                                    revert with 'NH{q', 17
                                                if not _23508:
                                                    revert with 'NH{q', 18
                                                if _23508 * _23766 / _23508 != _23766:
                                                    _24289 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 23
                                                    idx = 0
                                                    while idx < 23:
                                                        mem[idx + _24289 + 68] = mem[idx + _23840 + 32]
                                                        _23278 = mem[_1826]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_24289 + 91] = 0
                                                    revert with memory
                                                      from mem[64]
                                                       len _24289 + -mem[64] + 100
                                                mem[_23810] = _23508 * _23766
                                                if _23508 * _23766 / 10^18 > mem[_21446 + 160]:
                                                    if idx >= mem[_1826]:
                                                        revert with 'NH{q', 50
                                                    mem[_21446 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                    mem[_21446 + 160] = _23508 * _23766 / 10^18
                                                    if idx >= mem[_1826]:
                                                        revert with 'NH{q', 50
                                                    mem[_21446 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                    else:
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        mem[_21446 + 64] = mem[mem[(32 * idx) + _1826 + 32] + 32]
                                        mem[_21446 + 96] = 0 / 10^18
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        mem[_21446] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                        _23812 = mem[64]
                                        mem[64] = mem[64] + 32
                                        mem[_23812] = _23508
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        _23842 = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                        _23924 = mem[64]
                                        mem[64] = mem[64] + 32
                                        mem[_23924] = 0
                                        _23925 = mem[64]
                                        mem[64] = mem[64] + 32
                                        _23981 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_23981] = 23
                                        mem[_23981 + 32] = 'multiplication overflow'
                                        if not _23508:
                                            mem[_23925] = 0
                                            if 0 / 10^18 > mem[_21446 + 160]:
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_21446 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                mem[_21446 + 160] = 0 / 10^18
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_21446 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                        else:
                                            if not _23842:
                                                mem[_23925] = 0
                                                if 0 / 10^18 > mem[_21446 + 160]:
                                                    if idx >= mem[_1826]:
                                                        revert with 'NH{q', 50
                                                    mem[_21446 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                    mem[_21446 + 160] = 0 / 10^18
                                                    if idx >= mem[_1826]:
                                                        revert with 'NH{q', 50
                                                    mem[_21446 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                            else:
                                                if _23508 and _23842 > -1 / _23508:
                                                    revert with 'NH{q', 17
                                                if not _23508:
                                                    revert with 'NH{q', 18
                                                if _23508 * _23842 / _23508 != _23842:
                                                    _24452 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 23
                                                    idx = 0
                                                    while idx < 23:
                                                        mem[idx + _24452 + 68] = mem[idx + _23981 + 32]
                                                        _23278 = mem[_1826]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_24452 + 91] = 0
                                                    revert with memory
                                                      from mem[64]
                                                       len _24452 + -mem[64] + 100
                                                mem[_23925] = _23508 * _23842
                                                if _23508 * _23842 / 10^18 > mem[_21446 + 160]:
                                                    if idx >= mem[_1826]:
                                                        revert with 'NH{q', 50
                                                    mem[_21446 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                    mem[_21446 + 160] = _23508 * _23842 / 10^18
                                                    if idx >= mem[_1826]:
                                                        revert with 'NH{q', 50
                                                    mem[_21446 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                            else:
                                if _23508 and _23524 > -1 / _23508:
                                    revert with 'NH{q', 17
                                if not _23508:
                                    revert with 'NH{q', 18
                                if _23508 * _23524 / _23508 != _23524:
                                    _23644 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 23
                                    idx = 0
                                    while idx < 23:
                                        mem[idx + _23644 + 68] = mem[idx + _23552 + 32]
                                        _23278 = mem[_1826]
                                        idx = idx + 32
                                        continue 
                                    mem[_23644 + 91] = 0
                                    revert with memory
                                      from mem[64]
                                       len _23644 + -mem[64] + 100
                                mem[_23543] = _23508 * _23524
                                if _23396 <= 0:
                                    _23877 = mem[64]
                                    mem[64] = mem[64] + 32
                                    mem[_23877] = _23508
                                    if idx >= mem[_1826]:
                                        revert with 'NH{q', 50
                                    _23920 = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                    _24031 = mem[64]
                                    mem[64] = mem[64] + 32
                                    mem[_24031] = 0
                                    _24032 = mem[64]
                                    mem[64] = mem[64] + 32
                                    _24079 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_24079] = 23
                                    mem[_24079 + 32] = 'multiplication overflow'
                                    if not _23508:
                                        mem[_24032] = 0
                                        if 0 / 10^18 > mem[_21446 + 160]:
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_21446 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                            mem[_21446 + 160] = 0 / 10^18
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_21446 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                    else:
                                        if not _23920:
                                            mem[_24032] = 0
                                            if 0 / 10^18 > mem[_21446 + 160]:
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_21446 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                mem[_21446 + 160] = 0 / 10^18
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_21446 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                        else:
                                            if _23508 and _23920 > -1 / _23508:
                                                revert with 'NH{q', 17
                                            if not _23508:
                                                revert with 'NH{q', 18
                                            if _23508 * _23920 / _23508 != _23920:
                                                _24554 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 23
                                                idx = 0
                                                while idx < 23:
                                                    mem[idx + _24554 + 68] = mem[idx + _24079 + 32]
                                                    _23278 = mem[_1826]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_24554 + 91] = 0
                                                revert with memory
                                                  from mem[64]
                                                   len _24554 + -mem[64] + 100
                                            mem[_24032] = _23508 * _23920
                                            if _23508 * _23920 / 10^18 > mem[_21446 + 160]:
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_21446 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                mem[_21446 + 160] = _23508 * _23920 / 10^18
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_21446 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                else:
                                    if _23508 * _23524 / 10^18 <= mem[_21446 + 96]:
                                        _23921 = mem[64]
                                        mem[64] = mem[64] + 32
                                        mem[_23921] = _23508
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        _23977 = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                        _24080 = mem[64]
                                        mem[64] = mem[64] + 32
                                        mem[_24080] = 0
                                        _24081 = mem[64]
                                        mem[64] = mem[64] + 32
                                        _24127 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_24127] = 23
                                        mem[_24127 + 32] = 'multiplication overflow'
                                        if not _23508:
                                            mem[_24081] = 0
                                            if 0 / 10^18 > mem[_21446 + 160]:
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_21446 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                mem[_21446 + 160] = 0 / 10^18
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_21446 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                        else:
                                            if not _23977:
                                                mem[_24081] = 0
                                                if 0 / 10^18 > mem[_21446 + 160]:
                                                    if idx >= mem[_1826]:
                                                        revert with 'NH{q', 50
                                                    mem[_21446 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                    mem[_21446 + 160] = 0 / 10^18
                                                    if idx >= mem[_1826]:
                                                        revert with 'NH{q', 50
                                                    mem[_21446 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                            else:
                                                if _23508 and _23977 > -1 / _23508:
                                                    revert with 'NH{q', 17
                                                if not _23508:
                                                    revert with 'NH{q', 18
                                                if _23508 * _23977 / _23508 != _23977:
                                                    _24604 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 23
                                                    idx = 0
                                                    while idx < 23:
                                                        mem[idx + _24604 + 68] = mem[idx + _24127 + 32]
                                                        _23278 = mem[_1826]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_24604 + 91] = 0
                                                    revert with memory
                                                      from mem[64]
                                                       len _24604 + -mem[64] + 100
                                                mem[_24081] = _23508 * _23977
                                                if _23508 * _23977 / 10^18 > mem[_21446 + 160]:
                                                    if idx >= mem[_1826]:
                                                        revert with 'NH{q', 50
                                                    mem[_21446 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                    mem[_21446 + 160] = _23508 * _23977 / 10^18
                                                    if idx >= mem[_1826]:
                                                        revert with 'NH{q', 50
                                                    mem[_21446 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                    else:
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        mem[_21446 + 64] = mem[mem[(32 * idx) + _1826 + 32] + 32]
                                        mem[_21446 + 96] = _23508 * _23524 / 10^18
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        mem[_21446] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                        _24083 = mem[64]
                                        mem[64] = mem[64] + 32
                                        mem[_24083] = _23508
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        _24129 = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                        _24205 = mem[64]
                                        mem[64] = mem[64] + 32
                                        mem[_24205] = 0
                                        _24206 = mem[64]
                                        mem[64] = mem[64] + 32
                                        _24247 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_24247] = 23
                                        mem[_24247 + 32] = 'multiplication overflow'
                                        if not _23508:
                                            mem[_24206] = 0
                                            if 0 / 10^18 > mem[_21446 + 160]:
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_21446 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                mem[_21446 + 160] = 0 / 10^18
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_21446 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                        else:
                                            if not _24129:
                                                mem[_24206] = 0
                                                if 0 / 10^18 > mem[_21446 + 160]:
                                                    if idx >= mem[_1826]:
                                                        revert with 'NH{q', 50
                                                    mem[_21446 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                    mem[_21446 + 160] = 0 / 10^18
                                                    if idx >= mem[_1826]:
                                                        revert with 'NH{q', 50
                                                    mem[_21446 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                            else:
                                                if _23508 and _24129 > -1 / _23508:
                                                    revert with 'NH{q', 17
                                                if not _23508:
                                                    revert with 'NH{q', 18
                                                if _23508 * _24129 / _23508 != _24129:
                                                    _24803 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 23
                                                    idx = 0
                                                    while idx < 23:
                                                        mem[idx + _24803 + 68] = mem[idx + _24247 + 32]
                                                        _23278 = mem[_1826]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_24803 + 91] = 0
                                                    revert with memory
                                                      from mem[64]
                                                       len _24803 + -mem[64] + 100
                                                mem[_24206] = _23508 * _24129
                                                if _23508 * _24129 / 10^18 > mem[_21446 + 160]:
                                                    if idx >= mem[_1826]:
                                                        revert with 'NH{q', 50
                                                    mem[_21446 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                    mem[_21446 + 160] = _23508 * _24129 / 10^18
                                                    if idx >= mem[_1826]:
                                                        revert with 'NH{q', 50
                                                    mem[_21446 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
            if idx == -1:
                revert with 'NH{q', 17
            _23278 = mem[_1826]
            idx = idx + 1
            continue 
        _23280 = mem[_21446 + 32]
        _23281 = mem[_21446]
        _23282 = mem[_21446 + 128]
        mem[224] = mem[_21446 + 160]
        mem[192] = _23282
        mem[160] = address(_23281)
        mem[128] = address(_23280)
        mem[mem[64]] = mem[108 len 20]
        mem[mem[64] + 32] = address(_23280)
        mem[mem[64] + 64] = address(_23281)
        mem[mem[64] + 96] = _23282
        mem[mem[64] + 128] = mem[224]
        mem[mem[64] + 160] = bool(mem[256])
        return mem[mem[64]], address(_23280), address(_23281), _23282, mem[mem[64] + 128 len 64]
    mem[64] = _1826 + (32 * _24) + 672
    mem[_1826 + (32 * _24) + 544] = 0
    mem[_1826 + (32 * _24) + 576] = 0
    mem[_1826 + (32 * _24) + 608] = 0
    mem[_1826 + (32 * _24) + 640] = 0
    mem[var57002] = var57001
    if not var57003 - 1:
        idx = 0
        while idx < _24:
            if idx >= mem[(4 * ceil32(return_data.size)) + 288]:
                revert with 'NH{q', 50
            _25912 = mem[(32 * idx) + (4 * ceil32(return_data.size)) + 320]
            mem[mem[64] + 4] = address(arg2)
            staticcall address(_25912).borrowBalanceStored(address arg1) with:
                    gas gas_remaining wei
                   args address(arg2)
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _25915 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _25964 = mem[_25915]
            _25971 = mem[64]
            mem[64] = mem[64] + 128
            if idx >= mem[(4 * ceil32(return_data.size)) + 288]:
                revert with 'NH{q', 50
            mem[_25971] = mem[(32 * idx) + (4 * ceil32(return_data.size)) + 332 len 20]
            if idx >= mem[(4 * ceil32(return_data.size)) + 288]:
                revert with 'NH{q', 50
            _25982 = mem[(32 * idx) + (4 * ceil32(return_data.size)) + 320]
            mem[mem[64] + 4] = address(arg2)
            staticcall address(_25982).0x70a08231 with:
                    gas gas_remaining wei
                   args address(arg2)
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _26007 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _26022 = mem[_26007]
            if mem[_26007] <= 0:
                mem[_25971 + 32] = 0
                mem[_25971 + 64] = _25964
                _26053 = mem[64]
                mem[64] = mem[64] + 32
                mem[_26053] = ext_call.return_data[0]
                _26061 = mem[64]
                mem[64] = mem[64] + 32
                mem[_26061] = 0
                _26062 = mem[64]
                mem[64] = mem[64] + 32
                _26067 = mem[64]
                mem[64] = mem[64] + 64
                mem[_26067] = 23
                mem[_26067 + 32] = 'multiplication overflow'
                if not ext_call.return_data[0]:
                    mem[_26062] = 0
                    mem[_25971 + 96] = 0 / 10^18
                    if idx >= mem[_1826]:
                        revert with 'NH{q', 50
                    mem[(32 * idx) + _1826 + 32] = _25971
                    if idx == -1:
                        revert with 'NH{q', 17
                    idx = idx + 1
                    continue 
                if not _25964:
                    mem[_26062] = 0
                    mem[_25971 + 96] = 0 / 10^18
                    if idx >= mem[_1826]:
                        revert with 'NH{q', 50
                    mem[(32 * idx) + _1826 + 32] = _25971
                    if idx == -1:
                        revert with 'NH{q', 17
                    idx = idx + 1
                    continue 
                if ext_call.return_data[0] and _25964 > -1 / ext_call.return_data[0]:
                    revert with 'NH{q', 17
                if not ext_call.return_data[0]:
                    revert with 'NH{q', 18
                if ext_call.return_data[0] * _25964 / ext_call.return_data[0] == _25964:
                    mem[_26062] = ext_call.return_data[0] * _25964
                    mem[_25971 + 96] = ext_call.return_data[0] * _25964 / 10^18
                    if idx >= mem[_1826]:
                        revert with 'NH{q', 50
                    mem[(32 * idx) + _1826 + 32] = _25971
                    if idx == -1:
                        revert with 'NH{q', 17
                    idx = idx + 1
                    continue 
                _26112 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 23
                idx = 0
                while idx < 23:
                    mem[idx + _26112 + 68] = mem[idx + _26067 + 32]
                    idx = idx + 32
                    continue 
                mem[_26112 + 91] = 0
                revert with memory
                  from mem[64]
                   len _26112 + -mem[64] + 100
            _26039 = mem[64]
            mem[64] = mem[64] + 32
            staticcall address(_25982).exchangeRateStored() with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _26049 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[_26039] = mem[_26049]
            _26072 = mem[64]
            mem[64] = mem[64] + 32
            mem[_26072] = 0
            _26073 = mem[64]
            mem[64] = mem[64] + 32
            _26074 = mem[_26039]
            _26078 = mem[64]
            mem[64] = mem[64] + 64
            mem[_26078] = 23
            mem[_26078 + 32] = 'multiplication overflow'
            if not _26074:
                mem[_26073] = 0
                mem[_25971 + 32] = 0 / 10^18
                mem[_25971 + 64] = _25964
                _26168 = mem[64]
                mem[64] = mem[64] + 32
                mem[_26168] = ext_call.return_data[0]
                _26185 = mem[64]
                mem[64] = mem[64] + 32
                mem[_26185] = 0
                _26186 = mem[64]
                mem[64] = mem[64] + 32
                _26195 = mem[64]
                mem[64] = mem[64] + 64
                mem[_26195] = 23
                mem[_26195 + 32] = 'multiplication overflow'
                if not ext_call.return_data[0]:
                    mem[_26186] = 0
                    mem[_25971 + 96] = 0 / 10^18
                    if idx >= mem[_1826]:
                        revert with 'NH{q', 50
                    mem[(32 * idx) + _1826 + 32] = _25971
                    if idx == -1:
                        revert with 'NH{q', 17
                    idx = idx + 1
                    continue 
                if not _25964:
                    mem[_26186] = 0
                    mem[_25971 + 96] = 0 / 10^18
                    if idx >= mem[_1826]:
                        revert with 'NH{q', 50
                    mem[(32 * idx) + _1826 + 32] = _25971
                    if idx == -1:
                        revert with 'NH{q', 17
                    idx = idx + 1
                    continue 
                if ext_call.return_data[0] and _25964 > -1 / ext_call.return_data[0]:
                    revert with 'NH{q', 17
                if not ext_call.return_data[0]:
                    revert with 'NH{q', 18
                if ext_call.return_data[0] * _25964 / ext_call.return_data[0] == _25964:
                    mem[_26186] = ext_call.return_data[0] * _25964
                    mem[_25971 + 96] = ext_call.return_data[0] * _25964 / 10^18
                    if idx >= mem[_1826]:
                        revert with 'NH{q', 50
                    mem[(32 * idx) + _1826 + 32] = _25971
                    if idx == -1:
                        revert with 'NH{q', 17
                    idx = idx + 1
                    continue 
                _26244 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 23
                idx = 0
                while idx < 23:
                    mem[idx + _26244 + 68] = mem[idx + _26195 + 32]
                    idx = idx + 32
                    continue 
                mem[_26244 + 91] = 0
                revert with memory
                  from mem[64]
                   len _26244 + -mem[64] + 100
            if not _26022:
                mem[_26073] = 0
                mem[_25971 + 32] = 0 / 10^18
                mem[_25971 + 64] = _25964
                _26179 = mem[64]
                mem[64] = mem[64] + 32
                mem[_26179] = ext_call.return_data[0]
                _26196 = mem[64]
                mem[64] = mem[64] + 32
                mem[_26196] = 0
                _26197 = mem[64]
                mem[64] = mem[64] + 32
                _26203 = mem[64]
                mem[64] = mem[64] + 64
                mem[_26203] = 23
                mem[_26203 + 32] = 'multiplication overflow'
                if not ext_call.return_data[0]:
                    mem[_26197] = 0
                    mem[_25971 + 96] = 0 / 10^18
                    if idx >= mem[_1826]:
                        revert with 'NH{q', 50
                    mem[(32 * idx) + _1826 + 32] = _25971
                    if idx == -1:
                        revert with 'NH{q', 17
                    idx = idx + 1
                    continue 
                if not _25964:
                    mem[_26197] = 0
                    mem[_25971 + 96] = 0 / 10^18
                    if idx >= mem[_1826]:
                        revert with 'NH{q', 50
                    mem[(32 * idx) + _1826 + 32] = _25971
                    if idx == -1:
                        revert with 'NH{q', 17
                    idx = idx + 1
                    continue 
                if ext_call.return_data[0] and _25964 > -1 / ext_call.return_data[0]:
                    revert with 'NH{q', 17
                if not ext_call.return_data[0]:
                    revert with 'NH{q', 18
                if ext_call.return_data[0] * _25964 / ext_call.return_data[0] == _25964:
                    mem[_26197] = ext_call.return_data[0] * _25964
                    mem[_25971 + 96] = ext_call.return_data[0] * _25964 / 10^18
                    if idx >= mem[_1826]:
                        revert with 'NH{q', 50
                    mem[(32 * idx) + _1826 + 32] = _25971
                    if idx == -1:
                        revert with 'NH{q', 17
                    idx = idx + 1
                    continue 
                _26252 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 23
                idx = 0
                while idx < 23:
                    mem[idx + _26252 + 68] = mem[idx + _26203 + 32]
                    idx = idx + 32
                    continue 
                mem[_26252 + 91] = 0
                revert with memory
                  from mem[64]
                   len _26252 + -mem[64] + 100
            if _26074 and _26022 > -1 / _26074:
                revert with 'NH{q', 17
            if not _26074:
                revert with 'NH{q', 18
            if _26074 * _26022 / _26074 != _26022:
                _26123 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 23
                idx = 0
                while idx < 23:
                    mem[idx + _26123 + 68] = mem[idx + _26078 + 32]
                    idx = idx + 32
                    continue 
                mem[_26123 + 91] = 0
                revert with memory
                  from mem[64]
                   len _26123 + -mem[64] + 100
            mem[_26073] = _26074 * _26022
            mem[_25971 + 32] = _26074 * _26022 / 10^18
            mem[_25971 + 64] = _25964
            _26219 = mem[64]
            mem[64] = mem[64] + 32
            mem[_26219] = ext_call.return_data[0]
            _26223 = mem[64]
            mem[64] = mem[64] + 32
            mem[_26223] = 0
            _26224 = mem[64]
            mem[64] = mem[64] + 32
            _26229 = mem[64]
            mem[64] = mem[64] + 64
            mem[_26229] = 23
            mem[_26229 + 32] = 'multiplication overflow'
            if not ext_call.return_data[0]:
                mem[_26224] = 0
                mem[_25971 + 96] = 0 / 10^18
                if idx >= mem[_1826]:
                    revert with 'NH{q', 50
                mem[(32 * idx) + _1826 + 32] = _25971
                if idx == -1:
                    revert with 'NH{q', 17
                idx = idx + 1
                continue 
            if not _25964:
                mem[_26224] = 0
                mem[_25971 + 96] = 0 / 10^18
                if idx >= mem[_1826]:
                    revert with 'NH{q', 50
                mem[(32 * idx) + _1826 + 32] = _25971
                if idx == -1:
                    revert with 'NH{q', 17
                idx = idx + 1
                continue 
            if ext_call.return_data[0] and _25964 > -1 / ext_call.return_data[0]:
                revert with 'NH{q', 17
            if not ext_call.return_data[0]:
                revert with 'NH{q', 18
            if ext_call.return_data[0] * _25964 / ext_call.return_data[0] == _25964:
                mem[_26224] = ext_call.return_data[0] * _25964
                mem[_25971 + 96] = ext_call.return_data[0] * _25964 / 10^18
                if idx >= mem[_1826]:
                    revert with 'NH{q', 50
                mem[(32 * idx) + _1826 + 32] = _25971
                if idx == -1:
                    revert with 'NH{q', 17
                idx = idx + 1
                continue 
            _26384 = mem[64]
            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = 32
            mem[mem[64] + 36] = 23
            idx = 0
            while idx < 23:
                mem[idx + _26384 + 68] = mem[idx + _26229 + 32]
                idx = idx + 32
                continue 
            mem[_26384 + 91] = 0
            revert with memory
              from mem[64]
               len _26384 + -mem[64] + 100
        _25911 = mem[64]
        mem[64] = mem[64] + 192
        mem[_25911] = 0
        mem[_25911 + 32] = 0
        mem[_25911 + 64] = 0
        mem[_25911 + 96] = 0
        mem[_25911 + 128] = 0
        mem[_25911 + 160] = 0
        _27743 = mem[_1826]
        idx = 0
        while idx < _27743:
            if idx >= mem[_1826]:
                revert with 'NH{q', 50
            if idx >= mem[_1826]:
                revert with 'NH{q', 50
            if mem[mem[(32 * idx) + _1826 + 32] + 32] > 0:
                staticcall address(arg1).markets(address arg1) with:
                        gas gas_remaining wei
                       args address(mem[mem[(32 * idx) + _1826 + 32]])
                mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _27791 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 96
                require mem[_27791] == bool(mem[_27791])
                _27835 = mem[_27791 + 32]
                require mem[_27791 + 64] == bool(mem[_27791 + 64])
                if mem[_27791]:
                    staticcall address(arg1).oracle() with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _27898 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _27910 = mem[_27898]
                    require mem[_27898] == mem[_27898 + 12 len 20]
                    if idx >= mem[_1826]:
                        revert with 'NH{q', 50
                    _27941 = mem[mem[(32 * idx) + _1826 + 32]]
                    mem[mem[64] + 4] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                    staticcall address(_27910).getUnderlyingPrice(address arg1) with:
                            gas gas_remaining wei
                           args address(_27941)
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _27951 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _27963 = mem[_27951]
                    _27968 = mem[64]
                    mem[64] = mem[64] + 32
                    mem[_27968] = _27963
                    if idx >= mem[_1826]:
                        revert with 'NH{q', 50
                    _27972 = mem[mem[(32 * idx) + _1826 + 32] + 32]
                    _27985 = mem[64]
                    mem[64] = mem[64] + 32
                    mem[_27985] = 0
                    _27986 = mem[64]
                    mem[64] = mem[64] + 32
                    _27996 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_27996] = 23
                    mem[_27996 + 32] = 'multiplication overflow'
                    if not _27963:
                        mem[_27986] = 0
                        if _27835 <= 0:
                            _28118 = mem[64]
                            mem[64] = mem[64] + 32
                            mem[_28118] = _27963
                            if idx >= mem[_1826]:
                                revert with 'NH{q', 50
                            _28130 = mem[mem[(32 * idx) + _1826 + 32] + 96]
                            _28165 = mem[64]
                            mem[64] = mem[64] + 32
                            mem[_28165] = 0
                            _28166 = mem[64]
                            mem[64] = mem[64] + 32
                            _28189 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_28189] = 23
                            mem[_28189 + 32] = 'multiplication overflow'
                            if not _27963:
                                mem[_28166] = 0
                                if 0 / 10^18 > mem[_25911 + 160]:
                                    if idx >= mem[_1826]:
                                        revert with 'NH{q', 50
                                    mem[_25911 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                    mem[_25911 + 160] = 0 / 10^18
                                    if idx >= mem[_1826]:
                                        revert with 'NH{q', 50
                                    mem[_25911 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                            else:
                                if not _28130:
                                    mem[_28166] = 0
                                    if 0 / 10^18 > mem[_25911 + 160]:
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        mem[_25911 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                        mem[_25911 + 160] = 0 / 10^18
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        mem[_25911 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                else:
                                    if _27963 and _28130 > -1 / _27963:
                                        revert with 'NH{q', 17
                                    if not _27963:
                                        revert with 'NH{q', 18
                                    if _27963 * _28130 / _27963 != _28130:
                                        _28585 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 23
                                        idx = 0
                                        while idx < 23:
                                            mem[idx + _28585 + 68] = mem[idx + _28189 + 32]
                                            _27743 = mem[_1826]
                                            idx = idx + 32
                                            continue 
                                        mem[_28585 + 91] = 0
                                        revert with memory
                                          from mem[64]
                                           len _28585 + -mem[64] + 100
                                    mem[_28166] = _27963 * _28130
                                    if _27963 * _28130 / 10^18 > mem[_25911 + 160]:
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        mem[_25911 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                        mem[_25911 + 160] = _27963 * _28130 / 10^18
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        mem[_25911 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                        else:
                            if 0 / 10^18 <= mem[_25911 + 96]:
                                _28131 = mem[64]
                                mem[64] = mem[64] + 32
                                mem[_28131] = _27963
                                if idx >= mem[_1826]:
                                    revert with 'NH{q', 50
                                _28145 = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                _28190 = mem[64]
                                mem[64] = mem[64] + 32
                                mem[_28190] = 0
                                _28191 = mem[64]
                                mem[64] = mem[64] + 32
                                _28216 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_28216] = 23
                                mem[_28216 + 32] = 'multiplication overflow'
                                if not _27963:
                                    mem[_28191] = 0
                                    if 0 / 10^18 > mem[_25911 + 160]:
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        mem[_25911 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                        mem[_25911 + 160] = 0 / 10^18
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        mem[_25911 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                else:
                                    if not _28145:
                                        mem[_28191] = 0
                                        if 0 / 10^18 > mem[_25911 + 160]:
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_25911 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                            mem[_25911 + 160] = 0 / 10^18
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_25911 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                    else:
                                        if _27963 and _28145 > -1 / _27963:
                                            revert with 'NH{q', 17
                                        if not _27963:
                                            revert with 'NH{q', 18
                                        if _27963 * _28145 / _27963 != _28145:
                                            _28629 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 23
                                            idx = 0
                                            while idx < 23:
                                                mem[idx + _28629 + 68] = mem[idx + _28216 + 32]
                                                _27743 = mem[_1826]
                                                idx = idx + 32
                                                continue 
                                            mem[_28629 + 91] = 0
                                            revert with memory
                                              from mem[64]
                                               len _28629 + -mem[64] + 100
                                        mem[_28191] = _27963 * _28145
                                        if _27963 * _28145 / 10^18 > mem[_25911 + 160]:
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_25911 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                            mem[_25911 + 160] = _27963 * _28145 / 10^18
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_25911 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                            else:
                                if idx >= mem[_1826]:
                                    revert with 'NH{q', 50
                                mem[_25911 + 64] = mem[mem[(32 * idx) + _1826 + 32] + 32]
                                mem[_25911 + 96] = 0 / 10^18
                                if idx >= mem[_1826]:
                                    revert with 'NH{q', 50
                                mem[_25911] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                _28193 = mem[64]
                                mem[64] = mem[64] + 32
                                mem[_28193] = _27963
                                if idx >= mem[_1826]:
                                    revert with 'NH{q', 50
                                _28218 = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                _28265 = mem[64]
                                mem[64] = mem[64] + 32
                                mem[_28265] = 0
                                _28266 = mem[64]
                                mem[64] = mem[64] + 32
                                _28295 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_28295] = 23
                                mem[_28295 + 32] = 'multiplication overflow'
                                if not _27963:
                                    mem[_28266] = 0
                                    if 0 / 10^18 > mem[_25911 + 160]:
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        mem[_25911 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                        mem[_25911 + 160] = 0 / 10^18
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        mem[_25911 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                else:
                                    if not _28218:
                                        mem[_28266] = 0
                                        if 0 / 10^18 > mem[_25911 + 160]:
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_25911 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                            mem[_25911 + 160] = 0 / 10^18
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_25911 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                    else:
                                        if _27963 and _28218 > -1 / _27963:
                                            revert with 'NH{q', 17
                                        if not _27963:
                                            revert with 'NH{q', 18
                                        if _27963 * _28218 / _27963 != _28218:
                                            _28747 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 23
                                            idx = 0
                                            while idx < 23:
                                                mem[idx + _28747 + 68] = mem[idx + _28295 + 32]
                                                _27743 = mem[_1826]
                                                idx = idx + 32
                                                continue 
                                            mem[_28747 + 91] = 0
                                            revert with memory
                                              from mem[64]
                                               len _28747 + -mem[64] + 100
                                        mem[_28266] = _27963 * _28218
                                        if _27963 * _28218 / 10^18 > mem[_25911 + 160]:
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_25911 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                            mem[_25911 + 160] = _27963 * _28218 / 10^18
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_25911 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                    else:
                        if not _27972:
                            mem[_27986] = 0
                            if _27835 <= 0:
                                _28135 = mem[64]
                                mem[64] = mem[64] + 32
                                mem[_28135] = _27963
                                if idx >= mem[_1826]:
                                    revert with 'NH{q', 50
                                _28150 = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                _28195 = mem[64]
                                mem[64] = mem[64] + 32
                                mem[_28195] = 0
                                _28196 = mem[64]
                                mem[64] = mem[64] + 32
                                _28219 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_28219] = 23
                                mem[_28219 + 32] = 'multiplication overflow'
                                if not _27963:
                                    mem[_28196] = 0
                                    if 0 / 10^18 > mem[_25911 + 160]:
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        mem[_25911 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                        mem[_25911 + 160] = 0 / 10^18
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        mem[_25911 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                else:
                                    if not _28150:
                                        mem[_28196] = 0
                                        if 0 / 10^18 > mem[_25911 + 160]:
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_25911 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                            mem[_25911 + 160] = 0 / 10^18
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_25911 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                    else:
                                        if _27963 and _28150 > -1 / _27963:
                                            revert with 'NH{q', 17
                                        if not _27963:
                                            revert with 'NH{q', 18
                                        if _27963 * _28150 / _27963 != _28150:
                                            _28632 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 23
                                            idx = 0
                                            while idx < 23:
                                                mem[idx + _28632 + 68] = mem[idx + _28219 + 32]
                                                _27743 = mem[_1826]
                                                idx = idx + 32
                                                continue 
                                            mem[_28632 + 91] = 0
                                            revert with memory
                                              from mem[64]
                                               len _28632 + -mem[64] + 100
                                        mem[_28196] = _27963 * _28150
                                        if _27963 * _28150 / 10^18 > mem[_25911 + 160]:
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_25911 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                            mem[_25911 + 160] = _27963 * _28150 / 10^18
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_25911 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                            else:
                                if 0 / 10^18 <= mem[_25911 + 96]:
                                    _28151 = mem[64]
                                    mem[64] = mem[64] + 32
                                    mem[_28151] = _27963
                                    if idx >= mem[_1826]:
                                        revert with 'NH{q', 50
                                    _28171 = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                    _28220 = mem[64]
                                    mem[64] = mem[64] + 32
                                    mem[_28220] = 0
                                    _28221 = mem[64]
                                    mem[64] = mem[64] + 32
                                    _28242 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_28242] = 23
                                    mem[_28242 + 32] = 'multiplication overflow'
                                    if not _27963:
                                        mem[_28221] = 0
                                        if 0 / 10^18 > mem[_25911 + 160]:
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_25911 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                            mem[_25911 + 160] = 0 / 10^18
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_25911 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                    else:
                                        if not _28171:
                                            mem[_28221] = 0
                                            if 0 / 10^18 > mem[_25911 + 160]:
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_25911 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                mem[_25911 + 160] = 0 / 10^18
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_25911 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                        else:
                                            if _27963 and _28171 > -1 / _27963:
                                                revert with 'NH{q', 17
                                            if not _27963:
                                                revert with 'NH{q', 18
                                            if _27963 * _28171 / _27963 != _28171:
                                                _28667 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 23
                                                idx = 0
                                                while idx < 23:
                                                    mem[idx + _28667 + 68] = mem[idx + _28242 + 32]
                                                    _27743 = mem[_1826]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_28667 + 91] = 0
                                                revert with memory
                                                  from mem[64]
                                                   len _28667 + -mem[64] + 100
                                            mem[_28221] = _27963 * _28171
                                            if _27963 * _28171 / 10^18 > mem[_25911 + 160]:
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_25911 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                mem[_25911 + 160] = _27963 * _28171 / 10^18
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_25911 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                else:
                                    if idx >= mem[_1826]:
                                        revert with 'NH{q', 50
                                    mem[_25911 + 64] = mem[mem[(32 * idx) + _1826 + 32] + 32]
                                    mem[_25911 + 96] = 0 / 10^18
                                    if idx >= mem[_1826]:
                                        revert with 'NH{q', 50
                                    mem[_25911] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                    _28223 = mem[64]
                                    mem[64] = mem[64] + 32
                                    mem[_28223] = _27963
                                    if idx >= mem[_1826]:
                                        revert with 'NH{q', 50
                                    _28244 = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                    _28301 = mem[64]
                                    mem[64] = mem[64] + 32
                                    mem[_28301] = 0
                                    _28302 = mem[64]
                                    mem[64] = mem[64] + 32
                                    _28338 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_28338] = 23
                                    mem[_28338 + 32] = 'multiplication overflow'
                                    if not _27963:
                                        mem[_28302] = 0
                                        if 0 / 10^18 > mem[_25911 + 160]:
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_25911 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                            mem[_25911 + 160] = 0 / 10^18
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_25911 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                    else:
                                        if not _28244:
                                            mem[_28302] = 0
                                            if 0 / 10^18 > mem[_25911 + 160]:
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_25911 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                mem[_25911 + 160] = 0 / 10^18
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_25911 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                        else:
                                            if _27963 and _28244 > -1 / _27963:
                                                revert with 'NH{q', 17
                                            if not _27963:
                                                revert with 'NH{q', 18
                                            if _27963 * _28244 / _27963 != _28244:
                                                _28798 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 23
                                                idx = 0
                                                while idx < 23:
                                                    mem[idx + _28798 + 68] = mem[idx + _28338 + 32]
                                                    _27743 = mem[_1826]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_28798 + 91] = 0
                                                revert with memory
                                                  from mem[64]
                                                   len _28798 + -mem[64] + 100
                                            mem[_28302] = _27963 * _28244
                                            if _27963 * _28244 / 10^18 > mem[_25911 + 160]:
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_25911 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                mem[_25911 + 160] = _27963 * _28244 / 10^18
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_25911 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                        else:
                            if _27963 and _27972 > -1 / _27963:
                                revert with 'NH{q', 17
                            if not _27963:
                                revert with 'NH{q', 18
                            if _27963 * _27972 / _27963 != _27972:
                                _28096 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 23
                                idx = 0
                                while idx < 23:
                                    mem[idx + _28096 + 68] = mem[idx + _27996 + 32]
                                    _27743 = mem[_1826]
                                    idx = idx + 32
                                    continue 
                                mem[_28096 + 91] = 0
                                revert with memory
                                  from mem[64]
                                   len _28096 + -mem[64] + 100
                            mem[_27986] = _27963 * _27972
                            if _27835 <= 0:
                                _28268 = mem[64]
                                mem[64] = mem[64] + 32
                                mem[_28268] = _27963
                                if idx >= mem[_1826]:
                                    revert with 'NH{q', 50
                                _28297 = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                _28378 = mem[64]
                                mem[64] = mem[64] + 32
                                mem[_28378] = 0
                                _28379 = mem[64]
                                mem[64] = mem[64] + 32
                                _28435 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_28435] = 23
                                mem[_28435 + 32] = 'multiplication overflow'
                                if not _27963:
                                    mem[_28379] = 0
                                    if 0 / 10^18 > mem[_25911 + 160]:
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        mem[_25911 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                        mem[_25911 + 160] = 0 / 10^18
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        mem[_25911 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                else:
                                    if not _28297:
                                        mem[_28379] = 0
                                        if 0 / 10^18 > mem[_25911 + 160]:
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_25911 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                            mem[_25911 + 160] = 0 / 10^18
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_25911 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                    else:
                                        if _27963 and _28297 > -1 / _27963:
                                            revert with 'NH{q', 17
                                        if not _27963:
                                            revert with 'NH{q', 18
                                        if _27963 * _28297 / _27963 != _28297:
                                            _28889 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 23
                                            idx = 0
                                            while idx < 23:
                                                mem[idx + _28889 + 68] = mem[idx + _28435 + 32]
                                                _27743 = mem[_1826]
                                                idx = idx + 32
                                                continue 
                                            mem[_28889 + 91] = 0
                                            revert with memory
                                              from mem[64]
                                               len _28889 + -mem[64] + 100
                                        mem[_28379] = _27963 * _28297
                                        if _27963 * _28297 / 10^18 > mem[_25911 + 160]:
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_25911 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                            mem[_25911 + 160] = _27963 * _28297 / 10^18
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_25911 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                            else:
                                if _27963 * _27972 / 10^18 <= mem[_25911 + 96]:
                                    _28298 = mem[64]
                                    mem[64] = mem[64] + 32
                                    mem[_28298] = _27963
                                    if idx >= mem[_1826]:
                                        revert with 'NH{q', 50
                                    _28334 = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                    _28436 = mem[64]
                                    mem[64] = mem[64] + 32
                                    mem[_28436] = 0
                                    _28437 = mem[64]
                                    mem[64] = mem[64] + 32
                                    _28492 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_28492] = 23
                                    mem[_28492 + 32] = 'multiplication overflow'
                                    if not _27963:
                                        mem[_28437] = 0
                                        if 0 / 10^18 > mem[_25911 + 160]:
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_25911 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                            mem[_25911 + 160] = 0 / 10^18
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_25911 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                    else:
                                        if not _28334:
                                            mem[_28437] = 0
                                            if 0 / 10^18 > mem[_25911 + 160]:
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_25911 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                mem[_25911 + 160] = 0 / 10^18
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_25911 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                        else:
                                            if _27963 and _28334 > -1 / _27963:
                                                revert with 'NH{q', 17
                                            if not _27963:
                                                revert with 'NH{q', 18
                                            if _27963 * _28334 / _27963 != _28334:
                                                _28943 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 23
                                                idx = 0
                                                while idx < 23:
                                                    mem[idx + _28943 + 68] = mem[idx + _28492 + 32]
                                                    _27743 = mem[_1826]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_28943 + 91] = 0
                                                revert with memory
                                                  from mem[64]
                                                   len _28943 + -mem[64] + 100
                                            mem[_28437] = _27963 * _28334
                                            if _27963 * _28334 / 10^18 > mem[_25911 + 160]:
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_25911 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                mem[_25911 + 160] = _27963 * _28334 / 10^18
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_25911 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                else:
                                    if idx >= mem[_1826]:
                                        revert with 'NH{q', 50
                                    mem[_25911 + 64] = mem[mem[(32 * idx) + _1826 + 32] + 32]
                                    mem[_25911 + 96] = _27963 * _27972 / 10^18
                                    if idx >= mem[_1826]:
                                        revert with 'NH{q', 50
                                    mem[_25911] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                    _28439 = mem[64]
                                    mem[64] = mem[64] + 32
                                    mem[_28439] = _27963
                                    if idx >= mem[_1826]:
                                        revert with 'NH{q', 50
                                    _28494 = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                    _28586 = mem[64]
                                    mem[64] = mem[64] + 32
                                    mem[_28586] = 0
                                    _28587 = mem[64]
                                    mem[64] = mem[64] + 32
                                    _28631 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_28631] = 23
                                    mem[_28631 + 32] = 'multiplication overflow'
                                    if not _27963:
                                        mem[_28587] = 0
                                        if 0 / 10^18 > mem[_25911 + 160]:
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_25911 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                            mem[_25911 + 160] = 0 / 10^18
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_25911 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                    else:
                                        if not _28494:
                                            mem[_28587] = 0
                                            if 0 / 10^18 > mem[_25911 + 160]:
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_25911 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                mem[_25911 + 160] = 0 / 10^18
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_25911 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                        else:
                                            if _27963 and _28494 > -1 / _27963:
                                                revert with 'NH{q', 17
                                            if not _27963:
                                                revert with 'NH{q', 18
                                            if _27963 * _28494 / _27963 != _28494:
                                                _29114 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 23
                                                idx = 0
                                                while idx < 23:
                                                    mem[idx + _29114 + 68] = mem[idx + _28631 + 32]
                                                    _27743 = mem[_1826]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_29114 + 91] = 0
                                                revert with memory
                                                  from mem[64]
                                                   len _29114 + -mem[64] + 100
                                            mem[_28587] = _27963 * _28494
                                            if _27963 * _28494 / 10^18 > mem[_25911 + 160]:
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_25911 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                mem[_25911 + 160] = _27963 * _28494 / 10^18
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_25911 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
            else:
                if mem[mem[(32 * idx) + _1826 + 32] + 64] > 0:
                    if idx >= mem[_1826]:
                        revert with 'NH{q', 50
                    staticcall address(arg1).markets(address arg1) with:
                            gas gas_remaining wei
                           args address(mem[mem[(32 * idx) + _1826 + 32]])
                    mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _27810 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 96
                    require mem[_27810] == bool(mem[_27810])
                    _27861 = mem[_27810 + 32]
                    require mem[_27810 + 64] == bool(mem[_27810 + 64])
                    if mem[_27810]:
                        staticcall address(arg1).oracle() with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _27911 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _27923 = mem[_27911]
                        require mem[_27911] == mem[_27911 + 12 len 20]
                        if idx >= mem[_1826]:
                            revert with 'NH{q', 50
                        _27958 = mem[mem[(32 * idx) + _1826 + 32]]
                        mem[mem[64] + 4] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                        staticcall address(_27923).getUnderlyingPrice(address arg1) with:
                                gas gas_remaining wei
                               args address(_27958)
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _27964 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _27973 = mem[_27964]
                        _27977 = mem[64]
                        mem[64] = mem[64] + 32
                        mem[_27977] = _27973
                        if idx >= mem[_1826]:
                            revert with 'NH{q', 50
                        _27989 = mem[mem[(32 * idx) + _1826 + 32] + 32]
                        _28007 = mem[64]
                        mem[64] = mem[64] + 32
                        mem[_28007] = 0
                        _28008 = mem[64]
                        mem[64] = mem[64] + 32
                        _28017 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_28017] = 23
                        mem[_28017 + 32] = 'multiplication overflow'
                        if not _27973:
                            mem[_28008] = 0
                            if _27861 <= 0:
                                _28154 = mem[64]
                                mem[64] = mem[64] + 32
                                mem[_28154] = _27973
                                if idx >= mem[_1826]:
                                    revert with 'NH{q', 50
                                _28176 = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                _28225 = mem[64]
                                mem[64] = mem[64] + 32
                                mem[_28225] = 0
                                _28226 = mem[64]
                                mem[64] = mem[64] + 32
                                _28245 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_28245] = 23
                                mem[_28245 + 32] = 'multiplication overflow'
                                if not _27973:
                                    mem[_28226] = 0
                                    if 0 / 10^18 > mem[_25911 + 160]:
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        mem[_25911 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                        mem[_25911 + 160] = 0 / 10^18
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        mem[_25911 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                else:
                                    if not _28176:
                                        mem[_28226] = 0
                                        if 0 / 10^18 > mem[_25911 + 160]:
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_25911 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                            mem[_25911 + 160] = 0 / 10^18
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_25911 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                    else:
                                        if _27973 and _28176 > -1 / _27973:
                                            revert with 'NH{q', 17
                                        if not _27973:
                                            revert with 'NH{q', 18
                                        if _27973 * _28176 / _27973 != _28176:
                                            _28669 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 23
                                            idx = 0
                                            while idx < 23:
                                                mem[idx + _28669 + 68] = mem[idx + _28245 + 32]
                                                _27743 = mem[_1826]
                                                idx = idx + 32
                                                continue 
                                            mem[_28669 + 91] = 0
                                            revert with memory
                                              from mem[64]
                                               len _28669 + -mem[64] + 100
                                        mem[_28226] = _27973 * _28176
                                        if _27973 * _28176 / 10^18 > mem[_25911 + 160]:
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_25911 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                            mem[_25911 + 160] = _27973 * _28176 / 10^18
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_25911 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                            else:
                                if 0 / 10^18 <= mem[_25911 + 96]:
                                    _28177 = mem[64]
                                    mem[64] = mem[64] + 32
                                    mem[_28177] = _27973
                                    if idx >= mem[_1826]:
                                        revert with 'NH{q', 50
                                    _28201 = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                    _28246 = mem[64]
                                    mem[64] = mem[64] + 32
                                    mem[_28246] = 0
                                    _28247 = mem[64]
                                    mem[64] = mem[64] + 32
                                    _28270 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_28270] = 23
                                    mem[_28270 + 32] = 'multiplication overflow'
                                    if not _27973:
                                        mem[_28247] = 0
                                        if 0 / 10^18 > mem[_25911 + 160]:
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_25911 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                            mem[_25911 + 160] = 0 / 10^18
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_25911 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                    else:
                                        if not _28201:
                                            mem[_28247] = 0
                                            if 0 / 10^18 > mem[_25911 + 160]:
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_25911 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                mem[_25911 + 160] = 0 / 10^18
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_25911 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                        else:
                                            if _27973 and _28201 > -1 / _27973:
                                                revert with 'NH{q', 17
                                            if not _27973:
                                                revert with 'NH{q', 18
                                            if _27973 * _28201 / _27973 != _28201:
                                                _28710 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 23
                                                idx = 0
                                                while idx < 23:
                                                    mem[idx + _28710 + 68] = mem[idx + _28270 + 32]
                                                    _27743 = mem[_1826]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_28710 + 91] = 0
                                                revert with memory
                                                  from mem[64]
                                                   len _28710 + -mem[64] + 100
                                            mem[_28247] = _27973 * _28201
                                            if _27973 * _28201 / 10^18 > mem[_25911 + 160]:
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_25911 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                mem[_25911 + 160] = _27973 * _28201 / 10^18
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_25911 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                else:
                                    if idx >= mem[_1826]:
                                        revert with 'NH{q', 50
                                    mem[_25911 + 64] = mem[mem[(32 * idx) + _1826 + 32] + 32]
                                    mem[_25911 + 96] = 0 / 10^18
                                    if idx >= mem[_1826]:
                                        revert with 'NH{q', 50
                                    mem[_25911] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                    _28249 = mem[64]
                                    mem[64] = mem[64] + 32
                                    mem[_28249] = _27973
                                    if idx >= mem[_1826]:
                                        revert with 'NH{q', 50
                                    _28272 = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                    _28339 = mem[64]
                                    mem[64] = mem[64] + 32
                                    mem[_28339] = 0
                                    _28340 = mem[64]
                                    mem[64] = mem[64] + 32
                                    _28383 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_28383] = 23
                                    mem[_28383 + 32] = 'multiplication overflow'
                                    if not _27973:
                                        mem[_28340] = 0
                                        if 0 / 10^18 > mem[_25911 + 160]:
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_25911 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                            mem[_25911 + 160] = 0 / 10^18
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_25911 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                    else:
                                        if not _28272:
                                            mem[_28340] = 0
                                            if 0 / 10^18 > mem[_25911 + 160]:
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_25911 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                mem[_25911 + 160] = 0 / 10^18
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_25911 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                        else:
                                            if _27973 and _28272 > -1 / _27973:
                                                revert with 'NH{q', 17
                                            if not _27973:
                                                revert with 'NH{q', 18
                                            if _27973 * _28272 / _27973 != _28272:
                                                _28853 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 23
                                                idx = 0
                                                while idx < 23:
                                                    mem[idx + _28853 + 68] = mem[idx + _28383 + 32]
                                                    _27743 = mem[_1826]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_28853 + 91] = 0
                                                revert with memory
                                                  from mem[64]
                                                   len _28853 + -mem[64] + 100
                                            mem[_28340] = _27973 * _28272
                                            if _27973 * _28272 / 10^18 > mem[_25911 + 160]:
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_25911 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                mem[_25911 + 160] = _27973 * _28272 / 10^18
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_25911 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                        else:
                            if not _27989:
                                mem[_28008] = 0
                                if _27861 <= 0:
                                    _28181 = mem[64]
                                    mem[64] = mem[64] + 32
                                    mem[_28181] = _27973
                                    if idx >= mem[_1826]:
                                        revert with 'NH{q', 50
                                    _28206 = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                    _28251 = mem[64]
                                    mem[64] = mem[64] + 32
                                    mem[_28251] = 0
                                    _28252 = mem[64]
                                    mem[64] = mem[64] + 32
                                    _28273 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_28273] = 23
                                    mem[_28273 + 32] = 'multiplication overflow'
                                    if not _27973:
                                        mem[_28252] = 0
                                        if 0 / 10^18 > mem[_25911 + 160]:
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_25911 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                            mem[_25911 + 160] = 0 / 10^18
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_25911 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                    else:
                                        if not _28206:
                                            mem[_28252] = 0
                                            if 0 / 10^18 > mem[_25911 + 160]:
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_25911 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                mem[_25911 + 160] = 0 / 10^18
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_25911 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                        else:
                                            if _27973 and _28206 > -1 / _27973:
                                                revert with 'NH{q', 17
                                            if not _27973:
                                                revert with 'NH{q', 18
                                            if _27973 * _28206 / _27973 != _28206:
                                                _28713 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 23
                                                idx = 0
                                                while idx < 23:
                                                    mem[idx + _28713 + 68] = mem[idx + _28273 + 32]
                                                    _27743 = mem[_1826]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_28713 + 91] = 0
                                                revert with memory
                                                  from mem[64]
                                                   len _28713 + -mem[64] + 100
                                            mem[_28252] = _27973 * _28206
                                            if _27973 * _28206 / 10^18 > mem[_25911 + 160]:
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_25911 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                mem[_25911 + 160] = _27973 * _28206 / 10^18
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_25911 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                else:
                                    if 0 / 10^18 <= mem[_25911 + 96]:
                                        _28207 = mem[64]
                                        mem[64] = mem[64] + 32
                                        mem[_28207] = _27973
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        _28231 = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                        _28274 = mem[64]
                                        mem[64] = mem[64] + 32
                                        mem[_28274] = 0
                                        _28275 = mem[64]
                                        mem[64] = mem[64] + 32
                                        _28305 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_28305] = 23
                                        mem[_28305 + 32] = 'multiplication overflow'
                                        if not _27973:
                                            mem[_28275] = 0
                                            if 0 / 10^18 > mem[_25911 + 160]:
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_25911 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                mem[_25911 + 160] = 0 / 10^18
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_25911 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                        else:
                                            if not _28231:
                                                mem[_28275] = 0
                                                if 0 / 10^18 > mem[_25911 + 160]:
                                                    if idx >= mem[_1826]:
                                                        revert with 'NH{q', 50
                                                    mem[_25911 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                    mem[_25911 + 160] = 0 / 10^18
                                                    if idx >= mem[_1826]:
                                                        revert with 'NH{q', 50
                                                    mem[_25911 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                            else:
                                                if _27973 and _28231 > -1 / _27973:
                                                    revert with 'NH{q', 17
                                                if not _27973:
                                                    revert with 'NH{q', 18
                                                if _27973 * _28231 / _27973 != _28231:
                                                    _28754 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 23
                                                    idx = 0
                                                    while idx < 23:
                                                        mem[idx + _28754 + 68] = mem[idx + _28305 + 32]
                                                        _27743 = mem[_1826]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_28754 + 91] = 0
                                                    revert with memory
                                                      from mem[64]
                                                       len _28754 + -mem[64] + 100
                                                mem[_28275] = _27973 * _28231
                                                if _27973 * _28231 / 10^18 > mem[_25911 + 160]:
                                                    if idx >= mem[_1826]:
                                                        revert with 'NH{q', 50
                                                    mem[_25911 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                    mem[_25911 + 160] = _27973 * _28231 / 10^18
                                                    if idx >= mem[_1826]:
                                                        revert with 'NH{q', 50
                                                    mem[_25911 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                    else:
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        mem[_25911 + 64] = mem[mem[(32 * idx) + _1826 + 32] + 32]
                                        mem[_25911 + 96] = 0 / 10^18
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        mem[_25911] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                        _28277 = mem[64]
                                        mem[64] = mem[64] + 32
                                        mem[_28277] = _27973
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        _28307 = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                        _28389 = mem[64]
                                        mem[64] = mem[64] + 32
                                        mem[_28389] = 0
                                        _28390 = mem[64]
                                        mem[64] = mem[64] + 32
                                        _28446 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_28446] = 23
                                        mem[_28446 + 32] = 'multiplication overflow'
                                        if not _27973:
                                            mem[_28390] = 0
                                            if 0 / 10^18 > mem[_25911 + 160]:
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_25911 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                mem[_25911 + 160] = 0 / 10^18
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_25911 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                        else:
                                            if not _28307:
                                                mem[_28390] = 0
                                                if 0 / 10^18 > mem[_25911 + 160]:
                                                    if idx >= mem[_1826]:
                                                        revert with 'NH{q', 50
                                                    mem[_25911 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                    mem[_25911 + 160] = 0 / 10^18
                                                    if idx >= mem[_1826]:
                                                        revert with 'NH{q', 50
                                                    mem[_25911 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                            else:
                                                if _27973 and _28307 > -1 / _27973:
                                                    revert with 'NH{q', 17
                                                if not _27973:
                                                    revert with 'NH{q', 18
                                                if _27973 * _28307 / _27973 != _28307:
                                                    _28917 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 23
                                                    idx = 0
                                                    while idx < 23:
                                                        mem[idx + _28917 + 68] = mem[idx + _28446 + 32]
                                                        _27743 = mem[_1826]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_28917 + 91] = 0
                                                    revert with memory
                                                      from mem[64]
                                                       len _28917 + -mem[64] + 100
                                                mem[_28390] = _27973 * _28307
                                                if _27973 * _28307 / 10^18 > mem[_25911 + 160]:
                                                    if idx >= mem[_1826]:
                                                        revert with 'NH{q', 50
                                                    mem[_25911 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                    mem[_25911 + 160] = _27973 * _28307 / 10^18
                                                    if idx >= mem[_1826]:
                                                        revert with 'NH{q', 50
                                                    mem[_25911 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                            else:
                                if _27973 and _27989 > -1 / _27973:
                                    revert with 'NH{q', 17
                                if not _27973:
                                    revert with 'NH{q', 18
                                if _27973 * _27989 / _27973 != _27989:
                                    _28109 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 23
                                    idx = 0
                                    while idx < 23:
                                        mem[idx + _28109 + 68] = mem[idx + _28017 + 32]
                                        _27743 = mem[_1826]
                                        idx = idx + 32
                                        continue 
                                    mem[_28109 + 91] = 0
                                    revert with memory
                                      from mem[64]
                                       len _28109 + -mem[64] + 100
                                mem[_28008] = _27973 * _27989
                                if _27861 <= 0:
                                    _28342 = mem[64]
                                    mem[64] = mem[64] + 32
                                    mem[_28342] = _27973
                                    if idx >= mem[_1826]:
                                        revert with 'NH{q', 50
                                    _28385 = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                    _28496 = mem[64]
                                    mem[64] = mem[64] + 32
                                    mem[_28496] = 0
                                    _28497 = mem[64]
                                    mem[64] = mem[64] + 32
                                    _28544 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_28544] = 23
                                    mem[_28544 + 32] = 'multiplication overflow'
                                    if not _27973:
                                        mem[_28497] = 0
                                        if 0 / 10^18 > mem[_25911 + 160]:
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_25911 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                            mem[_25911 + 160] = 0 / 10^18
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_25911 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                    else:
                                        if not _28385:
                                            mem[_28497] = 0
                                            if 0 / 10^18 > mem[_25911 + 160]:
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_25911 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                mem[_25911 + 160] = 0 / 10^18
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_25911 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                        else:
                                            if _27973 and _28385 > -1 / _27973:
                                                revert with 'NH{q', 17
                                            if not _27973:
                                                revert with 'NH{q', 18
                                            if _27973 * _28385 / _27973 != _28385:
                                                _29019 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 23
                                                idx = 0
                                                while idx < 23:
                                                    mem[idx + _29019 + 68] = mem[idx + _28544 + 32]
                                                    _27743 = mem[_1826]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_29019 + 91] = 0
                                                revert with memory
                                                  from mem[64]
                                                   len _29019 + -mem[64] + 100
                                            mem[_28497] = _27973 * _28385
                                            if _27973 * _28385 / 10^18 > mem[_25911 + 160]:
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_25911 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                mem[_25911 + 160] = _27973 * _28385 / 10^18
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_25911 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                else:
                                    if _27973 * _27989 / 10^18 <= mem[_25911 + 96]:
                                        _28386 = mem[64]
                                        mem[64] = mem[64] + 32
                                        mem[_28386] = _27973
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        _28442 = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                        _28545 = mem[64]
                                        mem[64] = mem[64] + 32
                                        mem[_28545] = 0
                                        _28546 = mem[64]
                                        mem[64] = mem[64] + 32
                                        _28592 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_28592] = 23
                                        mem[_28592 + 32] = 'multiplication overflow'
                                        if not _27973:
                                            mem[_28546] = 0
                                            if 0 / 10^18 > mem[_25911 + 160]:
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_25911 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                mem[_25911 + 160] = 0 / 10^18
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_25911 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                        else:
                                            if not _28442:
                                                mem[_28546] = 0
                                                if 0 / 10^18 > mem[_25911 + 160]:
                                                    if idx >= mem[_1826]:
                                                        revert with 'NH{q', 50
                                                    mem[_25911 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                    mem[_25911 + 160] = 0 / 10^18
                                                    if idx >= mem[_1826]:
                                                        revert with 'NH{q', 50
                                                    mem[_25911 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                            else:
                                                if _27973 and _28442 > -1 / _27973:
                                                    revert with 'NH{q', 17
                                                if not _27973:
                                                    revert with 'NH{q', 18
                                                if _27973 * _28442 / _27973 != _28442:
                                                    _29069 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 23
                                                    idx = 0
                                                    while idx < 23:
                                                        mem[idx + _29069 + 68] = mem[idx + _28592 + 32]
                                                        _27743 = mem[_1826]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_29069 + 91] = 0
                                                    revert with memory
                                                      from mem[64]
                                                       len _29069 + -mem[64] + 100
                                                mem[_28546] = _27973 * _28442
                                                if _27973 * _28442 / 10^18 > mem[_25911 + 160]:
                                                    if idx >= mem[_1826]:
                                                        revert with 'NH{q', 50
                                                    mem[_25911 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                    mem[_25911 + 160] = _27973 * _28442 / 10^18
                                                    if idx >= mem[_1826]:
                                                        revert with 'NH{q', 50
                                                    mem[_25911 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                    else:
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        mem[_25911 + 64] = mem[mem[(32 * idx) + _1826 + 32] + 32]
                                        mem[_25911 + 96] = _27973 * _27989 / 10^18
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        mem[_25911] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                        _28548 = mem[64]
                                        mem[64] = mem[64] + 32
                                        mem[_28548] = _27973
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        _28594 = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                        _28670 = mem[64]
                                        mem[64] = mem[64] + 32
                                        mem[_28670] = 0
                                        _28671 = mem[64]
                                        mem[64] = mem[64] + 32
                                        _28712 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_28712] = 23
                                        mem[_28712 + 32] = 'multiplication overflow'
                                        if not _27973:
                                            mem[_28671] = 0
                                            if 0 / 10^18 > mem[_25911 + 160]:
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_25911 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                mem[_25911 + 160] = 0 / 10^18
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_25911 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                        else:
                                            if not _28594:
                                                mem[_28671] = 0
                                                if 0 / 10^18 > mem[_25911 + 160]:
                                                    if idx >= mem[_1826]:
                                                        revert with 'NH{q', 50
                                                    mem[_25911 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                    mem[_25911 + 160] = 0 / 10^18
                                                    if idx >= mem[_1826]:
                                                        revert with 'NH{q', 50
                                                    mem[_25911 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                            else:
                                                if _27973 and _28594 > -1 / _27973:
                                                    revert with 'NH{q', 17
                                                if not _27973:
                                                    revert with 'NH{q', 18
                                                if _27973 * _28594 / _27973 != _28594:
                                                    _29268 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 23
                                                    idx = 0
                                                    while idx < 23:
                                                        mem[idx + _29268 + 68] = mem[idx + _28712 + 32]
                                                        _27743 = mem[_1826]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_29268 + 91] = 0
                                                    revert with memory
                                                      from mem[64]
                                                       len _29268 + -mem[64] + 100
                                                mem[_28671] = _27973 * _28594
                                                if _27973 * _28594 / 10^18 > mem[_25911 + 160]:
                                                    if idx >= mem[_1826]:
                                                        revert with 'NH{q', 50
                                                    mem[_25911 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                    mem[_25911 + 160] = _27973 * _28594 / 10^18
                                                    if idx >= mem[_1826]:
                                                        revert with 'NH{q', 50
                                                    mem[_25911 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
            if idx == -1:
                revert with 'NH{q', 17
            _27743 = mem[_1826]
            idx = idx + 1
            continue 
        _27745 = mem[_25911 + 32]
        _27746 = mem[_25911]
        _27747 = mem[_25911 + 128]
        mem[224] = mem[_25911 + 160]
        mem[192] = _27747
        mem[160] = address(_27746)
        mem[128] = address(_27745)
        mem[mem[64]] = mem[108 len 20]
        mem[mem[64] + 32] = address(_27745)
        mem[mem[64] + 64] = address(_27746)
        mem[mem[64] + 96] = _27747
        mem[mem[64] + 128] = mem[224]
        mem[mem[64] + 160] = bool(mem[256])
        return mem[mem[64]], address(_27745), address(_27746), _27747, mem[mem[64] + 128 len 64]
    mem[64] = _1826 + (32 * _24) + 800
    mem[_1826 + (32 * _24) + 672] = 0
    mem[_1826 + (32 * _24) + 704] = 0
    mem[_1826 + (32 * _24) + 736] = 0
    mem[_1826 + (32 * _24) + 768] = 0
    mem[var61002] = var61001
    if not var61003 - 1:
        idx = 0
        while idx < _24:
            if idx >= mem[(4 * ceil32(return_data.size)) + 288]:
                revert with 'NH{q', 50
            _30377 = mem[(32 * idx) + (4 * ceil32(return_data.size)) + 320]
            mem[mem[64] + 4] = address(arg2)
            staticcall address(_30377).borrowBalanceStored(address arg1) with:
                    gas gas_remaining wei
                   args address(arg2)
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _30380 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _30429 = mem[_30380]
            _30436 = mem[64]
            mem[64] = mem[64] + 128
            if idx >= mem[(4 * ceil32(return_data.size)) + 288]:
                revert with 'NH{q', 50
            mem[_30436] = mem[(32 * idx) + (4 * ceil32(return_data.size)) + 332 len 20]
            if idx >= mem[(4 * ceil32(return_data.size)) + 288]:
                revert with 'NH{q', 50
            _30447 = mem[(32 * idx) + (4 * ceil32(return_data.size)) + 320]
            mem[mem[64] + 4] = address(arg2)
            staticcall address(_30447).0x70a08231 with:
                    gas gas_remaining wei
                   args address(arg2)
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _30472 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _30487 = mem[_30472]
            if mem[_30472] <= 0:
                mem[_30436 + 32] = 0
                mem[_30436 + 64] = _30429
                _30518 = mem[64]
                mem[64] = mem[64] + 32
                mem[_30518] = ext_call.return_data[0]
                _30526 = mem[64]
                mem[64] = mem[64] + 32
                mem[_30526] = 0
                _30527 = mem[64]
                mem[64] = mem[64] + 32
                _30532 = mem[64]
                mem[64] = mem[64] + 64
                mem[_30532] = 23
                mem[_30532 + 32] = 'multiplication overflow'
                if not ext_call.return_data[0]:
                    mem[_30527] = 0
                    mem[_30436 + 96] = 0 / 10^18
                    if idx >= mem[_1826]:
                        revert with 'NH{q', 50
                    mem[(32 * idx) + _1826 + 32] = _30436
                    if idx == -1:
                        revert with 'NH{q', 17
                    idx = idx + 1
                    continue 
                if not _30429:
                    mem[_30527] = 0
                    mem[_30436 + 96] = 0 / 10^18
                    if idx >= mem[_1826]:
                        revert with 'NH{q', 50
                    mem[(32 * idx) + _1826 + 32] = _30436
                    if idx == -1:
                        revert with 'NH{q', 17
                    idx = idx + 1
                    continue 
                if ext_call.return_data[0] and _30429 > -1 / ext_call.return_data[0]:
                    revert with 'NH{q', 17
                if not ext_call.return_data[0]:
                    revert with 'NH{q', 18
                if ext_call.return_data[0] * _30429 / ext_call.return_data[0] == _30429:
                    mem[_30527] = ext_call.return_data[0] * _30429
                    mem[_30436 + 96] = ext_call.return_data[0] * _30429 / 10^18
                    if idx >= mem[_1826]:
                        revert with 'NH{q', 50
                    mem[(32 * idx) + _1826 + 32] = _30436
                    if idx == -1:
                        revert with 'NH{q', 17
                    idx = idx + 1
                    continue 
                _30577 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 23
                idx = 0
                while idx < 23:
                    mem[idx + _30577 + 68] = mem[idx + _30532 + 32]
                    idx = idx + 32
                    continue 
                mem[_30577 + 91] = 0
                revert with memory
                  from mem[64]
                   len _30577 + -mem[64] + 100
            _30504 = mem[64]
            mem[64] = mem[64] + 32
            staticcall address(_30447).exchangeRateStored() with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _30514 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[_30504] = mem[_30514]
            _30537 = mem[64]
            mem[64] = mem[64] + 32
            mem[_30537] = 0
            _30538 = mem[64]
            mem[64] = mem[64] + 32
            _30539 = mem[_30504]
            _30543 = mem[64]
            mem[64] = mem[64] + 64
            mem[_30543] = 23
            mem[_30543 + 32] = 'multiplication overflow'
            if not _30539:
                mem[_30538] = 0
                mem[_30436 + 32] = 0 / 10^18
                mem[_30436 + 64] = _30429
                _30633 = mem[64]
                mem[64] = mem[64] + 32
                mem[_30633] = ext_call.return_data[0]
                _30650 = mem[64]
                mem[64] = mem[64] + 32
                mem[_30650] = 0
                _30651 = mem[64]
                mem[64] = mem[64] + 32
                _30660 = mem[64]
                mem[64] = mem[64] + 64
                mem[_30660] = 23
                mem[_30660 + 32] = 'multiplication overflow'
                if not ext_call.return_data[0]:
                    mem[_30651] = 0
                    mem[_30436 + 96] = 0 / 10^18
                    if idx >= mem[_1826]:
                        revert with 'NH{q', 50
                    mem[(32 * idx) + _1826 + 32] = _30436
                    if idx == -1:
                        revert with 'NH{q', 17
                    idx = idx + 1
                    continue 
                if not _30429:
                    mem[_30651] = 0
                    mem[_30436 + 96] = 0 / 10^18
                    if idx >= mem[_1826]:
                        revert with 'NH{q', 50
                    mem[(32 * idx) + _1826 + 32] = _30436
                    if idx == -1:
                        revert with 'NH{q', 17
                    idx = idx + 1
                    continue 
                if ext_call.return_data[0] and _30429 > -1 / ext_call.return_data[0]:
                    revert with 'NH{q', 17
                if not ext_call.return_data[0]:
                    revert with 'NH{q', 18
                if ext_call.return_data[0] * _30429 / ext_call.return_data[0] == _30429:
                    mem[_30651] = ext_call.return_data[0] * _30429
                    mem[_30436 + 96] = ext_call.return_data[0] * _30429 / 10^18
                    if idx >= mem[_1826]:
                        revert with 'NH{q', 50
                    mem[(32 * idx) + _1826 + 32] = _30436
                    if idx == -1:
                        revert with 'NH{q', 17
                    idx = idx + 1
                    continue 
                _30709 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 23
                idx = 0
                while idx < 23:
                    mem[idx + _30709 + 68] = mem[idx + _30660 + 32]
                    idx = idx + 32
                    continue 
                mem[_30709 + 91] = 0
                revert with memory
                  from mem[64]
                   len _30709 + -mem[64] + 100
            if not _30487:
                mem[_30538] = 0
                mem[_30436 + 32] = 0 / 10^18
                mem[_30436 + 64] = _30429
                _30644 = mem[64]
                mem[64] = mem[64] + 32
                mem[_30644] = ext_call.return_data[0]
                _30661 = mem[64]
                mem[64] = mem[64] + 32
                mem[_30661] = 0
                _30662 = mem[64]
                mem[64] = mem[64] + 32
                _30668 = mem[64]
                mem[64] = mem[64] + 64
                mem[_30668] = 23
                mem[_30668 + 32] = 'multiplication overflow'
                if not ext_call.return_data[0]:
                    mem[_30662] = 0
                    mem[_30436 + 96] = 0 / 10^18
                    if idx >= mem[_1826]:
                        revert with 'NH{q', 50
                    mem[(32 * idx) + _1826 + 32] = _30436
                    if idx == -1:
                        revert with 'NH{q', 17
                    idx = idx + 1
                    continue 
                if not _30429:
                    mem[_30662] = 0
                    mem[_30436 + 96] = 0 / 10^18
                    if idx >= mem[_1826]:
                        revert with 'NH{q', 50
                    mem[(32 * idx) + _1826 + 32] = _30436
                    if idx == -1:
                        revert with 'NH{q', 17
                    idx = idx + 1
                    continue 
                if ext_call.return_data[0] and _30429 > -1 / ext_call.return_data[0]:
                    revert with 'NH{q', 17
                if not ext_call.return_data[0]:
                    revert with 'NH{q', 18
                if ext_call.return_data[0] * _30429 / ext_call.return_data[0] == _30429:
                    mem[_30662] = ext_call.return_data[0] * _30429
                    mem[_30436 + 96] = ext_call.return_data[0] * _30429 / 10^18
                    if idx >= mem[_1826]:
                        revert with 'NH{q', 50
                    mem[(32 * idx) + _1826 + 32] = _30436
                    if idx == -1:
                        revert with 'NH{q', 17
                    idx = idx + 1
                    continue 
                _30717 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 23
                idx = 0
                while idx < 23:
                    mem[idx + _30717 + 68] = mem[idx + _30668 + 32]
                    idx = idx + 32
                    continue 
                mem[_30717 + 91] = 0
                revert with memory
                  from mem[64]
                   len _30717 + -mem[64] + 100
            if _30539 and _30487 > -1 / _30539:
                revert with 'NH{q', 17
            if not _30539:
                revert with 'NH{q', 18
            if _30539 * _30487 / _30539 != _30487:
                _30588 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 23
                idx = 0
                while idx < 23:
                    mem[idx + _30588 + 68] = mem[idx + _30543 + 32]
                    idx = idx + 32
                    continue 
                mem[_30588 + 91] = 0
                revert with memory
                  from mem[64]
                   len _30588 + -mem[64] + 100
            mem[_30538] = _30539 * _30487
            mem[_30436 + 32] = _30539 * _30487 / 10^18
            mem[_30436 + 64] = _30429
            _30684 = mem[64]
            mem[64] = mem[64] + 32
            mem[_30684] = ext_call.return_data[0]
            _30688 = mem[64]
            mem[64] = mem[64] + 32
            mem[_30688] = 0
            _30689 = mem[64]
            mem[64] = mem[64] + 32
            _30694 = mem[64]
            mem[64] = mem[64] + 64
            mem[_30694] = 23
            mem[_30694 + 32] = 'multiplication overflow'
            if not ext_call.return_data[0]:
                mem[_30689] = 0
                mem[_30436 + 96] = 0 / 10^18
                if idx >= mem[_1826]:
                    revert with 'NH{q', 50
                mem[(32 * idx) + _1826 + 32] = _30436
                if idx == -1:
                    revert with 'NH{q', 17
                idx = idx + 1
                continue 
            if not _30429:
                mem[_30689] = 0
                mem[_30436 + 96] = 0 / 10^18
                if idx >= mem[_1826]:
                    revert with 'NH{q', 50
                mem[(32 * idx) + _1826 + 32] = _30436
                if idx == -1:
                    revert with 'NH{q', 17
                idx = idx + 1
                continue 
            if ext_call.return_data[0] and _30429 > -1 / ext_call.return_data[0]:
                revert with 'NH{q', 17
            if not ext_call.return_data[0]:
                revert with 'NH{q', 18
            if ext_call.return_data[0] * _30429 / ext_call.return_data[0] == _30429:
                mem[_30689] = ext_call.return_data[0] * _30429
                mem[_30436 + 96] = ext_call.return_data[0] * _30429 / 10^18
                if idx >= mem[_1826]:
                    revert with 'NH{q', 50
                mem[(32 * idx) + _1826 + 32] = _30436
                if idx == -1:
                    revert with 'NH{q', 17
                idx = idx + 1
                continue 
            _30849 = mem[64]
            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = 32
            mem[mem[64] + 36] = 23
            idx = 0
            while idx < 23:
                mem[idx + _30849 + 68] = mem[idx + _30694 + 32]
                idx = idx + 32
                continue 
            mem[_30849 + 91] = 0
            revert with memory
              from mem[64]
               len _30849 + -mem[64] + 100
        _30376 = mem[64]
        mem[64] = mem[64] + 192
        mem[_30376] = 0
        mem[_30376 + 32] = 0
        mem[_30376 + 64] = 0
        mem[_30376 + 96] = 0
        mem[_30376 + 128] = 0
        mem[_30376 + 160] = 0
        _32208 = mem[_1826]
        idx = 0
        while idx < _32208:
            if idx >= mem[_1826]:
                revert with 'NH{q', 50
            if idx >= mem[_1826]:
                revert with 'NH{q', 50
            if mem[mem[(32 * idx) + _1826 + 32] + 32] > 0:
                staticcall address(arg1).markets(address arg1) with:
                        gas gas_remaining wei
                       args address(mem[mem[(32 * idx) + _1826 + 32]])
                mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _32256 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 96
                require mem[_32256] == bool(mem[_32256])
                _32300 = mem[_32256 + 32]
                require mem[_32256 + 64] == bool(mem[_32256 + 64])
                if mem[_32256]:
                    staticcall address(arg1).oracle() with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _32363 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _32375 = mem[_32363]
                    require mem[_32363] == mem[_32363 + 12 len 20]
                    if idx >= mem[_1826]:
                        revert with 'NH{q', 50
                    _32406 = mem[mem[(32 * idx) + _1826 + 32]]
                    mem[mem[64] + 4] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                    staticcall address(_32375).getUnderlyingPrice(address arg1) with:
                            gas gas_remaining wei
                           args address(_32406)
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _32416 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _32428 = mem[_32416]
                    _32433 = mem[64]
                    mem[64] = mem[64] + 32
                    mem[_32433] = _32428
                    if idx >= mem[_1826]:
                        revert with 'NH{q', 50
                    _32437 = mem[mem[(32 * idx) + _1826 + 32] + 32]
                    _32450 = mem[64]
                    mem[64] = mem[64] + 32
                    mem[_32450] = 0
                    _32451 = mem[64]
                    mem[64] = mem[64] + 32
                    _32461 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_32461] = 23
                    mem[_32461 + 32] = 'multiplication overflow'
                    if not _32428:
                        mem[_32451] = 0
                        if _32300 <= 0:
                            _32583 = mem[64]
                            mem[64] = mem[64] + 32
                            mem[_32583] = _32428
                            if idx >= mem[_1826]:
                                revert with 'NH{q', 50
                            _32595 = mem[mem[(32 * idx) + _1826 + 32] + 96]
                            _32630 = mem[64]
                            mem[64] = mem[64] + 32
                            mem[_32630] = 0
                            _32631 = mem[64]
                            mem[64] = mem[64] + 32
                            _32654 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_32654] = 23
                            mem[_32654 + 32] = 'multiplication overflow'
                            if not _32428:
                                mem[_32631] = 0
                                if 0 / 10^18 > mem[_30376 + 160]:
                                    if idx >= mem[_1826]:
                                        revert with 'NH{q', 50
                                    mem[_30376 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                    mem[_30376 + 160] = 0 / 10^18
                                    if idx >= mem[_1826]:
                                        revert with 'NH{q', 50
                                    mem[_30376 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                            else:
                                if not _32595:
                                    mem[_32631] = 0
                                    if 0 / 10^18 > mem[_30376 + 160]:
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        mem[_30376 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                        mem[_30376 + 160] = 0 / 10^18
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        mem[_30376 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                else:
                                    if _32428 and _32595 > -1 / _32428:
                                        revert with 'NH{q', 17
                                    if not _32428:
                                        revert with 'NH{q', 18
                                    if _32428 * _32595 / _32428 != _32595:
                                        _33050 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 23
                                        idx = 0
                                        while idx < 23:
                                            mem[idx + _33050 + 68] = mem[idx + _32654 + 32]
                                            _32208 = mem[_1826]
                                            idx = idx + 32
                                            continue 
                                        mem[_33050 + 91] = 0
                                        revert with memory
                                          from mem[64]
                                           len _33050 + -mem[64] + 100
                                    mem[_32631] = _32428 * _32595
                                    if _32428 * _32595 / 10^18 > mem[_30376 + 160]:
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        mem[_30376 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                        mem[_30376 + 160] = _32428 * _32595 / 10^18
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        mem[_30376 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                        else:
                            if 0 / 10^18 <= mem[_30376 + 96]:
                                _32596 = mem[64]
                                mem[64] = mem[64] + 32
                                mem[_32596] = _32428
                                if idx >= mem[_1826]:
                                    revert with 'NH{q', 50
                                _32610 = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                _32655 = mem[64]
                                mem[64] = mem[64] + 32
                                mem[_32655] = 0
                                _32656 = mem[64]
                                mem[64] = mem[64] + 32
                                _32681 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_32681] = 23
                                mem[_32681 + 32] = 'multiplication overflow'
                                if not _32428:
                                    mem[_32656] = 0
                                    if 0 / 10^18 > mem[_30376 + 160]:
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        mem[_30376 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                        mem[_30376 + 160] = 0 / 10^18
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        mem[_30376 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                else:
                                    if not _32610:
                                        mem[_32656] = 0
                                        if 0 / 10^18 > mem[_30376 + 160]:
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_30376 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                            mem[_30376 + 160] = 0 / 10^18
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_30376 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                    else:
                                        if _32428 and _32610 > -1 / _32428:
                                            revert with 'NH{q', 17
                                        if not _32428:
                                            revert with 'NH{q', 18
                                        if _32428 * _32610 / _32428 != _32610:
                                            _33094 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 23
                                            idx = 0
                                            while idx < 23:
                                                mem[idx + _33094 + 68] = mem[idx + _32681 + 32]
                                                _32208 = mem[_1826]
                                                idx = idx + 32
                                                continue 
                                            mem[_33094 + 91] = 0
                                            revert with memory
                                              from mem[64]
                                               len _33094 + -mem[64] + 100
                                        mem[_32656] = _32428 * _32610
                                        if _32428 * _32610 / 10^18 > mem[_30376 + 160]:
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_30376 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                            mem[_30376 + 160] = _32428 * _32610 / 10^18
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_30376 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                            else:
                                if idx >= mem[_1826]:
                                    revert with 'NH{q', 50
                                mem[_30376 + 64] = mem[mem[(32 * idx) + _1826 + 32] + 32]
                                mem[_30376 + 96] = 0 / 10^18
                                if idx >= mem[_1826]:
                                    revert with 'NH{q', 50
                                mem[_30376] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                _32658 = mem[64]
                                mem[64] = mem[64] + 32
                                mem[_32658] = _32428
                                if idx >= mem[_1826]:
                                    revert with 'NH{q', 50
                                _32683 = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                _32730 = mem[64]
                                mem[64] = mem[64] + 32
                                mem[_32730] = 0
                                _32731 = mem[64]
                                mem[64] = mem[64] + 32
                                _32760 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_32760] = 23
                                mem[_32760 + 32] = 'multiplication overflow'
                                if not _32428:
                                    mem[_32731] = 0
                                    if 0 / 10^18 > mem[_30376 + 160]:
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        mem[_30376 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                        mem[_30376 + 160] = 0 / 10^18
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        mem[_30376 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                else:
                                    if not _32683:
                                        mem[_32731] = 0
                                        if 0 / 10^18 > mem[_30376 + 160]:
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_30376 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                            mem[_30376 + 160] = 0 / 10^18
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_30376 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                    else:
                                        if _32428 and _32683 > -1 / _32428:
                                            revert with 'NH{q', 17
                                        if not _32428:
                                            revert with 'NH{q', 18
                                        if _32428 * _32683 / _32428 != _32683:
                                            _33212 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 23
                                            idx = 0
                                            while idx < 23:
                                                mem[idx + _33212 + 68] = mem[idx + _32760 + 32]
                                                _32208 = mem[_1826]
                                                idx = idx + 32
                                                continue 
                                            mem[_33212 + 91] = 0
                                            revert with memory
                                              from mem[64]
                                               len _33212 + -mem[64] + 100
                                        mem[_32731] = _32428 * _32683
                                        if _32428 * _32683 / 10^18 > mem[_30376 + 160]:
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_30376 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                            mem[_30376 + 160] = _32428 * _32683 / 10^18
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_30376 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                    else:
                        if not _32437:
                            mem[_32451] = 0
                            if _32300 <= 0:
                                _32600 = mem[64]
                                mem[64] = mem[64] + 32
                                mem[_32600] = _32428
                                if idx >= mem[_1826]:
                                    revert with 'NH{q', 50
                                _32615 = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                _32660 = mem[64]
                                mem[64] = mem[64] + 32
                                mem[_32660] = 0
                                _32661 = mem[64]
                                mem[64] = mem[64] + 32
                                _32684 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_32684] = 23
                                mem[_32684 + 32] = 'multiplication overflow'
                                if not _32428:
                                    mem[_32661] = 0
                                    if 0 / 10^18 > mem[_30376 + 160]:
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        mem[_30376 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                        mem[_30376 + 160] = 0 / 10^18
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        mem[_30376 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                else:
                                    if not _32615:
                                        mem[_32661] = 0
                                        if 0 / 10^18 > mem[_30376 + 160]:
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_30376 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                            mem[_30376 + 160] = 0 / 10^18
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_30376 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                    else:
                                        if _32428 and _32615 > -1 / _32428:
                                            revert with 'NH{q', 17
                                        if not _32428:
                                            revert with 'NH{q', 18
                                        if _32428 * _32615 / _32428 != _32615:
                                            _33097 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 23
                                            idx = 0
                                            while idx < 23:
                                                mem[idx + _33097 + 68] = mem[idx + _32684 + 32]
                                                _32208 = mem[_1826]
                                                idx = idx + 32
                                                continue 
                                            mem[_33097 + 91] = 0
                                            revert with memory
                                              from mem[64]
                                               len _33097 + -mem[64] + 100
                                        mem[_32661] = _32428 * _32615
                                        if _32428 * _32615 / 10^18 > mem[_30376 + 160]:
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_30376 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                            mem[_30376 + 160] = _32428 * _32615 / 10^18
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_30376 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                            else:
                                if 0 / 10^18 <= mem[_30376 + 96]:
                                    _32616 = mem[64]
                                    mem[64] = mem[64] + 32
                                    mem[_32616] = _32428
                                    if idx >= mem[_1826]:
                                        revert with 'NH{q', 50
                                    _32636 = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                    _32685 = mem[64]
                                    mem[64] = mem[64] + 32
                                    mem[_32685] = 0
                                    _32686 = mem[64]
                                    mem[64] = mem[64] + 32
                                    _32707 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_32707] = 23
                                    mem[_32707 + 32] = 'multiplication overflow'
                                    if not _32428:
                                        mem[_32686] = 0
                                        if 0 / 10^18 > mem[_30376 + 160]:
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_30376 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                            mem[_30376 + 160] = 0 / 10^18
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_30376 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                    else:
                                        if not _32636:
                                            mem[_32686] = 0
                                            if 0 / 10^18 > mem[_30376 + 160]:
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_30376 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                mem[_30376 + 160] = 0 / 10^18
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_30376 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                        else:
                                            if _32428 and _32636 > -1 / _32428:
                                                revert with 'NH{q', 17
                                            if not _32428:
                                                revert with 'NH{q', 18
                                            if _32428 * _32636 / _32428 != _32636:
                                                _33132 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 23
                                                idx = 0
                                                while idx < 23:
                                                    mem[idx + _33132 + 68] = mem[idx + _32707 + 32]
                                                    _32208 = mem[_1826]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_33132 + 91] = 0
                                                revert with memory
                                                  from mem[64]
                                                   len _33132 + -mem[64] + 100
                                            mem[_32686] = _32428 * _32636
                                            if _32428 * _32636 / 10^18 > mem[_30376 + 160]:
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_30376 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                mem[_30376 + 160] = _32428 * _32636 / 10^18
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_30376 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                else:
                                    if idx >= mem[_1826]:
                                        revert with 'NH{q', 50
                                    mem[_30376 + 64] = mem[mem[(32 * idx) + _1826 + 32] + 32]
                                    mem[_30376 + 96] = 0 / 10^18
                                    if idx >= mem[_1826]:
                                        revert with 'NH{q', 50
                                    mem[_30376] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                    _32688 = mem[64]
                                    mem[64] = mem[64] + 32
                                    mem[_32688] = _32428
                                    if idx >= mem[_1826]:
                                        revert with 'NH{q', 50
                                    _32709 = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                    _32766 = mem[64]
                                    mem[64] = mem[64] + 32
                                    mem[_32766] = 0
                                    _32767 = mem[64]
                                    mem[64] = mem[64] + 32
                                    _32803 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_32803] = 23
                                    mem[_32803 + 32] = 'multiplication overflow'
                                    if not _32428:
                                        mem[_32767] = 0
                                        if 0 / 10^18 > mem[_30376 + 160]:
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_30376 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                            mem[_30376 + 160] = 0 / 10^18
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_30376 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                    else:
                                        if not _32709:
                                            mem[_32767] = 0
                                            if 0 / 10^18 > mem[_30376 + 160]:
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_30376 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                mem[_30376 + 160] = 0 / 10^18
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_30376 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                        else:
                                            if _32428 and _32709 > -1 / _32428:
                                                revert with 'NH{q', 17
                                            if not _32428:
                                                revert with 'NH{q', 18
                                            if _32428 * _32709 / _32428 != _32709:
                                                _33263 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 23
                                                idx = 0
                                                while idx < 23:
                                                    mem[idx + _33263 + 68] = mem[idx + _32803 + 32]
                                                    _32208 = mem[_1826]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_33263 + 91] = 0
                                                revert with memory
                                                  from mem[64]
                                                   len _33263 + -mem[64] + 100
                                            mem[_32767] = _32428 * _32709
                                            if _32428 * _32709 / 10^18 > mem[_30376 + 160]:
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_30376 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                mem[_30376 + 160] = _32428 * _32709 / 10^18
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_30376 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                        else:
                            if _32428 and _32437 > -1 / _32428:
                                revert with 'NH{q', 17
                            if not _32428:
                                revert with 'NH{q', 18
                            if _32428 * _32437 / _32428 != _32437:
                                _32561 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 23
                                idx = 0
                                while idx < 23:
                                    mem[idx + _32561 + 68] = mem[idx + _32461 + 32]
                                    _32208 = mem[_1826]
                                    idx = idx + 32
                                    continue 
                                mem[_32561 + 91] = 0
                                revert with memory
                                  from mem[64]
                                   len _32561 + -mem[64] + 100
                            mem[_32451] = _32428 * _32437
                            if _32300 <= 0:
                                _32733 = mem[64]
                                mem[64] = mem[64] + 32
                                mem[_32733] = _32428
                                if idx >= mem[_1826]:
                                    revert with 'NH{q', 50
                                _32762 = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                _32843 = mem[64]
                                mem[64] = mem[64] + 32
                                mem[_32843] = 0
                                _32844 = mem[64]
                                mem[64] = mem[64] + 32
                                _32900 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_32900] = 23
                                mem[_32900 + 32] = 'multiplication overflow'
                                if not _32428:
                                    mem[_32844] = 0
                                    if 0 / 10^18 > mem[_30376 + 160]:
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        mem[_30376 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                        mem[_30376 + 160] = 0 / 10^18
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        mem[_30376 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                else:
                                    if not _32762:
                                        mem[_32844] = 0
                                        if 0 / 10^18 > mem[_30376 + 160]:
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_30376 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                            mem[_30376 + 160] = 0 / 10^18
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_30376 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                    else:
                                        if _32428 and _32762 > -1 / _32428:
                                            revert with 'NH{q', 17
                                        if not _32428:
                                            revert with 'NH{q', 18
                                        if _32428 * _32762 / _32428 != _32762:
                                            _33354 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 23
                                            idx = 0
                                            while idx < 23:
                                                mem[idx + _33354 + 68] = mem[idx + _32900 + 32]
                                                _32208 = mem[_1826]
                                                idx = idx + 32
                                                continue 
                                            mem[_33354 + 91] = 0
                                            revert with memory
                                              from mem[64]
                                               len _33354 + -mem[64] + 100
                                        mem[_32844] = _32428 * _32762
                                        if _32428 * _32762 / 10^18 > mem[_30376 + 160]:
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_30376 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                            mem[_30376 + 160] = _32428 * _32762 / 10^18
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_30376 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                            else:
                                if _32428 * _32437 / 10^18 <= mem[_30376 + 96]:
                                    _32763 = mem[64]
                                    mem[64] = mem[64] + 32
                                    mem[_32763] = _32428
                                    if idx >= mem[_1826]:
                                        revert with 'NH{q', 50
                                    _32799 = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                    _32901 = mem[64]
                                    mem[64] = mem[64] + 32
                                    mem[_32901] = 0
                                    _32902 = mem[64]
                                    mem[64] = mem[64] + 32
                                    _32957 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_32957] = 23
                                    mem[_32957 + 32] = 'multiplication overflow'
                                    if not _32428:
                                        mem[_32902] = 0
                                        if 0 / 10^18 > mem[_30376 + 160]:
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_30376 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                            mem[_30376 + 160] = 0 / 10^18
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_30376 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                    else:
                                        if not _32799:
                                            mem[_32902] = 0
                                            if 0 / 10^18 > mem[_30376 + 160]:
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_30376 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                mem[_30376 + 160] = 0 / 10^18
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_30376 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                        else:
                                            if _32428 and _32799 > -1 / _32428:
                                                revert with 'NH{q', 17
                                            if not _32428:
                                                revert with 'NH{q', 18
                                            if _32428 * _32799 / _32428 != _32799:
                                                _33408 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 23
                                                idx = 0
                                                while idx < 23:
                                                    mem[idx + _33408 + 68] = mem[idx + _32957 + 32]
                                                    _32208 = mem[_1826]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_33408 + 91] = 0
                                                revert with memory
                                                  from mem[64]
                                                   len _33408 + -mem[64] + 100
                                            mem[_32902] = _32428 * _32799
                                            if _32428 * _32799 / 10^18 > mem[_30376 + 160]:
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_30376 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                mem[_30376 + 160] = _32428 * _32799 / 10^18
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_30376 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                else:
                                    if idx >= mem[_1826]:
                                        revert with 'NH{q', 50
                                    mem[_30376 + 64] = mem[mem[(32 * idx) + _1826 + 32] + 32]
                                    mem[_30376 + 96] = _32428 * _32437 / 10^18
                                    if idx >= mem[_1826]:
                                        revert with 'NH{q', 50
                                    mem[_30376] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                    _32904 = mem[64]
                                    mem[64] = mem[64] + 32
                                    mem[_32904] = _32428
                                    if idx >= mem[_1826]:
                                        revert with 'NH{q', 50
                                    _32959 = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                    _33051 = mem[64]
                                    mem[64] = mem[64] + 32
                                    mem[_33051] = 0
                                    _33052 = mem[64]
                                    mem[64] = mem[64] + 32
                                    _33096 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_33096] = 23
                                    mem[_33096 + 32] = 'multiplication overflow'
                                    if not _32428:
                                        mem[_33052] = 0
                                        if 0 / 10^18 > mem[_30376 + 160]:
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_30376 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                            mem[_30376 + 160] = 0 / 10^18
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_30376 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                    else:
                                        if not _32959:
                                            mem[_33052] = 0
                                            if 0 / 10^18 > mem[_30376 + 160]:
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_30376 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                mem[_30376 + 160] = 0 / 10^18
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_30376 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                        else:
                                            if _32428 and _32959 > -1 / _32428:
                                                revert with 'NH{q', 17
                                            if not _32428:
                                                revert with 'NH{q', 18
                                            if _32428 * _32959 / _32428 != _32959:
                                                _33579 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 23
                                                idx = 0
                                                while idx < 23:
                                                    mem[idx + _33579 + 68] = mem[idx + _33096 + 32]
                                                    _32208 = mem[_1826]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_33579 + 91] = 0
                                                revert with memory
                                                  from mem[64]
                                                   len _33579 + -mem[64] + 100
                                            mem[_33052] = _32428 * _32959
                                            if _32428 * _32959 / 10^18 > mem[_30376 + 160]:
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_30376 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                mem[_30376 + 160] = _32428 * _32959 / 10^18
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_30376 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
            else:
                if mem[mem[(32 * idx) + _1826 + 32] + 64] > 0:
                    if idx >= mem[_1826]:
                        revert with 'NH{q', 50
                    staticcall address(arg1).markets(address arg1) with:
                            gas gas_remaining wei
                           args address(mem[mem[(32 * idx) + _1826 + 32]])
                    mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _32275 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 96
                    require mem[_32275] == bool(mem[_32275])
                    _32326 = mem[_32275 + 32]
                    require mem[_32275 + 64] == bool(mem[_32275 + 64])
                    if mem[_32275]:
                        staticcall address(arg1).oracle() with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _32376 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _32388 = mem[_32376]
                        require mem[_32376] == mem[_32376 + 12 len 20]
                        if idx >= mem[_1826]:
                            revert with 'NH{q', 50
                        _32423 = mem[mem[(32 * idx) + _1826 + 32]]
                        mem[mem[64] + 4] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                        staticcall address(_32388).getUnderlyingPrice(address arg1) with:
                                gas gas_remaining wei
                               args address(_32423)
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _32429 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _32438 = mem[_32429]
                        _32442 = mem[64]
                        mem[64] = mem[64] + 32
                        mem[_32442] = _32438
                        if idx >= mem[_1826]:
                            revert with 'NH{q', 50
                        _32454 = mem[mem[(32 * idx) + _1826 + 32] + 32]
                        _32472 = mem[64]
                        mem[64] = mem[64] + 32
                        mem[_32472] = 0
                        _32473 = mem[64]
                        mem[64] = mem[64] + 32
                        _32482 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_32482] = 23
                        mem[_32482 + 32] = 'multiplication overflow'
                        if not _32438:
                            mem[_32473] = 0
                            if _32326 <= 0:
                                _32619 = mem[64]
                                mem[64] = mem[64] + 32
                                mem[_32619] = _32438
                                if idx >= mem[_1826]:
                                    revert with 'NH{q', 50
                                _32641 = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                _32690 = mem[64]
                                mem[64] = mem[64] + 32
                                mem[_32690] = 0
                                _32691 = mem[64]
                                mem[64] = mem[64] + 32
                                _32710 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_32710] = 23
                                mem[_32710 + 32] = 'multiplication overflow'
                                if not _32438:
                                    mem[_32691] = 0
                                    if 0 / 10^18 > mem[_30376 + 160]:
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        mem[_30376 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                        mem[_30376 + 160] = 0 / 10^18
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        mem[_30376 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                else:
                                    if not _32641:
                                        mem[_32691] = 0
                                        if 0 / 10^18 > mem[_30376 + 160]:
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_30376 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                            mem[_30376 + 160] = 0 / 10^18
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_30376 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                    else:
                                        if _32438 and _32641 > -1 / _32438:
                                            revert with 'NH{q', 17
                                        if not _32438:
                                            revert with 'NH{q', 18
                                        if _32438 * _32641 / _32438 != _32641:
                                            _33134 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 23
                                            idx = 0
                                            while idx < 23:
                                                mem[idx + _33134 + 68] = mem[idx + _32710 + 32]
                                                _32208 = mem[_1826]
                                                idx = idx + 32
                                                continue 
                                            mem[_33134 + 91] = 0
                                            revert with memory
                                              from mem[64]
                                               len _33134 + -mem[64] + 100
                                        mem[_32691] = _32438 * _32641
                                        if _32438 * _32641 / 10^18 > mem[_30376 + 160]:
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_30376 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                            mem[_30376 + 160] = _32438 * _32641 / 10^18
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_30376 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                            else:
                                if 0 / 10^18 <= mem[_30376 + 96]:
                                    _32642 = mem[64]
                                    mem[64] = mem[64] + 32
                                    mem[_32642] = _32438
                                    if idx >= mem[_1826]:
                                        revert with 'NH{q', 50
                                    _32666 = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                    _32711 = mem[64]
                                    mem[64] = mem[64] + 32
                                    mem[_32711] = 0
                                    _32712 = mem[64]
                                    mem[64] = mem[64] + 32
                                    _32735 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_32735] = 23
                                    mem[_32735 + 32] = 'multiplication overflow'
                                    if not _32438:
                                        mem[_32712] = 0
                                        if 0 / 10^18 > mem[_30376 + 160]:
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_30376 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                            mem[_30376 + 160] = 0 / 10^18
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_30376 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                    else:
                                        if not _32666:
                                            mem[_32712] = 0
                                            if 0 / 10^18 > mem[_30376 + 160]:
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_30376 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                mem[_30376 + 160] = 0 / 10^18
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_30376 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                        else:
                                            if _32438 and _32666 > -1 / _32438:
                                                revert with 'NH{q', 17
                                            if not _32438:
                                                revert with 'NH{q', 18
                                            if _32438 * _32666 / _32438 != _32666:
                                                _33175 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 23
                                                idx = 0
                                                while idx < 23:
                                                    mem[idx + _33175 + 68] = mem[idx + _32735 + 32]
                                                    _32208 = mem[_1826]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_33175 + 91] = 0
                                                revert with memory
                                                  from mem[64]
                                                   len _33175 + -mem[64] + 100
                                            mem[_32712] = _32438 * _32666
                                            if _32438 * _32666 / 10^18 > mem[_30376 + 160]:
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_30376 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                mem[_30376 + 160] = _32438 * _32666 / 10^18
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_30376 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                else:
                                    if idx >= mem[_1826]:
                                        revert with 'NH{q', 50
                                    mem[_30376 + 64] = mem[mem[(32 * idx) + _1826 + 32] + 32]
                                    mem[_30376 + 96] = 0 / 10^18
                                    if idx >= mem[_1826]:
                                        revert with 'NH{q', 50
                                    mem[_30376] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                    _32714 = mem[64]
                                    mem[64] = mem[64] + 32
                                    mem[_32714] = _32438
                                    if idx >= mem[_1826]:
                                        revert with 'NH{q', 50
                                    _32737 = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                    _32804 = mem[64]
                                    mem[64] = mem[64] + 32
                                    mem[_32804] = 0
                                    _32805 = mem[64]
                                    mem[64] = mem[64] + 32
                                    _32848 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_32848] = 23
                                    mem[_32848 + 32] = 'multiplication overflow'
                                    if not _32438:
                                        mem[_32805] = 0
                                        if 0 / 10^18 > mem[_30376 + 160]:
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_30376 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                            mem[_30376 + 160] = 0 / 10^18
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_30376 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                    else:
                                        if not _32737:
                                            mem[_32805] = 0
                                            if 0 / 10^18 > mem[_30376 + 160]:
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_30376 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                mem[_30376 + 160] = 0 / 10^18
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_30376 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                        else:
                                            if _32438 and _32737 > -1 / _32438:
                                                revert with 'NH{q', 17
                                            if not _32438:
                                                revert with 'NH{q', 18
                                            if _32438 * _32737 / _32438 != _32737:
                                                _33318 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 23
                                                idx = 0
                                                while idx < 23:
                                                    mem[idx + _33318 + 68] = mem[idx + _32848 + 32]
                                                    _32208 = mem[_1826]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_33318 + 91] = 0
                                                revert with memory
                                                  from mem[64]
                                                   len _33318 + -mem[64] + 100
                                            mem[_32805] = _32438 * _32737
                                            if _32438 * _32737 / 10^18 > mem[_30376 + 160]:
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_30376 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                mem[_30376 + 160] = _32438 * _32737 / 10^18
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_30376 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                        else:
                            if not _32454:
                                mem[_32473] = 0
                                if _32326 <= 0:
                                    _32646 = mem[64]
                                    mem[64] = mem[64] + 32
                                    mem[_32646] = _32438
                                    if idx >= mem[_1826]:
                                        revert with 'NH{q', 50
                                    _32671 = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                    _32716 = mem[64]
                                    mem[64] = mem[64] + 32
                                    mem[_32716] = 0
                                    _32717 = mem[64]
                                    mem[64] = mem[64] + 32
                                    _32738 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_32738] = 23
                                    mem[_32738 + 32] = 'multiplication overflow'
                                    if not _32438:
                                        mem[_32717] = 0
                                        if 0 / 10^18 > mem[_30376 + 160]:
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_30376 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                            mem[_30376 + 160] = 0 / 10^18
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_30376 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                    else:
                                        if not _32671:
                                            mem[_32717] = 0
                                            if 0 / 10^18 > mem[_30376 + 160]:
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_30376 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                mem[_30376 + 160] = 0 / 10^18
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_30376 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                        else:
                                            if _32438 and _32671 > -1 / _32438:
                                                revert with 'NH{q', 17
                                            if not _32438:
                                                revert with 'NH{q', 18
                                            if _32438 * _32671 / _32438 != _32671:
                                                _33178 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 23
                                                idx = 0
                                                while idx < 23:
                                                    mem[idx + _33178 + 68] = mem[idx + _32738 + 32]
                                                    _32208 = mem[_1826]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_33178 + 91] = 0
                                                revert with memory
                                                  from mem[64]
                                                   len _33178 + -mem[64] + 100
                                            mem[_32717] = _32438 * _32671
                                            if _32438 * _32671 / 10^18 > mem[_30376 + 160]:
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_30376 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                mem[_30376 + 160] = _32438 * _32671 / 10^18
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_30376 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                else:
                                    if 0 / 10^18 <= mem[_30376 + 96]:
                                        _32672 = mem[64]
                                        mem[64] = mem[64] + 32
                                        mem[_32672] = _32438
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        _32696 = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                        _32739 = mem[64]
                                        mem[64] = mem[64] + 32
                                        mem[_32739] = 0
                                        _32740 = mem[64]
                                        mem[64] = mem[64] + 32
                                        _32770 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_32770] = 23
                                        mem[_32770 + 32] = 'multiplication overflow'
                                        if not _32438:
                                            mem[_32740] = 0
                                            if 0 / 10^18 > mem[_30376 + 160]:
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_30376 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                mem[_30376 + 160] = 0 / 10^18
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_30376 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                        else:
                                            if not _32696:
                                                mem[_32740] = 0
                                                if 0 / 10^18 > mem[_30376 + 160]:
                                                    if idx >= mem[_1826]:
                                                        revert with 'NH{q', 50
                                                    mem[_30376 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                    mem[_30376 + 160] = 0 / 10^18
                                                    if idx >= mem[_1826]:
                                                        revert with 'NH{q', 50
                                                    mem[_30376 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                            else:
                                                if _32438 and _32696 > -1 / _32438:
                                                    revert with 'NH{q', 17
                                                if not _32438:
                                                    revert with 'NH{q', 18
                                                if _32438 * _32696 / _32438 != _32696:
                                                    _33219 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 23
                                                    idx = 0
                                                    while idx < 23:
                                                        mem[idx + _33219 + 68] = mem[idx + _32770 + 32]
                                                        _32208 = mem[_1826]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_33219 + 91] = 0
                                                    revert with memory
                                                      from mem[64]
                                                       len _33219 + -mem[64] + 100
                                                mem[_32740] = _32438 * _32696
                                                if _32438 * _32696 / 10^18 > mem[_30376 + 160]:
                                                    if idx >= mem[_1826]:
                                                        revert with 'NH{q', 50
                                                    mem[_30376 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                    mem[_30376 + 160] = _32438 * _32696 / 10^18
                                                    if idx >= mem[_1826]:
                                                        revert with 'NH{q', 50
                                                    mem[_30376 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                    else:
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        mem[_30376 + 64] = mem[mem[(32 * idx) + _1826 + 32] + 32]
                                        mem[_30376 + 96] = 0 / 10^18
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        mem[_30376] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                        _32742 = mem[64]
                                        mem[64] = mem[64] + 32
                                        mem[_32742] = _32438
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        _32772 = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                        _32854 = mem[64]
                                        mem[64] = mem[64] + 32
                                        mem[_32854] = 0
                                        _32855 = mem[64]
                                        mem[64] = mem[64] + 32
                                        _32911 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_32911] = 23
                                        mem[_32911 + 32] = 'multiplication overflow'
                                        if not _32438:
                                            mem[_32855] = 0
                                            if 0 / 10^18 > mem[_30376 + 160]:
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_30376 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                mem[_30376 + 160] = 0 / 10^18
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_30376 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                        else:
                                            if not _32772:
                                                mem[_32855] = 0
                                                if 0 / 10^18 > mem[_30376 + 160]:
                                                    if idx >= mem[_1826]:
                                                        revert with 'NH{q', 50
                                                    mem[_30376 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                    mem[_30376 + 160] = 0 / 10^18
                                                    if idx >= mem[_1826]:
                                                        revert with 'NH{q', 50
                                                    mem[_30376 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                            else:
                                                if _32438 and _32772 > -1 / _32438:
                                                    revert with 'NH{q', 17
                                                if not _32438:
                                                    revert with 'NH{q', 18
                                                if _32438 * _32772 / _32438 != _32772:
                                                    _33382 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 23
                                                    idx = 0
                                                    while idx < 23:
                                                        mem[idx + _33382 + 68] = mem[idx + _32911 + 32]
                                                        _32208 = mem[_1826]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_33382 + 91] = 0
                                                    revert with memory
                                                      from mem[64]
                                                       len _33382 + -mem[64] + 100
                                                mem[_32855] = _32438 * _32772
                                                if _32438 * _32772 / 10^18 > mem[_30376 + 160]:
                                                    if idx >= mem[_1826]:
                                                        revert with 'NH{q', 50
                                                    mem[_30376 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                    mem[_30376 + 160] = _32438 * _32772 / 10^18
                                                    if idx >= mem[_1826]:
                                                        revert with 'NH{q', 50
                                                    mem[_30376 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                            else:
                                if _32438 and _32454 > -1 / _32438:
                                    revert with 'NH{q', 17
                                if not _32438:
                                    revert with 'NH{q', 18
                                if _32438 * _32454 / _32438 != _32454:
                                    _32574 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 23
                                    idx = 0
                                    while idx < 23:
                                        mem[idx + _32574 + 68] = mem[idx + _32482 + 32]
                                        _32208 = mem[_1826]
                                        idx = idx + 32
                                        continue 
                                    mem[_32574 + 91] = 0
                                    revert with memory
                                      from mem[64]
                                       len _32574 + -mem[64] + 100
                                mem[_32473] = _32438 * _32454
                                if _32326 <= 0:
                                    _32807 = mem[64]
                                    mem[64] = mem[64] + 32
                                    mem[_32807] = _32438
                                    if idx >= mem[_1826]:
                                        revert with 'NH{q', 50
                                    _32850 = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                    _32961 = mem[64]
                                    mem[64] = mem[64] + 32
                                    mem[_32961] = 0
                                    _32962 = mem[64]
                                    mem[64] = mem[64] + 32
                                    _33009 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_33009] = 23
                                    mem[_33009 + 32] = 'multiplication overflow'
                                    if not _32438:
                                        mem[_32962] = 0
                                        if 0 / 10^18 > mem[_30376 + 160]:
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_30376 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                            mem[_30376 + 160] = 0 / 10^18
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_30376 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                    else:
                                        if not _32850:
                                            mem[_32962] = 0
                                            if 0 / 10^18 > mem[_30376 + 160]:
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_30376 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                mem[_30376 + 160] = 0 / 10^18
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_30376 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                        else:
                                            if _32438 and _32850 > -1 / _32438:
                                                revert with 'NH{q', 17
                                            if not _32438:
                                                revert with 'NH{q', 18
                                            if _32438 * _32850 / _32438 != _32850:
                                                _33484 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 23
                                                idx = 0
                                                while idx < 23:
                                                    mem[idx + _33484 + 68] = mem[idx + _33009 + 32]
                                                    _32208 = mem[_1826]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_33484 + 91] = 0
                                                revert with memory
                                                  from mem[64]
                                                   len _33484 + -mem[64] + 100
                                            mem[_32962] = _32438 * _32850
                                            if _32438 * _32850 / 10^18 > mem[_30376 + 160]:
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_30376 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                mem[_30376 + 160] = _32438 * _32850 / 10^18
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_30376 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                else:
                                    if _32438 * _32454 / 10^18 <= mem[_30376 + 96]:
                                        _32851 = mem[64]
                                        mem[64] = mem[64] + 32
                                        mem[_32851] = _32438
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        _32907 = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                        _33010 = mem[64]
                                        mem[64] = mem[64] + 32
                                        mem[_33010] = 0
                                        _33011 = mem[64]
                                        mem[64] = mem[64] + 32
                                        _33057 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_33057] = 23
                                        mem[_33057 + 32] = 'multiplication overflow'
                                        if not _32438:
                                            mem[_33011] = 0
                                            if 0 / 10^18 > mem[_30376 + 160]:
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_30376 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                mem[_30376 + 160] = 0 / 10^18
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_30376 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                        else:
                                            if not _32907:
                                                mem[_33011] = 0
                                                if 0 / 10^18 > mem[_30376 + 160]:
                                                    if idx >= mem[_1826]:
                                                        revert with 'NH{q', 50
                                                    mem[_30376 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                    mem[_30376 + 160] = 0 / 10^18
                                                    if idx >= mem[_1826]:
                                                        revert with 'NH{q', 50
                                                    mem[_30376 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                            else:
                                                if _32438 and _32907 > -1 / _32438:
                                                    revert with 'NH{q', 17
                                                if not _32438:
                                                    revert with 'NH{q', 18
                                                if _32438 * _32907 / _32438 != _32907:
                                                    _33534 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 23
                                                    idx = 0
                                                    while idx < 23:
                                                        mem[idx + _33534 + 68] = mem[idx + _33057 + 32]
                                                        _32208 = mem[_1826]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_33534 + 91] = 0
                                                    revert with memory
                                                      from mem[64]
                                                       len _33534 + -mem[64] + 100
                                                mem[_33011] = _32438 * _32907
                                                if _32438 * _32907 / 10^18 > mem[_30376 + 160]:
                                                    if idx >= mem[_1826]:
                                                        revert with 'NH{q', 50
                                                    mem[_30376 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                    mem[_30376 + 160] = _32438 * _32907 / 10^18
                                                    if idx >= mem[_1826]:
                                                        revert with 'NH{q', 50
                                                    mem[_30376 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                    else:
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        mem[_30376 + 64] = mem[mem[(32 * idx) + _1826 + 32] + 32]
                                        mem[_30376 + 96] = _32438 * _32454 / 10^18
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        mem[_30376] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                        _33013 = mem[64]
                                        mem[64] = mem[64] + 32
                                        mem[_33013] = _32438
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        _33059 = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                        _33135 = mem[64]
                                        mem[64] = mem[64] + 32
                                        mem[_33135] = 0
                                        _33136 = mem[64]
                                        mem[64] = mem[64] + 32
                                        _33177 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_33177] = 23
                                        mem[_33177 + 32] = 'multiplication overflow'
                                        if not _32438:
                                            mem[_33136] = 0
                                            if 0 / 10^18 > mem[_30376 + 160]:
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_30376 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                mem[_30376 + 160] = 0 / 10^18
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_30376 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                        else:
                                            if not _33059:
                                                mem[_33136] = 0
                                                if 0 / 10^18 > mem[_30376 + 160]:
                                                    if idx >= mem[_1826]:
                                                        revert with 'NH{q', 50
                                                    mem[_30376 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                    mem[_30376 + 160] = 0 / 10^18
                                                    if idx >= mem[_1826]:
                                                        revert with 'NH{q', 50
                                                    mem[_30376 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                            else:
                                                if _32438 and _33059 > -1 / _32438:
                                                    revert with 'NH{q', 17
                                                if not _32438:
                                                    revert with 'NH{q', 18
                                                if _32438 * _33059 / _32438 != _33059:
                                                    _33733 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 23
                                                    idx = 0
                                                    while idx < 23:
                                                        mem[idx + _33733 + 68] = mem[idx + _33177 + 32]
                                                        _32208 = mem[_1826]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_33733 + 91] = 0
                                                    revert with memory
                                                      from mem[64]
                                                       len _33733 + -mem[64] + 100
                                                mem[_33136] = _32438 * _33059
                                                if _32438 * _33059 / 10^18 > mem[_30376 + 160]:
                                                    if idx >= mem[_1826]:
                                                        revert with 'NH{q', 50
                                                    mem[_30376 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                    mem[_30376 + 160] = _32438 * _33059 / 10^18
                                                    if idx >= mem[_1826]:
                                                        revert with 'NH{q', 50
                                                    mem[_30376 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
            if idx == -1:
                revert with 'NH{q', 17
            _32208 = mem[_1826]
            idx = idx + 1
            continue 
        _32210 = mem[_30376 + 32]
        _32211 = mem[_30376]
        _32212 = mem[_30376 + 128]
        mem[224] = mem[_30376 + 160]
        mem[192] = _32212
        mem[160] = address(_32211)
        mem[128] = address(_32210)
        mem[mem[64]] = mem[108 len 20]
        mem[mem[64] + 32] = address(_32210)
        mem[mem[64] + 64] = address(_32211)
        mem[mem[64] + 96] = _32212
        mem[mem[64] + 128] = mem[224]
        mem[mem[64] + 160] = bool(mem[256])
        return mem[mem[64]], address(_32210), address(_32211), _32212, mem[mem[64] + 128 len 64]
    mem[64] = _1826 + (32 * _24) + 928
    mem[_1826 + (32 * _24) + 800] = 0
    mem[_1826 + (32 * _24) + 832] = 0
    mem[_1826 + (32 * _24) + 864] = 0
    mem[_1826 + (32 * _24) + 896] = 0
    mem[var65002] = var65001
    if not var65003 - 1:
        idx = 0
        while idx < _24:
            if idx >= mem[(4 * ceil32(return_data.size)) + 288]:
                revert with 'NH{q', 50
            _34842 = mem[(32 * idx) + (4 * ceil32(return_data.size)) + 320]
            mem[mem[64] + 4] = address(arg2)
            staticcall address(_34842).borrowBalanceStored(address arg1) with:
                    gas gas_remaining wei
                   args address(arg2)
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _34845 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _34894 = mem[_34845]
            _34901 = mem[64]
            mem[64] = mem[64] + 128
            if idx >= mem[(4 * ceil32(return_data.size)) + 288]:
                revert with 'NH{q', 50
            mem[_34901] = mem[(32 * idx) + (4 * ceil32(return_data.size)) + 332 len 20]
            if idx >= mem[(4 * ceil32(return_data.size)) + 288]:
                revert with 'NH{q', 50
            _34912 = mem[(32 * idx) + (4 * ceil32(return_data.size)) + 320]
            mem[mem[64] + 4] = address(arg2)
            staticcall address(_34912).0x70a08231 with:
                    gas gas_remaining wei
                   args address(arg2)
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _34937 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _34952 = mem[_34937]
            if mem[_34937] <= 0:
                mem[_34901 + 32] = 0
                mem[_34901 + 64] = _34894
                _34983 = mem[64]
                mem[64] = mem[64] + 32
                mem[_34983] = ext_call.return_data[0]
                _34991 = mem[64]
                mem[64] = mem[64] + 32
                mem[_34991] = 0
                _34992 = mem[64]
                mem[64] = mem[64] + 32
                _34997 = mem[64]
                mem[64] = mem[64] + 64
                mem[_34997] = 23
                mem[_34997 + 32] = 'multiplication overflow'
                if not ext_call.return_data[0]:
                    mem[_34992] = 0
                    mem[_34901 + 96] = 0 / 10^18
                    if idx >= mem[_1826]:
                        revert with 'NH{q', 50
                    mem[(32 * idx) + _1826 + 32] = _34901
                    if idx == -1:
                        revert with 'NH{q', 17
                    idx = idx + 1
                    continue 
                if not _34894:
                    mem[_34992] = 0
                    mem[_34901 + 96] = 0 / 10^18
                    if idx >= mem[_1826]:
                        revert with 'NH{q', 50
                    mem[(32 * idx) + _1826 + 32] = _34901
                    if idx == -1:
                        revert with 'NH{q', 17
                    idx = idx + 1
                    continue 
                if ext_call.return_data[0] and _34894 > -1 / ext_call.return_data[0]:
                    revert with 'NH{q', 17
                if not ext_call.return_data[0]:
                    revert with 'NH{q', 18
                if ext_call.return_data[0] * _34894 / ext_call.return_data[0] == _34894:
                    mem[_34992] = ext_call.return_data[0] * _34894
                    mem[_34901 + 96] = ext_call.return_data[0] * _34894 / 10^18
                    if idx >= mem[_1826]:
                        revert with 'NH{q', 50
                    mem[(32 * idx) + _1826 + 32] = _34901
                    if idx == -1:
                        revert with 'NH{q', 17
                    idx = idx + 1
                    continue 
                _35042 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 23
                idx = 0
                while idx < 23:
                    mem[idx + _35042 + 68] = mem[idx + _34997 + 32]
                    idx = idx + 32
                    continue 
                mem[_35042 + 91] = 0
                revert with memory
                  from mem[64]
                   len _35042 + -mem[64] + 100
            _34969 = mem[64]
            mem[64] = mem[64] + 32
            staticcall address(_34912).exchangeRateStored() with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _34979 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[_34969] = mem[_34979]
            _35002 = mem[64]
            mem[64] = mem[64] + 32
            mem[_35002] = 0
            _35003 = mem[64]
            mem[64] = mem[64] + 32
            _35004 = mem[_34969]
            _35008 = mem[64]
            mem[64] = mem[64] + 64
            mem[_35008] = 23
            mem[_35008 + 32] = 'multiplication overflow'
            if not _35004:
                mem[_35003] = 0
                mem[_34901 + 32] = 0 / 10^18
                mem[_34901 + 64] = _34894
                _35098 = mem[64]
                mem[64] = mem[64] + 32
                mem[_35098] = ext_call.return_data[0]
                _35115 = mem[64]
                mem[64] = mem[64] + 32
                mem[_35115] = 0
                _35116 = mem[64]
                mem[64] = mem[64] + 32
                _35125 = mem[64]
                mem[64] = mem[64] + 64
                mem[_35125] = 23
                mem[_35125 + 32] = 'multiplication overflow'
                if not ext_call.return_data[0]:
                    mem[_35116] = 0
                    mem[_34901 + 96] = 0 / 10^18
                    if idx >= mem[_1826]:
                        revert with 'NH{q', 50
                    mem[(32 * idx) + _1826 + 32] = _34901
                    if idx == -1:
                        revert with 'NH{q', 17
                    idx = idx + 1
                    continue 
                if not _34894:
                    mem[_35116] = 0
                    mem[_34901 + 96] = 0 / 10^18
                    if idx >= mem[_1826]:
                        revert with 'NH{q', 50
                    mem[(32 * idx) + _1826 + 32] = _34901
                    if idx == -1:
                        revert with 'NH{q', 17
                    idx = idx + 1
                    continue 
                if ext_call.return_data[0] and _34894 > -1 / ext_call.return_data[0]:
                    revert with 'NH{q', 17
                if not ext_call.return_data[0]:
                    revert with 'NH{q', 18
                if ext_call.return_data[0] * _34894 / ext_call.return_data[0] == _34894:
                    mem[_35116] = ext_call.return_data[0] * _34894
                    mem[_34901 + 96] = ext_call.return_data[0] * _34894 / 10^18
                    if idx >= mem[_1826]:
                        revert with 'NH{q', 50
                    mem[(32 * idx) + _1826 + 32] = _34901
                    if idx == -1:
                        revert with 'NH{q', 17
                    idx = idx + 1
                    continue 
                _35174 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 23
                idx = 0
                while idx < 23:
                    mem[idx + _35174 + 68] = mem[idx + _35125 + 32]
                    idx = idx + 32
                    continue 
                mem[_35174 + 91] = 0
                revert with memory
                  from mem[64]
                   len _35174 + -mem[64] + 100
            if not _34952:
                mem[_35003] = 0
                mem[_34901 + 32] = 0 / 10^18
                mem[_34901 + 64] = _34894
                _35109 = mem[64]
                mem[64] = mem[64] + 32
                mem[_35109] = ext_call.return_data[0]
                _35126 = mem[64]
                mem[64] = mem[64] + 32
                mem[_35126] = 0
                _35127 = mem[64]
                mem[64] = mem[64] + 32
                _35133 = mem[64]
                mem[64] = mem[64] + 64
                mem[_35133] = 23
                mem[_35133 + 32] = 'multiplication overflow'
                if not ext_call.return_data[0]:
                    mem[_35127] = 0
                    mem[_34901 + 96] = 0 / 10^18
                    if idx >= mem[_1826]:
                        revert with 'NH{q', 50
                    mem[(32 * idx) + _1826 + 32] = _34901
                    if idx == -1:
                        revert with 'NH{q', 17
                    idx = idx + 1
                    continue 
                if not _34894:
                    mem[_35127] = 0
                    mem[_34901 + 96] = 0 / 10^18
                    if idx >= mem[_1826]:
                        revert with 'NH{q', 50
                    mem[(32 * idx) + _1826 + 32] = _34901
                    if idx == -1:
                        revert with 'NH{q', 17
                    idx = idx + 1
                    continue 
                if ext_call.return_data[0] and _34894 > -1 / ext_call.return_data[0]:
                    revert with 'NH{q', 17
                if not ext_call.return_data[0]:
                    revert with 'NH{q', 18
                if ext_call.return_data[0] * _34894 / ext_call.return_data[0] == _34894:
                    mem[_35127] = ext_call.return_data[0] * _34894
                    mem[_34901 + 96] = ext_call.return_data[0] * _34894 / 10^18
                    if idx >= mem[_1826]:
                        revert with 'NH{q', 50
                    mem[(32 * idx) + _1826 + 32] = _34901
                    if idx == -1:
                        revert with 'NH{q', 17
                    idx = idx + 1
                    continue 
                _35182 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 23
                idx = 0
                while idx < 23:
                    mem[idx + _35182 + 68] = mem[idx + _35133 + 32]
                    idx = idx + 32
                    continue 
                mem[_35182 + 91] = 0
                revert with memory
                  from mem[64]
                   len _35182 + -mem[64] + 100
            if _35004 and _34952 > -1 / _35004:
                revert with 'NH{q', 17
            if not _35004:
                revert with 'NH{q', 18
            if _35004 * _34952 / _35004 != _34952:
                _35053 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 23
                idx = 0
                while idx < 23:
                    mem[idx + _35053 + 68] = mem[idx + _35008 + 32]
                    idx = idx + 32
                    continue 
                mem[_35053 + 91] = 0
                revert with memory
                  from mem[64]
                   len _35053 + -mem[64] + 100
            mem[_35003] = _35004 * _34952
            mem[_34901 + 32] = _35004 * _34952 / 10^18
            mem[_34901 + 64] = _34894
            _35149 = mem[64]
            mem[64] = mem[64] + 32
            mem[_35149] = ext_call.return_data[0]
            _35153 = mem[64]
            mem[64] = mem[64] + 32
            mem[_35153] = 0
            _35154 = mem[64]
            mem[64] = mem[64] + 32
            _35159 = mem[64]
            mem[64] = mem[64] + 64
            mem[_35159] = 23
            mem[_35159 + 32] = 'multiplication overflow'
            if not ext_call.return_data[0]:
                mem[_35154] = 0
                mem[_34901 + 96] = 0 / 10^18
                if idx >= mem[_1826]:
                    revert with 'NH{q', 50
                mem[(32 * idx) + _1826 + 32] = _34901
                if idx == -1:
                    revert with 'NH{q', 17
                idx = idx + 1
                continue 
            if not _34894:
                mem[_35154] = 0
                mem[_34901 + 96] = 0 / 10^18
                if idx >= mem[_1826]:
                    revert with 'NH{q', 50
                mem[(32 * idx) + _1826 + 32] = _34901
                if idx == -1:
                    revert with 'NH{q', 17
                idx = idx + 1
                continue 
            if ext_call.return_data[0] and _34894 > -1 / ext_call.return_data[0]:
                revert with 'NH{q', 17
            if not ext_call.return_data[0]:
                revert with 'NH{q', 18
            if ext_call.return_data[0] * _34894 / ext_call.return_data[0] == _34894:
                mem[_35154] = ext_call.return_data[0] * _34894
                mem[_34901 + 96] = ext_call.return_data[0] * _34894 / 10^18
                if idx >= mem[_1826]:
                    revert with 'NH{q', 50
                mem[(32 * idx) + _1826 + 32] = _34901
                if idx == -1:
                    revert with 'NH{q', 17
                idx = idx + 1
                continue 
            _35314 = mem[64]
            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = 32
            mem[mem[64] + 36] = 23
            idx = 0
            while idx < 23:
                mem[idx + _35314 + 68] = mem[idx + _35159 + 32]
                idx = idx + 32
                continue 
            mem[_35314 + 91] = 0
            revert with memory
              from mem[64]
               len _35314 + -mem[64] + 100
        _34841 = mem[64]
        mem[64] = mem[64] + 192
        mem[_34841] = 0
        mem[_34841 + 32] = 0
        mem[_34841 + 64] = 0
        mem[_34841 + 96] = 0
        mem[_34841 + 128] = 0
        mem[_34841 + 160] = 0
        _36673 = mem[_1826]
        idx = 0
        while idx < _36673:
            if idx >= mem[_1826]:
                revert with 'NH{q', 50
            if idx >= mem[_1826]:
                revert with 'NH{q', 50
            if mem[mem[(32 * idx) + _1826 + 32] + 32] > 0:
                staticcall address(arg1).markets(address arg1) with:
                        gas gas_remaining wei
                       args address(mem[mem[(32 * idx) + _1826 + 32]])
                mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _36721 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 96
                require mem[_36721] == bool(mem[_36721])
                _36765 = mem[_36721 + 32]
                require mem[_36721 + 64] == bool(mem[_36721 + 64])
                if mem[_36721]:
                    staticcall address(arg1).oracle() with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _36828 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _36840 = mem[_36828]
                    require mem[_36828] == mem[_36828 + 12 len 20]
                    if idx >= mem[_1826]:
                        revert with 'NH{q', 50
                    _36871 = mem[mem[(32 * idx) + _1826 + 32]]
                    mem[mem[64] + 4] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                    staticcall address(_36840).getUnderlyingPrice(address arg1) with:
                            gas gas_remaining wei
                           args address(_36871)
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _36881 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _36893 = mem[_36881]
                    _36898 = mem[64]
                    mem[64] = mem[64] + 32
                    mem[_36898] = _36893
                    if idx >= mem[_1826]:
                        revert with 'NH{q', 50
                    _36902 = mem[mem[(32 * idx) + _1826 + 32] + 32]
                    _36915 = mem[64]
                    mem[64] = mem[64] + 32
                    mem[_36915] = 0
                    _36916 = mem[64]
                    mem[64] = mem[64] + 32
                    _36926 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_36926] = 23
                    mem[_36926 + 32] = 'multiplication overflow'
                    if not _36893:
                        mem[_36916] = 0
                        if _36765 <= 0:
                            _37048 = mem[64]
                            mem[64] = mem[64] + 32
                            mem[_37048] = _36893
                            if idx >= mem[_1826]:
                                revert with 'NH{q', 50
                            _37060 = mem[mem[(32 * idx) + _1826 + 32] + 96]
                            _37095 = mem[64]
                            mem[64] = mem[64] + 32
                            mem[_37095] = 0
                            _37096 = mem[64]
                            mem[64] = mem[64] + 32
                            _37119 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_37119] = 23
                            mem[_37119 + 32] = 'multiplication overflow'
                            if not _36893:
                                mem[_37096] = 0
                                if 0 / 10^18 > mem[_34841 + 160]:
                                    if idx >= mem[_1826]:
                                        revert with 'NH{q', 50
                                    mem[_34841 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                    mem[_34841 + 160] = 0 / 10^18
                                    if idx >= mem[_1826]:
                                        revert with 'NH{q', 50
                                    mem[_34841 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                            else:
                                if not _37060:
                                    mem[_37096] = 0
                                    if 0 / 10^18 > mem[_34841 + 160]:
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        mem[_34841 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                        mem[_34841 + 160] = 0 / 10^18
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        mem[_34841 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                else:
                                    if _36893 and _37060 > -1 / _36893:
                                        revert with 'NH{q', 17
                                    if not _36893:
                                        revert with 'NH{q', 18
                                    if _36893 * _37060 / _36893 != _37060:
                                        _37515 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 23
                                        idx = 0
                                        while idx < 23:
                                            mem[idx + _37515 + 68] = mem[idx + _37119 + 32]
                                            _36673 = mem[_1826]
                                            idx = idx + 32
                                            continue 
                                        mem[_37515 + 91] = 0
                                        revert with memory
                                          from mem[64]
                                           len _37515 + -mem[64] + 100
                                    mem[_37096] = _36893 * _37060
                                    if _36893 * _37060 / 10^18 > mem[_34841 + 160]:
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        mem[_34841 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                        mem[_34841 + 160] = _36893 * _37060 / 10^18
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        mem[_34841 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                        else:
                            if 0 / 10^18 <= mem[_34841 + 96]:
                                _37061 = mem[64]
                                mem[64] = mem[64] + 32
                                mem[_37061] = _36893
                                if idx >= mem[_1826]:
                                    revert with 'NH{q', 50
                                _37075 = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                _37120 = mem[64]
                                mem[64] = mem[64] + 32
                                mem[_37120] = 0
                                _37121 = mem[64]
                                mem[64] = mem[64] + 32
                                _37146 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_37146] = 23
                                mem[_37146 + 32] = 'multiplication overflow'
                                if not _36893:
                                    mem[_37121] = 0
                                    if 0 / 10^18 > mem[_34841 + 160]:
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        mem[_34841 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                        mem[_34841 + 160] = 0 / 10^18
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        mem[_34841 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                else:
                                    if not _37075:
                                        mem[_37121] = 0
                                        if 0 / 10^18 > mem[_34841 + 160]:
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_34841 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                            mem[_34841 + 160] = 0 / 10^18
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_34841 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                    else:
                                        if _36893 and _37075 > -1 / _36893:
                                            revert with 'NH{q', 17
                                        if not _36893:
                                            revert with 'NH{q', 18
                                        if _36893 * _37075 / _36893 != _37075:
                                            _37559 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 23
                                            idx = 0
                                            while idx < 23:
                                                mem[idx + _37559 + 68] = mem[idx + _37146 + 32]
                                                _36673 = mem[_1826]
                                                idx = idx + 32
                                                continue 
                                            mem[_37559 + 91] = 0
                                            revert with memory
                                              from mem[64]
                                               len _37559 + -mem[64] + 100
                                        mem[_37121] = _36893 * _37075
                                        if _36893 * _37075 / 10^18 > mem[_34841 + 160]:
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_34841 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                            mem[_34841 + 160] = _36893 * _37075 / 10^18
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_34841 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                            else:
                                if idx >= mem[_1826]:
                                    revert with 'NH{q', 50
                                mem[_34841 + 64] = mem[mem[(32 * idx) + _1826 + 32] + 32]
                                mem[_34841 + 96] = 0 / 10^18
                                if idx >= mem[_1826]:
                                    revert with 'NH{q', 50
                                mem[_34841] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                _37123 = mem[64]
                                mem[64] = mem[64] + 32
                                mem[_37123] = _36893
                                if idx >= mem[_1826]:
                                    revert with 'NH{q', 50
                                _37148 = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                _37195 = mem[64]
                                mem[64] = mem[64] + 32
                                mem[_37195] = 0
                                _37196 = mem[64]
                                mem[64] = mem[64] + 32
                                _37225 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_37225] = 23
                                mem[_37225 + 32] = 'multiplication overflow'
                                if not _36893:
                                    mem[_37196] = 0
                                    if 0 / 10^18 > mem[_34841 + 160]:
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        mem[_34841 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                        mem[_34841 + 160] = 0 / 10^18
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        mem[_34841 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                else:
                                    if not _37148:
                                        mem[_37196] = 0
                                        if 0 / 10^18 > mem[_34841 + 160]:
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_34841 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                            mem[_34841 + 160] = 0 / 10^18
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_34841 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                    else:
                                        if _36893 and _37148 > -1 / _36893:
                                            revert with 'NH{q', 17
                                        if not _36893:
                                            revert with 'NH{q', 18
                                        if _36893 * _37148 / _36893 != _37148:
                                            _37677 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 23
                                            idx = 0
                                            while idx < 23:
                                                mem[idx + _37677 + 68] = mem[idx + _37225 + 32]
                                                _36673 = mem[_1826]
                                                idx = idx + 32
                                                continue 
                                            mem[_37677 + 91] = 0
                                            revert with memory
                                              from mem[64]
                                               len _37677 + -mem[64] + 100
                                        mem[_37196] = _36893 * _37148
                                        if _36893 * _37148 / 10^18 > mem[_34841 + 160]:
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_34841 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                            mem[_34841 + 160] = _36893 * _37148 / 10^18
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_34841 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                    else:
                        if not _36902:
                            mem[_36916] = 0
                            if _36765 <= 0:
                                _37065 = mem[64]
                                mem[64] = mem[64] + 32
                                mem[_37065] = _36893
                                if idx >= mem[_1826]:
                                    revert with 'NH{q', 50
                                _37080 = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                _37125 = mem[64]
                                mem[64] = mem[64] + 32
                                mem[_37125] = 0
                                _37126 = mem[64]
                                mem[64] = mem[64] + 32
                                _37149 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_37149] = 23
                                mem[_37149 + 32] = 'multiplication overflow'
                                if not _36893:
                                    mem[_37126] = 0
                                    if 0 / 10^18 > mem[_34841 + 160]:
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        mem[_34841 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                        mem[_34841 + 160] = 0 / 10^18
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        mem[_34841 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                else:
                                    if not _37080:
                                        mem[_37126] = 0
                                        if 0 / 10^18 > mem[_34841 + 160]:
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_34841 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                            mem[_34841 + 160] = 0 / 10^18
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_34841 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                    else:
                                        if _36893 and _37080 > -1 / _36893:
                                            revert with 'NH{q', 17
                                        if not _36893:
                                            revert with 'NH{q', 18
                                        if _36893 * _37080 / _36893 != _37080:
                                            _37562 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 23
                                            idx = 0
                                            while idx < 23:
                                                mem[idx + _37562 + 68] = mem[idx + _37149 + 32]
                                                _36673 = mem[_1826]
                                                idx = idx + 32
                                                continue 
                                            mem[_37562 + 91] = 0
                                            revert with memory
                                              from mem[64]
                                               len _37562 + -mem[64] + 100
                                        mem[_37126] = _36893 * _37080
                                        if _36893 * _37080 / 10^18 > mem[_34841 + 160]:
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_34841 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                            mem[_34841 + 160] = _36893 * _37080 / 10^18
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_34841 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                            else:
                                if 0 / 10^18 <= mem[_34841 + 96]:
                                    _37081 = mem[64]
                                    mem[64] = mem[64] + 32
                                    mem[_37081] = _36893
                                    if idx >= mem[_1826]:
                                        revert with 'NH{q', 50
                                    _37101 = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                    _37150 = mem[64]
                                    mem[64] = mem[64] + 32
                                    mem[_37150] = 0
                                    _37151 = mem[64]
                                    mem[64] = mem[64] + 32
                                    _37172 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_37172] = 23
                                    mem[_37172 + 32] = 'multiplication overflow'
                                    if not _36893:
                                        mem[_37151] = 0
                                        if 0 / 10^18 > mem[_34841 + 160]:
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_34841 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                            mem[_34841 + 160] = 0 / 10^18
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_34841 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                    else:
                                        if not _37101:
                                            mem[_37151] = 0
                                            if 0 / 10^18 > mem[_34841 + 160]:
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_34841 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                mem[_34841 + 160] = 0 / 10^18
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_34841 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                        else:
                                            if _36893 and _37101 > -1 / _36893:
                                                revert with 'NH{q', 17
                                            if not _36893:
                                                revert with 'NH{q', 18
                                            if _36893 * _37101 / _36893 != _37101:
                                                _37597 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 23
                                                idx = 0
                                                while idx < 23:
                                                    mem[idx + _37597 + 68] = mem[idx + _37172 + 32]
                                                    _36673 = mem[_1826]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_37597 + 91] = 0
                                                revert with memory
                                                  from mem[64]
                                                   len _37597 + -mem[64] + 100
                                            mem[_37151] = _36893 * _37101
                                            if _36893 * _37101 / 10^18 > mem[_34841 + 160]:
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_34841 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                mem[_34841 + 160] = _36893 * _37101 / 10^18
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_34841 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                else:
                                    if idx >= mem[_1826]:
                                        revert with 'NH{q', 50
                                    mem[_34841 + 64] = mem[mem[(32 * idx) + _1826 + 32] + 32]
                                    mem[_34841 + 96] = 0 / 10^18
                                    if idx >= mem[_1826]:
                                        revert with 'NH{q', 50
                                    mem[_34841] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                    _37153 = mem[64]
                                    mem[64] = mem[64] + 32
                                    mem[_37153] = _36893
                                    if idx >= mem[_1826]:
                                        revert with 'NH{q', 50
                                    _37174 = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                    _37231 = mem[64]
                                    mem[64] = mem[64] + 32
                                    mem[_37231] = 0
                                    _37232 = mem[64]
                                    mem[64] = mem[64] + 32
                                    _37268 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_37268] = 23
                                    mem[_37268 + 32] = 'multiplication overflow'
                                    if not _36893:
                                        mem[_37232] = 0
                                        if 0 / 10^18 > mem[_34841 + 160]:
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_34841 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                            mem[_34841 + 160] = 0 / 10^18
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_34841 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                    else:
                                        if not _37174:
                                            mem[_37232] = 0
                                            if 0 / 10^18 > mem[_34841 + 160]:
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_34841 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                mem[_34841 + 160] = 0 / 10^18
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_34841 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                        else:
                                            if _36893 and _37174 > -1 / _36893:
                                                revert with 'NH{q', 17
                                            if not _36893:
                                                revert with 'NH{q', 18
                                            if _36893 * _37174 / _36893 != _37174:
                                                _37728 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 23
                                                idx = 0
                                                while idx < 23:
                                                    mem[idx + _37728 + 68] = mem[idx + _37268 + 32]
                                                    _36673 = mem[_1826]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_37728 + 91] = 0
                                                revert with memory
                                                  from mem[64]
                                                   len _37728 + -mem[64] + 100
                                            mem[_37232] = _36893 * _37174
                                            if _36893 * _37174 / 10^18 > mem[_34841 + 160]:
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_34841 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                mem[_34841 + 160] = _36893 * _37174 / 10^18
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_34841 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                        else:
                            if _36893 and _36902 > -1 / _36893:
                                revert with 'NH{q', 17
                            if not _36893:
                                revert with 'NH{q', 18
                            if _36893 * _36902 / _36893 != _36902:
                                _37026 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 23
                                idx = 0
                                while idx < 23:
                                    mem[idx + _37026 + 68] = mem[idx + _36926 + 32]
                                    _36673 = mem[_1826]
                                    idx = idx + 32
                                    continue 
                                mem[_37026 + 91] = 0
                                revert with memory
                                  from mem[64]
                                   len _37026 + -mem[64] + 100
                            mem[_36916] = _36893 * _36902
                            if _36765 <= 0:
                                _37198 = mem[64]
                                mem[64] = mem[64] + 32
                                mem[_37198] = _36893
                                if idx >= mem[_1826]:
                                    revert with 'NH{q', 50
                                _37227 = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                _37308 = mem[64]
                                mem[64] = mem[64] + 32
                                mem[_37308] = 0
                                _37309 = mem[64]
                                mem[64] = mem[64] + 32
                                _37365 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_37365] = 23
                                mem[_37365 + 32] = 'multiplication overflow'
                                if not _36893:
                                    mem[_37309] = 0
                                    if 0 / 10^18 > mem[_34841 + 160]:
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        mem[_34841 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                        mem[_34841 + 160] = 0 / 10^18
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        mem[_34841 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                else:
                                    if not _37227:
                                        mem[_37309] = 0
                                        if 0 / 10^18 > mem[_34841 + 160]:
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_34841 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                            mem[_34841 + 160] = 0 / 10^18
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_34841 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                    else:
                                        if _36893 and _37227 > -1 / _36893:
                                            revert with 'NH{q', 17
                                        if not _36893:
                                            revert with 'NH{q', 18
                                        if _36893 * _37227 / _36893 != _37227:
                                            _37819 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 23
                                            idx = 0
                                            while idx < 23:
                                                mem[idx + _37819 + 68] = mem[idx + _37365 + 32]
                                                _36673 = mem[_1826]
                                                idx = idx + 32
                                                continue 
                                            mem[_37819 + 91] = 0
                                            revert with memory
                                              from mem[64]
                                               len _37819 + -mem[64] + 100
                                        mem[_37309] = _36893 * _37227
                                        if _36893 * _37227 / 10^18 > mem[_34841 + 160]:
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_34841 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                            mem[_34841 + 160] = _36893 * _37227 / 10^18
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_34841 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                            else:
                                if _36893 * _36902 / 10^18 <= mem[_34841 + 96]:
                                    _37228 = mem[64]
                                    mem[64] = mem[64] + 32
                                    mem[_37228] = _36893
                                    if idx >= mem[_1826]:
                                        revert with 'NH{q', 50
                                    _37264 = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                    _37366 = mem[64]
                                    mem[64] = mem[64] + 32
                                    mem[_37366] = 0
                                    _37367 = mem[64]
                                    mem[64] = mem[64] + 32
                                    _37422 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_37422] = 23
                                    mem[_37422 + 32] = 'multiplication overflow'
                                    if not _36893:
                                        mem[_37367] = 0
                                        if 0 / 10^18 > mem[_34841 + 160]:
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_34841 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                            mem[_34841 + 160] = 0 / 10^18
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_34841 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                    else:
                                        if not _37264:
                                            mem[_37367] = 0
                                            if 0 / 10^18 > mem[_34841 + 160]:
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_34841 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                mem[_34841 + 160] = 0 / 10^18
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_34841 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                        else:
                                            if _36893 and _37264 > -1 / _36893:
                                                revert with 'NH{q', 17
                                            if not _36893:
                                                revert with 'NH{q', 18
                                            if _36893 * _37264 / _36893 != _37264:
                                                _37873 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 23
                                                idx = 0
                                                while idx < 23:
                                                    mem[idx + _37873 + 68] = mem[idx + _37422 + 32]
                                                    _36673 = mem[_1826]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_37873 + 91] = 0
                                                revert with memory
                                                  from mem[64]
                                                   len _37873 + -mem[64] + 100
                                            mem[_37367] = _36893 * _37264
                                            if _36893 * _37264 / 10^18 > mem[_34841 + 160]:
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_34841 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                mem[_34841 + 160] = _36893 * _37264 / 10^18
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_34841 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                else:
                                    if idx >= mem[_1826]:
                                        revert with 'NH{q', 50
                                    mem[_34841 + 64] = mem[mem[(32 * idx) + _1826 + 32] + 32]
                                    mem[_34841 + 96] = _36893 * _36902 / 10^18
                                    if idx >= mem[_1826]:
                                        revert with 'NH{q', 50
                                    mem[_34841] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                    _37369 = mem[64]
                                    mem[64] = mem[64] + 32
                                    mem[_37369] = _36893
                                    if idx >= mem[_1826]:
                                        revert with 'NH{q', 50
                                    _37424 = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                    _37516 = mem[64]
                                    mem[64] = mem[64] + 32
                                    mem[_37516] = 0
                                    _37517 = mem[64]
                                    mem[64] = mem[64] + 32
                                    _37561 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_37561] = 23
                                    mem[_37561 + 32] = 'multiplication overflow'
                                    if not _36893:
                                        mem[_37517] = 0
                                        if 0 / 10^18 > mem[_34841 + 160]:
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_34841 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                            mem[_34841 + 160] = 0 / 10^18
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_34841 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                    else:
                                        if not _37424:
                                            mem[_37517] = 0
                                            if 0 / 10^18 > mem[_34841 + 160]:
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_34841 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                mem[_34841 + 160] = 0 / 10^18
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_34841 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                        else:
                                            if _36893 and _37424 > -1 / _36893:
                                                revert with 'NH{q', 17
                                            if not _36893:
                                                revert with 'NH{q', 18
                                            if _36893 * _37424 / _36893 != _37424:
                                                _38044 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 23
                                                idx = 0
                                                while idx < 23:
                                                    mem[idx + _38044 + 68] = mem[idx + _37561 + 32]
                                                    _36673 = mem[_1826]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_38044 + 91] = 0
                                                revert with memory
                                                  from mem[64]
                                                   len _38044 + -mem[64] + 100
                                            mem[_37517] = _36893 * _37424
                                            if _36893 * _37424 / 10^18 > mem[_34841 + 160]:
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_34841 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                mem[_34841 + 160] = _36893 * _37424 / 10^18
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_34841 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
            else:
                if mem[mem[(32 * idx) + _1826 + 32] + 64] > 0:
                    if idx >= mem[_1826]:
                        revert with 'NH{q', 50
                    staticcall address(arg1).markets(address arg1) with:
                            gas gas_remaining wei
                           args address(mem[mem[(32 * idx) + _1826 + 32]])
                    mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _36740 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 96
                    require mem[_36740] == bool(mem[_36740])
                    _36791 = mem[_36740 + 32]
                    require mem[_36740 + 64] == bool(mem[_36740 + 64])
                    if mem[_36740]:
                        staticcall address(arg1).oracle() with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _36841 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _36853 = mem[_36841]
                        require mem[_36841] == mem[_36841 + 12 len 20]
                        if idx >= mem[_1826]:
                            revert with 'NH{q', 50
                        _36888 = mem[mem[(32 * idx) + _1826 + 32]]
                        mem[mem[64] + 4] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                        staticcall address(_36853).getUnderlyingPrice(address arg1) with:
                                gas gas_remaining wei
                               args address(_36888)
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _36894 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _36903 = mem[_36894]
                        _36907 = mem[64]
                        mem[64] = mem[64] + 32
                        mem[_36907] = _36903
                        if idx >= mem[_1826]:
                            revert with 'NH{q', 50
                        _36919 = mem[mem[(32 * idx) + _1826 + 32] + 32]
                        _36937 = mem[64]
                        mem[64] = mem[64] + 32
                        mem[_36937] = 0
                        _36938 = mem[64]
                        mem[64] = mem[64] + 32
                        _36947 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_36947] = 23
                        mem[_36947 + 32] = 'multiplication overflow'
                        if not _36903:
                            mem[_36938] = 0
                            if _36791 <= 0:
                                _37084 = mem[64]
                                mem[64] = mem[64] + 32
                                mem[_37084] = _36903
                                if idx >= mem[_1826]:
                                    revert with 'NH{q', 50
                                _37106 = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                _37155 = mem[64]
                                mem[64] = mem[64] + 32
                                mem[_37155] = 0
                                _37156 = mem[64]
                                mem[64] = mem[64] + 32
                                _37175 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_37175] = 23
                                mem[_37175 + 32] = 'multiplication overflow'
                                if not _36903:
                                    mem[_37156] = 0
                                    if 0 / 10^18 > mem[_34841 + 160]:
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        mem[_34841 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                        mem[_34841 + 160] = 0 / 10^18
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        mem[_34841 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                else:
                                    if not _37106:
                                        mem[_37156] = 0
                                        if 0 / 10^18 > mem[_34841 + 160]:
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_34841 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                            mem[_34841 + 160] = 0 / 10^18
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_34841 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                    else:
                                        if _36903 and _37106 > -1 / _36903:
                                            revert with 'NH{q', 17
                                        if not _36903:
                                            revert with 'NH{q', 18
                                        if _36903 * _37106 / _36903 != _37106:
                                            _37599 = mem[64]
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 23
                                            idx = 0
                                            while idx < 23:
                                                mem[idx + _37599 + 68] = mem[idx + _37175 + 32]
                                                _36673 = mem[_1826]
                                                idx = idx + 32
                                                continue 
                                            mem[_37599 + 91] = 0
                                            revert with memory
                                              from mem[64]
                                               len _37599 + -mem[64] + 100
                                        mem[_37156] = _36903 * _37106
                                        if _36903 * _37106 / 10^18 > mem[_34841 + 160]:
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_34841 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                            mem[_34841 + 160] = _36903 * _37106 / 10^18
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_34841 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                            else:
                                if 0 / 10^18 <= mem[_34841 + 96]:
                                    _37107 = mem[64]
                                    mem[64] = mem[64] + 32
                                    mem[_37107] = _36903
                                    if idx >= mem[_1826]:
                                        revert with 'NH{q', 50
                                    _37131 = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                    _37176 = mem[64]
                                    mem[64] = mem[64] + 32
                                    mem[_37176] = 0
                                    _37177 = mem[64]
                                    mem[64] = mem[64] + 32
                                    _37200 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_37200] = 23
                                    mem[_37200 + 32] = 'multiplication overflow'
                                    if not _36903:
                                        mem[_37177] = 0
                                        if 0 / 10^18 > mem[_34841 + 160]:
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_34841 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                            mem[_34841 + 160] = 0 / 10^18
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_34841 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                    else:
                                        if not _37131:
                                            mem[_37177] = 0
                                            if 0 / 10^18 > mem[_34841 + 160]:
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_34841 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                mem[_34841 + 160] = 0 / 10^18
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_34841 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                        else:
                                            if _36903 and _37131 > -1 / _36903:
                                                revert with 'NH{q', 17
                                            if not _36903:
                                                revert with 'NH{q', 18
                                            if _36903 * _37131 / _36903 != _37131:
                                                _37640 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 23
                                                idx = 0
                                                while idx < 23:
                                                    mem[idx + _37640 + 68] = mem[idx + _37200 + 32]
                                                    _36673 = mem[_1826]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_37640 + 91] = 0
                                                revert with memory
                                                  from mem[64]
                                                   len _37640 + -mem[64] + 100
                                            mem[_37177] = _36903 * _37131
                                            if _36903 * _37131 / 10^18 > mem[_34841 + 160]:
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_34841 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                mem[_34841 + 160] = _36903 * _37131 / 10^18
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_34841 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                else:
                                    if idx >= mem[_1826]:
                                        revert with 'NH{q', 50
                                    mem[_34841 + 64] = mem[mem[(32 * idx) + _1826 + 32] + 32]
                                    mem[_34841 + 96] = 0 / 10^18
                                    if idx >= mem[_1826]:
                                        revert with 'NH{q', 50
                                    mem[_34841] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                    _37179 = mem[64]
                                    mem[64] = mem[64] + 32
                                    mem[_37179] = _36903
                                    if idx >= mem[_1826]:
                                        revert with 'NH{q', 50
                                    _37202 = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                    _37269 = mem[64]
                                    mem[64] = mem[64] + 32
                                    mem[_37269] = 0
                                    _37270 = mem[64]
                                    mem[64] = mem[64] + 32
                                    _37313 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_37313] = 23
                                    mem[_37313 + 32] = 'multiplication overflow'
                                    if not _36903:
                                        mem[_37270] = 0
                                        if 0 / 10^18 > mem[_34841 + 160]:
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_34841 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                            mem[_34841 + 160] = 0 / 10^18
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_34841 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                    else:
                                        if not _37202:
                                            mem[_37270] = 0
                                            if 0 / 10^18 > mem[_34841 + 160]:
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_34841 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                mem[_34841 + 160] = 0 / 10^18
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_34841 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                        else:
                                            if _36903 and _37202 > -1 / _36903:
                                                revert with 'NH{q', 17
                                            if not _36903:
                                                revert with 'NH{q', 18
                                            if _36903 * _37202 / _36903 != _37202:
                                                _37783 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 23
                                                idx = 0
                                                while idx < 23:
                                                    mem[idx + _37783 + 68] = mem[idx + _37313 + 32]
                                                    _36673 = mem[_1826]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_37783 + 91] = 0
                                                revert with memory
                                                  from mem[64]
                                                   len _37783 + -mem[64] + 100
                                            mem[_37270] = _36903 * _37202
                                            if _36903 * _37202 / 10^18 > mem[_34841 + 160]:
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_34841 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                mem[_34841 + 160] = _36903 * _37202 / 10^18
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_34841 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                        else:
                            if not _36919:
                                mem[_36938] = 0
                                if _36791 <= 0:
                                    _37111 = mem[64]
                                    mem[64] = mem[64] + 32
                                    mem[_37111] = _36903
                                    if idx >= mem[_1826]:
                                        revert with 'NH{q', 50
                                    _37136 = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                    _37181 = mem[64]
                                    mem[64] = mem[64] + 32
                                    mem[_37181] = 0
                                    _37182 = mem[64]
                                    mem[64] = mem[64] + 32
                                    _37203 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_37203] = 23
                                    mem[_37203 + 32] = 'multiplication overflow'
                                    if not _36903:
                                        mem[_37182] = 0
                                        if 0 / 10^18 > mem[_34841 + 160]:
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_34841 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                            mem[_34841 + 160] = 0 / 10^18
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_34841 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                    else:
                                        if not _37136:
                                            mem[_37182] = 0
                                            if 0 / 10^18 > mem[_34841 + 160]:
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_34841 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                mem[_34841 + 160] = 0 / 10^18
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_34841 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                        else:
                                            if _36903 and _37136 > -1 / _36903:
                                                revert with 'NH{q', 17
                                            if not _36903:
                                                revert with 'NH{q', 18
                                            if _36903 * _37136 / _36903 != _37136:
                                                _37643 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 23
                                                idx = 0
                                                while idx < 23:
                                                    mem[idx + _37643 + 68] = mem[idx + _37203 + 32]
                                                    _36673 = mem[_1826]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_37643 + 91] = 0
                                                revert with memory
                                                  from mem[64]
                                                   len _37643 + -mem[64] + 100
                                            mem[_37182] = _36903 * _37136
                                            if _36903 * _37136 / 10^18 > mem[_34841 + 160]:
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_34841 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                mem[_34841 + 160] = _36903 * _37136 / 10^18
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_34841 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                else:
                                    if 0 / 10^18 <= mem[_34841 + 96]:
                                        _37137 = mem[64]
                                        mem[64] = mem[64] + 32
                                        mem[_37137] = _36903
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        _37161 = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                        _37204 = mem[64]
                                        mem[64] = mem[64] + 32
                                        mem[_37204] = 0
                                        _37205 = mem[64]
                                        mem[64] = mem[64] + 32
                                        _37235 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_37235] = 23
                                        mem[_37235 + 32] = 'multiplication overflow'
                                        if not _36903:
                                            mem[_37205] = 0
                                            if 0 / 10^18 > mem[_34841 + 160]:
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_34841 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                mem[_34841 + 160] = 0 / 10^18
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_34841 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                        else:
                                            if not _37161:
                                                mem[_37205] = 0
                                                if 0 / 10^18 > mem[_34841 + 160]:
                                                    if idx >= mem[_1826]:
                                                        revert with 'NH{q', 50
                                                    mem[_34841 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                    mem[_34841 + 160] = 0 / 10^18
                                                    if idx >= mem[_1826]:
                                                        revert with 'NH{q', 50
                                                    mem[_34841 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                            else:
                                                if _36903 and _37161 > -1 / _36903:
                                                    revert with 'NH{q', 17
                                                if not _36903:
                                                    revert with 'NH{q', 18
                                                if _36903 * _37161 / _36903 != _37161:
                                                    _37684 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 23
                                                    idx = 0
                                                    while idx < 23:
                                                        mem[idx + _37684 + 68] = mem[idx + _37235 + 32]
                                                        _36673 = mem[_1826]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_37684 + 91] = 0
                                                    revert with memory
                                                      from mem[64]
                                                       len _37684 + -mem[64] + 100
                                                mem[_37205] = _36903 * _37161
                                                if _36903 * _37161 / 10^18 > mem[_34841 + 160]:
                                                    if idx >= mem[_1826]:
                                                        revert with 'NH{q', 50
                                                    mem[_34841 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                    mem[_34841 + 160] = _36903 * _37161 / 10^18
                                                    if idx >= mem[_1826]:
                                                        revert with 'NH{q', 50
                                                    mem[_34841 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                    else:
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        mem[_34841 + 64] = mem[mem[(32 * idx) + _1826 + 32] + 32]
                                        mem[_34841 + 96] = 0 / 10^18
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        mem[_34841] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                        _37207 = mem[64]
                                        mem[64] = mem[64] + 32
                                        mem[_37207] = _36903
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        _37237 = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                        _37319 = mem[64]
                                        mem[64] = mem[64] + 32
                                        mem[_37319] = 0
                                        _37320 = mem[64]
                                        mem[64] = mem[64] + 32
                                        _37376 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_37376] = 23
                                        mem[_37376 + 32] = 'multiplication overflow'
                                        if not _36903:
                                            mem[_37320] = 0
                                            if 0 / 10^18 > mem[_34841 + 160]:
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_34841 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                mem[_34841 + 160] = 0 / 10^18
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_34841 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                        else:
                                            if not _37237:
                                                mem[_37320] = 0
                                                if 0 / 10^18 > mem[_34841 + 160]:
                                                    if idx >= mem[_1826]:
                                                        revert with 'NH{q', 50
                                                    mem[_34841 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                    mem[_34841 + 160] = 0 / 10^18
                                                    if idx >= mem[_1826]:
                                                        revert with 'NH{q', 50
                                                    mem[_34841 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                            else:
                                                if _36903 and _37237 > -1 / _36903:
                                                    revert with 'NH{q', 17
                                                if not _36903:
                                                    revert with 'NH{q', 18
                                                if _36903 * _37237 / _36903 != _37237:
                                                    _37847 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 23
                                                    idx = 0
                                                    while idx < 23:
                                                        mem[idx + _37847 + 68] = mem[idx + _37376 + 32]
                                                        _36673 = mem[_1826]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_37847 + 91] = 0
                                                    revert with memory
                                                      from mem[64]
                                                       len _37847 + -mem[64] + 100
                                                mem[_37320] = _36903 * _37237
                                                if _36903 * _37237 / 10^18 > mem[_34841 + 160]:
                                                    if idx >= mem[_1826]:
                                                        revert with 'NH{q', 50
                                                    mem[_34841 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                    mem[_34841 + 160] = _36903 * _37237 / 10^18
                                                    if idx >= mem[_1826]:
                                                        revert with 'NH{q', 50
                                                    mem[_34841 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                            else:
                                if _36903 and _36919 > -1 / _36903:
                                    revert with 'NH{q', 17
                                if not _36903:
                                    revert with 'NH{q', 18
                                if _36903 * _36919 / _36903 != _36919:
                                    _37039 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 23
                                    idx = 0
                                    while idx < 23:
                                        mem[idx + _37039 + 68] = mem[idx + _36947 + 32]
                                        _36673 = mem[_1826]
                                        idx = idx + 32
                                        continue 
                                    mem[_37039 + 91] = 0
                                    revert with memory
                                      from mem[64]
                                       len _37039 + -mem[64] + 100
                                mem[_36938] = _36903 * _36919
                                if _36791 <= 0:
                                    _37272 = mem[64]
                                    mem[64] = mem[64] + 32
                                    mem[_37272] = _36903
                                    if idx >= mem[_1826]:
                                        revert with 'NH{q', 50
                                    _37315 = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                    _37426 = mem[64]
                                    mem[64] = mem[64] + 32
                                    mem[_37426] = 0
                                    _37427 = mem[64]
                                    mem[64] = mem[64] + 32
                                    _37474 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_37474] = 23
                                    mem[_37474 + 32] = 'multiplication overflow'
                                    if not _36903:
                                        mem[_37427] = 0
                                        if 0 / 10^18 > mem[_34841 + 160]:
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_34841 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                            mem[_34841 + 160] = 0 / 10^18
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_34841 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                    else:
                                        if not _37315:
                                            mem[_37427] = 0
                                            if 0 / 10^18 > mem[_34841 + 160]:
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_34841 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                mem[_34841 + 160] = 0 / 10^18
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_34841 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                        else:
                                            if _36903 and _37315 > -1 / _36903:
                                                revert with 'NH{q', 17
                                            if not _36903:
                                                revert with 'NH{q', 18
                                            if _36903 * _37315 / _36903 != _37315:
                                                _37949 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 23
                                                idx = 0
                                                while idx < 23:
                                                    mem[idx + _37949 + 68] = mem[idx + _37474 + 32]
                                                    _36673 = mem[_1826]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_37949 + 91] = 0
                                                revert with memory
                                                  from mem[64]
                                                   len _37949 + -mem[64] + 100
                                            mem[_37427] = _36903 * _37315
                                            if _36903 * _37315 / 10^18 > mem[_34841 + 160]:
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_34841 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                mem[_34841 + 160] = _36903 * _37315 / 10^18
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_34841 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                else:
                                    if _36903 * _36919 / 10^18 <= mem[_34841 + 96]:
                                        _37316 = mem[64]
                                        mem[64] = mem[64] + 32
                                        mem[_37316] = _36903
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        _37372 = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                        _37475 = mem[64]
                                        mem[64] = mem[64] + 32
                                        mem[_37475] = 0
                                        _37476 = mem[64]
                                        mem[64] = mem[64] + 32
                                        _37522 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_37522] = 23
                                        mem[_37522 + 32] = 'multiplication overflow'
                                        if not _36903:
                                            mem[_37476] = 0
                                            if 0 / 10^18 > mem[_34841 + 160]:
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_34841 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                mem[_34841 + 160] = 0 / 10^18
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_34841 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                        else:
                                            if not _37372:
                                                mem[_37476] = 0
                                                if 0 / 10^18 > mem[_34841 + 160]:
                                                    if idx >= mem[_1826]:
                                                        revert with 'NH{q', 50
                                                    mem[_34841 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                    mem[_34841 + 160] = 0 / 10^18
                                                    if idx >= mem[_1826]:
                                                        revert with 'NH{q', 50
                                                    mem[_34841 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                            else:
                                                if _36903 and _37372 > -1 / _36903:
                                                    revert with 'NH{q', 17
                                                if not _36903:
                                                    revert with 'NH{q', 18
                                                if _36903 * _37372 / _36903 != _37372:
                                                    _37999 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 23
                                                    idx = 0
                                                    while idx < 23:
                                                        mem[idx + _37999 + 68] = mem[idx + _37522 + 32]
                                                        _36673 = mem[_1826]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_37999 + 91] = 0
                                                    revert with memory
                                                      from mem[64]
                                                       len _37999 + -mem[64] + 100
                                                mem[_37476] = _36903 * _37372
                                                if _36903 * _37372 / 10^18 > mem[_34841 + 160]:
                                                    if idx >= mem[_1826]:
                                                        revert with 'NH{q', 50
                                                    mem[_34841 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                    mem[_34841 + 160] = _36903 * _37372 / 10^18
                                                    if idx >= mem[_1826]:
                                                        revert with 'NH{q', 50
                                                    mem[_34841 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                    else:
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        mem[_34841 + 64] = mem[mem[(32 * idx) + _1826 + 32] + 32]
                                        mem[_34841 + 96] = _36903 * _36919 / 10^18
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        mem[_34841] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                        _37478 = mem[64]
                                        mem[64] = mem[64] + 32
                                        mem[_37478] = _36903
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        _37524 = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                        _37600 = mem[64]
                                        mem[64] = mem[64] + 32
                                        mem[_37600] = 0
                                        _37601 = mem[64]
                                        mem[64] = mem[64] + 32
                                        _37642 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_37642] = 23
                                        mem[_37642 + 32] = 'multiplication overflow'
                                        if not _36903:
                                            mem[_37601] = 0
                                            if 0 / 10^18 > mem[_34841 + 160]:
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_34841 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                mem[_34841 + 160] = 0 / 10^18
                                                if idx >= mem[_1826]:
                                                    revert with 'NH{q', 50
                                                mem[_34841 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                        else:
                                            if not _37524:
                                                mem[_37601] = 0
                                                if 0 / 10^18 > mem[_34841 + 160]:
                                                    if idx >= mem[_1826]:
                                                        revert with 'NH{q', 50
                                                    mem[_34841 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                    mem[_34841 + 160] = 0 / 10^18
                                                    if idx >= mem[_1826]:
                                                        revert with 'NH{q', 50
                                                    mem[_34841 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                            else:
                                                if _36903 and _37524 > -1 / _36903:
                                                    revert with 'NH{q', 17
                                                if not _36903:
                                                    revert with 'NH{q', 18
                                                if _36903 * _37524 / _36903 != _37524:
                                                    _38198 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 23
                                                    idx = 0
                                                    while idx < 23:
                                                        mem[idx + _38198 + 68] = mem[idx + _37642 + 32]
                                                        _36673 = mem[_1826]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_38198 + 91] = 0
                                                    revert with memory
                                                      from mem[64]
                                                       len _38198 + -mem[64] + 100
                                                mem[_37601] = _36903 * _37524
                                                if _36903 * _37524 / 10^18 > mem[_34841 + 160]:
                                                    if idx >= mem[_1826]:
                                                        revert with 'NH{q', 50
                                                    mem[_34841 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                                    mem[_34841 + 160] = _36903 * _37524 / 10^18
                                                    if idx >= mem[_1826]:
                                                        revert with 'NH{q', 50
                                                    mem[_34841 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
            if idx == -1:
                revert with 'NH{q', 17
            _36673 = mem[_1826]
            idx = idx + 1
            continue 
        _36675 = mem[_34841 + 32]
        _36676 = mem[_34841]
        _36677 = mem[_34841 + 128]
        mem[224] = mem[_34841 + 160]
        mem[192] = _36677
        mem[160] = address(_36676)
        mem[128] = address(_36675)
        mem[mem[64]] = mem[108 len 20]
        mem[mem[64] + 32] = address(_36675)
        mem[mem[64] + 64] = address(_36676)
        mem[mem[64] + 96] = _36677
        mem[mem[64] + 128] = mem[224]
        mem[mem[64] + 160] = bool(mem[256])
        return mem[mem[64]], address(_36675), address(_36676), _36677, mem[mem[64] + 128 len 64]
    mem[64] = _1826 + (32 * _24) + 1056
    mem[_1826 + (32 * _24) + 928] = 0
    mem[_1826 + (32 * _24) + 960] = 0
    mem[_1826 + (32 * _24) + 992] = 0
    mem[_1826 + (32 * _24) + 1024] = 0
    mem[var69002] = var69001
    if var69003 - 1:
        # nil
    else:
        idx = 0
        while idx < _24:
            if idx >= mem[(4 * ceil32(return_data.size)) + 288]:
                revert with 'NH{q', 50
            _39307 = mem[(32 * idx) + (4 * ceil32(return_data.size)) + 320]
            mem[mem[64] + 4] = address(arg2)
            staticcall address(_39307).borrowBalanceStored(address arg1) with:
                    gas gas_remaining wei
                   args address(arg2)
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _39310 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _39359 = mem[_39310]
            _39366 = mem[64]
            mem[64] = mem[64] + 128
            if idx >= mem[(4 * ceil32(return_data.size)) + 288]:
                revert with 'NH{q', 50
            mem[_39366] = mem[(32 * idx) + (4 * ceil32(return_data.size)) + 332 len 20]
            if idx >= mem[(4 * ceil32(return_data.size)) + 288]:
                revert with 'NH{q', 50
            _39377 = mem[(32 * idx) + (4 * ceil32(return_data.size)) + 320]
            mem[mem[64] + 4] = address(arg2)
            staticcall address(_39377).0x70a08231 with:
                    gas gas_remaining wei
                   args address(arg2)
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _39402 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _39417 = mem[_39402]
            if mem[_39402] <= 0:
                mem[_39366 + 32] = 0
                mem[_39366 + 64] = _39359
                _39448 = mem[64]
                mem[64] = mem[64] + 32
                mem[_39448] = ext_call.return_data[0]
                _39456 = mem[64]
                mem[64] = mem[64] + 32
                mem[_39456] = 0
                _39457 = mem[64]
                mem[64] = mem[64] + 32
                _39462 = mem[64]
                mem[64] = mem[64] + 64
                mem[_39462] = 23
                mem[_39462 + 32] = 'multiplication overflow'
                if not ext_call.return_data[0]:
                    mem[_39457] = 0
                    mem[_39366 + 96] = 0 / 10^18
                    if idx >= mem[_1826]:
                        revert with 'NH{q', 50
                    mem[(32 * idx) + _1826 + 32] = _39366
                    if idx == -1:
                        revert with 'NH{q', 17
                    idx = idx + 1
                    continue 
                if not _39359:
                    mem[_39457] = 0
                    mem[_39366 + 96] = 0 / 10^18
                    if idx >= mem[_1826]:
                        revert with 'NH{q', 50
                    mem[(32 * idx) + _1826 + 32] = _39366
                    if idx == -1:
                        revert with 'NH{q', 17
                    idx = idx + 1
                    continue 
                if ext_call.return_data[0] and _39359 > -1 / ext_call.return_data[0]:
                    revert with 'NH{q', 17
                if not ext_call.return_data[0]:
                    revert with 'NH{q', 18
                if ext_call.return_data[0] * _39359 / ext_call.return_data[0] == _39359:
                    mem[_39457] = ext_call.return_data[0] * _39359
                    mem[_39366 + 96] = ext_call.return_data[0] * _39359 / 10^18
                    if idx >= mem[_1826]:
                        revert with 'NH{q', 50
                    mem[(32 * idx) + _1826 + 32] = _39366
                    if idx == -1:
                        revert with 'NH{q', 17
                    idx = idx + 1
                    continue 
                _39507 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 23
                idx = 0
                while idx < 23:
                    mem[idx + _39507 + 68] = mem[idx + _39462 + 32]
                    idx = idx + 32
                    continue 
                mem[_39507 + 91] = 0
                revert with memory
                  from mem[64]
                   len _39507 + -mem[64] + 100
            _39434 = mem[64]
            mem[64] = mem[64] + 32
            staticcall address(_39377).exchangeRateStored() with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _39444 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            mem[_39434] = mem[_39444]
            _39467 = mem[64]
            mem[64] = mem[64] + 32
            mem[_39467] = 0
            _39468 = mem[64]
            mem[64] = mem[64] + 32
            _39469 = mem[_39434]
            _39473 = mem[64]
            mem[64] = mem[64] + 64
            mem[_39473] = 23
            mem[_39473 + 32] = 'multiplication overflow'
            if not _39469:
                mem[_39468] = 0
                mem[_39366 + 32] = 0 / 10^18
                mem[_39366 + 64] = _39359
                _39563 = mem[64]
                mem[64] = mem[64] + 32
                mem[_39563] = ext_call.return_data[0]
                _39580 = mem[64]
                mem[64] = mem[64] + 32
                mem[_39580] = 0
                _39581 = mem[64]
                mem[64] = mem[64] + 32
                _39590 = mem[64]
                mem[64] = mem[64] + 64
                mem[_39590] = 23
                mem[_39590 + 32] = 'multiplication overflow'
                if not ext_call.return_data[0]:
                    mem[_39581] = 0
                    mem[_39366 + 96] = 0 / 10^18
                    if idx >= mem[_1826]:
                        revert with 'NH{q', 50
                    mem[(32 * idx) + _1826 + 32] = _39366
                    if idx == -1:
                        revert with 'NH{q', 17
                    idx = idx + 1
                    continue 
                if not _39359:
                    mem[_39581] = 0
                    mem[_39366 + 96] = 0 / 10^18
                    if idx >= mem[_1826]:
                        revert with 'NH{q', 50
                    mem[(32 * idx) + _1826 + 32] = _39366
                    if idx == -1:
                        revert with 'NH{q', 17
                    idx = idx + 1
                    continue 
                if ext_call.return_data[0] and _39359 > -1 / ext_call.return_data[0]:
                    revert with 'NH{q', 17
                if not ext_call.return_data[0]:
                    revert with 'NH{q', 18
                if ext_call.return_data[0] * _39359 / ext_call.return_data[0] == _39359:
                    mem[_39581] = ext_call.return_data[0] * _39359
                    mem[_39366 + 96] = ext_call.return_data[0] * _39359 / 10^18
                    if idx >= mem[_1826]:
                        revert with 'NH{q', 50
                    mem[(32 * idx) + _1826 + 32] = _39366
                    if idx == -1:
                        revert with 'NH{q', 17
                    idx = idx + 1
                    continue 
                _39639 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 23
                idx = 0
                while idx < 23:
                    mem[idx + _39639 + 68] = mem[idx + _39590 + 32]
                    idx = idx + 32
                    continue 
                mem[_39639 + 91] = 0
                revert with memory
                  from mem[64]
                   len _39639 + -mem[64] + 100
            if not _39417:
                mem[_39468] = 0
                mem[_39366 + 32] = 0 / 10^18
                mem[_39366 + 64] = _39359
                _39574 = mem[64]
                mem[64] = mem[64] + 32
                mem[_39574] = ext_call.return_data[0]
                _39591 = mem[64]
                mem[64] = mem[64] + 32
                mem[_39591] = 0
                _39592 = mem[64]
                mem[64] = mem[64] + 32
                _39598 = mem[64]
                mem[64] = mem[64] + 64
                mem[_39598] = 23
                mem[_39598 + 32] = 'multiplication overflow'
                if not ext_call.return_data[0]:
                    mem[_39592] = 0
                    mem[_39366 + 96] = 0 / 10^18
                    if idx >= mem[_1826]:
                        revert with 'NH{q', 50
                    mem[(32 * idx) + _1826 + 32] = _39366
                    if idx == -1:
                        revert with 'NH{q', 17
                    idx = idx + 1
                    continue 
                if not _39359:
                    mem[_39592] = 0
                    mem[_39366 + 96] = 0 / 10^18
                    if idx >= mem[_1826]:
                        revert with 'NH{q', 50
                    mem[(32 * idx) + _1826 + 32] = _39366
                    if idx == -1:
                        revert with 'NH{q', 17
                    idx = idx + 1
                    continue 
                if ext_call.return_data[0] and _39359 > -1 / ext_call.return_data[0]:
                    revert with 'NH{q', 17
                if not ext_call.return_data[0]:
                    revert with 'NH{q', 18
                if ext_call.return_data[0] * _39359 / ext_call.return_data[0] == _39359:
                    mem[_39592] = ext_call.return_data[0] * _39359
                    mem[_39366 + 96] = ext_call.return_data[0] * _39359 / 10^18
                    if idx >= mem[_1826]:
                        revert with 'NH{q', 50
                    mem[(32 * idx) + _1826 + 32] = _39366
                    if idx == -1:
                        revert with 'NH{q', 17
                    idx = idx + 1
                    continue 
                _39647 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 23
                idx = 0
                while idx < 23:
                    mem[idx + _39647 + 68] = mem[idx + _39598 + 32]
                    idx = idx + 32
                    continue 
                mem[_39647 + 91] = 0
                revert with memory
                  from mem[64]
                   len _39647 + -mem[64] + 100
            if _39469 and _39417 > -1 / _39469:
                revert with 'NH{q', 17
            if not _39469:
                revert with 'NH{q', 18
            if _39469 * _39417 / _39469 != _39417:
                _39518 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 23
                idx = 0
                while idx < 23:
                    mem[idx + _39518 + 68] = mem[idx + _39473 + 32]
                    idx = idx + 32
                    continue 
                mem[_39518 + 91] = 0
                revert with memory
                  from mem[64]
                   len _39518 + -mem[64] + 100
            mem[_39468] = _39469 * _39417
            mem[_39366 + 32] = _39469 * _39417 / 10^18
            mem[_39366 + 64] = _39359
            _39614 = mem[64]
            mem[64] = mem[64] + 32
            mem[_39614] = ext_call.return_data[0]
            _39618 = mem[64]
            mem[64] = mem[64] + 32
            mem[_39618] = 0
            _39619 = mem[64]
            mem[64] = mem[64] + 32
            _39624 = mem[64]
            mem[64] = mem[64] + 64
            mem[_39624] = 23
            mem[_39624 + 32] = 'multiplication overflow'
            if not ext_call.return_data[0]:
                mem[_39619] = 0
                mem[_39366 + 96] = 0 / 10^18
                if idx >= mem[_1826]:
                    revert with 'NH{q', 50
                mem[(32 * idx) + _1826 + 32] = _39366
                if idx == -1:
                    revert with 'NH{q', 17
                idx = idx + 1
                continue 
            if not _39359:
                mem[_39619] = 0
                mem[_39366 + 96] = 0 / 10^18
                if idx >= mem[_1826]:
                    revert with 'NH{q', 50
                mem[(32 * idx) + _1826 + 32] = _39366
                if idx == -1:
                    revert with 'NH{q', 17
                idx = idx + 1
                continue 
            if ext_call.return_data[0] and _39359 > -1 / ext_call.return_data[0]:
                revert with 'NH{q', 17
            if not ext_call.return_data[0]:
                revert with 'NH{q', 18
            if ext_call.return_data[0] * _39359 / ext_call.return_data[0] == _39359:
                mem[_39619] = ext_call.return_data[0] * _39359
                mem[_39366 + 96] = ext_call.return_data[0] * _39359 / 10^18
                if idx >= mem[_1826]:
                    revert with 'NH{q', 50
                mem[(32 * idx) + _1826 + 32] = _39366
                if idx == -1:
                    revert with 'NH{q', 17
                idx = idx + 1
                continue 
            _39779 = mem[64]
            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = 32
            mem[mem[64] + 36] = 23
            idx = 0
            while idx < 23:
                mem[idx + _39779 + 68] = mem[idx + _39624 + 32]
                idx = idx + 32
                continue 
            mem[_39779 + 91] = 0
            revert with memory
              from mem[64]
               len _39779 + -mem[64] + 100
        _39306 = mem[64]
        mem[64] = mem[64] + 192
        mem[_39306] = 0
        mem[_39306 + 32] = 0
        mem[_39306 + 64] = 0
        mem[_39306 + 96] = 0
        mem[_39306 + 128] = 0
        mem[_39306 + 160] = 0
        _41138 = mem[_1826]
        idx = 0
        while idx < _41138:
            if idx >= mem[_1826]:
                revert with 'NH{q', 50
            if idx >= mem[_1826]:
                revert with 'NH{q', 50
            if mem[mem[(32 * idx) + _1826 + 32] + 32] > 0:
                staticcall address(arg1).markets(address arg1) with:
                        gas gas_remaining wei
                       args address(mem[mem[(32 * idx) + _1826 + 32]])
                mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _41186 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 96
                require mem[_41186] == bool(mem[_41186])
                _41230 = mem[_41186 + 32]
                require mem[_41186 + 64] == bool(mem[_41186 + 64])
                if not mem[_41186]:
                    if idx == -1:
                        revert with 'NH{q', 17
                    _41138 = mem[_1826]
                    idx = idx + 1
                    continue 
                staticcall address(arg1).oracle() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _41293 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _41305 = mem[_41293]
                require mem[_41293] == mem[_41293 + 12 len 20]
                if idx >= mem[_1826]:
                    revert with 'NH{q', 50
                _41336 = mem[mem[(32 * idx) + _1826 + 32]]
                mem[mem[64] + 4] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                staticcall address(_41305).getUnderlyingPrice(address arg1) with:
                        gas gas_remaining wei
                       args address(_41336)
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _41346 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _41358 = mem[_41346]
                _41363 = mem[64]
                mem[64] = mem[64] + 32
                mem[_41363] = _41358
                if idx >= mem[_1826]:
                    revert with 'NH{q', 50
                _41367 = mem[mem[(32 * idx) + _1826 + 32] + 32]
                _41380 = mem[64]
                mem[64] = mem[64] + 32
                mem[_41380] = 0
                _41381 = mem[64]
                mem[64] = mem[64] + 32
                _41391 = mem[64]
                mem[64] = mem[64] + 64
                mem[_41391] = 23
                mem[_41391 + 32] = 'multiplication overflow'
                if not _41358:
                    mem[_41381] = 0
                    if _41230 <= 0:
                        _41513 = mem[64]
                        mem[64] = mem[64] + 32
                        mem[_41513] = _41358
                        if idx >= mem[_1826]:
                            revert with 'NH{q', 50
                        _41525 = mem[mem[(32 * idx) + _1826 + 32] + 96]
                        _41560 = mem[64]
                        mem[64] = mem[64] + 32
                        mem[_41560] = 0
                        _41561 = mem[64]
                        mem[64] = mem[64] + 32
                        _41584 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_41584] = 23
                        mem[_41584 + 32] = 'multiplication overflow'
                        if not _41358:
                            mem[_41561] = 0
                            if 0 / 10^18 > mem[_39306 + 160]:
                                if idx >= mem[_1826]:
                                    revert with 'NH{q', 50
                                mem[_39306 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                mem[_39306 + 160] = 0 / 10^18
                                if idx >= mem[_1826]:
                                    revert with 'NH{q', 50
                                mem[_39306 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                            if idx == -1:
                                revert with 'NH{q', 17
                            _41138 = mem[_1826]
                            idx = idx + 1
                            continue 
                        if not _41525:
                            mem[_41561] = 0
                            if 0 / 10^18 > mem[_39306 + 160]:
                                if idx >= mem[_1826]:
                                    revert with 'NH{q', 50
                                mem[_39306 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                mem[_39306 + 160] = 0 / 10^18
                                if idx >= mem[_1826]:
                                    revert with 'NH{q', 50
                                mem[_39306 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                            if idx == -1:
                                revert with 'NH{q', 17
                            _41138 = mem[_1826]
                            idx = idx + 1
                            continue 
                        if _41358 and _41525 > -1 / _41358:
                            revert with 'NH{q', 17
                        if not _41358:
                            revert with 'NH{q', 18
                        if _41358 * _41525 / _41358 != _41525:
                            # nil
                        else:
                            mem[_41561] = _41358 * _41525
                            if _41358 * _41525 / 10^18 > mem[_39306 + 160]:
                                if idx >= mem[_1826]:
                                    revert with 'NH{q', 50
                                mem[_39306 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                mem[_39306 + 160] = _41358 * _41525 / 10^18
                                if idx >= mem[_1826]:
                                    revert with 'NH{q', 50
                                mem[_39306 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                            if idx == -1:
                                revert with 'NH{q', 17
                            _41138 = mem[_1826]
                            idx = idx + 1
                            continue 
                    else:
                        if 0 / 10^18 <= mem[_39306 + 96]:
                            _41526 = mem[64]
                            mem[64] = mem[64] + 32
                            mem[_41526] = _41358
                            if idx >= mem[_1826]:
                                revert with 'NH{q', 50
                            _41540 = mem[mem[(32 * idx) + _1826 + 32] + 96]
                            _41585 = mem[64]
                            mem[64] = mem[64] + 32
                            mem[_41585] = 0
                            _41586 = mem[64]
                            mem[64] = mem[64] + 32
                            _41611 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_41611] = 23
                            mem[_41611 + 32] = 'multiplication overflow'
                            if not _41358:
                                mem[_41586] = 0
                                if 0 / 10^18 > mem[_39306 + 160]:
                                    if idx >= mem[_1826]:
                                        revert with 'NH{q', 50
                                    mem[_39306 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                    mem[_39306 + 160] = 0 / 10^18
                                    if idx >= mem[_1826]:
                                        revert with 'NH{q', 50
                                    mem[_39306 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                if idx == -1:
                                    revert with 'NH{q', 17
                                _41138 = mem[_1826]
                                idx = idx + 1
                                continue 
                            if not _41540:
                                mem[_41586] = 0
                                if 0 / 10^18 > mem[_39306 + 160]:
                                    if idx >= mem[_1826]:
                                        revert with 'NH{q', 50
                                    mem[_39306 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                    mem[_39306 + 160] = 0 / 10^18
                                    if idx >= mem[_1826]:
                                        revert with 'NH{q', 50
                                    mem[_39306 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                if idx == -1:
                                    revert with 'NH{q', 17
                                _41138 = mem[_1826]
                                idx = idx + 1
                                continue 
                            if _41358 and _41540 > -1 / _41358:
                                revert with 'NH{q', 17
                            if not _41358:
                                revert with 'NH{q', 18
                            if _41358 * _41540 / _41358 != _41540:
                                # nil
                            else:
                                mem[_41586] = _41358 * _41540
                                if _41358 * _41540 / 10^18 > mem[_39306 + 160]:
                                    if idx >= mem[_1826]:
                                        revert with 'NH{q', 50
                                    mem[_39306 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                    mem[_39306 + 160] = _41358 * _41540 / 10^18
                                    if idx >= mem[_1826]:
                                        revert with 'NH{q', 50
                                    mem[_39306 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                if idx == -1:
                                    revert with 'NH{q', 17
                                _41138 = mem[_1826]
                                idx = idx + 1
                                continue 
                        else:
                            if idx >= mem[_1826]:
                                revert with 'NH{q', 50
                            mem[_39306 + 64] = mem[mem[(32 * idx) + _1826 + 32] + 32]
                            mem[_39306 + 96] = 0 / 10^18
                            if idx >= mem[_1826]:
                                revert with 'NH{q', 50
                            mem[_39306] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                            _41588 = mem[64]
                            mem[64] = mem[64] + 32
                            mem[_41588] = _41358
                            if idx >= mem[_1826]:
                                revert with 'NH{q', 50
                            _41613 = mem[mem[(32 * idx) + _1826 + 32] + 96]
                            _41660 = mem[64]
                            mem[64] = mem[64] + 32
                            mem[_41660] = 0
                            _41661 = mem[64]
                            mem[64] = mem[64] + 32
                            _41690 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_41690] = 23
                            mem[_41690 + 32] = 'multiplication overflow'
                            if not _41358:
                                mem[_41661] = 0
                                if 0 / 10^18 > mem[_39306 + 160]:
                                    if idx >= mem[_1826]:
                                        revert with 'NH{q', 50
                                    mem[_39306 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                    mem[_39306 + 160] = 0 / 10^18
                                    if idx >= mem[_1826]:
                                        revert with 'NH{q', 50
                                    mem[_39306 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                if idx == -1:
                                    revert with 'NH{q', 17
                                _41138 = mem[_1826]
                                idx = idx + 1
                                continue 
                            if not _41613:
                                mem[_41661] = 0
                                if 0 / 10^18 > mem[_39306 + 160]:
                                    if idx >= mem[_1826]:
                                        revert with 'NH{q', 50
                                    mem[_39306 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                    mem[_39306 + 160] = 0 / 10^18
                                    if idx >= mem[_1826]:
                                        revert with 'NH{q', 50
                                    mem[_39306 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                if idx == -1:
                                    revert with 'NH{q', 17
                                _41138 = mem[_1826]
                                idx = idx + 1
                                continue 
                            if _41358 and _41613 > -1 / _41358:
                                revert with 'NH{q', 17
                            if not _41358:
                                revert with 'NH{q', 18
                            if _41358 * _41613 / _41358 != _41613:
                                # nil
                            else:
                                mem[_41661] = _41358 * _41613
                                if _41358 * _41613 / 10^18 > mem[_39306 + 160]:
                                    if idx >= mem[_1826]:
                                        revert with 'NH{q', 50
                                    mem[_39306 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                    mem[_39306 + 160] = _41358 * _41613 / 10^18
                                    if idx >= mem[_1826]:
                                        revert with 'NH{q', 50
                                    mem[_39306 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                if idx == -1:
                                    revert with 'NH{q', 17
                                _41138 = mem[_1826]
                                idx = idx + 1
                                continue 
                else:
                    if not _41367:
                        mem[_41381] = 0
                        if _41230 <= 0:
                            _41530 = mem[64]
                            mem[64] = mem[64] + 32
                            mem[_41530] = _41358
                            if idx >= mem[_1826]:
                                revert with 'NH{q', 50
                            _41545 = mem[mem[(32 * idx) + _1826 + 32] + 96]
                            _41590 = mem[64]
                            mem[64] = mem[64] + 32
                            mem[_41590] = 0
                            _41591 = mem[64]
                            mem[64] = mem[64] + 32
                            _41614 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_41614] = 23
                            mem[_41614 + 32] = 'multiplication overflow'
                            if not _41358:
                                mem[_41591] = 0
                                if 0 / 10^18 > mem[_39306 + 160]:
                                    if idx >= mem[_1826]:
                                        revert with 'NH{q', 50
                                    mem[_39306 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                    mem[_39306 + 160] = 0 / 10^18
                                    if idx >= mem[_1826]:
                                        revert with 'NH{q', 50
                                    mem[_39306 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                if idx == -1:
                                    revert with 'NH{q', 17
                                _41138 = mem[_1826]
                                idx = idx + 1
                                continue 
                            if not _41545:
                                mem[_41591] = 0
                                if 0 / 10^18 > mem[_39306 + 160]:
                                    if idx >= mem[_1826]:
                                        revert with 'NH{q', 50
                                    mem[_39306 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                    mem[_39306 + 160] = 0 / 10^18
                                    if idx >= mem[_1826]:
                                        revert with 'NH{q', 50
                                    mem[_39306 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                if idx == -1:
                                    revert with 'NH{q', 17
                                _41138 = mem[_1826]
                                idx = idx + 1
                                continue 
                            if _41358 and _41545 > -1 / _41358:
                                revert with 'NH{q', 17
                            if not _41358:
                                revert with 'NH{q', 18
                            if _41358 * _41545 / _41358 != _41545:
                                # nil
                            else:
                                mem[_41591] = _41358 * _41545
                                if _41358 * _41545 / 10^18 > mem[_39306 + 160]:
                                    if idx >= mem[_1826]:
                                        revert with 'NH{q', 50
                                    mem[_39306 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                    mem[_39306 + 160] = _41358 * _41545 / 10^18
                                    if idx >= mem[_1826]:
                                        revert with 'NH{q', 50
                                    mem[_39306 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                if idx == -1:
                                    revert with 'NH{q', 17
                                _41138 = mem[_1826]
                                idx = idx + 1
                                continue 
                        else:
                            if 0 / 10^18 <= mem[_39306 + 96]:
                                _41546 = mem[64]
                                mem[64] = mem[64] + 32
                                mem[_41546] = _41358
                                if idx >= mem[_1826]:
                                    revert with 'NH{q', 50
                                _41566 = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                _41615 = mem[64]
                                mem[64] = mem[64] + 32
                                mem[_41615] = 0
                                _41616 = mem[64]
                                mem[64] = mem[64] + 32
                                _41637 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_41637] = 23
                                mem[_41637 + 32] = 'multiplication overflow'
                                if not _41358:
                                    mem[_41616] = 0
                                    if 0 / 10^18 > mem[_39306 + 160]:
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        mem[_39306 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                        mem[_39306 + 160] = 0 / 10^18
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        mem[_39306 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                    if idx == -1:
                                        revert with 'NH{q', 17
                                    _41138 = mem[_1826]
                                    idx = idx + 1
                                    continue 
                                if not _41566:
                                    mem[_41616] = 0
                                    if 0 / 10^18 > mem[_39306 + 160]:
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        mem[_39306 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                        mem[_39306 + 160] = 0 / 10^18
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        mem[_39306 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                    if idx == -1:
                                        revert with 'NH{q', 17
                                    _41138 = mem[_1826]
                                    idx = idx + 1
                                    continue 
                                if _41358 and _41566 > -1 / _41358:
                                    revert with 'NH{q', 17
                                if not _41358:
                                    revert with 'NH{q', 18
                                if _41358 * _41566 / _41358 != _41566:
                                    # nil
                                else:
                                    mem[_41616] = _41358 * _41566
                                    if _41358 * _41566 / 10^18 > mem[_39306 + 160]:
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        mem[_39306 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                        mem[_39306 + 160] = _41358 * _41566 / 10^18
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        mem[_39306 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                    if idx == -1:
                                        revert with 'NH{q', 17
                                    _41138 = mem[_1826]
                                    idx = idx + 1
                                    continue 
                            else:
                                if idx >= mem[_1826]:
                                    revert with 'NH{q', 50
                                mem[_39306 + 64] = mem[mem[(32 * idx) + _1826 + 32] + 32]
                                mem[_39306 + 96] = 0 / 10^18
                                if idx >= mem[_1826]:
                                    revert with 'NH{q', 50
                                mem[_39306] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                _41618 = mem[64]
                                mem[64] = mem[64] + 32
                                mem[_41618] = _41358
                                if idx >= mem[_1826]:
                                    revert with 'NH{q', 50
                                _41639 = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                _41696 = mem[64]
                                mem[64] = mem[64] + 32
                                mem[_41696] = 0
                                _41697 = mem[64]
                                mem[64] = mem[64] + 32
                                _41733 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_41733] = 23
                                mem[_41733 + 32] = 'multiplication overflow'
                                if not _41358:
                                    mem[_41697] = 0
                                    if 0 / 10^18 > mem[_39306 + 160]:
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        mem[_39306 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                        mem[_39306 + 160] = 0 / 10^18
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        mem[_39306 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                    if idx == -1:
                                        revert with 'NH{q', 17
                                    _41138 = mem[_1826]
                                    idx = idx + 1
                                    continue 
                                if not _41639:
                                    mem[_41697] = 0
                                    if 0 / 10^18 > mem[_39306 + 160]:
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        mem[_39306 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                        mem[_39306 + 160] = 0 / 10^18
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        mem[_39306 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                    if idx == -1:
                                        revert with 'NH{q', 17
                                    _41138 = mem[_1826]
                                    idx = idx + 1
                                    continue 
                                if _41358 and _41639 > -1 / _41358:
                                    revert with 'NH{q', 17
                                if not _41358:
                                    revert with 'NH{q', 18
                                if _41358 * _41639 / _41358 != _41639:
                                    # nil
                                else:
                                    mem[_41697] = _41358 * _41639
                                    if _41358 * _41639 / 10^18 > mem[_39306 + 160]:
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        mem[_39306 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                        mem[_39306 + 160] = _41358 * _41639 / 10^18
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        mem[_39306 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                    if idx == -1:
                                        revert with 'NH{q', 17
                                    _41138 = mem[_1826]
                                    idx = idx + 1
                                    continue 
                    else:
                        if _41358 and _41367 > -1 / _41358:
                            revert with 'NH{q', 17
                        if not _41358:
                            revert with 'NH{q', 18
                        if _41358 * _41367 / _41358 != _41367:
                            # nil
                        else:
                            mem[_41381] = _41358 * _41367
                            if _41230 <= 0:
                                _41663 = mem[64]
                                mem[64] = mem[64] + 32
                                mem[_41663] = _41358
                                if idx >= mem[_1826]:
                                    revert with 'NH{q', 50
                                _41692 = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                _41773 = mem[64]
                                mem[64] = mem[64] + 32
                                mem[_41773] = 0
                                _41774 = mem[64]
                                mem[64] = mem[64] + 32
                                _41830 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_41830] = 23
                                mem[_41830 + 32] = 'multiplication overflow'
                                if not _41358:
                                    mem[_41774] = 0
                                    if 0 / 10^18 > mem[_39306 + 160]:
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        mem[_39306 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                        mem[_39306 + 160] = 0 / 10^18
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        mem[_39306 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                    if idx == -1:
                                        revert with 'NH{q', 17
                                    _41138 = mem[_1826]
                                    idx = idx + 1
                                    continue 
                                if not _41692:
                                    mem[_41774] = 0
                                    if 0 / 10^18 > mem[_39306 + 160]:
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        mem[_39306 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                        mem[_39306 + 160] = 0 / 10^18
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        mem[_39306 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                    if idx == -1:
                                        revert with 'NH{q', 17
                                    _41138 = mem[_1826]
                                    idx = idx + 1
                                    continue 
                                if _41358 and _41692 > -1 / _41358:
                                    revert with 'NH{q', 17
                                if not _41358:
                                    revert with 'NH{q', 18
                                if _41358 * _41692 / _41358 != _41692:
                                    # nil
                                else:
                                    mem[_41774] = _41358 * _41692
                                    if _41358 * _41692 / 10^18 > mem[_39306 + 160]:
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        mem[_39306 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                        mem[_39306 + 160] = _41358 * _41692 / 10^18
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        mem[_39306 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                    if idx == -1:
                                        revert with 'NH{q', 17
                                    _41138 = mem[_1826]
                                    idx = idx + 1
                                    continue 
                            else:
                                if _41358 * _41367 / 10^18 <= mem[_39306 + 96]:
                                    _41693 = mem[64]
                                    mem[64] = mem[64] + 32
                                    mem[_41693] = _41358
                                    if idx >= mem[_1826]:
                                        revert with 'NH{q', 50
                                    _41729 = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                    _41831 = mem[64]
                                    mem[64] = mem[64] + 32
                                    mem[_41831] = 0
                                    _41832 = mem[64]
                                    mem[64] = mem[64] + 32
                                    _41887 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_41887] = 23
                                    mem[_41887 + 32] = 'multiplication overflow'
                                    if not _41358:
                                        mem[_41832] = 0
                                        if 0 / 10^18 > mem[_39306 + 160]:
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_39306 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                            mem[_39306 + 160] = 0 / 10^18
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_39306 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                        if idx == -1:
                                            revert with 'NH{q', 17
                                        _41138 = mem[_1826]
                                        idx = idx + 1
                                        continue 
                                    if not _41729:
                                        mem[_41832] = 0
                                        if 0 / 10^18 > mem[_39306 + 160]:
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_39306 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                            mem[_39306 + 160] = 0 / 10^18
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_39306 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                        if idx == -1:
                                            revert with 'NH{q', 17
                                        _41138 = mem[_1826]
                                        idx = idx + 1
                                        continue 
                                    if _41358 and _41729 > -1 / _41358:
                                        revert with 'NH{q', 17
                                    if not _41358:
                                        revert with 'NH{q', 18
                                    if _41358 * _41729 / _41358 != _41729:
                                        # nil
                                    else:
                                        mem[_41832] = _41358 * _41729
                                        if _41358 * _41729 / 10^18 > mem[_39306 + 160]:
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_39306 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                            mem[_39306 + 160] = _41358 * _41729 / 10^18
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_39306 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                        if idx == -1:
                                            revert with 'NH{q', 17
                                        _41138 = mem[_1826]
                                        idx = idx + 1
                                        continue 
                                else:
                                    if idx >= mem[_1826]:
                                        revert with 'NH{q', 50
                                    mem[_39306 + 64] = mem[mem[(32 * idx) + _1826 + 32] + 32]
                                    mem[_39306 + 96] = _41358 * _41367 / 10^18
                                    if idx >= mem[_1826]:
                                        revert with 'NH{q', 50
                                    mem[_39306] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                    _41834 = mem[64]
                                    mem[64] = mem[64] + 32
                                    mem[_41834] = _41358
                                    if idx >= mem[_1826]:
                                        revert with 'NH{q', 50
                                    _41889 = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                    _41981 = mem[64]
                                    mem[64] = mem[64] + 32
                                    mem[_41981] = 0
                                    _41982 = mem[64]
                                    mem[64] = mem[64] + 32
                                    _42026 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_42026] = 23
                                    mem[_42026 + 32] = 'multiplication overflow'
                                    if not _41358:
                                        mem[_41982] = 0
                                        if 0 / 10^18 > mem[_39306 + 160]:
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_39306 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                            mem[_39306 + 160] = 0 / 10^18
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_39306 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                        if idx == -1:
                                            revert with 'NH{q', 17
                                        _41138 = mem[_1826]
                                        idx = idx + 1
                                        continue 
                                    if not _41889:
                                        mem[_41982] = 0
                                        if 0 / 10^18 > mem[_39306 + 160]:
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_39306 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                            mem[_39306 + 160] = 0 / 10^18
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_39306 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                        if idx == -1:
                                            revert with 'NH{q', 17
                                        _41138 = mem[_1826]
                                        idx = idx + 1
                                        continue 
                                    if _41358 and _41889 > -1 / _41358:
                                        revert with 'NH{q', 17
                                    if not _41358:
                                        revert with 'NH{q', 18
                                    if _41358 * _41889 / _41358 != _41889:
                                        # nil
                                    else:
                                        mem[_41982] = _41358 * _41889
                                        if _41358 * _41889 / 10^18 > mem[_39306 + 160]:
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_39306 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                            mem[_39306 + 160] = _41358 * _41889 / 10^18
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_39306 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                        if idx == -1:
                                            revert with 'NH{q', 17
                                        _41138 = mem[_1826]
                                        idx = idx + 1
                                        continue 
            else:
                if mem[mem[(32 * idx) + _1826 + 32] + 64] <= 0:
                    if idx == -1:
                        revert with 'NH{q', 17
                    _41138 = mem[_1826]
                    idx = idx + 1
                    continue 
                if idx >= mem[_1826]:
                    revert with 'NH{q', 50
                staticcall address(arg1).markets(address arg1) with:
                        gas gas_remaining wei
                       args address(mem[mem[(32 * idx) + _1826 + 32]])
                mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _41205 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 96
                require mem[_41205] == bool(mem[_41205])
                _41256 = mem[_41205 + 32]
                require mem[_41205 + 64] == bool(mem[_41205 + 64])
                if not mem[_41205]:
                    if idx == -1:
                        revert with 'NH{q', 17
                    _41138 = mem[_1826]
                    idx = idx + 1
                    continue 
                staticcall address(arg1).oracle() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _41306 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _41318 = mem[_41306]
                require mem[_41306] == mem[_41306 + 12 len 20]
                if idx >= mem[_1826]:
                    revert with 'NH{q', 50
                _41353 = mem[mem[(32 * idx) + _1826 + 32]]
                mem[mem[64] + 4] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                staticcall address(_41318).getUnderlyingPrice(address arg1) with:
                        gas gas_remaining wei
                       args address(_41353)
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _41359 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _41368 = mem[_41359]
                _41372 = mem[64]
                mem[64] = mem[64] + 32
                mem[_41372] = _41368
                if idx >= mem[_1826]:
                    revert with 'NH{q', 50
                _41384 = mem[mem[(32 * idx) + _1826 + 32] + 32]
                _41402 = mem[64]
                mem[64] = mem[64] + 32
                mem[_41402] = 0
                _41403 = mem[64]
                mem[64] = mem[64] + 32
                _41412 = mem[64]
                mem[64] = mem[64] + 64
                mem[_41412] = 23
                mem[_41412 + 32] = 'multiplication overflow'
                if not _41368:
                    mem[_41403] = 0
                    if _41256 <= 0:
                        _41549 = mem[64]
                        mem[64] = mem[64] + 32
                        mem[_41549] = _41368
                        if idx >= mem[_1826]:
                            revert with 'NH{q', 50
                        _41571 = mem[mem[(32 * idx) + _1826 + 32] + 96]
                        _41620 = mem[64]
                        mem[64] = mem[64] + 32
                        mem[_41620] = 0
                        _41621 = mem[64]
                        mem[64] = mem[64] + 32
                        _41640 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_41640] = 23
                        mem[_41640 + 32] = 'multiplication overflow'
                        if not _41368:
                            mem[_41621] = 0
                            if 0 / 10^18 > mem[_39306 + 160]:
                                if idx >= mem[_1826]:
                                    revert with 'NH{q', 50
                                mem[_39306 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                mem[_39306 + 160] = 0 / 10^18
                                if idx >= mem[_1826]:
                                    revert with 'NH{q', 50
                                mem[_39306 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                            if idx == -1:
                                revert with 'NH{q', 17
                            _41138 = mem[_1826]
                            idx = idx + 1
                            continue 
                        if not _41571:
                            mem[_41621] = 0
                            if 0 / 10^18 > mem[_39306 + 160]:
                                if idx >= mem[_1826]:
                                    revert with 'NH{q', 50
                                mem[_39306 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                mem[_39306 + 160] = 0 / 10^18
                                if idx >= mem[_1826]:
                                    revert with 'NH{q', 50
                                mem[_39306 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                            if idx == -1:
                                revert with 'NH{q', 17
                            _41138 = mem[_1826]
                            idx = idx + 1
                            continue 
                        if _41368 and _41571 > -1 / _41368:
                            revert with 'NH{q', 17
                        if not _41368:
                            revert with 'NH{q', 18
                        if _41368 * _41571 / _41368 != _41571:
                            # nil
                        else:
                            mem[_41621] = _41368 * _41571
                            if _41368 * _41571 / 10^18 > mem[_39306 + 160]:
                                if idx >= mem[_1826]:
                                    revert with 'NH{q', 50
                                mem[_39306 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                mem[_39306 + 160] = _41368 * _41571 / 10^18
                                if idx >= mem[_1826]:
                                    revert with 'NH{q', 50
                                mem[_39306 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                            if idx == -1:
                                revert with 'NH{q', 17
                            _41138 = mem[_1826]
                            idx = idx + 1
                            continue 
                    else:
                        if 0 / 10^18 <= mem[_39306 + 96]:
                            _41572 = mem[64]
                            mem[64] = mem[64] + 32
                            mem[_41572] = _41368
                            if idx >= mem[_1826]:
                                revert with 'NH{q', 50
                            _41596 = mem[mem[(32 * idx) + _1826 + 32] + 96]
                            _41641 = mem[64]
                            mem[64] = mem[64] + 32
                            mem[_41641] = 0
                            _41642 = mem[64]
                            mem[64] = mem[64] + 32
                            _41665 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_41665] = 23
                            mem[_41665 + 32] = 'multiplication overflow'
                            if not _41368:
                                mem[_41642] = 0
                                if 0 / 10^18 > mem[_39306 + 160]:
                                    if idx >= mem[_1826]:
                                        revert with 'NH{q', 50
                                    mem[_39306 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                    mem[_39306 + 160] = 0 / 10^18
                                    if idx >= mem[_1826]:
                                        revert with 'NH{q', 50
                                    mem[_39306 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                if idx == -1:
                                    revert with 'NH{q', 17
                                _41138 = mem[_1826]
                                idx = idx + 1
                                continue 
                            if not _41596:
                                mem[_41642] = 0
                                if 0 / 10^18 > mem[_39306 + 160]:
                                    if idx >= mem[_1826]:
                                        revert with 'NH{q', 50
                                    mem[_39306 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                    mem[_39306 + 160] = 0 / 10^18
                                    if idx >= mem[_1826]:
                                        revert with 'NH{q', 50
                                    mem[_39306 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                if idx == -1:
                                    revert with 'NH{q', 17
                                _41138 = mem[_1826]
                                idx = idx + 1
                                continue 
                            if _41368 and _41596 > -1 / _41368:
                                revert with 'NH{q', 17
                            if not _41368:
                                revert with 'NH{q', 18
                            if _41368 * _41596 / _41368 != _41596:
                                # nil
                            else:
                                mem[_41642] = _41368 * _41596
                                if _41368 * _41596 / 10^18 > mem[_39306 + 160]:
                                    if idx >= mem[_1826]:
                                        revert with 'NH{q', 50
                                    mem[_39306 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                    mem[_39306 + 160] = _41368 * _41596 / 10^18
                                    if idx >= mem[_1826]:
                                        revert with 'NH{q', 50
                                    mem[_39306 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                if idx == -1:
                                    revert with 'NH{q', 17
                                _41138 = mem[_1826]
                                idx = idx + 1
                                continue 
                        else:
                            if idx >= mem[_1826]:
                                revert with 'NH{q', 50
                            mem[_39306 + 64] = mem[mem[(32 * idx) + _1826 + 32] + 32]
                            mem[_39306 + 96] = 0 / 10^18
                            if idx >= mem[_1826]:
                                revert with 'NH{q', 50
                            mem[_39306] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                            _41644 = mem[64]
                            mem[64] = mem[64] + 32
                            mem[_41644] = _41368
                            if idx >= mem[_1826]:
                                revert with 'NH{q', 50
                            _41667 = mem[mem[(32 * idx) + _1826 + 32] + 96]
                            _41734 = mem[64]
                            mem[64] = mem[64] + 32
                            mem[_41734] = 0
                            _41735 = mem[64]
                            mem[64] = mem[64] + 32
                            _41778 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_41778] = 23
                            mem[_41778 + 32] = 'multiplication overflow'
                            if not _41368:
                                mem[_41735] = 0
                                if 0 / 10^18 > mem[_39306 + 160]:
                                    if idx >= mem[_1826]:
                                        revert with 'NH{q', 50
                                    mem[_39306 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                    mem[_39306 + 160] = 0 / 10^18
                                    if idx >= mem[_1826]:
                                        revert with 'NH{q', 50
                                    mem[_39306 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                if idx == -1:
                                    revert with 'NH{q', 17
                                _41138 = mem[_1826]
                                idx = idx + 1
                                continue 
                            if not _41667:
                                mem[_41735] = 0
                                if 0 / 10^18 > mem[_39306 + 160]:
                                    if idx >= mem[_1826]:
                                        revert with 'NH{q', 50
                                    mem[_39306 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                    mem[_39306 + 160] = 0 / 10^18
                                    if idx >= mem[_1826]:
                                        revert with 'NH{q', 50
                                    mem[_39306 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                if idx == -1:
                                    revert with 'NH{q', 17
                                _41138 = mem[_1826]
                                idx = idx + 1
                                continue 
                            if _41368 and _41667 > -1 / _41368:
                                revert with 'NH{q', 17
                            if not _41368:
                                revert with 'NH{q', 18
                            if _41368 * _41667 / _41368 != _41667:
                                # nil
                            else:
                                mem[_41735] = _41368 * _41667
                                if _41368 * _41667 / 10^18 > mem[_39306 + 160]:
                                    if idx >= mem[_1826]:
                                        revert with 'NH{q', 50
                                    mem[_39306 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                    mem[_39306 + 160] = _41368 * _41667 / 10^18
                                    if idx >= mem[_1826]:
                                        revert with 'NH{q', 50
                                    mem[_39306 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                if idx == -1:
                                    revert with 'NH{q', 17
                                _41138 = mem[_1826]
                                idx = idx + 1
                                continue 
                else:
                    if not _41384:
                        mem[_41403] = 0
                        if _41256 <= 0:
                            _41576 = mem[64]
                            mem[64] = mem[64] + 32
                            mem[_41576] = _41368
                            if idx >= mem[_1826]:
                                revert with 'NH{q', 50
                            _41601 = mem[mem[(32 * idx) + _1826 + 32] + 96]
                            _41646 = mem[64]
                            mem[64] = mem[64] + 32
                            mem[_41646] = 0
                            _41647 = mem[64]
                            mem[64] = mem[64] + 32
                            _41668 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_41668] = 23
                            mem[_41668 + 32] = 'multiplication overflow'
                            if not _41368:
                                mem[_41647] = 0
                                if 0 / 10^18 > mem[_39306 + 160]:
                                    if idx >= mem[_1826]:
                                        revert with 'NH{q', 50
                                    mem[_39306 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                    mem[_39306 + 160] = 0 / 10^18
                                    if idx >= mem[_1826]:
                                        revert with 'NH{q', 50
                                    mem[_39306 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                if idx == -1:
                                    revert with 'NH{q', 17
                                _41138 = mem[_1826]
                                idx = idx + 1
                                continue 
                            if not _41601:
                                mem[_41647] = 0
                                if 0 / 10^18 > mem[_39306 + 160]:
                                    if idx >= mem[_1826]:
                                        revert with 'NH{q', 50
                                    mem[_39306 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                    mem[_39306 + 160] = 0 / 10^18
                                    if idx >= mem[_1826]:
                                        revert with 'NH{q', 50
                                    mem[_39306 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                if idx == -1:
                                    revert with 'NH{q', 17
                                _41138 = mem[_1826]
                                idx = idx + 1
                                continue 
                            if _41368 and _41601 > -1 / _41368:
                                revert with 'NH{q', 17
                            if not _41368:
                                revert with 'NH{q', 18
                            if _41368 * _41601 / _41368 != _41601:
                                # nil
                            else:
                                mem[_41647] = _41368 * _41601
                                if _41368 * _41601 / 10^18 > mem[_39306 + 160]:
                                    if idx >= mem[_1826]:
                                        revert with 'NH{q', 50
                                    mem[_39306 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                    mem[_39306 + 160] = _41368 * _41601 / 10^18
                                    if idx >= mem[_1826]:
                                        revert with 'NH{q', 50
                                    mem[_39306 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                if idx == -1:
                                    revert with 'NH{q', 17
                                _41138 = mem[_1826]
                                idx = idx + 1
                                continue 
                        else:
                            if 0 / 10^18 <= mem[_39306 + 96]:
                                _41602 = mem[64]
                                mem[64] = mem[64] + 32
                                mem[_41602] = _41368
                                if idx >= mem[_1826]:
                                    revert with 'NH{q', 50
                                _41626 = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                _41669 = mem[64]
                                mem[64] = mem[64] + 32
                                mem[_41669] = 0
                                _41670 = mem[64]
                                mem[64] = mem[64] + 32
                                _41700 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_41700] = 23
                                mem[_41700 + 32] = 'multiplication overflow'
                                if not _41368:
                                    mem[_41670] = 0
                                    if 0 / 10^18 > mem[_39306 + 160]:
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        mem[_39306 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                        mem[_39306 + 160] = 0 / 10^18
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        mem[_39306 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                    if idx == -1:
                                        revert with 'NH{q', 17
                                    _41138 = mem[_1826]
                                    idx = idx + 1
                                    continue 
                                if not _41626:
                                    mem[_41670] = 0
                                    if 0 / 10^18 > mem[_39306 + 160]:
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        mem[_39306 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                        mem[_39306 + 160] = 0 / 10^18
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        mem[_39306 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                    if idx == -1:
                                        revert with 'NH{q', 17
                                    _41138 = mem[_1826]
                                    idx = idx + 1
                                    continue 
                                if _41368 and _41626 > -1 / _41368:
                                    revert with 'NH{q', 17
                                if not _41368:
                                    revert with 'NH{q', 18
                                if _41368 * _41626 / _41368 != _41626:
                                    # nil
                                else:
                                    mem[_41670] = _41368 * _41626
                                    if _41368 * _41626 / 10^18 > mem[_39306 + 160]:
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        mem[_39306 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                        mem[_39306 + 160] = _41368 * _41626 / 10^18
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        mem[_39306 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                    if idx == -1:
                                        revert with 'NH{q', 17
                                    _41138 = mem[_1826]
                                    idx = idx + 1
                                    continue 
                            else:
                                if idx >= mem[_1826]:
                                    revert with 'NH{q', 50
                                mem[_39306 + 64] = mem[mem[(32 * idx) + _1826 + 32] + 32]
                                mem[_39306 + 96] = 0 / 10^18
                                if idx >= mem[_1826]:
                                    revert with 'NH{q', 50
                                mem[_39306] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                _41672 = mem[64]
                                mem[64] = mem[64] + 32
                                mem[_41672] = _41368
                                if idx >= mem[_1826]:
                                    revert with 'NH{q', 50
                                _41702 = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                _41784 = mem[64]
                                mem[64] = mem[64] + 32
                                mem[_41784] = 0
                                _41785 = mem[64]
                                mem[64] = mem[64] + 32
                                _41841 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_41841] = 23
                                mem[_41841 + 32] = 'multiplication overflow'
                                if not _41368:
                                    mem[_41785] = 0
                                    if 0 / 10^18 > mem[_39306 + 160]:
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        mem[_39306 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                        mem[_39306 + 160] = 0 / 10^18
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        mem[_39306 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                    if idx == -1:
                                        revert with 'NH{q', 17
                                    _41138 = mem[_1826]
                                    idx = idx + 1
                                    continue 
                                if not _41702:
                                    mem[_41785] = 0
                                    if 0 / 10^18 > mem[_39306 + 160]:
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        mem[_39306 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                        mem[_39306 + 160] = 0 / 10^18
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        mem[_39306 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                    if idx == -1:
                                        revert with 'NH{q', 17
                                    _41138 = mem[_1826]
                                    idx = idx + 1
                                    continue 
                                if _41368 and _41702 > -1 / _41368:
                                    revert with 'NH{q', 17
                                if not _41368:
                                    revert with 'NH{q', 18
                                if _41368 * _41702 / _41368 != _41702:
                                    # nil
                                else:
                                    mem[_41785] = _41368 * _41702
                                    if _41368 * _41702 / 10^18 > mem[_39306 + 160]:
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        mem[_39306 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                        mem[_39306 + 160] = _41368 * _41702 / 10^18
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        mem[_39306 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                    if idx == -1:
                                        revert with 'NH{q', 17
                                    _41138 = mem[_1826]
                                    idx = idx + 1
                                    continue 
                    else:
                        if _41368 and _41384 > -1 / _41368:
                            revert with 'NH{q', 17
                        if not _41368:
                            revert with 'NH{q', 18
                        if _41368 * _41384 / _41368 != _41384:
                            # nil
                        else:
                            mem[_41403] = _41368 * _41384
                            if _41256 <= 0:
                                _41737 = mem[64]
                                mem[64] = mem[64] + 32
                                mem[_41737] = _41368
                                if idx >= mem[_1826]:
                                    revert with 'NH{q', 50
                                _41780 = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                _41891 = mem[64]
                                mem[64] = mem[64] + 32
                                mem[_41891] = 0
                                _41892 = mem[64]
                                mem[64] = mem[64] + 32
                                _41939 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_41939] = 23
                                mem[_41939 + 32] = 'multiplication overflow'
                                if not _41368:
                                    mem[_41892] = 0
                                    if 0 / 10^18 > mem[_39306 + 160]:
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        mem[_39306 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                        mem[_39306 + 160] = 0 / 10^18
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        mem[_39306 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                    if idx == -1:
                                        revert with 'NH{q', 17
                                    _41138 = mem[_1826]
                                    idx = idx + 1
                                    continue 
                                if not _41780:
                                    mem[_41892] = 0
                                    if 0 / 10^18 > mem[_39306 + 160]:
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        mem[_39306 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                        mem[_39306 + 160] = 0 / 10^18
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        mem[_39306 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                    if idx == -1:
                                        revert with 'NH{q', 17
                                    _41138 = mem[_1826]
                                    idx = idx + 1
                                    continue 
                                if _41368 and _41780 > -1 / _41368:
                                    revert with 'NH{q', 17
                                if not _41368:
                                    revert with 'NH{q', 18
                                if _41368 * _41780 / _41368 != _41780:
                                    # nil
                                else:
                                    mem[_41892] = _41368 * _41780
                                    if _41368 * _41780 / 10^18 > mem[_39306 + 160]:
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        mem[_39306 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                        mem[_39306 + 160] = _41368 * _41780 / 10^18
                                        if idx >= mem[_1826]:
                                            revert with 'NH{q', 50
                                        mem[_39306 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                    if idx == -1:
                                        revert with 'NH{q', 17
                                    _41138 = mem[_1826]
                                    idx = idx + 1
                                    continue 
                            else:
                                if _41368 * _41384 / 10^18 <= mem[_39306 + 96]:
                                    _41781 = mem[64]
                                    mem[64] = mem[64] + 32
                                    mem[_41781] = _41368
                                    if idx >= mem[_1826]:
                                        revert with 'NH{q', 50
                                    _41837 = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                    _41940 = mem[64]
                                    mem[64] = mem[64] + 32
                                    mem[_41940] = 0
                                    _41941 = mem[64]
                                    mem[64] = mem[64] + 32
                                    _41987 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_41987] = 23
                                    mem[_41987 + 32] = 'multiplication overflow'
                                    if not _41368:
                                        mem[_41941] = 0
                                        if 0 / 10^18 > mem[_39306 + 160]:
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_39306 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                            mem[_39306 + 160] = 0 / 10^18
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_39306 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                        if idx == -1:
                                            revert with 'NH{q', 17
                                        _41138 = mem[_1826]
                                        idx = idx + 1
                                        continue 
                                    if not _41837:
                                        mem[_41941] = 0
                                        if 0 / 10^18 > mem[_39306 + 160]:
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_39306 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                            mem[_39306 + 160] = 0 / 10^18
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_39306 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                        if idx == -1:
                                            revert with 'NH{q', 17
                                        _41138 = mem[_1826]
                                        idx = idx + 1
                                        continue 
                                    if _41368 and _41837 > -1 / _41368:
                                        revert with 'NH{q', 17
                                    if not _41368:
                                        revert with 'NH{q', 18
                                    if _41368 * _41837 / _41368 != _41837:
                                        # nil
                                    else:
                                        mem[_41941] = _41368 * _41837
                                        if _41368 * _41837 / 10^18 > mem[_39306 + 160]:
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_39306 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                            mem[_39306 + 160] = _41368 * _41837 / 10^18
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_39306 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                        if idx == -1:
                                            revert with 'NH{q', 17
                                        _41138 = mem[_1826]
                                        idx = idx + 1
                                        continue 
                                else:
                                    if idx >= mem[_1826]:
                                        revert with 'NH{q', 50
                                    mem[_39306 + 64] = mem[mem[(32 * idx) + _1826 + 32] + 32]
                                    mem[_39306 + 96] = _41368 * _41384 / 10^18
                                    if idx >= mem[_1826]:
                                        revert with 'NH{q', 50
                                    mem[_39306] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                    _41943 = mem[64]
                                    mem[64] = mem[64] + 32
                                    mem[_41943] = _41368
                                    if idx >= mem[_1826]:
                                        revert with 'NH{q', 50
                                    _41989 = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                    _42065 = mem[64]
                                    mem[64] = mem[64] + 32
                                    mem[_42065] = 0
                                    _42066 = mem[64]
                                    mem[64] = mem[64] + 32
                                    _42107 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_42107] = 23
                                    mem[_42107 + 32] = 'multiplication overflow'
                                    if not _41368:
                                        mem[_42066] = 0
                                        if 0 / 10^18 > mem[_39306 + 160]:
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_39306 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                            mem[_39306 + 160] = 0 / 10^18
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_39306 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                        if idx == -1:
                                            revert with 'NH{q', 17
                                        _41138 = mem[_1826]
                                        idx = idx + 1
                                        continue 
                                    if not _41989:
                                        mem[_42066] = 0
                                        if 0 / 10^18 > mem[_39306 + 160]:
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_39306 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                            mem[_39306 + 160] = 0 / 10^18
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_39306 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                        if idx == -1:
                                            revert with 'NH{q', 17
                                        _41138 = mem[_1826]
                                        idx = idx + 1
                                        continue 
                                    if _41368 and _41989 > -1 / _41368:
                                        revert with 'NH{q', 17
                                    if not _41368:
                                        revert with 'NH{q', 18
                                    if _41368 * _41989 / _41368 != _41989:
                                        # nil
                                    else:
                                        mem[_42066] = _41368 * _41989
                                        if _41368 * _41989 / 10^18 > mem[_39306 + 160]:
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_39306 + 128] = mem[mem[(32 * idx) + _1826 + 32] + 96]
                                            mem[_39306 + 160] = _41368 * _41989 / 10^18
                                            if idx >= mem[_1826]:
                                                revert with 'NH{q', 50
                                            mem[_39306 + 32] = mem[mem[(32 * idx) + _1826 + 32] + 12 len 20]
                                        if idx == -1:
                                            revert with 'NH{q', 17
                                        _41138 = mem[_1826]
                                        idx = idx + 1
                                        continue 
        _41140 = mem[_39306 + 32]
        _41141 = mem[_39306]
        _41142 = mem[_39306 + 128]
        mem[224] = mem[_39306 + 160]
        mem[192] = _41142
        mem[160] = address(_41141)
        mem[128] = address(_41140)
        mem[mem[64]] = mem[108 len 20]
        mem[mem[64] + 32] = address(_41140)
        mem[mem[64] + 64] = address(_41141)
        mem[mem[64] + 96] = _41142
        mem[mem[64] + 128] = mem[224]
        mem[mem[64] + 160] = bool(mem[256])
        return mem[mem[64]], address(_41140), address(_41141), _41142, mem[mem[64] + 128 len 64]
}



}
