contract main {




// =====================  Runtime code  =====================


#
#  - sub_00c73e4d(?)
#
uint8 stor0;
uint8 stor0; offset 8
uint16 stor0;
array of address stor1;
mapping of uint256 sub_44fea1b9;
mapping of uint256 stor3;
mapping of uint8 stor4;
array of struct stor5;
mapping of uint256 sub_63a9b098;
mapping of uint256 sub_4f88de01;
array of struct stor8;
uint256 sub_55a757d0;
uint256 sub_9b28d1a7;
uint256 sub_93520a80;
address sub_872a60adAddress;
uint256 stor12;
address tokenAddress;
uint256 sub_e18f03ad;
mapping of uint256 sub_ce6912a3;

function sub_44fea1b9(?) payable {
    require calldata.size - 4 >= 32
    require arg1 == address(arg1)
    return sub_44fea1b9[address(arg1)]
}

function sub_4f88de01(?) payable {
    require calldata.size - 4 >= 32
    require arg1 < 3
    return sub_4f88de01[arg1]
}

function sub_55a757d0(?) payable {
    return sub_55a757d0
}

function sub_63a9b098(?) payable {
    require calldata.size - 4 >= 32
    require arg1 < 3
    return sub_63a9b098[arg1]
}

function sub_665bb078(?) payable {
    require calldata.size - 4 >= 32
    require arg1 == address(arg1)
    return bool(sub_44fea1b9[address(arg1)])
}

function sub_872a60ad(?) payable {
    return address(sub_872a60adAddress)
}

function sub_93520a80(?) payable {
    return sub_93520a80
}

function sub_9b28d1a7(?) payable {
    return sub_9b28d1a7
}

function sub_ce6912a3(?) payable {
    require calldata.size - 4 >= 32
    require arg1 < 3
    if arg1 > 2:
        revert with 0, 33
    return sub_ce6912a3[arg1]
}

function sub_e18f03ad(?) payable {
    return sub_e18f03ad
}

function token() payable {
    return tokenAddress
}

function _fallback() payable {
    revert
}

function sub_0d9f9f0c(?) payable {
    require calldata.size - 4 >= 32
    if tokenAddress != msg.sender:
        if address(sub_872a60adAddress) != msg.sender:
            revert with 0, 'Access Denied!'
    sub_93520a80 = arg1
}

function sub_1565f50e(?) payable {
    require calldata.size - 4 >= 32
    if tokenAddress != msg.sender:
        if address(sub_872a60adAddress) != msg.sender:
            revert with 0, 'Access Denied!'
    sub_9b28d1a7 = arg1
}

function sub_390c991e(?) payable {
    require calldata.size - 4 >= 32
    if tokenAddress != msg.sender:
        if address(sub_872a60adAddress) != msg.sender:
            revert with 0, 'Access Denied!'
    sub_55a757d0 = arg1
}

function sub_1d5a1731(?) payable {
    require calldata.size - 4 >= 64
    require arg1 < 3
    if tokenAddress != msg.sender:
        if address(sub_872a60adAddress) != msg.sender:
            revert with 0, 'Access Denied!'
    if arg1 > 2:
        revert with 0, 33
    sub_63a9b098[arg1] = arg2
}

function setToken(address arg1) payable {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    if tokenAddress != msg.sender:
        if address(sub_872a60adAddress) != msg.sender:
            revert with 0, 'Access Denied!'
    if not arg1:
        revert with 0, 'zero address'
    tokenAddress = arg1
}

function setAdmin(address arg1) payable {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    if tokenAddress != msg.sender:
        if address(sub_872a60adAddress) != msg.sender:
            revert with 0, 'Access Denied!'
    if not arg1:
        revert with 0, 'zero address'
    address(sub_872a60adAddress) = arg1
}

function sub_9d2040f0(?) payable {
    require calldata.size - 4 >= 64
    require arg1 < 3
    if tokenAddress != msg.sender:
        if address(sub_872a60adAddress) != msg.sender:
            revert with 0, 'Access Denied!'
    if arg2 >= 100 * 10^6:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'REDUCE_RWD: do not reduce more than 100%'
    if arg1 > 2:
        revert with 0, 33
    stor8[arg1].field_0++
    stor8[arg1][stor8[arg1].field_0].field_0 = block.timestamp
    stor8[arg1][stor8[arg1].field_0].field_256 = arg2
}

function sub_8201bf26(?) payable {
    require calldata.size - 4 >= 32
    require arg1 < 3
    if tokenAddress != msg.sender:
        if address(sub_872a60adAddress) != msg.sender:
            revert with 0, 'Access Denied!'
    if arg1 > 2:
        revert with 0, 33
    if stor8[arg1].field_0 <= 1:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'UNDO CHANGE: No changes found for cType'
    if arg1 > 2:
        revert with 0, 33
    if not stor8[arg1].field_0:
        revert with 0, 49
    stor8[arg1][stor8[arg1].field_0 - 1].field_0 = 0
    stor8[arg1][stor8[arg1].field_0 - 1].field_256 = 0
    stor8[arg1].field_0--
}

function sub_9f227c53(?) payable {
    require calldata.size - 4 >= 64
    require arg1 < 3
    if tokenAddress != msg.sender:
        if address(sub_872a60adAddress) != msg.sender:
            revert with 0, 'Access Denied!'
    if arg1 > 2:
        revert with 0, 33
    sub_4f88de01[arg1] = arg2
    if 0 >= stor8[arg1].field_0:
        revert with 0, 50
    if arg1 > 2:
        revert with 0, 33
    stor8[arg1].field_0 = 0
    idx = 0
    while 2 * stor8[arg1].field_0 > idx:
        stor8[arg1][idx].field_0 = 0
        stor8[arg1][idx].field_256 = 0
        idx = idx + 2
        continue 
    if arg1 > 2:
        revert with 0, 33
    stor8[arg1].field_0++
    stor8[arg1][stor8[arg1].field_0].field_0 = stor8[arg1].field_0
    stor8[arg1][stor8[arg1].field_0].field_256 = 0
}

function sub_6eb5a7f4(?) payable {
    require calldata.size - 4 >= 128
    require cd[4] <= test266151307()
    require cd[4] + 35 < calldata.size
    if ('cd', 4).length > test266151307():
        revert with 0, 65
    if ceil32(32 * ('cd', 4).length) + 97 < 96 or ceil32(32 * ('cd', 4).length) + 97 > test266151307():
        revert with 0, 65
    mem[96] = ('cd', 4).length
    require cd[4] + (32 * ('cd', 4).length) + 36 <= calldata.size
    idx = 0
    s = cd[4] + 36
    t = 128
    while idx < ('cd', 4).length:
        mem[t] = cd[s]
        idx = idx + 1
        s = s + 32
        t = t + 32
        continue 
    require cd[36] <= test266151307()
    require cd[36] + 35 < calldata.size
    if ('cd', 36).length > test266151307():
        revert with 0, 65
    if ceil32(32 * ('cd', 36).length) + 98 < 97 or ceil32(32 * ('cd', 4).length) + ceil32(32 * ('cd', 36).length) + 98 > test266151307():
        revert with 0, 65
    mem[64] = ceil32(32 * ('cd', 4).length) + ceil32(32 * ('cd', 36).length) + 98
    mem[ceil32(32 * ('cd', 4).length) + 97] = ('cd', 36).length
    require cd[36] + (32 * ('cd', 36).length) + 36 <= calldata.size
    idx = 0
    s = cd[36] + 36
    t = ceil32(32 * ('cd', 4).length) + 129
    while idx < ('cd', 36).length:
        mem[t] = cd[s]
        idx = idx + 1
        s = s + 32
        t = t + 32
        continue 
    if uint8(stor0.field_8):
        if ext_code.size(this.address):
            revert with 0, 'Initializable: contract is already initialized'
        if uint8(stor0.field_8):
            sub_9b28d1a7 = 8760 * 24 * 3600
            sub_e18f03ad = 0
            idx = 0
            while idx < 3:
                if idx >= mem[96]:
                    revert with 0, 50
                if idx > 2:
                    revert with 0, 33
                sub_63a9b098[idx] = mem[(32 * idx) + 128]
                if idx >= mem[ceil32(32 * ('cd', 4).length) + 97]:
                    revert with 0, 50
                if idx > 2:
                    revert with 0, 33
                sub_4f88de01[idx] = mem[(32 * idx) + ceil32(32 * ('cd', 4).length) + 129]
                sub_ce6912a3[idx] = 0
                mem[0] = idx
                mem[32] = 8
                _189 = mem[64]
                mem[64] = mem[64] + 64
                mem[_189] = block.timestamp
                mem[_189 + 32] = 0
                stor8[idx].field_0++
                mem[0] = sha3(idx, 8)
                stor8[idx][stor8[idx].field_0].field_0 = block.timestamp
                stor8[idx][stor8[idx].field_0].field_256 = 0
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
        else:
            uint16(stor0.field_0) = 257
            sub_9b28d1a7 = 8760 * 24 * 3600
            sub_e18f03ad = 0
            idx = 0
            while idx < 3:
                if idx >= mem[96]:
                    revert with 0, 50
                if idx > 2:
                    revert with 0, 33
                sub_63a9b098[idx] = mem[(32 * idx) + 128]
                if idx >= mem[ceil32(32 * ('cd', 4).length) + 97]:
                    revert with 0, 50
                if idx > 2:
                    revert with 0, 33
                sub_4f88de01[idx] = mem[(32 * idx) + ceil32(32 * ('cd', 4).length) + 129]
                sub_ce6912a3[idx] = 0
                mem[0] = idx
                mem[32] = 8
                _194 = mem[64]
                mem[64] = mem[64] + 64
                mem[_194] = block.timestamp
                mem[_194 + 32] = 0
                stor8[idx].field_0++
                mem[0] = sha3(idx, 8)
                stor8[idx][stor8[idx].field_0].field_0 = block.timestamp
                stor8[idx][stor8[idx].field_0].field_256 = 0
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
    else:
        if uint8(stor0.field_0):
            revert with 0, 'Initializable: contract is already initialized'
        if uint8(stor0.field_8):
            sub_9b28d1a7 = 8760 * 24 * 3600
            sub_e18f03ad = 0
            idx = 0
            while idx < 3:
                if idx >= mem[96]:
                    revert with 0, 50
                if idx > 2:
                    revert with 0, 33
                sub_63a9b098[idx] = mem[(32 * idx) + 128]
                if idx >= mem[ceil32(32 * ('cd', 4).length) + 97]:
                    revert with 0, 50
                if idx > 2:
                    revert with 0, 33
                sub_4f88de01[idx] = mem[(32 * idx) + ceil32(32 * ('cd', 4).length) + 129]
                sub_ce6912a3[idx] = 0
                mem[0] = idx
                mem[32] = 8
                _199 = mem[64]
                mem[64] = mem[64] + 64
                mem[_199] = block.timestamp
                mem[_199 + 32] = 0
                stor8[idx].field_0++
                mem[0] = sha3(idx, 8)
                stor8[idx][stor8[idx].field_0].field_0 = block.timestamp
                stor8[idx][stor8[idx].field_0].field_256 = 0
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
        else:
            uint16(stor0.field_0) = 257
            sub_9b28d1a7 = 8760 * 24 * 3600
            sub_e18f03ad = 0
            idx = 0
            while idx < 3:
                if idx >= mem[96]:
                    revert with 0, 50
                if idx > 2:
                    revert with 0, 33
                sub_63a9b098[idx] = mem[(32 * idx) + 128]
                if idx >= mem[ceil32(32 * ('cd', 4).length) + 97]:
                    revert with 0, 50
                if idx > 2:
                    revert with 0, 33
                sub_4f88de01[idx] = mem[(32 * idx) + ceil32(32 * ('cd', 4).length) + 129]
                sub_ce6912a3[idx] = 0
                mem[0] = idx
                mem[32] = 8
                _204 = mem[64]
                mem[64] = mem[64] + 64
                mem[_204] = block.timestamp
                mem[_204 + 32] = 0
                stor8[idx].field_0++
                mem[0] = sha3(idx, 8)
                stor8[idx][stor8[idx].field_0].field_0 = block.timestamp
                stor8[idx][stor8[idx].field_0].field_256 = 0
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
    sub_55a757d0 = cd[68]
    uint256(stor12) = msg.sender or Mask(96, 160, uint256(stor12))
    sub_93520a80 = cd[100]
    if not uint8(stor0.field_8):
        uint8(stor0.field_8) = 0
}

function sub_0534cc68(?) payable {
    require calldata.size - 4 >= 96
    require cd[4] == address(cd[4])
    require cd[36] <= test266151307()
    require cd[36] + 35 < calldata.size
    if ('cd', 36).length > test266151307():
        revert with 0, 65
    if ceil32(32 * ('cd', 36).length) + 97 < 96 or ceil32(32 * ('cd', 36).length) + 97 > test266151307():
        revert with 0, 65
    mem[64] = ceil32(32 * ('cd', 36).length) + 97
    mem[96] = ('cd', 36).length
    require cd[36] + (32 * ('cd', 36).length) + 36 <= calldata.size
    idx = 0
    s = cd[36] + 36
    t = 128
    while idx < ('cd', 36).length:
        require cd[s] <= test266151307()
        require calldata.size > cd[36] + cd[s] + 67
        if cd[(cd[36] + cd[s] + 36)] > test266151307():
            revert with 0, 65
        _77 = mem[64]
        if mem[64] + ceil32(ceil32(cd[(cd[36] + cd[s] + 36)])) + 1 < mem[64] or mem[64] + ceil32(ceil32(cd[(cd[36] + cd[s] + 36)])) + 1 > test266151307():
            revert with 0, 65
        mem[64] = mem[64] + ceil32(ceil32(cd[(cd[36] + cd[s] + 36)])) + 1
        mem[_77] = cd[(cd[36] + cd[s] + 36)]
        require cd[36] + cd[s] + cd[(cd[36] + cd[s] + 36)] + 68 <= calldata.size
        mem[_77 + 32 len cd[(cd[36] + cd[s] + 36)]] = call.data[cd[36] + cd[s] + 68 len cd[(cd[36] + cd[s] + 36)]]
        mem[_77 + cd[(cd[36] + cd[s] + 36)] + 32] = 0
        mem[t] = _77
        idx = idx + 1
        s = s + 32
        t = t + 32
        continue 
    require cd[68] < 3
    if tokenAddress != msg.sender:
        revert with 0, 'Access Denied!'
    mem[0] = address(cd[4])
    mem[32] = 5
    if cd[68] >= 3:
        revert with 0, 33
    mem[mem[64] + 4] = cd[68]
    require ext_code.size(this.address)
    staticcall this.address.0xc73e4d with:
            gas gas_remaining wei
           args cd[68]
    mem[mem[64]] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    _82 = mem[64]
    mem[64] = mem[64] + ceil32(return_data.size)
    require return_data.size >= 32
    _83 = mem[_82]
    _152 = mem[96]
    idx = 0
    while idx < _152:
        mem[0] = address(cd[4])
        mem[32] = 5
        _155 = mem[64]
        mem[64] = mem[64] + 192
        if idx >= mem[96]:
            revert with 0, 50
        mem[_155] = mem[(32 * idx) + 128]
        mem[_155 + 32] = block.timestamp
        mem[_155 + 64] = block.timestamp
        mem[_155 + 96] = _83
        if cd[68] > 2:
            revert with 0, 33
        mem[32] = 6
        mem[_155 + 128] = sub_63a9b098[cd[68]]
        mem[_155 + 160] = cd[68]
        stor5[address(cd[4])].field_0++
        mem[0] = sha3(address(cd[4]), 5)
        _168 = mem[_155]
        _169 = mem[mem[_155]]
        if bool(stor5[address(cd[4])][stor5[address(cd[4])].field_0].field_0):
            if bool(stor5[address(cd[4])][stor5[address(cd[4])].field_0].field_0) == uint255(stor5[address(cd[4])][stor5[address(cd[4])].field_0].field_0) * 0.5 < 32:
                revert with 0, 34
            mem[0] = sha3(sha3(address(cd[4]), 5)) + (6 * stor5[address(cd[4])].field_0)
            if not _169:
                stor5[address(cd[4])][stor5[address(cd[4])].field_0].field_0 = 0
                s = sha3(sha3(sha3(address(cd[4]), 5)) + (6 * stor5[address(cd[4])].field_0))
                while sha3(sha3(sha3(address(cd[4]), 5)) + (6 * stor5[address(cd[4])].field_0)) + ((uint255(stor5[address(cd[4])][stor5[address(cd[4])].field_0].field_0) * 0.5) + 31 / 32) > s:
                    stor[s] = 0
                    _152 = mem[96]
                    s = s + 1
                    continue 
            else:
                stor5[address(cd[4])][stor5[address(cd[4])].field_0].field_0 = (2 * _169) + 1
                t = sha3(sha3(sha3(address(cd[4]), 5)) + (6 * stor5[address(cd[4])].field_0))
                s = _168 + 32
                while _168 + _169 + 32 > s:
                    stor[t] = mem[s]
                    _152 = mem[96]
                    t = t + 1
                    s = s + 32
                    continue 
                s = sha3(sha3(sha3(address(cd[4]), 5)) + (6 * stor5[address(cd[4])].field_0)) + (Mask(251, 0, _169 + 31) >> 5)
                while sha3(sha3(sha3(address(cd[4]), 5)) + (6 * stor5[address(cd[4])].field_0)) + ((uint255(stor5[address(cd[4])][stor5[address(cd[4])].field_0].field_0) * 0.5) + 31 / 32) > s:
                    stor[s] = 0
                    _152 = mem[96]
                    s = s + 1
                    continue 
        else:
            if bool(stor5[address(cd[4])][stor5[address(cd[4])].field_0].field_0) == stor5[address(cd[4])][stor5[address(cd[4])].field_0].field_1 % 128 < 32:
                revert with 0, 34
            mem[0] = sha3(sha3(address(cd[4]), 5)) + (6 * stor5[address(cd[4])].field_0)
            if not _169:
                stor5[address(cd[4])][stor5[address(cd[4])].field_0].field_0 = 0
                s = sha3(sha3(sha3(address(cd[4]), 5)) + (6 * stor5[address(cd[4])].field_0))
                while sha3(sha3(sha3(address(cd[4]), 5)) + (6 * stor5[address(cd[4])].field_0)) + (stor5[address(cd[4])][stor5[address(cd[4])].field_0].field_1 % 128 + 31 / 32) > s:
                    stor[s] = 0
                    _152 = mem[96]
                    s = s + 1
                    continue 
            else:
                stor5[address(cd[4])][stor5[address(cd[4])].field_0].field_0 = (2 * _169) + 1
                t = sha3(sha3(sha3(address(cd[4]), 5)) + (6 * stor5[address(cd[4])].field_0))
                s = _168 + 32
                while _168 + _169 + 32 > s:
                    stor[t] = mem[s]
                    _152 = mem[96]
                    t = t + 1
                    s = s + 32
                    continue 
                s = sha3(sha3(sha3(address(cd[4]), 5)) + (6 * stor5[address(cd[4])].field_0)) + (Mask(251, 0, _169 + 31) >> 5)
                while sha3(sha3(sha3(address(cd[4]), 5)) + (6 * stor5[address(cd[4])].field_0)) + (stor5[address(cd[4])][stor5[address(cd[4])].field_0].field_1 % 128 + 31 / 32) > s:
                    stor[s] = 0
                    _152 = mem[96]
                    s = s + 1
                    continue 
        stor5[address(cd[4])][stor5[address(cd[4])].field_0].field_256 = block.timestamp
        stor5[address(cd[4])][stor5[address(cd[4])].field_0].field_512 = block.timestamp
        stor5[address(cd[4])][stor5[address(cd[4])].field_0].field_768 = _83
        stor5[address(cd[4])][stor5[address(cd[4])].field_0].field_1024 = sub_63a9b098[cd[68]]
        if cd[68] > 2:
            revert with 0, 33
        stor5[address(cd[4])][stor5[address(cd[4])].field_0].field_1280 = cd[68] or Mask(248, 8, stor5[address(cd[4])][stor5[address(cd[4])].field_0].field_1280)
        if idx == -1:
            revert with 0, 17
        _152 = mem[96]
        idx = idx + 1
        continue 
    if stor4[address(cd[4])]:
        sub_44fea1b9[address(cd[4])] = stor5[address(cd[4])].field_0
    else:
        stor4[address(cd[4])] = 1
        sub_44fea1b9[address(cd[4])] = stor5[address(cd[4])].field_0
        stor3[address(cd[4])] = stor1.length
        stor1.length++
        address(stor1[stor1.length]) = address(cd[4])
    if sub_e18f03ad > !mem[96]:
        revert with 0, 17
    sub_e18f03ad += mem[96]
    if cd[68] > 2:
        revert with 0, 33
    if sub_ce6912a3[cd[68]] > !mem[96]:
        revert with 0, 17
    sub_ce6912a3[cd[68]] += mem[96]
}

function sub_f743f319(?) payable {
    require calldata.size - 4 >= 32
    require arg1 == address(arg1)
    if not sub_44fea1b9[address(arg1)]:
        return ''
    mem[0] = address(arg1)
    mem[32] = 5
    mem[64] = (32 * stor5[address(arg1)].field_0) + 128
    mem[96] = stor5[address(arg1)].field_0
    s = 128
    idx = 0
    while idx < stor5[address(arg1)].field_0:
        mem[0] = sha3(address(arg1), 5)
        _57 = mem[64]
        mem[64] = mem[64] + 192
        if bool(stor5[address(arg1)][idx].field_0):
            if bool(stor5[address(arg1)][idx].field_0) == uint255(stor5[address(arg1)][idx].field_0) * 0.5 < 32:
                revert with 0, 34
            _65 = mem[64]
            mem[64] = mem[64] + ceil32(uint255(stor5[address(arg1)][idx].field_0) * 0.5) + 32
            mem[_65] = uint255(stor5[address(arg1)][idx].field_0) * 0.5
            if bool(stor5[address(arg1)][idx].field_0):
                if bool(stor5[address(arg1)][idx].field_0) == uint255(stor5[address(arg1)][idx].field_0) * 0.5 < 32:
                    revert with 0, 34
                if Mask(256, -1, stor5[address(arg1)][idx].field_0):
                    if 31 >= uint255(stor5[address(arg1)][idx].field_0) * 0.5:
                        mem[_65 + 32] = 256 * Mask(248, 0, stor5[address(arg1)][idx].field_8)
                    else:
                        mem[0] = (6 * idx) + sha3(sha3(address(arg1), 5))
                        mem[_65 + 32] = stor5[address(arg1)][idx].field_0
                        t = _65 + 32
                        u = sha3(mem[0])
                        while _65 + (uint255(stor5[address(arg1)][idx].field_0) * 0.5) > t:
                            mem[t + 32] = uint256(stor1[u])
                            t = t + 32
                            u = u + 1
                            continue 
            else:
                if bool(stor5[address(arg1)][idx].field_0) == stor5[address(arg1)][idx].field_1 % 128 < 32:
                    revert with 0, 34
                if stor5[address(arg1)][idx].field_1 % 128:
                    if 31 >= stor5[address(arg1)][idx].field_1 % 128:
                        mem[_65 + 32] = 256 * Mask(248, 0, stor5[address(arg1)][idx].field_8)
                    else:
                        mem[0] = (6 * idx) + sha3(sha3(address(arg1), 5))
                        mem[_65 + 32] = stor5[address(arg1)][idx].field_0
                        t = _65 + 32
                        u = sha3(mem[0])
                        while _65 + stor5[address(arg1)][idx].field_1 % 128 > t:
                            mem[t + 32] = uint256(stor1[u])
                            t = t + 32
                            u = u + 1
                            continue 
            mem[_57] = _65
        else:
            if bool(stor5[address(arg1)][idx].field_0) == stor5[address(arg1)][idx].field_1 % 128 < 32:
                revert with 0, 34
            _67 = mem[64]
            mem[64] = mem[64] + ceil32(stor5[address(arg1)][idx].field_1 % 128) + 32
            mem[_67] = stor5[address(arg1)][idx].field_1 % 128
            if bool(stor5[address(arg1)][idx].field_0):
                if bool(stor5[address(arg1)][idx].field_0) == uint255(stor5[address(arg1)][idx].field_0) * 0.5 < 32:
                    revert with 0, 34
                if Mask(256, -1, stor5[address(arg1)][idx].field_0):
                    if 31 >= uint255(stor5[address(arg1)][idx].field_0) * 0.5:
                        mem[_67 + 32] = 256 * Mask(248, 0, stor5[address(arg1)][idx].field_8)
                    else:
                        mem[0] = (6 * idx) + sha3(sha3(address(arg1), 5))
                        mem[_67 + 32] = stor5[address(arg1)][idx].field_0
                        t = _67 + 32
                        u = sha3(mem[0])
                        while _67 + (uint255(stor5[address(arg1)][idx].field_0) * 0.5) > t:
                            mem[t + 32] = uint256(stor1[u])
                            t = t + 32
                            u = u + 1
                            continue 
            else:
                if bool(stor5[address(arg1)][idx].field_0) == stor5[address(arg1)][idx].field_1 % 128 < 32:
                    revert with 0, 34
                if stor5[address(arg1)][idx].field_1 % 128:
                    if 31 >= stor5[address(arg1)][idx].field_1 % 128:
                        mem[_67 + 32] = 256 * Mask(248, 0, stor5[address(arg1)][idx].field_8)
                    else:
                        mem[0] = (6 * idx) + sha3(sha3(address(arg1), 5))
                        mem[_67 + 32] = stor5[address(arg1)][idx].field_0
                        t = _67 + 32
                        u = sha3(mem[0])
                        while _67 + stor5[address(arg1)][idx].field_1 % 128 > t:
                            mem[t + 32] = uint256(stor1[u])
                            t = t + 32
                            u = u + 1
                            continue 
            mem[_57] = _67
        mem[_57 + 32] = stor5[address(arg1)][idx].field_256
        mem[_57 + 64] = stor5[address(arg1)][idx].field_512
        mem[_57 + 96] = stor5[address(arg1)][idx].field_768
        mem[_57 + 128] = stor5[address(arg1)][idx].field_1024
        if uint8(stor5[address(arg1)][idx].field_1280) > 2:
            revert with 0, 33
        mem[_57 + 160] = uint8(stor5[address(arg1)][idx].field_1280)
        mem[s] = _57
        s = s + 32
        idx = idx + 1
        continue 
    _55 = mem[96]
    _59 = mem[64]
    mem[64] = mem[64] + 192
    mem[_59] = 96
    mem[_59 + 32] = 0
    mem[_59 + 64] = 0
    mem[_59 + 96] = 0
    mem[_59 + 128] = 0
    mem[_59 + 160] = 0
    if 0 >= mem[96]:
        revert with 0, 50
    _63 = mem[mem[128]]
    _64 = mem[64]
    mem[64] = mem[64] + 64
    mem[_64] = 1
    mem[_64 + 32] = 0x2300000000000000000000000000000000000000000000000000000000000000
    idx = 1
    s = _63
    t = _59
    while idx < _55:
        if idx >= mem[96]:
            revert with 0, 50
        _105 = mem[(32 * idx) + 128]
        _106 = mem[mem[(32 * idx) + 128]]
        _107 = mem[64]
        _109 = mem[s]
        t = 0
        while t < _109:
            mem[t + _107 + 32] = mem[t + s + 32]
            t = t + 32
            continue 
        if ceil32(_109) <= _109:
            _136 = mem[_64]
            s = 0
            while s < _136:
                mem[s + _107 + _109 + 32] = mem[s + _64 + 32]
                s = s + 32
                continue 
            if ceil32(_136) <= _136:
                _160 = mem[_106]
                s = 0
                while s < _160:
                    mem[s + _107 + _109 + _136 + 32] = mem[s + _106 + 32]
                    s = s + 32
                    continue 
                if ceil32(_160) <= _160:
                    _180 = mem[64]
                    mem[mem[64]] = _160 + _107 + _109 + _136 - mem[64]
                    mem[64] = _160 + _107 + _109 + _136 + 32
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    s = _180
                    t = _105
                    continue 
                mem[_107 + _109 + _136 + _160 + 32] = 0
                _184 = mem[64]
                mem[mem[64]] = _160 + _107 + _109 + _136 - mem[64]
                mem[64] = _160 + _107 + _109 + _136 + 32
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                s = _184
                t = _105
                continue 
            mem[_107 + _109 + _136 + 32] = 0
            _162 = mem[_106]
            s = 0
            while s < _162:
                mem[s + _107 + _109 + _136 + 32] = mem[s + _106 + 32]
                s = s + 32
                continue 
            if ceil32(_162) <= _162:
                _181 = mem[64]
                mem[mem[64]] = _162 + _107 + _109 + _136 - mem[64]
                mem[64] = _162 + _107 + _109 + _136 + 32
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                s = _181
                t = _105
                continue 
            mem[_107 + _109 + _136 + _162 + 32] = 0
            _185 = mem[64]
            mem[mem[64]] = _162 + _107 + _109 + _136 - mem[64]
            mem[64] = _162 + _107 + _109 + _136 + 32
            if idx == -1:
                revert with 0, 17
            idx = idx + 1
            s = _185
            t = _105
            continue 
        mem[_107 + _109 + 32] = 0
        _138 = mem[_64]
        s = 0
        while s < _138:
            mem[s + _107 + _109 + 32] = mem[s + _64 + 32]
            s = s + 32
            continue 
        if ceil32(_138) <= _138:
            _161 = mem[_106]
            s = 0
            while s < _161:
                mem[s + _107 + _109 + _138 + 32] = mem[s + _106 + 32]
                s = s + 32
                continue 
            if ceil32(_161) <= _161:
                _182 = mem[64]
                mem[mem[64]] = _161 + _107 + _109 + _138 - mem[64]
                mem[64] = _161 + _107 + _109 + _138 + 32
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                s = _182
                t = _105
                continue 
            mem[_107 + _109 + _138 + _161 + 32] = 0
            _186 = mem[64]
            mem[mem[64]] = _161 + _107 + _109 + _138 - mem[64]
            mem[64] = _161 + _107 + _109 + _138 + 32
            if idx == -1:
                revert with 0, 17
            idx = idx + 1
            s = _186
            t = _105
            continue 
        mem[_107 + _109 + _138 + 32] = 0
        _163 = mem[_106]
        s = 0
        while s < _163:
            mem[s + _107 + _109 + _138 + 32] = mem[s + _106 + 32]
            s = s + 32
            continue 
        if ceil32(_163) <= _163:
            _183 = mem[64]
            mem[mem[64]] = _163 + _107 + _109 + _138 - mem[64]
            mem[64] = _163 + _107 + _109 + _138 + 32
            if idx == -1:
                revert with 0, 17
            idx = idx + 1
            s = _183
            t = _105
            continue 
        mem[_107 + _109 + _138 + _163 + 32] = 0
        _187 = mem[64]
        mem[mem[64]] = _163 + _107 + _109 + _138 - mem[64]
        mem[64] = _163 + _107 + _109 + _138 + 32
        if idx == -1:
            revert with 0, 17
        idx = idx + 1
        s = _187
        t = _105
        continue 
    _104 = mem[64]
    mem[mem[64]] = 32
    _108 = mem[s]
    mem[mem[64] + 32] = mem[s]
    mem[mem[64] + 64 len ceil32(_108)] = mem[s + 32 len ceil32(_108)]
    if ceil32(_108) <= _108:
        return 32, mem[mem[64] + 32 len ceil32(_108) + 32]
    mem[mem[64] + _108 + 64] = 0
    return memory
      from mem[64]
       len ceil32(_108) + _104 + -mem[64] + 64
}

function _getRewardAmountOf(address arg1, uint256 arg2) payable {
    require calldata.size - 4 >= 64
    require arg1 == arg1
    mem[0] = arg1
    mem[32] = 5
    mem[64] = (32 * stor5[address(arg1)].field_0) + 128
    mem[96] = stor5[address(arg1)].field_0
    s = 128
    idx = 0
    while idx < stor5[address(arg1)].field_0:
        mem[0] = sha3(address(arg1), 5)
        _45 = mem[64]
        mem[64] = mem[64] + 192
        if bool(stor5[address(arg1)][idx].field_0):
            if bool(stor5[address(arg1)][idx].field_0) == uint255(stor5[address(arg1)][idx].field_0) * 0.5 < 32:
                revert with 0, 34
            _52 = mem[64]
            mem[64] = mem[64] + ceil32(uint255(stor5[address(arg1)][idx].field_0) * 0.5) + 32
            mem[_52] = uint255(stor5[address(arg1)][idx].field_0) * 0.5
            if bool(stor5[address(arg1)][idx].field_0):
                if bool(stor5[address(arg1)][idx].field_0) == uint255(stor5[address(arg1)][idx].field_0) * 0.5 < 32:
                    revert with 0, 34
                if Mask(256, -1, stor5[address(arg1)][idx].field_0):
                    if 31 >= uint255(stor5[address(arg1)][idx].field_0) * 0.5:
                        mem[_52 + 32] = 256 * Mask(248, 0, stor5[address(arg1)][idx].field_8)
                    else:
                        mem[0] = (6 * idx) + sha3(sha3(address(arg1), 5))
                        mem[_52 + 32] = stor5[address(arg1)][idx].field_0
                        t = _52 + 32
                        u = sha3(mem[0])
                        while _52 + (uint255(stor5[address(arg1)][idx].field_0) * 0.5) > t:
                            mem[t + 32] = uint256(stor1[u])
                            t = t + 32
                            u = u + 1
                            continue 
            else:
                if bool(stor5[address(arg1)][idx].field_0) == stor5[address(arg1)][idx].field_1 % 128 < 32:
                    revert with 0, 34
                if stor5[address(arg1)][idx].field_1 % 128:
                    if 31 >= stor5[address(arg1)][idx].field_1 % 128:
                        mem[_52 + 32] = 256 * Mask(248, 0, stor5[address(arg1)][idx].field_8)
                    else:
                        mem[0] = (6 * idx) + sha3(sha3(address(arg1), 5))
                        mem[_52 + 32] = stor5[address(arg1)][idx].field_0
                        t = _52 + 32
                        u = sha3(mem[0])
                        while _52 + stor5[address(arg1)][idx].field_1 % 128 > t:
                            mem[t + 32] = uint256(stor1[u])
                            t = t + 32
                            u = u + 1
                            continue 
            mem[_45] = _52
        else:
            if bool(stor5[address(arg1)][idx].field_0) == stor5[address(arg1)][idx].field_1 % 128 < 32:
                revert with 0, 34
            _53 = mem[64]
            mem[64] = mem[64] + ceil32(stor5[address(arg1)][idx].field_1 % 128) + 32
            mem[_53] = stor5[address(arg1)][idx].field_1 % 128
            if bool(stor5[address(arg1)][idx].field_0):
                if bool(stor5[address(arg1)][idx].field_0) == uint255(stor5[address(arg1)][idx].field_0) * 0.5 < 32:
                    revert with 0, 34
                if Mask(256, -1, stor5[address(arg1)][idx].field_0):
                    if 31 >= uint255(stor5[address(arg1)][idx].field_0) * 0.5:
                        mem[_53 + 32] = 256 * Mask(248, 0, stor5[address(arg1)][idx].field_8)
                    else:
                        mem[0] = (6 * idx) + sha3(sha3(address(arg1), 5))
                        mem[_53 + 32] = stor5[address(arg1)][idx].field_0
                        t = _53 + 32
                        u = sha3(mem[0])
                        while _53 + (uint255(stor5[address(arg1)][idx].field_0) * 0.5) > t:
                            mem[t + 32] = uint256(stor1[u])
                            t = t + 32
                            u = u + 1
                            continue 
            else:
                if bool(stor5[address(arg1)][idx].field_0) == stor5[address(arg1)][idx].field_1 % 128 < 32:
                    revert with 0, 34
                if stor5[address(arg1)][idx].field_1 % 128:
                    if 31 >= stor5[address(arg1)][idx].field_1 % 128:
                        mem[_53 + 32] = 256 * Mask(248, 0, stor5[address(arg1)][idx].field_8)
                    else:
                        mem[0] = (6 * idx) + sha3(sha3(address(arg1), 5))
                        mem[_53 + 32] = stor5[address(arg1)][idx].field_0
                        t = _53 + 32
                        u = sha3(mem[0])
                        while _53 + stor5[address(arg1)][idx].field_1 % 128 > t:
                            mem[t + 32] = uint256(stor1[u])
                            t = t + 32
                            u = u + 1
                            continue 
            mem[_45] = _53
        mem[_45 + 32] = stor5[address(arg1)][idx].field_256
        mem[_45 + 64] = stor5[address(arg1)][idx].field_512
        mem[_45 + 96] = stor5[address(arg1)][idx].field_768
        mem[_45 + 128] = stor5[address(arg1)][idx].field_1024
        if uint8(stor5[address(arg1)][idx].field_1280) > 2:
            revert with 0, 33
        mem[_45 + 160] = uint8(stor5[address(arg1)][idx].field_1280)
        mem[s] = _45
        s = s + 32
        idx = idx + 1
        continue 
    if arg2 >= mem[96]:
        revert with 0, 'CONT: Cont index is improper'
    if arg2 >= mem[96]:
        revert with 0, 50
    _51 = mem[mem[(32 * arg2) + 128] + 64]
    if mem[mem[(32 * arg2) + 128] + 160] > 2:
        revert with 0, 33
    mem[0] = mem[mem[(32 * arg2) + 128] + 160]
    mem[32] = 8
    idx = 0
    while stor8[mem[mem[(32 * arg2) + 128] + 160]].field_0 > idx:
        if idx > !stor8[mem[mem[(32 * arg2) + 128] + 160]].field_0:
            revert with 0, 17
        if mem[mem[(32 * arg2) + 128] + 160] > 2:
            revert with 0, 33
        mem[32] = 8
        if idx + stor8[mem[mem[(32 * arg2) + 128] + 160]].field_0 / 2 >= stor8[mem[mem[(32 * arg2) + 128] + 160]].field_0:
            revert with 0, 50
        mem[0] = sha3(mem[mem[(32 * arg2) + 128] + 160], 8)
        if stor8[mem[mem[(32 * arg2) + 128] + 160]][Mask(255, 1, idx + stor8[mem[mem[(32 * arg2) + 128] + 160]].field_0)].field_0 >= _51:
            idx = idx
            continue 
        if 1 > !(idx + stor8[mem[mem[(32 * arg2) + 128] + 160]].field_0 / 2):
            revert with 0, 17
        idx = (idx + stor8[mem[mem[(32 * arg2) + 128] + 160]].field_0 / 2) + 1
        continue 
    _84 = mem[mem[(32 * arg2) + 128] + 64]
    _85 = mem[mem[(32 * arg2) + 128] + 32]
    if mem[mem[(32 * arg2) + 128] + 160] > 2:
        revert with 0, 33
    idx = 0
    while stor8[mem[mem[(32 * arg2) + 128] + 160]].field_0 > idx:
        if idx > !stor8[mem[mem[(32 * arg2) + 128] + 160]].field_0:
            revert with 0, 17
        if mem[mem[(32 * arg2) + 128] + 160] > 2:
            revert with 0, 33
        mem[32] = 8
        if idx + stor8[mem[mem[(32 * arg2) + 128] + 160]].field_0 / 2 >= stor8[mem[mem[(32 * arg2) + 128] + 160]].field_0:
            revert with 0, 50
        mem[0] = sha3(mem[mem[(32 * arg2) + 128] + 160], 8)
        if stor8[mem[mem[(32 * arg2) + 128] + 160]][Mask(255, 1, idx + stor8[mem[mem[(32 * arg2) + 128] + 160]].field_0)].field_0 >= _85:
            idx = idx
            continue 
        if 1 > !(idx + stor8[mem[mem[(32 * arg2) + 128] + 160]].field_0 / 2):
            revert with 0, 17
        idx = (idx + stor8[mem[mem[(32 * arg2) + 128] + 160]].field_0 / 2) + 1
        continue 
    if mem[mem[(32 * arg2) + 128] + 160] > 2:
        revert with 0, 33
    mem[0] = mem[mem[(32 * arg2) + 128] + 160]
    mem[32] = 8
    s = 0
    while stor8[mem[mem[(32 * arg2) + 128] + 160]].field_0 > s:
        if s > !stor8[mem[mem[(32 * arg2) + 128] + 160]].field_0:
            revert with 0, 17
        if mem[mem[(32 * arg2) + 128] + 160] > 2:
            revert with 0, 33
        mem[32] = 8
        if s + stor8[mem[mem[(32 * arg2) + 128] + 160]].field_0 / 2 >= stor8[mem[mem[(32 * arg2) + 128] + 160]].field_0:
            revert with 0, 50
        mem[0] = sha3(mem[mem[(32 * arg2) + 128] + 160], 8)
        if stor8[mem[mem[(32 * arg2) + 128] + 160]][Mask(255, 1, s + stor8[mem[mem[(32 * arg2) + 128] + 160]].field_0)].field_0 >= _84:
            s = s
            continue 
        if 1 > !(s + stor8[mem[mem[(32 * arg2) + 128] + 160]].field_0 / 2):
            revert with 0, 17
        s = (s + stor8[mem[mem[(32 * arg2) + 128] + 160]].field_0 / 2) + 1
        continue 
    t = idx
    u = mem[mem[(32 * arg2) + 128] + 96]
    while t < s:
        if mem[mem[(32 * arg2) + 128] + 160] > 2:
            revert with 0, 33
        mem[32] = 8
        if t >= stor8[mem[mem[(32 * arg2) + 128] + 160]].field_0:
            revert with 0, 50
        mem[0] = sha3(mem[mem[(32 * arg2) + 128] + 160], 8)
        if 100 * 10^6 < stor8[mem[mem[(32 * arg2) + 128] + 160]][t].field_256 - 0x8000000000000000000000000000000000000000000000000000000000000000 and stor8[mem[mem[(32 * arg2) + 128] + 160]][t].field_256 >= 0:
            revert with 0, 17
        if stor8[mem[mem[(32 * arg2) + 128] + 160]][t].field_256 < 0 and 100 * 10^6 > stor8[mem[mem[(32 * arg2) + 128] + 160]][t].field_256 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
            revert with 0, 17
        if u and -stor8[mem[mem[(32 * arg2) + 128] + 160]][t].field_256 + 100 * 10^6 > -1 / u:
            revert with 0, 17
        if t == -1:
            revert with 0, 17
        t = t + 1
        u = (100 * 10^6 * u) - (stor8[mem[mem[(32 * arg2) + 128] + 160]][t].field_256 * u) / 100 * 10^6
        continue 
    if _84 < _85:
        revert with 0, 17
    if not sub_9b28d1a7:
        revert with 0, 18
    idx = _84 - _85 / sub_9b28d1a7
    s = u
    while idx:
        if not idx:
            revert with 0, 17
        if 100 * 10^6 < sub_93520a80 - 0x8000000000000000000000000000000000000000000000000000000000000000 and sub_93520a80 >= 0:
            revert with 0, 17
        if sub_93520a80 < 0 and 100 * 10^6 > sub_93520a80 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
            revert with 0, 17
        if s and -sub_93520a80 + 100 * 10^6 > -1 / s:
            revert with 0, 17
        idx = idx - 1
        s = (100 * 10^6 * s) - (sub_93520a80 * s) / 100 * 10^6
        continue 
    _154 = mem[mem[(32 * arg2) + 128] + 32]
    if mem[mem[(32 * arg2) + 128] + 160] > 2:
        revert with 0, 33
    idx = var132001
    s = var132002
    t = var132004
    u = var132005
    v = var132006
    w = var132007
    x = var132008
    y = var132009
    while idx < stor8[mem[mem[(32 * arg2) + 128] + 160]].field_0:
        if mem[mem[(32 * arg2) + 128] + 160] > 2:
            revert with 0, 33
        if idx >= stor8[mem[mem[(32 * arg2) + 128] + 160]].field_0:
            revert with 0, 50
        if x < _154:
            revert with 0, 17
        if not sub_9b28d1a7:
            revert with 0, 18
        if stor8[mem[mem[(32 * arg2) + 128] + 160]][idx].field_0 < _154:
            revert with 0, 17
        if not sub_9b28d1a7:
            revert with 0, 18
        if stor8[mem[mem[(32 * arg2) + 128] + 160]][idx].field_0 - _154 / sub_9b28d1a7 == x - _154 / sub_9b28d1a7:
            if stor8[mem[mem[(32 * arg2) + 128] + 160]][idx].field_0 < x:
                revert with 0, 17
            if mem[mem[(32 * arg2) + 128] + 128] and y > -1 / mem[mem[(32 * arg2) + 128] + 128]:
                revert with 0, 17
            if mem[mem[(32 * arg2) + 128] + 128] * y / 100 * 10^6 and stor8[mem[mem[(32 * arg2) + 128] + 160]][idx].field_0 - x > -1 / mem[mem[(32 * arg2) + 128] + 128] * y / 100 * 10^6:
                revert with 0, 17
            if v > !((stor8[mem[mem[(32 * arg2) + 128] + 160]][idx].field_0 * mem[mem[(32 * arg2) + 128] + 128] * y / 100 * 10^6) - (x * mem[mem[(32 * arg2) + 128] + 128] * y / 100 * 10^6) / 8760 * 24 * 3600):
                revert with 0, 17
            if stor8[mem[mem[(32 * arg2) + 128] + 160]][idx].field_0 - _154 / sub_9b28d1a7 != x - _154 / sub_9b28d1a7:
                if 100 * 10^6 < sub_93520a80 - 0x8000000000000000000000000000000000000000000000000000000000000000 and sub_93520a80 >= 0:
                    revert with 0, 17
                if sub_93520a80 < 0 and 100 * 10^6 > sub_93520a80 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                    revert with 0, 17
                if y and -sub_93520a80 + 100 * 10^6 > -1 / y:
                    revert with 0, 17
                if not idx:
                    revert with 0, 17
                if idx - 1 == -1:
                    revert with 0, 17
                if mem[mem[(32 * arg2) + 128] + 160] > 2:
                    revert with 0, 33
                mem[0] = mem[mem[(32 * arg2) + 128] + 160]
                mem[32] = 8
                idx = idx
                s = stor8[mem[mem[(32 * arg2) + 128] + 160]][idx].field_0 - _154 / sub_9b28d1a7 != x - _154 / sub_9b28d1a7
                t = (stor8[mem[mem[(32 * arg2) + 128] + 160]][idx].field_0 * mem[mem[(32 * arg2) + 128] + 128] * y / 100 * 10^6) - (x * mem[mem[(32 * arg2) + 128] + 128] * y / 100 * 10^6) / 8760 * 24 * 3600
                u = stor8[mem[mem[(32 * arg2) + 128] + 160]][idx].field_0 - x
                v = v + ((stor8[mem[mem[(32 * arg2) + 128] + 160]][idx].field_0 * mem[mem[(32 * arg2) + 128] + 128] * y / 100 * 10^6) - (x * mem[mem[(32 * arg2) + 128] + 128] * y / 100 * 10^6) / 8760 * 24 * 3600)
                w = stor8[mem[mem[(32 * arg2) + 128] + 160]][idx].field_0
                x = stor8[mem[mem[(32 * arg2) + 128] + 160]][idx].field_0
                y = (100 * 10^6 * y) - (sub_93520a80 * y) / 100 * 10^6
                continue 
            if mem[mem[(32 * arg2) + 128] + 160] > 2:
                revert with 0, 33
            if idx >= stor8[mem[mem[(32 * arg2) + 128] + 160]].field_0:
                revert with 0, 50
            if 100 * 10^6 < stor8[mem[mem[(32 * arg2) + 128] + 160]][idx].field_256 - 0x8000000000000000000000000000000000000000000000000000000000000000 and stor8[mem[mem[(32 * arg2) + 128] + 160]][idx].field_256 >= 0:
                revert with 0, 17
            if stor8[mem[mem[(32 * arg2) + 128] + 160]][idx].field_256 < 0 and 100 * 10^6 > stor8[mem[mem[(32 * arg2) + 128] + 160]][idx].field_256 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                revert with 0, 17
            if y and -stor8[mem[mem[(32 * arg2) + 128] + 160]][idx].field_256 + 100 * 10^6 > -1 / y:
                revert with 0, 17
            if idx == -1:
                revert with 0, 17
            if mem[mem[(32 * arg2) + 128] + 160] > 2:
                revert with 0, 33
            mem[0] = mem[mem[(32 * arg2) + 128] + 160]
            mem[32] = 8
            idx = idx + 1
            s = stor8[mem[mem[(32 * arg2) + 128] + 160]][idx].field_0 - _154 / sub_9b28d1a7 != x - _154 / sub_9b28d1a7
            t = (stor8[mem[mem[(32 * arg2) + 128] + 160]][idx].field_0 * mem[mem[(32 * arg2) + 128] + 128] * y / 100 * 10^6) - (x * mem[mem[(32 * arg2) + 128] + 128] * y / 100 * 10^6) / 8760 * 24 * 3600
            u = stor8[mem[mem[(32 * arg2) + 128] + 160]][idx].field_0 - x
            v = v + ((stor8[mem[mem[(32 * arg2) + 128] + 160]][idx].field_0 * mem[mem[(32 * arg2) + 128] + 128] * y / 100 * 10^6) - (x * mem[mem[(32 * arg2) + 128] + 128] * y / 100 * 10^6) / 8760 * 24 * 3600)
            w = stor8[mem[mem[(32 * arg2) + 128] + 160]][idx].field_0
            x = stor8[mem[mem[(32 * arg2) + 128] + 160]][idx].field_0
            y = (100 * 10^6 * y) - (stor8[mem[mem[(32 * arg2) + 128] + 160]][idx].field_256 * y) / 100 * 10^6
            continue 
        if x < _154:
            revert with 0, 17
        if not sub_9b28d1a7:
            revert with 0, 18
        if 1 > !(x - _154 / sub_9b28d1a7):
            revert with 0, 17
        if sub_9b28d1a7 and (x - _154 / sub_9b28d1a7) + 1 > -1 / sub_9b28d1a7:
            revert with 0, 17
        if _154 > !(sub_9b28d1a7 + (x - _154 / sub_9b28d1a7 * sub_9b28d1a7)):
            revert with 0, 17
        if _154 + sub_9b28d1a7 + (x - _154 / sub_9b28d1a7 * sub_9b28d1a7) < x:
            revert with 0, 17
        if mem[mem[(32 * arg2) + 128] + 128] and y > -1 / mem[mem[(32 * arg2) + 128] + 128]:
            revert with 0, 17
        if mem[mem[(32 * arg2) + 128] + 128] * y / 100 * 10^6 and _154 + sub_9b28d1a7 + (x - _154 / sub_9b28d1a7 * sub_9b28d1a7) - x > -1 / mem[mem[(32 * arg2) + 128] + 128] * y / 100 * 10^6:
            revert with 0, 17
        if v > !((_154 * mem[mem[(32 * arg2) + 128] + 128] * y / 100 * 10^6) + (sub_9b28d1a7 * mem[mem[(32 * arg2) + 128] + 128] * y / 100 * 10^6) + (x - _154 / sub_9b28d1a7 * sub_9b28d1a7 * mem[mem[(32 * arg2) + 128] + 128] * y / 100 * 10^6) - (x * mem[mem[(32 * arg2) + 128] + 128] * y / 100 * 10^6) / 8760 * 24 * 3600):
            revert with 0, 17
        if stor8[mem[mem[(32 * arg2) + 128] + 160]][idx].field_0 - _154 / sub_9b28d1a7 != x - _154 / sub_9b28d1a7:
            if 100 * 10^6 < sub_93520a80 - 0x8000000000000000000000000000000000000000000000000000000000000000 and sub_93520a80 >= 0:
                revert with 0, 17
            if sub_93520a80 < 0 and 100 * 10^6 > sub_93520a80 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                revert with 0, 17
            if y and -sub_93520a80 + 100 * 10^6 > -1 / y:
                revert with 0, 17
            if not idx:
                revert with 0, 17
            if idx - 1 == -1:
                revert with 0, 17
            if mem[mem[(32 * arg2) + 128] + 160] > 2:
                revert with 0, 33
            mem[0] = mem[mem[(32 * arg2) + 128] + 160]
            mem[32] = 8
            idx = idx
            s = stor8[mem[mem[(32 * arg2) + 128] + 160]][idx].field_0 - _154 / sub_9b28d1a7 != x - _154 / sub_9b28d1a7
            t = (_154 * mem[mem[(32 * arg2) + 128] + 128] * y / 100 * 10^6) + (sub_9b28d1a7 * mem[mem[(32 * arg2) + 128] + 128] * y / 100 * 10^6) + (x - _154 / sub_9b28d1a7 * sub_9b28d1a7 * mem[mem[(32 * arg2) + 128] + 128] * y / 100 * 10^6) - (x * mem[mem[(32 * arg2) + 128] + 128] * y / 100 * 10^6) / 8760 * 24 * 3600
            u = _154 + sub_9b28d1a7 + (x - _154 / sub_9b28d1a7 * sub_9b28d1a7) - x
            v = v + ((_154 * mem[mem[(32 * arg2) + 128] + 128] * y / 100 * 10^6) + (sub_9b28d1a7 * mem[mem[(32 * arg2) + 128] + 128] * y / 100 * 10^6) + (x - _154 / sub_9b28d1a7 * sub_9b28d1a7 * mem[mem[(32 * arg2) + 128] + 128] * y / 100 * 10^6) - (x * mem[mem[(32 * arg2) + 128] + 128] * y / 100 * 10^6) / 8760 * 24 * 3600)
            w = _154 + sub_9b28d1a7 + (x - _154 / sub_9b28d1a7 * sub_9b28d1a7)
            x = _154 + sub_9b28d1a7 + (x - _154 / sub_9b28d1a7 * sub_9b28d1a7)
            y = (100 * 10^6 * y) - (sub_93520a80 * y) / 100 * 10^6
            continue 
        if mem[mem[(32 * arg2) + 128] + 160] > 2:
            revert with 0, 33
        if idx >= stor8[mem[mem[(32 * arg2) + 128] + 160]].field_0:
            revert with 0, 50
        if 100 * 10^6 < stor8[mem[mem[(32 * arg2) + 128] + 160]][idx].field_256 - 0x8000000000000000000000000000000000000000000000000000000000000000 and stor8[mem[mem[(32 * arg2) + 128] + 160]][idx].field_256 >= 0:
            revert with 0, 17
        if stor8[mem[mem[(32 * arg2) + 128] + 160]][idx].field_256 < 0 and 100 * 10^6 > stor8[mem[mem[(32 * arg2) + 128] + 160]][idx].field_256 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
            revert with 0, 17
        if y and -stor8[mem[mem[(32 * arg2) + 128] + 160]][idx].field_256 + 100 * 10^6 > -1 / y:
            revert with 0, 17
        if idx == -1:
            revert with 0, 17
        if mem[mem[(32 * arg2) + 128] + 160] > 2:
            revert with 0, 33
        mem[0] = mem[mem[(32 * arg2) + 128] + 160]
        mem[32] = 8
        idx = idx + 1
        s = stor8[mem[mem[(32 * arg2) + 128] + 160]][idx].field_0 - _154 / sub_9b28d1a7 != x - _154 / sub_9b28d1a7
        t = (_154 * mem[mem[(32 * arg2) + 128] + 128] * y / 100 * 10^6) + (sub_9b28d1a7 * mem[mem[(32 * arg2) + 128] + 128] * y / 100 * 10^6) + (x - _154 / sub_9b28d1a7 * sub_9b28d1a7 * mem[mem[(32 * arg2) + 128] + 128] * y / 100 * 10^6) - (x * mem[mem[(32 * arg2) + 128] + 128] * y / 100 * 10^6) / 8760 * 24 * 3600
        u = _154 + sub_9b28d1a7 + (x - _154 / sub_9b28d1a7 * sub_9b28d1a7) - x
        v = v + ((_154 * mem[mem[(32 * arg2) + 128] + 128] * y / 100 * 10^6) + (sub_9b28d1a7 * mem[mem[(32 * arg2) + 128] + 128] * y / 100 * 10^6) + (x - _154 / sub_9b28d1a7 * sub_9b28d1a7 * mem[mem[(32 * arg2) + 128] + 128] * y / 100 * 10^6) - (x * mem[mem[(32 * arg2) + 128] + 128] * y / 100 * 10^6) / 8760 * 24 * 3600)
        w = _154 + sub_9b28d1a7 + (x - _154 / sub_9b28d1a7 * sub_9b28d1a7)
        x = _154 + sub_9b28d1a7 + (x - _154 / sub_9b28d1a7 * sub_9b28d1a7)
        y = (100 * 10^6 * y) - (stor8[mem[mem[(32 * arg2) + 128] + 160]][idx].field_256 * y) / 100 * 10^6
        continue 
    z = s
    z = t
    z = u
    z = v
    a = w
    idx = x
    a = y
    while idx != block.timestamp:
        if idx < _154:
            revert with 0, 17
        if not sub_9b28d1a7:
            revert with 0, 18
        if block.timestamp < _154:
            revert with 0, 17
        if not sub_9b28d1a7:
            revert with 0, 18
        if block.timestamp - _154 / sub_9b28d1a7 == idx - _154 / sub_9b28d1a7:
            if block.timestamp < idx:
                revert with 0, 17
            if mem[mem[(32 * arg2) + 128] + 128] and a > -1 / mem[mem[(32 * arg2) + 128] + 128]:
                revert with 0, 17
            if mem[mem[(32 * arg2) + 128] + 128] * a / 100 * 10^6 and block.timestamp - idx > -1 / mem[mem[(32 * arg2) + 128] + 128] * a / 100 * 10^6:
                revert with 0, 17
            if z > !((block.timestamp * mem[mem[(32 * arg2) + 128] + 128] * a / 100 * 10^6) - (idx * mem[mem[(32 * arg2) + 128] + 128] * a / 100 * 10^6) / 8760 * 24 * 3600):
                revert with 0, 17
            if block.timestamp - _154 / sub_9b28d1a7 == idx - _154 / sub_9b28d1a7:
                z = block.timestamp - _154 / sub_9b28d1a7 != idx - _154 / sub_9b28d1a7
                z = (block.timestamp * mem[mem[(32 * arg2) + 128] + 128] * a / 100 * 10^6) - (idx * mem[mem[(32 * arg2) + 128] + 128] * a / 100 * 10^6) / 8760 * 24 * 3600
                z = block.timestamp - idx
                z = z + ((block.timestamp * mem[mem[(32 * arg2) + 128] + 128] * a / 100 * 10^6) - (idx * mem[mem[(32 * arg2) + 128] + 128] * a / 100 * 10^6) / 8760 * 24 * 3600)
                a = block.timestamp
                idx = block.timestamp
                a = a
                continue 
            if 100 * 10^6 < sub_93520a80 - 0x8000000000000000000000000000000000000000000000000000000000000000 and sub_93520a80 >= 0:
                revert with 0, 17
            if sub_93520a80 < 0 and 100 * 10^6 > sub_93520a80 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                revert with 0, 17
            if a and -sub_93520a80 + 100 * 10^6 > -1 / a:
                revert with 0, 17
            z = block.timestamp - _154 / sub_9b28d1a7 != idx - _154 / sub_9b28d1a7
            z = (block.timestamp * mem[mem[(32 * arg2) + 128] + 128] * a / 100 * 10^6) - (idx * mem[mem[(32 * arg2) + 128] + 128] * a / 100 * 10^6) / 8760 * 24 * 3600
            z = block.timestamp - idx
            z = z + ((block.timestamp * mem[mem[(32 * arg2) + 128] + 128] * a / 100 * 10^6) - (idx * mem[mem[(32 * arg2) + 128] + 128] * a / 100 * 10^6) / 8760 * 24 * 3600)
            a = block.timestamp
            idx = block.timestamp
            a = (100 * 10^6 * a) - (sub_93520a80 * a) / 100 * 10^6
            continue 
        if idx < _154:
            revert with 0, 17
        if not sub_9b28d1a7:
            revert with 0, 18
        if 1 > !(idx - _154 / sub_9b28d1a7):
            revert with 0, 17
        if sub_9b28d1a7 and (idx - _154 / sub_9b28d1a7) + 1 > -1 / sub_9b28d1a7:
            revert with 0, 17
        if _154 > !(sub_9b28d1a7 + (idx - _154 / sub_9b28d1a7 * sub_9b28d1a7)):
            revert with 0, 17
        if _154 + sub_9b28d1a7 + (idx - _154 / sub_9b28d1a7 * sub_9b28d1a7) < idx:
            revert with 0, 17
        if mem[mem[(32 * arg2) + 128] + 128] and a > -1 / mem[mem[(32 * arg2) + 128] + 128]:
            revert with 0, 17
        if mem[mem[(32 * arg2) + 128] + 128] * a / 100 * 10^6 and _154 + sub_9b28d1a7 + (idx - _154 / sub_9b28d1a7 * sub_9b28d1a7) - idx > -1 / mem[mem[(32 * arg2) + 128] + 128] * a / 100 * 10^6:
            revert with 0, 17
        if z > !((_154 * mem[mem[(32 * arg2) + 128] + 128] * a / 100 * 10^6) + (sub_9b28d1a7 * mem[mem[(32 * arg2) + 128] + 128] * a / 100 * 10^6) + (idx - _154 / sub_9b28d1a7 * sub_9b28d1a7 * mem[mem[(32 * arg2) + 128] + 128] * a / 100 * 10^6) - (idx * mem[mem[(32 * arg2) + 128] + 128] * a / 100 * 10^6) / 8760 * 24 * 3600):
            revert with 0, 17
        if block.timestamp - _154 / sub_9b28d1a7 == idx - _154 / sub_9b28d1a7:
            z = block.timestamp - _154 / sub_9b28d1a7 != idx - _154 / sub_9b28d1a7
            z = (_154 * mem[mem[(32 * arg2) + 128] + 128] * a / 100 * 10^6) + (sub_9b28d1a7 * mem[mem[(32 * arg2) + 128] + 128] * a / 100 * 10^6) + (idx - _154 / sub_9b28d1a7 * sub_9b28d1a7 * mem[mem[(32 * arg2) + 128] + 128] * a / 100 * 10^6) - (idx * mem[mem[(32 * arg2) + 128] + 128] * a / 100 * 10^6) / 8760 * 24 * 3600
            z = _154 + sub_9b28d1a7 + (idx - _154 / sub_9b28d1a7 * sub_9b28d1a7) - idx
            z = z + ((_154 * mem[mem[(32 * arg2) + 128] + 128] * a / 100 * 10^6) + (sub_9b28d1a7 * mem[mem[(32 * arg2) + 128] + 128] * a / 100 * 10^6) + (idx - _154 / sub_9b28d1a7 * sub_9b28d1a7 * mem[mem[(32 * arg2) + 128] + 128] * a / 100 * 10^6) - (idx * mem[mem[(32 * arg2) + 128] + 128] * a / 100 * 10^6) / 8760 * 24 * 3600)
            a = _154 + sub_9b28d1a7 + (idx - _154 / sub_9b28d1a7 * sub_9b28d1a7)
            idx = _154 + sub_9b28d1a7 + (idx - _154 / sub_9b28d1a7 * sub_9b28d1a7)
            a = a
            continue 
        if 100 * 10^6 < sub_93520a80 - 0x8000000000000000000000000000000000000000000000000000000000000000 and sub_93520a80 >= 0:
            revert with 0, 17
        if sub_93520a80 < 0 and 100 * 10^6 > sub_93520a80 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
            revert with 0, 17
        if a and -sub_93520a80 + 100 * 10^6 > -1 / a:
            revert with 0, 17
        z = block.timestamp - _154 / sub_9b28d1a7 != idx - _154 / sub_9b28d1a7
        z = (_154 * mem[mem[(32 * arg2) + 128] + 128] * a / 100 * 10^6) + (sub_9b28d1a7 * mem[mem[(32 * arg2) + 128] + 128] * a / 100 * 10^6) + (idx - _154 / sub_9b28d1a7 * sub_9b28d1a7 * mem[mem[(32 * arg2) + 128] + 128] * a / 100 * 10^6) - (idx * mem[mem[(32 * arg2) + 128] + 128] * a / 100 * 10^6) / 8760 * 24 * 3600
        z = _154 + sub_9b28d1a7 + (idx - _154 / sub_9b28d1a7 * sub_9b28d1a7) - idx
        z = z + ((_154 * mem[mem[(32 * arg2) + 128] + 128] * a / 100 * 10^6) + (sub_9b28d1a7 * mem[mem[(32 * arg2) + 128] + 128] * a / 100 * 10^6) + (idx - _154 / sub_9b28d1a7 * sub_9b28d1a7 * mem[mem[(32 * arg2) + 128] + 128] * a / 100 * 10^6) - (idx * mem[mem[(32 * arg2) + 128] + 128] * a / 100 * 10^6) / 8760 * 24 * 3600)
        a = _154 + sub_9b28d1a7 + (idx - _154 / sub_9b28d1a7 * sub_9b28d1a7)
        idx = _154 + sub_9b28d1a7 + (idx - _154 / sub_9b28d1a7 * sub_9b28d1a7)
        a = (100 * 10^6 * a) - (sub_93520a80 * a) / 100 * 10^6
        continue 
    return z
}

function _getRewardAmountOf(address arg1) payable {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    if sub_44fea1b9[address(arg1)]:
        mem[0] = arg1
        mem[32] = 5
        mem[64] = (32 * stor5[address(arg1)].field_0) + 128
        mem[96] = stor5[address(arg1)].field_0
        s = 128
        idx = 0
        while idx < stor5[address(arg1)].field_0:
            mem[0] = sha3(address(arg1), 5)
            _46 = mem[64]
            mem[64] = mem[64] + 192
            if bool(stor5[address(arg1)][idx].field_0):
                if bool(stor5[address(arg1)][idx].field_0) == uint255(stor5[address(arg1)][idx].field_0) * 0.5 < 32:
                    revert with 0, 34
                _53 = mem[64]
                mem[64] = mem[64] + ceil32(uint255(stor5[address(arg1)][idx].field_0) * 0.5) + 32
                mem[_53] = uint255(stor5[address(arg1)][idx].field_0) * 0.5
                if bool(stor5[address(arg1)][idx].field_0):
                    if bool(stor5[address(arg1)][idx].field_0) == uint255(stor5[address(arg1)][idx].field_0) * 0.5 < 32:
                        revert with 0, 34
                    if Mask(256, -1, stor5[address(arg1)][idx].field_0):
                        if 31 >= uint255(stor5[address(arg1)][idx].field_0) * 0.5:
                            mem[_53 + 32] = 256 * Mask(248, 0, stor5[address(arg1)][idx].field_8)
                        else:
                            mem[0] = (6 * idx) + sha3(sha3(address(arg1), 5))
                            mem[_53 + 32] = stor5[address(arg1)][idx].field_0
                            t = _53 + 32
                            u = sha3(mem[0])
                            while _53 + (uint255(stor5[address(arg1)][idx].field_0) * 0.5) > t:
                                mem[t + 32] = uint256(stor1[u])
                                t = t + 32
                                u = u + 1
                                continue 
                else:
                    if bool(stor5[address(arg1)][idx].field_0) == stor5[address(arg1)][idx].field_1 % 128 < 32:
                        revert with 0, 34
                    if stor5[address(arg1)][idx].field_1 % 128:
                        if 31 >= stor5[address(arg1)][idx].field_1 % 128:
                            mem[_53 + 32] = 256 * Mask(248, 0, stor5[address(arg1)][idx].field_8)
                        else:
                            mem[0] = (6 * idx) + sha3(sha3(address(arg1), 5))
                            mem[_53 + 32] = stor5[address(arg1)][idx].field_0
                            t = _53 + 32
                            u = sha3(mem[0])
                            while _53 + stor5[address(arg1)][idx].field_1 % 128 > t:
                                mem[t + 32] = uint256(stor1[u])
                                t = t + 32
                                u = u + 1
                                continue 
                mem[_46] = _53
            else:
                if bool(stor5[address(arg1)][idx].field_0) == stor5[address(arg1)][idx].field_1 % 128 < 32:
                    revert with 0, 34
                _54 = mem[64]
                mem[64] = mem[64] + ceil32(stor5[address(arg1)][idx].field_1 % 128) + 32
                mem[_54] = stor5[address(arg1)][idx].field_1 % 128
                if bool(stor5[address(arg1)][idx].field_0):
                    if bool(stor5[address(arg1)][idx].field_0) == uint255(stor5[address(arg1)][idx].field_0) * 0.5 < 32:
                        revert with 0, 34
                    if Mask(256, -1, stor5[address(arg1)][idx].field_0):
                        if 31 >= uint255(stor5[address(arg1)][idx].field_0) * 0.5:
                            mem[_54 + 32] = 256 * Mask(248, 0, stor5[address(arg1)][idx].field_8)
                        else:
                            mem[0] = (6 * idx) + sha3(sha3(address(arg1), 5))
                            mem[_54 + 32] = stor5[address(arg1)][idx].field_0
                            t = _54 + 32
                            u = sha3(mem[0])
                            while _54 + (uint255(stor5[address(arg1)][idx].field_0) * 0.5) > t:
                                mem[t + 32] = uint256(stor1[u])
                                t = t + 32
                                u = u + 1
                                continue 
                else:
                    if bool(stor5[address(arg1)][idx].field_0) == stor5[address(arg1)][idx].field_1 % 128 < 32:
                        revert with 0, 34
                    if stor5[address(arg1)][idx].field_1 % 128:
                        if 31 >= stor5[address(arg1)][idx].field_1 % 128:
                            mem[_54 + 32] = 256 * Mask(248, 0, stor5[address(arg1)][idx].field_8)
                        else:
                            mem[0] = (6 * idx) + sha3(sha3(address(arg1), 5))
                            mem[_54 + 32] = stor5[address(arg1)][idx].field_0
                            t = _54 + 32
                            u = sha3(mem[0])
                            while _54 + stor5[address(arg1)][idx].field_1 % 128 > t:
                                mem[t + 32] = uint256(stor1[u])
                                t = t + 32
                                u = u + 1
                                continue 
                mem[_46] = _54
            mem[_46 + 32] = stor5[address(arg1)][idx].field_256
            mem[_46 + 64] = stor5[address(arg1)][idx].field_512
            mem[_46 + 96] = stor5[address(arg1)][idx].field_768
            mem[_46 + 128] = stor5[address(arg1)][idx].field_1024
            if uint8(stor5[address(arg1)][idx].field_1280) > 2:
                revert with 0, 33
            mem[_46 + 160] = uint8(stor5[address(arg1)][idx].field_1280)
            mem[s] = _46
            s = s + 32
            idx = idx + 1
            continue 
        idx = 0
        while idx < mem[96]:
            if idx >= mem[96]:
                revert with 0, 50
            _87 = mem[mem[(32 * idx) + 128] + 64]
            if mem[mem[(32 * idx) + 128] + 160] > 2:
                revert with 0, 33
            mem[0] = mem[mem[(32 * idx) + 128] + 160]
            mem[32] = 8
            s = 0
            while stor8[mem[mem[(32 * idx) + 128] + 160]].field_0 > s:
                if s > !stor8[mem[mem[(32 * idx) + 128] + 160]].field_0:
                    revert with 0, 17
                if mem[mem[(32 * idx) + 128] + 160] > 2:
                    revert with 0, 33
                mem[32] = 8
                if s + stor8[mem[mem[(32 * idx) + 128] + 160]].field_0 / 2 >= stor8[mem[mem[(32 * idx) + 128] + 160]].field_0:
                    revert with 0, 50
                mem[0] = sha3(mem[mem[(32 * idx) + 128] + 160], 8)
                if stor8[mem[mem[(32 * idx) + 128] + 160]][Mask(255, 1, s + stor8[mem[mem[(32 * idx) + 128] + 160]].field_0)].field_0 >= _87:
                    s = s
                    continue 
                if 1 > !(s + stor8[mem[mem[(32 * idx) + 128] + 160]].field_0 / 2):
                    revert with 0, 17
                s = (s + stor8[mem[mem[(32 * idx) + 128] + 160]].field_0 / 2) + 1
                continue 
            _112 = mem[mem[(32 * idx) + 128] + 64]
            _113 = mem[mem[(32 * idx) + 128] + 32]
            if mem[mem[(32 * idx) + 128] + 160] > 2:
                revert with 0, 33
            s = 0
            while stor8[mem[mem[(32 * idx) + 128] + 160]].field_0 > s:
                if s > !stor8[mem[mem[(32 * idx) + 128] + 160]].field_0:
                    revert with 0, 17
                if mem[mem[(32 * idx) + 128] + 160] > 2:
                    revert with 0, 33
                mem[32] = 8
                if s + stor8[mem[mem[(32 * idx) + 128] + 160]].field_0 / 2 >= stor8[mem[mem[(32 * idx) + 128] + 160]].field_0:
                    revert with 0, 50
                mem[0] = sha3(mem[mem[(32 * idx) + 128] + 160], 8)
                if stor8[mem[mem[(32 * idx) + 128] + 160]][Mask(255, 1, s + stor8[mem[mem[(32 * idx) + 128] + 160]].field_0)].field_0 >= _113:
                    s = s
                    continue 
                if 1 > !(s + stor8[mem[mem[(32 * idx) + 128] + 160]].field_0 / 2):
                    revert with 0, 17
                s = (s + stor8[mem[mem[(32 * idx) + 128] + 160]].field_0 / 2) + 1
                continue 
            if mem[mem[(32 * idx) + 128] + 160] > 2:
                revert with 0, 33
            mem[0] = mem[mem[(32 * idx) + 128] + 160]
            mem[32] = 8
            t = 0
            while stor8[mem[mem[(32 * idx) + 128] + 160]].field_0 > t:
                if t > !stor8[mem[mem[(32 * idx) + 128] + 160]].field_0:
                    revert with 0, 17
                if mem[mem[(32 * idx) + 128] + 160] > 2:
                    revert with 0, 33
                mem[32] = 8
                if t + stor8[mem[mem[(32 * idx) + 128] + 160]].field_0 / 2 >= stor8[mem[mem[(32 * idx) + 128] + 160]].field_0:
                    revert with 0, 50
                mem[0] = sha3(mem[mem[(32 * idx) + 128] + 160], 8)
                if stor8[mem[mem[(32 * idx) + 128] + 160]][Mask(255, 1, t + stor8[mem[mem[(32 * idx) + 128] + 160]].field_0)].field_0 >= _112:
                    t = t
                    continue 
                if 1 > !(t + stor8[mem[mem[(32 * idx) + 128] + 160]].field_0 / 2):
                    revert with 0, 17
                t = (t + stor8[mem[mem[(32 * idx) + 128] + 160]].field_0 / 2) + 1
                continue 
            u = s
            v = mem[mem[(32 * idx) + 128] + 96]
            while u < t:
                if mem[mem[(32 * idx) + 128] + 160] > 2:
                    revert with 0, 33
                mem[32] = 8
                if u >= stor8[mem[mem[(32 * idx) + 128] + 160]].field_0:
                    revert with 0, 50
                mem[0] = sha3(mem[mem[(32 * idx) + 128] + 160], 8)
                if 100 * 10^6 < stor8[mem[mem[(32 * idx) + 128] + 160]][u].field_256 - 0x8000000000000000000000000000000000000000000000000000000000000000 and stor8[mem[mem[(32 * idx) + 128] + 160]][u].field_256 >= 0:
                    revert with 0, 17
                if stor8[mem[mem[(32 * idx) + 128] + 160]][u].field_256 < 0 and 100 * 10^6 > stor8[mem[mem[(32 * idx) + 128] + 160]][u].field_256 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                    revert with 0, 17
                if v and -stor8[mem[mem[(32 * idx) + 128] + 160]][u].field_256 + 100 * 10^6 > -1 / v:
                    revert with 0, 17
                if u == -1:
                    revert with 0, 17
                u = u + 1
                v = (100 * 10^6 * v) - (stor8[mem[mem[(32 * idx) + 128] + 160]][u].field_256 * v) / 100 * 10^6
                continue 
            if _112 < _113:
                revert with 0, 17
            if not sub_9b28d1a7:
                revert with 0, 18
            s = _112 - _113 / sub_9b28d1a7
            t = v
            while s:
                if not s:
                    revert with 0, 17
                if 100 * 10^6 < sub_93520a80 - 0x8000000000000000000000000000000000000000000000000000000000000000 and sub_93520a80 >= 0:
                    revert with 0, 17
                if sub_93520a80 < 0 and 100 * 10^6 > sub_93520a80 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                    revert with 0, 17
                if t and -sub_93520a80 + 100 * 10^6 > -1 / t:
                    revert with 0, 17
                s = s - 1
                t = (100 * 10^6 * t) - (sub_93520a80 * t) / 100 * 10^6
                continue 
            _174 = mem[mem[(32 * idx) + 128] + 32]
            if mem[mem[(32 * idx) + 128] + 160] > 2:
                revert with 0, 33
            mem[0] = mem[mem[(32 * idx) + 128] + 160]
            mem[32] = 8
            s = var137001
            t = var137002
            u = var137004
            v = var137005
            w = var137006
            x = var137007
            y = var137008
            z = var137009
            while s < stor8[mem[mem[(32 * idx) + 128] + 160]].field_0:
                if mem[mem[(32 * idx) + 128] + 160] > 2:
                    revert with 0, 33
                if s >= stor8[mem[mem[(32 * idx) + 128] + 160]].field_0:
                    revert with 0, 50
                if y < _174:
                    revert with 0, 17
                if not sub_9b28d1a7:
                    revert with 0, 18
                if stor8[mem[mem[(32 * idx) + 128] + 160]][s].field_0 < _174:
                    revert with 0, 17
                if not sub_9b28d1a7:
                    revert with 0, 18
                if stor8[mem[mem[(32 * idx) + 128] + 160]][s].field_0 - _174 / sub_9b28d1a7 == y - _174 / sub_9b28d1a7:
                    if stor8[mem[mem[(32 * idx) + 128] + 160]][s].field_0 < y:
                        revert with 0, 17
                    if mem[mem[(32 * idx) + 128] + 128] and z > -1 / mem[mem[(32 * idx) + 128] + 128]:
                        revert with 0, 17
                    if mem[mem[(32 * idx) + 128] + 128] * z / 100 * 10^6 and stor8[mem[mem[(32 * idx) + 128] + 160]][s].field_0 - y > -1 / mem[mem[(32 * idx) + 128] + 128] * z / 100 * 10^6:
                        revert with 0, 17
                    if w > !((stor8[mem[mem[(32 * idx) + 128] + 160]][s].field_0 * mem[mem[(32 * idx) + 128] + 128] * z / 100 * 10^6) - (y * mem[mem[(32 * idx) + 128] + 128] * z / 100 * 10^6) / 8760 * 24 * 3600):
                        revert with 0, 17
                    if stor8[mem[mem[(32 * idx) + 128] + 160]][s].field_0 - _174 / sub_9b28d1a7 != y - _174 / sub_9b28d1a7:
                        if 100 * 10^6 < sub_93520a80 - 0x8000000000000000000000000000000000000000000000000000000000000000 and sub_93520a80 >= 0:
                            revert with 0, 17
                        if sub_93520a80 < 0 and 100 * 10^6 > sub_93520a80 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                            revert with 0, 17
                        if z and -sub_93520a80 + 100 * 10^6 > -1 / z:
                            revert with 0, 17
                        if not s:
                            revert with 0, 17
                        if s - 1 == -1:
                            revert with 0, 17
                        if mem[mem[(32 * idx) + 128] + 160] > 2:
                            revert with 0, 33
                        mem[0] = mem[mem[(32 * idx) + 128] + 160]
                        mem[32] = 8
                        s = s
                        t = stor8[mem[mem[(32 * idx) + 128] + 160]][s].field_0 - _174 / sub_9b28d1a7 != y - _174 / sub_9b28d1a7
                        u = (stor8[mem[mem[(32 * idx) + 128] + 160]][s].field_0 * mem[mem[(32 * idx) + 128] + 128] * z / 100 * 10^6) - (y * mem[mem[(32 * idx) + 128] + 128] * z / 100 * 10^6) / 8760 * 24 * 3600
                        v = stor8[mem[mem[(32 * idx) + 128] + 160]][s].field_0 - y
                        w = w + ((stor8[mem[mem[(32 * idx) + 128] + 160]][s].field_0 * mem[mem[(32 * idx) + 128] + 128] * z / 100 * 10^6) - (y * mem[mem[(32 * idx) + 128] + 128] * z / 100 * 10^6) / 8760 * 24 * 3600)
                        x = stor8[mem[mem[(32 * idx) + 128] + 160]][s].field_0
                        y = stor8[mem[mem[(32 * idx) + 128] + 160]][s].field_0
                        z = (100 * 10^6 * z) - (sub_93520a80 * z) / 100 * 10^6
                        continue 
                    if mem[mem[(32 * idx) + 128] + 160] > 2:
                        revert with 0, 33
                    if s >= stor8[mem[mem[(32 * idx) + 128] + 160]].field_0:
                        revert with 0, 50
                    if 100 * 10^6 < stor8[mem[mem[(32 * idx) + 128] + 160]][s].field_256 - 0x8000000000000000000000000000000000000000000000000000000000000000 and stor8[mem[mem[(32 * idx) + 128] + 160]][s].field_256 >= 0:
                        revert with 0, 17
                    if stor8[mem[mem[(32 * idx) + 128] + 160]][s].field_256 < 0 and 100 * 10^6 > stor8[mem[mem[(32 * idx) + 128] + 160]][s].field_256 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                        revert with 0, 17
                    if z and -stor8[mem[mem[(32 * idx) + 128] + 160]][s].field_256 + 100 * 10^6 > -1 / z:
                        revert with 0, 17
                    if s == -1:
                        revert with 0, 17
                    if mem[mem[(32 * idx) + 128] + 160] > 2:
                        revert with 0, 33
                    mem[0] = mem[mem[(32 * idx) + 128] + 160]
                    mem[32] = 8
                    s = s + 1
                    t = stor8[mem[mem[(32 * idx) + 128] + 160]][s].field_0 - _174 / sub_9b28d1a7 != y - _174 / sub_9b28d1a7
                    u = (stor8[mem[mem[(32 * idx) + 128] + 160]][s].field_0 * mem[mem[(32 * idx) + 128] + 128] * z / 100 * 10^6) - (y * mem[mem[(32 * idx) + 128] + 128] * z / 100 * 10^6) / 8760 * 24 * 3600
                    v = stor8[mem[mem[(32 * idx) + 128] + 160]][s].field_0 - y
                    w = w + ((stor8[mem[mem[(32 * idx) + 128] + 160]][s].field_0 * mem[mem[(32 * idx) + 128] + 128] * z / 100 * 10^6) - (y * mem[mem[(32 * idx) + 128] + 128] * z / 100 * 10^6) / 8760 * 24 * 3600)
                    x = stor8[mem[mem[(32 * idx) + 128] + 160]][s].field_0
                    y = stor8[mem[mem[(32 * idx) + 128] + 160]][s].field_0
                    z = (100 * 10^6 * z) - (stor8[mem[mem[(32 * idx) + 128] + 160]][s].field_256 * z) / 100 * 10^6
                    continue 
                if y < _174:
                    revert with 0, 17
                if not sub_9b28d1a7:
                    revert with 0, 18
                if 1 > !(y - _174 / sub_9b28d1a7):
                    revert with 0, 17
                if sub_9b28d1a7 and (y - _174 / sub_9b28d1a7) + 1 > -1 / sub_9b28d1a7:
                    revert with 0, 17
                if _174 > !(sub_9b28d1a7 + (y - _174 / sub_9b28d1a7 * sub_9b28d1a7)):
                    revert with 0, 17
                if _174 + sub_9b28d1a7 + (y - _174 / sub_9b28d1a7 * sub_9b28d1a7) < y:
                    revert with 0, 17
                if mem[mem[(32 * idx) + 128] + 128] and z > -1 / mem[mem[(32 * idx) + 128] + 128]:
                    revert with 0, 17
                if mem[mem[(32 * idx) + 128] + 128] * z / 100 * 10^6 and _174 + sub_9b28d1a7 + (y - _174 / sub_9b28d1a7 * sub_9b28d1a7) - y > -1 / mem[mem[(32 * idx) + 128] + 128] * z / 100 * 10^6:
                    revert with 0, 17
                if w > !((_174 * mem[mem[(32 * idx) + 128] + 128] * z / 100 * 10^6) + (sub_9b28d1a7 * mem[mem[(32 * idx) + 128] + 128] * z / 100 * 10^6) + (y - _174 / sub_9b28d1a7 * sub_9b28d1a7 * mem[mem[(32 * idx) + 128] + 128] * z / 100 * 10^6) - (y * mem[mem[(32 * idx) + 128] + 128] * z / 100 * 10^6) / 8760 * 24 * 3600):
                    revert with 0, 17
                if stor8[mem[mem[(32 * idx) + 128] + 160]][s].field_0 - _174 / sub_9b28d1a7 != y - _174 / sub_9b28d1a7:
                    if 100 * 10^6 < sub_93520a80 - 0x8000000000000000000000000000000000000000000000000000000000000000 and sub_93520a80 >= 0:
                        revert with 0, 17
                    if sub_93520a80 < 0 and 100 * 10^6 > sub_93520a80 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                        revert with 0, 17
                    if z and -sub_93520a80 + 100 * 10^6 > -1 / z:
                        revert with 0, 17
                    if not s:
                        revert with 0, 17
                    if s - 1 == -1:
                        revert with 0, 17
                    if mem[mem[(32 * idx) + 128] + 160] > 2:
                        revert with 0, 33
                    mem[0] = mem[mem[(32 * idx) + 128] + 160]
                    mem[32] = 8
                    s = s
                    t = stor8[mem[mem[(32 * idx) + 128] + 160]][s].field_0 - _174 / sub_9b28d1a7 != y - _174 / sub_9b28d1a7
                    u = (_174 * mem[mem[(32 * idx) + 128] + 128] * z / 100 * 10^6) + (sub_9b28d1a7 * mem[mem[(32 * idx) + 128] + 128] * z / 100 * 10^6) + (y - _174 / sub_9b28d1a7 * sub_9b28d1a7 * mem[mem[(32 * idx) + 128] + 128] * z / 100 * 10^6) - (y * mem[mem[(32 * idx) + 128] + 128] * z / 100 * 10^6) / 8760 * 24 * 3600
                    v = _174 + sub_9b28d1a7 + (y - _174 / sub_9b28d1a7 * sub_9b28d1a7) - y
                    w = w + ((_174 * mem[mem[(32 * idx) + 128] + 128] * z / 100 * 10^6) + (sub_9b28d1a7 * mem[mem[(32 * idx) + 128] + 128] * z / 100 * 10^6) + (y - _174 / sub_9b28d1a7 * sub_9b28d1a7 * mem[mem[(32 * idx) + 128] + 128] * z / 100 * 10^6) - (y * mem[mem[(32 * idx) + 128] + 128] * z / 100 * 10^6) / 8760 * 24 * 3600)
                    x = _174 + sub_9b28d1a7 + (y - _174 / sub_9b28d1a7 * sub_9b28d1a7)
                    y = _174 + sub_9b28d1a7 + (y - _174 / sub_9b28d1a7 * sub_9b28d1a7)
                    z = (100 * 10^6 * z) - (sub_93520a80 * z) / 100 * 10^6
                    continue 
                if mem[mem[(32 * idx) + 128] + 160] > 2:
                    revert with 0, 33
                if s >= stor8[mem[mem[(32 * idx) + 128] + 160]].field_0:
                    revert with 0, 50
                if 100 * 10^6 < stor8[mem[mem[(32 * idx) + 128] + 160]][s].field_256 - 0x8000000000000000000000000000000000000000000000000000000000000000 and stor8[mem[mem[(32 * idx) + 128] + 160]][s].field_256 >= 0:
                    revert with 0, 17
                if stor8[mem[mem[(32 * idx) + 128] + 160]][s].field_256 < 0 and 100 * 10^6 > stor8[mem[mem[(32 * idx) + 128] + 160]][s].field_256 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                    revert with 0, 17
                if z and -stor8[mem[mem[(32 * idx) + 128] + 160]][s].field_256 + 100 * 10^6 > -1 / z:
                    revert with 0, 17
                if s == -1:
                    revert with 0, 17
                if mem[mem[(32 * idx) + 128] + 160] > 2:
                    revert with 0, 33
                mem[0] = mem[mem[(32 * idx) + 128] + 160]
                mem[32] = 8
                s = s + 1
                t = stor8[mem[mem[(32 * idx) + 128] + 160]][s].field_0 - _174 / sub_9b28d1a7 != y - _174 / sub_9b28d1a7
                u = (_174 * mem[mem[(32 * idx) + 128] + 128] * z / 100 * 10^6) + (sub_9b28d1a7 * mem[mem[(32 * idx) + 128] + 128] * z / 100 * 10^6) + (y - _174 / sub_9b28d1a7 * sub_9b28d1a7 * mem[mem[(32 * idx) + 128] + 128] * z / 100 * 10^6) - (y * mem[mem[(32 * idx) + 128] + 128] * z / 100 * 10^6) / 8760 * 24 * 3600
                v = _174 + sub_9b28d1a7 + (y - _174 / sub_9b28d1a7 * sub_9b28d1a7) - y
                w = w + ((_174 * mem[mem[(32 * idx) + 128] + 128] * z / 100 * 10^6) + (sub_9b28d1a7 * mem[mem[(32 * idx) + 128] + 128] * z / 100 * 10^6) + (y - _174 / sub_9b28d1a7 * sub_9b28d1a7 * mem[mem[(32 * idx) + 128] + 128] * z / 100 * 10^6) - (y * mem[mem[(32 * idx) + 128] + 128] * z / 100 * 10^6) / 8760 * 24 * 3600)
                x = _174 + sub_9b28d1a7 + (y - _174 / sub_9b28d1a7 * sub_9b28d1a7)
                y = _174 + sub_9b28d1a7 + (y - _174 / sub_9b28d1a7 * sub_9b28d1a7)
                z = (100 * 10^6 * z) - (stor8[mem[mem[(32 * idx) + 128] + 160]][s].field_256 * z) / 100 * 10^6
                continue 
            a = t
            a = u
            a = v
            a = w
            b = x
            s = y
            b = z
            while s != block.timestamp:
                if s < _174:
                    revert with 0, 17
                if not sub_9b28d1a7:
                    revert with 0, 18
                if block.timestamp < _174:
                    revert with 0, 17
                if not sub_9b28d1a7:
                    revert with 0, 18
                if block.timestamp - _174 / sub_9b28d1a7 == s - _174 / sub_9b28d1a7:
                    if block.timestamp < s:
                        revert with 0, 17
                    if mem[mem[(32 * idx) + 128] + 128] and b > -1 / mem[mem[(32 * idx) + 128] + 128]:
                        revert with 0, 17
                    if mem[mem[(32 * idx) + 128] + 128] * b / 100 * 10^6 and block.timestamp - s > -1 / mem[mem[(32 * idx) + 128] + 128] * b / 100 * 10^6:
                        revert with 0, 17
                    if a > !((block.timestamp * mem[mem[(32 * idx) + 128] + 128] * b / 100 * 10^6) - (s * mem[mem[(32 * idx) + 128] + 128] * b / 100 * 10^6) / 8760 * 24 * 3600):
                        revert with 0, 17
                    if block.timestamp - _174 / sub_9b28d1a7 == s - _174 / sub_9b28d1a7:
                        a = block.timestamp - _174 / sub_9b28d1a7 != s - _174 / sub_9b28d1a7
                        a = (block.timestamp * mem[mem[(32 * idx) + 128] + 128] * b / 100 * 10^6) - (s * mem[mem[(32 * idx) + 128] + 128] * b / 100 * 10^6) / 8760 * 24 * 3600
                        a = block.timestamp - s
                        a = a + ((block.timestamp * mem[mem[(32 * idx) + 128] + 128] * b / 100 * 10^6) - (s * mem[mem[(32 * idx) + 128] + 128] * b / 100 * 10^6) / 8760 * 24 * 3600)
                        b = block.timestamp
                        s = block.timestamp
                        b = b
                        continue 
                    if 100 * 10^6 < sub_93520a80 - 0x8000000000000000000000000000000000000000000000000000000000000000 and sub_93520a80 >= 0:
                        revert with 0, 17
                    if sub_93520a80 < 0 and 100 * 10^6 > sub_93520a80 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                        revert with 0, 17
                    if b and -sub_93520a80 + 100 * 10^6 > -1 / b:
                        revert with 0, 17
                    a = block.timestamp - _174 / sub_9b28d1a7 != s - _174 / sub_9b28d1a7
                    a = (block.timestamp * mem[mem[(32 * idx) + 128] + 128] * b / 100 * 10^6) - (s * mem[mem[(32 * idx) + 128] + 128] * b / 100 * 10^6) / 8760 * 24 * 3600
                    a = block.timestamp - s
                    a = a + ((block.timestamp * mem[mem[(32 * idx) + 128] + 128] * b / 100 * 10^6) - (s * mem[mem[(32 * idx) + 128] + 128] * b / 100 * 10^6) / 8760 * 24 * 3600)
                    b = block.timestamp
                    s = block.timestamp
                    b = (100 * 10^6 * b) - (sub_93520a80 * b) / 100 * 10^6
                    continue 
                if s < _174:
                    revert with 0, 17
                if not sub_9b28d1a7:
                    revert with 0, 18
                if 1 > !(s - _174 / sub_9b28d1a7):
                    revert with 0, 17
                if sub_9b28d1a7 and (s - _174 / sub_9b28d1a7) + 1 > -1 / sub_9b28d1a7:
                    revert with 0, 17
                if _174 > !(sub_9b28d1a7 + (s - _174 / sub_9b28d1a7 * sub_9b28d1a7)):
                    revert with 0, 17
                if _174 + sub_9b28d1a7 + (s - _174 / sub_9b28d1a7 * sub_9b28d1a7) < s:
                    revert with 0, 17
                if mem[mem[(32 * idx) + 128] + 128] and b > -1 / mem[mem[(32 * idx) + 128] + 128]:
                    revert with 0, 17
                if mem[mem[(32 * idx) + 128] + 128] * b / 100 * 10^6 and _174 + sub_9b28d1a7 + (s - _174 / sub_9b28d1a7 * sub_9b28d1a7) - s > -1 / mem[mem[(32 * idx) + 128] + 128] * b / 100 * 10^6:
                    revert with 0, 17
                if a > !((_174 * mem[mem[(32 * idx) + 128] + 128] * b / 100 * 10^6) + (sub_9b28d1a7 * mem[mem[(32 * idx) + 128] + 128] * b / 100 * 10^6) + (s - _174 / sub_9b28d1a7 * sub_9b28d1a7 * mem[mem[(32 * idx) + 128] + 128] * b / 100 * 10^6) - (s * mem[mem[(32 * idx) + 128] + 128] * b / 100 * 10^6) / 8760 * 24 * 3600):
                    revert with 0, 17
                if block.timestamp - _174 / sub_9b28d1a7 == s - _174 / sub_9b28d1a7:
                    a = block.timestamp - _174 / sub_9b28d1a7 != s - _174 / sub_9b28d1a7
                    a = (_174 * mem[mem[(32 * idx) + 128] + 128] * b / 100 * 10^6) + (sub_9b28d1a7 * mem[mem[(32 * idx) + 128] + 128] * b / 100 * 10^6) + (s - _174 / sub_9b28d1a7 * sub_9b28d1a7 * mem[mem[(32 * idx) + 128] + 128] * b / 100 * 10^6) - (s * mem[mem[(32 * idx) + 128] + 128] * b / 100 * 10^6) / 8760 * 24 * 3600
                    a = _174 + sub_9b28d1a7 + (s - _174 / sub_9b28d1a7 * sub_9b28d1a7) - s
                    a = a + ((_174 * mem[mem[(32 * idx) + 128] + 128] * b / 100 * 10^6) + (sub_9b28d1a7 * mem[mem[(32 * idx) + 128] + 128] * b / 100 * 10^6) + (s - _174 / sub_9b28d1a7 * sub_9b28d1a7 * mem[mem[(32 * idx) + 128] + 128] * b / 100 * 10^6) - (s * mem[mem[(32 * idx) + 128] + 128] * b / 100 * 10^6) / 8760 * 24 * 3600)
                    b = _174 + sub_9b28d1a7 + (s - _174 / sub_9b28d1a7 * sub_9b28d1a7)
                    s = _174 + sub_9b28d1a7 + (s - _174 / sub_9b28d1a7 * sub_9b28d1a7)
                    b = b
                    continue 
                if 100 * 10^6 < sub_93520a80 - 0x8000000000000000000000000000000000000000000000000000000000000000 and sub_93520a80 >= 0:
                    revert with 0, 17
                if sub_93520a80 < 0 and 100 * 10^6 > sub_93520a80 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                    revert with 0, 17
                if b and -sub_93520a80 + 100 * 10^6 > -1 / b:
                    revert with 0, 17
                a = block.timestamp - _174 / sub_9b28d1a7 != s - _174 / sub_9b28d1a7
                a = (_174 * mem[mem[(32 * idx) + 128] + 128] * b / 100 * 10^6) + (sub_9b28d1a7 * mem[mem[(32 * idx) + 128] + 128] * b / 100 * 10^6) + (s - _174 / sub_9b28d1a7 * sub_9b28d1a7 * mem[mem[(32 * idx) + 128] + 128] * b / 100 * 10^6) - (s * mem[mem[(32 * idx) + 128] + 128] * b / 100 * 10^6) / 8760 * 24 * 3600
                a = _174 + sub_9b28d1a7 + (s - _174 / sub_9b28d1a7 * sub_9b28d1a7) - s
                a = a + ((_174 * mem[mem[(32 * idx) + 128] + 128] * b / 100 * 10^6) + (sub_9b28d1a7 * mem[mem[(32 * idx) + 128] + 128] * b / 100 * 10^6) + (s - _174 / sub_9b28d1a7 * sub_9b28d1a7 * mem[mem[(32 * idx) + 128] + 128] * b / 100 * 10^6) - (s * mem[mem[(32 * idx) + 128] + 128] * b / 100 * 10^6) / 8760 * 24 * 3600)
                b = _174 + sub_9b28d1a7 + (s - _174 / sub_9b28d1a7 * sub_9b28d1a7)
                s = _174 + sub_9b28d1a7 + (s - _174 / sub_9b28d1a7 * sub_9b28d1a7)
                b = (100 * 10^6 * b) - (sub_93520a80 * b) / 100 * 10^6
                continue 
            if 0 > !a:
                revert with 0, 17
            if idx == -1:
                revert with 0, 17
            idx = idx + 1
            continue 
        return 0
    else:
        return 0
}

function sub_28cceb24(?) payable {
    require calldata.size - 4 >= 32
    require arg1 == address(arg1)
    if not sub_44fea1b9[address(arg1)]:
        return ''
    mem[0] = address(arg1)
    mem[32] = 5
    mem[64] = (32 * stor5[address(arg1)].field_0) + 128
    mem[96] = stor5[address(arg1)].field_0
    s = 128
    idx = 0
    while idx < stor5[address(arg1)].field_0:
        mem[0] = sha3(address(arg1), 5)
        _59 = mem[64]
        mem[64] = mem[64] + 192
        if bool(stor5[address(arg1)][idx].field_0):
            if bool(stor5[address(arg1)][idx].field_0) == uint255(stor5[address(arg1)][idx].field_0) * 0.5 < 32:
                revert with 0, 34
            _66 = mem[64]
            mem[64] = mem[64] + ceil32(uint255(stor5[address(arg1)][idx].field_0) * 0.5) + 32
            mem[_66] = uint255(stor5[address(arg1)][idx].field_0) * 0.5
            if bool(stor5[address(arg1)][idx].field_0):
                if bool(stor5[address(arg1)][idx].field_0) == uint255(stor5[address(arg1)][idx].field_0) * 0.5 < 32:
                    revert with 0, 34
                if Mask(256, -1, stor5[address(arg1)][idx].field_0):
                    if 31 >= uint255(stor5[address(arg1)][idx].field_0) * 0.5:
                        mem[_66 + 32] = 256 * Mask(248, 0, stor5[address(arg1)][idx].field_8)
                    else:
                        mem[0] = (6 * idx) + sha3(sha3(address(arg1), 5))
                        mem[_66 + 32] = stor5[address(arg1)][idx].field_0
                        t = _66 + 32
                        u = sha3(mem[0])
                        while _66 + (uint255(stor5[address(arg1)][idx].field_0) * 0.5) > t:
                            mem[t + 32] = uint256(stor1[u])
                            t = t + 32
                            u = u + 1
                            continue 
            else:
                if bool(stor5[address(arg1)][idx].field_0) == stor5[address(arg1)][idx].field_1 % 128 < 32:
                    revert with 0, 34
                if stor5[address(arg1)][idx].field_1 % 128:
                    if 31 >= stor5[address(arg1)][idx].field_1 % 128:
                        mem[_66 + 32] = 256 * Mask(248, 0, stor5[address(arg1)][idx].field_8)
                    else:
                        mem[0] = (6 * idx) + sha3(sha3(address(arg1), 5))
                        mem[_66 + 32] = stor5[address(arg1)][idx].field_0
                        t = _66 + 32
                        u = sha3(mem[0])
                        while _66 + stor5[address(arg1)][idx].field_1 % 128 > t:
                            mem[t + 32] = uint256(stor1[u])
                            t = t + 32
                            u = u + 1
                            continue 
            mem[_59] = _66
        else:
            if bool(stor5[address(arg1)][idx].field_0) == stor5[address(arg1)][idx].field_1 % 128 < 32:
                revert with 0, 34
            _68 = mem[64]
            mem[64] = mem[64] + ceil32(stor5[address(arg1)][idx].field_1 % 128) + 32
            mem[_68] = stor5[address(arg1)][idx].field_1 % 128
            if bool(stor5[address(arg1)][idx].field_0):
                if bool(stor5[address(arg1)][idx].field_0) == uint255(stor5[address(arg1)][idx].field_0) * 0.5 < 32:
                    revert with 0, 34
                if Mask(256, -1, stor5[address(arg1)][idx].field_0):
                    if 31 >= uint255(stor5[address(arg1)][idx].field_0) * 0.5:
                        mem[_68 + 32] = 256 * Mask(248, 0, stor5[address(arg1)][idx].field_8)
                    else:
                        mem[0] = (6 * idx) + sha3(sha3(address(arg1), 5))
                        mem[_68 + 32] = stor5[address(arg1)][idx].field_0
                        t = _68 + 32
                        u = sha3(mem[0])
                        while _68 + (uint255(stor5[address(arg1)][idx].field_0) * 0.5) > t:
                            mem[t + 32] = uint256(stor1[u])
                            t = t + 32
                            u = u + 1
                            continue 
            else:
                if bool(stor5[address(arg1)][idx].field_0) == stor5[address(arg1)][idx].field_1 % 128 < 32:
                    revert with 0, 34
                if stor5[address(arg1)][idx].field_1 % 128:
                    if 31 >= stor5[address(arg1)][idx].field_1 % 128:
                        mem[_68 + 32] = 256 * Mask(248, 0, stor5[address(arg1)][idx].field_8)
                    else:
                        mem[0] = (6 * idx) + sha3(sha3(address(arg1), 5))
                        mem[_68 + 32] = stor5[address(arg1)][idx].field_0
                        t = _68 + 32
                        u = sha3(mem[0])
                        while _68 + stor5[address(arg1)][idx].field_1 % 128 > t:
                            mem[t + 32] = uint256(stor1[u])
                            t = t + 32
                            u = u + 1
                            continue 
            mem[_59] = _68
        mem[_59 + 32] = stor5[address(arg1)][idx].field_256
        mem[_59 + 64] = stor5[address(arg1)][idx].field_512
        mem[_59 + 96] = stor5[address(arg1)][idx].field_768
        mem[_59 + 128] = stor5[address(arg1)][idx].field_1024
        if uint8(stor5[address(arg1)][idx].field_1280) > 2:
            revert with 0, 33
        mem[_59 + 160] = uint8(stor5[address(arg1)][idx].field_1280)
        mem[s] = _59
        s = s + 32
        idx = idx + 1
        continue 
    _57 = mem[96]
    _61 = mem[64]
    mem[64] = mem[64] + 192
    mem[_61] = 96
    mem[_61 + 32] = 0
    mem[_61 + 64] = 0
    mem[_61 + 96] = 0
    mem[_61 + 128] = 0
    mem[_61 + 160] = 0
    if 0 >= mem[96]:
        revert with 0, 50
    _65 = mem[mem[128] + 32]
    if not mem[mem[128] + 32]:
        _69 = mem[64]
        mem[64] = mem[64] + 64
        mem[_69] = 1
        mem[_69 + 32] = 0x3000000000000000000000000000000000000000000000000000000000000000
        _70 = mem[64]
        mem[64] = mem[64] + 64
        mem[_70] = 1
        mem[_70 + 32] = 0x2300000000000000000000000000000000000000000000000000000000000000
        idx = 1
        s = _69
        t = _61
        while idx < _57:
            if idx >= mem[96]:
                revert with 0, 50
            _110 = mem[(32 * idx) + 128]
            _111 = mem[mem[(32 * idx) + 128] + 32]
            if not mem[mem[(32 * idx) + 128] + 32]:
                _113 = mem[64]
                mem[64] = mem[64] + 64
                mem[_113] = 1
                mem[_113 + 32] = 0x3000000000000000000000000000000000000000000000000000000000000000
                _114 = mem[64]
                _117 = mem[s]
                t = 0
                while t < _117:
                    mem[t + _114 + 32] = mem[t + s + 32]
                    t = t + 32
                    continue 
                if ceil32(_117) <= _117:
                    _213 = mem[_70]
                    s = 0
                    while s < _213:
                        mem[s + _114 + _117 + 32] = mem[s + _70 + 32]
                        s = s + 32
                        continue 
                    if ceil32(_213) <= _213:
                        _365 = mem[_113]
                        s = 0
                        while s < _365:
                            mem[s + _114 + _117 + _213 + 32] = mem[s + _113 + 32]
                            s = s + 32
                            continue 
                        if ceil32(_365) <= _365:
                            _501 = mem[64]
                            mem[mem[64]] = _365 + _114 + _117 + _213 - mem[64]
                            mem[64] = _365 + _114 + _117 + _213 + 32
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            s = _501
                            t = _110
                            continue 
                        mem[_114 + _117 + _213 + _365 + 32] = 0
                        _507 = mem[64]
                        mem[mem[64]] = _365 + _114 + _117 + _213 - mem[64]
                        mem[64] = _365 + _114 + _117 + _213 + 32
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        s = _507
                        t = _110
                        continue 
                    mem[_114 + _117 + _213 + 32] = 0
                    _369 = mem[_113]
                    s = 0
                    while s < _369:
                        mem[s + _114 + _117 + _213 + 32] = mem[s + _113 + 32]
                        s = s + 32
                        continue 
                    if ceil32(_369) <= _369:
                        _502 = mem[64]
                        mem[mem[64]] = _369 + _114 + _117 + _213 - mem[64]
                        mem[64] = _369 + _114 + _117 + _213 + 32
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        s = _502
                        t = _110
                        continue 
                    mem[_114 + _117 + _213 + _369 + 32] = 0
                    _508 = mem[64]
                    mem[mem[64]] = _369 + _114 + _117 + _213 - mem[64]
                    mem[64] = _369 + _114 + _117 + _213 + 32
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    s = _508
                    t = _110
                    continue 
                mem[_114 + _117 + 32] = 0
                _217 = mem[_70]
                s = 0
                while s < _217:
                    mem[s + _114 + _117 + 32] = mem[s + _70 + 32]
                    s = s + 32
                    continue 
                if ceil32(_217) <= _217:
                    _366 = mem[_113]
                    s = 0
                    while s < _366:
                        mem[s + _114 + _117 + _217 + 32] = mem[s + _113 + 32]
                        s = s + 32
                        continue 
                    if ceil32(_366) <= _366:
                        _503 = mem[64]
                        mem[mem[64]] = _366 + _114 + _117 + _217 - mem[64]
                        mem[64] = _366 + _114 + _117 + _217 + 32
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        s = _503
                        t = _110
                        continue 
                    mem[_114 + _117 + _217 + _366 + 32] = 0
                    _509 = mem[64]
                    mem[mem[64]] = _366 + _114 + _117 + _217 - mem[64]
                    mem[64] = _366 + _114 + _117 + _217 + 32
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    s = _509
                    t = _110
                    continue 
                mem[_114 + _117 + _217 + 32] = 0
                _370 = mem[_113]
                s = 0
                while s < _370:
                    mem[s + _114 + _117 + _217 + 32] = mem[s + _113 + 32]
                    s = s + 32
                    continue 
                if ceil32(_370) <= _370:
                    _504 = mem[64]
                    mem[mem[64]] = _370 + _114 + _117 + _217 - mem[64]
                    mem[64] = _370 + _114 + _117 + _217 + 32
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    s = _504
                    t = _110
                    continue 
                mem[_114 + _117 + _217 + _370 + 32] = 0
                _510 = mem[64]
                mem[mem[64]] = _370 + _114 + _117 + _217 - mem[64]
                mem[64] = _370 + _114 + _117 + _217 + 32
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                s = _510
                t = _110
                continue 
            u = 0
            t = mem[mem[(32 * idx) + 128] + 32]
            while t:
                if u == -1:
                    revert with 0, 17
                u = u + 1
                t = t / 10
                continue 
            if u > test266151307():
                revert with 0, 65
            _212 = mem[64]
            mem[mem[64]] = u
            mem[64] = mem[64] + ceil32(u) + 32
            if not u:
                v = u
                t = _111
                while t:
                    if v < 1:
                        revert with 0, 17
                    if t / 10 > 0x1999999999999999999999999999999999999999999999999999999999999999:
                        revert with 0, 17
                    if t < 10 * t / 10:
                        revert with 0, 17
                    if 48 > -uint8(t - (10 * t / 10)) + 255:
                        revert with 0, 17
                    if v - 1 >= mem[_212]:
                        revert with 0, 50
                    mem[v + _212 + 31 len 8] = Mask(8, -(('mask_shl', 8, 0, 245, ('add', 48, ('mask_shl', 8, 0, 0, ('add', ('var', 2), ('mul', -10, ('div', ('var', 2), 10)))))), 0) + 256, 0) << (('mask_shl', 8, 0, 245, ('add', 48, ('mask_shl', 8, 0, 0, ('add', ('var', 2), ('mul', -10, ('div', ('var', 2), 10)))))), 0) - 256
                    v = v - 1
                    t = t / 10
                    continue 
                _359 = mem[64]
                _363 = mem[s]
                t = 0
                while t < _363:
                    mem[t + _359 + 32] = mem[t + s + 32]
                    t = t + 32
                    continue 
                if ceil32(_363) <= _363:
                    _493 = mem[_70]
                    s = 0
                    while s < _493:
                        mem[s + _359 + _363 + 32] = mem[s + _70 + 32]
                        s = s + 32
                        continue 
                    if ceil32(_493) <= _493:
                        _699 = mem[_212]
                        s = 0
                        while s < _699:
                            mem[s + _359 + _363 + _493 + 32] = mem[s + _212 + 32]
                            s = s + 32
                            continue 
                        if ceil32(_699) <= _699:
                            _883 = mem[64]
                            mem[mem[64]] = _699 + _359 + _363 + _493 - mem[64]
                            mem[64] = _699 + _359 + _363 + _493 + 32
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            s = _883
                            t = _110
                            continue 
                        mem[_359 + _363 + _493 + _699 + 32] = 0
                        _899 = mem[64]
                        mem[mem[64]] = _699 + _359 + _363 + _493 - mem[64]
                        mem[64] = _699 + _359 + _363 + _493 + 32
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        s = _899
                        t = _110
                        continue 
                    mem[_359 + _363 + _493 + 32] = 0
                    _707 = mem[_212]
                    s = 0
                    while s < _707:
                        mem[s + _359 + _363 + _493 + 32] = mem[s + _212 + 32]
                        s = s + 32
                        continue 
                    if ceil32(_707) <= _707:
                        _884 = mem[64]
                        mem[mem[64]] = _707 + _359 + _363 + _493 - mem[64]
                        mem[64] = _707 + _359 + _363 + _493 + 32
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        s = _884
                        t = _110
                        continue 
                    mem[_359 + _363 + _493 + _707 + 32] = 0
                    _900 = mem[64]
                    mem[mem[64]] = _707 + _359 + _363 + _493 - mem[64]
                    mem[64] = _707 + _359 + _363 + _493 + 32
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    s = _900
                    t = _110
                    continue 
                mem[_359 + _363 + 32] = 0
                _499 = mem[_70]
                s = 0
                while s < _499:
                    mem[s + _359 + _363 + 32] = mem[s + _70 + 32]
                    s = s + 32
                    continue 
                if ceil32(_499) <= _499:
                    _700 = mem[_212]
                    s = 0
                    while s < _700:
                        mem[s + _359 + _363 + _499 + 32] = mem[s + _212 + 32]
                        s = s + 32
                        continue 
                    if ceil32(_700) <= _700:
                        _885 = mem[64]
                        mem[mem[64]] = _700 + _359 + _363 + _499 - mem[64]
                        mem[64] = _700 + _359 + _363 + _499 + 32
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        s = _885
                        t = _110
                        continue 
                    mem[_359 + _363 + _499 + _700 + 32] = 0
                    _901 = mem[64]
                    mem[mem[64]] = _700 + _359 + _363 + _499 - mem[64]
                    mem[64] = _700 + _359 + _363 + _499 + 32
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    s = _901
                    t = _110
                    continue 
                mem[_359 + _363 + _499 + 32] = 0
                _708 = mem[_212]
                s = 0
                while s < _708:
                    mem[s + _359 + _363 + _499 + 32] = mem[s + _212 + 32]
                    s = s + 32
                    continue 
                if ceil32(_708) <= _708:
                    _886 = mem[64]
                    mem[mem[64]] = _708 + _359 + _363 + _499 - mem[64]
                    mem[64] = _708 + _359 + _363 + _499 + 32
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    s = _886
                    t = _110
                    continue 
                mem[_359 + _363 + _499 + _708 + 32] = 0
                _902 = mem[64]
                mem[mem[64]] = _708 + _359 + _363 + _499 - mem[64]
                mem[64] = _708 + _359 + _363 + _499 + 32
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                s = _902
                t = _110
                continue 
            mem[_212 + 32 len u] = call.data[calldata.size len u]
            v = u
            t = _111
            while t:
                if v < 1:
                    revert with 0, 17
                if t / 10 > 0x1999999999999999999999999999999999999999999999999999999999999999:
                    revert with 0, 17
                if t < 10 * t / 10:
                    revert with 0, 17
                if 48 > -uint8(t - (10 * t / 10)) + 255:
                    revert with 0, 17
                if v - 1 >= mem[_212]:
                    revert with 0, 50
                mem[v + _212 + 31 len 8] = Mask(8, -(('mask_shl', 8, 0, 245, ('add', 48, ('mask_shl', 8, 0, 0, ('add', ('var', 2), ('mul', -10, ('div', ('var', 2), 10)))))), 0) + 256, 0) << (('mask_shl', 8, 0, 245, ('add', 48, ('mask_shl', 8, 0, 0, ('add', ('var', 2), ('mul', -10, ('div', ('var', 2), 10)))))), 0) - 256
                v = v - 1
                t = t / 10
                continue 
            _360 = mem[64]
            _364 = mem[s]
            t = 0
            while t < _364:
                mem[t + _360 + 32] = mem[t + s + 32]
                t = t + 32
                continue 
            if ceil32(_364) <= _364:
                _494 = mem[_70]
                s = 0
                while s < _494:
                    mem[s + _360 + _364 + 32] = mem[s + _70 + 32]
                    s = s + 32
                    continue 
                if ceil32(_494) <= _494:
                    _701 = mem[_212]
                    s = 0
                    while s < _701:
                        mem[s + _360 + _364 + _494 + 32] = mem[s + _212 + 32]
                        s = s + 32
                        continue 
                    if ceil32(_701) <= _701:
                        _887 = mem[64]
                        mem[mem[64]] = _701 + _360 + _364 + _494 - mem[64]
                        mem[64] = _701 + _360 + _364 + _494 + 32
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        s = _887
                        t = _110
                        continue 
                    mem[_360 + _364 + _494 + _701 + 32] = 0
                    _903 = mem[64]
                    mem[mem[64]] = _701 + _360 + _364 + _494 - mem[64]
                    mem[64] = _701 + _360 + _364 + _494 + 32
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    s = _903
                    t = _110
                    continue 
                mem[_360 + _364 + _494 + 32] = 0
                _709 = mem[_212]
                s = 0
                while s < _709:
                    mem[s + _360 + _364 + _494 + 32] = mem[s + _212 + 32]
                    s = s + 32
                    continue 
                if ceil32(_709) <= _709:
                    _888 = mem[64]
                    mem[mem[64]] = _709 + _360 + _364 + _494 - mem[64]
                    mem[64] = _709 + _360 + _364 + _494 + 32
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    s = _888
                    t = _110
                    continue 
                mem[_360 + _364 + _494 + _709 + 32] = 0
                _904 = mem[64]
                mem[mem[64]] = _709 + _360 + _364 + _494 - mem[64]
                mem[64] = _709 + _360 + _364 + _494 + 32
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                s = _904
                t = _110
                continue 
            mem[_360 + _364 + 32] = 0
            _500 = mem[_70]
            s = 0
            while s < _500:
                mem[s + _360 + _364 + 32] = mem[s + _70 + 32]
                s = s + 32
                continue 
            if ceil32(_500) <= _500:
                _702 = mem[_212]
                s = 0
                while s < _702:
                    mem[s + _360 + _364 + _500 + 32] = mem[s + _212 + 32]
                    s = s + 32
                    continue 
                if ceil32(_702) <= _702:
                    _889 = mem[64]
                    mem[mem[64]] = _702 + _360 + _364 + _500 - mem[64]
                    mem[64] = _702 + _360 + _364 + _500 + 32
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    s = _889
                    t = _110
                    continue 
                mem[_360 + _364 + _500 + _702 + 32] = 0
                _905 = mem[64]
                mem[mem[64]] = _702 + _360 + _364 + _500 - mem[64]
                mem[64] = _702 + _360 + _364 + _500 + 32
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                s = _905
                t = _110
                continue 
            mem[_360 + _364 + _500 + 32] = 0
            _710 = mem[_212]
            s = 0
            while s < _710:
                mem[s + _360 + _364 + _500 + 32] = mem[s + _212 + 32]
                s = s + 32
                continue 
            if ceil32(_710) <= _710:
                _890 = mem[64]
                mem[mem[64]] = _710 + _360 + _364 + _500 - mem[64]
                mem[64] = _710 + _360 + _364 + _500 + 32
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                s = _890
                t = _110
                continue 
            mem[_360 + _364 + _500 + _710 + 32] = 0
            _906 = mem[64]
            mem[mem[64]] = _710 + _360 + _364 + _500 - mem[64]
            mem[64] = _710 + _360 + _364 + _500 + 32
            if idx == -1:
                revert with 0, 17
            idx = idx + 1
            s = _906
            t = _110
            continue 
        _109 = mem[64]
        mem[mem[64]] = 32
        _112 = mem[s]
        mem[mem[64] + 32] = mem[s]
        mem[mem[64] + 64 len ceil32(_112)] = mem[s + 32 len ceil32(_112)]
        if ceil32(_112) <= _112:
            return 32, mem[mem[64] + 32 len ceil32(_112) + 32]
        mem[mem[64] + _112 + 64] = 0
        return memory
          from mem[64]
           len ceil32(_112) + _109 + -mem[64] + 64
    u = 0
    t = mem[mem[128] + 32]
    while t:
        if u == -1:
            revert with 0, 17
        u = u + 1
        t = t / 10
        continue 
    if u > test266151307():
        revert with 0, 65
    _108 = mem[64]
    mem[mem[64]] = u
    mem[64] = mem[64] + ceil32(u) + 32
    if not u:
        s = u
        idx = _65
        while idx:
            if s < 1:
                revert with 0, 17
            if idx / 10 > 0x1999999999999999999999999999999999999999999999999999999999999999:
                revert with 0, 17
            if idx < 10 * idx / 10:
                revert with 0, 17
            if 48 > -uint8(idx - (10 * idx / 10)) + 255:
                revert with 0, 17
            if s - 1 >= mem[_108]:
                revert with 0, 50
            mem[s + _108 + 31 len 8] = Mask(8, -(('mask_shl', 8, 0, 245, ('add', 48, ('mask_shl', 8, 0, 0, ('add', ('var', 0), ('mul', -10, ('div', ('var', 0), 10)))))), 0) + 256, 0) << (('mask_shl', 8, 0, 245, ('add', 48, ('mask_shl', 8, 0, 0, ('add', ('var', 0), ('mul', -10, ('div', ('var', 0), 10)))))), 0) - 256
            s = s - 1
            idx = idx / 10
            continue 
        _210 = mem[64]
        mem[64] = mem[64] + 64
        mem[_210] = 1
        mem[_210 + 32] = 0x2300000000000000000000000000000000000000000000000000000000000000
        idx = 1
        t = _108
        u = _61
        while idx < _57:
            if idx >= mem[96]:
                revert with 0, 50
            _354 = mem[(32 * idx) + 128]
            _355 = mem[mem[(32 * idx) + 128] + 32]
            if not mem[mem[(32 * idx) + 128] + 32]:
                _367 = mem[64]
                mem[64] = mem[64] + 64
                mem[_367] = 1
                mem[_367 + 32] = 0x3000000000000000000000000000000000000000000000000000000000000000
                _371 = mem[64]
                _374 = mem[t]
                u = 0
                while u < _374:
                    mem[u + _371 + 32] = mem[u + t + 32]
                    u = u + 32
                    continue 
                if ceil32(_374) <= _374:
                    _491 = mem[_210]
                    t = 0
                    while t < _491:
                        mem[t + _371 + _374 + 32] = mem[t + _210 + 32]
                        t = t + 32
                        continue 
                    if ceil32(_491) <= _491:
                        _693 = mem[_367]
                        s = 0
                        while s < _693:
                            mem[s + _371 + _374 + _491 + 32] = mem[s + _367 + 32]
                            s = s + 32
                            continue 
                        if ceil32(_693) <= _693:
                            _873 = mem[64]
                            mem[mem[64]] = _693 + _371 + _374 + _491 - mem[64]
                            mem[64] = _693 + _371 + _374 + _491 + 32
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            t = _873
                            u = _354
                            continue 
                        mem[_371 + _374 + _491 + _693 + 32] = 0
                        _891 = mem[64]
                        mem[mem[64]] = _693 + _371 + _374 + _491 - mem[64]
                        mem[64] = _693 + _371 + _374 + _491 + 32
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        t = _891
                        u = _354
                        continue 
                    mem[_371 + _374 + _491 + 32] = 0
                    _703 = mem[_367]
                    s = 0
                    while s < _703:
                        mem[s + _371 + _374 + _491 + 32] = mem[s + _367 + 32]
                        s = s + 32
                        continue 
                    if ceil32(_703) <= _703:
                        _874 = mem[64]
                        mem[mem[64]] = _703 + _371 + _374 + _491 - mem[64]
                        mem[64] = _703 + _371 + _374 + _491 + 32
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        t = _874
                        u = _354
                        continue 
                    mem[_371 + _374 + _491 + _703 + 32] = 0
                    _892 = mem[64]
                    mem[mem[64]] = _703 + _371 + _374 + _491 - mem[64]
                    mem[64] = _703 + _371 + _374 + _491 + 32
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    t = _892
                    u = _354
                    continue 
                mem[_371 + _374 + 32] = 0
                _496 = mem[_210]
                s = 0
                while s < _496:
                    mem[s + _371 + _374 + 32] = mem[s + _210 + 32]
                    s = s + 32
                    continue 
                if ceil32(_496) <= _496:
                    _694 = mem[_367]
                    s = 0
                    while s < _694:
                        mem[s + _371 + _374 + _496 + 32] = mem[s + _367 + 32]
                        s = s + 32
                        continue 
                    if ceil32(_694) <= _694:
                        _875 = mem[64]
                        mem[mem[64]] = _694 + _371 + _374 + _496 - mem[64]
                        mem[64] = _694 + _371 + _374 + _496 + 32
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        t = _875
                        u = _354
                        continue 
                    mem[_371 + _374 + _496 + _694 + 32] = 0
                    _893 = mem[64]
                    mem[mem[64]] = _694 + _371 + _374 + _496 - mem[64]
                    mem[64] = _694 + _371 + _374 + _496 + 32
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    t = _893
                    u = _354
                    continue 
                mem[_371 + _374 + _496 + 32] = 0
                _704 = mem[_367]
                s = 0
                while s < _704:
                    mem[s + _371 + _374 + _496 + 32] = mem[s + _367 + 32]
                    s = s + 32
                    continue 
                if ceil32(_704) <= _704:
                    _876 = mem[64]
                    mem[mem[64]] = _704 + _371 + _374 + _496 - mem[64]
                    mem[64] = _704 + _371 + _374 + _496 + 32
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    t = _876
                    u = _354
                    continue 
                mem[_371 + _374 + _496 + _704 + 32] = 0
                _894 = mem[64]
                mem[mem[64]] = _704 + _371 + _374 + _496 - mem[64]
                mem[64] = _704 + _371 + _374 + _496 + 32
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                t = _894
                u = _354
                continue 
            u = 0
            s = mem[mem[(32 * idx) + 128] + 32]
            while s:
                if u == -1:
                    revert with 0, 17
                u = u + 1
                s = s / 10
                continue 
            if u > test266151307():
                revert with 0, 65
            _489 = mem[64]
            mem[mem[64]] = u
            mem[64] = mem[64] + ceil32(u) + 32
            if not u:
                v = u
                s = _355
                while s:
                    if v < 1:
                        revert with 0, 17
                    if s / 10 > 0x1999999999999999999999999999999999999999999999999999999999999999:
                        revert with 0, 17
                    if s < 10 * s / 10:
                        revert with 0, 17
                    if 48 > -uint8(s - (10 * s / 10)) + 255:
                        revert with 0, 17
                    if v - 1 >= mem[_489]:
                        revert with 0, 50
                    mem[v + _489 + 31 len 8] = Mask(8, -(('mask_shl', 8, 0, 245, ('add', 48, ('mask_shl', 8, 0, 0, ('add', ('var', 1), ('mul', -10, ('div', ('var', 1), 10)))))), 0) + 256, 0) << (('mask_shl', 8, 0, 245, ('add', 48, ('mask_shl', 8, 0, 0, ('add', ('var', 1), ('mul', -10, ('div', ('var', 1), 10)))))), 0) - 256
                    v = v - 1
                    s = s / 10
                    continue 
                _687 = mem[64]
                _691 = mem[t]
                s = 0
                while s < _691:
                    mem[s + _687 + 32] = mem[s + t + 32]
                    s = s + 32
                    continue 
                if ceil32(_691) <= _691:
                    _867 = mem[_210]
                    s = 0
                    while s < _867:
                        mem[s + _687 + _691 + 32] = mem[s + _210 + 32]
                        s = s + 32
                        continue 
                    if ceil32(_867) <= _867:
                        _987 = mem[_489]
                        s = 0
                        while s < _987:
                            mem[s + _687 + _691 + _867 + 32] = mem[s + _489 + 32]
                            s = s + 32
                            continue 
                        if ceil32(_987) <= _987:
                            _1067 = mem[64]
                            mem[mem[64]] = _987 + _687 + _691 + _867 - mem[64]
                            mem[64] = _987 + _687 + _691 + _867 + 32
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            t = _1067
                            u = _354
                            continue 
                        mem[_687 + _691 + _867 + _987 + 32] = 0
                        _1083 = mem[64]
                        mem[mem[64]] = _987 + _687 + _691 + _867 - mem[64]
                        mem[64] = _987 + _687 + _691 + _867 + 32
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        t = _1083
                        u = _354
                        continue 
                    mem[_687 + _691 + _867 + 32] = 0
                    _995 = mem[_489]
                    s = 0
                    while s < _995:
                        mem[s + _687 + _691 + _867 + 32] = mem[s + _489 + 32]
                        s = s + 32
                        continue 
                    if ceil32(_995) <= _995:
                        _1068 = mem[64]
                        mem[mem[64]] = _995 + _687 + _691 + _867 - mem[64]
                        mem[64] = _995 + _687 + _691 + _867 + 32
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        t = _1068
                        u = _354
                        continue 
                    mem[_687 + _691 + _867 + _995 + 32] = 0
                    _1084 = mem[64]
                    mem[mem[64]] = _995 + _687 + _691 + _867 - mem[64]
                    mem[64] = _995 + _687 + _691 + _867 + 32
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    t = _1084
                    u = _354
                    continue 
                mem[_687 + _691 + 32] = 0
                _871 = mem[_210]
                s = 0
                while s < _871:
                    mem[s + _687 + _691 + 32] = mem[s + _210 + 32]
                    s = s + 32
                    continue 
                if ceil32(_871) <= _871:
                    _988 = mem[_489]
                    s = 0
                    while s < _988:
                        mem[s + _687 + _691 + _871 + 32] = mem[s + _489 + 32]
                        s = s + 32
                        continue 
                    if ceil32(_988) <= _988:
                        _1069 = mem[64]
                        mem[mem[64]] = _988 + _687 + _691 + _871 - mem[64]
                        mem[64] = _988 + _687 + _691 + _871 + 32
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        t = _1069
                        u = _354
                        continue 
                    mem[_687 + _691 + _871 + _988 + 32] = 0
                    _1085 = mem[64]
                    mem[mem[64]] = _988 + _687 + _691 + _871 - mem[64]
                    mem[64] = _988 + _687 + _691 + _871 + 32
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    t = _1085
                    u = _354
                    continue 
                mem[_687 + _691 + _871 + 32] = 0
                _996 = mem[_489]
                s = 0
                while s < _996:
                    mem[s + _687 + _691 + _871 + 32] = mem[s + _489 + 32]
                    s = s + 32
                    continue 
                if ceil32(_996) <= _996:
                    _1070 = mem[64]
                    mem[mem[64]] = _996 + _687 + _691 + _871 - mem[64]
                    mem[64] = _996 + _687 + _691 + _871 + 32
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    t = _1070
                    u = _354
                    continue 
                mem[_687 + _691 + _871 + _996 + 32] = 0
                _1086 = mem[64]
                mem[mem[64]] = _996 + _687 + _691 + _871 - mem[64]
                mem[64] = _996 + _687 + _691 + _871 + 32
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                t = _1086
                u = _354
                continue 
            mem[_489 + 32 len u] = call.data[calldata.size len u]
            v = u
            s = _355
            while s:
                if v < 1:
                    revert with 0, 17
                if s / 10 > 0x1999999999999999999999999999999999999999999999999999999999999999:
                    revert with 0, 17
                if s < 10 * s / 10:
                    revert with 0, 17
                if 48 > -uint8(s - (10 * s / 10)) + 255:
                    revert with 0, 17
                if v - 1 >= mem[_489]:
                    revert with 0, 50
                mem[v + _489 + 31 len 8] = Mask(8, -(('mask_shl', 8, 0, 245, ('add', 48, ('mask_shl', 8, 0, 0, ('add', ('var', 1), ('mul', -10, ('div', ('var', 1), 10)))))), 0) + 256, 0) << (('mask_shl', 8, 0, 245, ('add', 48, ('mask_shl', 8, 0, 0, ('add', ('var', 1), ('mul', -10, ('div', ('var', 1), 10)))))), 0) - 256
                v = v - 1
                s = s / 10
                continue 
            _688 = mem[64]
            _692 = mem[t]
            s = 0
            while s < _692:
                mem[s + _688 + 32] = mem[s + t + 32]
                s = s + 32
                continue 
            if ceil32(_692) <= _692:
                _868 = mem[_210]
                s = 0
                while s < _868:
                    mem[s + _688 + _692 + 32] = mem[s + _210 + 32]
                    s = s + 32
                    continue 
                if ceil32(_868) <= _868:
                    _989 = mem[_489]
                    s = 0
                    while s < _989:
                        mem[s + _688 + _692 + _868 + 32] = mem[s + _489 + 32]
                        s = s + 32
                        continue 
                    if ceil32(_989) <= _989:
                        _1071 = mem[64]
                        mem[mem[64]] = _989 + _688 + _692 + _868 - mem[64]
                        mem[64] = _989 + _688 + _692 + _868 + 32
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        t = _1071
                        u = _354
                        continue 
                    mem[_688 + _692 + _868 + _989 + 32] = 0
                    _1087 = mem[64]
                    mem[mem[64]] = _989 + _688 + _692 + _868 - mem[64]
                    mem[64] = _989 + _688 + _692 + _868 + 32
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    t = _1087
                    u = _354
                    continue 
                mem[_688 + _692 + _868 + 32] = 0
                _997 = mem[_489]
                s = 0
                while s < _997:
                    mem[s + _688 + _692 + _868 + 32] = mem[s + _489 + 32]
                    s = s + 32
                    continue 
                if ceil32(_997) <= _997:
                    _1072 = mem[64]
                    mem[mem[64]] = _997 + _688 + _692 + _868 - mem[64]
                    mem[64] = _997 + _688 + _692 + _868 + 32
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    t = _1072
                    u = _354
                    continue 
                mem[_688 + _692 + _868 + _997 + 32] = 0
                _1088 = mem[64]
                mem[mem[64]] = _997 + _688 + _692 + _868 - mem[64]
                mem[64] = _997 + _688 + _692 + _868 + 32
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                t = _1088
                u = _354
                continue 
            mem[_688 + _692 + 32] = 0
            _872 = mem[_210]
            s = 0
            while s < _872:
                mem[s + _688 + _692 + 32] = mem[s + _210 + 32]
                s = s + 32
                continue 
            if ceil32(_872) <= _872:
                _990 = mem[_489]
                s = 0
                while s < _990:
                    mem[s + _688 + _692 + _872 + 32] = mem[s + _489 + 32]
                    s = s + 32
                    continue 
                if ceil32(_990) <= _990:
                    _1073 = mem[64]
                    mem[mem[64]] = _990 + _688 + _692 + _872 - mem[64]
                    mem[64] = _990 + _688 + _692 + _872 + 32
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    t = _1073
                    u = _354
                    continue 
                mem[_688 + _692 + _872 + _990 + 32] = 0
                _1089 = mem[64]
                mem[mem[64]] = _990 + _688 + _692 + _872 - mem[64]
                mem[64] = _990 + _688 + _692 + _872 + 32
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                t = _1089
                u = _354
                continue 
            mem[_688 + _692 + _872 + 32] = 0
            _998 = mem[_489]
            s = 0
            while s < _998:
                mem[s + _688 + _692 + _872 + 32] = mem[s + _489 + 32]
                s = s + 32
                continue 
            if ceil32(_998) <= _998:
                _1074 = mem[64]
                mem[mem[64]] = _998 + _688 + _692 + _872 - mem[64]
                mem[64] = _998 + _688 + _692 + _872 + 32
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                t = _1074
                u = _354
                continue 
            mem[_688 + _692 + _872 + _998 + 32] = 0
            _1090 = mem[64]
            mem[mem[64]] = _998 + _688 + _692 + _872 - mem[64]
            mem[64] = _998 + _688 + _692 + _872 + 32
            if idx == -1:
                revert with 0, 17
            idx = idx + 1
            t = _1090
            u = _354
            continue 
        mem[mem[64]] = 32
        _361 = mem[t]
        mem[mem[64] + 32] = mem[t]
        mem[mem[64] + 64 len ceil32(_361)] = mem[t + 32 len ceil32(_361)]
        if ceil32(_361) > _361:
            mem[mem[64] + _361 + 64] = 0
        return 32, mem[mem[64] + 32 len ceil32(_361) + 32]
    mem[_108 + 32 len u] = call.data[calldata.size len u]
    s = u
    idx = _65
    while idx:
        if s < 1:
            revert with 0, 17
        if idx / 10 > 0x1999999999999999999999999999999999999999999999999999999999999999:
            revert with 0, 17
        if idx < 10 * idx / 10:
            revert with 0, 17
        if 48 > -uint8(idx - (10 * idx / 10)) + 255:
            revert with 0, 17
        if s - 1 >= mem[_108]:
            revert with 0, 50
        mem[s + _108 + 31 len 8] = Mask(8, -(('mask_shl', 8, 0, 245, ('add', 48, ('mask_shl', 8, 0, 0, ('add', ('var', 0), ('mul', -10, ('div', ('var', 0), 10)))))), 0) + 256, 0) << (('mask_shl', 8, 0, 245, ('add', 48, ('mask_shl', 8, 0, 0, ('add', ('var', 0), ('mul', -10, ('div', ('var', 0), 10)))))), 0) - 256
        s = s - 1
        idx = idx / 10
        continue 
    _211 = mem[64]
    mem[64] = mem[64] + 64
    mem[_211] = 1
    mem[_211 + 32] = 0x2300000000000000000000000000000000000000000000000000000000000000
    idx = 1
    t = _108
    u = _61
    while idx < _57:
        if idx >= mem[96]:
            revert with 0, 50
        _357 = mem[(32 * idx) + 128]
        _358 = mem[mem[(32 * idx) + 128] + 32]
        if not mem[mem[(32 * idx) + 128] + 32]:
            _368 = mem[64]
            mem[64] = mem[64] + 64
            mem[_368] = 1
            mem[_368 + 32] = 0x3000000000000000000000000000000000000000000000000000000000000000
            _372 = mem[64]
            _376 = mem[t]
            u = 0
            while u < _376:
                mem[u + _372 + 32] = mem[u + t + 32]
                u = u + 32
                continue 
            if ceil32(_376) <= _376:
                _492 = mem[_211]
                t = 0
                while t < _492:
                    mem[t + _372 + _376 + 32] = mem[t + _211 + 32]
                    t = t + 32
                    continue 
                if ceil32(_492) <= _492:
                    _697 = mem[_368]
                    s = 0
                    while s < _697:
                        mem[s + _372 + _376 + _492 + 32] = mem[s + _368 + 32]
                        s = s + 32
                        continue 
                    if ceil32(_697) <= _697:
                        _879 = mem[64]
                        mem[mem[64]] = _697 + _372 + _376 + _492 - mem[64]
                        mem[64] = _697 + _372 + _376 + _492 + 32
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        t = _879
                        u = _357
                        continue 
                    mem[_372 + _376 + _492 + _697 + 32] = 0
                    _895 = mem[64]
                    mem[mem[64]] = _697 + _372 + _376 + _492 - mem[64]
                    mem[64] = _697 + _372 + _376 + _492 + 32
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    t = _895
                    u = _357
                    continue 
                mem[_372 + _376 + _492 + 32] = 0
                _705 = mem[_368]
                s = 0
                while s < _705:
                    mem[s + _372 + _376 + _492 + 32] = mem[s + _368 + 32]
                    s = s + 32
                    continue 
                if ceil32(_705) <= _705:
                    _880 = mem[64]
                    mem[mem[64]] = _705 + _372 + _376 + _492 - mem[64]
                    mem[64] = _705 + _372 + _376 + _492 + 32
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    t = _880
                    u = _357
                    continue 
                mem[_372 + _376 + _492 + _705 + 32] = 0
                _896 = mem[64]
                mem[mem[64]] = _705 + _372 + _376 + _492 - mem[64]
                mem[64] = _705 + _372 + _376 + _492 + 32
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                t = _896
                u = _357
                continue 
            mem[_372 + _376 + 32] = 0
            _498 = mem[_211]
            s = 0
            while s < _498:
                mem[s + _372 + _376 + 32] = mem[s + _211 + 32]
                s = s + 32
                continue 
            if ceil32(_498) <= _498:
                _698 = mem[_368]
                s = 0
                while s < _698:
                    mem[s + _372 + _376 + _498 + 32] = mem[s + _368 + 32]
                    s = s + 32
                    continue 
                if ceil32(_698) <= _698:
                    _881 = mem[64]
                    mem[mem[64]] = _698 + _372 + _376 + _498 - mem[64]
                    mem[64] = _698 + _372 + _376 + _498 + 32
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    t = _881
                    u = _357
                    continue 
                mem[_372 + _376 + _498 + _698 + 32] = 0
                _897 = mem[64]
                mem[mem[64]] = _698 + _372 + _376 + _498 - mem[64]
                mem[64] = _698 + _372 + _376 + _498 + 32
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                t = _897
                u = _357
                continue 
            mem[_372 + _376 + _498 + 32] = 0
            _706 = mem[_368]
            s = 0
            while s < _706:
                mem[s + _372 + _376 + _498 + 32] = mem[s + _368 + 32]
                s = s + 32
                continue 
            if ceil32(_706) <= _706:
                _882 = mem[64]
                mem[mem[64]] = _706 + _372 + _376 + _498 - mem[64]
                mem[64] = _706 + _372 + _376 + _498 + 32
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                t = _882
                u = _357
                continue 
            mem[_372 + _376 + _498 + _706 + 32] = 0
            _898 = mem[64]
            mem[mem[64]] = _706 + _372 + _376 + _498 - mem[64]
            mem[64] = _706 + _372 + _376 + _498 + 32
            if idx == -1:
                revert with 0, 17
            idx = idx + 1
            t = _898
            u = _357
            continue 
        u = 0
        s = mem[mem[(32 * idx) + 128] + 32]
        while s:
            if u == -1:
                revert with 0, 17
            u = u + 1
            s = s / 10
            continue 
        if u > test266151307():
            revert with 0, 65
        _490 = mem[64]
        mem[mem[64]] = u
        mem[64] = mem[64] + ceil32(u) + 32
        if not u:
            v = u
            s = _358
            while s:
                if v < 1:
                    revert with 0, 17
                if s / 10 > 0x1999999999999999999999999999999999999999999999999999999999999999:
                    revert with 0, 17
                if s < 10 * s / 10:
                    revert with 0, 17
                if 48 > -uint8(s - (10 * s / 10)) + 255:
                    revert with 0, 17
                if v - 1 >= mem[_490]:
                    revert with 0, 50
                mem[v + _490 + 31 len 8] = Mask(8, -(('mask_shl', 8, 0, 245, ('add', 48, ('mask_shl', 8, 0, 0, ('add', ('var', 1), ('mul', -10, ('div', ('var', 1), 10)))))), 0) + 256, 0) << (('mask_shl', 8, 0, 245, ('add', 48, ('mask_shl', 8, 0, 0, ('add', ('var', 1), ('mul', -10, ('div', ('var', 1), 10)))))), 0) - 256
                v = v - 1
                s = s / 10
                continue 
            _689 = mem[64]
            _695 = mem[t]
            s = 0
            while s < _695:
                mem[s + _689 + 32] = mem[s + t + 32]
                s = s + 32
                continue 
            if ceil32(_695) <= _695:
                _869 = mem[_211]
                s = 0
                while s < _869:
                    mem[s + _689 + _695 + 32] = mem[s + _211 + 32]
                    s = s + 32
                    continue 
                if ceil32(_869) <= _869:
                    _991 = mem[_490]
                    s = 0
                    while s < _991:
                        mem[s + _689 + _695 + _869 + 32] = mem[s + _490 + 32]
                        s = s + 32
                        continue 
                    if ceil32(_991) <= _991:
                        _1075 = mem[64]
                        mem[mem[64]] = _991 + _689 + _695 + _869 - mem[64]
                        mem[64] = _991 + _689 + _695 + _869 + 32
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        t = _1075
                        u = _357
                        continue 
                    mem[_689 + _695 + _869 + _991 + 32] = 0
                    _1091 = mem[64]
                    mem[mem[64]] = _991 + _689 + _695 + _869 - mem[64]
                    mem[64] = _991 + _689 + _695 + _869 + 32
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    t = _1091
                    u = _357
                    continue 
                mem[_689 + _695 + _869 + 32] = 0
                _999 = mem[_490]
                s = 0
                while s < _999:
                    mem[s + _689 + _695 + _869 + 32] = mem[s + _490 + 32]
                    s = s + 32
                    continue 
                if ceil32(_999) <= _999:
                    _1076 = mem[64]
                    mem[mem[64]] = _999 + _689 + _695 + _869 - mem[64]
                    mem[64] = _999 + _689 + _695 + _869 + 32
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    t = _1076
                    u = _357
                    continue 
                mem[_689 + _695 + _869 + _999 + 32] = 0
                _1092 = mem[64]
                mem[mem[64]] = _999 + _689 + _695 + _869 - mem[64]
                mem[64] = _999 + _689 + _695 + _869 + 32
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                t = _1092
                u = _357
                continue 
            mem[_689 + _695 + 32] = 0
            _877 = mem[_211]
            s = 0
            while s < _877:
                mem[s + _689 + _695 + 32] = mem[s + _211 + 32]
                s = s + 32
                continue 
            if ceil32(_877) <= _877:
                _992 = mem[_490]
                s = 0
                while s < _992:
                    mem[s + _689 + _695 + _877 + 32] = mem[s + _490 + 32]
                    s = s + 32
                    continue 
                if ceil32(_992) <= _992:
                    _1077 = mem[64]
                    mem[mem[64]] = _992 + _689 + _695 + _877 - mem[64]
                    mem[64] = _992 + _689 + _695 + _877 + 32
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    t = _1077
                    u = _357
                    continue 
                mem[_689 + _695 + _877 + _992 + 32] = 0
                _1093 = mem[64]
                mem[mem[64]] = _992 + _689 + _695 + _877 - mem[64]
                mem[64] = _992 + _689 + _695 + _877 + 32
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                t = _1093
                u = _357
                continue 
            mem[_689 + _695 + _877 + 32] = 0
            _1000 = mem[_490]
            s = 0
            while s < _1000:
                mem[s + _689 + _695 + _877 + 32] = mem[s + _490 + 32]
                s = s + 32
                continue 
            if ceil32(_1000) <= _1000:
                _1078 = mem[64]
                mem[mem[64]] = _1000 + _689 + _695 + _877 - mem[64]
                mem[64] = _1000 + _689 + _695 + _877 + 32
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                t = _1078
                u = _357
                continue 
            mem[_689 + _695 + _877 + _1000 + 32] = 0
            _1094 = mem[64]
            mem[mem[64]] = _1000 + _689 + _695 + _877 - mem[64]
            mem[64] = _1000 + _689 + _695 + _877 + 32
            if idx == -1:
                revert with 0, 17
            idx = idx + 1
            t = _1094
            u = _357
            continue 
        mem[_490 + 32 len u] = call.data[calldata.size len u]
        v = u
        s = _358
        while s:
            if v < 1:
                revert with 0, 17
            if s / 10 > 0x1999999999999999999999999999999999999999999999999999999999999999:
                revert with 0, 17
            if s < 10 * s / 10:
                revert with 0, 17
            if 48 > -uint8(s - (10 * s / 10)) + 255:
                revert with 0, 17
            if v - 1 >= mem[_490]:
                revert with 0, 50
            mem[v + _490 + 31 len 8] = Mask(8, -(('mask_shl', 8, 0, 245, ('add', 48, ('mask_shl', 8, 0, 0, ('add', ('var', 1), ('mul', -10, ('div', ('var', 1), 10)))))), 0) + 256, 0) << (('mask_shl', 8, 0, 245, ('add', 48, ('mask_shl', 8, 0, 0, ('add', ('var', 1), ('mul', -10, ('div', ('var', 1), 10)))))), 0) - 256
            v = v - 1
            s = s / 10
            continue 
        _690 = mem[64]
        _696 = mem[t]
        s = 0
        while s < _696:
            mem[s + _690 + 32] = mem[s + t + 32]
            s = s + 32
            continue 
        if ceil32(_696) <= _696:
            _870 = mem[_211]
            s = 0
            while s < _870:
                mem[s + _690 + _696 + 32] = mem[s + _211 + 32]
                s = s + 32
                continue 
            if ceil32(_870) <= _870:
                _993 = mem[_490]
                s = 0
                while s < _993:
                    mem[s + _690 + _696 + _870 + 32] = mem[s + _490 + 32]
                    s = s + 32
                    continue 
                if ceil32(_993) <= _993:
                    _1079 = mem[64]
                    mem[mem[64]] = _993 + _690 + _696 + _870 - mem[64]
                    mem[64] = _993 + _690 + _696 + _870 + 32
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    t = _1079
                    u = _357
                    continue 
                mem[_690 + _696 + _870 + _993 + 32] = 0
                _1095 = mem[64]
                mem[mem[64]] = _993 + _690 + _696 + _870 - mem[64]
                mem[64] = _993 + _690 + _696 + _870 + 32
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                t = _1095
                u = _357
                continue 
            mem[_690 + _696 + _870 + 32] = 0
            _1001 = mem[_490]
            s = 0
            while s < _1001:
                mem[s + _690 + _696 + _870 + 32] = mem[s + _490 + 32]
                s = s + 32
                continue 
            if ceil32(_1001) <= _1001:
                _1080 = mem[64]
                mem[mem[64]] = _1001 + _690 + _696 + _870 - mem[64]
                mem[64] = _1001 + _690 + _696 + _870 + 32
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                t = _1080
                u = _357
                continue 
            mem[_690 + _696 + _870 + _1001 + 32] = 0
            _1096 = mem[64]
            mem[mem[64]] = _1001 + _690 + _696 + _870 - mem[64]
            mem[64] = _1001 + _690 + _696 + _870 + 32
            if idx == -1:
                revert with 0, 17
            idx = idx + 1
            t = _1096
            u = _357
            continue 
        mem[_690 + _696 + 32] = 0
        _878 = mem[_211]
        s = 0
        while s < _878:
            mem[s + _690 + _696 + 32] = mem[s + _211 + 32]
            s = s + 32
            continue 
        if ceil32(_878) <= _878:
            _994 = mem[_490]
            s = 0
            while s < _994:
                mem[s + _690 + _696 + _878 + 32] = mem[s + _490 + 32]
                s = s + 32
                continue 
            if ceil32(_994) <= _994:
                _1081 = mem[64]
                mem[mem[64]] = _994 + _690 + _696 + _878 - mem[64]
                mem[64] = _994 + _690 + _696 + _878 + 32
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                t = _1081
                u = _357
                continue 
            mem[_690 + _696 + _878 + _994 + 32] = 0
            _1097 = mem[64]
            mem[mem[64]] = _994 + _690 + _696 + _878 - mem[64]
            mem[64] = _994 + _690 + _696 + _878 + 32
            if idx == -1:
                revert with 0, 17
            idx = idx + 1
            t = _1097
            u = _357
            continue 
        mem[_690 + _696 + _878 + 32] = 0
        _1002 = mem[_490]
        s = 0
        while s < _1002:
            mem[s + _690 + _696 + _878 + 32] = mem[s + _490 + 32]
            s = s + 32
            continue 
        if ceil32(_1002) <= _1002:
            _1082 = mem[64]
            mem[mem[64]] = _1002 + _690 + _696 + _878 - mem[64]
            mem[64] = _1002 + _690 + _696 + _878 + 32
            if idx == -1:
                revert with 0, 17
            idx = idx + 1
            t = _1082
            u = _357
            continue 
        mem[_690 + _696 + _878 + _1002 + 32] = 0
        _1098 = mem[64]
        mem[mem[64]] = _1002 + _690 + _696 + _878 - mem[64]
        mem[64] = _1002 + _690 + _696 + _878 + 32
        if idx == -1:
            revert with 0, 17
        idx = idx + 1
        t = _1098
        u = _357
        continue 
    _356 = mem[64]
    mem[mem[64]] = 32
    _362 = mem[t]
    mem[mem[64] + 32] = mem[t]
    mem[mem[64] + 64 len ceil32(_362)] = mem[t + 32 len ceil32(_362)]
    if ceil32(_362) <= _362:
        return 32, mem[mem[64] + 32 len ceil32(_362) + 32]
    mem[mem[64] + _362 + 64] = 0
    return memory
      from mem[64]
       len ceil32(_362) + _356 + -mem[64] + 64
}

function sub_51bf120c(?) payable {
    require calldata.size - 4 >= 32
    require arg1 == address(arg1)
    if not sub_44fea1b9[address(arg1)]:
        return ''
    mem[0] = address(arg1)
    mem[32] = 5
    mem[64] = (32 * stor5[address(arg1)].field_0) + 128
    mem[96] = stor5[address(arg1)].field_0
    s = 128
    idx = 0
    while idx < stor5[address(arg1)].field_0:
        mem[0] = sha3(address(arg1), 5)
        _59 = mem[64]
        mem[64] = mem[64] + 192
        if bool(stor5[address(arg1)][idx].field_0):
            if bool(stor5[address(arg1)][idx].field_0) == uint255(stor5[address(arg1)][idx].field_0) * 0.5 < 32:
                revert with 0, 34
            _66 = mem[64]
            mem[64] = mem[64] + ceil32(uint255(stor5[address(arg1)][idx].field_0) * 0.5) + 32
            mem[_66] = uint255(stor5[address(arg1)][idx].field_0) * 0.5
            if bool(stor5[address(arg1)][idx].field_0):
                if bool(stor5[address(arg1)][idx].field_0) == uint255(stor5[address(arg1)][idx].field_0) * 0.5 < 32:
                    revert with 0, 34
                if Mask(256, -1, stor5[address(arg1)][idx].field_0):
                    if 31 >= uint255(stor5[address(arg1)][idx].field_0) * 0.5:
                        mem[_66 + 32] = 256 * Mask(248, 0, stor5[address(arg1)][idx].field_8)
                    else:
                        mem[0] = (6 * idx) + sha3(sha3(address(arg1), 5))
                        mem[_66 + 32] = stor5[address(arg1)][idx].field_0
                        t = _66 + 32
                        u = sha3(mem[0])
                        while _66 + (uint255(stor5[address(arg1)][idx].field_0) * 0.5) > t:
                            mem[t + 32] = uint256(stor1[u])
                            t = t + 32
                            u = u + 1
                            continue 
            else:
                if bool(stor5[address(arg1)][idx].field_0) == stor5[address(arg1)][idx].field_1 % 128 < 32:
                    revert with 0, 34
                if stor5[address(arg1)][idx].field_1 % 128:
                    if 31 >= stor5[address(arg1)][idx].field_1 % 128:
                        mem[_66 + 32] = 256 * Mask(248, 0, stor5[address(arg1)][idx].field_8)
                    else:
                        mem[0] = (6 * idx) + sha3(sha3(address(arg1), 5))
                        mem[_66 + 32] = stor5[address(arg1)][idx].field_0
                        t = _66 + 32
                        u = sha3(mem[0])
                        while _66 + stor5[address(arg1)][idx].field_1 % 128 > t:
                            mem[t + 32] = uint256(stor1[u])
                            t = t + 32
                            u = u + 1
                            continue 
            mem[_59] = _66
        else:
            if bool(stor5[address(arg1)][idx].field_0) == stor5[address(arg1)][idx].field_1 % 128 < 32:
                revert with 0, 34
            _68 = mem[64]
            mem[64] = mem[64] + ceil32(stor5[address(arg1)][idx].field_1 % 128) + 32
            mem[_68] = stor5[address(arg1)][idx].field_1 % 128
            if bool(stor5[address(arg1)][idx].field_0):
                if bool(stor5[address(arg1)][idx].field_0) == uint255(stor5[address(arg1)][idx].field_0) * 0.5 < 32:
                    revert with 0, 34
                if Mask(256, -1, stor5[address(arg1)][idx].field_0):
                    if 31 >= uint255(stor5[address(arg1)][idx].field_0) * 0.5:
                        mem[_68 + 32] = 256 * Mask(248, 0, stor5[address(arg1)][idx].field_8)
                    else:
                        mem[0] = (6 * idx) + sha3(sha3(address(arg1), 5))
                        mem[_68 + 32] = stor5[address(arg1)][idx].field_0
                        t = _68 + 32
                        u = sha3(mem[0])
                        while _68 + (uint255(stor5[address(arg1)][idx].field_0) * 0.5) > t:
                            mem[t + 32] = uint256(stor1[u])
                            t = t + 32
                            u = u + 1
                            continue 
            else:
                if bool(stor5[address(arg1)][idx].field_0) == stor5[address(arg1)][idx].field_1 % 128 < 32:
                    revert with 0, 34
                if stor5[address(arg1)][idx].field_1 % 128:
                    if 31 >= stor5[address(arg1)][idx].field_1 % 128:
                        mem[_68 + 32] = 256 * Mask(248, 0, stor5[address(arg1)][idx].field_8)
                    else:
                        mem[0] = (6 * idx) + sha3(sha3(address(arg1), 5))
                        mem[_68 + 32] = stor5[address(arg1)][idx].field_0
                        t = _68 + 32
                        u = sha3(mem[0])
                        while _68 + stor5[address(arg1)][idx].field_1 % 128 > t:
                            mem[t + 32] = uint256(stor1[u])
                            t = t + 32
                            u = u + 1
                            continue 
            mem[_59] = _68
        mem[_59 + 32] = stor5[address(arg1)][idx].field_256
        mem[_59 + 64] = stor5[address(arg1)][idx].field_512
        mem[_59 + 96] = stor5[address(arg1)][idx].field_768
        mem[_59 + 128] = stor5[address(arg1)][idx].field_1024
        if uint8(stor5[address(arg1)][idx].field_1280) > 2:
            revert with 0, 33
        mem[_59 + 160] = uint8(stor5[address(arg1)][idx].field_1280)
        mem[s] = _59
        s = s + 32
        idx = idx + 1
        continue 
    _57 = mem[96]
    _61 = mem[64]
    mem[64] = mem[64] + 192
    mem[_61] = 96
    mem[_61 + 32] = 0
    mem[_61 + 64] = 0
    mem[_61 + 96] = 0
    mem[_61 + 128] = 0
    mem[_61 + 160] = 0
    if 0 >= mem[96]:
        revert with 0, 50
    _65 = mem[mem[128] + 64]
    if not mem[mem[128] + 64]:
        _69 = mem[64]
        mem[64] = mem[64] + 64
        mem[_69] = 1
        mem[_69 + 32] = 0x3000000000000000000000000000000000000000000000000000000000000000
        _70 = mem[64]
        mem[64] = mem[64] + 64
        mem[_70] = 1
        mem[_70 + 32] = 0x2300000000000000000000000000000000000000000000000000000000000000
        idx = 1
        s = _69
        t = _61
        while idx < _57:
            if idx >= mem[96]:
                revert with 0, 50
            _110 = mem[(32 * idx) + 128]
            _111 = mem[mem[(32 * idx) + 128] + 64]
            if not mem[mem[(32 * idx) + 128] + 64]:
                _113 = mem[64]
                mem[64] = mem[64] + 64
                mem[_113] = 1
                mem[_113 + 32] = 0x3000000000000000000000000000000000000000000000000000000000000000
                _114 = mem[64]
                _117 = mem[s]
                t = 0
                while t < _117:
                    mem[t + _114 + 32] = mem[t + s + 32]
                    t = t + 32
                    continue 
                if ceil32(_117) <= _117:
                    _213 = mem[_70]
                    s = 0
                    while s < _213:
                        mem[s + _114 + _117 + 32] = mem[s + _70 + 32]
                        s = s + 32
                        continue 
                    if ceil32(_213) <= _213:
                        _365 = mem[_113]
                        s = 0
                        while s < _365:
                            mem[s + _114 + _117 + _213 + 32] = mem[s + _113 + 32]
                            s = s + 32
                            continue 
                        if ceil32(_365) <= _365:
                            _501 = mem[64]
                            mem[mem[64]] = _365 + _114 + _117 + _213 - mem[64]
                            mem[64] = _365 + _114 + _117 + _213 + 32
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            s = _501
                            t = _110
                            continue 
                        mem[_114 + _117 + _213 + _365 + 32] = 0
                        _507 = mem[64]
                        mem[mem[64]] = _365 + _114 + _117 + _213 - mem[64]
                        mem[64] = _365 + _114 + _117 + _213 + 32
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        s = _507
                        t = _110
                        continue 
                    mem[_114 + _117 + _213 + 32] = 0
                    _369 = mem[_113]
                    s = 0
                    while s < _369:
                        mem[s + _114 + _117 + _213 + 32] = mem[s + _113 + 32]
                        s = s + 32
                        continue 
                    if ceil32(_369) <= _369:
                        _502 = mem[64]
                        mem[mem[64]] = _369 + _114 + _117 + _213 - mem[64]
                        mem[64] = _369 + _114 + _117 + _213 + 32
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        s = _502
                        t = _110
                        continue 
                    mem[_114 + _117 + _213 + _369 + 32] = 0
                    _508 = mem[64]
                    mem[mem[64]] = _369 + _114 + _117 + _213 - mem[64]
                    mem[64] = _369 + _114 + _117 + _213 + 32
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    s = _508
                    t = _110
                    continue 
                mem[_114 + _117 + 32] = 0
                _217 = mem[_70]
                s = 0
                while s < _217:
                    mem[s + _114 + _117 + 32] = mem[s + _70 + 32]
                    s = s + 32
                    continue 
                if ceil32(_217) <= _217:
                    _366 = mem[_113]
                    s = 0
                    while s < _366:
                        mem[s + _114 + _117 + _217 + 32] = mem[s + _113 + 32]
                        s = s + 32
                        continue 
                    if ceil32(_366) <= _366:
                        _503 = mem[64]
                        mem[mem[64]] = _366 + _114 + _117 + _217 - mem[64]
                        mem[64] = _366 + _114 + _117 + _217 + 32
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        s = _503
                        t = _110
                        continue 
                    mem[_114 + _117 + _217 + _366 + 32] = 0
                    _509 = mem[64]
                    mem[mem[64]] = _366 + _114 + _117 + _217 - mem[64]
                    mem[64] = _366 + _114 + _117 + _217 + 32
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    s = _509
                    t = _110
                    continue 
                mem[_114 + _117 + _217 + 32] = 0
                _370 = mem[_113]
                s = 0
                while s < _370:
                    mem[s + _114 + _117 + _217 + 32] = mem[s + _113 + 32]
                    s = s + 32
                    continue 
                if ceil32(_370) <= _370:
                    _504 = mem[64]
                    mem[mem[64]] = _370 + _114 + _117 + _217 - mem[64]
                    mem[64] = _370 + _114 + _117 + _217 + 32
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    s = _504
                    t = _110
                    continue 
                mem[_114 + _117 + _217 + _370 + 32] = 0
                _510 = mem[64]
                mem[mem[64]] = _370 + _114 + _117 + _217 - mem[64]
                mem[64] = _370 + _114 + _117 + _217 + 32
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                s = _510
                t = _110
                continue 
            u = 0
            t = mem[mem[(32 * idx) + 128] + 64]
            while t:
                if u == -1:
                    revert with 0, 17
                u = u + 1
                t = t / 10
                continue 
            if u > test266151307():
                revert with 0, 65
            _212 = mem[64]
            mem[mem[64]] = u
            mem[64] = mem[64] + ceil32(u) + 32
            if not u:
                v = u
                t = _111
                while t:
                    if v < 1:
                        revert with 0, 17
                    if t / 10 > 0x1999999999999999999999999999999999999999999999999999999999999999:
                        revert with 0, 17
                    if t < 10 * t / 10:
                        revert with 0, 17
                    if 48 > -uint8(t - (10 * t / 10)) + 255:
                        revert with 0, 17
                    if v - 1 >= mem[_212]:
                        revert with 0, 50
                    mem[v + _212 + 31 len 8] = Mask(8, -(('mask_shl', 8, 0, 245, ('add', 48, ('mask_shl', 8, 0, 0, ('add', ('var', 2), ('mul', -10, ('div', ('var', 2), 10)))))), 0) + 256, 0) << (('mask_shl', 8, 0, 245, ('add', 48, ('mask_shl', 8, 0, 0, ('add', ('var', 2), ('mul', -10, ('div', ('var', 2), 10)))))), 0) - 256
                    v = v - 1
                    t = t / 10
                    continue 
                _359 = mem[64]
                _363 = mem[s]
                t = 0
                while t < _363:
                    mem[t + _359 + 32] = mem[t + s + 32]
                    t = t + 32
                    continue 
                if ceil32(_363) <= _363:
                    _493 = mem[_70]
                    s = 0
                    while s < _493:
                        mem[s + _359 + _363 + 32] = mem[s + _70 + 32]
                        s = s + 32
                        continue 
                    if ceil32(_493) <= _493:
                        _699 = mem[_212]
                        s = 0
                        while s < _699:
                            mem[s + _359 + _363 + _493 + 32] = mem[s + _212 + 32]
                            s = s + 32
                            continue 
                        if ceil32(_699) <= _699:
                            _883 = mem[64]
                            mem[mem[64]] = _699 + _359 + _363 + _493 - mem[64]
                            mem[64] = _699 + _359 + _363 + _493 + 32
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            s = _883
                            t = _110
                            continue 
                        mem[_359 + _363 + _493 + _699 + 32] = 0
                        _899 = mem[64]
                        mem[mem[64]] = _699 + _359 + _363 + _493 - mem[64]
                        mem[64] = _699 + _359 + _363 + _493 + 32
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        s = _899
                        t = _110
                        continue 
                    mem[_359 + _363 + _493 + 32] = 0
                    _707 = mem[_212]
                    s = 0
                    while s < _707:
                        mem[s + _359 + _363 + _493 + 32] = mem[s + _212 + 32]
                        s = s + 32
                        continue 
                    if ceil32(_707) <= _707:
                        _884 = mem[64]
                        mem[mem[64]] = _707 + _359 + _363 + _493 - mem[64]
                        mem[64] = _707 + _359 + _363 + _493 + 32
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        s = _884
                        t = _110
                        continue 
                    mem[_359 + _363 + _493 + _707 + 32] = 0
                    _900 = mem[64]
                    mem[mem[64]] = _707 + _359 + _363 + _493 - mem[64]
                    mem[64] = _707 + _359 + _363 + _493 + 32
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    s = _900
                    t = _110
                    continue 
                mem[_359 + _363 + 32] = 0
                _499 = mem[_70]
                s = 0
                while s < _499:
                    mem[s + _359 + _363 + 32] = mem[s + _70 + 32]
                    s = s + 32
                    continue 
                if ceil32(_499) <= _499:
                    _700 = mem[_212]
                    s = 0
                    while s < _700:
                        mem[s + _359 + _363 + _499 + 32] = mem[s + _212 + 32]
                        s = s + 32
                        continue 
                    if ceil32(_700) <= _700:
                        _885 = mem[64]
                        mem[mem[64]] = _700 + _359 + _363 + _499 - mem[64]
                        mem[64] = _700 + _359 + _363 + _499 + 32
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        s = _885
                        t = _110
                        continue 
                    mem[_359 + _363 + _499 + _700 + 32] = 0
                    _901 = mem[64]
                    mem[mem[64]] = _700 + _359 + _363 + _499 - mem[64]
                    mem[64] = _700 + _359 + _363 + _499 + 32
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    s = _901
                    t = _110
                    continue 
                mem[_359 + _363 + _499 + 32] = 0
                _708 = mem[_212]
                s = 0
                while s < _708:
                    mem[s + _359 + _363 + _499 + 32] = mem[s + _212 + 32]
                    s = s + 32
                    continue 
                if ceil32(_708) <= _708:
                    _886 = mem[64]
                    mem[mem[64]] = _708 + _359 + _363 + _499 - mem[64]
                    mem[64] = _708 + _359 + _363 + _499 + 32
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    s = _886
                    t = _110
                    continue 
                mem[_359 + _363 + _499 + _708 + 32] = 0
                _902 = mem[64]
                mem[mem[64]] = _708 + _359 + _363 + _499 - mem[64]
                mem[64] = _708 + _359 + _363 + _499 + 32
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                s = _902
                t = _110
                continue 
            mem[_212 + 32 len u] = call.data[calldata.size len u]
            v = u
            t = _111
            while t:
                if v < 1:
                    revert with 0, 17
                if t / 10 > 0x1999999999999999999999999999999999999999999999999999999999999999:
                    revert with 0, 17
                if t < 10 * t / 10:
                    revert with 0, 17
                if 48 > -uint8(t - (10 * t / 10)) + 255:
                    revert with 0, 17
                if v - 1 >= mem[_212]:
                    revert with 0, 50
                mem[v + _212 + 31 len 8] = Mask(8, -(('mask_shl', 8, 0, 245, ('add', 48, ('mask_shl', 8, 0, 0, ('add', ('var', 2), ('mul', -10, ('div', ('var', 2), 10)))))), 0) + 256, 0) << (('mask_shl', 8, 0, 245, ('add', 48, ('mask_shl', 8, 0, 0, ('add', ('var', 2), ('mul', -10, ('div', ('var', 2), 10)))))), 0) - 256
                v = v - 1
                t = t / 10
                continue 
            _360 = mem[64]
            _364 = mem[s]
            t = 0
            while t < _364:
                mem[t + _360 + 32] = mem[t + s + 32]
                t = t + 32
                continue 
            if ceil32(_364) <= _364:
                _494 = mem[_70]
                s = 0
                while s < _494:
                    mem[s + _360 + _364 + 32] = mem[s + _70 + 32]
                    s = s + 32
                    continue 
                if ceil32(_494) <= _494:
                    _701 = mem[_212]
                    s = 0
                    while s < _701:
                        mem[s + _360 + _364 + _494 + 32] = mem[s + _212 + 32]
                        s = s + 32
                        continue 
                    if ceil32(_701) <= _701:
                        _887 = mem[64]
                        mem[mem[64]] = _701 + _360 + _364 + _494 - mem[64]
                        mem[64] = _701 + _360 + _364 + _494 + 32
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        s = _887
                        t = _110
                        continue 
                    mem[_360 + _364 + _494 + _701 + 32] = 0
                    _903 = mem[64]
                    mem[mem[64]] = _701 + _360 + _364 + _494 - mem[64]
                    mem[64] = _701 + _360 + _364 + _494 + 32
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    s = _903
                    t = _110
                    continue 
                mem[_360 + _364 + _494 + 32] = 0
                _709 = mem[_212]
                s = 0
                while s < _709:
                    mem[s + _360 + _364 + _494 + 32] = mem[s + _212 + 32]
                    s = s + 32
                    continue 
                if ceil32(_709) <= _709:
                    _888 = mem[64]
                    mem[mem[64]] = _709 + _360 + _364 + _494 - mem[64]
                    mem[64] = _709 + _360 + _364 + _494 + 32
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    s = _888
                    t = _110
                    continue 
                mem[_360 + _364 + _494 + _709 + 32] = 0
                _904 = mem[64]
                mem[mem[64]] = _709 + _360 + _364 + _494 - mem[64]
                mem[64] = _709 + _360 + _364 + _494 + 32
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                s = _904
                t = _110
                continue 
            mem[_360 + _364 + 32] = 0
            _500 = mem[_70]
            s = 0
            while s < _500:
                mem[s + _360 + _364 + 32] = mem[s + _70 + 32]
                s = s + 32
                continue 
            if ceil32(_500) <= _500:
                _702 = mem[_212]
                s = 0
                while s < _702:
                    mem[s + _360 + _364 + _500 + 32] = mem[s + _212 + 32]
                    s = s + 32
                    continue 
                if ceil32(_702) <= _702:
                    _889 = mem[64]
                    mem[mem[64]] = _702 + _360 + _364 + _500 - mem[64]
                    mem[64] = _702 + _360 + _364 + _500 + 32
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    s = _889
                    t = _110
                    continue 
                mem[_360 + _364 + _500 + _702 + 32] = 0
                _905 = mem[64]
                mem[mem[64]] = _702 + _360 + _364 + _500 - mem[64]
                mem[64] = _702 + _360 + _364 + _500 + 32
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                s = _905
                t = _110
                continue 
            mem[_360 + _364 + _500 + 32] = 0
            _710 = mem[_212]
            s = 0
            while s < _710:
                mem[s + _360 + _364 + _500 + 32] = mem[s + _212 + 32]
                s = s + 32
                continue 
            if ceil32(_710) <= _710:
                _890 = mem[64]
                mem[mem[64]] = _710 + _360 + _364 + _500 - mem[64]
                mem[64] = _710 + _360 + _364 + _500 + 32
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                s = _890
                t = _110
                continue 
            mem[_360 + _364 + _500 + _710 + 32] = 0
            _906 = mem[64]
            mem[mem[64]] = _710 + _360 + _364 + _500 - mem[64]
            mem[64] = _710 + _360 + _364 + _500 + 32
            if idx == -1:
                revert with 0, 17
            idx = idx + 1
            s = _906
            t = _110
            continue 
        _109 = mem[64]
        mem[mem[64]] = 32
        _112 = mem[s]
        mem[mem[64] + 32] = mem[s]
        mem[mem[64] + 64 len ceil32(_112)] = mem[s + 32 len ceil32(_112)]
        if ceil32(_112) <= _112:
            return 32, mem[mem[64] + 32 len ceil32(_112) + 32]
        mem[mem[64] + _112 + 64] = 0
        return memory
          from mem[64]
           len ceil32(_112) + _109 + -mem[64] + 64
    u = 0
    t = mem[mem[128] + 64]
    while t:
        if u == -1:
            revert with 0, 17
        u = u + 1
        t = t / 10
        continue 
    if u > test266151307():
        revert with 0, 65
    _108 = mem[64]
    mem[mem[64]] = u
    mem[64] = mem[64] + ceil32(u) + 32
    if not u:
        s = u
        idx = _65
        while idx:
            if s < 1:
                revert with 0, 17
            if idx / 10 > 0x1999999999999999999999999999999999999999999999999999999999999999:
                revert with 0, 17
            if idx < 10 * idx / 10:
                revert with 0, 17
            if 48 > -uint8(idx - (10 * idx / 10)) + 255:
                revert with 0, 17
            if s - 1 >= mem[_108]:
                revert with 0, 50
            mem[s + _108 + 31 len 8] = Mask(8, -(('mask_shl', 8, 0, 245, ('add', 48, ('mask_shl', 8, 0, 0, ('add', ('var', 0), ('mul', -10, ('div', ('var', 0), 10)))))), 0) + 256, 0) << (('mask_shl', 8, 0, 245, ('add', 48, ('mask_shl', 8, 0, 0, ('add', ('var', 0), ('mul', -10, ('div', ('var', 0), 10)))))), 0) - 256
            s = s - 1
            idx = idx / 10
            continue 
        _210 = mem[64]
        mem[64] = mem[64] + 64
        mem[_210] = 1
        mem[_210 + 32] = 0x2300000000000000000000000000000000000000000000000000000000000000
        idx = 1
        t = _108
        u = _61
        while idx < _57:
            if idx >= mem[96]:
                revert with 0, 50
            _354 = mem[(32 * idx) + 128]
            _355 = mem[mem[(32 * idx) + 128] + 64]
            if not mem[mem[(32 * idx) + 128] + 64]:
                _367 = mem[64]
                mem[64] = mem[64] + 64
                mem[_367] = 1
                mem[_367 + 32] = 0x3000000000000000000000000000000000000000000000000000000000000000
                _371 = mem[64]
                _374 = mem[t]
                u = 0
                while u < _374:
                    mem[u + _371 + 32] = mem[u + t + 32]
                    u = u + 32
                    continue 
                if ceil32(_374) <= _374:
                    _491 = mem[_210]
                    t = 0
                    while t < _491:
                        mem[t + _371 + _374 + 32] = mem[t + _210 + 32]
                        t = t + 32
                        continue 
                    if ceil32(_491) <= _491:
                        _693 = mem[_367]
                        s = 0
                        while s < _693:
                            mem[s + _371 + _374 + _491 + 32] = mem[s + _367 + 32]
                            s = s + 32
                            continue 
                        if ceil32(_693) <= _693:
                            _873 = mem[64]
                            mem[mem[64]] = _693 + _371 + _374 + _491 - mem[64]
                            mem[64] = _693 + _371 + _374 + _491 + 32
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            t = _873
                            u = _354
                            continue 
                        mem[_371 + _374 + _491 + _693 + 32] = 0
                        _891 = mem[64]
                        mem[mem[64]] = _693 + _371 + _374 + _491 - mem[64]
                        mem[64] = _693 + _371 + _374 + _491 + 32
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        t = _891
                        u = _354
                        continue 
                    mem[_371 + _374 + _491 + 32] = 0
                    _703 = mem[_367]
                    s = 0
                    while s < _703:
                        mem[s + _371 + _374 + _491 + 32] = mem[s + _367 + 32]
                        s = s + 32
                        continue 
                    if ceil32(_703) <= _703:
                        _874 = mem[64]
                        mem[mem[64]] = _703 + _371 + _374 + _491 - mem[64]
                        mem[64] = _703 + _371 + _374 + _491 + 32
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        t = _874
                        u = _354
                        continue 
                    mem[_371 + _374 + _491 + _703 + 32] = 0
                    _892 = mem[64]
                    mem[mem[64]] = _703 + _371 + _374 + _491 - mem[64]
                    mem[64] = _703 + _371 + _374 + _491 + 32
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    t = _892
                    u = _354
                    continue 
                mem[_371 + _374 + 32] = 0
                _496 = mem[_210]
                s = 0
                while s < _496:
                    mem[s + _371 + _374 + 32] = mem[s + _210 + 32]
                    s = s + 32
                    continue 
                if ceil32(_496) <= _496:
                    _694 = mem[_367]
                    s = 0
                    while s < _694:
                        mem[s + _371 + _374 + _496 + 32] = mem[s + _367 + 32]
                        s = s + 32
                        continue 
                    if ceil32(_694) <= _694:
                        _875 = mem[64]
                        mem[mem[64]] = _694 + _371 + _374 + _496 - mem[64]
                        mem[64] = _694 + _371 + _374 + _496 + 32
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        t = _875
                        u = _354
                        continue 
                    mem[_371 + _374 + _496 + _694 + 32] = 0
                    _893 = mem[64]
                    mem[mem[64]] = _694 + _371 + _374 + _496 - mem[64]
                    mem[64] = _694 + _371 + _374 + _496 + 32
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    t = _893
                    u = _354
                    continue 
                mem[_371 + _374 + _496 + 32] = 0
                _704 = mem[_367]
                s = 0
                while s < _704:
                    mem[s + _371 + _374 + _496 + 32] = mem[s + _367 + 32]
                    s = s + 32
                    continue 
                if ceil32(_704) <= _704:
                    _876 = mem[64]
                    mem[mem[64]] = _704 + _371 + _374 + _496 - mem[64]
                    mem[64] = _704 + _371 + _374 + _496 + 32
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    t = _876
                    u = _354
                    continue 
                mem[_371 + _374 + _496 + _704 + 32] = 0
                _894 = mem[64]
                mem[mem[64]] = _704 + _371 + _374 + _496 - mem[64]
                mem[64] = _704 + _371 + _374 + _496 + 32
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                t = _894
                u = _354
                continue 
            u = 0
            s = mem[mem[(32 * idx) + 128] + 64]
            while s:
                if u == -1:
                    revert with 0, 17
                u = u + 1
                s = s / 10
                continue 
            if u > test266151307():
                revert with 0, 65
            _489 = mem[64]
            mem[mem[64]] = u
            mem[64] = mem[64] + ceil32(u) + 32
            if not u:
                v = u
                s = _355
                while s:
                    if v < 1:
                        revert with 0, 17
                    if s / 10 > 0x1999999999999999999999999999999999999999999999999999999999999999:
                        revert with 0, 17
                    if s < 10 * s / 10:
                        revert with 0, 17
                    if 48 > -uint8(s - (10 * s / 10)) + 255:
                        revert with 0, 17
                    if v - 1 >= mem[_489]:
                        revert with 0, 50
                    mem[v + _489 + 31 len 8] = Mask(8, -(('mask_shl', 8, 0, 245, ('add', 48, ('mask_shl', 8, 0, 0, ('add', ('var', 1), ('mul', -10, ('div', ('var', 1), 10)))))), 0) + 256, 0) << (('mask_shl', 8, 0, 245, ('add', 48, ('mask_shl', 8, 0, 0, ('add', ('var', 1), ('mul', -10, ('div', ('var', 1), 10)))))), 0) - 256
                    v = v - 1
                    s = s / 10
                    continue 
                _687 = mem[64]
                _691 = mem[t]
                s = 0
                while s < _691:
                    mem[s + _687 + 32] = mem[s + t + 32]
                    s = s + 32
                    continue 
                if ceil32(_691) <= _691:
                    _867 = mem[_210]
                    s = 0
                    while s < _867:
                        mem[s + _687 + _691 + 32] = mem[s + _210 + 32]
                        s = s + 32
                        continue 
                    if ceil32(_867) <= _867:
                        _987 = mem[_489]
                        s = 0
                        while s < _987:
                            mem[s + _687 + _691 + _867 + 32] = mem[s + _489 + 32]
                            s = s + 32
                            continue 
                        if ceil32(_987) <= _987:
                            _1067 = mem[64]
                            mem[mem[64]] = _987 + _687 + _691 + _867 - mem[64]
                            mem[64] = _987 + _687 + _691 + _867 + 32
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            t = _1067
                            u = _354
                            continue 
                        mem[_687 + _691 + _867 + _987 + 32] = 0
                        _1083 = mem[64]
                        mem[mem[64]] = _987 + _687 + _691 + _867 - mem[64]
                        mem[64] = _987 + _687 + _691 + _867 + 32
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        t = _1083
                        u = _354
                        continue 
                    mem[_687 + _691 + _867 + 32] = 0
                    _995 = mem[_489]
                    s = 0
                    while s < _995:
                        mem[s + _687 + _691 + _867 + 32] = mem[s + _489 + 32]
                        s = s + 32
                        continue 
                    if ceil32(_995) <= _995:
                        _1068 = mem[64]
                        mem[mem[64]] = _995 + _687 + _691 + _867 - mem[64]
                        mem[64] = _995 + _687 + _691 + _867 + 32
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        t = _1068
                        u = _354
                        continue 
                    mem[_687 + _691 + _867 + _995 + 32] = 0
                    _1084 = mem[64]
                    mem[mem[64]] = _995 + _687 + _691 + _867 - mem[64]
                    mem[64] = _995 + _687 + _691 + _867 + 32
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    t = _1084
                    u = _354
                    continue 
                mem[_687 + _691 + 32] = 0
                _871 = mem[_210]
                s = 0
                while s < _871:
                    mem[s + _687 + _691 + 32] = mem[s + _210 + 32]
                    s = s + 32
                    continue 
                if ceil32(_871) <= _871:
                    _988 = mem[_489]
                    s = 0
                    while s < _988:
                        mem[s + _687 + _691 + _871 + 32] = mem[s + _489 + 32]
                        s = s + 32
                        continue 
                    if ceil32(_988) <= _988:
                        _1069 = mem[64]
                        mem[mem[64]] = _988 + _687 + _691 + _871 - mem[64]
                        mem[64] = _988 + _687 + _691 + _871 + 32
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        t = _1069
                        u = _354
                        continue 
                    mem[_687 + _691 + _871 + _988 + 32] = 0
                    _1085 = mem[64]
                    mem[mem[64]] = _988 + _687 + _691 + _871 - mem[64]
                    mem[64] = _988 + _687 + _691 + _871 + 32
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    t = _1085
                    u = _354
                    continue 
                mem[_687 + _691 + _871 + 32] = 0
                _996 = mem[_489]
                s = 0
                while s < _996:
                    mem[s + _687 + _691 + _871 + 32] = mem[s + _489 + 32]
                    s = s + 32
                    continue 
                if ceil32(_996) <= _996:
                    _1070 = mem[64]
                    mem[mem[64]] = _996 + _687 + _691 + _871 - mem[64]
                    mem[64] = _996 + _687 + _691 + _871 + 32
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    t = _1070
                    u = _354
                    continue 
                mem[_687 + _691 + _871 + _996 + 32] = 0
                _1086 = mem[64]
                mem[mem[64]] = _996 + _687 + _691 + _871 - mem[64]
                mem[64] = _996 + _687 + _691 + _871 + 32
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                t = _1086
                u = _354
                continue 
            mem[_489 + 32 len u] = call.data[calldata.size len u]
            v = u
            s = _355
            while s:
                if v < 1:
                    revert with 0, 17
                if s / 10 > 0x1999999999999999999999999999999999999999999999999999999999999999:
                    revert with 0, 17
                if s < 10 * s / 10:
                    revert with 0, 17
                if 48 > -uint8(s - (10 * s / 10)) + 255:
                    revert with 0, 17
                if v - 1 >= mem[_489]:
                    revert with 0, 50
                mem[v + _489 + 31 len 8] = Mask(8, -(('mask_shl', 8, 0, 245, ('add', 48, ('mask_shl', 8, 0, 0, ('add', ('var', 1), ('mul', -10, ('div', ('var', 1), 10)))))), 0) + 256, 0) << (('mask_shl', 8, 0, 245, ('add', 48, ('mask_shl', 8, 0, 0, ('add', ('var', 1), ('mul', -10, ('div', ('var', 1), 10)))))), 0) - 256
                v = v - 1
                s = s / 10
                continue 
            _688 = mem[64]
            _692 = mem[t]
            s = 0
            while s < _692:
                mem[s + _688 + 32] = mem[s + t + 32]
                s = s + 32
                continue 
            if ceil32(_692) <= _692:
                _868 = mem[_210]
                s = 0
                while s < _868:
                    mem[s + _688 + _692 + 32] = mem[s + _210 + 32]
                    s = s + 32
                    continue 
                if ceil32(_868) <= _868:
                    _989 = mem[_489]
                    s = 0
                    while s < _989:
                        mem[s + _688 + _692 + _868 + 32] = mem[s + _489 + 32]
                        s = s + 32
                        continue 
                    if ceil32(_989) <= _989:
                        _1071 = mem[64]
                        mem[mem[64]] = _989 + _688 + _692 + _868 - mem[64]
                        mem[64] = _989 + _688 + _692 + _868 + 32
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        t = _1071
                        u = _354
                        continue 
                    mem[_688 + _692 + _868 + _989 + 32] = 0
                    _1087 = mem[64]
                    mem[mem[64]] = _989 + _688 + _692 + _868 - mem[64]
                    mem[64] = _989 + _688 + _692 + _868 + 32
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    t = _1087
                    u = _354
                    continue 
                mem[_688 + _692 + _868 + 32] = 0
                _997 = mem[_489]
                s = 0
                while s < _997:
                    mem[s + _688 + _692 + _868 + 32] = mem[s + _489 + 32]
                    s = s + 32
                    continue 
                if ceil32(_997) <= _997:
                    _1072 = mem[64]
                    mem[mem[64]] = _997 + _688 + _692 + _868 - mem[64]
                    mem[64] = _997 + _688 + _692 + _868 + 32
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    t = _1072
                    u = _354
                    continue 
                mem[_688 + _692 + _868 + _997 + 32] = 0
                _1088 = mem[64]
                mem[mem[64]] = _997 + _688 + _692 + _868 - mem[64]
                mem[64] = _997 + _688 + _692 + _868 + 32
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                t = _1088
                u = _354
                continue 
            mem[_688 + _692 + 32] = 0
            _872 = mem[_210]
            s = 0
            while s < _872:
                mem[s + _688 + _692 + 32] = mem[s + _210 + 32]
                s = s + 32
                continue 
            if ceil32(_872) <= _872:
                _990 = mem[_489]
                s = 0
                while s < _990:
                    mem[s + _688 + _692 + _872 + 32] = mem[s + _489 + 32]
                    s = s + 32
                    continue 
                if ceil32(_990) <= _990:
                    _1073 = mem[64]
                    mem[mem[64]] = _990 + _688 + _692 + _872 - mem[64]
                    mem[64] = _990 + _688 + _692 + _872 + 32
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    t = _1073
                    u = _354
                    continue 
                mem[_688 + _692 + _872 + _990 + 32] = 0
                _1089 = mem[64]
                mem[mem[64]] = _990 + _688 + _692 + _872 - mem[64]
                mem[64] = _990 + _688 + _692 + _872 + 32
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                t = _1089
                u = _354
                continue 
            mem[_688 + _692 + _872 + 32] = 0
            _998 = mem[_489]
            s = 0
            while s < _998:
                mem[s + _688 + _692 + _872 + 32] = mem[s + _489 + 32]
                s = s + 32
                continue 
            if ceil32(_998) <= _998:
                _1074 = mem[64]
                mem[mem[64]] = _998 + _688 + _692 + _872 - mem[64]
                mem[64] = _998 + _688 + _692 + _872 + 32
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                t = _1074
                u = _354
                continue 
            mem[_688 + _692 + _872 + _998 + 32] = 0
            _1090 = mem[64]
            mem[mem[64]] = _998 + _688 + _692 + _872 - mem[64]
            mem[64] = _998 + _688 + _692 + _872 + 32
            if idx == -1:
                revert with 0, 17
            idx = idx + 1
            t = _1090
            u = _354
            continue 
        mem[mem[64]] = 32
        _361 = mem[t]
        mem[mem[64] + 32] = mem[t]
        mem[mem[64] + 64 len ceil32(_361)] = mem[t + 32 len ceil32(_361)]
        if ceil32(_361) > _361:
            mem[mem[64] + _361 + 64] = 0
        return 32, mem[mem[64] + 32 len ceil32(_361) + 32]
    mem[_108 + 32 len u] = call.data[calldata.size len u]
    s = u
    idx = _65
    while idx:
        if s < 1:
            revert with 0, 17
        if idx / 10 > 0x1999999999999999999999999999999999999999999999999999999999999999:
            revert with 0, 17
        if idx < 10 * idx / 10:
            revert with 0, 17
        if 48 > -uint8(idx - (10 * idx / 10)) + 255:
            revert with 0, 17
        if s - 1 >= mem[_108]:
            revert with 0, 50
        mem[s + _108 + 31 len 8] = Mask(8, -(('mask_shl', 8, 0, 245, ('add', 48, ('mask_shl', 8, 0, 0, ('add', ('var', 0), ('mul', -10, ('div', ('var', 0), 10)))))), 0) + 256, 0) << (('mask_shl', 8, 0, 245, ('add', 48, ('mask_shl', 8, 0, 0, ('add', ('var', 0), ('mul', -10, ('div', ('var', 0), 10)))))), 0) - 256
        s = s - 1
        idx = idx / 10
        continue 
    _211 = mem[64]
    mem[64] = mem[64] + 64
    mem[_211] = 1
    mem[_211 + 32] = 0x2300000000000000000000000000000000000000000000000000000000000000
    idx = 1
    t = _108
    u = _61
    while idx < _57:
        if idx >= mem[96]:
            revert with 0, 50
        _357 = mem[(32 * idx) + 128]
        _358 = mem[mem[(32 * idx) + 128] + 64]
        if not mem[mem[(32 * idx) + 128] + 64]:
            _368 = mem[64]
            mem[64] = mem[64] + 64
            mem[_368] = 1
            mem[_368 + 32] = 0x3000000000000000000000000000000000000000000000000000000000000000
            _372 = mem[64]
            _376 = mem[t]
            u = 0
            while u < _376:
                mem[u + _372 + 32] = mem[u + t + 32]
                u = u + 32
                continue 
            if ceil32(_376) <= _376:
                _492 = mem[_211]
                t = 0
                while t < _492:
                    mem[t + _372 + _376 + 32] = mem[t + _211 + 32]
                    t = t + 32
                    continue 
                if ceil32(_492) <= _492:
                    _697 = mem[_368]
                    s = 0
                    while s < _697:
                        mem[s + _372 + _376 + _492 + 32] = mem[s + _368 + 32]
                        s = s + 32
                        continue 
                    if ceil32(_697) <= _697:
                        _879 = mem[64]
                        mem[mem[64]] = _697 + _372 + _376 + _492 - mem[64]
                        mem[64] = _697 + _372 + _376 + _492 + 32
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        t = _879
                        u = _357
                        continue 
                    mem[_372 + _376 + _492 + _697 + 32] = 0
                    _895 = mem[64]
                    mem[mem[64]] = _697 + _372 + _376 + _492 - mem[64]
                    mem[64] = _697 + _372 + _376 + _492 + 32
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    t = _895
                    u = _357
                    continue 
                mem[_372 + _376 + _492 + 32] = 0
                _705 = mem[_368]
                s = 0
                while s < _705:
                    mem[s + _372 + _376 + _492 + 32] = mem[s + _368 + 32]
                    s = s + 32
                    continue 
                if ceil32(_705) <= _705:
                    _880 = mem[64]
                    mem[mem[64]] = _705 + _372 + _376 + _492 - mem[64]
                    mem[64] = _705 + _372 + _376 + _492 + 32
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    t = _880
                    u = _357
                    continue 
                mem[_372 + _376 + _492 + _705 + 32] = 0
                _896 = mem[64]
                mem[mem[64]] = _705 + _372 + _376 + _492 - mem[64]
                mem[64] = _705 + _372 + _376 + _492 + 32
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                t = _896
                u = _357
                continue 
            mem[_372 + _376 + 32] = 0
            _498 = mem[_211]
            s = 0
            while s < _498:
                mem[s + _372 + _376 + 32] = mem[s + _211 + 32]
                s = s + 32
                continue 
            if ceil32(_498) <= _498:
                _698 = mem[_368]
                s = 0
                while s < _698:
                    mem[s + _372 + _376 + _498 + 32] = mem[s + _368 + 32]
                    s = s + 32
                    continue 
                if ceil32(_698) <= _698:
                    _881 = mem[64]
                    mem[mem[64]] = _698 + _372 + _376 + _498 - mem[64]
                    mem[64] = _698 + _372 + _376 + _498 + 32
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    t = _881
                    u = _357
                    continue 
                mem[_372 + _376 + _498 + _698 + 32] = 0
                _897 = mem[64]
                mem[mem[64]] = _698 + _372 + _376 + _498 - mem[64]
                mem[64] = _698 + _372 + _376 + _498 + 32
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                t = _897
                u = _357
                continue 
            mem[_372 + _376 + _498 + 32] = 0
            _706 = mem[_368]
            s = 0
            while s < _706:
                mem[s + _372 + _376 + _498 + 32] = mem[s + _368 + 32]
                s = s + 32
                continue 
            if ceil32(_706) <= _706:
                _882 = mem[64]
                mem[mem[64]] = _706 + _372 + _376 + _498 - mem[64]
                mem[64] = _706 + _372 + _376 + _498 + 32
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                t = _882
                u = _357
                continue 
            mem[_372 + _376 + _498 + _706 + 32] = 0
            _898 = mem[64]
            mem[mem[64]] = _706 + _372 + _376 + _498 - mem[64]
            mem[64] = _706 + _372 + _376 + _498 + 32
            if idx == -1:
                revert with 0, 17
            idx = idx + 1
            t = _898
            u = _357
            continue 
        u = 0
        s = mem[mem[(32 * idx) + 128] + 64]
        while s:
            if u == -1:
                revert with 0, 17
            u = u + 1
            s = s / 10
            continue 
        if u > test266151307():
            revert with 0, 65
        _490 = mem[64]
        mem[mem[64]] = u
        mem[64] = mem[64] + ceil32(u) + 32
        if not u:
            v = u
            s = _358
            while s:
                if v < 1:
                    revert with 0, 17
                if s / 10 > 0x1999999999999999999999999999999999999999999999999999999999999999:
                    revert with 0, 17
                if s < 10 * s / 10:
                    revert with 0, 17
                if 48 > -uint8(s - (10 * s / 10)) + 255:
                    revert with 0, 17
                if v - 1 >= mem[_490]:
                    revert with 0, 50
                mem[v + _490 + 31 len 8] = Mask(8, -(('mask_shl', 8, 0, 245, ('add', 48, ('mask_shl', 8, 0, 0, ('add', ('var', 1), ('mul', -10, ('div', ('var', 1), 10)))))), 0) + 256, 0) << (('mask_shl', 8, 0, 245, ('add', 48, ('mask_shl', 8, 0, 0, ('add', ('var', 1), ('mul', -10, ('div', ('var', 1), 10)))))), 0) - 256
                v = v - 1
                s = s / 10
                continue 
            _689 = mem[64]
            _695 = mem[t]
            s = 0
            while s < _695:
                mem[s + _689 + 32] = mem[s + t + 32]
                s = s + 32
                continue 
            if ceil32(_695) <= _695:
                _869 = mem[_211]
                s = 0
                while s < _869:
                    mem[s + _689 + _695 + 32] = mem[s + _211 + 32]
                    s = s + 32
                    continue 
                if ceil32(_869) <= _869:
                    _991 = mem[_490]
                    s = 0
                    while s < _991:
                        mem[s + _689 + _695 + _869 + 32] = mem[s + _490 + 32]
                        s = s + 32
                        continue 
                    if ceil32(_991) <= _991:
                        _1075 = mem[64]
                        mem[mem[64]] = _991 + _689 + _695 + _869 - mem[64]
                        mem[64] = _991 + _689 + _695 + _869 + 32
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        t = _1075
                        u = _357
                        continue 
                    mem[_689 + _695 + _869 + _991 + 32] = 0
                    _1091 = mem[64]
                    mem[mem[64]] = _991 + _689 + _695 + _869 - mem[64]
                    mem[64] = _991 + _689 + _695 + _869 + 32
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    t = _1091
                    u = _357
                    continue 
                mem[_689 + _695 + _869 + 32] = 0
                _999 = mem[_490]
                s = 0
                while s < _999:
                    mem[s + _689 + _695 + _869 + 32] = mem[s + _490 + 32]
                    s = s + 32
                    continue 
                if ceil32(_999) <= _999:
                    _1076 = mem[64]
                    mem[mem[64]] = _999 + _689 + _695 + _869 - mem[64]
                    mem[64] = _999 + _689 + _695 + _869 + 32
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    t = _1076
                    u = _357
                    continue 
                mem[_689 + _695 + _869 + _999 + 32] = 0
                _1092 = mem[64]
                mem[mem[64]] = _999 + _689 + _695 + _869 - mem[64]
                mem[64] = _999 + _689 + _695 + _869 + 32
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                t = _1092
                u = _357
                continue 
            mem[_689 + _695 + 32] = 0
            _877 = mem[_211]
            s = 0
            while s < _877:
                mem[s + _689 + _695 + 32] = mem[s + _211 + 32]
                s = s + 32
                continue 
            if ceil32(_877) <= _877:
                _992 = mem[_490]
                s = 0
                while s < _992:
                    mem[s + _689 + _695 + _877 + 32] = mem[s + _490 + 32]
                    s = s + 32
                    continue 
                if ceil32(_992) <= _992:
                    _1077 = mem[64]
                    mem[mem[64]] = _992 + _689 + _695 + _877 - mem[64]
                    mem[64] = _992 + _689 + _695 + _877 + 32
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    t = _1077
                    u = _357
                    continue 
                mem[_689 + _695 + _877 + _992 + 32] = 0
                _1093 = mem[64]
                mem[mem[64]] = _992 + _689 + _695 + _877 - mem[64]
                mem[64] = _992 + _689 + _695 + _877 + 32
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                t = _1093
                u = _357
                continue 
            mem[_689 + _695 + _877 + 32] = 0
            _1000 = mem[_490]
            s = 0
            while s < _1000:
                mem[s + _689 + _695 + _877 + 32] = mem[s + _490 + 32]
                s = s + 32
                continue 
            if ceil32(_1000) <= _1000:
                _1078 = mem[64]
                mem[mem[64]] = _1000 + _689 + _695 + _877 - mem[64]
                mem[64] = _1000 + _689 + _695 + _877 + 32
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                t = _1078
                u = _357
                continue 
            mem[_689 + _695 + _877 + _1000 + 32] = 0
            _1094 = mem[64]
            mem[mem[64]] = _1000 + _689 + _695 + _877 - mem[64]
            mem[64] = _1000 + _689 + _695 + _877 + 32
            if idx == -1:
                revert with 0, 17
            idx = idx + 1
            t = _1094
            u = _357
            continue 
        mem[_490 + 32 len u] = call.data[calldata.size len u]
        v = u
        s = _358
        while s:
            if v < 1:
                revert with 0, 17
            if s / 10 > 0x1999999999999999999999999999999999999999999999999999999999999999:
                revert with 0, 17
            if s < 10 * s / 10:
                revert with 0, 17
            if 48 > -uint8(s - (10 * s / 10)) + 255:
                revert with 0, 17
            if v - 1 >= mem[_490]:
                revert with 0, 50
            mem[v + _490 + 31 len 8] = Mask(8, -(('mask_shl', 8, 0, 245, ('add', 48, ('mask_shl', 8, 0, 0, ('add', ('var', 1), ('mul', -10, ('div', ('var', 1), 10)))))), 0) + 256, 0) << (('mask_shl', 8, 0, 245, ('add', 48, ('mask_shl', 8, 0, 0, ('add', ('var', 1), ('mul', -10, ('div', ('var', 1), 10)))))), 0) - 256
            v = v - 1
            s = s / 10
            continue 
        _690 = mem[64]
        _696 = mem[t]
        s = 0
        while s < _696:
            mem[s + _690 + 32] = mem[s + t + 32]
            s = s + 32
            continue 
        if ceil32(_696) <= _696:
            _870 = mem[_211]
            s = 0
            while s < _870:
                mem[s + _690 + _696 + 32] = mem[s + _211 + 32]
                s = s + 32
                continue 
            if ceil32(_870) <= _870:
                _993 = mem[_490]
                s = 0
                while s < _993:
                    mem[s + _690 + _696 + _870 + 32] = mem[s + _490 + 32]
                    s = s + 32
                    continue 
                if ceil32(_993) <= _993:
                    _1079 = mem[64]
                    mem[mem[64]] = _993 + _690 + _696 + _870 - mem[64]
                    mem[64] = _993 + _690 + _696 + _870 + 32
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    t = _1079
                    u = _357
                    continue 
                mem[_690 + _696 + _870 + _993 + 32] = 0
                _1095 = mem[64]
                mem[mem[64]] = _993 + _690 + _696 + _870 - mem[64]
                mem[64] = _993 + _690 + _696 + _870 + 32
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                t = _1095
                u = _357
                continue 
            mem[_690 + _696 + _870 + 32] = 0
            _1001 = mem[_490]
            s = 0
            while s < _1001:
                mem[s + _690 + _696 + _870 + 32] = mem[s + _490 + 32]
                s = s + 32
                continue 
            if ceil32(_1001) <= _1001:
                _1080 = mem[64]
                mem[mem[64]] = _1001 + _690 + _696 + _870 - mem[64]
                mem[64] = _1001 + _690 + _696 + _870 + 32
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                t = _1080
                u = _357
                continue 
            mem[_690 + _696 + _870 + _1001 + 32] = 0
            _1096 = mem[64]
            mem[mem[64]] = _1001 + _690 + _696 + _870 - mem[64]
            mem[64] = _1001 + _690 + _696 + _870 + 32
            if idx == -1:
                revert with 0, 17
            idx = idx + 1
            t = _1096
            u = _357
            continue 
        mem[_690 + _696 + 32] = 0
        _878 = mem[_211]
        s = 0
        while s < _878:
            mem[s + _690 + _696 + 32] = mem[s + _211 + 32]
            s = s + 32
            continue 
        if ceil32(_878) <= _878:
            _994 = mem[_490]
            s = 0
            while s < _994:
                mem[s + _690 + _696 + _878 + 32] = mem[s + _490 + 32]
                s = s + 32
                continue 
            if ceil32(_994) <= _994:
                _1081 = mem[64]
                mem[mem[64]] = _994 + _690 + _696 + _878 - mem[64]
                mem[64] = _994 + _690 + _696 + _878 + 32
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                t = _1081
                u = _357
                continue 
            mem[_690 + _696 + _878 + _994 + 32] = 0
            _1097 = mem[64]
            mem[mem[64]] = _994 + _690 + _696 + _878 - mem[64]
            mem[64] = _994 + _690 + _696 + _878 + 32
            if idx == -1:
                revert with 0, 17
            idx = idx + 1
            t = _1097
            u = _357
            continue 
        mem[_690 + _696 + _878 + 32] = 0
        _1002 = mem[_490]
        s = 0
        while s < _1002:
            mem[s + _690 + _696 + _878 + 32] = mem[s + _490 + 32]
            s = s + 32
            continue 
        if ceil32(_1002) <= _1002:
            _1082 = mem[64]
            mem[mem[64]] = _1002 + _690 + _696 + _878 - mem[64]
            mem[64] = _1002 + _690 + _696 + _878 + 32
            if idx == -1:
                revert with 0, 17
            idx = idx + 1
            t = _1082
            u = _357
            continue 
        mem[_690 + _696 + _878 + _1002 + 32] = 0
        _1098 = mem[64]
        mem[mem[64]] = _1002 + _690 + _696 + _878 - mem[64]
        mem[64] = _1002 + _690 + _696 + _878 + 32
        if idx == -1:
            revert with 0, 17
        idx = idx + 1
        t = _1098
        u = _357
        continue 
    _356 = mem[64]
    mem[mem[64]] = 32
    _362 = mem[t]
    mem[mem[64] + 32] = mem[t]
    mem[mem[64] + 64 len ceil32(_362)] = mem[t + 32 len ceil32(_362)]
    if ceil32(_362) <= _362:
        return 32, mem[mem[64] + 32 len ceil32(_362) + 32]
    mem[mem[64] + _362 + 64] = 0
    return memory
      from mem[64]
       len ceil32(_362) + _356 + -mem[64] + 64
}

function sub_5dbab6ed(?) payable {
    require calldata.size - 4 >= 32
    require arg1 == address(arg1)
    if not sub_44fea1b9[address(arg1)]:
        return ''
    mem[0] = address(arg1)
    mem[32] = 5
    mem[64] = (32 * stor5[address(arg1)].field_0) + 128
    mem[96] = stor5[address(arg1)].field_0
    s = 128
    idx = 0
    while idx < stor5[address(arg1)].field_0:
        mem[0] = sha3(address(arg1), 5)
        _59 = mem[64]
        mem[64] = mem[64] + 192
        if bool(stor5[address(arg1)][idx].field_0):
            if bool(stor5[address(arg1)][idx].field_0) == uint255(stor5[address(arg1)][idx].field_0) * 0.5 < 32:
                revert with 0, 34
            _66 = mem[64]
            mem[64] = mem[64] + ceil32(uint255(stor5[address(arg1)][idx].field_0) * 0.5) + 32
            mem[_66] = uint255(stor5[address(arg1)][idx].field_0) * 0.5
            if bool(stor5[address(arg1)][idx].field_0):
                if bool(stor5[address(arg1)][idx].field_0) == uint255(stor5[address(arg1)][idx].field_0) * 0.5 < 32:
                    revert with 0, 34
                if Mask(256, -1, stor5[address(arg1)][idx].field_0):
                    if 31 >= uint255(stor5[address(arg1)][idx].field_0) * 0.5:
                        mem[_66 + 32] = 256 * Mask(248, 0, stor5[address(arg1)][idx].field_8)
                    else:
                        mem[0] = (6 * idx) + sha3(sha3(address(arg1), 5))
                        mem[_66 + 32] = stor5[address(arg1)][idx].field_0
                        t = _66 + 32
                        u = sha3(mem[0])
                        while _66 + (uint255(stor5[address(arg1)][idx].field_0) * 0.5) > t:
                            mem[t + 32] = uint256(stor1[u])
                            t = t + 32
                            u = u + 1
                            continue 
            else:
                if bool(stor5[address(arg1)][idx].field_0) == stor5[address(arg1)][idx].field_1 % 128 < 32:
                    revert with 0, 34
                if stor5[address(arg1)][idx].field_1 % 128:
                    if 31 >= stor5[address(arg1)][idx].field_1 % 128:
                        mem[_66 + 32] = 256 * Mask(248, 0, stor5[address(arg1)][idx].field_8)
                    else:
                        mem[0] = (6 * idx) + sha3(sha3(address(arg1), 5))
                        mem[_66 + 32] = stor5[address(arg1)][idx].field_0
                        t = _66 + 32
                        u = sha3(mem[0])
                        while _66 + stor5[address(arg1)][idx].field_1 % 128 > t:
                            mem[t + 32] = uint256(stor1[u])
                            t = t + 32
                            u = u + 1
                            continue 
            mem[_59] = _66
        else:
            if bool(stor5[address(arg1)][idx].field_0) == stor5[address(arg1)][idx].field_1 % 128 < 32:
                revert with 0, 34
            _68 = mem[64]
            mem[64] = mem[64] + ceil32(stor5[address(arg1)][idx].field_1 % 128) + 32
            mem[_68] = stor5[address(arg1)][idx].field_1 % 128
            if bool(stor5[address(arg1)][idx].field_0):
                if bool(stor5[address(arg1)][idx].field_0) == uint255(stor5[address(arg1)][idx].field_0) * 0.5 < 32:
                    revert with 0, 34
                if Mask(256, -1, stor5[address(arg1)][idx].field_0):
                    if 31 >= uint255(stor5[address(arg1)][idx].field_0) * 0.5:
                        mem[_68 + 32] = 256 * Mask(248, 0, stor5[address(arg1)][idx].field_8)
                    else:
                        mem[0] = (6 * idx) + sha3(sha3(address(arg1), 5))
                        mem[_68 + 32] = stor5[address(arg1)][idx].field_0
                        t = _68 + 32
                        u = sha3(mem[0])
                        while _68 + (uint255(stor5[address(arg1)][idx].field_0) * 0.5) > t:
                            mem[t + 32] = uint256(stor1[u])
                            t = t + 32
                            u = u + 1
                            continue 
            else:
                if bool(stor5[address(arg1)][idx].field_0) == stor5[address(arg1)][idx].field_1 % 128 < 32:
                    revert with 0, 34
                if stor5[address(arg1)][idx].field_1 % 128:
                    if 31 >= stor5[address(arg1)][idx].field_1 % 128:
                        mem[_68 + 32] = 256 * Mask(248, 0, stor5[address(arg1)][idx].field_8)
                    else:
                        mem[0] = (6 * idx) + sha3(sha3(address(arg1), 5))
                        mem[_68 + 32] = stor5[address(arg1)][idx].field_0
                        t = _68 + 32
                        u = sha3(mem[0])
                        while _68 + stor5[address(arg1)][idx].field_1 % 128 > t:
                            mem[t + 32] = uint256(stor1[u])
                            t = t + 32
                            u = u + 1
                            continue 
            mem[_59] = _68
        mem[_59 + 32] = stor5[address(arg1)][idx].field_256
        mem[_59 + 64] = stor5[address(arg1)][idx].field_512
        mem[_59 + 96] = stor5[address(arg1)][idx].field_768
        mem[_59 + 128] = stor5[address(arg1)][idx].field_1024
        if uint8(stor5[address(arg1)][idx].field_1280) > 2:
            revert with 0, 33
        mem[_59 + 160] = uint8(stor5[address(arg1)][idx].field_1280)
        mem[s] = _59
        s = s + 32
        idx = idx + 1
        continue 
    _57 = mem[96]
    _61 = mem[64]
    mem[64] = mem[64] + 192
    mem[_61] = 96
    mem[_61 + 32] = 0
    mem[_61 + 64] = 0
    mem[_61 + 96] = 0
    mem[_61 + 128] = 0
    mem[_61 + 160] = 0
    if 0 >= mem[96]:
        revert with 0, 50
    _65 = mem[mem[128] + 96]
    if not mem[mem[128] + 96]:
        _69 = mem[64]
        mem[64] = mem[64] + 64
        mem[_69] = 1
        mem[_69 + 32] = 0x3000000000000000000000000000000000000000000000000000000000000000
        _70 = mem[64]
        mem[64] = mem[64] + 64
        mem[_70] = 1
        mem[_70 + 32] = 0x2300000000000000000000000000000000000000000000000000000000000000
        idx = 1
        s = _69
        t = _61
        while idx < _57:
            if idx >= mem[96]:
                revert with 0, 50
            _110 = mem[(32 * idx) + 128]
            _111 = mem[mem[(32 * idx) + 128] + 96]
            if not mem[mem[(32 * idx) + 128] + 96]:
                _113 = mem[64]
                mem[64] = mem[64] + 64
                mem[_113] = 1
                mem[_113 + 32] = 0x3000000000000000000000000000000000000000000000000000000000000000
                _114 = mem[64]
                _117 = mem[s]
                t = 0
                while t < _117:
                    mem[t + _114 + 32] = mem[t + s + 32]
                    t = t + 32
                    continue 
                if ceil32(_117) <= _117:
                    _213 = mem[_70]
                    s = 0
                    while s < _213:
                        mem[s + _114 + _117 + 32] = mem[s + _70 + 32]
                        s = s + 32
                        continue 
                    if ceil32(_213) <= _213:
                        _365 = mem[_113]
                        s = 0
                        while s < _365:
                            mem[s + _114 + _117 + _213 + 32] = mem[s + _113 + 32]
                            s = s + 32
                            continue 
                        if ceil32(_365) <= _365:
                            _501 = mem[64]
                            mem[mem[64]] = _365 + _114 + _117 + _213 - mem[64]
                            mem[64] = _365 + _114 + _117 + _213 + 32
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            s = _501
                            t = _110
                            continue 
                        mem[_114 + _117 + _213 + _365 + 32] = 0
                        _507 = mem[64]
                        mem[mem[64]] = _365 + _114 + _117 + _213 - mem[64]
                        mem[64] = _365 + _114 + _117 + _213 + 32
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        s = _507
                        t = _110
                        continue 
                    mem[_114 + _117 + _213 + 32] = 0
                    _369 = mem[_113]
                    s = 0
                    while s < _369:
                        mem[s + _114 + _117 + _213 + 32] = mem[s + _113 + 32]
                        s = s + 32
                        continue 
                    if ceil32(_369) <= _369:
                        _502 = mem[64]
                        mem[mem[64]] = _369 + _114 + _117 + _213 - mem[64]
                        mem[64] = _369 + _114 + _117 + _213 + 32
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        s = _502
                        t = _110
                        continue 
                    mem[_114 + _117 + _213 + _369 + 32] = 0
                    _508 = mem[64]
                    mem[mem[64]] = _369 + _114 + _117 + _213 - mem[64]
                    mem[64] = _369 + _114 + _117 + _213 + 32
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    s = _508
                    t = _110
                    continue 
                mem[_114 + _117 + 32] = 0
                _217 = mem[_70]
                s = 0
                while s < _217:
                    mem[s + _114 + _117 + 32] = mem[s + _70 + 32]
                    s = s + 32
                    continue 
                if ceil32(_217) <= _217:
                    _366 = mem[_113]
                    s = 0
                    while s < _366:
                        mem[s + _114 + _117 + _217 + 32] = mem[s + _113 + 32]
                        s = s + 32
                        continue 
                    if ceil32(_366) <= _366:
                        _503 = mem[64]
                        mem[mem[64]] = _366 + _114 + _117 + _217 - mem[64]
                        mem[64] = _366 + _114 + _117 + _217 + 32
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        s = _503
                        t = _110
                        continue 
                    mem[_114 + _117 + _217 + _366 + 32] = 0
                    _509 = mem[64]
                    mem[mem[64]] = _366 + _114 + _117 + _217 - mem[64]
                    mem[64] = _366 + _114 + _117 + _217 + 32
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    s = _509
                    t = _110
                    continue 
                mem[_114 + _117 + _217 + 32] = 0
                _370 = mem[_113]
                s = 0
                while s < _370:
                    mem[s + _114 + _117 + _217 + 32] = mem[s + _113 + 32]
                    s = s + 32
                    continue 
                if ceil32(_370) <= _370:
                    _504 = mem[64]
                    mem[mem[64]] = _370 + _114 + _117 + _217 - mem[64]
                    mem[64] = _370 + _114 + _117 + _217 + 32
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    s = _504
                    t = _110
                    continue 
                mem[_114 + _117 + _217 + _370 + 32] = 0
                _510 = mem[64]
                mem[mem[64]] = _370 + _114 + _117 + _217 - mem[64]
                mem[64] = _370 + _114 + _117 + _217 + 32
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                s = _510
                t = _110
                continue 
            u = 0
            t = mem[mem[(32 * idx) + 128] + 96]
            while t:
                if u == -1:
                    revert with 0, 17
                u = u + 1
                t = t / 10
                continue 
            if u > test266151307():
                revert with 0, 65
            _212 = mem[64]
            mem[mem[64]] = u
            mem[64] = mem[64] + ceil32(u) + 32
            if not u:
                v = u
                t = _111
                while t:
                    if v < 1:
                        revert with 0, 17
                    if t / 10 > 0x1999999999999999999999999999999999999999999999999999999999999999:
                        revert with 0, 17
                    if t < 10 * t / 10:
                        revert with 0, 17
                    if 48 > -uint8(t - (10 * t / 10)) + 255:
                        revert with 0, 17
                    if v - 1 >= mem[_212]:
                        revert with 0, 50
                    mem[v + _212 + 31 len 8] = Mask(8, -(('mask_shl', 8, 0, 245, ('add', 48, ('mask_shl', 8, 0, 0, ('add', ('var', 2), ('mul', -10, ('div', ('var', 2), 10)))))), 0) + 256, 0) << (('mask_shl', 8, 0, 245, ('add', 48, ('mask_shl', 8, 0, 0, ('add', ('var', 2), ('mul', -10, ('div', ('var', 2), 10)))))), 0) - 256
                    v = v - 1
                    t = t / 10
                    continue 
                _359 = mem[64]
                _363 = mem[s]
                t = 0
                while t < _363:
                    mem[t + _359 + 32] = mem[t + s + 32]
                    t = t + 32
                    continue 
                if ceil32(_363) <= _363:
                    _493 = mem[_70]
                    s = 0
                    while s < _493:
                        mem[s + _359 + _363 + 32] = mem[s + _70 + 32]
                        s = s + 32
                        continue 
                    if ceil32(_493) <= _493:
                        _699 = mem[_212]
                        s = 0
                        while s < _699:
                            mem[s + _359 + _363 + _493 + 32] = mem[s + _212 + 32]
                            s = s + 32
                            continue 
                        if ceil32(_699) <= _699:
                            _883 = mem[64]
                            mem[mem[64]] = _699 + _359 + _363 + _493 - mem[64]
                            mem[64] = _699 + _359 + _363 + _493 + 32
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            s = _883
                            t = _110
                            continue 
                        mem[_359 + _363 + _493 + _699 + 32] = 0
                        _899 = mem[64]
                        mem[mem[64]] = _699 + _359 + _363 + _493 - mem[64]
                        mem[64] = _699 + _359 + _363 + _493 + 32
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        s = _899
                        t = _110
                        continue 
                    mem[_359 + _363 + _493 + 32] = 0
                    _707 = mem[_212]
                    s = 0
                    while s < _707:
                        mem[s + _359 + _363 + _493 + 32] = mem[s + _212 + 32]
                        s = s + 32
                        continue 
                    if ceil32(_707) <= _707:
                        _884 = mem[64]
                        mem[mem[64]] = _707 + _359 + _363 + _493 - mem[64]
                        mem[64] = _707 + _359 + _363 + _493 + 32
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        s = _884
                        t = _110
                        continue 
                    mem[_359 + _363 + _493 + _707 + 32] = 0
                    _900 = mem[64]
                    mem[mem[64]] = _707 + _359 + _363 + _493 - mem[64]
                    mem[64] = _707 + _359 + _363 + _493 + 32
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    s = _900
                    t = _110
                    continue 
                mem[_359 + _363 + 32] = 0
                _499 = mem[_70]
                s = 0
                while s < _499:
                    mem[s + _359 + _363 + 32] = mem[s + _70 + 32]
                    s = s + 32
                    continue 
                if ceil32(_499) <= _499:
                    _700 = mem[_212]
                    s = 0
                    while s < _700:
                        mem[s + _359 + _363 + _499 + 32] = mem[s + _212 + 32]
                        s = s + 32
                        continue 
                    if ceil32(_700) <= _700:
                        _885 = mem[64]
                        mem[mem[64]] = _700 + _359 + _363 + _499 - mem[64]
                        mem[64] = _700 + _359 + _363 + _499 + 32
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        s = _885
                        t = _110
                        continue 
                    mem[_359 + _363 + _499 + _700 + 32] = 0
                    _901 = mem[64]
                    mem[mem[64]] = _700 + _359 + _363 + _499 - mem[64]
                    mem[64] = _700 + _359 + _363 + _499 + 32
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    s = _901
                    t = _110
                    continue 
                mem[_359 + _363 + _499 + 32] = 0
                _708 = mem[_212]
                s = 0
                while s < _708:
                    mem[s + _359 + _363 + _499 + 32] = mem[s + _212 + 32]
                    s = s + 32
                    continue 
                if ceil32(_708) <= _708:
                    _886 = mem[64]
                    mem[mem[64]] = _708 + _359 + _363 + _499 - mem[64]
                    mem[64] = _708 + _359 + _363 + _499 + 32
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    s = _886
                    t = _110
                    continue 
                mem[_359 + _363 + _499 + _708 + 32] = 0
                _902 = mem[64]
                mem[mem[64]] = _708 + _359 + _363 + _499 - mem[64]
                mem[64] = _708 + _359 + _363 + _499 + 32
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                s = _902
                t = _110
                continue 
            mem[_212 + 32 len u] = call.data[calldata.size len u]
            v = u
            t = _111
            while t:
                if v < 1:
                    revert with 0, 17
                if t / 10 > 0x1999999999999999999999999999999999999999999999999999999999999999:
                    revert with 0, 17
                if t < 10 * t / 10:
                    revert with 0, 17
                if 48 > -uint8(t - (10 * t / 10)) + 255:
                    revert with 0, 17
                if v - 1 >= mem[_212]:
                    revert with 0, 50
                mem[v + _212 + 31 len 8] = Mask(8, -(('mask_shl', 8, 0, 245, ('add', 48, ('mask_shl', 8, 0, 0, ('add', ('var', 2), ('mul', -10, ('div', ('var', 2), 10)))))), 0) + 256, 0) << (('mask_shl', 8, 0, 245, ('add', 48, ('mask_shl', 8, 0, 0, ('add', ('var', 2), ('mul', -10, ('div', ('var', 2), 10)))))), 0) - 256
                v = v - 1
                t = t / 10
                continue 
            _360 = mem[64]
            _364 = mem[s]
            t = 0
            while t < _364:
                mem[t + _360 + 32] = mem[t + s + 32]
                t = t + 32
                continue 
            if ceil32(_364) <= _364:
                _494 = mem[_70]
                s = 0
                while s < _494:
                    mem[s + _360 + _364 + 32] = mem[s + _70 + 32]
                    s = s + 32
                    continue 
                if ceil32(_494) <= _494:
                    _701 = mem[_212]
                    s = 0
                    while s < _701:
                        mem[s + _360 + _364 + _494 + 32] = mem[s + _212 + 32]
                        s = s + 32
                        continue 
                    if ceil32(_701) <= _701:
                        _887 = mem[64]
                        mem[mem[64]] = _701 + _360 + _364 + _494 - mem[64]
                        mem[64] = _701 + _360 + _364 + _494 + 32
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        s = _887
                        t = _110
                        continue 
                    mem[_360 + _364 + _494 + _701 + 32] = 0
                    _903 = mem[64]
                    mem[mem[64]] = _701 + _360 + _364 + _494 - mem[64]
                    mem[64] = _701 + _360 + _364 + _494 + 32
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    s = _903
                    t = _110
                    continue 
                mem[_360 + _364 + _494 + 32] = 0
                _709 = mem[_212]
                s = 0
                while s < _709:
                    mem[s + _360 + _364 + _494 + 32] = mem[s + _212 + 32]
                    s = s + 32
                    continue 
                if ceil32(_709) <= _709:
                    _888 = mem[64]
                    mem[mem[64]] = _709 + _360 + _364 + _494 - mem[64]
                    mem[64] = _709 + _360 + _364 + _494 + 32
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    s = _888
                    t = _110
                    continue 
                mem[_360 + _364 + _494 + _709 + 32] = 0
                _904 = mem[64]
                mem[mem[64]] = _709 + _360 + _364 + _494 - mem[64]
                mem[64] = _709 + _360 + _364 + _494 + 32
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                s = _904
                t = _110
                continue 
            mem[_360 + _364 + 32] = 0
            _500 = mem[_70]
            s = 0
            while s < _500:
                mem[s + _360 + _364 + 32] = mem[s + _70 + 32]
                s = s + 32
                continue 
            if ceil32(_500) <= _500:
                _702 = mem[_212]
                s = 0
                while s < _702:
                    mem[s + _360 + _364 + _500 + 32] = mem[s + _212 + 32]
                    s = s + 32
                    continue 
                if ceil32(_702) <= _702:
                    _889 = mem[64]
                    mem[mem[64]] = _702 + _360 + _364 + _500 - mem[64]
                    mem[64] = _702 + _360 + _364 + _500 + 32
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    s = _889
                    t = _110
                    continue 
                mem[_360 + _364 + _500 + _702 + 32] = 0
                _905 = mem[64]
                mem[mem[64]] = _702 + _360 + _364 + _500 - mem[64]
                mem[64] = _702 + _360 + _364 + _500 + 32
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                s = _905
                t = _110
                continue 
            mem[_360 + _364 + _500 + 32] = 0
            _710 = mem[_212]
            s = 0
            while s < _710:
                mem[s + _360 + _364 + _500 + 32] = mem[s + _212 + 32]
                s = s + 32
                continue 
            if ceil32(_710) <= _710:
                _890 = mem[64]
                mem[mem[64]] = _710 + _360 + _364 + _500 - mem[64]
                mem[64] = _710 + _360 + _364 + _500 + 32
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                s = _890
                t = _110
                continue 
            mem[_360 + _364 + _500 + _710 + 32] = 0
            _906 = mem[64]
            mem[mem[64]] = _710 + _360 + _364 + _500 - mem[64]
            mem[64] = _710 + _360 + _364 + _500 + 32
            if idx == -1:
                revert with 0, 17
            idx = idx + 1
            s = _906
            t = _110
            continue 
        _109 = mem[64]
        mem[mem[64]] = 32
        _112 = mem[s]
        mem[mem[64] + 32] = mem[s]
        mem[mem[64] + 64 len ceil32(_112)] = mem[s + 32 len ceil32(_112)]
        if ceil32(_112) <= _112:
            return 32, mem[mem[64] + 32 len ceil32(_112) + 32]
        mem[mem[64] + _112 + 64] = 0
        return memory
          from mem[64]
           len ceil32(_112) + _109 + -mem[64] + 64
    u = 0
    t = mem[mem[128] + 96]
    while t:
        if u == -1:
            revert with 0, 17
        u = u + 1
        t = t / 10
        continue 
    if u > test266151307():
        revert with 0, 65
    _108 = mem[64]
    mem[mem[64]] = u
    mem[64] = mem[64] + ceil32(u) + 32
    if not u:
        s = u
        idx = _65
        while idx:
            if s < 1:
                revert with 0, 17
            if idx / 10 > 0x1999999999999999999999999999999999999999999999999999999999999999:
                revert with 0, 17
            if idx < 10 * idx / 10:
                revert with 0, 17
            if 48 > -uint8(idx - (10 * idx / 10)) + 255:
                revert with 0, 17
            if s - 1 >= mem[_108]:
                revert with 0, 50
            mem[s + _108 + 31 len 8] = Mask(8, -(('mask_shl', 8, 0, 245, ('add', 48, ('mask_shl', 8, 0, 0, ('add', ('var', 0), ('mul', -10, ('div', ('var', 0), 10)))))), 0) + 256, 0) << (('mask_shl', 8, 0, 245, ('add', 48, ('mask_shl', 8, 0, 0, ('add', ('var', 0), ('mul', -10, ('div', ('var', 0), 10)))))), 0) - 256
            s = s - 1
            idx = idx / 10
            continue 
        _210 = mem[64]
        mem[64] = mem[64] + 64
        mem[_210] = 1
        mem[_210 + 32] = 0x2300000000000000000000000000000000000000000000000000000000000000
        idx = 1
        t = _108
        u = _61
        while idx < _57:
            if idx >= mem[96]:
                revert with 0, 50
            _354 = mem[(32 * idx) + 128]
            _355 = mem[mem[(32 * idx) + 128] + 96]
            if not mem[mem[(32 * idx) + 128] + 96]:
                _367 = mem[64]
                mem[64] = mem[64] + 64
                mem[_367] = 1
                mem[_367 + 32] = 0x3000000000000000000000000000000000000000000000000000000000000000
                _371 = mem[64]
                _374 = mem[t]
                u = 0
                while u < _374:
                    mem[u + _371 + 32] = mem[u + t + 32]
                    u = u + 32
                    continue 
                if ceil32(_374) <= _374:
                    _491 = mem[_210]
                    t = 0
                    while t < _491:
                        mem[t + _371 + _374 + 32] = mem[t + _210 + 32]
                        t = t + 32
                        continue 
                    if ceil32(_491) <= _491:
                        _693 = mem[_367]
                        s = 0
                        while s < _693:
                            mem[s + _371 + _374 + _491 + 32] = mem[s + _367 + 32]
                            s = s + 32
                            continue 
                        if ceil32(_693) <= _693:
                            _873 = mem[64]
                            mem[mem[64]] = _693 + _371 + _374 + _491 - mem[64]
                            mem[64] = _693 + _371 + _374 + _491 + 32
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            t = _873
                            u = _354
                            continue 
                        mem[_371 + _374 + _491 + _693 + 32] = 0
                        _891 = mem[64]
                        mem[mem[64]] = _693 + _371 + _374 + _491 - mem[64]
                        mem[64] = _693 + _371 + _374 + _491 + 32
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        t = _891
                        u = _354
                        continue 
                    mem[_371 + _374 + _491 + 32] = 0
                    _703 = mem[_367]
                    s = 0
                    while s < _703:
                        mem[s + _371 + _374 + _491 + 32] = mem[s + _367 + 32]
                        s = s + 32
                        continue 
                    if ceil32(_703) <= _703:
                        _874 = mem[64]
                        mem[mem[64]] = _703 + _371 + _374 + _491 - mem[64]
                        mem[64] = _703 + _371 + _374 + _491 + 32
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        t = _874
                        u = _354
                        continue 
                    mem[_371 + _374 + _491 + _703 + 32] = 0
                    _892 = mem[64]
                    mem[mem[64]] = _703 + _371 + _374 + _491 - mem[64]
                    mem[64] = _703 + _371 + _374 + _491 + 32
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    t = _892
                    u = _354
                    continue 
                mem[_371 + _374 + 32] = 0
                _496 = mem[_210]
                s = 0
                while s < _496:
                    mem[s + _371 + _374 + 32] = mem[s + _210 + 32]
                    s = s + 32
                    continue 
                if ceil32(_496) <= _496:
                    _694 = mem[_367]
                    s = 0
                    while s < _694:
                        mem[s + _371 + _374 + _496 + 32] = mem[s + _367 + 32]
                        s = s + 32
                        continue 
                    if ceil32(_694) <= _694:
                        _875 = mem[64]
                        mem[mem[64]] = _694 + _371 + _374 + _496 - mem[64]
                        mem[64] = _694 + _371 + _374 + _496 + 32
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        t = _875
                        u = _354
                        continue 
                    mem[_371 + _374 + _496 + _694 + 32] = 0
                    _893 = mem[64]
                    mem[mem[64]] = _694 + _371 + _374 + _496 - mem[64]
                    mem[64] = _694 + _371 + _374 + _496 + 32
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    t = _893
                    u = _354
                    continue 
                mem[_371 + _374 + _496 + 32] = 0
                _704 = mem[_367]
                s = 0
                while s < _704:
                    mem[s + _371 + _374 + _496 + 32] = mem[s + _367 + 32]
                    s = s + 32
                    continue 
                if ceil32(_704) <= _704:
                    _876 = mem[64]
                    mem[mem[64]] = _704 + _371 + _374 + _496 - mem[64]
                    mem[64] = _704 + _371 + _374 + _496 + 32
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    t = _876
                    u = _354
                    continue 
                mem[_371 + _374 + _496 + _704 + 32] = 0
                _894 = mem[64]
                mem[mem[64]] = _704 + _371 + _374 + _496 - mem[64]
                mem[64] = _704 + _371 + _374 + _496 + 32
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                t = _894
                u = _354
                continue 
            u = 0
            s = mem[mem[(32 * idx) + 128] + 96]
            while s:
                if u == -1:
                    revert with 0, 17
                u = u + 1
                s = s / 10
                continue 
            if u > test266151307():
                revert with 0, 65
            _489 = mem[64]
            mem[mem[64]] = u
            mem[64] = mem[64] + ceil32(u) + 32
            if not u:
                v = u
                s = _355
                while s:
                    if v < 1:
                        revert with 0, 17
                    if s / 10 > 0x1999999999999999999999999999999999999999999999999999999999999999:
                        revert with 0, 17
                    if s < 10 * s / 10:
                        revert with 0, 17
                    if 48 > -uint8(s - (10 * s / 10)) + 255:
                        revert with 0, 17
                    if v - 1 >= mem[_489]:
                        revert with 0, 50
                    mem[v + _489 + 31 len 8] = Mask(8, -(('mask_shl', 8, 0, 245, ('add', 48, ('mask_shl', 8, 0, 0, ('add', ('var', 1), ('mul', -10, ('div', ('var', 1), 10)))))), 0) + 256, 0) << (('mask_shl', 8, 0, 245, ('add', 48, ('mask_shl', 8, 0, 0, ('add', ('var', 1), ('mul', -10, ('div', ('var', 1), 10)))))), 0) - 256
                    v = v - 1
                    s = s / 10
                    continue 
                _687 = mem[64]
                _691 = mem[t]
                s = 0
                while s < _691:
                    mem[s + _687 + 32] = mem[s + t + 32]
                    s = s + 32
                    continue 
                if ceil32(_691) <= _691:
                    _867 = mem[_210]
                    s = 0
                    while s < _867:
                        mem[s + _687 + _691 + 32] = mem[s + _210 + 32]
                        s = s + 32
                        continue 
                    if ceil32(_867) <= _867:
                        _987 = mem[_489]
                        s = 0
                        while s < _987:
                            mem[s + _687 + _691 + _867 + 32] = mem[s + _489 + 32]
                            s = s + 32
                            continue 
                        if ceil32(_987) <= _987:
                            _1067 = mem[64]
                            mem[mem[64]] = _987 + _687 + _691 + _867 - mem[64]
                            mem[64] = _987 + _687 + _691 + _867 + 32
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            t = _1067
                            u = _354
                            continue 
                        mem[_687 + _691 + _867 + _987 + 32] = 0
                        _1083 = mem[64]
                        mem[mem[64]] = _987 + _687 + _691 + _867 - mem[64]
                        mem[64] = _987 + _687 + _691 + _867 + 32
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        t = _1083
                        u = _354
                        continue 
                    mem[_687 + _691 + _867 + 32] = 0
                    _995 = mem[_489]
                    s = 0
                    while s < _995:
                        mem[s + _687 + _691 + _867 + 32] = mem[s + _489 + 32]
                        s = s + 32
                        continue 
                    if ceil32(_995) <= _995:
                        _1068 = mem[64]
                        mem[mem[64]] = _995 + _687 + _691 + _867 - mem[64]
                        mem[64] = _995 + _687 + _691 + _867 + 32
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        t = _1068
                        u = _354
                        continue 
                    mem[_687 + _691 + _867 + _995 + 32] = 0
                    _1084 = mem[64]
                    mem[mem[64]] = _995 + _687 + _691 + _867 - mem[64]
                    mem[64] = _995 + _687 + _691 + _867 + 32
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    t = _1084
                    u = _354
                    continue 
                mem[_687 + _691 + 32] = 0
                _871 = mem[_210]
                s = 0
                while s < _871:
                    mem[s + _687 + _691 + 32] = mem[s + _210 + 32]
                    s = s + 32
                    continue 
                if ceil32(_871) <= _871:
                    _988 = mem[_489]
                    s = 0
                    while s < _988:
                        mem[s + _687 + _691 + _871 + 32] = mem[s + _489 + 32]
                        s = s + 32
                        continue 
                    if ceil32(_988) <= _988:
                        _1069 = mem[64]
                        mem[mem[64]] = _988 + _687 + _691 + _871 - mem[64]
                        mem[64] = _988 + _687 + _691 + _871 + 32
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        t = _1069
                        u = _354
                        continue 
                    mem[_687 + _691 + _871 + _988 + 32] = 0
                    _1085 = mem[64]
                    mem[mem[64]] = _988 + _687 + _691 + _871 - mem[64]
                    mem[64] = _988 + _687 + _691 + _871 + 32
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    t = _1085
                    u = _354
                    continue 
                mem[_687 + _691 + _871 + 32] = 0
                _996 = mem[_489]
                s = 0
                while s < _996:
                    mem[s + _687 + _691 + _871 + 32] = mem[s + _489 + 32]
                    s = s + 32
                    continue 
                if ceil32(_996) <= _996:
                    _1070 = mem[64]
                    mem[mem[64]] = _996 + _687 + _691 + _871 - mem[64]
                    mem[64] = _996 + _687 + _691 + _871 + 32
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    t = _1070
                    u = _354
                    continue 
                mem[_687 + _691 + _871 + _996 + 32] = 0
                _1086 = mem[64]
                mem[mem[64]] = _996 + _687 + _691 + _871 - mem[64]
                mem[64] = _996 + _687 + _691 + _871 + 32
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                t = _1086
                u = _354
                continue 
            mem[_489 + 32 len u] = call.data[calldata.size len u]
            v = u
            s = _355
            while s:
                if v < 1:
                    revert with 0, 17
                if s / 10 > 0x1999999999999999999999999999999999999999999999999999999999999999:
                    revert with 0, 17
                if s < 10 * s / 10:
                    revert with 0, 17
                if 48 > -uint8(s - (10 * s / 10)) + 255:
                    revert with 0, 17
                if v - 1 >= mem[_489]:
                    revert with 0, 50
                mem[v + _489 + 31 len 8] = Mask(8, -(('mask_shl', 8, 0, 245, ('add', 48, ('mask_shl', 8, 0, 0, ('add', ('var', 1), ('mul', -10, ('div', ('var', 1), 10)))))), 0) + 256, 0) << (('mask_shl', 8, 0, 245, ('add', 48, ('mask_shl', 8, 0, 0, ('add', ('var', 1), ('mul', -10, ('div', ('var', 1), 10)))))), 0) - 256
                v = v - 1
                s = s / 10
                continue 
            _688 = mem[64]
            _692 = mem[t]
            s = 0
            while s < _692:
                mem[s + _688 + 32] = mem[s + t + 32]
                s = s + 32
                continue 
            if ceil32(_692) <= _692:
                _868 = mem[_210]
                s = 0
                while s < _868:
                    mem[s + _688 + _692 + 32] = mem[s + _210 + 32]
                    s = s + 32
                    continue 
                if ceil32(_868) <= _868:
                    _989 = mem[_489]
                    s = 0
                    while s < _989:
                        mem[s + _688 + _692 + _868 + 32] = mem[s + _489 + 32]
                        s = s + 32
                        continue 
                    if ceil32(_989) <= _989:
                        _1071 = mem[64]
                        mem[mem[64]] = _989 + _688 + _692 + _868 - mem[64]
                        mem[64] = _989 + _688 + _692 + _868 + 32
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        t = _1071
                        u = _354
                        continue 
                    mem[_688 + _692 + _868 + _989 + 32] = 0
                    _1087 = mem[64]
                    mem[mem[64]] = _989 + _688 + _692 + _868 - mem[64]
                    mem[64] = _989 + _688 + _692 + _868 + 32
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    t = _1087
                    u = _354
                    continue 
                mem[_688 + _692 + _868 + 32] = 0
                _997 = mem[_489]
                s = 0
                while s < _997:
                    mem[s + _688 + _692 + _868 + 32] = mem[s + _489 + 32]
                    s = s + 32
                    continue 
                if ceil32(_997) <= _997:
                    _1072 = mem[64]
                    mem[mem[64]] = _997 + _688 + _692 + _868 - mem[64]
                    mem[64] = _997 + _688 + _692 + _868 + 32
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    t = _1072
                    u = _354
                    continue 
                mem[_688 + _692 + _868 + _997 + 32] = 0
                _1088 = mem[64]
                mem[mem[64]] = _997 + _688 + _692 + _868 - mem[64]
                mem[64] = _997 + _688 + _692 + _868 + 32
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                t = _1088
                u = _354
                continue 
            mem[_688 + _692 + 32] = 0
            _872 = mem[_210]
            s = 0
            while s < _872:
                mem[s + _688 + _692 + 32] = mem[s + _210 + 32]
                s = s + 32
                continue 
            if ceil32(_872) <= _872:
                _990 = mem[_489]
                s = 0
                while s < _990:
                    mem[s + _688 + _692 + _872 + 32] = mem[s + _489 + 32]
                    s = s + 32
                    continue 
                if ceil32(_990) <= _990:
                    _1073 = mem[64]
                    mem[mem[64]] = _990 + _688 + _692 + _872 - mem[64]
                    mem[64] = _990 + _688 + _692 + _872 + 32
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    t = _1073
                    u = _354
                    continue 
                mem[_688 + _692 + _872 + _990 + 32] = 0
                _1089 = mem[64]
                mem[mem[64]] = _990 + _688 + _692 + _872 - mem[64]
                mem[64] = _990 + _688 + _692 + _872 + 32
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                t = _1089
                u = _354
                continue 
            mem[_688 + _692 + _872 + 32] = 0
            _998 = mem[_489]
            s = 0
            while s < _998:
                mem[s + _688 + _692 + _872 + 32] = mem[s + _489 + 32]
                s = s + 32
                continue 
            if ceil32(_998) <= _998:
                _1074 = mem[64]
                mem[mem[64]] = _998 + _688 + _692 + _872 - mem[64]
                mem[64] = _998 + _688 + _692 + _872 + 32
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                t = _1074
                u = _354
                continue 
            mem[_688 + _692 + _872 + _998 + 32] = 0
            _1090 = mem[64]
            mem[mem[64]] = _998 + _688 + _692 + _872 - mem[64]
            mem[64] = _998 + _688 + _692 + _872 + 32
            if idx == -1:
                revert with 0, 17
            idx = idx + 1
            t = _1090
            u = _354
            continue 
        mem[mem[64]] = 32
        _361 = mem[t]
        mem[mem[64] + 32] = mem[t]
        mem[mem[64] + 64 len ceil32(_361)] = mem[t + 32 len ceil32(_361)]
        if ceil32(_361) > _361:
            mem[mem[64] + _361 + 64] = 0
        return 32, mem[mem[64] + 32 len ceil32(_361) + 32]
    mem[_108 + 32 len u] = call.data[calldata.size len u]
    s = u
    idx = _65
    while idx:
        if s < 1:
            revert with 0, 17
        if idx / 10 > 0x1999999999999999999999999999999999999999999999999999999999999999:
            revert with 0, 17
        if idx < 10 * idx / 10:
            revert with 0, 17
        if 48 > -uint8(idx - (10 * idx / 10)) + 255:
            revert with 0, 17
        if s - 1 >= mem[_108]:
            revert with 0, 50
        mem[s + _108 + 31 len 8] = Mask(8, -(('mask_shl', 8, 0, 245, ('add', 48, ('mask_shl', 8, 0, 0, ('add', ('var', 0), ('mul', -10, ('div', ('var', 0), 10)))))), 0) + 256, 0) << (('mask_shl', 8, 0, 245, ('add', 48, ('mask_shl', 8, 0, 0, ('add', ('var', 0), ('mul', -10, ('div', ('var', 0), 10)))))), 0) - 256
        s = s - 1
        idx = idx / 10
        continue 
    _211 = mem[64]
    mem[64] = mem[64] + 64
    mem[_211] = 1
    mem[_211 + 32] = 0x2300000000000000000000000000000000000000000000000000000000000000
    idx = 1
    t = _108
    u = _61
    while idx < _57:
        if idx >= mem[96]:
            revert with 0, 50
        _357 = mem[(32 * idx) + 128]
        _358 = mem[mem[(32 * idx) + 128] + 96]
        if not mem[mem[(32 * idx) + 128] + 96]:
            _368 = mem[64]
            mem[64] = mem[64] + 64
            mem[_368] = 1
            mem[_368 + 32] = 0x3000000000000000000000000000000000000000000000000000000000000000
            _372 = mem[64]
            _376 = mem[t]
            u = 0
            while u < _376:
                mem[u + _372 + 32] = mem[u + t + 32]
                u = u + 32
                continue 
            if ceil32(_376) <= _376:
                _492 = mem[_211]
                t = 0
                while t < _492:
                    mem[t + _372 + _376 + 32] = mem[t + _211 + 32]
                    t = t + 32
                    continue 
                if ceil32(_492) <= _492:
                    _697 = mem[_368]
                    s = 0
                    while s < _697:
                        mem[s + _372 + _376 + _492 + 32] = mem[s + _368 + 32]
                        s = s + 32
                        continue 
                    if ceil32(_697) <= _697:
                        _879 = mem[64]
                        mem[mem[64]] = _697 + _372 + _376 + _492 - mem[64]
                        mem[64] = _697 + _372 + _376 + _492 + 32
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        t = _879
                        u = _357
                        continue 
                    mem[_372 + _376 + _492 + _697 + 32] = 0
                    _895 = mem[64]
                    mem[mem[64]] = _697 + _372 + _376 + _492 - mem[64]
                    mem[64] = _697 + _372 + _376 + _492 + 32
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    t = _895
                    u = _357
                    continue 
                mem[_372 + _376 + _492 + 32] = 0
                _705 = mem[_368]
                s = 0
                while s < _705:
                    mem[s + _372 + _376 + _492 + 32] = mem[s + _368 + 32]
                    s = s + 32
                    continue 
                if ceil32(_705) <= _705:
                    _880 = mem[64]
                    mem[mem[64]] = _705 + _372 + _376 + _492 - mem[64]
                    mem[64] = _705 + _372 + _376 + _492 + 32
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    t = _880
                    u = _357
                    continue 
                mem[_372 + _376 + _492 + _705 + 32] = 0
                _896 = mem[64]
                mem[mem[64]] = _705 + _372 + _376 + _492 - mem[64]
                mem[64] = _705 + _372 + _376 + _492 + 32
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                t = _896
                u = _357
                continue 
            mem[_372 + _376 + 32] = 0
            _498 = mem[_211]
            s = 0
            while s < _498:
                mem[s + _372 + _376 + 32] = mem[s + _211 + 32]
                s = s + 32
                continue 
            if ceil32(_498) <= _498:
                _698 = mem[_368]
                s = 0
                while s < _698:
                    mem[s + _372 + _376 + _498 + 32] = mem[s + _368 + 32]
                    s = s + 32
                    continue 
                if ceil32(_698) <= _698:
                    _881 = mem[64]
                    mem[mem[64]] = _698 + _372 + _376 + _498 - mem[64]
                    mem[64] = _698 + _372 + _376 + _498 + 32
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    t = _881
                    u = _357
                    continue 
                mem[_372 + _376 + _498 + _698 + 32] = 0
                _897 = mem[64]
                mem[mem[64]] = _698 + _372 + _376 + _498 - mem[64]
                mem[64] = _698 + _372 + _376 + _498 + 32
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                t = _897
                u = _357
                continue 
            mem[_372 + _376 + _498 + 32] = 0
            _706 = mem[_368]
            s = 0
            while s < _706:
                mem[s + _372 + _376 + _498 + 32] = mem[s + _368 + 32]
                s = s + 32
                continue 
            if ceil32(_706) <= _706:
                _882 = mem[64]
                mem[mem[64]] = _706 + _372 + _376 + _498 - mem[64]
                mem[64] = _706 + _372 + _376 + _498 + 32
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                t = _882
                u = _357
                continue 
            mem[_372 + _376 + _498 + _706 + 32] = 0
            _898 = mem[64]
            mem[mem[64]] = _706 + _372 + _376 + _498 - mem[64]
            mem[64] = _706 + _372 + _376 + _498 + 32
            if idx == -1:
                revert with 0, 17
            idx = idx + 1
            t = _898
            u = _357
            continue 
        u = 0
        s = mem[mem[(32 * idx) + 128] + 96]
        while s:
            if u == -1:
                revert with 0, 17
            u = u + 1
            s = s / 10
            continue 
        if u > test266151307():
            revert with 0, 65
        _490 = mem[64]
        mem[mem[64]] = u
        mem[64] = mem[64] + ceil32(u) + 32
        if not u:
            v = u
            s = _358
            while s:
                if v < 1:
                    revert with 0, 17
                if s / 10 > 0x1999999999999999999999999999999999999999999999999999999999999999:
                    revert with 0, 17
                if s < 10 * s / 10:
                    revert with 0, 17
                if 48 > -uint8(s - (10 * s / 10)) + 255:
                    revert with 0, 17
                if v - 1 >= mem[_490]:
                    revert with 0, 50
                mem[v + _490 + 31 len 8] = Mask(8, -(('mask_shl', 8, 0, 245, ('add', 48, ('mask_shl', 8, 0, 0, ('add', ('var', 1), ('mul', -10, ('div', ('var', 1), 10)))))), 0) + 256, 0) << (('mask_shl', 8, 0, 245, ('add', 48, ('mask_shl', 8, 0, 0, ('add', ('var', 1), ('mul', -10, ('div', ('var', 1), 10)))))), 0) - 256
                v = v - 1
                s = s / 10
                continue 
            _689 = mem[64]
            _695 = mem[t]
            s = 0
            while s < _695:
                mem[s + _689 + 32] = mem[s + t + 32]
                s = s + 32
                continue 
            if ceil32(_695) <= _695:
                _869 = mem[_211]
                s = 0
                while s < _869:
                    mem[s + _689 + _695 + 32] = mem[s + _211 + 32]
                    s = s + 32
                    continue 
                if ceil32(_869) <= _869:
                    _991 = mem[_490]
                    s = 0
                    while s < _991:
                        mem[s + _689 + _695 + _869 + 32] = mem[s + _490 + 32]
                        s = s + 32
                        continue 
                    if ceil32(_991) <= _991:
                        _1075 = mem[64]
                        mem[mem[64]] = _991 + _689 + _695 + _869 - mem[64]
                        mem[64] = _991 + _689 + _695 + _869 + 32
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        t = _1075
                        u = _357
                        continue 
                    mem[_689 + _695 + _869 + _991 + 32] = 0
                    _1091 = mem[64]
                    mem[mem[64]] = _991 + _689 + _695 + _869 - mem[64]
                    mem[64] = _991 + _689 + _695 + _869 + 32
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    t = _1091
                    u = _357
                    continue 
                mem[_689 + _695 + _869 + 32] = 0
                _999 = mem[_490]
                s = 0
                while s < _999:
                    mem[s + _689 + _695 + _869 + 32] = mem[s + _490 + 32]
                    s = s + 32
                    continue 
                if ceil32(_999) <= _999:
                    _1076 = mem[64]
                    mem[mem[64]] = _999 + _689 + _695 + _869 - mem[64]
                    mem[64] = _999 + _689 + _695 + _869 + 32
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    t = _1076
                    u = _357
                    continue 
                mem[_689 + _695 + _869 + _999 + 32] = 0
                _1092 = mem[64]
                mem[mem[64]] = _999 + _689 + _695 + _869 - mem[64]
                mem[64] = _999 + _689 + _695 + _869 + 32
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                t = _1092
                u = _357
                continue 
            mem[_689 + _695 + 32] = 0
            _877 = mem[_211]
            s = 0
            while s < _877:
                mem[s + _689 + _695 + 32] = mem[s + _211 + 32]
                s = s + 32
                continue 
            if ceil32(_877) <= _877:
                _992 = mem[_490]
                s = 0
                while s < _992:
                    mem[s + _689 + _695 + _877 + 32] = mem[s + _490 + 32]
                    s = s + 32
                    continue 
                if ceil32(_992) <= _992:
                    _1077 = mem[64]
                    mem[mem[64]] = _992 + _689 + _695 + _877 - mem[64]
                    mem[64] = _992 + _689 + _695 + _877 + 32
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    t = _1077
                    u = _357
                    continue 
                mem[_689 + _695 + _877 + _992 + 32] = 0
                _1093 = mem[64]
                mem[mem[64]] = _992 + _689 + _695 + _877 - mem[64]
                mem[64] = _992 + _689 + _695 + _877 + 32
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                t = _1093
                u = _357
                continue 
            mem[_689 + _695 + _877 + 32] = 0
            _1000 = mem[_490]
            s = 0
            while s < _1000:
                mem[s + _689 + _695 + _877 + 32] = mem[s + _490 + 32]
                s = s + 32
                continue 
            if ceil32(_1000) <= _1000:
                _1078 = mem[64]
                mem[mem[64]] = _1000 + _689 + _695 + _877 - mem[64]
                mem[64] = _1000 + _689 + _695 + _877 + 32
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                t = _1078
                u = _357
                continue 
            mem[_689 + _695 + _877 + _1000 + 32] = 0
            _1094 = mem[64]
            mem[mem[64]] = _1000 + _689 + _695 + _877 - mem[64]
            mem[64] = _1000 + _689 + _695 + _877 + 32
            if idx == -1:
                revert with 0, 17
            idx = idx + 1
            t = _1094
            u = _357
            continue 
        mem[_490 + 32 len u] = call.data[calldata.size len u]
        v = u
        s = _358
        while s:
            if v < 1:
                revert with 0, 17
            if s / 10 > 0x1999999999999999999999999999999999999999999999999999999999999999:
                revert with 0, 17
            if s < 10 * s / 10:
                revert with 0, 17
            if 48 > -uint8(s - (10 * s / 10)) + 255:
                revert with 0, 17
            if v - 1 >= mem[_490]:
                revert with 0, 50
            mem[v + _490 + 31 len 8] = Mask(8, -(('mask_shl', 8, 0, 245, ('add', 48, ('mask_shl', 8, 0, 0, ('add', ('var', 1), ('mul', -10, ('div', ('var', 1), 10)))))), 0) + 256, 0) << (('mask_shl', 8, 0, 245, ('add', 48, ('mask_shl', 8, 0, 0, ('add', ('var', 1), ('mul', -10, ('div', ('var', 1), 10)))))), 0) - 256
            v = v - 1
            s = s / 10
            continue 
        _690 = mem[64]
        _696 = mem[t]
        s = 0
        while s < _696:
            mem[s + _690 + 32] = mem[s + t + 32]
            s = s + 32
            continue 
        if ceil32(_696) <= _696:
            _870 = mem[_211]
            s = 0
            while s < _870:
                mem[s + _690 + _696 + 32] = mem[s + _211 + 32]
                s = s + 32
                continue 
            if ceil32(_870) <= _870:
                _993 = mem[_490]
                s = 0
                while s < _993:
                    mem[s + _690 + _696 + _870 + 32] = mem[s + _490 + 32]
                    s = s + 32
                    continue 
                if ceil32(_993) <= _993:
                    _1079 = mem[64]
                    mem[mem[64]] = _993 + _690 + _696 + _870 - mem[64]
                    mem[64] = _993 + _690 + _696 + _870 + 32
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    t = _1079
                    u = _357
                    continue 
                mem[_690 + _696 + _870 + _993 + 32] = 0
                _1095 = mem[64]
                mem[mem[64]] = _993 + _690 + _696 + _870 - mem[64]
                mem[64] = _993 + _690 + _696 + _870 + 32
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                t = _1095
                u = _357
                continue 
            mem[_690 + _696 + _870 + 32] = 0
            _1001 = mem[_490]
            s = 0
            while s < _1001:
                mem[s + _690 + _696 + _870 + 32] = mem[s + _490 + 32]
                s = s + 32
                continue 
            if ceil32(_1001) <= _1001:
                _1080 = mem[64]
                mem[mem[64]] = _1001 + _690 + _696 + _870 - mem[64]
                mem[64] = _1001 + _690 + _696 + _870 + 32
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                t = _1080
                u = _357
                continue 
            mem[_690 + _696 + _870 + _1001 + 32] = 0
            _1096 = mem[64]
            mem[mem[64]] = _1001 + _690 + _696 + _870 - mem[64]
            mem[64] = _1001 + _690 + _696 + _870 + 32
            if idx == -1:
                revert with 0, 17
            idx = idx + 1
            t = _1096
            u = _357
            continue 
        mem[_690 + _696 + 32] = 0
        _878 = mem[_211]
        s = 0
        while s < _878:
            mem[s + _690 + _696 + 32] = mem[s + _211 + 32]
            s = s + 32
            continue 
        if ceil32(_878) <= _878:
            _994 = mem[_490]
            s = 0
            while s < _994:
                mem[s + _690 + _696 + _878 + 32] = mem[s + _490 + 32]
                s = s + 32
                continue 
            if ceil32(_994) <= _994:
                _1081 = mem[64]
                mem[mem[64]] = _994 + _690 + _696 + _878 - mem[64]
                mem[64] = _994 + _690 + _696 + _878 + 32
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                t = _1081
                u = _357
                continue 
            mem[_690 + _696 + _878 + _994 + 32] = 0
            _1097 = mem[64]
            mem[mem[64]] = _994 + _690 + _696 + _878 - mem[64]
            mem[64] = _994 + _690 + _696 + _878 + 32
            if idx == -1:
                revert with 0, 17
            idx = idx + 1
            t = _1097
            u = _357
            continue 
        mem[_690 + _696 + _878 + 32] = 0
        _1002 = mem[_490]
        s = 0
        while s < _1002:
            mem[s + _690 + _696 + _878 + 32] = mem[s + _490 + 32]
            s = s + 32
            continue 
        if ceil32(_1002) <= _1002:
            _1082 = mem[64]
            mem[mem[64]] = _1002 + _690 + _696 + _878 - mem[64]
            mem[64] = _1002 + _690 + _696 + _878 + 32
            if idx == -1:
                revert with 0, 17
            idx = idx + 1
            t = _1082
            u = _357
            continue 
        mem[_690 + _696 + _878 + _1002 + 32] = 0
        _1098 = mem[64]
        mem[mem[64]] = _1002 + _690 + _696 + _878 - mem[64]
        mem[64] = _1002 + _690 + _696 + _878 + 32
        if idx == -1:
            revert with 0, 17
        idx = idx + 1
        t = _1098
        u = _357
        continue 
    _356 = mem[64]
    mem[mem[64]] = 32
    _362 = mem[t]
    mem[mem[64] + 32] = mem[t]
    mem[mem[64] + 64 len ceil32(_362)] = mem[t + 32 len ceil32(_362)]
    if ceil32(_362) <= _362:
        return 32, mem[mem[64] + 32 len ceil32(_362) + 32]
    mem[mem[64] + _362 + 64] = 0
    return memory
      from mem[64]
       len ceil32(_362) + _356 + -mem[64] + 64
}

function sub_8bf14514(?) payable {
    require calldata.size - 4 >= 32
    require arg1 == address(arg1)
    if not sub_44fea1b9[address(arg1)]:
        return ''
    mem[0] = address(arg1)
    mem[32] = 5
    mem[64] = (32 * stor5[address(arg1)].field_0) + 128
    mem[96] = stor5[address(arg1)].field_0
    s = 128
    idx = 0
    while idx < stor5[address(arg1)].field_0:
        mem[0] = sha3(address(arg1), 5)
        _59 = mem[64]
        mem[64] = mem[64] + 192
        if bool(stor5[address(arg1)][idx].field_0):
            if bool(stor5[address(arg1)][idx].field_0) == uint255(stor5[address(arg1)][idx].field_0) * 0.5 < 32:
                revert with 0, 34
            _66 = mem[64]
            mem[64] = mem[64] + ceil32(uint255(stor5[address(arg1)][idx].field_0) * 0.5) + 32
            mem[_66] = uint255(stor5[address(arg1)][idx].field_0) * 0.5
            if bool(stor5[address(arg1)][idx].field_0):
                if bool(stor5[address(arg1)][idx].field_0) == uint255(stor5[address(arg1)][idx].field_0) * 0.5 < 32:
                    revert with 0, 34
                if Mask(256, -1, stor5[address(arg1)][idx].field_0):
                    if 31 >= uint255(stor5[address(arg1)][idx].field_0) * 0.5:
                        mem[_66 + 32] = 256 * Mask(248, 0, stor5[address(arg1)][idx].field_8)
                    else:
                        mem[0] = (6 * idx) + sha3(sha3(address(arg1), 5))
                        mem[_66 + 32] = stor5[address(arg1)][idx].field_0
                        t = _66 + 32
                        u = sha3(mem[0])
                        while _66 + (uint255(stor5[address(arg1)][idx].field_0) * 0.5) > t:
                            mem[t + 32] = uint256(stor1[u])
                            t = t + 32
                            u = u + 1
                            continue 
            else:
                if bool(stor5[address(arg1)][idx].field_0) == stor5[address(arg1)][idx].field_1 % 128 < 32:
                    revert with 0, 34
                if stor5[address(arg1)][idx].field_1 % 128:
                    if 31 >= stor5[address(arg1)][idx].field_1 % 128:
                        mem[_66 + 32] = 256 * Mask(248, 0, stor5[address(arg1)][idx].field_8)
                    else:
                        mem[0] = (6 * idx) + sha3(sha3(address(arg1), 5))
                        mem[_66 + 32] = stor5[address(arg1)][idx].field_0
                        t = _66 + 32
                        u = sha3(mem[0])
                        while _66 + stor5[address(arg1)][idx].field_1 % 128 > t:
                            mem[t + 32] = uint256(stor1[u])
                            t = t + 32
                            u = u + 1
                            continue 
            mem[_59] = _66
        else:
            if bool(stor5[address(arg1)][idx].field_0) == stor5[address(arg1)][idx].field_1 % 128 < 32:
                revert with 0, 34
            _68 = mem[64]
            mem[64] = mem[64] + ceil32(stor5[address(arg1)][idx].field_1 % 128) + 32
            mem[_68] = stor5[address(arg1)][idx].field_1 % 128
            if bool(stor5[address(arg1)][idx].field_0):
                if bool(stor5[address(arg1)][idx].field_0) == uint255(stor5[address(arg1)][idx].field_0) * 0.5 < 32:
                    revert with 0, 34
                if Mask(256, -1, stor5[address(arg1)][idx].field_0):
                    if 31 >= uint255(stor5[address(arg1)][idx].field_0) * 0.5:
                        mem[_68 + 32] = 256 * Mask(248, 0, stor5[address(arg1)][idx].field_8)
                    else:
                        mem[0] = (6 * idx) + sha3(sha3(address(arg1), 5))
                        mem[_68 + 32] = stor5[address(arg1)][idx].field_0
                        t = _68 + 32
                        u = sha3(mem[0])
                        while _68 + (uint255(stor5[address(arg1)][idx].field_0) * 0.5) > t:
                            mem[t + 32] = uint256(stor1[u])
                            t = t + 32
                            u = u + 1
                            continue 
            else:
                if bool(stor5[address(arg1)][idx].field_0) == stor5[address(arg1)][idx].field_1 % 128 < 32:
                    revert with 0, 34
                if stor5[address(arg1)][idx].field_1 % 128:
                    if 31 >= stor5[address(arg1)][idx].field_1 % 128:
                        mem[_68 + 32] = 256 * Mask(248, 0, stor5[address(arg1)][idx].field_8)
                    else:
                        mem[0] = (6 * idx) + sha3(sha3(address(arg1), 5))
                        mem[_68 + 32] = stor5[address(arg1)][idx].field_0
                        t = _68 + 32
                        u = sha3(mem[0])
                        while _68 + stor5[address(arg1)][idx].field_1 % 128 > t:
                            mem[t + 32] = uint256(stor1[u])
                            t = t + 32
                            u = u + 1
                            continue 
            mem[_59] = _68
        mem[_59 + 32] = stor5[address(arg1)][idx].field_256
        mem[_59 + 64] = stor5[address(arg1)][idx].field_512
        mem[_59 + 96] = stor5[address(arg1)][idx].field_768
        mem[_59 + 128] = stor5[address(arg1)][idx].field_1024
        if uint8(stor5[address(arg1)][idx].field_1280) > 2:
            revert with 0, 33
        mem[_59 + 160] = uint8(stor5[address(arg1)][idx].field_1280)
        mem[s] = _59
        s = s + 32
        idx = idx + 1
        continue 
    _57 = mem[96]
    _61 = mem[64]
    mem[64] = mem[64] + 192
    mem[_61] = 96
    mem[_61 + 32] = 0
    mem[_61 + 64] = 0
    mem[_61 + 96] = 0
    mem[_61 + 128] = 0
    mem[_61 + 160] = 0
    if 0 >= mem[96]:
        revert with 0, 50
    _65 = mem[mem[128] + 160]
    if mem[mem[128] + 160] > 2:
        revert with 0, 33
    if not mem[mem[128] + 160]:
        _69 = mem[64]
        mem[64] = mem[64] + 64
        mem[_69] = 1
        mem[_69 + 32] = 0x3000000000000000000000000000000000000000000000000000000000000000
        _70 = mem[64]
        mem[64] = mem[64] + 64
        mem[_70] = 1
        mem[_70 + 32] = 0x2300000000000000000000000000000000000000000000000000000000000000
        idx = 1
        s = _69
        t = _61
        while idx < _57:
            if idx >= mem[96]:
                revert with 0, 50
            _110 = mem[(32 * idx) + 128]
            _111 = mem[mem[(32 * idx) + 128] + 160]
            if mem[mem[(32 * idx) + 128] + 160] > 2:
                revert with 0, 33
            if not mem[mem[(32 * idx) + 128] + 160]:
                _113 = mem[64]
                mem[64] = mem[64] + 64
                mem[_113] = 1
                mem[_113 + 32] = 0x3000000000000000000000000000000000000000000000000000000000000000
                _116 = mem[64]
                _118 = mem[s]
                t = 0
                while t < _118:
                    mem[t + _116 + 32] = mem[t + s + 32]
                    t = t + 32
                    continue 
                if ceil32(_118) <= _118:
                    _213 = mem[_70]
                    s = 0
                    while s < _213:
                        mem[s + _116 + _118 + 32] = mem[s + _70 + 32]
                        s = s + 32
                        continue 
                    if ceil32(_213) <= _213:
                        _365 = mem[_113]
                        s = 0
                        while s < _365:
                            mem[s + _116 + _118 + _213 + 32] = mem[s + _113 + 32]
                            s = s + 32
                            continue 
                        if ceil32(_365) <= _365:
                            _501 = mem[64]
                            mem[mem[64]] = _365 + _116 + _118 + _213 - mem[64]
                            mem[64] = _365 + _116 + _118 + _213 + 32
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            s = _501
                            t = _110
                            continue 
                        mem[_116 + _118 + _213 + _365 + 32] = 0
                        _507 = mem[64]
                        mem[mem[64]] = _365 + _116 + _118 + _213 - mem[64]
                        mem[64] = _365 + _116 + _118 + _213 + 32
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        s = _507
                        t = _110
                        continue 
                    mem[_116 + _118 + _213 + 32] = 0
                    _367 = mem[_113]
                    s = 0
                    while s < _367:
                        mem[s + _116 + _118 + _213 + 32] = mem[s + _113 + 32]
                        s = s + 32
                        continue 
                    if ceil32(_367) <= _367:
                        _502 = mem[64]
                        mem[mem[64]] = _367 + _116 + _118 + _213 - mem[64]
                        mem[64] = _367 + _116 + _118 + _213 + 32
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        s = _502
                        t = _110
                        continue 
                    mem[_116 + _118 + _213 + _367 + 32] = 0
                    _508 = mem[64]
                    mem[mem[64]] = _367 + _116 + _118 + _213 - mem[64]
                    mem[64] = _367 + _116 + _118 + _213 + 32
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    s = _508
                    t = _110
                    continue 
                mem[_116 + _118 + 32] = 0
                _217 = mem[_70]
                s = 0
                while s < _217:
                    mem[s + _116 + _118 + 32] = mem[s + _70 + 32]
                    s = s + 32
                    continue 
                if ceil32(_217) <= _217:
                    _366 = mem[_113]
                    s = 0
                    while s < _366:
                        mem[s + _116 + _118 + _217 + 32] = mem[s + _113 + 32]
                        s = s + 32
                        continue 
                    if ceil32(_366) <= _366:
                        _503 = mem[64]
                        mem[mem[64]] = _366 + _116 + _118 + _217 - mem[64]
                        mem[64] = _366 + _116 + _118 + _217 + 32
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        s = _503
                        t = _110
                        continue 
                    mem[_116 + _118 + _217 + _366 + 32] = 0
                    _509 = mem[64]
                    mem[mem[64]] = _366 + _116 + _118 + _217 - mem[64]
                    mem[64] = _366 + _116 + _118 + _217 + 32
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    s = _509
                    t = _110
                    continue 
                mem[_116 + _118 + _217 + 32] = 0
                _368 = mem[_113]
                s = 0
                while s < _368:
                    mem[s + _116 + _118 + _217 + 32] = mem[s + _113 + 32]
                    s = s + 32
                    continue 
                if ceil32(_368) <= _368:
                    _504 = mem[64]
                    mem[mem[64]] = _368 + _116 + _118 + _217 - mem[64]
                    mem[64] = _368 + _116 + _118 + _217 + 32
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    s = _504
                    t = _110
                    continue 
                mem[_116 + _118 + _217 + _368 + 32] = 0
                _510 = mem[64]
                mem[mem[64]] = _368 + _116 + _118 + _217 - mem[64]
                mem[64] = _368 + _116 + _118 + _217 + 32
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                s = _510
                t = _110
                continue 
            u = 0
            t = mem[mem[(32 * idx) + 128] + 160]
            while t:
                if u == -1:
                    revert with 0, 17
                u = u + 1
                t = t / 10
                continue 
            if u > test266151307():
                revert with 0, 65
            _212 = mem[64]
            mem[mem[64]] = u
            mem[64] = mem[64] + ceil32(u) + 32
            if not u:
                v = u
                t = _111
                while t:
                    if v < 1:
                        revert with 0, 17
                    if t / 10 > 0x1999999999999999999999999999999999999999999999999999999999999999:
                        revert with 0, 17
                    if t < 10 * t / 10:
                        revert with 0, 17
                    if 48 > -uint8(t - (10 * t / 10)) + 255:
                        revert with 0, 17
                    if v - 1 >= mem[_212]:
                        revert with 0, 50
                    mem[v + _212 + 31 len 8] = Mask(8, -(('mask_shl', 8, 0, 245, ('add', 48, ('mask_shl', 8, 0, 0, ('add', ('var', 2), ('mul', -10, ('div', ('var', 2), 10)))))), 0) + 256, 0) << (('mask_shl', 8, 0, 245, ('add', 48, ('mask_shl', 8, 0, 0, ('add', ('var', 2), ('mul', -10, ('div', ('var', 2), 10)))))), 0) - 256
                    v = v - 1
                    t = t / 10
                    continue 
                _359 = mem[64]
                _363 = mem[s]
                t = 0
                while t < _363:
                    mem[t + _359 + 32] = mem[t + s + 32]
                    t = t + 32
                    continue 
                if ceil32(_363) <= _363:
                    _493 = mem[_70]
                    s = 0
                    while s < _493:
                        mem[s + _359 + _363 + 32] = mem[s + _70 + 32]
                        s = s + 32
                        continue 
                    if ceil32(_493) <= _493:
                        _699 = mem[_212]
                        s = 0
                        while s < _699:
                            mem[s + _359 + _363 + _493 + 32] = mem[s + _212 + 32]
                            s = s + 32
                            continue 
                        if ceil32(_699) <= _699:
                            _883 = mem[64]
                            mem[mem[64]] = _699 + _359 + _363 + _493 - mem[64]
                            mem[64] = _699 + _359 + _363 + _493 + 32
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            s = _883
                            t = _110
                            continue 
                        mem[_359 + _363 + _493 + _699 + 32] = 0
                        _899 = mem[64]
                        mem[mem[64]] = _699 + _359 + _363 + _493 - mem[64]
                        mem[64] = _699 + _359 + _363 + _493 + 32
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        s = _899
                        t = _110
                        continue 
                    mem[_359 + _363 + _493 + 32] = 0
                    _707 = mem[_212]
                    s = 0
                    while s < _707:
                        mem[s + _359 + _363 + _493 + 32] = mem[s + _212 + 32]
                        s = s + 32
                        continue 
                    if ceil32(_707) <= _707:
                        _884 = mem[64]
                        mem[mem[64]] = _707 + _359 + _363 + _493 - mem[64]
                        mem[64] = _707 + _359 + _363 + _493 + 32
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        s = _884
                        t = _110
                        continue 
                    mem[_359 + _363 + _493 + _707 + 32] = 0
                    _900 = mem[64]
                    mem[mem[64]] = _707 + _359 + _363 + _493 - mem[64]
                    mem[64] = _707 + _359 + _363 + _493 + 32
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    s = _900
                    t = _110
                    continue 
                mem[_359 + _363 + 32] = 0
                _499 = mem[_70]
                s = 0
                while s < _499:
                    mem[s + _359 + _363 + 32] = mem[s + _70 + 32]
                    s = s + 32
                    continue 
                if ceil32(_499) <= _499:
                    _700 = mem[_212]
                    s = 0
                    while s < _700:
                        mem[s + _359 + _363 + _499 + 32] = mem[s + _212 + 32]
                        s = s + 32
                        continue 
                    if ceil32(_700) <= _700:
                        _885 = mem[64]
                        mem[mem[64]] = _700 + _359 + _363 + _499 - mem[64]
                        mem[64] = _700 + _359 + _363 + _499 + 32
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        s = _885
                        t = _110
                        continue 
                    mem[_359 + _363 + _499 + _700 + 32] = 0
                    _901 = mem[64]
                    mem[mem[64]] = _700 + _359 + _363 + _499 - mem[64]
                    mem[64] = _700 + _359 + _363 + _499 + 32
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    s = _901
                    t = _110
                    continue 
                mem[_359 + _363 + _499 + 32] = 0
                _708 = mem[_212]
                s = 0
                while s < _708:
                    mem[s + _359 + _363 + _499 + 32] = mem[s + _212 + 32]
                    s = s + 32
                    continue 
                if ceil32(_708) <= _708:
                    _886 = mem[64]
                    mem[mem[64]] = _708 + _359 + _363 + _499 - mem[64]
                    mem[64] = _708 + _359 + _363 + _499 + 32
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    s = _886
                    t = _110
                    continue 
                mem[_359 + _363 + _499 + _708 + 32] = 0
                _902 = mem[64]
                mem[mem[64]] = _708 + _359 + _363 + _499 - mem[64]
                mem[64] = _708 + _359 + _363 + _499 + 32
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                s = _902
                t = _110
                continue 
            mem[_212 + 32 len u] = call.data[calldata.size len u]
            v = u
            t = _111
            while t:
                if v < 1:
                    revert with 0, 17
                if t / 10 > 0x1999999999999999999999999999999999999999999999999999999999999999:
                    revert with 0, 17
                if t < 10 * t / 10:
                    revert with 0, 17
                if 48 > -uint8(t - (10 * t / 10)) + 255:
                    revert with 0, 17
                if v - 1 >= mem[_212]:
                    revert with 0, 50
                mem[v + _212 + 31 len 8] = Mask(8, -(('mask_shl', 8, 0, 245, ('add', 48, ('mask_shl', 8, 0, 0, ('add', ('var', 2), ('mul', -10, ('div', ('var', 2), 10)))))), 0) + 256, 0) << (('mask_shl', 8, 0, 245, ('add', 48, ('mask_shl', 8, 0, 0, ('add', ('var', 2), ('mul', -10, ('div', ('var', 2), 10)))))), 0) - 256
                v = v - 1
                t = t / 10
                continue 
            _360 = mem[64]
            _364 = mem[s]
            t = 0
            while t < _364:
                mem[t + _360 + 32] = mem[t + s + 32]
                t = t + 32
                continue 
            if ceil32(_364) <= _364:
                _494 = mem[_70]
                s = 0
                while s < _494:
                    mem[s + _360 + _364 + 32] = mem[s + _70 + 32]
                    s = s + 32
                    continue 
                if ceil32(_494) <= _494:
                    _701 = mem[_212]
                    s = 0
                    while s < _701:
                        mem[s + _360 + _364 + _494 + 32] = mem[s + _212 + 32]
                        s = s + 32
                        continue 
                    if ceil32(_701) <= _701:
                        _887 = mem[64]
                        mem[mem[64]] = _701 + _360 + _364 + _494 - mem[64]
                        mem[64] = _701 + _360 + _364 + _494 + 32
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        s = _887
                        t = _110
                        continue 
                    mem[_360 + _364 + _494 + _701 + 32] = 0
                    _903 = mem[64]
                    mem[mem[64]] = _701 + _360 + _364 + _494 - mem[64]
                    mem[64] = _701 + _360 + _364 + _494 + 32
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    s = _903
                    t = _110
                    continue 
                mem[_360 + _364 + _494 + 32] = 0
                _709 = mem[_212]
                s = 0
                while s < _709:
                    mem[s + _360 + _364 + _494 + 32] = mem[s + _212 + 32]
                    s = s + 32
                    continue 
                if ceil32(_709) <= _709:
                    _888 = mem[64]
                    mem[mem[64]] = _709 + _360 + _364 + _494 - mem[64]
                    mem[64] = _709 + _360 + _364 + _494 + 32
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    s = _888
                    t = _110
                    continue 
                mem[_360 + _364 + _494 + _709 + 32] = 0
                _904 = mem[64]
                mem[mem[64]] = _709 + _360 + _364 + _494 - mem[64]
                mem[64] = _709 + _360 + _364 + _494 + 32
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                s = _904
                t = _110
                continue 
            mem[_360 + _364 + 32] = 0
            _500 = mem[_70]
            s = 0
            while s < _500:
                mem[s + _360 + _364 + 32] = mem[s + _70 + 32]
                s = s + 32
                continue 
            if ceil32(_500) <= _500:
                _702 = mem[_212]
                s = 0
                while s < _702:
                    mem[s + _360 + _364 + _500 + 32] = mem[s + _212 + 32]
                    s = s + 32
                    continue 
                if ceil32(_702) <= _702:
                    _889 = mem[64]
                    mem[mem[64]] = _702 + _360 + _364 + _500 - mem[64]
                    mem[64] = _702 + _360 + _364 + _500 + 32
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    s = _889
                    t = _110
                    continue 
                mem[_360 + _364 + _500 + _702 + 32] = 0
                _905 = mem[64]
                mem[mem[64]] = _702 + _360 + _364 + _500 - mem[64]
                mem[64] = _702 + _360 + _364 + _500 + 32
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                s = _905
                t = _110
                continue 
            mem[_360 + _364 + _500 + 32] = 0
            _710 = mem[_212]
            s = 0
            while s < _710:
                mem[s + _360 + _364 + _500 + 32] = mem[s + _212 + 32]
                s = s + 32
                continue 
            if ceil32(_710) <= _710:
                _890 = mem[64]
                mem[mem[64]] = _710 + _360 + _364 + _500 - mem[64]
                mem[64] = _710 + _360 + _364 + _500 + 32
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                s = _890
                t = _110
                continue 
            mem[_360 + _364 + _500 + _710 + 32] = 0
            _906 = mem[64]
            mem[mem[64]] = _710 + _360 + _364 + _500 - mem[64]
            mem[64] = _710 + _360 + _364 + _500 + 32
            if idx == -1:
                revert with 0, 17
            idx = idx + 1
            s = _906
            t = _110
            continue 
        _109 = mem[64]
        mem[mem[64]] = 32
        _112 = mem[s]
        mem[mem[64] + 32] = mem[s]
        mem[mem[64] + 64 len ceil32(_112)] = mem[s + 32 len ceil32(_112)]
        if ceil32(_112) <= _112:
            return 32, mem[mem[64] + 32 len ceil32(_112) + 32]
        mem[mem[64] + _112 + 64] = 0
        return memory
          from mem[64]
           len ceil32(_112) + _109 + -mem[64] + 64
    s = 0
    idx = mem[mem[128] + 160]
    while idx:
        if s == -1:
            revert with 0, 17
        s = s + 1
        idx = idx / 10
        continue 
    if s > test266151307():
        revert with 0, 65
    _108 = mem[64]
    mem[mem[64]] = s
    mem[64] = mem[64] + ceil32(s) + 32
    if not s:
        t = s
        idx = _65
        while idx:
            if t < 1:
                revert with 0, 17
            if idx / 10 > 0x1999999999999999999999999999999999999999999999999999999999999999:
                revert with 0, 17
            if idx < 10 * idx / 10:
                revert with 0, 17
            if 48 > -uint8(idx - (10 * idx / 10)) + 255:
                revert with 0, 17
            if t - 1 >= mem[_108]:
                revert with 0, 50
            mem[t + _108 + 31 len 8] = Mask(8, -(('mask_shl', 8, 0, 245, ('add', 48, ('mask_shl', 8, 0, 0, ('add', ('var', 0), ('mul', -10, ('div', ('var', 0), 10)))))), 0) + 256, 0) << (('mask_shl', 8, 0, 245, ('add', 48, ('mask_shl', 8, 0, 0, ('add', ('var', 0), ('mul', -10, ('div', ('var', 0), 10)))))), 0) - 256
            t = t - 1
            idx = idx / 10
            continue 
        _210 = mem[64]
        mem[64] = mem[64] + 64
        mem[_210] = 1
        mem[_210 + 32] = 0x2300000000000000000000000000000000000000000000000000000000000000
        idx = 1
        s = _108
        t = _61
        while idx < _57:
            if idx >= mem[96]:
                revert with 0, 50
            _354 = mem[(32 * idx) + 128]
            _355 = mem[mem[(32 * idx) + 128] + 160]
            if mem[mem[(32 * idx) + 128] + 160] > 2:
                revert with 0, 33
            if not mem[mem[(32 * idx) + 128] + 160]:
                _369 = mem[64]
                mem[64] = mem[64] + 64
                mem[_369] = 1
                mem[_369 + 32] = 0x3000000000000000000000000000000000000000000000000000000000000000
                _372 = mem[64]
                _379 = mem[s]
                t = 0
                while t < _379:
                    mem[t + _372 + 32] = mem[t + s + 32]
                    t = t + 32
                    continue 
                if ceil32(_379) <= _379:
                    _491 = mem[_210]
                    s = 0
                    while s < _491:
                        mem[s + _372 + _379 + 32] = mem[s + _210 + 32]
                        s = s + 32
                        continue 
                    if ceil32(_491) <= _491:
                        _693 = mem[_369]
                        s = 0
                        while s < _693:
                            mem[s + _372 + _379 + _491 + 32] = mem[s + _369 + 32]
                            s = s + 32
                            continue 
                        if ceil32(_693) <= _693:
                            _873 = mem[64]
                            mem[mem[64]] = _693 + _372 + _379 + _491 - mem[64]
                            mem[64] = _693 + _372 + _379 + _491 + 32
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            s = _873
                            t = _354
                            continue 
                        mem[_372 + _379 + _491 + _693 + 32] = 0
                        _891 = mem[64]
                        mem[mem[64]] = _693 + _372 + _379 + _491 - mem[64]
                        mem[64] = _693 + _372 + _379 + _491 + 32
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        s = _891
                        t = _354
                        continue 
                    mem[_372 + _379 + _491 + 32] = 0
                    _703 = mem[_369]
                    s = 0
                    while s < _703:
                        mem[s + _372 + _379 + _491 + 32] = mem[s + _369 + 32]
                        s = s + 32
                        continue 
                    if ceil32(_703) <= _703:
                        _874 = mem[64]
                        mem[mem[64]] = _703 + _372 + _379 + _491 - mem[64]
                        mem[64] = _703 + _372 + _379 + _491 + 32
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        s = _874
                        t = _354
                        continue 
                    mem[_372 + _379 + _491 + _703 + 32] = 0
                    _892 = mem[64]
                    mem[mem[64]] = _703 + _372 + _379 + _491 - mem[64]
                    mem[64] = _703 + _372 + _379 + _491 + 32
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    s = _892
                    t = _354
                    continue 
                mem[_372 + _379 + 32] = 0
                _496 = mem[_210]
                s = 0
                while s < _496:
                    mem[s + _372 + _379 + 32] = mem[s + _210 + 32]
                    s = s + 32
                    continue 
                if ceil32(_496) <= _496:
                    _694 = mem[_369]
                    s = 0
                    while s < _694:
                        mem[s + _372 + _379 + _496 + 32] = mem[s + _369 + 32]
                        s = s + 32
                        continue 
                    if ceil32(_694) <= _694:
                        _875 = mem[64]
                        mem[mem[64]] = _694 + _372 + _379 + _496 - mem[64]
                        mem[64] = _694 + _372 + _379 + _496 + 32
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        s = _875
                        t = _354
                        continue 
                    mem[_372 + _379 + _496 + _694 + 32] = 0
                    _893 = mem[64]
                    mem[mem[64]] = _694 + _372 + _379 + _496 - mem[64]
                    mem[64] = _694 + _372 + _379 + _496 + 32
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    s = _893
                    t = _354
                    continue 
                mem[_372 + _379 + _496 + 32] = 0
                _704 = mem[_369]
                s = 0
                while s < _704:
                    mem[s + _372 + _379 + _496 + 32] = mem[s + _369 + 32]
                    s = s + 32
                    continue 
                if ceil32(_704) <= _704:
                    _876 = mem[64]
                    mem[mem[64]] = _704 + _372 + _379 + _496 - mem[64]
                    mem[64] = _704 + _372 + _379 + _496 + 32
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    s = _876
                    t = _354
                    continue 
                mem[_372 + _379 + _496 + _704 + 32] = 0
                _894 = mem[64]
                mem[mem[64]] = _704 + _372 + _379 + _496 - mem[64]
                mem[64] = _704 + _372 + _379 + _496 + 32
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                s = _894
                t = _354
                continue 
            u = 0
            t = mem[mem[(32 * idx) + 128] + 160]
            while t:
                if u == -1:
                    revert with 0, 17
                u = u + 1
                t = t / 10
                continue 
            if u > test266151307():
                revert with 0, 65
            _489 = mem[64]
            mem[mem[64]] = u
            mem[64] = mem[64] + ceil32(u) + 32
            if not u:
                v = u
                t = _355
                while t:
                    if v < 1:
                        revert with 0, 17
                    if t / 10 > 0x1999999999999999999999999999999999999999999999999999999999999999:
                        revert with 0, 17
                    if t < 10 * t / 10:
                        revert with 0, 17
                    if 48 > -uint8(t - (10 * t / 10)) + 255:
                        revert with 0, 17
                    if v - 1 >= mem[_489]:
                        revert with 0, 50
                    mem[v + _489 + 31 len 8] = Mask(8, -(('mask_shl', 8, 0, 245, ('add', 48, ('mask_shl', 8, 0, 0, ('add', ('var', 2), ('mul', -10, ('div', ('var', 2), 10)))))), 0) + 256, 0) << (('mask_shl', 8, 0, 245, ('add', 48, ('mask_shl', 8, 0, 0, ('add', ('var', 2), ('mul', -10, ('div', ('var', 2), 10)))))), 0) - 256
                    v = v - 1
                    t = t / 10
                    continue 
                _687 = mem[64]
                _691 = mem[s]
                t = 0
                while t < _691:
                    mem[t + _687 + 32] = mem[t + s + 32]
                    t = t + 32
                    continue 
                if ceil32(_691) <= _691:
                    _867 = mem[_210]
                    s = 0
                    while s < _867:
                        mem[s + _687 + _691 + 32] = mem[s + _210 + 32]
                        s = s + 32
                        continue 
                    if ceil32(_867) <= _867:
                        _987 = mem[_489]
                        s = 0
                        while s < _987:
                            mem[s + _687 + _691 + _867 + 32] = mem[s + _489 + 32]
                            s = s + 32
                            continue 
                        if ceil32(_987) <= _987:
                            _1067 = mem[64]
                            mem[mem[64]] = _987 + _687 + _691 + _867 - mem[64]
                            mem[64] = _987 + _687 + _691 + _867 + 32
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            s = _1067
                            t = _354
                            continue 
                        mem[_687 + _691 + _867 + _987 + 32] = 0
                        _1083 = mem[64]
                        mem[mem[64]] = _987 + _687 + _691 + _867 - mem[64]
                        mem[64] = _987 + _687 + _691 + _867 + 32
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        s = _1083
                        t = _354
                        continue 
                    mem[_687 + _691 + _867 + 32] = 0
                    _995 = mem[_489]
                    s = 0
                    while s < _995:
                        mem[s + _687 + _691 + _867 + 32] = mem[s + _489 + 32]
                        s = s + 32
                        continue 
                    if ceil32(_995) <= _995:
                        _1068 = mem[64]
                        mem[mem[64]] = _995 + _687 + _691 + _867 - mem[64]
                        mem[64] = _995 + _687 + _691 + _867 + 32
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        s = _1068
                        t = _354
                        continue 
                    mem[_687 + _691 + _867 + _995 + 32] = 0
                    _1084 = mem[64]
                    mem[mem[64]] = _995 + _687 + _691 + _867 - mem[64]
                    mem[64] = _995 + _687 + _691 + _867 + 32
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    s = _1084
                    t = _354
                    continue 
                mem[_687 + _691 + 32] = 0
                _871 = mem[_210]
                s = 0
                while s < _871:
                    mem[s + _687 + _691 + 32] = mem[s + _210 + 32]
                    s = s + 32
                    continue 
                if ceil32(_871) <= _871:
                    _988 = mem[_489]
                    s = 0
                    while s < _988:
                        mem[s + _687 + _691 + _871 + 32] = mem[s + _489 + 32]
                        s = s + 32
                        continue 
                    if ceil32(_988) <= _988:
                        _1069 = mem[64]
                        mem[mem[64]] = _988 + _687 + _691 + _871 - mem[64]
                        mem[64] = _988 + _687 + _691 + _871 + 32
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        s = _1069
                        t = _354
                        continue 
                    mem[_687 + _691 + _871 + _988 + 32] = 0
                    _1085 = mem[64]
                    mem[mem[64]] = _988 + _687 + _691 + _871 - mem[64]
                    mem[64] = _988 + _687 + _691 + _871 + 32
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    s = _1085
                    t = _354
                    continue 
                mem[_687 + _691 + _871 + 32] = 0
                _996 = mem[_489]
                s = 0
                while s < _996:
                    mem[s + _687 + _691 + _871 + 32] = mem[s + _489 + 32]
                    s = s + 32
                    continue 
                if ceil32(_996) <= _996:
                    _1070 = mem[64]
                    mem[mem[64]] = _996 + _687 + _691 + _871 - mem[64]
                    mem[64] = _996 + _687 + _691 + _871 + 32
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    s = _1070
                    t = _354
                    continue 
                mem[_687 + _691 + _871 + _996 + 32] = 0
                _1086 = mem[64]
                mem[mem[64]] = _996 + _687 + _691 + _871 - mem[64]
                mem[64] = _996 + _687 + _691 + _871 + 32
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                s = _1086
                t = _354
                continue 
            mem[_489 + 32 len u] = call.data[calldata.size len u]
            v = u
            t = _355
            while t:
                if v < 1:
                    revert with 0, 17
                if t / 10 > 0x1999999999999999999999999999999999999999999999999999999999999999:
                    revert with 0, 17
                if t < 10 * t / 10:
                    revert with 0, 17
                if 48 > -uint8(t - (10 * t / 10)) + 255:
                    revert with 0, 17
                if v - 1 >= mem[_489]:
                    revert with 0, 50
                mem[v + _489 + 31 len 8] = Mask(8, -(('mask_shl', 8, 0, 245, ('add', 48, ('mask_shl', 8, 0, 0, ('add', ('var', 2), ('mul', -10, ('div', ('var', 2), 10)))))), 0) + 256, 0) << (('mask_shl', 8, 0, 245, ('add', 48, ('mask_shl', 8, 0, 0, ('add', ('var', 2), ('mul', -10, ('div', ('var', 2), 10)))))), 0) - 256
                v = v - 1
                t = t / 10
                continue 
            _688 = mem[64]
            _692 = mem[s]
            t = 0
            while t < _692:
                mem[t + _688 + 32] = mem[t + s + 32]
                t = t + 32
                continue 
            if ceil32(_692) <= _692:
                _868 = mem[_210]
                s = 0
                while s < _868:
                    mem[s + _688 + _692 + 32] = mem[s + _210 + 32]
                    s = s + 32
                    continue 
                if ceil32(_868) <= _868:
                    _989 = mem[_489]
                    s = 0
                    while s < _989:
                        mem[s + _688 + _692 + _868 + 32] = mem[s + _489 + 32]
                        s = s + 32
                        continue 
                    if ceil32(_989) <= _989:
                        _1071 = mem[64]
                        mem[mem[64]] = _989 + _688 + _692 + _868 - mem[64]
                        mem[64] = _989 + _688 + _692 + _868 + 32
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        s = _1071
                        t = _354
                        continue 
                    mem[_688 + _692 + _868 + _989 + 32] = 0
                    _1087 = mem[64]
                    mem[mem[64]] = _989 + _688 + _692 + _868 - mem[64]
                    mem[64] = _989 + _688 + _692 + _868 + 32
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    s = _1087
                    t = _354
                    continue 
                mem[_688 + _692 + _868 + 32] = 0
                _997 = mem[_489]
                s = 0
                while s < _997:
                    mem[s + _688 + _692 + _868 + 32] = mem[s + _489 + 32]
                    s = s + 32
                    continue 
                if ceil32(_997) <= _997:
                    _1072 = mem[64]
                    mem[mem[64]] = _997 + _688 + _692 + _868 - mem[64]
                    mem[64] = _997 + _688 + _692 + _868 + 32
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    s = _1072
                    t = _354
                    continue 
                mem[_688 + _692 + _868 + _997 + 32] = 0
                _1088 = mem[64]
                mem[mem[64]] = _997 + _688 + _692 + _868 - mem[64]
                mem[64] = _997 + _688 + _692 + _868 + 32
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                s = _1088
                t = _354
                continue 
            mem[_688 + _692 + 32] = 0
            _872 = mem[_210]
            s = 0
            while s < _872:
                mem[s + _688 + _692 + 32] = mem[s + _210 + 32]
                s = s + 32
                continue 
            if ceil32(_872) <= _872:
                _990 = mem[_489]
                s = 0
                while s < _990:
                    mem[s + _688 + _692 + _872 + 32] = mem[s + _489 + 32]
                    s = s + 32
                    continue 
                if ceil32(_990) <= _990:
                    _1073 = mem[64]
                    mem[mem[64]] = _990 + _688 + _692 + _872 - mem[64]
                    mem[64] = _990 + _688 + _692 + _872 + 32
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    s = _1073
                    t = _354
                    continue 
                mem[_688 + _692 + _872 + _990 + 32] = 0
                _1089 = mem[64]
                mem[mem[64]] = _990 + _688 + _692 + _872 - mem[64]
                mem[64] = _990 + _688 + _692 + _872 + 32
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                s = _1089
                t = _354
                continue 
            mem[_688 + _692 + _872 + 32] = 0
            _998 = mem[_489]
            s = 0
            while s < _998:
                mem[s + _688 + _692 + _872 + 32] = mem[s + _489 + 32]
                s = s + 32
                continue 
            if ceil32(_998) <= _998:
                _1074 = mem[64]
                mem[mem[64]] = _998 + _688 + _692 + _872 - mem[64]
                mem[64] = _998 + _688 + _692 + _872 + 32
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                s = _1074
                t = _354
                continue 
            mem[_688 + _692 + _872 + _998 + 32] = 0
            _1090 = mem[64]
            mem[mem[64]] = _998 + _688 + _692 + _872 - mem[64]
            mem[64] = _998 + _688 + _692 + _872 + 32
            if idx == -1:
                revert with 0, 17
            idx = idx + 1
            s = _1090
            t = _354
            continue 
        mem[mem[64]] = 32
        _361 = mem[s]
        mem[mem[64] + 32] = mem[s]
        mem[mem[64] + 64 len ceil32(_361)] = mem[s + 32 len ceil32(_361)]
        if ceil32(_361) > _361:
            mem[mem[64] + _361 + 64] = 0
        return 32, mem[mem[64] + 32 len ceil32(_361) + 32]
    mem[_108 + 32 len s] = call.data[calldata.size len s]
    t = s
    idx = _65
    while idx:
        if t < 1:
            revert with 0, 17
        if idx / 10 > 0x1999999999999999999999999999999999999999999999999999999999999999:
            revert with 0, 17
        if idx < 10 * idx / 10:
            revert with 0, 17
        if 48 > -uint8(idx - (10 * idx / 10)) + 255:
            revert with 0, 17
        if t - 1 >= mem[_108]:
            revert with 0, 50
        mem[t + _108 + 31 len 8] = Mask(8, -(('mask_shl', 8, 0, 245, ('add', 48, ('mask_shl', 8, 0, 0, ('add', ('var', 0), ('mul', -10, ('div', ('var', 0), 10)))))), 0) + 256, 0) << (('mask_shl', 8, 0, 245, ('add', 48, ('mask_shl', 8, 0, 0, ('add', ('var', 0), ('mul', -10, ('div', ('var', 0), 10)))))), 0) - 256
        t = t - 1
        idx = idx / 10
        continue 
    _211 = mem[64]
    mem[64] = mem[64] + 64
    mem[_211] = 1
    mem[_211 + 32] = 0x2300000000000000000000000000000000000000000000000000000000000000
    idx = 1
    s = _108
    t = _61
    while idx < _57:
        if idx >= mem[96]:
            revert with 0, 50
        _357 = mem[(32 * idx) + 128]
        _358 = mem[mem[(32 * idx) + 128] + 160]
        if mem[mem[(32 * idx) + 128] + 160] > 2:
            revert with 0, 33
        if not mem[mem[(32 * idx) + 128] + 160]:
            _370 = mem[64]
            mem[64] = mem[64] + 64
            mem[_370] = 1
            mem[_370 + 32] = 0x3000000000000000000000000000000000000000000000000000000000000000
            _374 = mem[64]
            _380 = mem[s]
            t = 0
            while t < _380:
                mem[t + _374 + 32] = mem[t + s + 32]
                t = t + 32
                continue 
            if ceil32(_380) <= _380:
                _492 = mem[_211]
                s = 0
                while s < _492:
                    mem[s + _374 + _380 + 32] = mem[s + _211 + 32]
                    s = s + 32
                    continue 
                if ceil32(_492) <= _492:
                    _697 = mem[_370]
                    s = 0
                    while s < _697:
                        mem[s + _374 + _380 + _492 + 32] = mem[s + _370 + 32]
                        s = s + 32
                        continue 
                    if ceil32(_697) <= _697:
                        _879 = mem[64]
                        mem[mem[64]] = _697 + _374 + _380 + _492 - mem[64]
                        mem[64] = _697 + _374 + _380 + _492 + 32
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        s = _879
                        t = _357
                        continue 
                    mem[_374 + _380 + _492 + _697 + 32] = 0
                    _895 = mem[64]
                    mem[mem[64]] = _697 + _374 + _380 + _492 - mem[64]
                    mem[64] = _697 + _374 + _380 + _492 + 32
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    s = _895
                    t = _357
                    continue 
                mem[_374 + _380 + _492 + 32] = 0
                _705 = mem[_370]
                s = 0
                while s < _705:
                    mem[s + _374 + _380 + _492 + 32] = mem[s + _370 + 32]
                    s = s + 32
                    continue 
                if ceil32(_705) <= _705:
                    _880 = mem[64]
                    mem[mem[64]] = _705 + _374 + _380 + _492 - mem[64]
                    mem[64] = _705 + _374 + _380 + _492 + 32
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    s = _880
                    t = _357
                    continue 
                mem[_374 + _380 + _492 + _705 + 32] = 0
                _896 = mem[64]
                mem[mem[64]] = _705 + _374 + _380 + _492 - mem[64]
                mem[64] = _705 + _374 + _380 + _492 + 32
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                s = _896
                t = _357
                continue 
            mem[_374 + _380 + 32] = 0
            _498 = mem[_211]
            s = 0
            while s < _498:
                mem[s + _374 + _380 + 32] = mem[s + _211 + 32]
                s = s + 32
                continue 
            if ceil32(_498) <= _498:
                _698 = mem[_370]
                s = 0
                while s < _698:
                    mem[s + _374 + _380 + _498 + 32] = mem[s + _370 + 32]
                    s = s + 32
                    continue 
                if ceil32(_698) <= _698:
                    _881 = mem[64]
                    mem[mem[64]] = _698 + _374 + _380 + _498 - mem[64]
                    mem[64] = _698 + _374 + _380 + _498 + 32
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    s = _881
                    t = _357
                    continue 
                mem[_374 + _380 + _498 + _698 + 32] = 0
                _897 = mem[64]
                mem[mem[64]] = _698 + _374 + _380 + _498 - mem[64]
                mem[64] = _698 + _374 + _380 + _498 + 32
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                s = _897
                t = _357
                continue 
            mem[_374 + _380 + _498 + 32] = 0
            _706 = mem[_370]
            s = 0
            while s < _706:
                mem[s + _374 + _380 + _498 + 32] = mem[s + _370 + 32]
                s = s + 32
                continue 
            if ceil32(_706) <= _706:
                _882 = mem[64]
                mem[mem[64]] = _706 + _374 + _380 + _498 - mem[64]
                mem[64] = _706 + _374 + _380 + _498 + 32
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                s = _882
                t = _357
                continue 
            mem[_374 + _380 + _498 + _706 + 32] = 0
            _898 = mem[64]
            mem[mem[64]] = _706 + _374 + _380 + _498 - mem[64]
            mem[64] = _706 + _374 + _380 + _498 + 32
            if idx == -1:
                revert with 0, 17
            idx = idx + 1
            s = _898
            t = _357
            continue 
        u = 0
        t = mem[mem[(32 * idx) + 128] + 160]
        while t:
            if u == -1:
                revert with 0, 17
            u = u + 1
            t = t / 10
            continue 
        if u > test266151307():
            revert with 0, 65
        _490 = mem[64]
        mem[mem[64]] = u
        mem[64] = mem[64] + ceil32(u) + 32
        if not u:
            v = u
            t = _358
            while t:
                if v < 1:
                    revert with 0, 17
                if t / 10 > 0x1999999999999999999999999999999999999999999999999999999999999999:
                    revert with 0, 17
                if t < 10 * t / 10:
                    revert with 0, 17
                if 48 > -uint8(t - (10 * t / 10)) + 255:
                    revert with 0, 17
                if v - 1 >= mem[_490]:
                    revert with 0, 50
                mem[v + _490 + 31 len 8] = Mask(8, -(('mask_shl', 8, 0, 245, ('add', 48, ('mask_shl', 8, 0, 0, ('add', ('var', 2), ('mul', -10, ('div', ('var', 2), 10)))))), 0) + 256, 0) << (('mask_shl', 8, 0, 245, ('add', 48, ('mask_shl', 8, 0, 0, ('add', ('var', 2), ('mul', -10, ('div', ('var', 2), 10)))))), 0) - 256
                v = v - 1
                t = t / 10
                continue 
            _689 = mem[64]
            _695 = mem[s]
            t = 0
            while t < _695:
                mem[t + _689 + 32] = mem[t + s + 32]
                t = t + 32
                continue 
            if ceil32(_695) <= _695:
                _869 = mem[_211]
                s = 0
                while s < _869:
                    mem[s + _689 + _695 + 32] = mem[s + _211 + 32]
                    s = s + 32
                    continue 
                if ceil32(_869) <= _869:
                    _991 = mem[_490]
                    s = 0
                    while s < _991:
                        mem[s + _689 + _695 + _869 + 32] = mem[s + _490 + 32]
                        s = s + 32
                        continue 
                    if ceil32(_991) <= _991:
                        _1075 = mem[64]
                        mem[mem[64]] = _991 + _689 + _695 + _869 - mem[64]
                        mem[64] = _991 + _689 + _695 + _869 + 32
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        s = _1075
                        t = _357
                        continue 
                    mem[_689 + _695 + _869 + _991 + 32] = 0
                    _1091 = mem[64]
                    mem[mem[64]] = _991 + _689 + _695 + _869 - mem[64]
                    mem[64] = _991 + _689 + _695 + _869 + 32
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    s = _1091
                    t = _357
                    continue 
                mem[_689 + _695 + _869 + 32] = 0
                _999 = mem[_490]
                s = 0
                while s < _999:
                    mem[s + _689 + _695 + _869 + 32] = mem[s + _490 + 32]
                    s = s + 32
                    continue 
                if ceil32(_999) <= _999:
                    _1076 = mem[64]
                    mem[mem[64]] = _999 + _689 + _695 + _869 - mem[64]
                    mem[64] = _999 + _689 + _695 + _869 + 32
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    s = _1076
                    t = _357
                    continue 
                mem[_689 + _695 + _869 + _999 + 32] = 0
                _1092 = mem[64]
                mem[mem[64]] = _999 + _689 + _695 + _869 - mem[64]
                mem[64] = _999 + _689 + _695 + _869 + 32
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                s = _1092
                t = _357
                continue 
            mem[_689 + _695 + 32] = 0
            _877 = mem[_211]
            s = 0
            while s < _877:
                mem[s + _689 + _695 + 32] = mem[s + _211 + 32]
                s = s + 32
                continue 
            if ceil32(_877) <= _877:
                _992 = mem[_490]
                s = 0
                while s < _992:
                    mem[s + _689 + _695 + _877 + 32] = mem[s + _490 + 32]
                    s = s + 32
                    continue 
                if ceil32(_992) <= _992:
                    _1077 = mem[64]
                    mem[mem[64]] = _992 + _689 + _695 + _877 - mem[64]
                    mem[64] = _992 + _689 + _695 + _877 + 32
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    s = _1077
                    t = _357
                    continue 
                mem[_689 + _695 + _877 + _992 + 32] = 0
                _1093 = mem[64]
                mem[mem[64]] = _992 + _689 + _695 + _877 - mem[64]
                mem[64] = _992 + _689 + _695 + _877 + 32
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                s = _1093
                t = _357
                continue 
            mem[_689 + _695 + _877 + 32] = 0
            _1000 = mem[_490]
            s = 0
            while s < _1000:
                mem[s + _689 + _695 + _877 + 32] = mem[s + _490 + 32]
                s = s + 32
                continue 
            if ceil32(_1000) <= _1000:
                _1078 = mem[64]
                mem[mem[64]] = _1000 + _689 + _695 + _877 - mem[64]
                mem[64] = _1000 + _689 + _695 + _877 + 32
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                s = _1078
                t = _357
                continue 
            mem[_689 + _695 + _877 + _1000 + 32] = 0
            _1094 = mem[64]
            mem[mem[64]] = _1000 + _689 + _695 + _877 - mem[64]
            mem[64] = _1000 + _689 + _695 + _877 + 32
            if idx == -1:
                revert with 0, 17
            idx = idx + 1
            s = _1094
            t = _357
            continue 
        mem[_490 + 32 len u] = call.data[calldata.size len u]
        v = u
        t = _358
        while t:
            if v < 1:
                revert with 0, 17
            if t / 10 > 0x1999999999999999999999999999999999999999999999999999999999999999:
                revert with 0, 17
            if t < 10 * t / 10:
                revert with 0, 17
            if 48 > -uint8(t - (10 * t / 10)) + 255:
                revert with 0, 17
            if v - 1 >= mem[_490]:
                revert with 0, 50
            mem[v + _490 + 31 len 8] = Mask(8, -(('mask_shl', 8, 0, 245, ('add', 48, ('mask_shl', 8, 0, 0, ('add', ('var', 2), ('mul', -10, ('div', ('var', 2), 10)))))), 0) + 256, 0) << (('mask_shl', 8, 0, 245, ('add', 48, ('mask_shl', 8, 0, 0, ('add', ('var', 2), ('mul', -10, ('div', ('var', 2), 10)))))), 0) - 256
            v = v - 1
            t = t / 10
            continue 
        _690 = mem[64]
        _696 = mem[s]
        t = 0
        while t < _696:
            mem[t + _690 + 32] = mem[t + s + 32]
            t = t + 32
            continue 
        if ceil32(_696) <= _696:
            _870 = mem[_211]
            s = 0
            while s < _870:
                mem[s + _690 + _696 + 32] = mem[s + _211 + 32]
                s = s + 32
                continue 
            if ceil32(_870) <= _870:
                _993 = mem[_490]
                s = 0
                while s < _993:
                    mem[s + _690 + _696 + _870 + 32] = mem[s + _490 + 32]
                    s = s + 32
                    continue 
                if ceil32(_993) <= _993:
                    _1079 = mem[64]
                    mem[mem[64]] = _993 + _690 + _696 + _870 - mem[64]
                    mem[64] = _993 + _690 + _696 + _870 + 32
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    s = _1079
                    t = _357
                    continue 
                mem[_690 + _696 + _870 + _993 + 32] = 0
                _1095 = mem[64]
                mem[mem[64]] = _993 + _690 + _696 + _870 - mem[64]
                mem[64] = _993 + _690 + _696 + _870 + 32
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                s = _1095
                t = _357
                continue 
            mem[_690 + _696 + _870 + 32] = 0
            _1001 = mem[_490]
            s = 0
            while s < _1001:
                mem[s + _690 + _696 + _870 + 32] = mem[s + _490 + 32]
                s = s + 32
                continue 
            if ceil32(_1001) <= _1001:
                _1080 = mem[64]
                mem[mem[64]] = _1001 + _690 + _696 + _870 - mem[64]
                mem[64] = _1001 + _690 + _696 + _870 + 32
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                s = _1080
                t = _357
                continue 
            mem[_690 + _696 + _870 + _1001 + 32] = 0
            _1096 = mem[64]
            mem[mem[64]] = _1001 + _690 + _696 + _870 - mem[64]
            mem[64] = _1001 + _690 + _696 + _870 + 32
            if idx == -1:
                revert with 0, 17
            idx = idx + 1
            s = _1096
            t = _357
            continue 
        mem[_690 + _696 + 32] = 0
        _878 = mem[_211]
        s = 0
        while s < _878:
            mem[s + _690 + _696 + 32] = mem[s + _211 + 32]
            s = s + 32
            continue 
        if ceil32(_878) <= _878:
            _994 = mem[_490]
            s = 0
            while s < _994:
                mem[s + _690 + _696 + _878 + 32] = mem[s + _490 + 32]
                s = s + 32
                continue 
            if ceil32(_994) <= _994:
                _1081 = mem[64]
                mem[mem[64]] = _994 + _690 + _696 + _878 - mem[64]
                mem[64] = _994 + _690 + _696 + _878 + 32
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                s = _1081
                t = _357
                continue 
            mem[_690 + _696 + _878 + _994 + 32] = 0
            _1097 = mem[64]
            mem[mem[64]] = _994 + _690 + _696 + _878 - mem[64]
            mem[64] = _994 + _690 + _696 + _878 + 32
            if idx == -1:
                revert with 0, 17
            idx = idx + 1
            s = _1097
            t = _357
            continue 
        mem[_690 + _696 + _878 + 32] = 0
        _1002 = mem[_490]
        s = 0
        while s < _1002:
            mem[s + _690 + _696 + _878 + 32] = mem[s + _490 + 32]
            s = s + 32
            continue 
        if ceil32(_1002) <= _1002:
            _1082 = mem[64]
            mem[mem[64]] = _1002 + _690 + _696 + _878 - mem[64]
            mem[64] = _1002 + _690 + _696 + _878 + 32
            if idx == -1:
                revert with 0, 17
            idx = idx + 1
            s = _1082
            t = _357
            continue 
        mem[_690 + _696 + _878 + _1002 + 32] = 0
        _1098 = mem[64]
        mem[mem[64]] = _1002 + _690 + _696 + _878 - mem[64]
        mem[64] = _1002 + _690 + _696 + _878 + 32
        if idx == -1:
            revert with 0, 17
        idx = idx + 1
        s = _1098
        t = _357
        continue 
    _356 = mem[64]
    mem[mem[64]] = 32
    _362 = mem[s]
    mem[mem[64] + 32] = mem[s]
    mem[mem[64] + 64 len ceil32(_362)] = mem[s + 32 len ceil32(_362)]
    if ceil32(_362) <= _362:
        return 32, mem[mem[64] + 32 len ceil32(_362) + 32]
    mem[mem[64] + _362 + 64] = 0
    return memory
      from mem[64]
       len ceil32(_362) + _356 + -mem[64] + 64
}

function sub_77ec7826(?) payable {
    require calldata.size - 4 >= 32
    require arg1 == address(arg1)
    if not sub_44fea1b9[address(arg1)]:
        return ''
    mem[0] = address(arg1)
    mem[32] = 5
    mem[64] = (32 * stor5[address(arg1)].field_0) + 128
    mem[96] = stor5[address(arg1)].field_0
    s = 128
    idx = 0
    while idx < stor5[address(arg1)].field_0:
        mem[0] = sha3(address(arg1), 5)
        _75 = mem[64]
        mem[64] = mem[64] + 192
        if bool(stor5[address(arg1)][idx].field_0):
            if bool(stor5[address(arg1)][idx].field_0) == uint255(stor5[address(arg1)][idx].field_0) * 0.5 < 32:
                revert with 0, 34
            _81 = mem[64]
            mem[64] = mem[64] + ceil32(uint255(stor5[address(arg1)][idx].field_0) * 0.5) + 32
            mem[_81] = uint255(stor5[address(arg1)][idx].field_0) * 0.5
            if bool(stor5[address(arg1)][idx].field_0):
                if bool(stor5[address(arg1)][idx].field_0) == uint255(stor5[address(arg1)][idx].field_0) * 0.5 < 32:
                    revert with 0, 34
                if Mask(256, -1, stor5[address(arg1)][idx].field_0):
                    if 31 >= uint255(stor5[address(arg1)][idx].field_0) * 0.5:
                        mem[_81 + 32] = 256 * Mask(248, 0, stor5[address(arg1)][idx].field_8)
                    else:
                        mem[0] = (6 * idx) + sha3(sha3(address(arg1), 5))
                        mem[_81 + 32] = stor5[address(arg1)][idx].field_0
                        t = _81 + 32
                        u = sha3(mem[0])
                        while _81 + (uint255(stor5[address(arg1)][idx].field_0) * 0.5) > t:
                            mem[t + 32] = uint256(stor1[u])
                            t = t + 32
                            u = u + 1
                            continue 
            else:
                if bool(stor5[address(arg1)][idx].field_0) == stor5[address(arg1)][idx].field_1 % 128 < 32:
                    revert with 0, 34
                if stor5[address(arg1)][idx].field_1 % 128:
                    if 31 >= stor5[address(arg1)][idx].field_1 % 128:
                        mem[_81 + 32] = 256 * Mask(248, 0, stor5[address(arg1)][idx].field_8)
                    else:
                        mem[0] = (6 * idx) + sha3(sha3(address(arg1), 5))
                        mem[_81 + 32] = stor5[address(arg1)][idx].field_0
                        t = _81 + 32
                        u = sha3(mem[0])
                        while _81 + stor5[address(arg1)][idx].field_1 % 128 > t:
                            mem[t + 32] = uint256(stor1[u])
                            t = t + 32
                            u = u + 1
                            continue 
            mem[_75] = _81
        else:
            if bool(stor5[address(arg1)][idx].field_0) == stor5[address(arg1)][idx].field_1 % 128 < 32:
                revert with 0, 34
            _83 = mem[64]
            mem[64] = mem[64] + ceil32(stor5[address(arg1)][idx].field_1 % 128) + 32
            mem[_83] = stor5[address(arg1)][idx].field_1 % 128
            if bool(stor5[address(arg1)][idx].field_0):
                if bool(stor5[address(arg1)][idx].field_0) == uint255(stor5[address(arg1)][idx].field_0) * 0.5 < 32:
                    revert with 0, 34
                if Mask(256, -1, stor5[address(arg1)][idx].field_0):
                    if 31 >= uint255(stor5[address(arg1)][idx].field_0) * 0.5:
                        mem[_83 + 32] = 256 * Mask(248, 0, stor5[address(arg1)][idx].field_8)
                    else:
                        mem[0] = (6 * idx) + sha3(sha3(address(arg1), 5))
                        mem[_83 + 32] = stor5[address(arg1)][idx].field_0
                        t = _83 + 32
                        u = sha3(mem[0])
                        while _83 + (uint255(stor5[address(arg1)][idx].field_0) * 0.5) > t:
                            mem[t + 32] = uint256(stor1[u])
                            t = t + 32
                            u = u + 1
                            continue 
            else:
                if bool(stor5[address(arg1)][idx].field_0) == stor5[address(arg1)][idx].field_1 % 128 < 32:
                    revert with 0, 34
                if stor5[address(arg1)][idx].field_1 % 128:
                    if 31 >= stor5[address(arg1)][idx].field_1 % 128:
                        mem[_83 + 32] = 256 * Mask(248, 0, stor5[address(arg1)][idx].field_8)
                    else:
                        mem[0] = (6 * idx) + sha3(sha3(address(arg1), 5))
                        mem[_83 + 32] = stor5[address(arg1)][idx].field_0
                        t = _83 + 32
                        u = sha3(mem[0])
                        while _83 + stor5[address(arg1)][idx].field_1 % 128 > t:
                            mem[t + 32] = uint256(stor1[u])
                            t = t + 32
                            u = u + 1
                            continue 
            mem[_75] = _83
        mem[_75 + 32] = stor5[address(arg1)][idx].field_256
        mem[_75 + 64] = stor5[address(arg1)][idx].field_512
        mem[_75 + 96] = stor5[address(arg1)][idx].field_768
        mem[_75 + 128] = stor5[address(arg1)][idx].field_1024
        if uint8(stor5[address(arg1)][idx].field_1280) > 2:
            revert with 0, 33
        mem[_75 + 160] = uint8(stor5[address(arg1)][idx].field_1280)
        mem[s] = _75
        s = s + 32
        idx = idx + 1
        continue 
    _73 = mem[96]
    _77 = mem[64]
    mem[64] = mem[64] + 192
    mem[_77] = 96
    mem[_77 + 32] = 0
    mem[_77 + 64] = 0
    mem[_77 + 96] = 0
    mem[_77 + 128] = 0
    mem[_77 + 160] = 0
    if 0 >= mem[96]:
        revert with 0, 50
    _84 = mem[mem[128] + 32]
    if mem[mem[128] + 160] > 2:
        revert with 0, 33
    idx = 0
    while stor8[mem[mem[128] + 160]].field_0 > idx:
        if idx > !stor8[mem[mem[128] + 160]].field_0:
            revert with 0, 17
        if mem[mem[128] + 160] > 2:
            revert with 0, 33
        mem[32] = 8
        if idx + stor8[mem[mem[128] + 160]].field_0 / 2 >= stor8[mem[mem[128] + 160]].field_0:
            revert with 0, 50
        mem[0] = sha3(mem[mem[128] + 160], 8)
        if stor8[mem[mem[128] + 160]][Mask(255, 1, idx + stor8[mem[mem[128] + 160]].field_0)].field_0 >= _84:
            idx = idx
            continue 
        if 1 > !(idx + stor8[mem[mem[128] + 160]].field_0 / 2):
            revert with 0, 17
        idx = (idx + stor8[mem[mem[128] + 160]].field_0 / 2) + 1
        continue 
    if mem[mem[128] + 160] > 2:
        revert with 0, 33
    mem[0] = mem[mem[128] + 160]
    mem[32] = 8
    s = 0
    while stor8[mem[mem[128] + 160]].field_0 > s:
        if s > !stor8[mem[mem[128] + 160]].field_0:
            revert with 0, 17
        if mem[mem[128] + 160] > 2:
            revert with 0, 33
        mem[32] = 8
        if s + stor8[mem[mem[128] + 160]].field_0 / 2 >= stor8[mem[mem[128] + 160]].field_0:
            revert with 0, 50
        mem[0] = sha3(mem[mem[128] + 160], 8)
        if stor8[mem[mem[128] + 160]][Mask(255, 1, s + stor8[mem[mem[128] + 160]].field_0)].field_0 >= block.timestamp:
            s = s
            continue 
        if 1 > !(s + stor8[mem[mem[128] + 160]].field_0 / 2):
            revert with 0, 17
        s = (s + stor8[mem[mem[128] + 160]].field_0 / 2) + 1
        continue 
    t = idx
    u = mem[mem[128] + 96]
    while t < s:
        if mem[mem[128] + 160] > 2:
            revert with 0, 33
        mem[32] = 8
        if t >= stor8[mem[mem[128] + 160]].field_0:
            revert with 0, 50
        mem[0] = sha3(mem[mem[128] + 160], 8)
        if 100 * 10^6 < stor8[mem[mem[128] + 160]][t].field_256 - 0x8000000000000000000000000000000000000000000000000000000000000000 and stor8[mem[mem[128] + 160]][t].field_256 >= 0:
            revert with 0, 17
        if stor8[mem[mem[128] + 160]][t].field_256 < 0 and 100 * 10^6 > stor8[mem[mem[128] + 160]][t].field_256 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
            revert with 0, 17
        if u and -stor8[mem[mem[128] + 160]][t].field_256 + 100 * 10^6 > -1 / u:
            revert with 0, 17
        if t == -1:
            revert with 0, 17
        t = t + 1
        u = (100 * 10^6 * u) - (stor8[mem[mem[128] + 160]][t].field_256 * u) / 100 * 10^6
        continue 
    if block.timestamp < _84:
        revert with 0, 17
    if not sub_9b28d1a7:
        revert with 0, 18
    idx = block.timestamp - _84 / sub_9b28d1a7
    s = u
    while idx:
        if not idx:
            revert with 0, 17
        if 100 * 10^6 < sub_93520a80 - 0x8000000000000000000000000000000000000000000000000000000000000000 and sub_93520a80 >= 0:
            revert with 0, 17
        if sub_93520a80 < 0 and 100 * 10^6 > sub_93520a80 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
            revert with 0, 17
        if s and -sub_93520a80 + 100 * 10^6 > -1 / s:
            revert with 0, 17
        idx = idx - 1
        s = (100 * 10^6 * s) - (sub_93520a80 * s) / 100 * 10^6
        continue 
    if not s:
        _278 = mem[64]
        mem[64] = mem[64] + 64
        mem[_278] = 1
        mem[_278 + 32] = 0x3000000000000000000000000000000000000000000000000000000000000000
        _279 = mem[64]
        mem[64] = mem[64] + 64
        mem[_279] = 1
        mem[_279 + 32] = 0x2300000000000000000000000000000000000000000000000000000000000000
        idx = 1
        s = _278
        t = _77
        while idx < _73:
            if idx >= mem[96]:
                revert with 0, 50
            _323 = mem[(32 * idx) + 128]
            _325 = mem[mem[(32 * idx) + 128] + 32]
            if mem[mem[(32 * idx) + 128] + 160] > 2:
                revert with 0, 33
            t = 0
            while stor8[mem[mem[(32 * idx) + 128] + 160]].field_0 > t:
                if t > !stor8[mem[mem[(32 * idx) + 128] + 160]].field_0:
                    revert with 0, 17
                if mem[mem[(32 * idx) + 128] + 160] > 2:
                    revert with 0, 33
                mem[32] = 8
                if t + stor8[mem[mem[(32 * idx) + 128] + 160]].field_0 / 2 >= stor8[mem[mem[(32 * idx) + 128] + 160]].field_0:
                    revert with 0, 50
                mem[0] = sha3(mem[mem[(32 * idx) + 128] + 160], 8)
                if stor8[mem[mem[(32 * idx) + 128] + 160]][Mask(255, 1, t + stor8[mem[mem[(32 * idx) + 128] + 160]].field_0)].field_0 >= _325:
                    t = t
                    continue 
                if 1 > !(t + stor8[mem[mem[(32 * idx) + 128] + 160]].field_0 / 2):
                    revert with 0, 17
                t = (t + stor8[mem[mem[(32 * idx) + 128] + 160]].field_0 / 2) + 1
                continue 
            if mem[mem[(32 * idx) + 128] + 160] > 2:
                revert with 0, 33
            mem[0] = mem[mem[(32 * idx) + 128] + 160]
            mem[32] = 8
            u = 0
            while stor8[mem[mem[(32 * idx) + 128] + 160]].field_0 > u:
                if u > !stor8[mem[mem[(32 * idx) + 128] + 160]].field_0:
                    revert with 0, 17
                if mem[mem[(32 * idx) + 128] + 160] > 2:
                    revert with 0, 33
                mem[32] = 8
                if u + stor8[mem[mem[(32 * idx) + 128] + 160]].field_0 / 2 >= stor8[mem[mem[(32 * idx) + 128] + 160]].field_0:
                    revert with 0, 50
                mem[0] = sha3(mem[mem[(32 * idx) + 128] + 160], 8)
                if stor8[mem[mem[(32 * idx) + 128] + 160]][Mask(255, 1, u + stor8[mem[mem[(32 * idx) + 128] + 160]].field_0)].field_0 >= block.timestamp:
                    u = u
                    continue 
                if 1 > !(u + stor8[mem[mem[(32 * idx) + 128] + 160]].field_0 / 2):
                    revert with 0, 17
                u = (u + stor8[mem[mem[(32 * idx) + 128] + 160]].field_0 / 2) + 1
                continue 
            v = t
            w = mem[mem[(32 * idx) + 128] + 96]
            while v < u:
                if mem[mem[(32 * idx) + 128] + 160] > 2:
                    revert with 0, 33
                mem[32] = 8
                if v >= stor8[mem[mem[(32 * idx) + 128] + 160]].field_0:
                    revert with 0, 50
                mem[0] = sha3(mem[mem[(32 * idx) + 128] + 160], 8)
                if 100 * 10^6 < stor8[mem[mem[(32 * idx) + 128] + 160]][v].field_256 - 0x8000000000000000000000000000000000000000000000000000000000000000 and stor8[mem[mem[(32 * idx) + 128] + 160]][v].field_256 >= 0:
                    revert with 0, 17
                if stor8[mem[mem[(32 * idx) + 128] + 160]][v].field_256 < 0 and 100 * 10^6 > stor8[mem[mem[(32 * idx) + 128] + 160]][v].field_256 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                    revert with 0, 17
                if w and -stor8[mem[mem[(32 * idx) + 128] + 160]][v].field_256 + 100 * 10^6 > -1 / w:
                    revert with 0, 17
                if v == -1:
                    revert with 0, 17
                v = v + 1
                w = (100 * 10^6 * w) - (stor8[mem[mem[(32 * idx) + 128] + 160]][v].field_256 * w) / 100 * 10^6
                continue 
            if block.timestamp < _325:
                revert with 0, 17
            if not sub_9b28d1a7:
                revert with 0, 18
            t = block.timestamp - _325 / sub_9b28d1a7
            u = w
            while t:
                if not t:
                    revert with 0, 17
                if 100 * 10^6 < sub_93520a80 - 0x8000000000000000000000000000000000000000000000000000000000000000 and sub_93520a80 >= 0:
                    revert with 0, 17
                if sub_93520a80 < 0 and 100 * 10^6 > sub_93520a80 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                    revert with 0, 17
                if u and -sub_93520a80 + 100 * 10^6 > -1 / u:
                    revert with 0, 17
                t = t - 1
                u = (100 * 10^6 * u) - (sub_93520a80 * u) / 100 * 10^6
                continue 
            if not u:
                _765 = mem[64]
                mem[64] = mem[64] + 64
                mem[_765] = 1
                mem[_765 + 32] = 0x3000000000000000000000000000000000000000000000000000000000000000
                _768 = mem[64]
                _771 = mem[s]
                t = 0
                while t < _771:
                    mem[t + _768 + 32] = mem[t + s + 32]
                    t = t + 32
                    continue 
                if ceil32(_771) <= _771:
                    _849 = mem[_279]
                    s = 0
                    while s < _849:
                        mem[s + _768 + _771 + 32] = mem[s + _279 + 32]
                        s = s + 32
                        continue 
                    if ceil32(_849) <= _849:
                        _973 = mem[_765]
                        s = 0
                        while s < _973:
                            mem[s + _768 + _771 + _849 + 32] = mem[s + _765 + 32]
                            s = s + 32
                            continue 
                        if ceil32(_973) <= _973:
                            _1099 = mem[64]
                            mem[mem[64]] = _973 + _768 + _771 + _849 - mem[64]
                            mem[64] = _973 + _768 + _771 + _849 + 32
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            s = _1099
                            t = _323
                            continue 
                        mem[_768 + _771 + _849 + _973 + 32] = 0
                        _1103 = mem[64]
                        mem[mem[64]] = _973 + _768 + _771 + _849 - mem[64]
                        mem[64] = _973 + _768 + _771 + _849 + 32
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        s = _1103
                        t = _323
                        continue 
                    mem[_768 + _771 + _849 + 32] = 0
                    _975 = mem[_765]
                    s = 0
                    while s < _975:
                        mem[s + _768 + _771 + _849 + 32] = mem[s + _765 + 32]
                        s = s + 32
                        continue 
                    if ceil32(_975) <= _975:
                        _1100 = mem[64]
                        mem[mem[64]] = _975 + _768 + _771 + _849 - mem[64]
                        mem[64] = _975 + _768 + _771 + _849 + 32
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        s = _1100
                        t = _323
                        continue 
                    mem[_768 + _771 + _849 + _975 + 32] = 0
                    _1104 = mem[64]
                    mem[mem[64]] = _975 + _768 + _771 + _849 - mem[64]
                    mem[64] = _975 + _768 + _771 + _849 + 32
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    s = _1104
                    t = _323
                    continue 
                mem[_768 + _771 + 32] = 0
                _852 = mem[_279]
                s = 0
                while s < _852:
                    mem[s + _768 + _771 + 32] = mem[s + _279 + 32]
                    s = s + 32
                    continue 
                if ceil32(_852) <= _852:
                    _974 = mem[_765]
                    s = 0
                    while s < _974:
                        mem[s + _768 + _771 + _852 + 32] = mem[s + _765 + 32]
                        s = s + 32
                        continue 
                    if ceil32(_974) <= _974:
                        _1101 = mem[64]
                        mem[mem[64]] = _974 + _768 + _771 + _852 - mem[64]
                        mem[64] = _974 + _768 + _771 + _852 + 32
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        s = _1101
                        t = _323
                        continue 
                    mem[_768 + _771 + _852 + _974 + 32] = 0
                    _1105 = mem[64]
                    mem[mem[64]] = _974 + _768 + _771 + _852 - mem[64]
                    mem[64] = _974 + _768 + _771 + _852 + 32
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    s = _1105
                    t = _323
                    continue 
                mem[_768 + _771 + _852 + 32] = 0
                _976 = mem[_765]
                s = 0
                while s < _976:
                    mem[s + _768 + _771 + _852 + 32] = mem[s + _765 + 32]
                    s = s + 32
                    continue 
                if ceil32(_976) <= _976:
                    _1102 = mem[64]
                    mem[mem[64]] = _976 + _768 + _771 + _852 - mem[64]
                    mem[64] = _976 + _768 + _771 + _852 + 32
                    if ceil32(_976) == -1:
                        revert with 0, 17
                    s = ceil32(_976) + 1
                    s = _1102
                    t = _323
                    continue 
                mem[_768 + _771 + _852 + _976 + 32] = 0
                _1106 = mem[64]
                mem[mem[64]] = _976 + _768 + _771 + _852 - mem[64]
                mem[64] = _976 + _768 + _771 + _852 + 32
                if ceil32(_976) == -1:
                    revert with 0, 17
                s = ceil32(_976) + 1
                s = _1106
                t = _323
                continue 
            v = 0
            t = u
            while t:
                if v == -1:
                    revert with 0, 17
                v = v + 1
                t = t / 10
                continue 
            if v > test266151307():
                revert with 0, 65
            _846 = mem[64]
            mem[mem[64]] = v
            mem[64] = mem[64] + ceil32(v) + 32
            if not v:
                w = v
                t = u
                while t:
                    if w < 1:
                        revert with 0, 17
                    if t / 10 > 0x1999999999999999999999999999999999999999999999999999999999999999:
                        revert with 0, 17
                    if t < 10 * t / 10:
                        revert with 0, 17
                    if 48 > -uint8(t - (10 * t / 10)) + 255:
                        revert with 0, 17
                    if w - 1 >= mem[_846]:
                        revert with 0, 50
                    mem[w + _846 + 31 len 8] = Mask(8, -(('mask_shl', 8, 0, 245, ('add', 48, ('mask_shl', 8, 0, 0, ('add', ('var', 2), ('mul', -10, ('div', ('var', 2), 10)))))), 0) + 256, 0) << (('mask_shl', 8, 0, 245, ('add', 48, ('mask_shl', 8, 0, 0, ('add', ('var', 2), ('mul', -10, ('div', ('var', 2), 10)))))), 0) - 256
                    w = w - 1
                    t = t / 10
                    continue 
                _969 = mem[64]
                _971 = mem[s]
                t = 0
                while t < _971:
                    mem[t + _969 + 32] = mem[t + s + 32]
                    t = t + 32
                    continue 
                if ceil32(_971) <= _971:
                    _1093 = mem[_279]
                    s = 0
                    while s < _1093:
                        mem[s + _969 + _971 + 32] = mem[s + _279 + 32]
                        s = s + 32
                        continue 
                    if ceil32(_1093) <= _1093:
                        _1295 = mem[_846]
                        idx = 0
                        while idx < _1295:
                            mem[idx + _969 + _971 + _1093 + 32] = mem[idx + _846 + 32]
                            idx = idx + 32
                            continue 
                        if ceil32(_1295) <= _1295:
                            _1479 = mem[64]
                            mem[mem[64]] = _1295 + _969 + _971 + _1093 - mem[64]
                            mem[64] = _1295 + _969 + _971 + _1093 + 32
                            if ceil32(_1093) == -1:
                                revert with 0, 17
                            s = ceil32(_1093) + 1
                            s = _1479
                            t = _323
                            continue 
                        mem[_969 + _971 + _1093 + _1295 + 32] = 0
                        _1495 = mem[64]
                        mem[mem[64]] = _1295 + _969 + _971 + _1093 - mem[64]
                        mem[64] = _1295 + _969 + _971 + _1093 + 32
                        if ceil32(_1093) == -1:
                            revert with 0, 17
                        s = ceil32(_1093) + 1
                        s = _1495
                        t = _323
                        continue 
                    mem[_969 + _971 + _1093 + 32] = 0
                    _1303 = mem[_846]
                    idx = 0
                    while idx < _1303:
                        mem[idx + _969 + _971 + _1093 + 32] = mem[idx + _846 + 32]
                        idx = idx + 32
                        continue 
                    if ceil32(_1303) <= _1303:
                        _1480 = mem[64]
                        mem[mem[64]] = _1303 + _969 + _971 + _1093 - mem[64]
                        mem[64] = _1303 + _969 + _971 + _1093 + 32
                        if ceil32(_1093) == -1:
                            revert with 0, 17
                        s = ceil32(_1093) + 1
                        s = _1480
                        t = _323
                        continue 
                    mem[_969 + _971 + _1093 + _1303 + 32] = 0
                    _1496 = mem[64]
                    mem[mem[64]] = _1303 + _969 + _971 + _1093 - mem[64]
                    mem[64] = _1303 + _969 + _971 + _1093 + 32
                    if ceil32(_1093) == -1:
                        revert with 0, 17
                    s = ceil32(_1093) + 1
                    s = _1496
                    t = _323
                    continue 
                mem[_969 + _971 + 32] = 0
                _1097 = mem[_279]
                s = 0
                while s < _1097:
                    mem[s + _969 + _971 + 32] = mem[s + _279 + 32]
                    s = s + 32
                    continue 
                if ceil32(_1097) <= _1097:
                    _1296 = mem[_846]
                    s = 0
                    while s < _1296:
                        mem[s + _969 + _971 + _1097 + 32] = mem[s + _846 + 32]
                        s = s + 32
                        continue 
                    if ceil32(_1296) <= _1296:
                        _1481 = mem[64]
                        mem[mem[64]] = _1296 + _969 + _971 + _1097 - mem[64]
                        mem[64] = _1296 + _969 + _971 + _1097 + 32
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        s = _1481
                        t = _323
                        continue 
                    mem[_969 + _971 + _1097 + _1296 + 32] = 0
                    _1497 = mem[64]
                    mem[mem[64]] = _1296 + _969 + _971 + _1097 - mem[64]
                    mem[64] = _1296 + _969 + _971 + _1097 + 32
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    s = _1497
                    t = _323
                    continue 
                mem[_969 + _971 + _1097 + 32] = 0
                _1304 = mem[_846]
                s = 0
                while s < _1304:
                    mem[s + _969 + _971 + _1097 + 32] = mem[s + _846 + 32]
                    s = s + 32
                    continue 
                if ceil32(_1304) <= _1304:
                    _1482 = mem[64]
                    mem[mem[64]] = _1304 + _969 + _971 + _1097 - mem[64]
                    mem[64] = _1304 + _969 + _971 + _1097 + 32
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    s = _1482
                    t = _323
                    continue 
                mem[_969 + _971 + _1097 + _1304 + 32] = 0
                _1498 = mem[64]
                mem[mem[64]] = _1304 + _969 + _971 + _1097 - mem[64]
                mem[64] = _1304 + _969 + _971 + _1097 + 32
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                s = _1498
                t = _323
                continue 
            mem[_846 + 32 len v] = call.data[calldata.size len v]
            w = v
            t = u
            while t:
                if w < 1:
                    revert with 0, 17
                if t / 10 > 0x1999999999999999999999999999999999999999999999999999999999999999:
                    revert with 0, 17
                if t < 10 * t / 10:
                    revert with 0, 17
                if 48 > -uint8(t - (10 * t / 10)) + 255:
                    revert with 0, 17
                if w - 1 >= mem[_846]:
                    revert with 0, 50
                mem[w + _846 + 31 len 8] = Mask(8, -(('mask_shl', 8, 0, 245, ('add', 48, ('mask_shl', 8, 0, 0, ('add', ('var', 2), ('mul', -10, ('div', ('var', 2), 10)))))), 0) + 256, 0) << (('mask_shl', 8, 0, 245, ('add', 48, ('mask_shl', 8, 0, 0, ('add', ('var', 2), ('mul', -10, ('div', ('var', 2), 10)))))), 0) - 256
                w = w - 1
                t = t / 10
                continue 
            _970 = mem[64]
            _972 = mem[s]
            t = 0
            while t < _972:
                mem[t + _970 + 32] = mem[t + s + 32]
                t = t + 32
                continue 
            if ceil32(_972) <= _972:
                _1094 = mem[_279]
                s = 0
                while s < _1094:
                    mem[s + _970 + _972 + 32] = mem[s + _279 + 32]
                    s = s + 32
                    continue 
                if ceil32(_1094) <= _1094:
                    _1297 = mem[_846]
                    s = 0
                    while s < _1297:
                        mem[s + _970 + _972 + _1094 + 32] = mem[s + _846 + 32]
                        s = s + 32
                        continue 
                    if ceil32(_1297) <= _1297:
                        _1483 = mem[64]
                        mem[mem[64]] = _1297 + _970 + _972 + _1094 - mem[64]
                        mem[64] = _1297 + _970 + _972 + _1094 + 32
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        s = _1483
                        t = _323
                        continue 
                    mem[_970 + _972 + _1094 + _1297 + 32] = 0
                    _1499 = mem[64]
                    mem[mem[64]] = _1297 + _970 + _972 + _1094 - mem[64]
                    mem[64] = _1297 + _970 + _972 + _1094 + 32
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    s = _1499
                    t = _323
                    continue 
                mem[_970 + _972 + _1094 + 32] = 0
                _1305 = mem[_846]
                s = 0
                while s < _1305:
                    mem[s + _970 + _972 + _1094 + 32] = mem[s + _846 + 32]
                    s = s + 32
                    continue 
                if ceil32(_1305) <= _1305:
                    _1484 = mem[64]
                    mem[mem[64]] = _1305 + _970 + _972 + _1094 - mem[64]
                    mem[64] = _1305 + _970 + _972 + _1094 + 32
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    s = _1484
                    t = _323
                    continue 
                mem[_970 + _972 + _1094 + _1305 + 32] = 0
                _1500 = mem[64]
                mem[mem[64]] = _1305 + _970 + _972 + _1094 - mem[64]
                mem[64] = _1305 + _970 + _972 + _1094 + 32
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                s = _1500
                t = _323
                continue 
            mem[_970 + _972 + 32] = 0
            _1098 = mem[_279]
            s = 0
            while s < _1098:
                mem[s + _970 + _972 + 32] = mem[s + _279 + 32]
                s = s + 32
                continue 
            if ceil32(_1098) <= _1098:
                _1298 = mem[_846]
                s = 0
                while s < _1298:
                    mem[s + _970 + _972 + _1098 + 32] = mem[s + _846 + 32]
                    s = s + 32
                    continue 
                if ceil32(_1298) <= _1298:
                    _1485 = mem[64]
                    mem[mem[64]] = _1298 + _970 + _972 + _1098 - mem[64]
                    mem[64] = _1298 + _970 + _972 + _1098 + 32
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    s = _1485
                    t = _323
                    continue 
                mem[_970 + _972 + _1098 + _1298 + 32] = 0
                _1501 = mem[64]
                mem[mem[64]] = _1298 + _970 + _972 + _1098 - mem[64]
                mem[64] = _1298 + _970 + _972 + _1098 + 32
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                s = _1501
                t = _323
                continue 
            mem[_970 + _972 + _1098 + 32] = 0
            _1306 = mem[_846]
            s = 0
            while s < _1306:
                mem[s + _970 + _972 + _1098 + 32] = mem[s + _846 + 32]
                s = s + 32
                continue 
            if ceil32(_1306) <= _1306:
                _1486 = mem[64]
                mem[mem[64]] = _1306 + _970 + _972 + _1098 - mem[64]
                mem[64] = _1306 + _970 + _972 + _1098 + 32
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                s = _1486
                t = _323
                continue 
            mem[_970 + _972 + _1098 + _1306 + 32] = 0
            _1502 = mem[64]
            mem[mem[64]] = _1306 + _970 + _972 + _1098 - mem[64]
            mem[64] = _1306 + _970 + _972 + _1098 + 32
            if idx == -1:
                revert with 0, 17
            idx = idx + 1
            s = _1502
            t = _323
            continue 
        _322 = mem[64]
        mem[mem[64]] = 32
        _324 = mem[s]
        mem[mem[64] + 32] = mem[s]
        mem[mem[64] + 64 len ceil32(_324)] = mem[s + 32 len ceil32(_324)]
        if ceil32(_324) <= _324:
            return 32, mem[mem[64] + 32 len ceil32(_324) + 32]
        mem[mem[64] + _324 + 64] = 0
        return memory
          from mem[64]
           len ceil32(_324) + _322 + -mem[64] + 64
    t = 0
    idx = s
    while idx:
        if t == -1:
            revert with 0, 17
        t = t + 1
        idx = idx / 10
        continue 
    if t > test266151307():
        revert with 0, 65
    _321 = mem[64]
    mem[mem[64]] = t
    mem[64] = mem[64] + ceil32(t) + 32
    if not t:
        u = t
        idx = s
        while idx:
            if u < 1:
                revert with 0, 17
            if idx / 10 > 0x1999999999999999999999999999999999999999999999999999999999999999:
                revert with 0, 17
            if idx < 10 * idx / 10:
                revert with 0, 17
            if 48 > -uint8(idx - (10 * idx / 10)) + 255:
                revert with 0, 17
            if u - 1 >= mem[_321]:
                revert with 0, 50
            mem[u + _321 + 31 len 8] = Mask(8, -(('mask_shl', 8, 0, 245, ('add', 48, ('mask_shl', 8, 0, 0, ('add', ('var', 0), ('mul', -10, ('div', ('var', 0), 10)))))), 0) + 256, 0) << (('mask_shl', 8, 0, 245, ('add', 48, ('mask_shl', 8, 0, 0, ('add', ('var', 0), ('mul', -10, ('div', ('var', 0), 10)))))), 0) - 256
            u = u - 1
            idx = idx / 10
            continue 
        _446 = mem[64]
        mem[64] = mem[64] + 64
        mem[_446] = 1
        mem[_446 + 32] = 0x2300000000000000000000000000000000000000000000000000000000000000
        idx = 1
        s = _321
        t = _77
        while idx < _73:
            if idx >= mem[96]:
                revert with 0, 50
            _566 = mem[(32 * idx) + 128]
            _571 = mem[mem[(32 * idx) + 128] + 32]
            if mem[mem[(32 * idx) + 128] + 160] > 2:
                revert with 0, 33
            t = 0
            while stor8[mem[mem[(32 * idx) + 128] + 160]].field_0 > t:
                if t > !stor8[mem[mem[(32 * idx) + 128] + 160]].field_0:
                    revert with 0, 17
                if mem[mem[(32 * idx) + 128] + 160] > 2:
                    revert with 0, 33
                mem[32] = 8
                if t + stor8[mem[mem[(32 * idx) + 128] + 160]].field_0 / 2 >= stor8[mem[mem[(32 * idx) + 128] + 160]].field_0:
                    revert with 0, 50
                mem[0] = sha3(mem[mem[(32 * idx) + 128] + 160], 8)
                if stor8[mem[mem[(32 * idx) + 128] + 160]][Mask(255, 1, t + stor8[mem[mem[(32 * idx) + 128] + 160]].field_0)].field_0 >= _571:
                    t = t
                    continue 
                if 1 > !(t + stor8[mem[mem[(32 * idx) + 128] + 160]].field_0 / 2):
                    revert with 0, 17
                t = (t + stor8[mem[mem[(32 * idx) + 128] + 160]].field_0 / 2) + 1
                continue 
            if mem[mem[(32 * idx) + 128] + 160] > 2:
                revert with 0, 33
            mem[0] = mem[mem[(32 * idx) + 128] + 160]
            mem[32] = 8
            u = 0
            while stor8[mem[mem[(32 * idx) + 128] + 160]].field_0 > u:
                if u > !stor8[mem[mem[(32 * idx) + 128] + 160]].field_0:
                    revert with 0, 17
                if mem[mem[(32 * idx) + 128] + 160] > 2:
                    revert with 0, 33
                mem[32] = 8
                if u + stor8[mem[mem[(32 * idx) + 128] + 160]].field_0 / 2 >= stor8[mem[mem[(32 * idx) + 128] + 160]].field_0:
                    revert with 0, 50
                mem[0] = sha3(mem[mem[(32 * idx) + 128] + 160], 8)
                if stor8[mem[mem[(32 * idx) + 128] + 160]][Mask(255, 1, u + stor8[mem[mem[(32 * idx) + 128] + 160]].field_0)].field_0 >= block.timestamp:
                    u = u
                    continue 
                if 1 > !(u + stor8[mem[mem[(32 * idx) + 128] + 160]].field_0 / 2):
                    revert with 0, 17
                u = (u + stor8[mem[mem[(32 * idx) + 128] + 160]].field_0 / 2) + 1
                continue 
            v = t
            w = mem[mem[(32 * idx) + 128] + 96]
            while v < u:
                if mem[mem[(32 * idx) + 128] + 160] > 2:
                    revert with 0, 33
                mem[32] = 8
                if v >= stor8[mem[mem[(32 * idx) + 128] + 160]].field_0:
                    revert with 0, 50
                mem[0] = sha3(mem[mem[(32 * idx) + 128] + 160], 8)
                if 100 * 10^6 < stor8[mem[mem[(32 * idx) + 128] + 160]][v].field_256 - 0x8000000000000000000000000000000000000000000000000000000000000000 and stor8[mem[mem[(32 * idx) + 128] + 160]][v].field_256 >= 0:
                    revert with 0, 17
                if stor8[mem[mem[(32 * idx) + 128] + 160]][v].field_256 < 0 and 100 * 10^6 > stor8[mem[mem[(32 * idx) + 128] + 160]][v].field_256 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                    revert with 0, 17
                if w and -stor8[mem[mem[(32 * idx) + 128] + 160]][v].field_256 + 100 * 10^6 > -1 / w:
                    revert with 0, 17
                if v == -1:
                    revert with 0, 17
                v = v + 1
                w = (100 * 10^6 * w) - (stor8[mem[mem[(32 * idx) + 128] + 160]][v].field_256 * w) / 100 * 10^6
                continue 
            if block.timestamp < _571:
                revert with 0, 17
            if not sub_9b28d1a7:
                revert with 0, 18
            t = block.timestamp - _571 / sub_9b28d1a7
            u = w
            while t:
                if not t:
                    revert with 0, 17
                if 100 * 10^6 < sub_93520a80 - 0x8000000000000000000000000000000000000000000000000000000000000000 and sub_93520a80 >= 0:
                    revert with 0, 17
                if sub_93520a80 < 0 and 100 * 10^6 > sub_93520a80 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                    revert with 0, 17
                if u and -sub_93520a80 + 100 * 10^6 > -1 / u:
                    revert with 0, 17
                t = t - 1
                u = (100 * 10^6 * u) - (sub_93520a80 * u) / 100 * 10^6
                continue 
            if not u:
                _977 = mem[64]
                mem[64] = mem[64] + 64
                mem[_977] = 1
                mem[_977 + 32] = 0x3000000000000000000000000000000000000000000000000000000000000000
                _979 = mem[64]
                _985 = mem[s]
                t = 0
                while t < _985:
                    mem[t + _979 + 32] = mem[t + s + 32]
                    t = t + 32
                    continue 
                if ceil32(_985) <= _985:
                    _1091 = mem[_446]
                    s = 0
                    while s < _1091:
                        mem[s + _979 + _985 + 32] = mem[s + _446 + 32]
                        s = s + 32
                        continue 
                    if ceil32(_1091) <= _1091:
                        _1289 = mem[_977]
                        s = 0
                        while s < _1289:
                            mem[s + _979 + _985 + _1091 + 32] = mem[s + _977 + 32]
                            s = s + 32
                            continue 
                        if ceil32(_1289) <= _1289:
                            _1469 = mem[64]
                            mem[mem[64]] = _1289 + _979 + _985 + _1091 - mem[64]
                            mem[64] = _1289 + _979 + _985 + _1091 + 32
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            s = _1469
                            t = _566
                            continue 
                        mem[_979 + _985 + _1091 + _1289 + 32] = 0
                        _1487 = mem[64]
                        mem[mem[64]] = _1289 + _979 + _985 + _1091 - mem[64]
                        mem[64] = _1289 + _979 + _985 + _1091 + 32
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        s = _1487
                        t = _566
                        continue 
                    mem[_979 + _985 + _1091 + 32] = 0
                    _1299 = mem[_977]
                    s = 0
                    while s < _1299:
                        mem[s + _979 + _985 + _1091 + 32] = mem[s + _977 + 32]
                        s = s + 32
                        continue 
                    if ceil32(_1299) <= _1299:
                        _1470 = mem[64]
                        mem[mem[64]] = _1299 + _979 + _985 + _1091 - mem[64]
                        mem[64] = _1299 + _979 + _985 + _1091 + 32
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        s = _1470
                        t = _566
                        continue 
                    mem[_979 + _985 + _1091 + _1299 + 32] = 0
                    _1488 = mem[64]
                    mem[mem[64]] = _1299 + _979 + _985 + _1091 - mem[64]
                    mem[64] = _1299 + _979 + _985 + _1091 + 32
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    s = _1488
                    t = _566
                    continue 
                mem[_979 + _985 + 32] = 0
                _1095 = mem[_446]
                s = 0
                while s < _1095:
                    mem[s + _979 + _985 + 32] = mem[s + _446 + 32]
                    s = s + 32
                    continue 
                if ceil32(_1095) <= _1095:
                    _1290 = mem[_977]
                    s = 0
                    while s < _1290:
                        mem[s + _979 + _985 + _1095 + 32] = mem[s + _977 + 32]
                        s = s + 32
                        continue 
                    if ceil32(_1290) <= _1290:
                        _1471 = mem[64]
                        mem[mem[64]] = _1290 + _979 + _985 + _1095 - mem[64]
                        mem[64] = _1290 + _979 + _985 + _1095 + 32
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        s = _1471
                        t = _566
                        continue 
                    mem[_979 + _985 + _1095 + _1290 + 32] = 0
                    _1489 = mem[64]
                    mem[mem[64]] = _1290 + _979 + _985 + _1095 - mem[64]
                    mem[64] = _1290 + _979 + _985 + _1095 + 32
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    s = _1489
                    t = _566
                    continue 
                mem[_979 + _985 + _1095 + 32] = 0
                _1300 = mem[_977]
                s = 0
                while s < _1300:
                    mem[s + _979 + _985 + _1095 + 32] = mem[s + _977 + 32]
                    s = s + 32
                    continue 
                if ceil32(_1300) <= _1300:
                    _1472 = mem[64]
                    mem[mem[64]] = _1300 + _979 + _985 + _1095 - mem[64]
                    mem[64] = _1300 + _979 + _985 + _1095 + 32
                    if ceil32(_1300) == -1:
                        revert with 0, 17
                    s = ceil32(_1300) + 1
                    s = _1472
                    t = _566
                    continue 
                mem[_979 + _985 + _1095 + _1300 + 32] = 0
                _1490 = mem[64]
                mem[mem[64]] = _1300 + _979 + _985 + _1095 - mem[64]
                mem[64] = _1300 + _979 + _985 + _1095 + 32
                if ceil32(_1300) == -1:
                    revert with 0, 17
                s = ceil32(_1300) + 1
                s = _1490
                t = _566
                continue 
            v = 0
            t = u
            while t:
                if v == -1:
                    revert with 0, 17
                v = v + 1
                t = t / 10
                continue 
            if v > test266151307():
                revert with 0, 65
            _1089 = mem[64]
            mem[mem[64]] = v
            mem[64] = mem[64] + ceil32(v) + 32
            if not v:
                w = v
                t = u
                while t:
                    if w < 1:
                        revert with 0, 17
                    if t / 10 > 0x1999999999999999999999999999999999999999999999999999999999999999:
                        revert with 0, 17
                    if t < 10 * t / 10:
                        revert with 0, 17
                    if 48 > -uint8(t - (10 * t / 10)) + 255:
                        revert with 0, 17
                    if w - 1 >= mem[_1089]:
                        revert with 0, 50
                    mem[w + _1089 + 31 len 8] = Mask(8, -(('mask_shl', 8, 0, 245, ('add', 48, ('mask_shl', 8, 0, 0, ('add', ('var', 2), ('mul', -10, ('div', ('var', 2), 10)))))), 0) + 256, 0) << (('mask_shl', 8, 0, 245, ('add', 48, ('mask_shl', 8, 0, 0, ('add', ('var', 2), ('mul', -10, ('div', ('var', 2), 10)))))), 0) - 256
                    w = w - 1
                    t = t / 10
                    continue 
                _1283 = mem[64]
                _1287 = mem[s]
                t = 0
                while t < _1287:
                    mem[t + _1283 + 32] = mem[t + s + 32]
                    t = t + 32
                    continue 
                if ceil32(_1287) <= _1287:
                    _1463 = mem[_446]
                    s = 0
                    while s < _1463:
                        mem[s + _1283 + _1287 + 32] = mem[s + _446 + 32]
                        s = s + 32
                        continue 
                    if ceil32(_1463) <= _1463:
                        _1583 = mem[_1089]
                        idx = 0
                        while idx < _1583:
                            mem[idx + _1283 + _1287 + _1463 + 32] = mem[idx + _1089 + 32]
                            idx = idx + 32
                            continue 
                        if ceil32(_1583) <= _1583:
                            _1663 = mem[64]
                            mem[mem[64]] = _1583 + _1283 + _1287 + _1463 - mem[64]
                            mem[64] = _1583 + _1283 + _1287 + _1463 + 32
                            if ceil32(_1463) == -1:
                                revert with 0, 17
                            s = ceil32(_1463) + 1
                            s = _1663
                            t = _566
                            continue 
                        mem[_1283 + _1287 + _1463 + _1583 + 32] = 0
                        _1679 = mem[64]
                        mem[mem[64]] = _1583 + _1283 + _1287 + _1463 - mem[64]
                        mem[64] = _1583 + _1283 + _1287 + _1463 + 32
                        if ceil32(_1463) == -1:
                            revert with 0, 17
                        s = ceil32(_1463) + 1
                        s = _1679
                        t = _566
                        continue 
                    mem[_1283 + _1287 + _1463 + 32] = 0
                    _1591 = mem[_1089]
                    idx = 0
                    while idx < _1591:
                        mem[idx + _1283 + _1287 + _1463 + 32] = mem[idx + _1089 + 32]
                        idx = idx + 32
                        continue 
                    if ceil32(_1591) <= _1591:
                        _1664 = mem[64]
                        mem[mem[64]] = _1591 + _1283 + _1287 + _1463 - mem[64]
                        mem[64] = _1591 + _1283 + _1287 + _1463 + 32
                        if ceil32(_1463) == -1:
                            revert with 0, 17
                        s = ceil32(_1463) + 1
                        s = _1664
                        t = _566
                        continue 
                    mem[_1283 + _1287 + _1463 + _1591 + 32] = 0
                    _1680 = mem[64]
                    mem[mem[64]] = _1591 + _1283 + _1287 + _1463 - mem[64]
                    mem[64] = _1591 + _1283 + _1287 + _1463 + 32
                    if ceil32(_1463) == -1:
                        revert with 0, 17
                    s = ceil32(_1463) + 1
                    s = _1680
                    t = _566
                    continue 
                mem[_1283 + _1287 + 32] = 0
                _1467 = mem[_446]
                s = 0
                while s < _1467:
                    mem[s + _1283 + _1287 + 32] = mem[s + _446 + 32]
                    s = s + 32
                    continue 
                if ceil32(_1467) <= _1467:
                    _1584 = mem[_1089]
                    s = 0
                    while s < _1584:
                        mem[s + _1283 + _1287 + _1467 + 32] = mem[s + _1089 + 32]
                        s = s + 32
                        continue 
                    if ceil32(_1584) <= _1584:
                        _1665 = mem[64]
                        mem[mem[64]] = _1584 + _1283 + _1287 + _1467 - mem[64]
                        mem[64] = _1584 + _1283 + _1287 + _1467 + 32
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        s = _1665
                        t = _566
                        continue 
                    mem[_1283 + _1287 + _1467 + _1584 + 32] = 0
                    _1681 = mem[64]
                    mem[mem[64]] = _1584 + _1283 + _1287 + _1467 - mem[64]
                    mem[64] = _1584 + _1283 + _1287 + _1467 + 32
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    s = _1681
                    t = _566
                    continue 
                mem[_1283 + _1287 + _1467 + 32] = 0
                _1592 = mem[_1089]
                s = 0
                while s < _1592:
                    mem[s + _1283 + _1287 + _1467 + 32] = mem[s + _1089 + 32]
                    s = s + 32
                    continue 
                if ceil32(_1592) <= _1592:
                    _1666 = mem[64]
                    mem[mem[64]] = _1592 + _1283 + _1287 + _1467 - mem[64]
                    mem[64] = _1592 + _1283 + _1287 + _1467 + 32
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    s = _1666
                    t = _566
                    continue 
                mem[_1283 + _1287 + _1467 + _1592 + 32] = 0
                _1682 = mem[64]
                mem[mem[64]] = _1592 + _1283 + _1287 + _1467 - mem[64]
                mem[64] = _1592 + _1283 + _1287 + _1467 + 32
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                s = _1682
                t = _566
                continue 
            mem[_1089 + 32 len v] = call.data[calldata.size len v]
            w = v
            t = u
            while t:
                if w < 1:
                    revert with 0, 17
                if t / 10 > 0x1999999999999999999999999999999999999999999999999999999999999999:
                    revert with 0, 17
                if t < 10 * t / 10:
                    revert with 0, 17
                if 48 > -uint8(t - (10 * t / 10)) + 255:
                    revert with 0, 17
                if w - 1 >= mem[_1089]:
                    revert with 0, 50
                mem[w + _1089 + 31 len 8] = Mask(8, -(('mask_shl', 8, 0, 245, ('add', 48, ('mask_shl', 8, 0, 0, ('add', ('var', 2), ('mul', -10, ('div', ('var', 2), 10)))))), 0) + 256, 0) << (('mask_shl', 8, 0, 245, ('add', 48, ('mask_shl', 8, 0, 0, ('add', ('var', 2), ('mul', -10, ('div', ('var', 2), 10)))))), 0) - 256
                w = w - 1
                t = t / 10
                continue 
            _1284 = mem[64]
            _1288 = mem[s]
            t = 0
            while t < _1288:
                mem[t + _1284 + 32] = mem[t + s + 32]
                t = t + 32
                continue 
            if ceil32(_1288) <= _1288:
                _1464 = mem[_446]
                s = 0
                while s < _1464:
                    mem[s + _1284 + _1288 + 32] = mem[s + _446 + 32]
                    s = s + 32
                    continue 
                if ceil32(_1464) <= _1464:
                    _1585 = mem[_1089]
                    s = 0
                    while s < _1585:
                        mem[s + _1284 + _1288 + _1464 + 32] = mem[s + _1089 + 32]
                        s = s + 32
                        continue 
                    if ceil32(_1585) <= _1585:
                        _1667 = mem[64]
                        mem[mem[64]] = _1585 + _1284 + _1288 + _1464 - mem[64]
                        mem[64] = _1585 + _1284 + _1288 + _1464 + 32
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        s = _1667
                        t = _566
                        continue 
                    mem[_1284 + _1288 + _1464 + _1585 + 32] = 0
                    _1683 = mem[64]
                    mem[mem[64]] = _1585 + _1284 + _1288 + _1464 - mem[64]
                    mem[64] = _1585 + _1284 + _1288 + _1464 + 32
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    s = _1683
                    t = _566
                    continue 
                mem[_1284 + _1288 + _1464 + 32] = 0
                _1593 = mem[_1089]
                s = 0
                while s < _1593:
                    mem[s + _1284 + _1288 + _1464 + 32] = mem[s + _1089 + 32]
                    s = s + 32
                    continue 
                if ceil32(_1593) <= _1593:
                    _1668 = mem[64]
                    mem[mem[64]] = _1593 + _1284 + _1288 + _1464 - mem[64]
                    mem[64] = _1593 + _1284 + _1288 + _1464 + 32
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    s = _1668
                    t = _566
                    continue 
                mem[_1284 + _1288 + _1464 + _1593 + 32] = 0
                _1684 = mem[64]
                mem[mem[64]] = _1593 + _1284 + _1288 + _1464 - mem[64]
                mem[64] = _1593 + _1284 + _1288 + _1464 + 32
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                s = _1684
                t = _566
                continue 
            mem[_1284 + _1288 + 32] = 0
            _1468 = mem[_446]
            s = 0
            while s < _1468:
                mem[s + _1284 + _1288 + 32] = mem[s + _446 + 32]
                s = s + 32
                continue 
            if ceil32(_1468) <= _1468:
                _1586 = mem[_1089]
                s = 0
                while s < _1586:
                    mem[s + _1284 + _1288 + _1468 + 32] = mem[s + _1089 + 32]
                    s = s + 32
                    continue 
                if ceil32(_1586) <= _1586:
                    _1669 = mem[64]
                    mem[mem[64]] = _1586 + _1284 + _1288 + _1468 - mem[64]
                    mem[64] = _1586 + _1284 + _1288 + _1468 + 32
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    s = _1669
                    t = _566
                    continue 
                mem[_1284 + _1288 + _1468 + _1586 + 32] = 0
                _1685 = mem[64]
                mem[mem[64]] = _1586 + _1284 + _1288 + _1468 - mem[64]
                mem[64] = _1586 + _1284 + _1288 + _1468 + 32
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                s = _1685
                t = _566
                continue 
            mem[_1284 + _1288 + _1468 + 32] = 0
            _1594 = mem[_1089]
            s = 0
            while s < _1594:
                mem[s + _1284 + _1288 + _1468 + 32] = mem[s + _1089 + 32]
                s = s + 32
                continue 
            if ceil32(_1594) <= _1594:
                _1670 = mem[64]
                mem[mem[64]] = _1594 + _1284 + _1288 + _1468 - mem[64]
                mem[64] = _1594 + _1284 + _1288 + _1468 + 32
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                s = _1670
                t = _566
                continue 
            mem[_1284 + _1288 + _1468 + _1594 + 32] = 0
            _1686 = mem[64]
            mem[mem[64]] = _1594 + _1284 + _1288 + _1468 - mem[64]
            mem[64] = _1594 + _1284 + _1288 + _1468 + 32
            if idx == -1:
                revert with 0, 17
            idx = idx + 1
            s = _1686
            t = _566
            continue 
        _565 = mem[64]
        mem[mem[64]] = 32
        _569 = mem[s]
        mem[mem[64] + 32] = mem[s]
        mem[mem[64] + 64 len ceil32(_569)] = mem[s + 32 len ceil32(_569)]
        if ceil32(_569) <= _569:
            return 32, mem[mem[64] + 32 len ceil32(_569) + 32]
        mem[mem[64] + _569 + 64] = 0
        return memory
          from mem[64]
           len ceil32(_569) + _565 + -mem[64] + 64
    mem[_321 + 32 len t] = call.data[calldata.size len t]
    u = t
    idx = s
    while idx:
        if u < 1:
            revert with 0, 17
        if idx / 10 > 0x1999999999999999999999999999999999999999999999999999999999999999:
            revert with 0, 17
        if idx < 10 * idx / 10:
            revert with 0, 17
        if 48 > -uint8(idx - (10 * idx / 10)) + 255:
            revert with 0, 17
        if u - 1 >= mem[_321]:
            revert with 0, 50
        mem[u + _321 + 31 len 8] = Mask(8, -(('mask_shl', 8, 0, 245, ('add', 48, ('mask_shl', 8, 0, 0, ('add', ('var', 0), ('mul', -10, ('div', ('var', 0), 10)))))), 0) + 256, 0) << (('mask_shl', 8, 0, 245, ('add', 48, ('mask_shl', 8, 0, 0, ('add', ('var', 0), ('mul', -10, ('div', ('var', 0), 10)))))), 0) - 256
        u = u - 1
        idx = idx / 10
        continue 
    _447 = mem[64]
    mem[64] = mem[64] + 64
    mem[_447] = 1
    mem[_447 + 32] = 0x2300000000000000000000000000000000000000000000000000000000000000
    idx = 1
    s = _321
    t = _77
    while idx < _73:
        if idx >= mem[96]:
            revert with 0, 50
        _568 = mem[(32 * idx) + 128]
        _574 = mem[mem[(32 * idx) + 128] + 32]
        if mem[mem[(32 * idx) + 128] + 160] > 2:
            revert with 0, 33
        t = 0
        while stor8[mem[mem[(32 * idx) + 128] + 160]].field_0 > t:
            if t > !stor8[mem[mem[(32 * idx) + 128] + 160]].field_0:
                revert with 0, 17
            if mem[mem[(32 * idx) + 128] + 160] > 2:
                revert with 0, 33
            mem[32] = 8
            if t + stor8[mem[mem[(32 * idx) + 128] + 160]].field_0 / 2 >= stor8[mem[mem[(32 * idx) + 128] + 160]].field_0:
                revert with 0, 50
            mem[0] = sha3(mem[mem[(32 * idx) + 128] + 160], 8)
            if stor8[mem[mem[(32 * idx) + 128] + 160]][Mask(255, 1, t + stor8[mem[mem[(32 * idx) + 128] + 160]].field_0)].field_0 >= _574:
                t = t
                continue 
            if 1 > !(t + stor8[mem[mem[(32 * idx) + 128] + 160]].field_0 / 2):
                revert with 0, 17
            t = (t + stor8[mem[mem[(32 * idx) + 128] + 160]].field_0 / 2) + 1
            continue 
        if mem[mem[(32 * idx) + 128] + 160] > 2:
            revert with 0, 33
        mem[0] = mem[mem[(32 * idx) + 128] + 160]
        mem[32] = 8
        u = 0
        while stor8[mem[mem[(32 * idx) + 128] + 160]].field_0 > u:
            if u > !stor8[mem[mem[(32 * idx) + 128] + 160]].field_0:
                revert with 0, 17
            if mem[mem[(32 * idx) + 128] + 160] > 2:
                revert with 0, 33
            mem[32] = 8
            if u + stor8[mem[mem[(32 * idx) + 128] + 160]].field_0 / 2 >= stor8[mem[mem[(32 * idx) + 128] + 160]].field_0:
                revert with 0, 50
            mem[0] = sha3(mem[mem[(32 * idx) + 128] + 160], 8)
            if stor8[mem[mem[(32 * idx) + 128] + 160]][Mask(255, 1, u + stor8[mem[mem[(32 * idx) + 128] + 160]].field_0)].field_0 >= block.timestamp:
                u = u
                continue 
            if 1 > !(u + stor8[mem[mem[(32 * idx) + 128] + 160]].field_0 / 2):
                revert with 0, 17
            u = (u + stor8[mem[mem[(32 * idx) + 128] + 160]].field_0 / 2) + 1
            continue 
        v = t
        w = mem[mem[(32 * idx) + 128] + 96]
        while v < u:
            if mem[mem[(32 * idx) + 128] + 160] > 2:
                revert with 0, 33
            mem[32] = 8
            if v >= stor8[mem[mem[(32 * idx) + 128] + 160]].field_0:
                revert with 0, 50
            mem[0] = sha3(mem[mem[(32 * idx) + 128] + 160], 8)
            if 100 * 10^6 < stor8[mem[mem[(32 * idx) + 128] + 160]][v].field_256 - 0x8000000000000000000000000000000000000000000000000000000000000000 and stor8[mem[mem[(32 * idx) + 128] + 160]][v].field_256 >= 0:
                revert with 0, 17
            if stor8[mem[mem[(32 * idx) + 128] + 160]][v].field_256 < 0 and 100 * 10^6 > stor8[mem[mem[(32 * idx) + 128] + 160]][v].field_256 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                revert with 0, 17
            if w and -stor8[mem[mem[(32 * idx) + 128] + 160]][v].field_256 + 100 * 10^6 > -1 / w:
                revert with 0, 17
            if v == -1:
                revert with 0, 17
            v = v + 1
            w = (100 * 10^6 * w) - (stor8[mem[mem[(32 * idx) + 128] + 160]][v].field_256 * w) / 100 * 10^6
            continue 
        if block.timestamp < _574:
            revert with 0, 17
        if not sub_9b28d1a7:
            revert with 0, 18
        t = block.timestamp - _574 / sub_9b28d1a7
        u = w
        while t:
            if not t:
                revert with 0, 17
            if 100 * 10^6 < sub_93520a80 - 0x8000000000000000000000000000000000000000000000000000000000000000 and sub_93520a80 >= 0:
                revert with 0, 17
            if sub_93520a80 < 0 and 100 * 10^6 > sub_93520a80 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                revert with 0, 17
            if u and -sub_93520a80 + 100 * 10^6 > -1 / u:
                revert with 0, 17
            t = t - 1
            u = (100 * 10^6 * u) - (sub_93520a80 * u) / 100 * 10^6
            continue 
        if not u:
            _978 = mem[64]
            mem[64] = mem[64] + 64
            mem[_978] = 1
            mem[_978 + 32] = 0x3000000000000000000000000000000000000000000000000000000000000000
            _980 = mem[64]
            _986 = mem[s]
            t = 0
            while t < _986:
                mem[t + _980 + 32] = mem[t + s + 32]
                t = t + 32
                continue 
            if ceil32(_986) <= _986:
                _1092 = mem[_447]
                s = 0
                while s < _1092:
                    mem[s + _980 + _986 + 32] = mem[s + _447 + 32]
                    s = s + 32
                    continue 
                if ceil32(_1092) <= _1092:
                    _1293 = mem[_978]
                    s = 0
                    while s < _1293:
                        mem[s + _980 + _986 + _1092 + 32] = mem[s + _978 + 32]
                        s = s + 32
                        continue 
                    if ceil32(_1293) <= _1293:
                        _1475 = mem[64]
                        mem[mem[64]] = _1293 + _980 + _986 + _1092 - mem[64]
                        mem[64] = _1293 + _980 + _986 + _1092 + 32
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        s = _1475
                        t = _568
                        continue 
                    mem[_980 + _986 + _1092 + _1293 + 32] = 0
                    _1491 = mem[64]
                    mem[mem[64]] = _1293 + _980 + _986 + _1092 - mem[64]
                    mem[64] = _1293 + _980 + _986 + _1092 + 32
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    s = _1491
                    t = _568
                    continue 
                mem[_980 + _986 + _1092 + 32] = 0
                _1301 = mem[_978]
                s = 0
                while s < _1301:
                    mem[s + _980 + _986 + _1092 + 32] = mem[s + _978 + 32]
                    s = s + 32
                    continue 
                if ceil32(_1301) <= _1301:
                    _1476 = mem[64]
                    mem[mem[64]] = _1301 + _980 + _986 + _1092 - mem[64]
                    mem[64] = _1301 + _980 + _986 + _1092 + 32
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    s = _1476
                    t = _568
                    continue 
                mem[_980 + _986 + _1092 + _1301 + 32] = 0
                _1492 = mem[64]
                mem[mem[64]] = _1301 + _980 + _986 + _1092 - mem[64]
                mem[64] = _1301 + _980 + _986 + _1092 + 32
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                s = _1492
                t = _568
                continue 
            mem[_980 + _986 + 32] = 0
            _1096 = mem[_447]
            s = 0
            while s < _1096:
                mem[s + _980 + _986 + 32] = mem[s + _447 + 32]
                s = s + 32
                continue 
            if ceil32(_1096) <= _1096:
                _1294 = mem[_978]
                s = 0
                while s < _1294:
                    mem[s + _980 + _986 + _1096 + 32] = mem[s + _978 + 32]
                    s = s + 32
                    continue 
                if ceil32(_1294) <= _1294:
                    _1477 = mem[64]
                    mem[mem[64]] = _1294 + _980 + _986 + _1096 - mem[64]
                    mem[64] = _1294 + _980 + _986 + _1096 + 32
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    s = _1477
                    t = _568
                    continue 
                mem[_980 + _986 + _1096 + _1294 + 32] = 0
                _1493 = mem[64]
                mem[mem[64]] = _1294 + _980 + _986 + _1096 - mem[64]
                mem[64] = _1294 + _980 + _986 + _1096 + 32
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                s = _1493
                t = _568
                continue 
            mem[_980 + _986 + _1096 + 32] = 0
            _1302 = mem[_978]
            s = 0
            while s < _1302:
                mem[s + _980 + _986 + _1096 + 32] = mem[s + _978 + 32]
                s = s + 32
                continue 
            if ceil32(_1302) <= _1302:
                _1478 = mem[64]
                mem[mem[64]] = _1302 + _980 + _986 + _1096 - mem[64]
                mem[64] = _1302 + _980 + _986 + _1096 + 32
                if ceil32(_1302) == -1:
                    revert with 0, 17
                s = ceil32(_1302) + 1
                s = _1478
                t = _568
                continue 
            mem[_980 + _986 + _1096 + _1302 + 32] = 0
            _1494 = mem[64]
            mem[mem[64]] = _1302 + _980 + _986 + _1096 - mem[64]
            mem[64] = _1302 + _980 + _986 + _1096 + 32
            if ceil32(_1302) == -1:
                revert with 0, 17
            s = ceil32(_1302) + 1
            s = _1494
            t = _568
            continue 
        v = 0
        t = u
        while t:
            if v == -1:
                revert with 0, 17
            v = v + 1
            t = t / 10
            continue 
        if v > test266151307():
            revert with 0, 65
        _1090 = mem[64]
        mem[mem[64]] = v
        mem[64] = mem[64] + ceil32(v) + 32
        if not v:
            w = v
            t = u
            while t:
                if w < 1:
                    revert with 0, 17
                if t / 10 > 0x1999999999999999999999999999999999999999999999999999999999999999:
                    revert with 0, 17
                if t < 10 * t / 10:
                    revert with 0, 17
                if 48 > -uint8(t - (10 * t / 10)) + 255:
                    revert with 0, 17
                if w - 1 >= mem[_1090]:
                    revert with 0, 50
                mem[w + _1090 + 31 len 8] = Mask(8, -(('mask_shl', 8, 0, 245, ('add', 48, ('mask_shl', 8, 0, 0, ('add', ('var', 2), ('mul', -10, ('div', ('var', 2), 10)))))), 0) + 256, 0) << (('mask_shl', 8, 0, 245, ('add', 48, ('mask_shl', 8, 0, 0, ('add', ('var', 2), ('mul', -10, ('div', ('var', 2), 10)))))), 0) - 256
                w = w - 1
                t = t / 10
                continue 
            _1285 = mem[64]
            _1291 = mem[s]
            t = 0
            while t < _1291:
                mem[t + _1285 + 32] = mem[t + s + 32]
                t = t + 32
                continue 
            if ceil32(_1291) <= _1291:
                _1465 = mem[_447]
                s = 0
                while s < _1465:
                    mem[s + _1285 + _1291 + 32] = mem[s + _447 + 32]
                    s = s + 32
                    continue 
                if ceil32(_1465) <= _1465:
                    _1587 = mem[_1090]
                    idx = 0
                    while idx < _1587:
                        mem[idx + _1285 + _1291 + _1465 + 32] = mem[idx + _1090 + 32]
                        idx = idx + 32
                        continue 
                    if ceil32(_1587) <= _1587:
                        _1671 = mem[64]
                        mem[mem[64]] = _1587 + _1285 + _1291 + _1465 - mem[64]
                        mem[64] = _1587 + _1285 + _1291 + _1465 + 32
                        if ceil32(_1465) == -1:
                            revert with 0, 17
                        s = ceil32(_1465) + 1
                        s = _1671
                        t = _568
                        continue 
                    mem[_1285 + _1291 + _1465 + _1587 + 32] = 0
                    _1687 = mem[64]
                    mem[mem[64]] = _1587 + _1285 + _1291 + _1465 - mem[64]
                    mem[64] = _1587 + _1285 + _1291 + _1465 + 32
                    if ceil32(_1465) == -1:
                        revert with 0, 17
                    s = ceil32(_1465) + 1
                    s = _1687
                    t = _568
                    continue 
                mem[_1285 + _1291 + _1465 + 32] = 0
                _1595 = mem[_1090]
                idx = 0
                while idx < _1595:
                    mem[idx + _1285 + _1291 + _1465 + 32] = mem[idx + _1090 + 32]
                    idx = idx + 32
                    continue 
                if ceil32(_1595) <= _1595:
                    _1672 = mem[64]
                    mem[mem[64]] = _1595 + _1285 + _1291 + _1465 - mem[64]
                    mem[64] = _1595 + _1285 + _1291 + _1465 + 32
                    if ceil32(_1465) == -1:
                        revert with 0, 17
                    s = ceil32(_1465) + 1
                    s = _1672
                    t = _568
                    continue 
                mem[_1285 + _1291 + _1465 + _1595 + 32] = 0
                _1688 = mem[64]
                mem[mem[64]] = _1595 + _1285 + _1291 + _1465 - mem[64]
                mem[64] = _1595 + _1285 + _1291 + _1465 + 32
                if ceil32(_1465) == -1:
                    revert with 0, 17
                s = ceil32(_1465) + 1
                s = _1688
                t = _568
                continue 
            mem[_1285 + _1291 + 32] = 0
            _1473 = mem[_447]
            s = 0
            while s < _1473:
                mem[s + _1285 + _1291 + 32] = mem[s + _447 + 32]
                s = s + 32
                continue 
            if ceil32(_1473) <= _1473:
                _1588 = mem[_1090]
                s = 0
                while s < _1588:
                    mem[s + _1285 + _1291 + _1473 + 32] = mem[s + _1090 + 32]
                    s = s + 32
                    continue 
                if ceil32(_1588) <= _1588:
                    _1673 = mem[64]
                    mem[mem[64]] = _1588 + _1285 + _1291 + _1473 - mem[64]
                    mem[64] = _1588 + _1285 + _1291 + _1473 + 32
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    s = _1673
                    t = _568
                    continue 
                mem[_1285 + _1291 + _1473 + _1588 + 32] = 0
                _1689 = mem[64]
                mem[mem[64]] = _1588 + _1285 + _1291 + _1473 - mem[64]
                mem[64] = _1588 + _1285 + _1291 + _1473 + 32
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                s = _1689
                t = _568
                continue 
            mem[_1285 + _1291 + _1473 + 32] = 0
            _1596 = mem[_1090]
            s = 0
            while s < _1596:
                mem[s + _1285 + _1291 + _1473 + 32] = mem[s + _1090 + 32]
                s = s + 32
                continue 
            if ceil32(_1596) <= _1596:
                _1674 = mem[64]
                mem[mem[64]] = _1596 + _1285 + _1291 + _1473 - mem[64]
                mem[64] = _1596 + _1285 + _1291 + _1473 + 32
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                s = _1674
                t = _568
                continue 
            mem[_1285 + _1291 + _1473 + _1596 + 32] = 0
            _1690 = mem[64]
            mem[mem[64]] = _1596 + _1285 + _1291 + _1473 - mem[64]
            mem[64] = _1596 + _1285 + _1291 + _1473 + 32
            if idx == -1:
                revert with 0, 17
            idx = idx + 1
            s = _1690
            t = _568
            continue 
        mem[_1090 + 32 len v] = call.data[calldata.size len v]
        w = v
        t = u
        while t:
            if w < 1:
                revert with 0, 17
            if t / 10 > 0x1999999999999999999999999999999999999999999999999999999999999999:
                revert with 0, 17
            if t < 10 * t / 10:
                revert with 0, 17
            if 48 > -uint8(t - (10 * t / 10)) + 255:
                revert with 0, 17
            if w - 1 >= mem[_1090]:
                revert with 0, 50
            mem[w + _1090 + 31 len 8] = Mask(8, -(('mask_shl', 8, 0, 245, ('add', 48, ('mask_shl', 8, 0, 0, ('add', ('var', 2), ('mul', -10, ('div', ('var', 2), 10)))))), 0) + 256, 0) << (('mask_shl', 8, 0, 245, ('add', 48, ('mask_shl', 8, 0, 0, ('add', ('var', 2), ('mul', -10, ('div', ('var', 2), 10)))))), 0) - 256
            w = w - 1
            t = t / 10
            continue 
        _1286 = mem[64]
        _1292 = mem[s]
        t = 0
        while t < _1292:
            mem[t + _1286 + 32] = mem[t + s + 32]
            t = t + 32
            continue 
        if ceil32(_1292) <= _1292:
            _1466 = mem[_447]
            s = 0
            while s < _1466:
                mem[s + _1286 + _1292 + 32] = mem[s + _447 + 32]
                s = s + 32
                continue 
            if ceil32(_1466) <= _1466:
                _1589 = mem[_1090]
                s = 0
                while s < _1589:
                    mem[s + _1286 + _1292 + _1466 + 32] = mem[s + _1090 + 32]
                    s = s + 32
                    continue 
                if ceil32(_1589) <= _1589:
                    _1675 = mem[64]
                    mem[mem[64]] = _1589 + _1286 + _1292 + _1466 - mem[64]
                    mem[64] = _1589 + _1286 + _1292 + _1466 + 32
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    s = _1675
                    t = _568
                    continue 
                mem[_1286 + _1292 + _1466 + _1589 + 32] = 0
                _1691 = mem[64]
                mem[mem[64]] = _1589 + _1286 + _1292 + _1466 - mem[64]
                mem[64] = _1589 + _1286 + _1292 + _1466 + 32
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                s = _1691
                t = _568
                continue 
            mem[_1286 + _1292 + _1466 + 32] = 0
            _1597 = mem[_1090]
            s = 0
            while s < _1597:
                mem[s + _1286 + _1292 + _1466 + 32] = mem[s + _1090 + 32]
                s = s + 32
                continue 
            if ceil32(_1597) <= _1597:
                _1676 = mem[64]
                mem[mem[64]] = _1597 + _1286 + _1292 + _1466 - mem[64]
                mem[64] = _1597 + _1286 + _1292 + _1466 + 32
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                s = _1676
                t = _568
                continue 
            mem[_1286 + _1292 + _1466 + _1597 + 32] = 0
            _1692 = mem[64]
            mem[mem[64]] = _1597 + _1286 + _1292 + _1466 - mem[64]
            mem[64] = _1597 + _1286 + _1292 + _1466 + 32
            if idx == -1:
                revert with 0, 17
            idx = idx + 1
            s = _1692
            t = _568
            continue 
        mem[_1286 + _1292 + 32] = 0
        _1474 = mem[_447]
        s = 0
        while s < _1474:
            mem[s + _1286 + _1292 + 32] = mem[s + _447 + 32]
            s = s + 32
            continue 
        if ceil32(_1474) <= _1474:
            _1590 = mem[_1090]
            s = 0
            while s < _1590:
                mem[s + _1286 + _1292 + _1474 + 32] = mem[s + _1090 + 32]
                s = s + 32
                continue 
            if ceil32(_1590) <= _1590:
                _1677 = mem[64]
                mem[mem[64]] = _1590 + _1286 + _1292 + _1474 - mem[64]
                mem[64] = _1590 + _1286 + _1292 + _1474 + 32
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                s = _1677
                t = _568
                continue 
            mem[_1286 + _1292 + _1474 + _1590 + 32] = 0
            _1693 = mem[64]
            mem[mem[64]] = _1590 + _1286 + _1292 + _1474 - mem[64]
            mem[64] = _1590 + _1286 + _1292 + _1474 + 32
            if idx == -1:
                revert with 0, 17
            idx = idx + 1
            s = _1693
            t = _568
            continue 
        mem[_1286 + _1292 + _1474 + 32] = 0
        _1598 = mem[_1090]
        s = 0
        while s < _1598:
            mem[s + _1286 + _1292 + _1474 + 32] = mem[s + _1090 + 32]
            s = s + 32
            continue 
        if ceil32(_1598) <= _1598:
            _1678 = mem[64]
            mem[mem[64]] = _1598 + _1286 + _1292 + _1474 - mem[64]
            mem[64] = _1598 + _1286 + _1292 + _1474 + 32
            if idx == -1:
                revert with 0, 17
            idx = idx + 1
            s = _1678
            t = _568
            continue 
        mem[_1286 + _1292 + _1474 + _1598 + 32] = 0
        _1694 = mem[64]
        mem[mem[64]] = _1598 + _1286 + _1292 + _1474 - mem[64]
        mem[64] = _1598 + _1286 + _1292 + _1474 + 32
        if idx == -1:
            revert with 0, 17
        idx = idx + 1
        s = _1694
        t = _568
        continue 
    mem[mem[64]] = 32
    _570 = mem[s]
    mem[mem[64] + 32] = mem[s]
    mem[mem[64] + 64 len ceil32(_570)] = mem[s + 32 len ceil32(_570)]
    if ceil32(_570) > _570:
        mem[mem[64] + _570 + 64] = 0
    return 32, mem[mem[64] + 32 len ceil32(_570) + 32]
}

function sub_367fd074(?) payable {
    require calldata.size - 4 >= 32
    require arg1 == address(arg1)
    if not sub_44fea1b9[address(arg1)]:
        return ''
    mem[0] = address(arg1)
    mem[32] = 5
    mem[64] = (32 * stor5[address(arg1)].field_0) + 128
    mem[96] = stor5[address(arg1)].field_0
    s = 128
    idx = 0
    while idx < stor5[address(arg1)].field_0:
        mem[0] = sha3(address(arg1), 5)
        _105 = mem[64]
        mem[64] = mem[64] + 192
        if bool(stor5[address(arg1)][idx].field_0):
            if bool(stor5[address(arg1)][idx].field_0) == uint255(stor5[address(arg1)][idx].field_0) * 0.5 < 32:
                revert with 0, 34
            _111 = mem[64]
            mem[64] = mem[64] + ceil32(uint255(stor5[address(arg1)][idx].field_0) * 0.5) + 32
            mem[_111] = uint255(stor5[address(arg1)][idx].field_0) * 0.5
            if bool(stor5[address(arg1)][idx].field_0):
                if bool(stor5[address(arg1)][idx].field_0) == uint255(stor5[address(arg1)][idx].field_0) * 0.5 < 32:
                    revert with 0, 34
                if Mask(256, -1, stor5[address(arg1)][idx].field_0):
                    if 31 >= uint255(stor5[address(arg1)][idx].field_0) * 0.5:
                        mem[_111 + 32] = 256 * Mask(248, 0, stor5[address(arg1)][idx].field_8)
                    else:
                        mem[0] = (6 * idx) + sha3(sha3(address(arg1), 5))
                        mem[_111 + 32] = stor5[address(arg1)][idx].field_0
                        t = _111 + 32
                        u = sha3(mem[0])
                        while _111 + (uint255(stor5[address(arg1)][idx].field_0) * 0.5) > t:
                            mem[t + 32] = uint256(stor1[u])
                            t = t + 32
                            u = u + 1
                            continue 
            else:
                if bool(stor5[address(arg1)][idx].field_0) == stor5[address(arg1)][idx].field_1 % 128 < 32:
                    revert with 0, 34
                if stor5[address(arg1)][idx].field_1 % 128:
                    if 31 >= stor5[address(arg1)][idx].field_1 % 128:
                        mem[_111 + 32] = 256 * Mask(248, 0, stor5[address(arg1)][idx].field_8)
                    else:
                        mem[0] = (6 * idx) + sha3(sha3(address(arg1), 5))
                        mem[_111 + 32] = stor5[address(arg1)][idx].field_0
                        t = _111 + 32
                        u = sha3(mem[0])
                        while _111 + stor5[address(arg1)][idx].field_1 % 128 > t:
                            mem[t + 32] = uint256(stor1[u])
                            t = t + 32
                            u = u + 1
                            continue 
            mem[_105] = _111
        else:
            if bool(stor5[address(arg1)][idx].field_0) == stor5[address(arg1)][idx].field_1 % 128 < 32:
                revert with 0, 34
            _114 = mem[64]
            mem[64] = mem[64] + ceil32(stor5[address(arg1)][idx].field_1 % 128) + 32
            mem[_114] = stor5[address(arg1)][idx].field_1 % 128
            if bool(stor5[address(arg1)][idx].field_0):
                if bool(stor5[address(arg1)][idx].field_0) == uint255(stor5[address(arg1)][idx].field_0) * 0.5 < 32:
                    revert with 0, 34
                if Mask(256, -1, stor5[address(arg1)][idx].field_0):
                    if 31 >= uint255(stor5[address(arg1)][idx].field_0) * 0.5:
                        mem[_114 + 32] = 256 * Mask(248, 0, stor5[address(arg1)][idx].field_8)
                    else:
                        mem[0] = (6 * idx) + sha3(sha3(address(arg1), 5))
                        mem[_114 + 32] = stor5[address(arg1)][idx].field_0
                        t = _114 + 32
                        u = sha3(mem[0])
                        while _114 + (uint255(stor5[address(arg1)][idx].field_0) * 0.5) > t:
                            mem[t + 32] = uint256(stor1[u])
                            t = t + 32
                            u = u + 1
                            continue 
            else:
                if bool(stor5[address(arg1)][idx].field_0) == stor5[address(arg1)][idx].field_1 % 128 < 32:
                    revert with 0, 34
                if stor5[address(arg1)][idx].field_1 % 128:
                    if 31 >= stor5[address(arg1)][idx].field_1 % 128:
                        mem[_114 + 32] = 256 * Mask(248, 0, stor5[address(arg1)][idx].field_8)
                    else:
                        mem[0] = (6 * idx) + sha3(sha3(address(arg1), 5))
                        mem[_114 + 32] = stor5[address(arg1)][idx].field_0
                        t = _114 + 32
                        u = sha3(mem[0])
                        while _114 + stor5[address(arg1)][idx].field_1 % 128 > t:
                            mem[t + 32] = uint256(stor1[u])
                            t = t + 32
                            u = u + 1
                            continue 
            mem[_105] = _114
        mem[_105 + 32] = stor5[address(arg1)][idx].field_256
        mem[_105 + 64] = stor5[address(arg1)][idx].field_512
        mem[_105 + 96] = stor5[address(arg1)][idx].field_768
        mem[_105 + 128] = stor5[address(arg1)][idx].field_1024
        if uint8(stor5[address(arg1)][idx].field_1280) > 2:
            revert with 0, 33
        mem[_105 + 160] = uint8(stor5[address(arg1)][idx].field_1280)
        mem[s] = _105
        s = s + 32
        idx = idx + 1
        continue 
    _103 = mem[96]
    if not mem[96]:
        revert with 0, 50
    _109 = mem[mem[128] + 64]
    if mem[mem[128] + 160] > 2:
        revert with 0, 33
    mem[0] = mem[mem[128] + 160]
    mem[32] = 8
    idx = 0
    while stor8[mem[mem[128] + 160]].field_0 > idx:
        if idx > !stor8[mem[mem[128] + 160]].field_0:
            revert with 0, 17
        if mem[mem[128] + 160] > 2:
            revert with 0, 33
        mem[32] = 8
        if idx + stor8[mem[mem[128] + 160]].field_0 / 2 >= stor8[mem[mem[128] + 160]].field_0:
            revert with 0, 50
        mem[0] = sha3(mem[mem[128] + 160], 8)
        if stor8[mem[mem[128] + 160]][Mask(255, 1, idx + stor8[mem[mem[128] + 160]].field_0)].field_0 >= _109:
            idx = idx
            continue 
        if 1 > !(idx + stor8[mem[mem[128] + 160]].field_0 / 2):
            revert with 0, 17
        idx = (idx + stor8[mem[mem[128] + 160]].field_0 / 2) + 1
        continue 
    _200 = mem[mem[128] + 64]
    _201 = mem[mem[128] + 32]
    if mem[mem[128] + 160] > 2:
        revert with 0, 33
    idx = 0
    while stor8[mem[mem[128] + 160]].field_0 > idx:
        if idx > !stor8[mem[mem[128] + 160]].field_0:
            revert with 0, 17
        if mem[mem[128] + 160] > 2:
            revert with 0, 33
        mem[32] = 8
        if idx + stor8[mem[mem[128] + 160]].field_0 / 2 >= stor8[mem[mem[128] + 160]].field_0:
            revert with 0, 50
        mem[0] = sha3(mem[mem[128] + 160], 8)
        if stor8[mem[mem[128] + 160]][Mask(255, 1, idx + stor8[mem[mem[128] + 160]].field_0)].field_0 >= _201:
            idx = idx
            continue 
        if 1 > !(idx + stor8[mem[mem[128] + 160]].field_0 / 2):
            revert with 0, 17
        idx = (idx + stor8[mem[mem[128] + 160]].field_0 / 2) + 1
        continue 
    if mem[mem[128] + 160] > 2:
        revert with 0, 33
    mem[0] = mem[mem[128] + 160]
    mem[32] = 8
    s = 0
    while stor8[mem[mem[128] + 160]].field_0 > s:
        if s > !stor8[mem[mem[128] + 160]].field_0:
            revert with 0, 17
        if mem[mem[128] + 160] > 2:
            revert with 0, 33
        mem[32] = 8
        if s + stor8[mem[mem[128] + 160]].field_0 / 2 >= stor8[mem[mem[128] + 160]].field_0:
            revert with 0, 50
        mem[0] = sha3(mem[mem[128] + 160], 8)
        if stor8[mem[mem[128] + 160]][Mask(255, 1, s + stor8[mem[mem[128] + 160]].field_0)].field_0 >= _200:
            s = s
            continue 
        if 1 > !(s + stor8[mem[mem[128] + 160]].field_0 / 2):
            revert with 0, 17
        s = (s + stor8[mem[mem[128] + 160]].field_0 / 2) + 1
        continue 
    t = idx
    u = mem[mem[128] + 96]
    while t < s:
        if mem[mem[128] + 160] > 2:
            revert with 0, 33
        mem[32] = 8
        if t >= stor8[mem[mem[128] + 160]].field_0:
            revert with 0, 50
        mem[0] = sha3(mem[mem[128] + 160], 8)
        if 100 * 10^6 < stor8[mem[mem[128] + 160]][t].field_256 - 0x8000000000000000000000000000000000000000000000000000000000000000 and stor8[mem[mem[128] + 160]][t].field_256 >= 0:
            revert with 0, 17
        if stor8[mem[mem[128] + 160]][t].field_256 < 0 and 100 * 10^6 > stor8[mem[mem[128] + 160]][t].field_256 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
            revert with 0, 17
        if u and -stor8[mem[mem[128] + 160]][t].field_256 + 100 * 10^6 > -1 / u:
            revert with 0, 17
        if t == -1:
            revert with 0, 17
        t = t + 1
        u = (100 * 10^6 * u) - (stor8[mem[mem[128] + 160]][t].field_256 * u) / 100 * 10^6
        continue 
    if _200 < _201:
        revert with 0, 17
    if not sub_9b28d1a7:
        revert with 0, 18
    idx = _200 - _201 / sub_9b28d1a7
    s = u
    while idx:
        if not idx:
            revert with 0, 17
        if 100 * 10^6 < sub_93520a80 - 0x8000000000000000000000000000000000000000000000000000000000000000 and sub_93520a80 >= 0:
            revert with 0, 17
        if sub_93520a80 < 0 and 100 * 10^6 > sub_93520a80 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
            revert with 0, 17
        if s and -sub_93520a80 + 100 * 10^6 > -1 / s:
            revert with 0, 17
        idx = idx - 1
        s = (100 * 10^6 * s) - (sub_93520a80 * s) / 100 * 10^6
        continue 
    _494 = mem[mem[128] + 32]
    if mem[mem[128] + 160] > 2:
        revert with 0, 33
    mem[0] = mem[mem[128] + 160]
    mem[32] = 8
    idx = var134001
    s = var134002
    t = var134004
    u = var134005
    v = var134006
    w = var134007
    x = var134008
    y = var134009
    while idx < stor8[mem[mem[128] + 160]].field_0:
        if mem[mem[128] + 160] > 2:
            revert with 0, 33
        if idx >= stor8[mem[mem[128] + 160]].field_0:
            revert with 0, 50
        if x < _494:
            revert with 0, 17
        if not sub_9b28d1a7:
            revert with 0, 18
        if stor8[mem[mem[128] + 160]][idx].field_0 < _494:
            revert with 0, 17
        if not sub_9b28d1a7:
            revert with 0, 18
        if stor8[mem[mem[128] + 160]][idx].field_0 - _494 / sub_9b28d1a7 == x - _494 / sub_9b28d1a7:
            if stor8[mem[mem[128] + 160]][idx].field_0 < x:
                revert with 0, 17
            if mem[mem[128] + 128] and y > -1 / mem[mem[128] + 128]:
                revert with 0, 17
            if mem[mem[128] + 128] * y / 100 * 10^6 and stor8[mem[mem[128] + 160]][idx].field_0 - x > -1 / mem[mem[128] + 128] * y / 100 * 10^6:
                revert with 0, 17
            if v > !((stor8[mem[mem[128] + 160]][idx].field_0 * mem[mem[128] + 128] * y / 100 * 10^6) - (x * mem[mem[128] + 128] * y / 100 * 10^6) / 8760 * 24 * 3600):
                revert with 0, 17
            if stor8[mem[mem[128] + 160]][idx].field_0 - _494 / sub_9b28d1a7 != x - _494 / sub_9b28d1a7:
                if 100 * 10^6 < sub_93520a80 - 0x8000000000000000000000000000000000000000000000000000000000000000 and sub_93520a80 >= 0:
                    revert with 0, 17
                if sub_93520a80 < 0 and 100 * 10^6 > sub_93520a80 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                    revert with 0, 17
                if y and -sub_93520a80 + 100 * 10^6 > -1 / y:
                    revert with 0, 17
                if not idx:
                    revert with 0, 17
                if idx - 1 == -1:
                    revert with 0, 17
                if mem[mem[128] + 160] > 2:
                    revert with 0, 33
                mem[0] = mem[mem[128] + 160]
                mem[32] = 8
                idx = idx
                s = stor8[mem[mem[128] + 160]][idx].field_0 - _494 / sub_9b28d1a7 != x - _494 / sub_9b28d1a7
                t = (stor8[mem[mem[128] + 160]][idx].field_0 * mem[mem[128] + 128] * y / 100 * 10^6) - (x * mem[mem[128] + 128] * y / 100 * 10^6) / 8760 * 24 * 3600
                u = stor8[mem[mem[128] + 160]][idx].field_0 - x
                v = v + ((stor8[mem[mem[128] + 160]][idx].field_0 * mem[mem[128] + 128] * y / 100 * 10^6) - (x * mem[mem[128] + 128] * y / 100 * 10^6) / 8760 * 24 * 3600)
                w = stor8[mem[mem[128] + 160]][idx].field_0
                x = stor8[mem[mem[128] + 160]][idx].field_0
                y = (100 * 10^6 * y) - (sub_93520a80 * y) / 100 * 10^6
                continue 
            if mem[mem[128] + 160] > 2:
                revert with 0, 33
            if idx >= stor8[mem[mem[128] + 160]].field_0:
                revert with 0, 50
            if 100 * 10^6 < stor8[mem[mem[128] + 160]][idx].field_256 - 0x8000000000000000000000000000000000000000000000000000000000000000 and stor8[mem[mem[128] + 160]][idx].field_256 >= 0:
                revert with 0, 17
            if stor8[mem[mem[128] + 160]][idx].field_256 < 0 and 100 * 10^6 > stor8[mem[mem[128] + 160]][idx].field_256 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                revert with 0, 17
            if y and -stor8[mem[mem[128] + 160]][idx].field_256 + 100 * 10^6 > -1 / y:
                revert with 0, 17
            if idx == -1:
                revert with 0, 17
            if mem[mem[128] + 160] > 2:
                revert with 0, 33
            mem[0] = mem[mem[128] + 160]
            mem[32] = 8
            idx = idx + 1
            s = stor8[mem[mem[128] + 160]][idx].field_0 - _494 / sub_9b28d1a7 != x - _494 / sub_9b28d1a7
            t = (stor8[mem[mem[128] + 160]][idx].field_0 * mem[mem[128] + 128] * y / 100 * 10^6) - (x * mem[mem[128] + 128] * y / 100 * 10^6) / 8760 * 24 * 3600
            u = stor8[mem[mem[128] + 160]][idx].field_0 - x
            v = v + ((stor8[mem[mem[128] + 160]][idx].field_0 * mem[mem[128] + 128] * y / 100 * 10^6) - (x * mem[mem[128] + 128] * y / 100 * 10^6) / 8760 * 24 * 3600)
            w = stor8[mem[mem[128] + 160]][idx].field_0
            x = stor8[mem[mem[128] + 160]][idx].field_0
            y = (100 * 10^6 * y) - (stor8[mem[mem[128] + 160]][idx].field_256 * y) / 100 * 10^6
            continue 
        if x < _494:
            revert with 0, 17
        if not sub_9b28d1a7:
            revert with 0, 18
        if 1 > !(x - _494 / sub_9b28d1a7):
            revert with 0, 17
        if sub_9b28d1a7 and (x - _494 / sub_9b28d1a7) + 1 > -1 / sub_9b28d1a7:
            revert with 0, 17
        if _494 > !(sub_9b28d1a7 + (x - _494 / sub_9b28d1a7 * sub_9b28d1a7)):
            revert with 0, 17
        if _494 + sub_9b28d1a7 + (x - _494 / sub_9b28d1a7 * sub_9b28d1a7) < x:
            revert with 0, 17
        if mem[mem[128] + 128] and y > -1 / mem[mem[128] + 128]:
            revert with 0, 17
        if mem[mem[128] + 128] * y / 100 * 10^6 and _494 + sub_9b28d1a7 + (x - _494 / sub_9b28d1a7 * sub_9b28d1a7) - x > -1 / mem[mem[128] + 128] * y / 100 * 10^6:
            revert with 0, 17
        if v > !((_494 * mem[mem[128] + 128] * y / 100 * 10^6) + (sub_9b28d1a7 * mem[mem[128] + 128] * y / 100 * 10^6) + (x - _494 / sub_9b28d1a7 * sub_9b28d1a7 * mem[mem[128] + 128] * y / 100 * 10^6) - (x * mem[mem[128] + 128] * y / 100 * 10^6) / 8760 * 24 * 3600):
            revert with 0, 17
        if stor8[mem[mem[128] + 160]][idx].field_0 - _494 / sub_9b28d1a7 != x - _494 / sub_9b28d1a7:
            if 100 * 10^6 < sub_93520a80 - 0x8000000000000000000000000000000000000000000000000000000000000000 and sub_93520a80 >= 0:
                revert with 0, 17
            if sub_93520a80 < 0 and 100 * 10^6 > sub_93520a80 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                revert with 0, 17
            if y and -sub_93520a80 + 100 * 10^6 > -1 / y:
                revert with 0, 17
            if not idx:
                revert with 0, 17
            if idx - 1 == -1:
                revert with 0, 17
            if mem[mem[128] + 160] > 2:
                revert with 0, 33
            mem[0] = mem[mem[128] + 160]
            mem[32] = 8
            idx = idx
            s = stor8[mem[mem[128] + 160]][idx].field_0 - _494 / sub_9b28d1a7 != x - _494 / sub_9b28d1a7
            t = (_494 * mem[mem[128] + 128] * y / 100 * 10^6) + (sub_9b28d1a7 * mem[mem[128] + 128] * y / 100 * 10^6) + (x - _494 / sub_9b28d1a7 * sub_9b28d1a7 * mem[mem[128] + 128] * y / 100 * 10^6) - (x * mem[mem[128] + 128] * y / 100 * 10^6) / 8760 * 24 * 3600
            u = _494 + sub_9b28d1a7 + (x - _494 / sub_9b28d1a7 * sub_9b28d1a7) - x
            v = v + ((_494 * mem[mem[128] + 128] * y / 100 * 10^6) + (sub_9b28d1a7 * mem[mem[128] + 128] * y / 100 * 10^6) + (x - _494 / sub_9b28d1a7 * sub_9b28d1a7 * mem[mem[128] + 128] * y / 100 * 10^6) - (x * mem[mem[128] + 128] * y / 100 * 10^6) / 8760 * 24 * 3600)
            w = _494 + sub_9b28d1a7 + (x - _494 / sub_9b28d1a7 * sub_9b28d1a7)
            x = _494 + sub_9b28d1a7 + (x - _494 / sub_9b28d1a7 * sub_9b28d1a7)
            y = (100 * 10^6 * y) - (sub_93520a80 * y) / 100 * 10^6
            continue 
        if mem[mem[128] + 160] > 2:
            revert with 0, 33
        if idx >= stor8[mem[mem[128] + 160]].field_0:
            revert with 0, 50
        if 100 * 10^6 < stor8[mem[mem[128] + 160]][idx].field_256 - 0x8000000000000000000000000000000000000000000000000000000000000000 and stor8[mem[mem[128] + 160]][idx].field_256 >= 0:
            revert with 0, 17
        if stor8[mem[mem[128] + 160]][idx].field_256 < 0 and 100 * 10^6 > stor8[mem[mem[128] + 160]][idx].field_256 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
            revert with 0, 17
        if y and -stor8[mem[mem[128] + 160]][idx].field_256 + 100 * 10^6 > -1 / y:
            revert with 0, 17
        if idx == -1:
            revert with 0, 17
        if mem[mem[128] + 160] > 2:
            revert with 0, 33
        mem[0] = mem[mem[128] + 160]
        mem[32] = 8
        idx = idx + 1
        s = stor8[mem[mem[128] + 160]][idx].field_0 - _494 / sub_9b28d1a7 != x - _494 / sub_9b28d1a7
        t = (_494 * mem[mem[128] + 128] * y / 100 * 10^6) + (sub_9b28d1a7 * mem[mem[128] + 128] * y / 100 * 10^6) + (x - _494 / sub_9b28d1a7 * sub_9b28d1a7 * mem[mem[128] + 128] * y / 100 * 10^6) - (x * mem[mem[128] + 128] * y / 100 * 10^6) / 8760 * 24 * 3600
        u = _494 + sub_9b28d1a7 + (x - _494 / sub_9b28d1a7 * sub_9b28d1a7) - x
        v = v + ((_494 * mem[mem[128] + 128] * y / 100 * 10^6) + (sub_9b28d1a7 * mem[mem[128] + 128] * y / 100 * 10^6) + (x - _494 / sub_9b28d1a7 * sub_9b28d1a7 * mem[mem[128] + 128] * y / 100 * 10^6) - (x * mem[mem[128] + 128] * y / 100 * 10^6) / 8760 * 24 * 3600)
        w = _494 + sub_9b28d1a7 + (x - _494 / sub_9b28d1a7 * sub_9b28d1a7)
        x = _494 + sub_9b28d1a7 + (x - _494 / sub_9b28d1a7 * sub_9b28d1a7)
        y = (100 * 10^6 * y) - (stor8[mem[mem[128] + 160]][idx].field_256 * y) / 100 * 10^6
        continue 
    z = s
    a = t
    a = u
    a = v
    b = w
    idx = x
    b = y
    while idx != block.timestamp:
        if idx < _494:
            revert with 0, 17
        if not sub_9b28d1a7:
            revert with 0, 18
        if block.timestamp < _494:
            revert with 0, 17
        if not sub_9b28d1a7:
            revert with 0, 18
        if block.timestamp - _494 / sub_9b28d1a7 == idx - _494 / sub_9b28d1a7:
            if block.timestamp < idx:
                revert with 0, 17
            if mem[mem[128] + 128] and b > -1 / mem[mem[128] + 128]:
                revert with 0, 17
            if mem[mem[128] + 128] * b / 100 * 10^6 and block.timestamp - idx > -1 / mem[mem[128] + 128] * b / 100 * 10^6:
                revert with 0, 17
            if a > !((block.timestamp * mem[mem[128] + 128] * b / 100 * 10^6) - (idx * mem[mem[128] + 128] * b / 100 * 10^6) / 8760 * 24 * 3600):
                revert with 0, 17
            if block.timestamp - _494 / sub_9b28d1a7 == idx - _494 / sub_9b28d1a7:
                z = block.timestamp - _494 / sub_9b28d1a7 != idx - _494 / sub_9b28d1a7
                a = (block.timestamp * mem[mem[128] + 128] * b / 100 * 10^6) - (idx * mem[mem[128] + 128] * b / 100 * 10^6) / 8760 * 24 * 3600
                a = block.timestamp - idx
                a = a + ((block.timestamp * mem[mem[128] + 128] * b / 100 * 10^6) - (idx * mem[mem[128] + 128] * b / 100 * 10^6) / 8760 * 24 * 3600)
                b = block.timestamp
                idx = block.timestamp
                b = b
                continue 
            if 100 * 10^6 < sub_93520a80 - 0x8000000000000000000000000000000000000000000000000000000000000000 and sub_93520a80 >= 0:
                revert with 0, 17
            if sub_93520a80 < 0 and 100 * 10^6 > sub_93520a80 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                revert with 0, 17
            if b and -sub_93520a80 + 100 * 10^6 > -1 / b:
                revert with 0, 17
            z = block.timestamp - _494 / sub_9b28d1a7 != idx - _494 / sub_9b28d1a7
            a = (block.timestamp * mem[mem[128] + 128] * b / 100 * 10^6) - (idx * mem[mem[128] + 128] * b / 100 * 10^6) / 8760 * 24 * 3600
            a = block.timestamp - idx
            a = a + ((block.timestamp * mem[mem[128] + 128] * b / 100 * 10^6) - (idx * mem[mem[128] + 128] * b / 100 * 10^6) / 8760 * 24 * 3600)
            b = block.timestamp
            idx = block.timestamp
            b = (100 * 10^6 * b) - (sub_93520a80 * b) / 100 * 10^6
            continue 
        if idx < _494:
            revert with 0, 17
        if not sub_9b28d1a7:
            revert with 0, 18
        if 1 > !(idx - _494 / sub_9b28d1a7):
            revert with 0, 17
        if sub_9b28d1a7 and (idx - _494 / sub_9b28d1a7) + 1 > -1 / sub_9b28d1a7:
            revert with 0, 17
        if _494 > !(sub_9b28d1a7 + (idx - _494 / sub_9b28d1a7 * sub_9b28d1a7)):
            revert with 0, 17
        if _494 + sub_9b28d1a7 + (idx - _494 / sub_9b28d1a7 * sub_9b28d1a7) < idx:
            revert with 0, 17
        if mem[mem[128] + 128] and b > -1 / mem[mem[128] + 128]:
            revert with 0, 17
        if mem[mem[128] + 128] * b / 100 * 10^6 and _494 + sub_9b28d1a7 + (idx - _494 / sub_9b28d1a7 * sub_9b28d1a7) - idx > -1 / mem[mem[128] + 128] * b / 100 * 10^6:
            revert with 0, 17
        if a > !((_494 * mem[mem[128] + 128] * b / 100 * 10^6) + (sub_9b28d1a7 * mem[mem[128] + 128] * b / 100 * 10^6) + (idx - _494 / sub_9b28d1a7 * sub_9b28d1a7 * mem[mem[128] + 128] * b / 100 * 10^6) - (idx * mem[mem[128] + 128] * b / 100 * 10^6) / 8760 * 24 * 3600):
            revert with 0, 17
        if block.timestamp - _494 / sub_9b28d1a7 == idx - _494 / sub_9b28d1a7:
            z = block.timestamp - _494 / sub_9b28d1a7 != idx - _494 / sub_9b28d1a7
            a = (_494 * mem[mem[128] + 128] * b / 100 * 10^6) + (sub_9b28d1a7 * mem[mem[128] + 128] * b / 100 * 10^6) + (idx - _494 / sub_9b28d1a7 * sub_9b28d1a7 * mem[mem[128] + 128] * b / 100 * 10^6) - (idx * mem[mem[128] + 128] * b / 100 * 10^6) / 8760 * 24 * 3600
            a = _494 + sub_9b28d1a7 + (idx - _494 / sub_9b28d1a7 * sub_9b28d1a7) - idx
            a = a + ((_494 * mem[mem[128] + 128] * b / 100 * 10^6) + (sub_9b28d1a7 * mem[mem[128] + 128] * b / 100 * 10^6) + (idx - _494 / sub_9b28d1a7 * sub_9b28d1a7 * mem[mem[128] + 128] * b / 100 * 10^6) - (idx * mem[mem[128] + 128] * b / 100 * 10^6) / 8760 * 24 * 3600)
            b = _494 + sub_9b28d1a7 + (idx - _494 / sub_9b28d1a7 * sub_9b28d1a7)
            idx = _494 + sub_9b28d1a7 + (idx - _494 / sub_9b28d1a7 * sub_9b28d1a7)
            b = b
            continue 
        if 100 * 10^6 < sub_93520a80 - 0x8000000000000000000000000000000000000000000000000000000000000000 and sub_93520a80 >= 0:
            revert with 0, 17
        if sub_93520a80 < 0 and 100 * 10^6 > sub_93520a80 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
            revert with 0, 17
        if b and -sub_93520a80 + 100 * 10^6 > -1 / b:
            revert with 0, 17
        z = block.timestamp - _494 / sub_9b28d1a7 != idx - _494 / sub_9b28d1a7
        a = (_494 * mem[mem[128] + 128] * b / 100 * 10^6) + (sub_9b28d1a7 * mem[mem[128] + 128] * b / 100 * 10^6) + (idx - _494 / sub_9b28d1a7 * sub_9b28d1a7 * mem[mem[128] + 128] * b / 100 * 10^6) - (idx * mem[mem[128] + 128] * b / 100 * 10^6) / 8760 * 24 * 3600
        a = _494 + sub_9b28d1a7 + (idx - _494 / sub_9b28d1a7 * sub_9b28d1a7) - idx
        a = a + ((_494 * mem[mem[128] + 128] * b / 100 * 10^6) + (sub_9b28d1a7 * mem[mem[128] + 128] * b / 100 * 10^6) + (idx - _494 / sub_9b28d1a7 * sub_9b28d1a7 * mem[mem[128] + 128] * b / 100 * 10^6) - (idx * mem[mem[128] + 128] * b / 100 * 10^6) / 8760 * 24 * 3600)
        b = _494 + sub_9b28d1a7 + (idx - _494 / sub_9b28d1a7 * sub_9b28d1a7)
        idx = _494 + sub_9b28d1a7 + (idx - _494 / sub_9b28d1a7 * sub_9b28d1a7)
        b = (100 * 10^6 * b) - (sub_93520a80 * b) / 100 * 10^6
        continue 
    if a:
        s = 0
        idx = a
        while idx:
            if s == -1:
                revert with 0, 17
            s = s + 1
            idx = idx / 10
            continue 
        if s > test266151307():
            revert with 0, 65
        _749 = mem[64]
        mem[mem[64]] = s
        mem[64] = mem[64] + ceil32(s) + 32
        if not s:
            t = s
            idx = a
            while idx:
                if t < 1:
                    revert with 0, 17
                if idx / 10 > 0x1999999999999999999999999999999999999999999999999999999999999999:
                    revert with 0, 17
                if idx < 10 * idx / 10:
                    revert with 0, 17
                if 48 > -uint8(idx - (10 * idx / 10)) + 255:
                    revert with 0, 17
                if t - 1 >= mem[_749]:
                    revert with 0, 50
                mem[t + _749 + 31 len 8] = Mask(8, -(('mask_shl', 8, 0, 245, ('add', 48, ('mask_shl', 8, 0, 0, ('add', ('var', 0), ('mul', -10, ('div', ('var', 0), 10)))))), 0) + 256, 0) << (('mask_shl', 8, 0, 245, ('add', 48, ('mask_shl', 8, 0, 0, ('add', ('var', 0), ('mul', -10, ('div', ('var', 0), 10)))))), 0) - 256
                t = t - 1
                idx = idx / 10
                continue 
            _922 = mem[64]
            mem[64] = mem[64] + 64
            mem[_922] = 1
            mem[_922 + 32] = 0x2300000000000000000000000000000000000000000000000000000000000000
            if var144001 >= _103:
                _1088 = mem[64]
                mem[mem[64]] = 32
                _1092 = mem[var144003]
                mem[mem[64] + 32] = mem[var144003]
                mem[mem[64] + 64 len ceil32(_1092)] = mem[var144003 + 32 len ceil32(_1092)]
                if ceil32(_1092) <= _1092:
                    return 32, mem[mem[64] + 32 len ceil32(_1092) + 32]
                mem[mem[64] + _1092 + 64] = 0
                return memory
                  from mem[64]
                   len ceil32(_1092) + _1088 + -mem[64] + 64
            if var144001 >= mem[96]:
                revert with 0, 50
            _1094 = mem[mem[(32 * var144001) + 128] + 64]
            if mem[mem[(32 * var144001) + 128] + 160] > 2:
                revert with 0, 33
            mem[0] = mem[mem[(32 * var144001) + 128] + 160]
            mem[32] = 8
            s = 0
            while stor8[mem[mem[(32 * var144001) + 128] + 160]].field_0 > s:
                if s > !stor8[mem[mem[(32 * var144001) + 128] + 160]].field_0:
                    revert with 0, 17
                if mem[mem[(32 * var144001) + 128] + 160] > 2:
                    revert with 0, 33
                mem[32] = 8
                if s + stor8[mem[mem[(32 * var144001) + 128] + 160]].field_0 / 2 >= stor8[mem[mem[(32 * var144001) + 128] + 160]].field_0:
                    revert with 0, 50
                mem[0] = sha3(mem[mem[(32 * var144001) + 128] + 160], 8)
                if stor8[mem[mem[(32 * var144001) + 128] + 160]][Mask(255, 1, s + stor8[mem[mem[(32 * var144001) + 128] + 160]].field_0)].field_0 >= _1094:
                    s = s
                    continue 
                if 1 > !(s + stor8[mem[mem[(32 * var144001) + 128] + 160]].field_0 / 2):
                    revert with 0, 17
                s = (s + stor8[mem[mem[(32 * var144001) + 128] + 160]].field_0 / 2) + 1
                continue 
            _1241 = mem[mem[(32 * var144001) + 128] + 64]
            _1244 = mem[mem[(32 * var144001) + 128] + 32]
            if mem[mem[(32 * var144001) + 128] + 160] > 2:
                revert with 0, 33
            s = 0
            while stor8[mem[mem[(32 * var144001) + 128] + 160]].field_0 > s:
                if s > !stor8[mem[mem[(32 * var144001) + 128] + 160]].field_0:
                    revert with 0, 17
                if mem[mem[(32 * var144001) + 128] + 160] > 2:
                    revert with 0, 33
                mem[32] = 8
                if s + stor8[mem[mem[(32 * var144001) + 128] + 160]].field_0 / 2 >= stor8[mem[mem[(32 * var144001) + 128] + 160]].field_0:
                    revert with 0, 50
                mem[0] = sha3(mem[mem[(32 * var144001) + 128] + 160], 8)
                if stor8[mem[mem[(32 * var144001) + 128] + 160]][Mask(255, 1, s + stor8[mem[mem[(32 * var144001) + 128] + 160]].field_0)].field_0 >= _1244:
                    s = s
                    continue 
                if 1 > !(s + stor8[mem[mem[(32 * var144001) + 128] + 160]].field_0 / 2):
                    revert with 0, 17
                s = (s + stor8[mem[mem[(32 * var144001) + 128] + 160]].field_0 / 2) + 1
                continue 
            if mem[mem[(32 * var144001) + 128] + 160] > 2:
                revert with 0, 33
            mem[0] = mem[mem[(32 * var144001) + 128] + 160]
            mem[32] = 8
            t = 0
            while stor8[mem[mem[(32 * var144001) + 128] + 160]].field_0 > t:
                if t > !stor8[mem[mem[(32 * var144001) + 128] + 160]].field_0:
                    revert with 0, 17
                if mem[mem[(32 * var144001) + 128] + 160] > 2:
                    revert with 0, 33
                mem[32] = 8
                if t + stor8[mem[mem[(32 * var144001) + 128] + 160]].field_0 / 2 >= stor8[mem[mem[(32 * var144001) + 128] + 160]].field_0:
                    revert with 0, 50
                mem[0] = sha3(mem[mem[(32 * var144001) + 128] + 160], 8)
                if stor8[mem[mem[(32 * var144001) + 128] + 160]][Mask(255, 1, t + stor8[mem[mem[(32 * var144001) + 128] + 160]].field_0)].field_0 >= _1241:
                    t = t
                    continue 
                if 1 > !(t + stor8[mem[mem[(32 * var144001) + 128] + 160]].field_0 / 2):
                    revert with 0, 17
                t = (t + stor8[mem[mem[(32 * var144001) + 128] + 160]].field_0 / 2) + 1
                continue 
            u = s
            v = mem[mem[(32 * var144001) + 128] + 96]
            while u < t:
                if mem[mem[(32 * var144001) + 128] + 160] > 2:
                    revert with 0, 33
                mem[32] = 8
                if u >= stor8[mem[mem[(32 * var144001) + 128] + 160]].field_0:
                    revert with 0, 50
                mem[0] = sha3(mem[mem[(32 * var144001) + 128] + 160], 8)
                if 100 * 10^6 < stor8[mem[mem[(32 * var144001) + 128] + 160]][u].field_256 - 0x8000000000000000000000000000000000000000000000000000000000000000 and stor8[mem[mem[(32 * var144001) + 128] + 160]][u].field_256 >= 0:
                    revert with 0, 17
                if stor8[mem[mem[(32 * var144001) + 128] + 160]][u].field_256 < 0 and 100 * 10^6 > stor8[mem[mem[(32 * var144001) + 128] + 160]][u].field_256 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                    revert with 0, 17
                if v and -stor8[mem[mem[(32 * var144001) + 128] + 160]][u].field_256 + 100 * 10^6 > -1 / v:
                    revert with 0, 17
                if u == -1:
                    revert with 0, 17
                u = u + 1
                v = (100 * 10^6 * v) - (stor8[mem[mem[(32 * var144001) + 128] + 160]][u].field_256 * v) / 100 * 10^6
                continue 
            if _1241 < _1244:
                revert with 0, 17
            if not sub_9b28d1a7:
                revert with 0, 18
            idx = _1241 - _1244 / sub_9b28d1a7
            s = v
            while idx:
                if not idx:
                    revert with 0, 17
                if 100 * 10^6 < sub_93520a80 - 0x8000000000000000000000000000000000000000000000000000000000000000 and sub_93520a80 >= 0:
                    revert with 0, 17
                if sub_93520a80 < 0 and 100 * 10^6 > sub_93520a80 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                    revert with 0, 17
                if s and -sub_93520a80 + 100 * 10^6 > -1 / s:
                    revert with 0, 17
                idx = idx - 1
                s = (100 * 10^6 * s) - (sub_93520a80 * s) / 100 * 10^6
                continue 
            _1698 = mem[mem[(32 * var144001) + 128] + 32]
            if mem[mem[(32 * var144001) + 128] + 160] > 2:
                revert with 0, 33
            s = var197001
            t = var197002
            t = var197004
            t = var197005
            t = var197006
            u = var197007
            u = var197008
            v = var197009
            while s < stor8[mem[mem[(32 * var144001) + 128] + 160]].field_0:
                if mem[mem[(32 * var144001) + 128] + 160] > 2:
                    revert with 0, 33
                if s >= stor8[mem[mem[(32 * var144001) + 128] + 160]].field_0:
                    revert with 0, 50
                if u < _1698:
                    revert with 0, 17
                if not sub_9b28d1a7:
                    revert with 0, 18
                if stor8[mem[mem[(32 * var144001) + 128] + 160]][s].field_0 < _1698:
                    revert with 0, 17
                if not sub_9b28d1a7:
                    revert with 0, 18
                if stor8[mem[mem[(32 * var144001) + 128] + 160]][s].field_0 - _1698 / sub_9b28d1a7 == u - _1698 / sub_9b28d1a7:
                    if stor8[mem[mem[(32 * var144001) + 128] + 160]][s].field_0 < u:
                        revert with 0, 17
                    if mem[mem[(32 * var144001) + 128] + 128] and v > -1 / mem[mem[(32 * var144001) + 128] + 128]:
                        revert with 0, 17
                    if mem[mem[(32 * var144001) + 128] + 128] * v / 100 * 10^6 and stor8[mem[mem[(32 * var144001) + 128] + 160]][s].field_0 - u > -1 / mem[mem[(32 * var144001) + 128] + 128] * v / 100 * 10^6:
                        revert with 0, 17
                    if t > !((stor8[mem[mem[(32 * var144001) + 128] + 160]][s].field_0 * mem[mem[(32 * var144001) + 128] + 128] * v / 100 * 10^6) - (u * mem[mem[(32 * var144001) + 128] + 128] * v / 100 * 10^6) / 8760 * 24 * 3600):
                        revert with 0, 17
                    if stor8[mem[mem[(32 * var144001) + 128] + 160]][s].field_0 - _1698 / sub_9b28d1a7 != u - _1698 / sub_9b28d1a7:
                        if 100 * 10^6 < sub_93520a80 - 0x8000000000000000000000000000000000000000000000000000000000000000 and sub_93520a80 >= 0:
                            revert with 0, 17
                        if sub_93520a80 < 0 and 100 * 10^6 > sub_93520a80 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                            revert with 0, 17
                        if v and -sub_93520a80 + 100 * 10^6 > -1 / v:
                            revert with 0, 17
                        if not s:
                            revert with 0, 17
                        if s - 1 == -1:
                            revert with 0, 17
                        if mem[mem[(32 * var144001) + 128] + 160] > 2:
                            revert with 0, 33
                        mem[0] = mem[mem[(32 * var144001) + 128] + 160]
                        mem[32] = 8
                        s = s
                        t = stor8[mem[mem[(32 * var144001) + 128] + 160]][s].field_0 - _1698 / sub_9b28d1a7 != u - _1698 / sub_9b28d1a7
                        t = (stor8[mem[mem[(32 * var144001) + 128] + 160]][s].field_0 * mem[mem[(32 * var144001) + 128] + 128] * v / 100 * 10^6) - (u * mem[mem[(32 * var144001) + 128] + 128] * v / 100 * 10^6) / 8760 * 24 * 3600
                        t = stor8[mem[mem[(32 * var144001) + 128] + 160]][s].field_0 - u
                        t = t + ((stor8[mem[mem[(32 * var144001) + 128] + 160]][s].field_0 * mem[mem[(32 * var144001) + 128] + 128] * v / 100 * 10^6) - (u * mem[mem[(32 * var144001) + 128] + 128] * v / 100 * 10^6) / 8760 * 24 * 3600)
                        u = stor8[mem[mem[(32 * var144001) + 128] + 160]][s].field_0
                        u = stor8[mem[mem[(32 * var144001) + 128] + 160]][s].field_0
                        v = (100 * 10^6 * v) - (sub_93520a80 * v) / 100 * 10^6
                        continue 
                    if mem[mem[(32 * var144001) + 128] + 160] > 2:
                        revert with 0, 33
                    if s >= stor8[mem[mem[(32 * var144001) + 128] + 160]].field_0:
                        revert with 0, 50
                    if 100 * 10^6 < stor8[mem[mem[(32 * var144001) + 128] + 160]][s].field_256 - 0x8000000000000000000000000000000000000000000000000000000000000000 and stor8[mem[mem[(32 * var144001) + 128] + 160]][s].field_256 >= 0:
                        revert with 0, 17
                    if stor8[mem[mem[(32 * var144001) + 128] + 160]][s].field_256 < 0 and 100 * 10^6 > stor8[mem[mem[(32 * var144001) + 128] + 160]][s].field_256 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                        revert with 0, 17
                    if v and -stor8[mem[mem[(32 * var144001) + 128] + 160]][s].field_256 + 100 * 10^6 > -1 / v:
                        revert with 0, 17
                    if s == -1:
                        revert with 0, 17
                    if mem[mem[(32 * var144001) + 128] + 160] > 2:
                        revert with 0, 33
                    mem[0] = mem[mem[(32 * var144001) + 128] + 160]
                    mem[32] = 8
                    s = s + 1
                    t = stor8[mem[mem[(32 * var144001) + 128] + 160]][s].field_0 - _1698 / sub_9b28d1a7 != u - _1698 / sub_9b28d1a7
                    t = (stor8[mem[mem[(32 * var144001) + 128] + 160]][s].field_0 * mem[mem[(32 * var144001) + 128] + 128] * v / 100 * 10^6) - (u * mem[mem[(32 * var144001) + 128] + 128] * v / 100 * 10^6) / 8760 * 24 * 3600
                    t = stor8[mem[mem[(32 * var144001) + 128] + 160]][s].field_0 - u
                    t = t + ((stor8[mem[mem[(32 * var144001) + 128] + 160]][s].field_0 * mem[mem[(32 * var144001) + 128] + 128] * v / 100 * 10^6) - (u * mem[mem[(32 * var144001) + 128] + 128] * v / 100 * 10^6) / 8760 * 24 * 3600)
                    u = stor8[mem[mem[(32 * var144001) + 128] + 160]][s].field_0
                    u = stor8[mem[mem[(32 * var144001) + 128] + 160]][s].field_0
                    v = (100 * 10^6 * v) - (stor8[mem[mem[(32 * var144001) + 128] + 160]][s].field_256 * v) / 100 * 10^6
                    continue 
                if u < _1698:
                    revert with 0, 17
                if not sub_9b28d1a7:
                    revert with 0, 18
                if 1 > !(u - _1698 / sub_9b28d1a7):
                    revert with 0, 17
                if sub_9b28d1a7 and (u - _1698 / sub_9b28d1a7) + 1 > -1 / sub_9b28d1a7:
                    revert with 0, 17
                if _1698 > !(sub_9b28d1a7 + (u - _1698 / sub_9b28d1a7 * sub_9b28d1a7)):
                    revert with 0, 17
                if _1698 + sub_9b28d1a7 + (u - _1698 / sub_9b28d1a7 * sub_9b28d1a7) < u:
                    revert with 0, 17
                if mem[mem[(32 * var144001) + 128] + 128] and v > -1 / mem[mem[(32 * var144001) + 128] + 128]:
                    revert with 0, 17
                if mem[mem[(32 * var144001) + 128] + 128] * v / 100 * 10^6 and _1698 + sub_9b28d1a7 + (u - _1698 / sub_9b28d1a7 * sub_9b28d1a7) - u > -1 / mem[mem[(32 * var144001) + 128] + 128] * v / 100 * 10^6:
                    revert with 0, 17
                if t > !((_1698 * mem[mem[(32 * var144001) + 128] + 128] * v / 100 * 10^6) + (sub_9b28d1a7 * mem[mem[(32 * var144001) + 128] + 128] * v / 100 * 10^6) + (u - _1698 / sub_9b28d1a7 * sub_9b28d1a7 * mem[mem[(32 * var144001) + 128] + 128] * v / 100 * 10^6) - (u * mem[mem[(32 * var144001) + 128] + 128] * v / 100 * 10^6) / 8760 * 24 * 3600):
                    revert with 0, 17
                if stor8[mem[mem[(32 * var144001) + 128] + 160]][s].field_0 - _1698 / sub_9b28d1a7 != u - _1698 / sub_9b28d1a7:
                    if 100 * 10^6 < sub_93520a80 - 0x8000000000000000000000000000000000000000000000000000000000000000 and sub_93520a80 >= 0:
                        revert with 0, 17
                    if sub_93520a80 < 0 and 100 * 10^6 > sub_93520a80 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                        revert with 0, 17
                    if v and -sub_93520a80 + 100 * 10^6 > -1 / v:
                        revert with 0, 17
                    if not s:
                        revert with 0, 17
                    if s - 1 == -1:
                        revert with 0, 17
                    if mem[mem[(32 * var144001) + 128] + 160] > 2:
                        revert with 0, 33
                    mem[0] = mem[mem[(32 * var144001) + 128] + 160]
                    mem[32] = 8
                    s = s
                    t = stor8[mem[mem[(32 * var144001) + 128] + 160]][s].field_0 - _1698 / sub_9b28d1a7 != u - _1698 / sub_9b28d1a7
                    t = (_1698 * mem[mem[(32 * var144001) + 128] + 128] * v / 100 * 10^6) + (sub_9b28d1a7 * mem[mem[(32 * var144001) + 128] + 128] * v / 100 * 10^6) + (u - _1698 / sub_9b28d1a7 * sub_9b28d1a7 * mem[mem[(32 * var144001) + 128] + 128] * v / 100 * 10^6) - (u * mem[mem[(32 * var144001) + 128] + 128] * v / 100 * 10^6) / 8760 * 24 * 3600
                    t = _1698 + sub_9b28d1a7 + (u - _1698 / sub_9b28d1a7 * sub_9b28d1a7) - u
                    t = t + ((_1698 * mem[mem[(32 * var144001) + 128] + 128] * v / 100 * 10^6) + (sub_9b28d1a7 * mem[mem[(32 * var144001) + 128] + 128] * v / 100 * 10^6) + (u - _1698 / sub_9b28d1a7 * sub_9b28d1a7 * mem[mem[(32 * var144001) + 128] + 128] * v / 100 * 10^6) - (u * mem[mem[(32 * var144001) + 128] + 128] * v / 100 * 10^6) / 8760 * 24 * 3600)
                    u = _1698 + sub_9b28d1a7 + (u - _1698 / sub_9b28d1a7 * sub_9b28d1a7)
                    u = _1698 + sub_9b28d1a7 + (u - _1698 / sub_9b28d1a7 * sub_9b28d1a7)
                    v = (100 * 10^6 * v) - (sub_93520a80 * v) / 100 * 10^6
                    continue 
                if mem[mem[(32 * var144001) + 128] + 160] > 2:
                    revert with 0, 33
                if s >= stor8[mem[mem[(32 * var144001) + 128] + 160]].field_0:
                    revert with 0, 50
                if 100 * 10^6 < stor8[mem[mem[(32 * var144001) + 128] + 160]][s].field_256 - 0x8000000000000000000000000000000000000000000000000000000000000000 and stor8[mem[mem[(32 * var144001) + 128] + 160]][s].field_256 >= 0:
                    revert with 0, 17
                if stor8[mem[mem[(32 * var144001) + 128] + 160]][s].field_256 < 0 and 100 * 10^6 > stor8[mem[mem[(32 * var144001) + 128] + 160]][s].field_256 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                    revert with 0, 17
                if v and -stor8[mem[mem[(32 * var144001) + 128] + 160]][s].field_256 + 100 * 10^6 > -1 / v:
                    revert with 0, 17
                if s == -1:
                    revert with 0, 17
                if mem[mem[(32 * var144001) + 128] + 160] > 2:
                    revert with 0, 33
                mem[0] = mem[mem[(32 * var144001) + 128] + 160]
                mem[32] = 8
                s = s + 1
                t = stor8[mem[mem[(32 * var144001) + 128] + 160]][s].field_0 - _1698 / sub_9b28d1a7 != u - _1698 / sub_9b28d1a7
                t = (_1698 * mem[mem[(32 * var144001) + 128] + 128] * v / 100 * 10^6) + (sub_9b28d1a7 * mem[mem[(32 * var144001) + 128] + 128] * v / 100 * 10^6) + (u - _1698 / sub_9b28d1a7 * sub_9b28d1a7 * mem[mem[(32 * var144001) + 128] + 128] * v / 100 * 10^6) - (u * mem[mem[(32 * var144001) + 128] + 128] * v / 100 * 10^6) / 8760 * 24 * 3600
                t = _1698 + sub_9b28d1a7 + (u - _1698 / sub_9b28d1a7 * sub_9b28d1a7) - u
                t = t + ((_1698 * mem[mem[(32 * var144001) + 128] + 128] * v / 100 * 10^6) + (sub_9b28d1a7 * mem[mem[(32 * var144001) + 128] + 128] * v / 100 * 10^6) + (u - _1698 / sub_9b28d1a7 * sub_9b28d1a7 * mem[mem[(32 * var144001) + 128] + 128] * v / 100 * 10^6) - (u * mem[mem[(32 * var144001) + 128] + 128] * v / 100 * 10^6) / 8760 * 24 * 3600)
                u = _1698 + sub_9b28d1a7 + (u - _1698 / sub_9b28d1a7 * sub_9b28d1a7)
                u = _1698 + sub_9b28d1a7 + (u - _1698 / sub_9b28d1a7 * sub_9b28d1a7)
                v = (100 * 10^6 * v) - (stor8[mem[mem[(32 * var144001) + 128] + 160]][s].field_256 * v) / 100 * 10^6
                continue 
            # nil
        else:
            mem[_749 + 32 len s] = call.data[calldata.size len s]
            t = s
            idx = a
            while idx:
                if t < 1:
                    revert with 0, 17
                if idx / 10 > 0x1999999999999999999999999999999999999999999999999999999999999999:
                    revert with 0, 17
                if idx < 10 * idx / 10:
                    revert with 0, 17
                if 48 > -uint8(idx - (10 * idx / 10)) + 255:
                    revert with 0, 17
                if t - 1 >= mem[_749]:
                    revert with 0, 50
                mem[t + _749 + 31 len 8] = Mask(8, -(('mask_shl', 8, 0, 245, ('add', 48, ('mask_shl', 8, 0, 0, ('add', ('var', 0), ('mul', -10, ('div', ('var', 0), 10)))))), 0) + 256, 0) << (('mask_shl', 8, 0, 245, ('add', 48, ('mask_shl', 8, 0, 0, ('add', ('var', 0), ('mul', -10, ('div', ('var', 0), 10)))))), 0) - 256
                t = t - 1
                idx = idx / 10
                continue 
            _923 = mem[64]
            mem[64] = mem[64] + 64
            mem[_923] = 1
            mem[_923 + 32] = 0x2300000000000000000000000000000000000000000000000000000000000000
            if var145001 >= _103:
                _1090 = mem[64]
                mem[mem[64]] = 32
                _1095 = mem[var145003]
                mem[mem[64] + 32] = mem[var145003]
                mem[mem[64] + 64 len ceil32(_1095)] = mem[var145003 + 32 len ceil32(_1095)]
                if ceil32(_1095) <= _1095:
                    return 32, mem[mem[64] + 32 len ceil32(_1095) + 32]
                mem[mem[64] + _1095 + 64] = 0
                return memory
                  from mem[64]
                   len ceil32(_1095) + _1090 + -mem[64] + 64
            if var145001 >= mem[96]:
                revert with 0, 50
            _1097 = mem[mem[(32 * var145001) + 128] + 64]
            if mem[mem[(32 * var145001) + 128] + 160] > 2:
                revert with 0, 33
            mem[0] = mem[mem[(32 * var145001) + 128] + 160]
            mem[32] = 8
            s = 0
            while stor8[mem[mem[(32 * var145001) + 128] + 160]].field_0 > s:
                if s > !stor8[mem[mem[(32 * var145001) + 128] + 160]].field_0:
                    revert with 0, 17
                if mem[mem[(32 * var145001) + 128] + 160] > 2:
                    revert with 0, 33
                mem[32] = 8
                if s + stor8[mem[mem[(32 * var145001) + 128] + 160]].field_0 / 2 >= stor8[mem[mem[(32 * var145001) + 128] + 160]].field_0:
                    revert with 0, 50
                mem[0] = sha3(mem[mem[(32 * var145001) + 128] + 160], 8)
                if stor8[mem[mem[(32 * var145001) + 128] + 160]][Mask(255, 1, s + stor8[mem[mem[(32 * var145001) + 128] + 160]].field_0)].field_0 >= _1097:
                    s = s
                    continue 
                if 1 > !(s + stor8[mem[mem[(32 * var145001) + 128] + 160]].field_0 / 2):
                    revert with 0, 17
                s = (s + stor8[mem[mem[(32 * var145001) + 128] + 160]].field_0 / 2) + 1
                continue 
            _1243 = mem[mem[(32 * var145001) + 128] + 64]
            _1247 = mem[mem[(32 * var145001) + 128] + 32]
            if mem[mem[(32 * var145001) + 128] + 160] > 2:
                revert with 0, 33
            s = 0
            while stor8[mem[mem[(32 * var145001) + 128] + 160]].field_0 > s:
                if s > !stor8[mem[mem[(32 * var145001) + 128] + 160]].field_0:
                    revert with 0, 17
                if mem[mem[(32 * var145001) + 128] + 160] > 2:
                    revert with 0, 33
                mem[32] = 8
                if s + stor8[mem[mem[(32 * var145001) + 128] + 160]].field_0 / 2 >= stor8[mem[mem[(32 * var145001) + 128] + 160]].field_0:
                    revert with 0, 50
                mem[0] = sha3(mem[mem[(32 * var145001) + 128] + 160], 8)
                if stor8[mem[mem[(32 * var145001) + 128] + 160]][Mask(255, 1, s + stor8[mem[mem[(32 * var145001) + 128] + 160]].field_0)].field_0 >= _1247:
                    s = s
                    continue 
                if 1 > !(s + stor8[mem[mem[(32 * var145001) + 128] + 160]].field_0 / 2):
                    revert with 0, 17
                s = (s + stor8[mem[mem[(32 * var145001) + 128] + 160]].field_0 / 2) + 1
                continue 
            if mem[mem[(32 * var145001) + 128] + 160] > 2:
                revert with 0, 33
            mem[0] = mem[mem[(32 * var145001) + 128] + 160]
            mem[32] = 8
            t = 0
            while stor8[mem[mem[(32 * var145001) + 128] + 160]].field_0 > t:
                if t > !stor8[mem[mem[(32 * var145001) + 128] + 160]].field_0:
                    revert with 0, 17
                if mem[mem[(32 * var145001) + 128] + 160] > 2:
                    revert with 0, 33
                mem[32] = 8
                if t + stor8[mem[mem[(32 * var145001) + 128] + 160]].field_0 / 2 >= stor8[mem[mem[(32 * var145001) + 128] + 160]].field_0:
                    revert with 0, 50
                mem[0] = sha3(mem[mem[(32 * var145001) + 128] + 160], 8)
                if stor8[mem[mem[(32 * var145001) + 128] + 160]][Mask(255, 1, t + stor8[mem[mem[(32 * var145001) + 128] + 160]].field_0)].field_0 >= _1243:
                    t = t
                    continue 
                if 1 > !(t + stor8[mem[mem[(32 * var145001) + 128] + 160]].field_0 / 2):
                    revert with 0, 17
                t = (t + stor8[mem[mem[(32 * var145001) + 128] + 160]].field_0 / 2) + 1
                continue 
            u = s
            v = mem[mem[(32 * var145001) + 128] + 96]
            while u < t:
                if mem[mem[(32 * var145001) + 128] + 160] > 2:
                    revert with 0, 33
                mem[32] = 8
                if u >= stor8[mem[mem[(32 * var145001) + 128] + 160]].field_0:
                    revert with 0, 50
                mem[0] = sha3(mem[mem[(32 * var145001) + 128] + 160], 8)
                if 100 * 10^6 < stor8[mem[mem[(32 * var145001) + 128] + 160]][u].field_256 - 0x8000000000000000000000000000000000000000000000000000000000000000 and stor8[mem[mem[(32 * var145001) + 128] + 160]][u].field_256 >= 0:
                    revert with 0, 17
                if stor8[mem[mem[(32 * var145001) + 128] + 160]][u].field_256 < 0 and 100 * 10^6 > stor8[mem[mem[(32 * var145001) + 128] + 160]][u].field_256 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                    revert with 0, 17
                if v and -stor8[mem[mem[(32 * var145001) + 128] + 160]][u].field_256 + 100 * 10^6 > -1 / v:
                    revert with 0, 17
                if u == -1:
                    revert with 0, 17
                u = u + 1
                v = (100 * 10^6 * v) - (stor8[mem[mem[(32 * var145001) + 128] + 160]][u].field_256 * v) / 100 * 10^6
                continue 
            if _1243 < _1247:
                revert with 0, 17
            if not sub_9b28d1a7:
                revert with 0, 18
            idx = _1243 - _1247 / sub_9b28d1a7
            s = v
            while idx:
                if not idx:
                    revert with 0, 17
                if 100 * 10^6 < sub_93520a80 - 0x8000000000000000000000000000000000000000000000000000000000000000 and sub_93520a80 >= 0:
                    revert with 0, 17
                if sub_93520a80 < 0 and 100 * 10^6 > sub_93520a80 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                    revert with 0, 17
                if s and -sub_93520a80 + 100 * 10^6 > -1 / s:
                    revert with 0, 17
                idx = idx - 1
                s = (100 * 10^6 * s) - (sub_93520a80 * s) / 100 * 10^6
                continue 
            _1700 = mem[mem[(32 * var145001) + 128] + 32]
            if mem[mem[(32 * var145001) + 128] + 160] > 2:
                revert with 0, 33
            s = var198001
            t = var198002
            t = var198004
            t = var198005
            t = var198006
            u = var198007
            u = var198008
            v = var198009
            while s < stor8[mem[mem[(32 * var145001) + 128] + 160]].field_0:
                if mem[mem[(32 * var145001) + 128] + 160] > 2:
                    revert with 0, 33
                if s >= stor8[mem[mem[(32 * var145001) + 128] + 160]].field_0:
                    revert with 0, 50
                if u < _1700:
                    revert with 0, 17
                if not sub_9b28d1a7:
                    revert with 0, 18
                if stor8[mem[mem[(32 * var145001) + 128] + 160]][s].field_0 < _1700:
                    revert with 0, 17
                if not sub_9b28d1a7:
                    revert with 0, 18
                if stor8[mem[mem[(32 * var145001) + 128] + 160]][s].field_0 - _1700 / sub_9b28d1a7 == u - _1700 / sub_9b28d1a7:
                    if stor8[mem[mem[(32 * var145001) + 128] + 160]][s].field_0 < u:
                        revert with 0, 17
                    if mem[mem[(32 * var145001) + 128] + 128] and v > -1 / mem[mem[(32 * var145001) + 128] + 128]:
                        revert with 0, 17
                    if mem[mem[(32 * var145001) + 128] + 128] * v / 100 * 10^6 and stor8[mem[mem[(32 * var145001) + 128] + 160]][s].field_0 - u > -1 / mem[mem[(32 * var145001) + 128] + 128] * v / 100 * 10^6:
                        revert with 0, 17
                    if t > !((stor8[mem[mem[(32 * var145001) + 128] + 160]][s].field_0 * mem[mem[(32 * var145001) + 128] + 128] * v / 100 * 10^6) - (u * mem[mem[(32 * var145001) + 128] + 128] * v / 100 * 10^6) / 8760 * 24 * 3600):
                        revert with 0, 17
                    if stor8[mem[mem[(32 * var145001) + 128] + 160]][s].field_0 - _1700 / sub_9b28d1a7 != u - _1700 / sub_9b28d1a7:
                        if 100 * 10^6 < sub_93520a80 - 0x8000000000000000000000000000000000000000000000000000000000000000 and sub_93520a80 >= 0:
                            revert with 0, 17
                        if sub_93520a80 < 0 and 100 * 10^6 > sub_93520a80 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                            revert with 0, 17
                        if v and -sub_93520a80 + 100 * 10^6 > -1 / v:
                            revert with 0, 17
                        if not s:
                            revert with 0, 17
                        if s - 1 == -1:
                            revert with 0, 17
                        if mem[mem[(32 * var145001) + 128] + 160] > 2:
                            revert with 0, 33
                        mem[0] = mem[mem[(32 * var145001) + 128] + 160]
                        mem[32] = 8
                        s = s
                        t = stor8[mem[mem[(32 * var145001) + 128] + 160]][s].field_0 - _1700 / sub_9b28d1a7 != u - _1700 / sub_9b28d1a7
                        t = (stor8[mem[mem[(32 * var145001) + 128] + 160]][s].field_0 * mem[mem[(32 * var145001) + 128] + 128] * v / 100 * 10^6) - (u * mem[mem[(32 * var145001) + 128] + 128] * v / 100 * 10^6) / 8760 * 24 * 3600
                        t = stor8[mem[mem[(32 * var145001) + 128] + 160]][s].field_0 - u
                        t = t + ((stor8[mem[mem[(32 * var145001) + 128] + 160]][s].field_0 * mem[mem[(32 * var145001) + 128] + 128] * v / 100 * 10^6) - (u * mem[mem[(32 * var145001) + 128] + 128] * v / 100 * 10^6) / 8760 * 24 * 3600)
                        u = stor8[mem[mem[(32 * var145001) + 128] + 160]][s].field_0
                        u = stor8[mem[mem[(32 * var145001) + 128] + 160]][s].field_0
                        v = (100 * 10^6 * v) - (sub_93520a80 * v) / 100 * 10^6
                        continue 
                    if mem[mem[(32 * var145001) + 128] + 160] > 2:
                        revert with 0, 33
                    if s >= stor8[mem[mem[(32 * var145001) + 128] + 160]].field_0:
                        revert with 0, 50
                    if 100 * 10^6 < stor8[mem[mem[(32 * var145001) + 128] + 160]][s].field_256 - 0x8000000000000000000000000000000000000000000000000000000000000000 and stor8[mem[mem[(32 * var145001) + 128] + 160]][s].field_256 >= 0:
                        revert with 0, 17
                    if stor8[mem[mem[(32 * var145001) + 128] + 160]][s].field_256 < 0 and 100 * 10^6 > stor8[mem[mem[(32 * var145001) + 128] + 160]][s].field_256 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                        revert with 0, 17
                    if v and -stor8[mem[mem[(32 * var145001) + 128] + 160]][s].field_256 + 100 * 10^6 > -1 / v:
                        revert with 0, 17
                    if s == -1:
                        revert with 0, 17
                    if mem[mem[(32 * var145001) + 128] + 160] > 2:
                        revert with 0, 33
                    mem[0] = mem[mem[(32 * var145001) + 128] + 160]
                    mem[32] = 8
                    s = s + 1
                    t = stor8[mem[mem[(32 * var145001) + 128] + 160]][s].field_0 - _1700 / sub_9b28d1a7 != u - _1700 / sub_9b28d1a7
                    t = (stor8[mem[mem[(32 * var145001) + 128] + 160]][s].field_0 * mem[mem[(32 * var145001) + 128] + 128] * v / 100 * 10^6) - (u * mem[mem[(32 * var145001) + 128] + 128] * v / 100 * 10^6) / 8760 * 24 * 3600
                    t = stor8[mem[mem[(32 * var145001) + 128] + 160]][s].field_0 - u
                    t = t + ((stor8[mem[mem[(32 * var145001) + 128] + 160]][s].field_0 * mem[mem[(32 * var145001) + 128] + 128] * v / 100 * 10^6) - (u * mem[mem[(32 * var145001) + 128] + 128] * v / 100 * 10^6) / 8760 * 24 * 3600)
                    u = stor8[mem[mem[(32 * var145001) + 128] + 160]][s].field_0
                    u = stor8[mem[mem[(32 * var145001) + 128] + 160]][s].field_0
                    v = (100 * 10^6 * v) - (stor8[mem[mem[(32 * var145001) + 128] + 160]][s].field_256 * v) / 100 * 10^6
                    continue 
                if u < _1700:
                    revert with 0, 17
                if not sub_9b28d1a7:
                    revert with 0, 18
                if 1 > !(u - _1700 / sub_9b28d1a7):
                    revert with 0, 17
                if sub_9b28d1a7 and (u - _1700 / sub_9b28d1a7) + 1 > -1 / sub_9b28d1a7:
                    revert with 0, 17
                if _1700 > !(sub_9b28d1a7 + (u - _1700 / sub_9b28d1a7 * sub_9b28d1a7)):
                    revert with 0, 17
                if _1700 + sub_9b28d1a7 + (u - _1700 / sub_9b28d1a7 * sub_9b28d1a7) < u:
                    revert with 0, 17
                if mem[mem[(32 * var145001) + 128] + 128] and v > -1 / mem[mem[(32 * var145001) + 128] + 128]:
                    revert with 0, 17
                if mem[mem[(32 * var145001) + 128] + 128] * v / 100 * 10^6 and _1700 + sub_9b28d1a7 + (u - _1700 / sub_9b28d1a7 * sub_9b28d1a7) - u > -1 / mem[mem[(32 * var145001) + 128] + 128] * v / 100 * 10^6:
                    revert with 0, 17
                if t > !((_1700 * mem[mem[(32 * var145001) + 128] + 128] * v / 100 * 10^6) + (sub_9b28d1a7 * mem[mem[(32 * var145001) + 128] + 128] * v / 100 * 10^6) + (u - _1700 / sub_9b28d1a7 * sub_9b28d1a7 * mem[mem[(32 * var145001) + 128] + 128] * v / 100 * 10^6) - (u * mem[mem[(32 * var145001) + 128] + 128] * v / 100 * 10^6) / 8760 * 24 * 3600):
                    revert with 0, 17
                if stor8[mem[mem[(32 * var145001) + 128] + 160]][s].field_0 - _1700 / sub_9b28d1a7 != u - _1700 / sub_9b28d1a7:
                    if 100 * 10^6 < sub_93520a80 - 0x8000000000000000000000000000000000000000000000000000000000000000 and sub_93520a80 >= 0:
                        revert with 0, 17
                    if sub_93520a80 < 0 and 100 * 10^6 > sub_93520a80 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                        revert with 0, 17
                    if v and -sub_93520a80 + 100 * 10^6 > -1 / v:
                        revert with 0, 17
                    if not s:
                        revert with 0, 17
                    if s - 1 == -1:
                        revert with 0, 17
                    if mem[mem[(32 * var145001) + 128] + 160] > 2:
                        revert with 0, 33
                    mem[0] = mem[mem[(32 * var145001) + 128] + 160]
                    mem[32] = 8
                    s = s
                    t = stor8[mem[mem[(32 * var145001) + 128] + 160]][s].field_0 - _1700 / sub_9b28d1a7 != u - _1700 / sub_9b28d1a7
                    t = (_1700 * mem[mem[(32 * var145001) + 128] + 128] * v / 100 * 10^6) + (sub_9b28d1a7 * mem[mem[(32 * var145001) + 128] + 128] * v / 100 * 10^6) + (u - _1700 / sub_9b28d1a7 * sub_9b28d1a7 * mem[mem[(32 * var145001) + 128] + 128] * v / 100 * 10^6) - (u * mem[mem[(32 * var145001) + 128] + 128] * v / 100 * 10^6) / 8760 * 24 * 3600
                    t = _1700 + sub_9b28d1a7 + (u - _1700 / sub_9b28d1a7 * sub_9b28d1a7) - u
                    t = t + ((_1700 * mem[mem[(32 * var145001) + 128] + 128] * v / 100 * 10^6) + (sub_9b28d1a7 * mem[mem[(32 * var145001) + 128] + 128] * v / 100 * 10^6) + (u - _1700 / sub_9b28d1a7 * sub_9b28d1a7 * mem[mem[(32 * var145001) + 128] + 128] * v / 100 * 10^6) - (u * mem[mem[(32 * var145001) + 128] + 128] * v / 100 * 10^6) / 8760 * 24 * 3600)
                    u = _1700 + sub_9b28d1a7 + (u - _1700 / sub_9b28d1a7 * sub_9b28d1a7)
                    u = _1700 + sub_9b28d1a7 + (u - _1700 / sub_9b28d1a7 * sub_9b28d1a7)
                    v = (100 * 10^6 * v) - (sub_93520a80 * v) / 100 * 10^6
                    continue 
                if mem[mem[(32 * var145001) + 128] + 160] > 2:
                    revert with 0, 33
                if s >= stor8[mem[mem[(32 * var145001) + 128] + 160]].field_0:
                    revert with 0, 50
                if 100 * 10^6 < stor8[mem[mem[(32 * var145001) + 128] + 160]][s].field_256 - 0x8000000000000000000000000000000000000000000000000000000000000000 and stor8[mem[mem[(32 * var145001) + 128] + 160]][s].field_256 >= 0:
                    revert with 0, 17
                if stor8[mem[mem[(32 * var145001) + 128] + 160]][s].field_256 < 0 and 100 * 10^6 > stor8[mem[mem[(32 * var145001) + 128] + 160]][s].field_256 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                    revert with 0, 17
                if v and -stor8[mem[mem[(32 * var145001) + 128] + 160]][s].field_256 + 100 * 10^6 > -1 / v:
                    revert with 0, 17
                if s == -1:
                    revert with 0, 17
                if mem[mem[(32 * var145001) + 128] + 160] > 2:
                    revert with 0, 33
                mem[0] = mem[mem[(32 * var145001) + 128] + 160]
                mem[32] = 8
                s = s + 1
                t = stor8[mem[mem[(32 * var145001) + 128] + 160]][s].field_0 - _1700 / sub_9b28d1a7 != u - _1700 / sub_9b28d1a7
                t = (_1700 * mem[mem[(32 * var145001) + 128] + 128] * v / 100 * 10^6) + (sub_9b28d1a7 * mem[mem[(32 * var145001) + 128] + 128] * v / 100 * 10^6) + (u - _1700 / sub_9b28d1a7 * sub_9b28d1a7 * mem[mem[(32 * var145001) + 128] + 128] * v / 100 * 10^6) - (u * mem[mem[(32 * var145001) + 128] + 128] * v / 100 * 10^6) / 8760 * 24 * 3600
                t = _1700 + sub_9b28d1a7 + (u - _1700 / sub_9b28d1a7 * sub_9b28d1a7) - u
                t = t + ((_1700 * mem[mem[(32 * var145001) + 128] + 128] * v / 100 * 10^6) + (sub_9b28d1a7 * mem[mem[(32 * var145001) + 128] + 128] * v / 100 * 10^6) + (u - _1700 / sub_9b28d1a7 * sub_9b28d1a7 * mem[mem[(32 * var145001) + 128] + 128] * v / 100 * 10^6) - (u * mem[mem[(32 * var145001) + 128] + 128] * v / 100 * 10^6) / 8760 * 24 * 3600)
                u = _1700 + sub_9b28d1a7 + (u - _1700 / sub_9b28d1a7 * sub_9b28d1a7)
                u = _1700 + sub_9b28d1a7 + (u - _1700 / sub_9b28d1a7 * sub_9b28d1a7)
                v = (100 * 10^6 * v) - (stor8[mem[mem[(32 * var145001) + 128] + 160]][s].field_256 * v) / 100 * 10^6
                continue 
            # nil
    else:
        _690 = mem[64]
        mem[64] = mem[64] + 64
        mem[_690] = 1
        mem[_690 + 32] = 0x3000000000000000000000000000000000000000000000000000000000000000
        _691 = mem[64]
        mem[64] = mem[64] + 64
        mem[_691] = 1
        mem[_691 + 32] = 0x2300000000000000000000000000000000000000000000000000000000000000
        if var136001 >= _103:
            _750 = mem[64]
            mem[mem[64]] = 32
            _752 = mem[var136003]
            mem[mem[64] + 32] = mem[var136003]
            mem[mem[64] + 64 len ceil32(_752)] = mem[var136003 + 32 len ceil32(_752)]
            if ceil32(_752) <= _752:
                return 32, mem[mem[64] + 32 len ceil32(_752) + 32]
            mem[mem[64] + _752 + 64] = 0
            return memory
              from mem[64]
               len ceil32(_752) + _750 + -mem[64] + 64
        if var136001 >= mem[96]:
            revert with 0, 50
        _754 = mem[mem[(32 * var136001) + 128] + 64]
        if mem[mem[(32 * var136001) + 128] + 160] > 2:
            revert with 0, 33
        mem[0] = mem[mem[(32 * var136001) + 128] + 160]
        mem[32] = 8
        s = 0
        while stor8[mem[mem[(32 * var136001) + 128] + 160]].field_0 > s:
            if s > !stor8[mem[mem[(32 * var136001) + 128] + 160]].field_0:
                revert with 0, 17
            if mem[mem[(32 * var136001) + 128] + 160] > 2:
                revert with 0, 33
            mem[32] = 8
            if s + stor8[mem[mem[(32 * var136001) + 128] + 160]].field_0 / 2 >= stor8[mem[mem[(32 * var136001) + 128] + 160]].field_0:
                revert with 0, 50
            mem[0] = sha3(mem[mem[(32 * var136001) + 128] + 160], 8)
            if stor8[mem[mem[(32 * var136001) + 128] + 160]][Mask(255, 1, s + stor8[mem[mem[(32 * var136001) + 128] + 160]].field_0)].field_0 >= _754:
                s = s
                continue 
            if 1 > !(s + stor8[mem[mem[(32 * var136001) + 128] + 160]].field_0 / 2):
                revert with 0, 17
            s = (s + stor8[mem[mem[(32 * var136001) + 128] + 160]].field_0 / 2) + 1
            continue 
        _925 = mem[mem[(32 * var136001) + 128] + 64]
        _926 = mem[mem[(32 * var136001) + 128] + 32]
        if mem[mem[(32 * var136001) + 128] + 160] > 2:
            revert with 0, 33
        s = 0
        while stor8[mem[mem[(32 * var136001) + 128] + 160]].field_0 > s:
            if s > !stor8[mem[mem[(32 * var136001) + 128] + 160]].field_0:
                revert with 0, 17
            if mem[mem[(32 * var136001) + 128] + 160] > 2:
                revert with 0, 33
            mem[32] = 8
            if s + stor8[mem[mem[(32 * var136001) + 128] + 160]].field_0 / 2 >= stor8[mem[mem[(32 * var136001) + 128] + 160]].field_0:
                revert with 0, 50
            mem[0] = sha3(mem[mem[(32 * var136001) + 128] + 160], 8)
            if stor8[mem[mem[(32 * var136001) + 128] + 160]][Mask(255, 1, s + stor8[mem[mem[(32 * var136001) + 128] + 160]].field_0)].field_0 >= _926:
                s = s
                continue 
            if 1 > !(s + stor8[mem[mem[(32 * var136001) + 128] + 160]].field_0 / 2):
                revert with 0, 17
            s = (s + stor8[mem[mem[(32 * var136001) + 128] + 160]].field_0 / 2) + 1
            continue 
        if mem[mem[(32 * var136001) + 128] + 160] > 2:
            revert with 0, 33
        mem[0] = mem[mem[(32 * var136001) + 128] + 160]
        mem[32] = 8
        t = 0
        while stor8[mem[mem[(32 * var136001) + 128] + 160]].field_0 > t:
            if t > !stor8[mem[mem[(32 * var136001) + 128] + 160]].field_0:
                revert with 0, 17
            if mem[mem[(32 * var136001) + 128] + 160] > 2:
                revert with 0, 33
            mem[32] = 8
            if t + stor8[mem[mem[(32 * var136001) + 128] + 160]].field_0 / 2 >= stor8[mem[mem[(32 * var136001) + 128] + 160]].field_0:
                revert with 0, 50
            mem[0] = sha3(mem[mem[(32 * var136001) + 128] + 160], 8)
            if stor8[mem[mem[(32 * var136001) + 128] + 160]][Mask(255, 1, t + stor8[mem[mem[(32 * var136001) + 128] + 160]].field_0)].field_0 >= _925:
                t = t
                continue 
            if 1 > !(t + stor8[mem[mem[(32 * var136001) + 128] + 160]].field_0 / 2):
                revert with 0, 17
            t = (t + stor8[mem[mem[(32 * var136001) + 128] + 160]].field_0 / 2) + 1
            continue 
        u = s
        v = mem[mem[(32 * var136001) + 128] + 96]
        while u < t:
            if mem[mem[(32 * var136001) + 128] + 160] > 2:
                revert with 0, 33
            mem[32] = 8
            if u >= stor8[mem[mem[(32 * var136001) + 128] + 160]].field_0:
                revert with 0, 50
            mem[0] = sha3(mem[mem[(32 * var136001) + 128] + 160], 8)
            if 100 * 10^6 < stor8[mem[mem[(32 * var136001) + 128] + 160]][u].field_256 - 0x8000000000000000000000000000000000000000000000000000000000000000 and stor8[mem[mem[(32 * var136001) + 128] + 160]][u].field_256 >= 0:
                revert with 0, 17
            if stor8[mem[mem[(32 * var136001) + 128] + 160]][u].field_256 < 0 and 100 * 10^6 > stor8[mem[mem[(32 * var136001) + 128] + 160]][u].field_256 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                revert with 0, 17
            if v and -stor8[mem[mem[(32 * var136001) + 128] + 160]][u].field_256 + 100 * 10^6 > -1 / v:
                revert with 0, 17
            if u == -1:
                revert with 0, 17
            u = u + 1
            v = (100 * 10^6 * v) - (stor8[mem[mem[(32 * var136001) + 128] + 160]][u].field_256 * v) / 100 * 10^6
            continue 
        if _925 < _926:
            revert with 0, 17
        if not sub_9b28d1a7:
            revert with 0, 18
        idx = _925 - _926 / sub_9b28d1a7
        s = v
        while idx:
            if not idx:
                revert with 0, 17
            if 100 * 10^6 < sub_93520a80 - 0x8000000000000000000000000000000000000000000000000000000000000000 and sub_93520a80 >= 0:
                revert with 0, 17
            if sub_93520a80 < 0 and 100 * 10^6 > sub_93520a80 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                revert with 0, 17
            if s and -sub_93520a80 + 100 * 10^6 > -1 / s:
                revert with 0, 17
            idx = idx - 1
            s = (100 * 10^6 * s) - (sub_93520a80 * s) / 100 * 10^6
            continue 
        _1489 = mem[mem[(32 * var136001) + 128] + 32]
        if mem[mem[(32 * var136001) + 128] + 160] > 2:
            revert with 0, 33
        mem[0] = mem[mem[(32 * var136001) + 128] + 160]
        mem[32] = 8
        s = var189001
        t = var189002
        u = var189004
        v = var189005
        w = var189006
        x = var189007
        y = var189008
        a = var189009
        while s < stor8[mem[mem[(32 * var136001) + 128] + 160]].field_0:
            if mem[mem[(32 * var136001) + 128] + 160] > 2:
                revert with 0, 33
            if s >= stor8[mem[mem[(32 * var136001) + 128] + 160]].field_0:
                revert with 0, 50
            if y < _1489:
                revert with 0, 17
            if not sub_9b28d1a7:
                revert with 0, 18
            if stor8[mem[mem[(32 * var136001) + 128] + 160]][s].field_0 < _1489:
                revert with 0, 17
            if not sub_9b28d1a7:
                revert with 0, 18
            if stor8[mem[mem[(32 * var136001) + 128] + 160]][s].field_0 - _1489 / sub_9b28d1a7 == y - _1489 / sub_9b28d1a7:
                if stor8[mem[mem[(32 * var136001) + 128] + 160]][s].field_0 < y:
                    revert with 0, 17
                if mem[mem[(32 * var136001) + 128] + 128] and a > -1 / mem[mem[(32 * var136001) + 128] + 128]:
                    revert with 0, 17
                if mem[mem[(32 * var136001) + 128] + 128] * a / 100 * 10^6 and stor8[mem[mem[(32 * var136001) + 128] + 160]][s].field_0 - y > -1 / mem[mem[(32 * var136001) + 128] + 128] * a / 100 * 10^6:
                    revert with 0, 17
                if w > !((stor8[mem[mem[(32 * var136001) + 128] + 160]][s].field_0 * mem[mem[(32 * var136001) + 128] + 128] * a / 100 * 10^6) - (y * mem[mem[(32 * var136001) + 128] + 128] * a / 100 * 10^6) / 8760 * 24 * 3600):
                    revert with 0, 17
                if stor8[mem[mem[(32 * var136001) + 128] + 160]][s].field_0 - _1489 / sub_9b28d1a7 != y - _1489 / sub_9b28d1a7:
                    if 100 * 10^6 < sub_93520a80 - 0x8000000000000000000000000000000000000000000000000000000000000000 and sub_93520a80 >= 0:
                        revert with 0, 17
                    if sub_93520a80 < 0 and 100 * 10^6 > sub_93520a80 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                        revert with 0, 17
                    if a and -sub_93520a80 + 100 * 10^6 > -1 / a:
                        revert with 0, 17
                    if not s:
                        revert with 0, 17
                    if s - 1 == -1:
                        revert with 0, 17
                    if mem[mem[(32 * var136001) + 128] + 160] > 2:
                        revert with 0, 33
                    mem[0] = mem[mem[(32 * var136001) + 128] + 160]
                    mem[32] = 8
                    s = s
                    t = stor8[mem[mem[(32 * var136001) + 128] + 160]][s].field_0 - _1489 / sub_9b28d1a7 != y - _1489 / sub_9b28d1a7
                    u = (stor8[mem[mem[(32 * var136001) + 128] + 160]][s].field_0 * mem[mem[(32 * var136001) + 128] + 128] * a / 100 * 10^6) - (y * mem[mem[(32 * var136001) + 128] + 128] * a / 100 * 10^6) / 8760 * 24 * 3600
                    v = stor8[mem[mem[(32 * var136001) + 128] + 160]][s].field_0 - y
                    w = w + ((stor8[mem[mem[(32 * var136001) + 128] + 160]][s].field_0 * mem[mem[(32 * var136001) + 128] + 128] * a / 100 * 10^6) - (y * mem[mem[(32 * var136001) + 128] + 128] * a / 100 * 10^6) / 8760 * 24 * 3600)
                    x = stor8[mem[mem[(32 * var136001) + 128] + 160]][s].field_0
                    y = stor8[mem[mem[(32 * var136001) + 128] + 160]][s].field_0
                    a = (100 * 10^6 * a) - (sub_93520a80 * a) / 100 * 10^6
                    continue 
                if mem[mem[(32 * var136001) + 128] + 160] > 2:
                    revert with 0, 33
                if s >= stor8[mem[mem[(32 * var136001) + 128] + 160]].field_0:
                    revert with 0, 50
                if 100 * 10^6 < stor8[mem[mem[(32 * var136001) + 128] + 160]][s].field_256 - 0x8000000000000000000000000000000000000000000000000000000000000000 and stor8[mem[mem[(32 * var136001) + 128] + 160]][s].field_256 >= 0:
                    revert with 0, 17
                if stor8[mem[mem[(32 * var136001) + 128] + 160]][s].field_256 < 0 and 100 * 10^6 > stor8[mem[mem[(32 * var136001) + 128] + 160]][s].field_256 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                    revert with 0, 17
                if a and -stor8[mem[mem[(32 * var136001) + 128] + 160]][s].field_256 + 100 * 10^6 > -1 / a:
                    revert with 0, 17
                if s == -1:
                    revert with 0, 17
                if mem[mem[(32 * var136001) + 128] + 160] > 2:
                    revert with 0, 33
                mem[0] = mem[mem[(32 * var136001) + 128] + 160]
                mem[32] = 8
                s = s + 1
                t = stor8[mem[mem[(32 * var136001) + 128] + 160]][s].field_0 - _1489 / sub_9b28d1a7 != y - _1489 / sub_9b28d1a7
                u = (stor8[mem[mem[(32 * var136001) + 128] + 160]][s].field_0 * mem[mem[(32 * var136001) + 128] + 128] * a / 100 * 10^6) - (y * mem[mem[(32 * var136001) + 128] + 128] * a / 100 * 10^6) / 8760 * 24 * 3600
                v = stor8[mem[mem[(32 * var136001) + 128] + 160]][s].field_0 - y
                w = w + ((stor8[mem[mem[(32 * var136001) + 128] + 160]][s].field_0 * mem[mem[(32 * var136001) + 128] + 128] * a / 100 * 10^6) - (y * mem[mem[(32 * var136001) + 128] + 128] * a / 100 * 10^6) / 8760 * 24 * 3600)
                x = stor8[mem[mem[(32 * var136001) + 128] + 160]][s].field_0
                y = stor8[mem[mem[(32 * var136001) + 128] + 160]][s].field_0
                a = (100 * 10^6 * a) - (stor8[mem[mem[(32 * var136001) + 128] + 160]][s].field_256 * a) / 100 * 10^6
                continue 
            if y < _1489:
                revert with 0, 17
            if not sub_9b28d1a7:
                revert with 0, 18
            if 1 > !(y - _1489 / sub_9b28d1a7):
                revert with 0, 17
            if sub_9b28d1a7 and (y - _1489 / sub_9b28d1a7) + 1 > -1 / sub_9b28d1a7:
                revert with 0, 17
            if _1489 > !(sub_9b28d1a7 + (y - _1489 / sub_9b28d1a7 * sub_9b28d1a7)):
                revert with 0, 17
            if _1489 + sub_9b28d1a7 + (y - _1489 / sub_9b28d1a7 * sub_9b28d1a7) < y:
                revert with 0, 17
            if mem[mem[(32 * var136001) + 128] + 128] and a > -1 / mem[mem[(32 * var136001) + 128] + 128]:
                revert with 0, 17
            if mem[mem[(32 * var136001) + 128] + 128] * a / 100 * 10^6 and _1489 + sub_9b28d1a7 + (y - _1489 / sub_9b28d1a7 * sub_9b28d1a7) - y > -1 / mem[mem[(32 * var136001) + 128] + 128] * a / 100 * 10^6:
                revert with 0, 17
            if w > !((_1489 * mem[mem[(32 * var136001) + 128] + 128] * a / 100 * 10^6) + (sub_9b28d1a7 * mem[mem[(32 * var136001) + 128] + 128] * a / 100 * 10^6) + (y - _1489 / sub_9b28d1a7 * sub_9b28d1a7 * mem[mem[(32 * var136001) + 128] + 128] * a / 100 * 10^6) - (y * mem[mem[(32 * var136001) + 128] + 128] * a / 100 * 10^6) / 8760 * 24 * 3600):
                revert with 0, 17
            if stor8[mem[mem[(32 * var136001) + 128] + 160]][s].field_0 - _1489 / sub_9b28d1a7 != y - _1489 / sub_9b28d1a7:
                if 100 * 10^6 < sub_93520a80 - 0x8000000000000000000000000000000000000000000000000000000000000000 and sub_93520a80 >= 0:
                    revert with 0, 17
                if sub_93520a80 < 0 and 100 * 10^6 > sub_93520a80 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                    revert with 0, 17
                if a and -sub_93520a80 + 100 * 10^6 > -1 / a:
                    revert with 0, 17
                if not s:
                    revert with 0, 17
                if s - 1 == -1:
                    revert with 0, 17
                if mem[mem[(32 * var136001) + 128] + 160] > 2:
                    revert with 0, 33
                mem[0] = mem[mem[(32 * var136001) + 128] + 160]
                mem[32] = 8
                s = s
                t = stor8[mem[mem[(32 * var136001) + 128] + 160]][s].field_0 - _1489 / sub_9b28d1a7 != y - _1489 / sub_9b28d1a7
                u = (_1489 * mem[mem[(32 * var136001) + 128] + 128] * a / 100 * 10^6) + (sub_9b28d1a7 * mem[mem[(32 * var136001) + 128] + 128] * a / 100 * 10^6) + (y - _1489 / sub_9b28d1a7 * sub_9b28d1a7 * mem[mem[(32 * var136001) + 128] + 128] * a / 100 * 10^6) - (y * mem[mem[(32 * var136001) + 128] + 128] * a / 100 * 10^6) / 8760 * 24 * 3600
                v = _1489 + sub_9b28d1a7 + (y - _1489 / sub_9b28d1a7 * sub_9b28d1a7) - y
                w = w + ((_1489 * mem[mem[(32 * var136001) + 128] + 128] * a / 100 * 10^6) + (sub_9b28d1a7 * mem[mem[(32 * var136001) + 128] + 128] * a / 100 * 10^6) + (y - _1489 / sub_9b28d1a7 * sub_9b28d1a7 * mem[mem[(32 * var136001) + 128] + 128] * a / 100 * 10^6) - (y * mem[mem[(32 * var136001) + 128] + 128] * a / 100 * 10^6) / 8760 * 24 * 3600)
                x = _1489 + sub_9b28d1a7 + (y - _1489 / sub_9b28d1a7 * sub_9b28d1a7)
                y = _1489 + sub_9b28d1a7 + (y - _1489 / sub_9b28d1a7 * sub_9b28d1a7)
                a = (100 * 10^6 * a) - (sub_93520a80 * a) / 100 * 10^6
                continue 
            if mem[mem[(32 * var136001) + 128] + 160] > 2:
                revert with 0, 33
            if s >= stor8[mem[mem[(32 * var136001) + 128] + 160]].field_0:
                revert with 0, 50
            if 100 * 10^6 < stor8[mem[mem[(32 * var136001) + 128] + 160]][s].field_256 - 0x8000000000000000000000000000000000000000000000000000000000000000 and stor8[mem[mem[(32 * var136001) + 128] + 160]][s].field_256 >= 0:
                revert with 0, 17
            if stor8[mem[mem[(32 * var136001) + 128] + 160]][s].field_256 < 0 and 100 * 10^6 > stor8[mem[mem[(32 * var136001) + 128] + 160]][s].field_256 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                revert with 0, 17
            if a and -stor8[mem[mem[(32 * var136001) + 128] + 160]][s].field_256 + 100 * 10^6 > -1 / a:
                revert with 0, 17
            if s == -1:
                revert with 0, 17
            if mem[mem[(32 * var136001) + 128] + 160] > 2:
                revert with 0, 33
            mem[0] = mem[mem[(32 * var136001) + 128] + 160]
            mem[32] = 8
            s = s + 1
            t = stor8[mem[mem[(32 * var136001) + 128] + 160]][s].field_0 - _1489 / sub_9b28d1a7 != y - _1489 / sub_9b28d1a7
            u = (_1489 * mem[mem[(32 * var136001) + 128] + 128] * a / 100 * 10^6) + (sub_9b28d1a7 * mem[mem[(32 * var136001) + 128] + 128] * a / 100 * 10^6) + (y - _1489 / sub_9b28d1a7 * sub_9b28d1a7 * mem[mem[(32 * var136001) + 128] + 128] * a / 100 * 10^6) - (y * mem[mem[(32 * var136001) + 128] + 128] * a / 100 * 10^6) / 8760 * 24 * 3600
            v = _1489 + sub_9b28d1a7 + (y - _1489 / sub_9b28d1a7 * sub_9b28d1a7) - y
            w = w + ((_1489 * mem[mem[(32 * var136001) + 128] + 128] * a / 100 * 10^6) + (sub_9b28d1a7 * mem[mem[(32 * var136001) + 128] + 128] * a / 100 * 10^6) + (y - _1489 / sub_9b28d1a7 * sub_9b28d1a7 * mem[mem[(32 * var136001) + 128] + 128] * a / 100 * 10^6) - (y * mem[mem[(32 * var136001) + 128] + 128] * a / 100 * 10^6) / 8760 * 24 * 3600)
            x = _1489 + sub_9b28d1a7 + (y - _1489 / sub_9b28d1a7 * sub_9b28d1a7)
            y = _1489 + sub_9b28d1a7 + (y - _1489 / sub_9b28d1a7 * sub_9b28d1a7)
            a = (100 * 10^6 * a) - (stor8[mem[mem[(32 * var136001) + 128] + 160]][s].field_256 * a) / 100 * 10^6
            continue 
        s = t
        s = u
        s = v
        s = w
        b = x
        idx = y
        b = a
        while idx != block.timestamp:
            if idx < _1489:
                revert with 0, 17
            if not sub_9b28d1a7:
                revert with 0, 18
            if block.timestamp < _1489:
                revert with 0, 17
            if not sub_9b28d1a7:
                revert with 0, 18
            if block.timestamp - _1489 / sub_9b28d1a7 == idx - _1489 / sub_9b28d1a7:
                if block.timestamp < idx:
                    revert with 0, 17
                if mem[mem[(32 * var136001) + 128] + 128] and b > -1 / mem[mem[(32 * var136001) + 128] + 128]:
                    revert with 0, 17
                if mem[mem[(32 * var136001) + 128] + 128] * b / 100 * 10^6 and block.timestamp - idx > -1 / mem[mem[(32 * var136001) + 128] + 128] * b / 100 * 10^6:
                    revert with 0, 17
                if s > !((block.timestamp * mem[mem[(32 * var136001) + 128] + 128] * b / 100 * 10^6) - (idx * mem[mem[(32 * var136001) + 128] + 128] * b / 100 * 10^6) / 8760 * 24 * 3600):
                    revert with 0, 17
                if block.timestamp - _1489 / sub_9b28d1a7 == idx - _1489 / sub_9b28d1a7:
                    s = block.timestamp - _1489 / sub_9b28d1a7 != idx - _1489 / sub_9b28d1a7
                    s = (block.timestamp * mem[mem[(32 * var136001) + 128] + 128] * b / 100 * 10^6) - (idx * mem[mem[(32 * var136001) + 128] + 128] * b / 100 * 10^6) / 8760 * 24 * 3600
                    s = block.timestamp - idx
                    s = s + ((block.timestamp * mem[mem[(32 * var136001) + 128] + 128] * b / 100 * 10^6) - (idx * mem[mem[(32 * var136001) + 128] + 128] * b / 100 * 10^6) / 8760 * 24 * 3600)
                    b = block.timestamp
                    idx = block.timestamp
                    b = b
                    continue 
                if 100 * 10^6 < sub_93520a80 - 0x8000000000000000000000000000000000000000000000000000000000000000 and sub_93520a80 >= 0:
                    revert with 0, 17
                if sub_93520a80 < 0 and 100 * 10^6 > sub_93520a80 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                    revert with 0, 17
                if b and -sub_93520a80 + 100 * 10^6 > -1 / b:
                    revert with 0, 17
                s = block.timestamp - _1489 / sub_9b28d1a7 != idx - _1489 / sub_9b28d1a7
                s = (block.timestamp * mem[mem[(32 * var136001) + 128] + 128] * b / 100 * 10^6) - (idx * mem[mem[(32 * var136001) + 128] + 128] * b / 100 * 10^6) / 8760 * 24 * 3600
                s = block.timestamp - idx
                s = s + ((block.timestamp * mem[mem[(32 * var136001) + 128] + 128] * b / 100 * 10^6) - (idx * mem[mem[(32 * var136001) + 128] + 128] * b / 100 * 10^6) / 8760 * 24 * 3600)
                b = block.timestamp
                idx = block.timestamp
                b = (100 * 10^6 * b) - (sub_93520a80 * b) / 100 * 10^6
                continue 
            if idx < _1489:
                revert with 0, 17
            if not sub_9b28d1a7:
                revert with 0, 18
            if 1 > !(idx - _1489 / sub_9b28d1a7):
                revert with 0, 17
            if sub_9b28d1a7 and (idx - _1489 / sub_9b28d1a7) + 1 > -1 / sub_9b28d1a7:
                revert with 0, 17
            if _1489 > !(sub_9b28d1a7 + (idx - _1489 / sub_9b28d1a7 * sub_9b28d1a7)):
                revert with 0, 17
            if _1489 + sub_9b28d1a7 + (idx - _1489 / sub_9b28d1a7 * sub_9b28d1a7) < idx:
                revert with 0, 17
            if mem[mem[(32 * var136001) + 128] + 128] and b > -1 / mem[mem[(32 * var136001) + 128] + 128]:
                revert with 0, 17
            if mem[mem[(32 * var136001) + 128] + 128] * b / 100 * 10^6 and _1489 + sub_9b28d1a7 + (idx - _1489 / sub_9b28d1a7 * sub_9b28d1a7) - idx > -1 / mem[mem[(32 * var136001) + 128] + 128] * b / 100 * 10^6:
                revert with 0, 17
            if s > !((_1489 * mem[mem[(32 * var136001) + 128] + 128] * b / 100 * 10^6) + (sub_9b28d1a7 * mem[mem[(32 * var136001) + 128] + 128] * b / 100 * 10^6) + (idx - _1489 / sub_9b28d1a7 * sub_9b28d1a7 * mem[mem[(32 * var136001) + 128] + 128] * b / 100 * 10^6) - (idx * mem[mem[(32 * var136001) + 128] + 128] * b / 100 * 10^6) / 8760 * 24 * 3600):
                revert with 0, 17
            if block.timestamp - _1489 / sub_9b28d1a7 == idx - _1489 / sub_9b28d1a7:
                s = block.timestamp - _1489 / sub_9b28d1a7 != idx - _1489 / sub_9b28d1a7
                s = (_1489 * mem[mem[(32 * var136001) + 128] + 128] * b / 100 * 10^6) + (sub_9b28d1a7 * mem[mem[(32 * var136001) + 128] + 128] * b / 100 * 10^6) + (idx - _1489 / sub_9b28d1a7 * sub_9b28d1a7 * mem[mem[(32 * var136001) + 128] + 128] * b / 100 * 10^6) - (idx * mem[mem[(32 * var136001) + 128] + 128] * b / 100 * 10^6) / 8760 * 24 * 3600
                s = _1489 + sub_9b28d1a7 + (idx - _1489 / sub_9b28d1a7 * sub_9b28d1a7) - idx
                s = s + ((_1489 * mem[mem[(32 * var136001) + 128] + 128] * b / 100 * 10^6) + (sub_9b28d1a7 * mem[mem[(32 * var136001) + 128] + 128] * b / 100 * 10^6) + (idx - _1489 / sub_9b28d1a7 * sub_9b28d1a7 * mem[mem[(32 * var136001) + 128] + 128] * b / 100 * 10^6) - (idx * mem[mem[(32 * var136001) + 128] + 128] * b / 100 * 10^6) / 8760 * 24 * 3600)
                b = _1489 + sub_9b28d1a7 + (idx - _1489 / sub_9b28d1a7 * sub_9b28d1a7)
                idx = _1489 + sub_9b28d1a7 + (idx - _1489 / sub_9b28d1a7 * sub_9b28d1a7)
                b = b
                continue 
            if 100 * 10^6 < sub_93520a80 - 0x8000000000000000000000000000000000000000000000000000000000000000 and sub_93520a80 >= 0:
                revert with 0, 17
            if sub_93520a80 < 0 and 100 * 10^6 > sub_93520a80 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                revert with 0, 17
            if b and -sub_93520a80 + 100 * 10^6 > -1 / b:
                revert with 0, 17
            s = block.timestamp - _1489 / sub_9b28d1a7 != idx - _1489 / sub_9b28d1a7
            s = (_1489 * mem[mem[(32 * var136001) + 128] + 128] * b / 100 * 10^6) + (sub_9b28d1a7 * mem[mem[(32 * var136001) + 128] + 128] * b / 100 * 10^6) + (idx - _1489 / sub_9b28d1a7 * sub_9b28d1a7 * mem[mem[(32 * var136001) + 128] + 128] * b / 100 * 10^6) - (idx * mem[mem[(32 * var136001) + 128] + 128] * b / 100 * 10^6) / 8760 * 24 * 3600
            s = _1489 + sub_9b28d1a7 + (idx - _1489 / sub_9b28d1a7 * sub_9b28d1a7) - idx
            s = s + ((_1489 * mem[mem[(32 * var136001) + 128] + 128] * b / 100 * 10^6) + (sub_9b28d1a7 * mem[mem[(32 * var136001) + 128] + 128] * b / 100 * 10^6) + (idx - _1489 / sub_9b28d1a7 * sub_9b28d1a7 * mem[mem[(32 * var136001) + 128] + 128] * b / 100 * 10^6) - (idx * mem[mem[(32 * var136001) + 128] + 128] * b / 100 * 10^6) / 8760 * 24 * 3600)
            b = _1489 + sub_9b28d1a7 + (idx - _1489 / sub_9b28d1a7 * sub_9b28d1a7)
            idx = _1489 + sub_9b28d1a7 + (idx - _1489 / sub_9b28d1a7 * sub_9b28d1a7)
            b = (100 * 10^6 * b) - (sub_93520a80 * b) / 100 * 10^6
            continue 
        if s:
            t = 0
            idx = s
            while idx:
                if t == -1:
                    revert with 0, 17
                t = t + 1
                idx = idx / 10
                continue 
            if t > test266151307():
                revert with 0, 65
            # nil
        else:
            _1795 = mem[64]
            mem[64] = mem[64] + 64
            mem[_1795] = 1
            mem[_1795 + 32] = 0x3000000000000000000000000000000000000000000000000000000000000000
            # nil
}

function sub_c2202b66(?) payable {
    require calldata.size - 4 >= 64
    require arg1 == address(arg1)
    if tokenAddress != msg.sender:
        revert with 0, 'Access Denied!'
    if arg2 >= stor5[address(arg1)].field_0:
        revert with 0, 'CONT: Index Error'
    if stor5[address(arg1)][arg2].field_512 > !sub_55a757d0:
        revert with 0, 17
    if stor5[address(arg1)][arg2].field_512 + sub_55a757d0 > block.timestamp:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    'CASHOUT ERROR: You have to wait before claiming this cont.'
    if bool(stor5[address(arg1)][arg2].field_0):
        if bool(stor5[address(arg1)][arg2].field_0) == uint255(stor5[address(arg1)][arg2].field_0) * 0.5 < 32:
            revert with 0, 34
        if bool(stor5[address(arg1)][arg2].field_0):
            if bool(stor5[address(arg1)][arg2].field_0) == uint255(stor5[address(arg1)][arg2].field_0) * 0.5 < 32:
                revert with 0, 34
            if not Mask(256, -1, stor5[address(arg1)][arg2].field_0):
                if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                    revert with 0, 33
                if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                    revert with 0, 33
                idx = 0
                while stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0 > idx:
                    if idx > !stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0:
                        revert with 0, 17
                    if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                        revert with 0, 33
                    mem[32] = 8
                    if idx + stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0 / 2 >= stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0:
                        revert with 0, 50
                    mem[0] = sha3(uint8(stor5[address(arg1)][arg2].field_1280), 8)
                    if stor8[uint8(stor5[address(arg1)][arg2].field_1280)][Mask(255, 1, idx + stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0)].field_0 >= stor5[address(arg1)][arg2].field_512:
                        idx = idx
                        continue 
                    if 1 > !(idx + stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0 / 2):
                        revert with 0, 17
                    idx = (idx + stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0 / 2) + 1
                    continue 
                if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                    revert with 0, 33
                idx = 0
                while stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0 > idx:
                    if idx > !stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0:
                        revert with 0, 17
                    if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                        revert with 0, 33
                    mem[32] = 8
                    if idx + stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0 / 2 >= stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0:
                        revert with 0, 50
                    mem[0] = sha3(uint8(stor5[address(arg1)][arg2].field_1280), 8)
                    if stor8[uint8(stor5[address(arg1)][arg2].field_1280)][Mask(255, 1, idx + stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0)].field_0 >= stor5[address(arg1)][arg2].field_256:
                        idx = idx
                        continue 
                    if 1 > !(idx + stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0 / 2):
                        revert with 0, 17
                    idx = (idx + stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0 / 2) + 1
                    continue 
                if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                    revert with 0, 33
                s = 0
                while stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0 > s:
                    if s > !stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0:
                        revert with 0, 17
                    if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                        revert with 0, 33
                    mem[32] = 8
                    if s + stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0 / 2 >= stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0:
                        revert with 0, 50
                    mem[0] = sha3(uint8(stor5[address(arg1)][arg2].field_1280), 8)
                    if stor8[uint8(stor5[address(arg1)][arg2].field_1280)][Mask(255, 1, s + stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0)].field_0 >= stor5[address(arg1)][arg2].field_512:
                        s = s
                        continue 
                    if 1 > !(s + stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0 / 2):
                        revert with 0, 17
                    s = (s + stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0 / 2) + 1
                    continue 
                t = idx
                u = stor5[address(arg1)][arg2].field_768
                while t < s:
                    if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                        revert with 0, 33
                    mem[32] = 8
                    if t >= stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0:
                        revert with 0, 50
                    mem[0] = sha3(uint8(stor5[address(arg1)][arg2].field_1280), 8)
                    if 100 * 10^6 < stor8[uint8(stor5[address(arg1)][arg2].field_1280)][t].field_256 - 0x8000000000000000000000000000000000000000000000000000000000000000 and stor8[uint8(stor5[address(arg1)][arg2].field_1280)][t].field_256 >= 0:
                        revert with 0, 17
                    if stor8[uint8(stor5[address(arg1)][arg2].field_1280)][t].field_256 < 0 and 100 * 10^6 > stor8[uint8(stor5[address(arg1)][arg2].field_1280)][t].field_256 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                        revert with 0, 17
                    if u and -stor8[uint8(stor5[address(arg1)][arg2].field_1280)][t].field_256 + 100 * 10^6 > -1 / u:
                        revert with 0, 17
                    if t == -1:
                        revert with 0, 17
                    t = t + 1
                    u = (100 * 10^6 * u) - (stor8[uint8(stor5[address(arg1)][arg2].field_1280)][t].field_256 * u) / 100 * 10^6
                    continue 
                if stor5[address(arg1)][arg2].field_512 < stor5[address(arg1)][arg2].field_256:
                    revert with 0, 17
                if not sub_9b28d1a7:
                    revert with 0, 18
                idx = stor5[address(arg1)][arg2].field_512 - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7
                s = u
                while idx:
                    if not idx:
                        revert with 0, 17
                    if 100 * 10^6 < sub_93520a80 - 0x8000000000000000000000000000000000000000000000000000000000000000 and sub_93520a80 >= 0:
                        revert with 0, 17
                    if sub_93520a80 < 0 and 100 * 10^6 > sub_93520a80 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                        revert with 0, 17
                    if s and -sub_93520a80 + 100 * 10^6 > -1 / s:
                        revert with 0, 17
                    idx = idx - 1
                    s = (100 * 10^6 * s) - (sub_93520a80 * s) / 100 * 10^6
                    continue 
                if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                    revert with 0, 33
                idx = var147001
                s = var147002
                t = var147004
                u = var147005
                v = var147006
                w = var147007
                x = var147008
                y = var147009
                while idx < stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0:
                    if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                        revert with 0, 33
                    if idx >= stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0:
                        revert with 0, 50
                    if x < stor5[address(arg1)][arg2].field_256:
                        revert with 0, 17
                    if not sub_9b28d1a7:
                        revert with 0, 18
                    if stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 < stor5[address(arg1)][arg2].field_256:
                        revert with 0, 17
                    if not sub_9b28d1a7:
                        revert with 0, 18
                    if stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 == x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7:
                        if stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 < x:
                            revert with 0, 17
                        if stor5[address(arg1)][arg2].field_1024 and y > -1 / stor5[address(arg1)][arg2].field_1024:
                            revert with 0, 17
                        if stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6 and stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 - x > -1 / stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6:
                            revert with 0, 17
                        if v > !((stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) - (x * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) / 8760 * 24 * 3600):
                            revert with 0, 17
                        if stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 != x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7:
                            if 100 * 10^6 < sub_93520a80 - 0x8000000000000000000000000000000000000000000000000000000000000000 and sub_93520a80 >= 0:
                                revert with 0, 17
                            if sub_93520a80 < 0 and 100 * 10^6 > sub_93520a80 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                revert with 0, 17
                            if y and -sub_93520a80 + 100 * 10^6 > -1 / y:
                                revert with 0, 17
                            if not idx:
                                revert with 0, 17
                            if idx - 1 == -1:
                                revert with 0, 17
                            if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                                revert with 0, 33
                            mem[0] = uint8(stor5[address(arg1)][arg2].field_1280)
                            mem[32] = 8
                            idx = idx
                            s = stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 != x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7
                            t = (stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) - (x * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) / 8760 * 24 * 3600
                            u = stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 - x
                            v = v + ((stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) - (x * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) / 8760 * 24 * 3600)
                            w = stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0
                            x = stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0
                            y = (100 * 10^6 * y) - (sub_93520a80 * y) / 100 * 10^6
                            continue 
                        if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                            revert with 0, 33
                        if idx >= stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0:
                            revert with 0, 50
                        if 100 * 10^6 < stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_256 - 0x8000000000000000000000000000000000000000000000000000000000000000 and stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_256 >= 0:
                            revert with 0, 17
                        if stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_256 < 0 and 100 * 10^6 > stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_256 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                            revert with 0, 17
                        if y and -stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_256 + 100 * 10^6 > -1 / y:
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                            revert with 0, 33
                        mem[0] = uint8(stor5[address(arg1)][arg2].field_1280)
                        mem[32] = 8
                        idx = idx + 1
                        s = stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 != x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7
                        t = (stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) - (x * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) / 8760 * 24 * 3600
                        u = stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 - x
                        v = v + ((stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) - (x * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) / 8760 * 24 * 3600)
                        w = stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0
                        x = stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0
                        y = (100 * 10^6 * y) - (stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_256 * y) / 100 * 10^6
                        continue 
                    if x < stor5[address(arg1)][arg2].field_256:
                        revert with 0, 17
                    if not sub_9b28d1a7:
                        revert with 0, 18
                    if 1 > !(x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7):
                        revert with 0, 17
                    if sub_9b28d1a7 and (x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7) + 1 > -1 / sub_9b28d1a7:
                        revert with 0, 17
                    if stor5[address(arg1)][arg2].field_256 > !(sub_9b28d1a7 + (x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 * sub_9b28d1a7)):
                        revert with 0, 17
                    if stor5[address(arg1)][arg2].field_256 + sub_9b28d1a7 + (x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 * sub_9b28d1a7) < x:
                        revert with 0, 17
                    if stor5[address(arg1)][arg2].field_1024 and y > -1 / stor5[address(arg1)][arg2].field_1024:
                        revert with 0, 17
                    if stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6 and stor5[address(arg1)][arg2].field_256 + sub_9b28d1a7 + (x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 * sub_9b28d1a7) - x > -1 / stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6:
                        revert with 0, 17
                    if v > !((stor5[address(arg1)][arg2].field_256 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) + (sub_9b28d1a7 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) + (x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 * sub_9b28d1a7 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) - (x * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) / 8760 * 24 * 3600):
                        revert with 0, 17
                    if stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 != x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7:
                        if 100 * 10^6 < sub_93520a80 - 0x8000000000000000000000000000000000000000000000000000000000000000 and sub_93520a80 >= 0:
                            revert with 0, 17
                        if sub_93520a80 < 0 and 100 * 10^6 > sub_93520a80 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                            revert with 0, 17
                        if y and -sub_93520a80 + 100 * 10^6 > -1 / y:
                            revert with 0, 17
                        if not idx:
                            revert with 0, 17
                        if idx - 1 == -1:
                            revert with 0, 17
                        if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                            revert with 0, 33
                        mem[0] = uint8(stor5[address(arg1)][arg2].field_1280)
                        mem[32] = 8
                        idx = idx
                        s = stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 != x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7
                        t = (stor5[address(arg1)][arg2].field_256 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) + (sub_9b28d1a7 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) + (x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 * sub_9b28d1a7 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) - (x * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) / 8760 * 24 * 3600
                        u = stor5[address(arg1)][arg2].field_256 + sub_9b28d1a7 + (x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 * sub_9b28d1a7) - x
                        v = v + ((stor5[address(arg1)][arg2].field_256 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) + (sub_9b28d1a7 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) + (x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 * sub_9b28d1a7 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) - (x * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) / 8760 * 24 * 3600)
                        w = stor5[address(arg1)][arg2].field_256 + sub_9b28d1a7 + (x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 * sub_9b28d1a7)
                        x = stor5[address(arg1)][arg2].field_256 + sub_9b28d1a7 + (x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 * sub_9b28d1a7)
                        y = (100 * 10^6 * y) - (sub_93520a80 * y) / 100 * 10^6
                        continue 
                    if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                        revert with 0, 33
                    if idx >= stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0:
                        revert with 0, 50
                    if 100 * 10^6 < stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_256 - 0x8000000000000000000000000000000000000000000000000000000000000000 and stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_256 >= 0:
                        revert with 0, 17
                    if stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_256 < 0 and 100 * 10^6 > stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_256 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                        revert with 0, 17
                    if y and -stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_256 + 100 * 10^6 > -1 / y:
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                        revert with 0, 33
                    mem[0] = uint8(stor5[address(arg1)][arg2].field_1280)
                    mem[32] = 8
                    idx = idx + 1
                    s = stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 != x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7
                    t = (stor5[address(arg1)][arg2].field_256 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) + (sub_9b28d1a7 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) + (x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 * sub_9b28d1a7 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) - (x * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) / 8760 * 24 * 3600
                    u = stor5[address(arg1)][arg2].field_256 + sub_9b28d1a7 + (x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 * sub_9b28d1a7) - x
                    v = v + ((stor5[address(arg1)][arg2].field_256 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) + (sub_9b28d1a7 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) + (x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 * sub_9b28d1a7 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) - (x * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) / 8760 * 24 * 3600)
                    w = stor5[address(arg1)][arg2].field_256 + sub_9b28d1a7 + (x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 * sub_9b28d1a7)
                    x = stor5[address(arg1)][arg2].field_256 + sub_9b28d1a7 + (x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 * sub_9b28d1a7)
                    y = (100 * 10^6 * y) - (stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_256 * y) / 100 * 10^6
                    continue 
            else:
                if 31 >= uint255(stor5[address(arg1)][arg2].field_0) * 0.5:
                    if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                        revert with 0, 33
                    if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                        revert with 0, 33
                    idx = 0
                    while stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0 > idx:
                        if idx > !stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0:
                            revert with 0, 17
                        if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                            revert with 0, 33
                        mem[32] = 8
                        if idx + stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0 / 2 >= stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0:
                            revert with 0, 50
                        mem[0] = sha3(uint8(stor5[address(arg1)][arg2].field_1280), 8)
                        if stor8[uint8(stor5[address(arg1)][arg2].field_1280)][Mask(255, 1, idx + stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0)].field_0 >= stor5[address(arg1)][arg2].field_512:
                            idx = idx
                            continue 
                        if 1 > !(idx + stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0 / 2):
                            revert with 0, 17
                        idx = (idx + stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0 / 2) + 1
                        continue 
                    if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                        revert with 0, 33
                    idx = 0
                    while stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0 > idx:
                        if idx > !stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0:
                            revert with 0, 17
                        if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                            revert with 0, 33
                        mem[32] = 8
                        if idx + stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0 / 2 >= stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0:
                            revert with 0, 50
                        mem[0] = sha3(uint8(stor5[address(arg1)][arg2].field_1280), 8)
                        if stor8[uint8(stor5[address(arg1)][arg2].field_1280)][Mask(255, 1, idx + stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0)].field_0 >= stor5[address(arg1)][arg2].field_256:
                            idx = idx
                            continue 
                        if 1 > !(idx + stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0 / 2):
                            revert with 0, 17
                        idx = (idx + stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0 / 2) + 1
                        continue 
                    if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                        revert with 0, 33
                    s = 0
                    while stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0 > s:
                        if s > !stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0:
                            revert with 0, 17
                        if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                            revert with 0, 33
                        mem[32] = 8
                        if s + stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0 / 2 >= stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0:
                            revert with 0, 50
                        mem[0] = sha3(uint8(stor5[address(arg1)][arg2].field_1280), 8)
                        if stor8[uint8(stor5[address(arg1)][arg2].field_1280)][Mask(255, 1, s + stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0)].field_0 >= stor5[address(arg1)][arg2].field_512:
                            s = s
                            continue 
                        if 1 > !(s + stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0 / 2):
                            revert with 0, 17
                        s = (s + stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0 / 2) + 1
                        continue 
                    t = idx
                    u = stor5[address(arg1)][arg2].field_768
                    while t < s:
                        if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                            revert with 0, 33
                        mem[32] = 8
                        if t >= stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0:
                            revert with 0, 50
                        mem[0] = sha3(uint8(stor5[address(arg1)][arg2].field_1280), 8)
                        if 100 * 10^6 < stor8[uint8(stor5[address(arg1)][arg2].field_1280)][t].field_256 - 0x8000000000000000000000000000000000000000000000000000000000000000 and stor8[uint8(stor5[address(arg1)][arg2].field_1280)][t].field_256 >= 0:
                            revert with 0, 17
                        if stor8[uint8(stor5[address(arg1)][arg2].field_1280)][t].field_256 < 0 and 100 * 10^6 > stor8[uint8(stor5[address(arg1)][arg2].field_1280)][t].field_256 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                            revert with 0, 17
                        if u and -stor8[uint8(stor5[address(arg1)][arg2].field_1280)][t].field_256 + 100 * 10^6 > -1 / u:
                            revert with 0, 17
                        if t == -1:
                            revert with 0, 17
                        t = t + 1
                        u = (100 * 10^6 * u) - (stor8[uint8(stor5[address(arg1)][arg2].field_1280)][t].field_256 * u) / 100 * 10^6
                        continue 
                    if stor5[address(arg1)][arg2].field_512 < stor5[address(arg1)][arg2].field_256:
                        revert with 0, 17
                    if not sub_9b28d1a7:
                        revert with 0, 18
                    idx = stor5[address(arg1)][arg2].field_512 - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7
                    s = u
                    while idx:
                        if not idx:
                            revert with 0, 17
                        if 100 * 10^6 < sub_93520a80 - 0x8000000000000000000000000000000000000000000000000000000000000000 and sub_93520a80 >= 0:
                            revert with 0, 17
                        if sub_93520a80 < 0 and 100 * 10^6 > sub_93520a80 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                            revert with 0, 17
                        if s and -sub_93520a80 + 100 * 10^6 > -1 / s:
                            revert with 0, 17
                        idx = idx - 1
                        s = (100 * 10^6 * s) - (sub_93520a80 * s) / 100 * 10^6
                        continue 
                    if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                        revert with 0, 33
                    idx = var149001
                    s = var149002
                    t = var149004
                    u = var149005
                    v = var149006
                    w = var149007
                    x = var149008
                    y = var149009
                    while idx < stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0:
                        if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                            revert with 0, 33
                        if idx >= stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0:
                            revert with 0, 50
                        if x < stor5[address(arg1)][arg2].field_256:
                            revert with 0, 17
                        if not sub_9b28d1a7:
                            revert with 0, 18
                        if stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 < stor5[address(arg1)][arg2].field_256:
                            revert with 0, 17
                        if not sub_9b28d1a7:
                            revert with 0, 18
                        if stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 == x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7:
                            if stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 < x:
                                revert with 0, 17
                            if stor5[address(arg1)][arg2].field_1024 and y > -1 / stor5[address(arg1)][arg2].field_1024:
                                revert with 0, 17
                            if stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6 and stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 - x > -1 / stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6:
                                revert with 0, 17
                            if v > !((stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) - (x * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) / 8760 * 24 * 3600):
                                revert with 0, 17
                            if stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 != x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7:
                                if 100 * 10^6 < sub_93520a80 - 0x8000000000000000000000000000000000000000000000000000000000000000 and sub_93520a80 >= 0:
                                    revert with 0, 17
                                if sub_93520a80 < 0 and 100 * 10^6 > sub_93520a80 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                    revert with 0, 17
                                if y and -sub_93520a80 + 100 * 10^6 > -1 / y:
                                    revert with 0, 17
                                if not idx:
                                    revert with 0, 17
                                if idx - 1 == -1:
                                    revert with 0, 17
                                if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                                    revert with 0, 33
                                mem[0] = uint8(stor5[address(arg1)][arg2].field_1280)
                                mem[32] = 8
                                idx = idx
                                s = stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 != x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7
                                t = (stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) - (x * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) / 8760 * 24 * 3600
                                u = stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 - x
                                v = v + ((stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) - (x * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) / 8760 * 24 * 3600)
                                w = stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0
                                x = stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0
                                y = (100 * 10^6 * y) - (sub_93520a80 * y) / 100 * 10^6
                                continue 
                            if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                                revert with 0, 33
                            if idx >= stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0:
                                revert with 0, 50
                            if 100 * 10^6 < stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_256 - 0x8000000000000000000000000000000000000000000000000000000000000000 and stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_256 >= 0:
                                revert with 0, 17
                            if stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_256 < 0 and 100 * 10^6 > stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_256 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                revert with 0, 17
                            if y and -stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_256 + 100 * 10^6 > -1 / y:
                                revert with 0, 17
                            if idx == -1:
                                revert with 0, 17
                            if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                                revert with 0, 33
                            mem[0] = uint8(stor5[address(arg1)][arg2].field_1280)
                            mem[32] = 8
                            idx = idx + 1
                            s = stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 != x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7
                            t = (stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) - (x * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) / 8760 * 24 * 3600
                            u = stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 - x
                            v = v + ((stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) - (x * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) / 8760 * 24 * 3600)
                            w = stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0
                            x = stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0
                            y = (100 * 10^6 * y) - (stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_256 * y) / 100 * 10^6
                            continue 
                        if x < stor5[address(arg1)][arg2].field_256:
                            revert with 0, 17
                        if not sub_9b28d1a7:
                            revert with 0, 18
                        if 1 > !(x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7):
                            revert with 0, 17
                        if sub_9b28d1a7 and (x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7) + 1 > -1 / sub_9b28d1a7:
                            revert with 0, 17
                        if stor5[address(arg1)][arg2].field_256 > !(sub_9b28d1a7 + (x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 * sub_9b28d1a7)):
                            revert with 0, 17
                        if stor5[address(arg1)][arg2].field_256 + sub_9b28d1a7 + (x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 * sub_9b28d1a7) < x:
                            revert with 0, 17
                        if stor5[address(arg1)][arg2].field_1024 and y > -1 / stor5[address(arg1)][arg2].field_1024:
                            revert with 0, 17
                        if stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6 and stor5[address(arg1)][arg2].field_256 + sub_9b28d1a7 + (x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 * sub_9b28d1a7) - x > -1 / stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6:
                            revert with 0, 17
                        if v > !((stor5[address(arg1)][arg2].field_256 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) + (sub_9b28d1a7 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) + (x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 * sub_9b28d1a7 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) - (x * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) / 8760 * 24 * 3600):
                            revert with 0, 17
                        if stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 != x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7:
                            if 100 * 10^6 < sub_93520a80 - 0x8000000000000000000000000000000000000000000000000000000000000000 and sub_93520a80 >= 0:
                                revert with 0, 17
                            if sub_93520a80 < 0 and 100 * 10^6 > sub_93520a80 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                revert with 0, 17
                            if y and -sub_93520a80 + 100 * 10^6 > -1 / y:
                                revert with 0, 17
                            if not idx:
                                revert with 0, 17
                            if idx - 1 == -1:
                                revert with 0, 17
                            if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                                revert with 0, 33
                            mem[0] = uint8(stor5[address(arg1)][arg2].field_1280)
                            mem[32] = 8
                            idx = idx
                            s = stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 != x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7
                            t = (stor5[address(arg1)][arg2].field_256 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) + (sub_9b28d1a7 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) + (x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 * sub_9b28d1a7 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) - (x * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) / 8760 * 24 * 3600
                            u = stor5[address(arg1)][arg2].field_256 + sub_9b28d1a7 + (x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 * sub_9b28d1a7) - x
                            v = v + ((stor5[address(arg1)][arg2].field_256 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) + (sub_9b28d1a7 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) + (x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 * sub_9b28d1a7 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) - (x * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) / 8760 * 24 * 3600)
                            w = stor5[address(arg1)][arg2].field_256 + sub_9b28d1a7 + (x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 * sub_9b28d1a7)
                            x = stor5[address(arg1)][arg2].field_256 + sub_9b28d1a7 + (x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 * sub_9b28d1a7)
                            y = (100 * 10^6 * y) - (sub_93520a80 * y) / 100 * 10^6
                            continue 
                        if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                            revert with 0, 33
                        if idx >= stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0:
                            revert with 0, 50
                        if 100 * 10^6 < stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_256 - 0x8000000000000000000000000000000000000000000000000000000000000000 and stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_256 >= 0:
                            revert with 0, 17
                        if stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_256 < 0 and 100 * 10^6 > stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_256 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                            revert with 0, 17
                        if y and -stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_256 + 100 * 10^6 > -1 / y:
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                            revert with 0, 33
                        mem[0] = uint8(stor5[address(arg1)][arg2].field_1280)
                        mem[32] = 8
                        idx = idx + 1
                        s = stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 != x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7
                        t = (stor5[address(arg1)][arg2].field_256 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) + (sub_9b28d1a7 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) + (x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 * sub_9b28d1a7 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) - (x * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) / 8760 * 24 * 3600
                        u = stor5[address(arg1)][arg2].field_256 + sub_9b28d1a7 + (x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 * sub_9b28d1a7) - x
                        v = v + ((stor5[address(arg1)][arg2].field_256 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) + (sub_9b28d1a7 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) + (x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 * sub_9b28d1a7 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) - (x * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) / 8760 * 24 * 3600)
                        w = stor5[address(arg1)][arg2].field_256 + sub_9b28d1a7 + (x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 * sub_9b28d1a7)
                        x = stor5[address(arg1)][arg2].field_256 + sub_9b28d1a7 + (x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 * sub_9b28d1a7)
                        y = (100 * 10^6 * y) - (stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_256 * y) / 100 * 10^6
                        continue 
                else:
                    idx = 320
                    s = 0
                    while (uint255(stor5[address(arg1)][arg2].field_0) * 0.5) + 288 > idx:
                        mem[idx + 32] = stor5[address(arg1)][(6 * arg2) + s].field_256
                        idx = idx + 32
                        s = s + 1
                        continue 
                    if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                        revert with 0, 33
                    if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                        revert with 0, 33
                    idx = 0
                    while stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0 > idx:
                        if idx > !stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0:
                            revert with 0, 17
                        if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                            revert with 0, 33
                        mem[32] = 8
                        if idx + stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0 / 2 >= stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0:
                            revert with 0, 50
                        mem[0] = sha3(uint8(stor5[address(arg1)][arg2].field_1280), 8)
                        if stor8[uint8(stor5[address(arg1)][arg2].field_1280)][Mask(255, 1, idx + stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0)].field_0 >= stor5[address(arg1)][arg2].field_512:
                            idx = idx
                            continue 
                        if 1 > !(idx + stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0 / 2):
                            revert with 0, 17
                        idx = (idx + stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0 / 2) + 1
                        continue 
                    if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                        revert with 0, 33
                    idx = 0
                    while stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0 > idx:
                        if idx > !stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0:
                            revert with 0, 17
                        if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                            revert with 0, 33
                        mem[32] = 8
                        if idx + stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0 / 2 >= stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0:
                            revert with 0, 50
                        mem[0] = sha3(uint8(stor5[address(arg1)][arg2].field_1280), 8)
                        if stor8[uint8(stor5[address(arg1)][arg2].field_1280)][Mask(255, 1, idx + stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0)].field_0 >= stor5[address(arg1)][arg2].field_256:
                            idx = idx
                            continue 
                        if 1 > !(idx + stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0 / 2):
                            revert with 0, 17
                        idx = (idx + stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0 / 2) + 1
                        continue 
                    if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                        revert with 0, 33
                    s = 0
                    while stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0 > s:
                        if s > !stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0:
                            revert with 0, 17
                        if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                            revert with 0, 33
                        mem[32] = 8
                        if s + stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0 / 2 >= stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0:
                            revert with 0, 50
                        mem[0] = sha3(uint8(stor5[address(arg1)][arg2].field_1280), 8)
                        if stor8[uint8(stor5[address(arg1)][arg2].field_1280)][Mask(255, 1, s + stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0)].field_0 >= stor5[address(arg1)][arg2].field_512:
                            s = s
                            continue 
                        if 1 > !(s + stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0 / 2):
                            revert with 0, 17
                        s = (s + stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0 / 2) + 1
                        continue 
                    t = idx
                    u = stor5[address(arg1)][arg2].field_768
                    while t < s:
                        if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                            revert with 0, 33
                        mem[32] = 8
                        if t >= stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0:
                            revert with 0, 50
                        mem[0] = sha3(uint8(stor5[address(arg1)][arg2].field_1280), 8)
                        if 100 * 10^6 < stor8[uint8(stor5[address(arg1)][arg2].field_1280)][t].field_256 - 0x8000000000000000000000000000000000000000000000000000000000000000 and stor8[uint8(stor5[address(arg1)][arg2].field_1280)][t].field_256 >= 0:
                            revert with 0, 17
                        if stor8[uint8(stor5[address(arg1)][arg2].field_1280)][t].field_256 < 0 and 100 * 10^6 > stor8[uint8(stor5[address(arg1)][arg2].field_1280)][t].field_256 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                            revert with 0, 17
                        if u and -stor8[uint8(stor5[address(arg1)][arg2].field_1280)][t].field_256 + 100 * 10^6 > -1 / u:
                            revert with 0, 17
                        if t == -1:
                            revert with 0, 17
                        t = t + 1
                        u = (100 * 10^6 * u) - (stor8[uint8(stor5[address(arg1)][arg2].field_1280)][t].field_256 * u) / 100 * 10^6
                        continue 
                    if stor5[address(arg1)][arg2].field_512 < stor5[address(arg1)][arg2].field_256:
                        revert with 0, 17
                    if not sub_9b28d1a7:
                        revert with 0, 18
                    idx = stor5[address(arg1)][arg2].field_512 - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7
                    s = u
                    while idx:
                        if not idx:
                            revert with 0, 17
                        if 100 * 10^6 < sub_93520a80 - 0x8000000000000000000000000000000000000000000000000000000000000000 and sub_93520a80 >= 0:
                            revert with 0, 17
                        if sub_93520a80 < 0 and 100 * 10^6 > sub_93520a80 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                            revert with 0, 17
                        if s and -sub_93520a80 + 100 * 10^6 > -1 / s:
                            revert with 0, 17
                        idx = idx - 1
                        s = (100 * 10^6 * s) - (sub_93520a80 * s) / 100 * 10^6
                        continue 
                    if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                        revert with 0, 33
                    idx = var152001
                    s = var152002
                    t = var152004
                    u = var152005
                    v = var152006
                    w = var152007
                    x = var152008
                    y = var152009
                    while idx < stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0:
                        if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                            revert with 0, 33
                        if idx >= stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0:
                            revert with 0, 50
                        if x < stor5[address(arg1)][arg2].field_256:
                            revert with 0, 17
                        if not sub_9b28d1a7:
                            revert with 0, 18
                        if stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 < stor5[address(arg1)][arg2].field_256:
                            revert with 0, 17
                        if not sub_9b28d1a7:
                            revert with 0, 18
                        if stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 == x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7:
                            if stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 < x:
                                revert with 0, 17
                            if stor5[address(arg1)][arg2].field_1024 and y > -1 / stor5[address(arg1)][arg2].field_1024:
                                revert with 0, 17
                            if stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6 and stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 - x > -1 / stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6:
                                revert with 0, 17
                            if v > !((stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) - (x * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) / 8760 * 24 * 3600):
                                revert with 0, 17
                            if stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 != x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7:
                                if 100 * 10^6 < sub_93520a80 - 0x8000000000000000000000000000000000000000000000000000000000000000 and sub_93520a80 >= 0:
                                    revert with 0, 17
                                if sub_93520a80 < 0 and 100 * 10^6 > sub_93520a80 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                    revert with 0, 17
                                if y and -sub_93520a80 + 100 * 10^6 > -1 / y:
                                    revert with 0, 17
                                if not idx:
                                    revert with 0, 17
                                if idx - 1 == -1:
                                    revert with 0, 17
                                if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                                    revert with 0, 33
                                mem[0] = uint8(stor5[address(arg1)][arg2].field_1280)
                                mem[32] = 8
                                idx = idx
                                s = stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 != x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7
                                t = (stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) - (x * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) / 8760 * 24 * 3600
                                u = stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 - x
                                v = v + ((stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) - (x * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) / 8760 * 24 * 3600)
                                w = stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0
                                x = stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0
                                y = (100 * 10^6 * y) - (sub_93520a80 * y) / 100 * 10^6
                                continue 
                            if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                                revert with 0, 33
                            if idx >= stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0:
                                revert with 0, 50
                            if 100 * 10^6 < stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_256 - 0x8000000000000000000000000000000000000000000000000000000000000000 and stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_256 >= 0:
                                revert with 0, 17
                            if stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_256 < 0 and 100 * 10^6 > stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_256 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                revert with 0, 17
                            if y and -stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_256 + 100 * 10^6 > -1 / y:
                                revert with 0, 17
                            if idx == -1:
                                revert with 0, 17
                            if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                                revert with 0, 33
                            mem[0] = uint8(stor5[address(arg1)][arg2].field_1280)
                            mem[32] = 8
                            idx = idx + 1
                            s = stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 != x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7
                            t = (stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) - (x * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) / 8760 * 24 * 3600
                            u = stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 - x
                            v = v + ((stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) - (x * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) / 8760 * 24 * 3600)
                            w = stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0
                            x = stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0
                            y = (100 * 10^6 * y) - (stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_256 * y) / 100 * 10^6
                            continue 
                        if x < stor5[address(arg1)][arg2].field_256:
                            revert with 0, 17
                        if not sub_9b28d1a7:
                            revert with 0, 18
                        if 1 > !(x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7):
                            revert with 0, 17
                        if sub_9b28d1a7 and (x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7) + 1 > -1 / sub_9b28d1a7:
                            revert with 0, 17
                        if stor5[address(arg1)][arg2].field_256 > !(sub_9b28d1a7 + (x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 * sub_9b28d1a7)):
                            revert with 0, 17
                        if stor5[address(arg1)][arg2].field_256 + sub_9b28d1a7 + (x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 * sub_9b28d1a7) < x:
                            revert with 0, 17
                        if stor5[address(arg1)][arg2].field_1024 and y > -1 / stor5[address(arg1)][arg2].field_1024:
                            revert with 0, 17
                        if stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6 and stor5[address(arg1)][arg2].field_256 + sub_9b28d1a7 + (x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 * sub_9b28d1a7) - x > -1 / stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6:
                            revert with 0, 17
                        if v > !((stor5[address(arg1)][arg2].field_256 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) + (sub_9b28d1a7 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) + (x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 * sub_9b28d1a7 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) - (x * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) / 8760 * 24 * 3600):
                            revert with 0, 17
                        if stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 != x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7:
                            if 100 * 10^6 < sub_93520a80 - 0x8000000000000000000000000000000000000000000000000000000000000000 and sub_93520a80 >= 0:
                                revert with 0, 17
                            if sub_93520a80 < 0 and 100 * 10^6 > sub_93520a80 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                revert with 0, 17
                            if y and -sub_93520a80 + 100 * 10^6 > -1 / y:
                                revert with 0, 17
                            if not idx:
                                revert with 0, 17
                            if idx - 1 == -1:
                                revert with 0, 17
                            if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                                revert with 0, 33
                            mem[0] = uint8(stor5[address(arg1)][arg2].field_1280)
                            mem[32] = 8
                            idx = idx
                            s = stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 != x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7
                            t = (stor5[address(arg1)][arg2].field_256 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) + (sub_9b28d1a7 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) + (x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 * sub_9b28d1a7 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) - (x * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) / 8760 * 24 * 3600
                            u = stor5[address(arg1)][arg2].field_256 + sub_9b28d1a7 + (x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 * sub_9b28d1a7) - x
                            v = v + ((stor5[address(arg1)][arg2].field_256 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) + (sub_9b28d1a7 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) + (x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 * sub_9b28d1a7 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) - (x * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) / 8760 * 24 * 3600)
                            w = stor5[address(arg1)][arg2].field_256 + sub_9b28d1a7 + (x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 * sub_9b28d1a7)
                            x = stor5[address(arg1)][arg2].field_256 + sub_9b28d1a7 + (x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 * sub_9b28d1a7)
                            y = (100 * 10^6 * y) - (sub_93520a80 * y) / 100 * 10^6
                            continue 
                        if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                            revert with 0, 33
                        if idx >= stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0:
                            revert with 0, 50
                        if 100 * 10^6 < stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_256 - 0x8000000000000000000000000000000000000000000000000000000000000000 and stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_256 >= 0:
                            revert with 0, 17
                        if stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_256 < 0 and 100 * 10^6 > stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_256 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                            revert with 0, 17
                        if y and -stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_256 + 100 * 10^6 > -1 / y:
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                            revert with 0, 33
                        mem[0] = uint8(stor5[address(arg1)][arg2].field_1280)
                        mem[32] = 8
                        idx = idx + 1
                        s = stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 != x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7
                        t = (stor5[address(arg1)][arg2].field_256 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) + (sub_9b28d1a7 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) + (x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 * sub_9b28d1a7 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) - (x * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) / 8760 * 24 * 3600
                        u = stor5[address(arg1)][arg2].field_256 + sub_9b28d1a7 + (x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 * sub_9b28d1a7) - x
                        v = v + ((stor5[address(arg1)][arg2].field_256 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) + (sub_9b28d1a7 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) + (x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 * sub_9b28d1a7 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) - (x * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) / 8760 * 24 * 3600)
                        w = stor5[address(arg1)][arg2].field_256 + sub_9b28d1a7 + (x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 * sub_9b28d1a7)
                        x = stor5[address(arg1)][arg2].field_256 + sub_9b28d1a7 + (x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 * sub_9b28d1a7)
                        y = (100 * 10^6 * y) - (stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_256 * y) / 100 * 10^6
                        continue 
        else:
            if bool(stor5[address(arg1)][arg2].field_0) == stor5[address(arg1)][arg2].field_1 % 128 < 32:
                revert with 0, 34
            if not stor5[address(arg1)][arg2].field_1 % 128:
                if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                    revert with 0, 33
                if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                    revert with 0, 33
                idx = 0
                while stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0 > idx:
                    if idx > !stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0:
                        revert with 0, 17
                    if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                        revert with 0, 33
                    mem[32] = 8
                    if idx + stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0 / 2 >= stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0:
                        revert with 0, 50
                    mem[0] = sha3(uint8(stor5[address(arg1)][arg2].field_1280), 8)
                    if stor8[uint8(stor5[address(arg1)][arg2].field_1280)][Mask(255, 1, idx + stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0)].field_0 >= stor5[address(arg1)][arg2].field_512:
                        idx = idx
                        continue 
                    if 1 > !(idx + stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0 / 2):
                        revert with 0, 17
                    idx = (idx + stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0 / 2) + 1
                    continue 
                if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                    revert with 0, 33
                idx = 0
                while stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0 > idx:
                    if idx > !stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0:
                        revert with 0, 17
                    if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                        revert with 0, 33
                    mem[32] = 8
                    if idx + stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0 / 2 >= stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0:
                        revert with 0, 50
                    mem[0] = sha3(uint8(stor5[address(arg1)][arg2].field_1280), 8)
                    if stor8[uint8(stor5[address(arg1)][arg2].field_1280)][Mask(255, 1, idx + stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0)].field_0 >= stor5[address(arg1)][arg2].field_256:
                        idx = idx
                        continue 
                    if 1 > !(idx + stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0 / 2):
                        revert with 0, 17
                    idx = (idx + stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0 / 2) + 1
                    continue 
                if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                    revert with 0, 33
                s = 0
                while stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0 > s:
                    if s > !stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0:
                        revert with 0, 17
                    if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                        revert with 0, 33
                    mem[32] = 8
                    if s + stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0 / 2 >= stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0:
                        revert with 0, 50
                    mem[0] = sha3(uint8(stor5[address(arg1)][arg2].field_1280), 8)
                    if stor8[uint8(stor5[address(arg1)][arg2].field_1280)][Mask(255, 1, s + stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0)].field_0 >= stor5[address(arg1)][arg2].field_512:
                        s = s
                        continue 
                    if 1 > !(s + stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0 / 2):
                        revert with 0, 17
                    s = (s + stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0 / 2) + 1
                    continue 
                t = idx
                u = stor5[address(arg1)][arg2].field_768
                while t < s:
                    if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                        revert with 0, 33
                    mem[32] = 8
                    if t >= stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0:
                        revert with 0, 50
                    mem[0] = sha3(uint8(stor5[address(arg1)][arg2].field_1280), 8)
                    if 100 * 10^6 < stor8[uint8(stor5[address(arg1)][arg2].field_1280)][t].field_256 - 0x8000000000000000000000000000000000000000000000000000000000000000 and stor8[uint8(stor5[address(arg1)][arg2].field_1280)][t].field_256 >= 0:
                        revert with 0, 17
                    if stor8[uint8(stor5[address(arg1)][arg2].field_1280)][t].field_256 < 0 and 100 * 10^6 > stor8[uint8(stor5[address(arg1)][arg2].field_1280)][t].field_256 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                        revert with 0, 17
                    if u and -stor8[uint8(stor5[address(arg1)][arg2].field_1280)][t].field_256 + 100 * 10^6 > -1 / u:
                        revert with 0, 17
                    if t == -1:
                        revert with 0, 17
                    t = t + 1
                    u = (100 * 10^6 * u) - (stor8[uint8(stor5[address(arg1)][arg2].field_1280)][t].field_256 * u) / 100 * 10^6
                    continue 
                if stor5[address(arg1)][arg2].field_512 < stor5[address(arg1)][arg2].field_256:
                    revert with 0, 17
                if not sub_9b28d1a7:
                    revert with 0, 18
                idx = stor5[address(arg1)][arg2].field_512 - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7
                s = u
                while idx:
                    if not idx:
                        revert with 0, 17
                    if 100 * 10^6 < sub_93520a80 - 0x8000000000000000000000000000000000000000000000000000000000000000 and sub_93520a80 >= 0:
                        revert with 0, 17
                    if sub_93520a80 < 0 and 100 * 10^6 > sub_93520a80 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                        revert with 0, 17
                    if s and -sub_93520a80 + 100 * 10^6 > -1 / s:
                        revert with 0, 17
                    idx = idx - 1
                    s = (100 * 10^6 * s) - (sub_93520a80 * s) / 100 * 10^6
                    continue 
                if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                    revert with 0, 33
                idx = var148001
                s = var148002
                t = var148004
                u = var148005
                v = var148006
                w = var148007
                x = var148008
                y = var148009
                while idx < stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0:
                    if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                        revert with 0, 33
                    if idx >= stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0:
                        revert with 0, 50
                    if x < stor5[address(arg1)][arg2].field_256:
                        revert with 0, 17
                    if not sub_9b28d1a7:
                        revert with 0, 18
                    if stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 < stor5[address(arg1)][arg2].field_256:
                        revert with 0, 17
                    if not sub_9b28d1a7:
                        revert with 0, 18
                    if stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 == x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7:
                        if stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 < x:
                            revert with 0, 17
                        if stor5[address(arg1)][arg2].field_1024 and y > -1 / stor5[address(arg1)][arg2].field_1024:
                            revert with 0, 17
                        if stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6 and stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 - x > -1 / stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6:
                            revert with 0, 17
                        if v > !((stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) - (x * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) / 8760 * 24 * 3600):
                            revert with 0, 17
                        if stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 != x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7:
                            if 100 * 10^6 < sub_93520a80 - 0x8000000000000000000000000000000000000000000000000000000000000000 and sub_93520a80 >= 0:
                                revert with 0, 17
                            if sub_93520a80 < 0 and 100 * 10^6 > sub_93520a80 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                revert with 0, 17
                            if y and -sub_93520a80 + 100 * 10^6 > -1 / y:
                                revert with 0, 17
                            if not idx:
                                revert with 0, 17
                            if idx - 1 == -1:
                                revert with 0, 17
                            if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                                revert with 0, 33
                            mem[0] = uint8(stor5[address(arg1)][arg2].field_1280)
                            mem[32] = 8
                            idx = idx
                            s = stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 != x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7
                            t = (stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) - (x * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) / 8760 * 24 * 3600
                            u = stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 - x
                            v = v + ((stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) - (x * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) / 8760 * 24 * 3600)
                            w = stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0
                            x = stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0
                            y = (100 * 10^6 * y) - (sub_93520a80 * y) / 100 * 10^6
                            continue 
                        if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                            revert with 0, 33
                        if idx >= stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0:
                            revert with 0, 50
                        if 100 * 10^6 < stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_256 - 0x8000000000000000000000000000000000000000000000000000000000000000 and stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_256 >= 0:
                            revert with 0, 17
                        if stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_256 < 0 and 100 * 10^6 > stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_256 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                            revert with 0, 17
                        if y and -stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_256 + 100 * 10^6 > -1 / y:
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                            revert with 0, 33
                        mem[0] = uint8(stor5[address(arg1)][arg2].field_1280)
                        mem[32] = 8
                        idx = idx + 1
                        s = stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 != x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7
                        t = (stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) - (x * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) / 8760 * 24 * 3600
                        u = stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 - x
                        v = v + ((stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) - (x * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) / 8760 * 24 * 3600)
                        w = stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0
                        x = stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0
                        y = (100 * 10^6 * y) - (stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_256 * y) / 100 * 10^6
                        continue 
                    if x < stor5[address(arg1)][arg2].field_256:
                        revert with 0, 17
                    if not sub_9b28d1a7:
                        revert with 0, 18
                    if 1 > !(x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7):
                        revert with 0, 17
                    if sub_9b28d1a7 and (x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7) + 1 > -1 / sub_9b28d1a7:
                        revert with 0, 17
                    if stor5[address(arg1)][arg2].field_256 > !(sub_9b28d1a7 + (x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 * sub_9b28d1a7)):
                        revert with 0, 17
                    if stor5[address(arg1)][arg2].field_256 + sub_9b28d1a7 + (x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 * sub_9b28d1a7) < x:
                        revert with 0, 17
                    if stor5[address(arg1)][arg2].field_1024 and y > -1 / stor5[address(arg1)][arg2].field_1024:
                        revert with 0, 17
                    if stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6 and stor5[address(arg1)][arg2].field_256 + sub_9b28d1a7 + (x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 * sub_9b28d1a7) - x > -1 / stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6:
                        revert with 0, 17
                    if v > !((stor5[address(arg1)][arg2].field_256 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) + (sub_9b28d1a7 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) + (x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 * sub_9b28d1a7 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) - (x * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) / 8760 * 24 * 3600):
                        revert with 0, 17
                    if stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 != x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7:
                        if 100 * 10^6 < sub_93520a80 - 0x8000000000000000000000000000000000000000000000000000000000000000 and sub_93520a80 >= 0:
                            revert with 0, 17
                        if sub_93520a80 < 0 and 100 * 10^6 > sub_93520a80 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                            revert with 0, 17
                        if y and -sub_93520a80 + 100 * 10^6 > -1 / y:
                            revert with 0, 17
                        if not idx:
                            revert with 0, 17
                        if idx - 1 == -1:
                            revert with 0, 17
                        if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                            revert with 0, 33
                        mem[0] = uint8(stor5[address(arg1)][arg2].field_1280)
                        mem[32] = 8
                        idx = idx
                        s = stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 != x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7
                        t = (stor5[address(arg1)][arg2].field_256 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) + (sub_9b28d1a7 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) + (x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 * sub_9b28d1a7 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) - (x * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) / 8760 * 24 * 3600
                        u = stor5[address(arg1)][arg2].field_256 + sub_9b28d1a7 + (x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 * sub_9b28d1a7) - x
                        v = v + ((stor5[address(arg1)][arg2].field_256 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) + (sub_9b28d1a7 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) + (x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 * sub_9b28d1a7 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) - (x * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) / 8760 * 24 * 3600)
                        w = stor5[address(arg1)][arg2].field_256 + sub_9b28d1a7 + (x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 * sub_9b28d1a7)
                        x = stor5[address(arg1)][arg2].field_256 + sub_9b28d1a7 + (x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 * sub_9b28d1a7)
                        y = (100 * 10^6 * y) - (sub_93520a80 * y) / 100 * 10^6
                        continue 
                    if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                        revert with 0, 33
                    if idx >= stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0:
                        revert with 0, 50
                    if 100 * 10^6 < stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_256 - 0x8000000000000000000000000000000000000000000000000000000000000000 and stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_256 >= 0:
                        revert with 0, 17
                    if stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_256 < 0 and 100 * 10^6 > stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_256 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                        revert with 0, 17
                    if y and -stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_256 + 100 * 10^6 > -1 / y:
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                        revert with 0, 33
                    mem[0] = uint8(stor5[address(arg1)][arg2].field_1280)
                    mem[32] = 8
                    idx = idx + 1
                    s = stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 != x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7
                    t = (stor5[address(arg1)][arg2].field_256 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) + (sub_9b28d1a7 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) + (x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 * sub_9b28d1a7 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) - (x * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) / 8760 * 24 * 3600
                    u = stor5[address(arg1)][arg2].field_256 + sub_9b28d1a7 + (x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 * sub_9b28d1a7) - x
                    v = v + ((stor5[address(arg1)][arg2].field_256 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) + (sub_9b28d1a7 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) + (x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 * sub_9b28d1a7 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) - (x * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) / 8760 * 24 * 3600)
                    w = stor5[address(arg1)][arg2].field_256 + sub_9b28d1a7 + (x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 * sub_9b28d1a7)
                    x = stor5[address(arg1)][arg2].field_256 + sub_9b28d1a7 + (x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 * sub_9b28d1a7)
                    y = (100 * 10^6 * y) - (stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_256 * y) / 100 * 10^6
                    continue 
            else:
                if 31 >= stor5[address(arg1)][arg2].field_1 % 128:
                    if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                        revert with 0, 33
                    if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                        revert with 0, 33
                    idx = 0
                    while stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0 > idx:
                        if idx > !stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0:
                            revert with 0, 17
                        if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                            revert with 0, 33
                        mem[32] = 8
                        if idx + stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0 / 2 >= stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0:
                            revert with 0, 50
                        mem[0] = sha3(uint8(stor5[address(arg1)][arg2].field_1280), 8)
                        if stor8[uint8(stor5[address(arg1)][arg2].field_1280)][Mask(255, 1, idx + stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0)].field_0 >= stor5[address(arg1)][arg2].field_512:
                            idx = idx
                            continue 
                        if 1 > !(idx + stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0 / 2):
                            revert with 0, 17
                        idx = (idx + stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0 / 2) + 1
                        continue 
                    if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                        revert with 0, 33
                    idx = 0
                    while stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0 > idx:
                        if idx > !stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0:
                            revert with 0, 17
                        if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                            revert with 0, 33
                        mem[32] = 8
                        if idx + stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0 / 2 >= stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0:
                            revert with 0, 50
                        mem[0] = sha3(uint8(stor5[address(arg1)][arg2].field_1280), 8)
                        if stor8[uint8(stor5[address(arg1)][arg2].field_1280)][Mask(255, 1, idx + stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0)].field_0 >= stor5[address(arg1)][arg2].field_256:
                            idx = idx
                            continue 
                        if 1 > !(idx + stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0 / 2):
                            revert with 0, 17
                        idx = (idx + stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0 / 2) + 1
                        continue 
                    if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                        revert with 0, 33
                    s = 0
                    while stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0 > s:
                        if s > !stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0:
                            revert with 0, 17
                        if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                            revert with 0, 33
                        mem[32] = 8
                        if s + stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0 / 2 >= stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0:
                            revert with 0, 50
                        mem[0] = sha3(uint8(stor5[address(arg1)][arg2].field_1280), 8)
                        if stor8[uint8(stor5[address(arg1)][arg2].field_1280)][Mask(255, 1, s + stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0)].field_0 >= stor5[address(arg1)][arg2].field_512:
                            s = s
                            continue 
                        if 1 > !(s + stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0 / 2):
                            revert with 0, 17
                        s = (s + stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0 / 2) + 1
                        continue 
                    t = idx
                    u = stor5[address(arg1)][arg2].field_768
                    while t < s:
                        if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                            revert with 0, 33
                        mem[32] = 8
                        if t >= stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0:
                            revert with 0, 50
                        mem[0] = sha3(uint8(stor5[address(arg1)][arg2].field_1280), 8)
                        if 100 * 10^6 < stor8[uint8(stor5[address(arg1)][arg2].field_1280)][t].field_256 - 0x8000000000000000000000000000000000000000000000000000000000000000 and stor8[uint8(stor5[address(arg1)][arg2].field_1280)][t].field_256 >= 0:
                            revert with 0, 17
                        if stor8[uint8(stor5[address(arg1)][arg2].field_1280)][t].field_256 < 0 and 100 * 10^6 > stor8[uint8(stor5[address(arg1)][arg2].field_1280)][t].field_256 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                            revert with 0, 17
                        if u and -stor8[uint8(stor5[address(arg1)][arg2].field_1280)][t].field_256 + 100 * 10^6 > -1 / u:
                            revert with 0, 17
                        if t == -1:
                            revert with 0, 17
                        t = t + 1
                        u = (100 * 10^6 * u) - (stor8[uint8(stor5[address(arg1)][arg2].field_1280)][t].field_256 * u) / 100 * 10^6
                        continue 
                    if stor5[address(arg1)][arg2].field_512 < stor5[address(arg1)][arg2].field_256:
                        revert with 0, 17
                    if not sub_9b28d1a7:
                        revert with 0, 18
                    idx = stor5[address(arg1)][arg2].field_512 - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7
                    s = u
                    while idx:
                        if not idx:
                            revert with 0, 17
                        if 100 * 10^6 < sub_93520a80 - 0x8000000000000000000000000000000000000000000000000000000000000000 and sub_93520a80 >= 0:
                            revert with 0, 17
                        if sub_93520a80 < 0 and 100 * 10^6 > sub_93520a80 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                            revert with 0, 17
                        if s and -sub_93520a80 + 100 * 10^6 > -1 / s:
                            revert with 0, 17
                        idx = idx - 1
                        s = (100 * 10^6 * s) - (sub_93520a80 * s) / 100 * 10^6
                        continue 
                    if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                        revert with 0, 33
                    idx = var150001
                    s = var150002
                    t = var150004
                    u = var150005
                    v = var150006
                    w = var150007
                    x = var150008
                    y = var150009
                    while idx < stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0:
                        if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                            revert with 0, 33
                        if idx >= stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0:
                            revert with 0, 50
                        if x < stor5[address(arg1)][arg2].field_256:
                            revert with 0, 17
                        if not sub_9b28d1a7:
                            revert with 0, 18
                        if stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 < stor5[address(arg1)][arg2].field_256:
                            revert with 0, 17
                        if not sub_9b28d1a7:
                            revert with 0, 18
                        if stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 == x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7:
                            if stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 < x:
                                revert with 0, 17
                            if stor5[address(arg1)][arg2].field_1024 and y > -1 / stor5[address(arg1)][arg2].field_1024:
                                revert with 0, 17
                            if stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6 and stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 - x > -1 / stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6:
                                revert with 0, 17
                            if v > !((stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) - (x * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) / 8760 * 24 * 3600):
                                revert with 0, 17
                            if stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 != x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7:
                                if 100 * 10^6 < sub_93520a80 - 0x8000000000000000000000000000000000000000000000000000000000000000 and sub_93520a80 >= 0:
                                    revert with 0, 17
                                if sub_93520a80 < 0 and 100 * 10^6 > sub_93520a80 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                    revert with 0, 17
                                if y and -sub_93520a80 + 100 * 10^6 > -1 / y:
                                    revert with 0, 17
                                if not idx:
                                    revert with 0, 17
                                if idx - 1 == -1:
                                    revert with 0, 17
                                if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                                    revert with 0, 33
                                mem[0] = uint8(stor5[address(arg1)][arg2].field_1280)
                                mem[32] = 8
                                idx = idx
                                s = stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 != x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7
                                t = (stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) - (x * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) / 8760 * 24 * 3600
                                u = stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 - x
                                v = v + ((stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) - (x * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) / 8760 * 24 * 3600)
                                w = stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0
                                x = stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0
                                y = (100 * 10^6 * y) - (sub_93520a80 * y) / 100 * 10^6
                                continue 
                            if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                                revert with 0, 33
                            if idx >= stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0:
                                revert with 0, 50
                            if 100 * 10^6 < stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_256 - 0x8000000000000000000000000000000000000000000000000000000000000000 and stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_256 >= 0:
                                revert with 0, 17
                            if stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_256 < 0 and 100 * 10^6 > stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_256 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                revert with 0, 17
                            if y and -stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_256 + 100 * 10^6 > -1 / y:
                                revert with 0, 17
                            if idx == -1:
                                revert with 0, 17
                            if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                                revert with 0, 33
                            mem[0] = uint8(stor5[address(arg1)][arg2].field_1280)
                            mem[32] = 8
                            idx = idx + 1
                            s = stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 != x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7
                            t = (stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) - (x * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) / 8760 * 24 * 3600
                            u = stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 - x
                            v = v + ((stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) - (x * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) / 8760 * 24 * 3600)
                            w = stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0
                            x = stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0
                            y = (100 * 10^6 * y) - (stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_256 * y) / 100 * 10^6
                            continue 
                        if x < stor5[address(arg1)][arg2].field_256:
                            revert with 0, 17
                        if not sub_9b28d1a7:
                            revert with 0, 18
                        if 1 > !(x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7):
                            revert with 0, 17
                        if sub_9b28d1a7 and (x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7) + 1 > -1 / sub_9b28d1a7:
                            revert with 0, 17
                        if stor5[address(arg1)][arg2].field_256 > !(sub_9b28d1a7 + (x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 * sub_9b28d1a7)):
                            revert with 0, 17
                        if stor5[address(arg1)][arg2].field_256 + sub_9b28d1a7 + (x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 * sub_9b28d1a7) < x:
                            revert with 0, 17
                        if stor5[address(arg1)][arg2].field_1024 and y > -1 / stor5[address(arg1)][arg2].field_1024:
                            revert with 0, 17
                        if stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6 and stor5[address(arg1)][arg2].field_256 + sub_9b28d1a7 + (x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 * sub_9b28d1a7) - x > -1 / stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6:
                            revert with 0, 17
                        if v > !((stor5[address(arg1)][arg2].field_256 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) + (sub_9b28d1a7 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) + (x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 * sub_9b28d1a7 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) - (x * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) / 8760 * 24 * 3600):
                            revert with 0, 17
                        if stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 != x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7:
                            if 100 * 10^6 < sub_93520a80 - 0x8000000000000000000000000000000000000000000000000000000000000000 and sub_93520a80 >= 0:
                                revert with 0, 17
                            if sub_93520a80 < 0 and 100 * 10^6 > sub_93520a80 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                revert with 0, 17
                            if y and -sub_93520a80 + 100 * 10^6 > -1 / y:
                                revert with 0, 17
                            if not idx:
                                revert with 0, 17
                            if idx - 1 == -1:
                                revert with 0, 17
                            if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                                revert with 0, 33
                            mem[0] = uint8(stor5[address(arg1)][arg2].field_1280)
                            mem[32] = 8
                            idx = idx
                            s = stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 != x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7
                            t = (stor5[address(arg1)][arg2].field_256 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) + (sub_9b28d1a7 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) + (x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 * sub_9b28d1a7 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) - (x * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) / 8760 * 24 * 3600
                            u = stor5[address(arg1)][arg2].field_256 + sub_9b28d1a7 + (x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 * sub_9b28d1a7) - x
                            v = v + ((stor5[address(arg1)][arg2].field_256 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) + (sub_9b28d1a7 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) + (x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 * sub_9b28d1a7 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) - (x * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) / 8760 * 24 * 3600)
                            w = stor5[address(arg1)][arg2].field_256 + sub_9b28d1a7 + (x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 * sub_9b28d1a7)
                            x = stor5[address(arg1)][arg2].field_256 + sub_9b28d1a7 + (x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 * sub_9b28d1a7)
                            y = (100 * 10^6 * y) - (sub_93520a80 * y) / 100 * 10^6
                            continue 
                        if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                            revert with 0, 33
                        if idx >= stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0:
                            revert with 0, 50
                        if 100 * 10^6 < stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_256 - 0x8000000000000000000000000000000000000000000000000000000000000000 and stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_256 >= 0:
                            revert with 0, 17
                        if stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_256 < 0 and 100 * 10^6 > stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_256 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                            revert with 0, 17
                        if y and -stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_256 + 100 * 10^6 > -1 / y:
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                            revert with 0, 33
                        mem[0] = uint8(stor5[address(arg1)][arg2].field_1280)
                        mem[32] = 8
                        idx = idx + 1
                        s = stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 != x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7
                        t = (stor5[address(arg1)][arg2].field_256 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) + (sub_9b28d1a7 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) + (x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 * sub_9b28d1a7 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) - (x * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) / 8760 * 24 * 3600
                        u = stor5[address(arg1)][arg2].field_256 + sub_9b28d1a7 + (x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 * sub_9b28d1a7) - x
                        v = v + ((stor5[address(arg1)][arg2].field_256 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) + (sub_9b28d1a7 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) + (x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 * sub_9b28d1a7 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) - (x * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) / 8760 * 24 * 3600)
                        w = stor5[address(arg1)][arg2].field_256 + sub_9b28d1a7 + (x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 * sub_9b28d1a7)
                        x = stor5[address(arg1)][arg2].field_256 + sub_9b28d1a7 + (x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 * sub_9b28d1a7)
                        y = (100 * 10^6 * y) - (stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_256 * y) / 100 * 10^6
                        continue 
                else:
                    idx = 320
                    s = 0
                    while stor5[address(arg1)][arg2].field_1 % 128 + 288 > idx:
                        mem[idx + 32] = stor5[address(arg1)][(6 * arg2) + s].field_256
                        idx = idx + 32
                        s = s + 1
                        continue 
                    if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                        revert with 0, 33
                    if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                        revert with 0, 33
                    idx = 0
                    while stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0 > idx:
                        if idx > !stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0:
                            revert with 0, 17
                        if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                            revert with 0, 33
                        mem[32] = 8
                        if idx + stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0 / 2 >= stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0:
                            revert with 0, 50
                        mem[0] = sha3(uint8(stor5[address(arg1)][arg2].field_1280), 8)
                        if stor8[uint8(stor5[address(arg1)][arg2].field_1280)][Mask(255, 1, idx + stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0)].field_0 >= stor5[address(arg1)][arg2].field_512:
                            idx = idx
                            continue 
                        if 1 > !(idx + stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0 / 2):
                            revert with 0, 17
                        idx = (idx + stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0 / 2) + 1
                        continue 
                    if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                        revert with 0, 33
                    idx = 0
                    while stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0 > idx:
                        if idx > !stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0:
                            revert with 0, 17
                        if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                            revert with 0, 33
                        mem[32] = 8
                        if idx + stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0 / 2 >= stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0:
                            revert with 0, 50
                        mem[0] = sha3(uint8(stor5[address(arg1)][arg2].field_1280), 8)
                        if stor8[uint8(stor5[address(arg1)][arg2].field_1280)][Mask(255, 1, idx + stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0)].field_0 >= stor5[address(arg1)][arg2].field_256:
                            idx = idx
                            continue 
                        if 1 > !(idx + stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0 / 2):
                            revert with 0, 17
                        idx = (idx + stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0 / 2) + 1
                        continue 
                    if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                        revert with 0, 33
                    s = 0
                    while stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0 > s:
                        if s > !stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0:
                            revert with 0, 17
                        if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                            revert with 0, 33
                        mem[32] = 8
                        if s + stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0 / 2 >= stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0:
                            revert with 0, 50
                        mem[0] = sha3(uint8(stor5[address(arg1)][arg2].field_1280), 8)
                        if stor8[uint8(stor5[address(arg1)][arg2].field_1280)][Mask(255, 1, s + stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0)].field_0 >= stor5[address(arg1)][arg2].field_512:
                            s = s
                            continue 
                        if 1 > !(s + stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0 / 2):
                            revert with 0, 17
                        s = (s + stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0 / 2) + 1
                        continue 
                    t = idx
                    u = stor5[address(arg1)][arg2].field_768
                    while t < s:
                        if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                            revert with 0, 33
                        mem[32] = 8
                        if t >= stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0:
                            revert with 0, 50
                        mem[0] = sha3(uint8(stor5[address(arg1)][arg2].field_1280), 8)
                        if 100 * 10^6 < stor8[uint8(stor5[address(arg1)][arg2].field_1280)][t].field_256 - 0x8000000000000000000000000000000000000000000000000000000000000000 and stor8[uint8(stor5[address(arg1)][arg2].field_1280)][t].field_256 >= 0:
                            revert with 0, 17
                        if stor8[uint8(stor5[address(arg1)][arg2].field_1280)][t].field_256 < 0 and 100 * 10^6 > stor8[uint8(stor5[address(arg1)][arg2].field_1280)][t].field_256 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                            revert with 0, 17
                        if u and -stor8[uint8(stor5[address(arg1)][arg2].field_1280)][t].field_256 + 100 * 10^6 > -1 / u:
                            revert with 0, 17
                        if t == -1:
                            revert with 0, 17
                        t = t + 1
                        u = (100 * 10^6 * u) - (stor8[uint8(stor5[address(arg1)][arg2].field_1280)][t].field_256 * u) / 100 * 10^6
                        continue 
                    if stor5[address(arg1)][arg2].field_512 < stor5[address(arg1)][arg2].field_256:
                        revert with 0, 17
                    if not sub_9b28d1a7:
                        revert with 0, 18
                    idx = stor5[address(arg1)][arg2].field_512 - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7
                    s = u
                    while idx:
                        if not idx:
                            revert with 0, 17
                        if 100 * 10^6 < sub_93520a80 - 0x8000000000000000000000000000000000000000000000000000000000000000 and sub_93520a80 >= 0:
                            revert with 0, 17
                        if sub_93520a80 < 0 and 100 * 10^6 > sub_93520a80 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                            revert with 0, 17
                        if s and -sub_93520a80 + 100 * 10^6 > -1 / s:
                            revert with 0, 17
                        idx = idx - 1
                        s = (100 * 10^6 * s) - (sub_93520a80 * s) / 100 * 10^6
                        continue 
                    if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                        revert with 0, 33
                    idx = var153001
                    s = var153002
                    t = var153004
                    u = var153005
                    v = var153006
                    w = var153007
                    x = var153008
                    y = var153009
                    while idx < stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0:
                        if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                            revert with 0, 33
                        if idx >= stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0:
                            revert with 0, 50
                        if x < stor5[address(arg1)][arg2].field_256:
                            revert with 0, 17
                        if not sub_9b28d1a7:
                            revert with 0, 18
                        if stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 < stor5[address(arg1)][arg2].field_256:
                            revert with 0, 17
                        if not sub_9b28d1a7:
                            revert with 0, 18
                        if stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 == x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7:
                            if stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 < x:
                                revert with 0, 17
                            if stor5[address(arg1)][arg2].field_1024 and y > -1 / stor5[address(arg1)][arg2].field_1024:
                                revert with 0, 17
                            if stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6 and stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 - x > -1 / stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6:
                                revert with 0, 17
                            if v > !((stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) - (x * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) / 8760 * 24 * 3600):
                                revert with 0, 17
                            if stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 != x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7:
                                if 100 * 10^6 < sub_93520a80 - 0x8000000000000000000000000000000000000000000000000000000000000000 and sub_93520a80 >= 0:
                                    revert with 0, 17
                                if sub_93520a80 < 0 and 100 * 10^6 > sub_93520a80 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                    revert with 0, 17
                                if y and -sub_93520a80 + 100 * 10^6 > -1 / y:
                                    revert with 0, 17
                                if not idx:
                                    revert with 0, 17
                                if idx - 1 == -1:
                                    revert with 0, 17
                                if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                                    revert with 0, 33
                                mem[0] = uint8(stor5[address(arg1)][arg2].field_1280)
                                mem[32] = 8
                                idx = idx
                                s = stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 != x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7
                                t = (stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) - (x * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) / 8760 * 24 * 3600
                                u = stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 - x
                                v = v + ((stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) - (x * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) / 8760 * 24 * 3600)
                                w = stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0
                                x = stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0
                                y = (100 * 10^6 * y) - (sub_93520a80 * y) / 100 * 10^6
                                continue 
                            if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                                revert with 0, 33
                            if idx >= stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0:
                                revert with 0, 50
                            if 100 * 10^6 < stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_256 - 0x8000000000000000000000000000000000000000000000000000000000000000 and stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_256 >= 0:
                                revert with 0, 17
                            if stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_256 < 0 and 100 * 10^6 > stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_256 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                revert with 0, 17
                            if y and -stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_256 + 100 * 10^6 > -1 / y:
                                revert with 0, 17
                            if idx == -1:
                                revert with 0, 17
                            if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                                revert with 0, 33
                            mem[0] = uint8(stor5[address(arg1)][arg2].field_1280)
                            mem[32] = 8
                            idx = idx + 1
                            s = stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 != x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7
                            t = (stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) - (x * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) / 8760 * 24 * 3600
                            u = stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 - x
                            v = v + ((stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) - (x * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) / 8760 * 24 * 3600)
                            w = stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0
                            x = stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0
                            y = (100 * 10^6 * y) - (stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_256 * y) / 100 * 10^6
                            continue 
                        if x < stor5[address(arg1)][arg2].field_256:
                            revert with 0, 17
                        if not sub_9b28d1a7:
                            revert with 0, 18
                        if 1 > !(x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7):
                            revert with 0, 17
                        if sub_9b28d1a7 and (x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7) + 1 > -1 / sub_9b28d1a7:
                            revert with 0, 17
                        if stor5[address(arg1)][arg2].field_256 > !(sub_9b28d1a7 + (x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 * sub_9b28d1a7)):
                            revert with 0, 17
                        if stor5[address(arg1)][arg2].field_256 + sub_9b28d1a7 + (x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 * sub_9b28d1a7) < x:
                            revert with 0, 17
                        if stor5[address(arg1)][arg2].field_1024 and y > -1 / stor5[address(arg1)][arg2].field_1024:
                            revert with 0, 17
                        if stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6 and stor5[address(arg1)][arg2].field_256 + sub_9b28d1a7 + (x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 * sub_9b28d1a7) - x > -1 / stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6:
                            revert with 0, 17
                        if v > !((stor5[address(arg1)][arg2].field_256 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) + (sub_9b28d1a7 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) + (x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 * sub_9b28d1a7 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) - (x * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) / 8760 * 24 * 3600):
                            revert with 0, 17
                        if stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 != x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7:
                            if 100 * 10^6 < sub_93520a80 - 0x8000000000000000000000000000000000000000000000000000000000000000 and sub_93520a80 >= 0:
                                revert with 0, 17
                            if sub_93520a80 < 0 and 100 * 10^6 > sub_93520a80 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                revert with 0, 17
                            if y and -sub_93520a80 + 100 * 10^6 > -1 / y:
                                revert with 0, 17
                            if not idx:
                                revert with 0, 17
                            if idx - 1 == -1:
                                revert with 0, 17
                            if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                                revert with 0, 33
                            mem[0] = uint8(stor5[address(arg1)][arg2].field_1280)
                            mem[32] = 8
                            idx = idx
                            s = stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 != x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7
                            t = (stor5[address(arg1)][arg2].field_256 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) + (sub_9b28d1a7 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) + (x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 * sub_9b28d1a7 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) - (x * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) / 8760 * 24 * 3600
                            u = stor5[address(arg1)][arg2].field_256 + sub_9b28d1a7 + (x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 * sub_9b28d1a7) - x
                            v = v + ((stor5[address(arg1)][arg2].field_256 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) + (sub_9b28d1a7 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) + (x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 * sub_9b28d1a7 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) - (x * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) / 8760 * 24 * 3600)
                            w = stor5[address(arg1)][arg2].field_256 + sub_9b28d1a7 + (x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 * sub_9b28d1a7)
                            x = stor5[address(arg1)][arg2].field_256 + sub_9b28d1a7 + (x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 * sub_9b28d1a7)
                            y = (100 * 10^6 * y) - (sub_93520a80 * y) / 100 * 10^6
                            continue 
                        if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                            revert with 0, 33
                        if idx >= stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0:
                            revert with 0, 50
                        if 100 * 10^6 < stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_256 - 0x8000000000000000000000000000000000000000000000000000000000000000 and stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_256 >= 0:
                            revert with 0, 17
                        if stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_256 < 0 and 100 * 10^6 > stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_256 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                            revert with 0, 17
                        if y and -stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_256 + 100 * 10^6 > -1 / y:
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                            revert with 0, 33
                        mem[0] = uint8(stor5[address(arg1)][arg2].field_1280)
                        mem[32] = 8
                        idx = idx + 1
                        s = stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 != x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7
                        t = (stor5[address(arg1)][arg2].field_256 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) + (sub_9b28d1a7 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) + (x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 * sub_9b28d1a7 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) - (x * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) / 8760 * 24 * 3600
                        u = stor5[address(arg1)][arg2].field_256 + sub_9b28d1a7 + (x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 * sub_9b28d1a7) - x
                        v = v + ((stor5[address(arg1)][arg2].field_256 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) + (sub_9b28d1a7 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) + (x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 * sub_9b28d1a7 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) - (x * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) / 8760 * 24 * 3600)
                        w = stor5[address(arg1)][arg2].field_256 + sub_9b28d1a7 + (x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 * sub_9b28d1a7)
                        x = stor5[address(arg1)][arg2].field_256 + sub_9b28d1a7 + (x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 * sub_9b28d1a7)
                        y = (100 * 10^6 * y) - (stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_256 * y) / 100 * 10^6
                        continue 
    else:
        if bool(stor5[address(arg1)][arg2].field_0) == stor5[address(arg1)][arg2].field_1 % 128 < 32:
            revert with 0, 34
        if bool(stor5[address(arg1)][arg2].field_0):
            if bool(stor5[address(arg1)][arg2].field_0) == uint255(stor5[address(arg1)][arg2].field_0) * 0.5 < 32:
                revert with 0, 34
            if not Mask(256, -1, stor5[address(arg1)][arg2].field_0):
                if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                    revert with 0, 33
                if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                    revert with 0, 33
                idx = 0
                while stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0 > idx:
                    if idx > !stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0:
                        revert with 0, 17
                    if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                        revert with 0, 33
                    mem[32] = 8
                    if idx + stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0 / 2 >= stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0:
                        revert with 0, 50
                    mem[0] = sha3(uint8(stor5[address(arg1)][arg2].field_1280), 8)
                    if stor8[uint8(stor5[address(arg1)][arg2].field_1280)][Mask(255, 1, idx + stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0)].field_0 >= stor5[address(arg1)][arg2].field_512:
                        idx = idx
                        continue 
                    if 1 > !(idx + stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0 / 2):
                        revert with 0, 17
                    idx = (idx + stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0 / 2) + 1
                    continue 
                if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                    revert with 0, 33
                idx = 0
                while stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0 > idx:
                    if idx > !stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0:
                        revert with 0, 17
                    if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                        revert with 0, 33
                    mem[32] = 8
                    if idx + stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0 / 2 >= stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0:
                        revert with 0, 50
                    mem[0] = sha3(uint8(stor5[address(arg1)][arg2].field_1280), 8)
                    if stor8[uint8(stor5[address(arg1)][arg2].field_1280)][Mask(255, 1, idx + stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0)].field_0 >= stor5[address(arg1)][arg2].field_256:
                        idx = idx
                        continue 
                    if 1 > !(idx + stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0 / 2):
                        revert with 0, 17
                    idx = (idx + stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0 / 2) + 1
                    continue 
                if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                    revert with 0, 33
                s = 0
                while stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0 > s:
                    if s > !stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0:
                        revert with 0, 17
                    if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                        revert with 0, 33
                    mem[32] = 8
                    if s + stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0 / 2 >= stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0:
                        revert with 0, 50
                    mem[0] = sha3(uint8(stor5[address(arg1)][arg2].field_1280), 8)
                    if stor8[uint8(stor5[address(arg1)][arg2].field_1280)][Mask(255, 1, s + stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0)].field_0 >= stor5[address(arg1)][arg2].field_512:
                        s = s
                        continue 
                    if 1 > !(s + stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0 / 2):
                        revert with 0, 17
                    s = (s + stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0 / 2) + 1
                    continue 
                t = idx
                u = stor5[address(arg1)][arg2].field_768
                while t < s:
                    if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                        revert with 0, 33
                    mem[32] = 8
                    if t >= stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0:
                        revert with 0, 50
                    mem[0] = sha3(uint8(stor5[address(arg1)][arg2].field_1280), 8)
                    if 100 * 10^6 < stor8[uint8(stor5[address(arg1)][arg2].field_1280)][t].field_256 - 0x8000000000000000000000000000000000000000000000000000000000000000 and stor8[uint8(stor5[address(arg1)][arg2].field_1280)][t].field_256 >= 0:
                        revert with 0, 17
                    if stor8[uint8(stor5[address(arg1)][arg2].field_1280)][t].field_256 < 0 and 100 * 10^6 > stor8[uint8(stor5[address(arg1)][arg2].field_1280)][t].field_256 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                        revert with 0, 17
                    if u and -stor8[uint8(stor5[address(arg1)][arg2].field_1280)][t].field_256 + 100 * 10^6 > -1 / u:
                        revert with 0, 17
                    if t == -1:
                        revert with 0, 17
                    t = t + 1
                    u = (100 * 10^6 * u) - (stor8[uint8(stor5[address(arg1)][arg2].field_1280)][t].field_256 * u) / 100 * 10^6
                    continue 
                if stor5[address(arg1)][arg2].field_512 < stor5[address(arg1)][arg2].field_256:
                    revert with 0, 17
                if not sub_9b28d1a7:
                    revert with 0, 18
                idx = stor5[address(arg1)][arg2].field_512 - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7
                s = u
                while idx:
                    if not idx:
                        revert with 0, 17
                    if 100 * 10^6 < sub_93520a80 - 0x8000000000000000000000000000000000000000000000000000000000000000 and sub_93520a80 >= 0:
                        revert with 0, 17
                    if sub_93520a80 < 0 and 100 * 10^6 > sub_93520a80 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                        revert with 0, 17
                    if s and -sub_93520a80 + 100 * 10^6 > -1 / s:
                        revert with 0, 17
                    idx = idx - 1
                    s = (100 * 10^6 * s) - (sub_93520a80 * s) / 100 * 10^6
                    continue 
                if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                    revert with 0, 33
                idx = var148001
                s = var148002
                t = var148004
                u = var148005
                v = var148006
                w = var148007
                x = var148008
                y = var148009
                while idx < stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0:
                    if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                        revert with 0, 33
                    if idx >= stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0:
                        revert with 0, 50
                    if x < stor5[address(arg1)][arg2].field_256:
                        revert with 0, 17
                    if not sub_9b28d1a7:
                        revert with 0, 18
                    if stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 < stor5[address(arg1)][arg2].field_256:
                        revert with 0, 17
                    if not sub_9b28d1a7:
                        revert with 0, 18
                    if stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 == x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7:
                        if stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 < x:
                            revert with 0, 17
                        if stor5[address(arg1)][arg2].field_1024 and y > -1 / stor5[address(arg1)][arg2].field_1024:
                            revert with 0, 17
                        if stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6 and stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 - x > -1 / stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6:
                            revert with 0, 17
                        if v > !((stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) - (x * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) / 8760 * 24 * 3600):
                            revert with 0, 17
                        if stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 != x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7:
                            if 100 * 10^6 < sub_93520a80 - 0x8000000000000000000000000000000000000000000000000000000000000000 and sub_93520a80 >= 0:
                                revert with 0, 17
                            if sub_93520a80 < 0 and 100 * 10^6 > sub_93520a80 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                revert with 0, 17
                            if y and -sub_93520a80 + 100 * 10^6 > -1 / y:
                                revert with 0, 17
                            if not idx:
                                revert with 0, 17
                            if idx - 1 == -1:
                                revert with 0, 17
                            if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                                revert with 0, 33
                            mem[0] = uint8(stor5[address(arg1)][arg2].field_1280)
                            mem[32] = 8
                            idx = idx
                            s = stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 != x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7
                            t = (stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) - (x * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) / 8760 * 24 * 3600
                            u = stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 - x
                            v = v + ((stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) - (x * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) / 8760 * 24 * 3600)
                            w = stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0
                            x = stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0
                            y = (100 * 10^6 * y) - (sub_93520a80 * y) / 100 * 10^6
                            continue 
                        if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                            revert with 0, 33
                        if idx >= stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0:
                            revert with 0, 50
                        if 100 * 10^6 < stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_256 - 0x8000000000000000000000000000000000000000000000000000000000000000 and stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_256 >= 0:
                            revert with 0, 17
                        if stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_256 < 0 and 100 * 10^6 > stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_256 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                            revert with 0, 17
                        if y and -stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_256 + 100 * 10^6 > -1 / y:
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                            revert with 0, 33
                        mem[0] = uint8(stor5[address(arg1)][arg2].field_1280)
                        mem[32] = 8
                        idx = idx + 1
                        s = stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 != x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7
                        t = (stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) - (x * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) / 8760 * 24 * 3600
                        u = stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 - x
                        v = v + ((stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) - (x * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) / 8760 * 24 * 3600)
                        w = stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0
                        x = stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0
                        y = (100 * 10^6 * y) - (stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_256 * y) / 100 * 10^6
                        continue 
                    if x < stor5[address(arg1)][arg2].field_256:
                        revert with 0, 17
                    if not sub_9b28d1a7:
                        revert with 0, 18
                    if 1 > !(x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7):
                        revert with 0, 17
                    if sub_9b28d1a7 and (x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7) + 1 > -1 / sub_9b28d1a7:
                        revert with 0, 17
                    if stor5[address(arg1)][arg2].field_256 > !(sub_9b28d1a7 + (x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 * sub_9b28d1a7)):
                        revert with 0, 17
                    if stor5[address(arg1)][arg2].field_256 + sub_9b28d1a7 + (x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 * sub_9b28d1a7) < x:
                        revert with 0, 17
                    if stor5[address(arg1)][arg2].field_1024 and y > -1 / stor5[address(arg1)][arg2].field_1024:
                        revert with 0, 17
                    if stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6 and stor5[address(arg1)][arg2].field_256 + sub_9b28d1a7 + (x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 * sub_9b28d1a7) - x > -1 / stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6:
                        revert with 0, 17
                    if v > !((stor5[address(arg1)][arg2].field_256 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) + (sub_9b28d1a7 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) + (x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 * sub_9b28d1a7 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) - (x * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) / 8760 * 24 * 3600):
                        revert with 0, 17
                    if stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 != x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7:
                        if 100 * 10^6 < sub_93520a80 - 0x8000000000000000000000000000000000000000000000000000000000000000 and sub_93520a80 >= 0:
                            revert with 0, 17
                        if sub_93520a80 < 0 and 100 * 10^6 > sub_93520a80 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                            revert with 0, 17
                        if y and -sub_93520a80 + 100 * 10^6 > -1 / y:
                            revert with 0, 17
                        if not idx:
                            revert with 0, 17
                        if idx - 1 == -1:
                            revert with 0, 17
                        if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                            revert with 0, 33
                        mem[0] = uint8(stor5[address(arg1)][arg2].field_1280)
                        mem[32] = 8
                        idx = idx
                        s = stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 != x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7
                        t = (stor5[address(arg1)][arg2].field_256 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) + (sub_9b28d1a7 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) + (x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 * sub_9b28d1a7 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) - (x * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) / 8760 * 24 * 3600
                        u = stor5[address(arg1)][arg2].field_256 + sub_9b28d1a7 + (x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 * sub_9b28d1a7) - x
                        v = v + ((stor5[address(arg1)][arg2].field_256 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) + (sub_9b28d1a7 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) + (x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 * sub_9b28d1a7 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) - (x * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) / 8760 * 24 * 3600)
                        w = stor5[address(arg1)][arg2].field_256 + sub_9b28d1a7 + (x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 * sub_9b28d1a7)
                        x = stor5[address(arg1)][arg2].field_256 + sub_9b28d1a7 + (x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 * sub_9b28d1a7)
                        y = (100 * 10^6 * y) - (sub_93520a80 * y) / 100 * 10^6
                        continue 
                    if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                        revert with 0, 33
                    if idx >= stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0:
                        revert with 0, 50
                    if 100 * 10^6 < stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_256 - 0x8000000000000000000000000000000000000000000000000000000000000000 and stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_256 >= 0:
                        revert with 0, 17
                    if stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_256 < 0 and 100 * 10^6 > stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_256 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                        revert with 0, 17
                    if y and -stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_256 + 100 * 10^6 > -1 / y:
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                        revert with 0, 33
                    mem[0] = uint8(stor5[address(arg1)][arg2].field_1280)
                    mem[32] = 8
                    idx = idx + 1
                    s = stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 != x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7
                    t = (stor5[address(arg1)][arg2].field_256 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) + (sub_9b28d1a7 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) + (x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 * sub_9b28d1a7 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) - (x * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) / 8760 * 24 * 3600
                    u = stor5[address(arg1)][arg2].field_256 + sub_9b28d1a7 + (x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 * sub_9b28d1a7) - x
                    v = v + ((stor5[address(arg1)][arg2].field_256 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) + (sub_9b28d1a7 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) + (x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 * sub_9b28d1a7 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) - (x * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) / 8760 * 24 * 3600)
                    w = stor5[address(arg1)][arg2].field_256 + sub_9b28d1a7 + (x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 * sub_9b28d1a7)
                    x = stor5[address(arg1)][arg2].field_256 + sub_9b28d1a7 + (x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 * sub_9b28d1a7)
                    y = (100 * 10^6 * y) - (stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_256 * y) / 100 * 10^6
                    continue 
            else:
                if 31 >= uint255(stor5[address(arg1)][arg2].field_0) * 0.5:
                    if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                        revert with 0, 33
                    if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                        revert with 0, 33
                    idx = 0
                    while stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0 > idx:
                        if idx > !stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0:
                            revert with 0, 17
                        if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                            revert with 0, 33
                        mem[32] = 8
                        if idx + stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0 / 2 >= stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0:
                            revert with 0, 50
                        mem[0] = sha3(uint8(stor5[address(arg1)][arg2].field_1280), 8)
                        if stor8[uint8(stor5[address(arg1)][arg2].field_1280)][Mask(255, 1, idx + stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0)].field_0 >= stor5[address(arg1)][arg2].field_512:
                            idx = idx
                            continue 
                        if 1 > !(idx + stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0 / 2):
                            revert with 0, 17
                        idx = (idx + stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0 / 2) + 1
                        continue 
                    if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                        revert with 0, 33
                    idx = 0
                    while stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0 > idx:
                        if idx > !stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0:
                            revert with 0, 17
                        if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                            revert with 0, 33
                        mem[32] = 8
                        if idx + stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0 / 2 >= stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0:
                            revert with 0, 50
                        mem[0] = sha3(uint8(stor5[address(arg1)][arg2].field_1280), 8)
                        if stor8[uint8(stor5[address(arg1)][arg2].field_1280)][Mask(255, 1, idx + stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0)].field_0 >= stor5[address(arg1)][arg2].field_256:
                            idx = idx
                            continue 
                        if 1 > !(idx + stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0 / 2):
                            revert with 0, 17
                        idx = (idx + stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0 / 2) + 1
                        continue 
                    if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                        revert with 0, 33
                    s = 0
                    while stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0 > s:
                        if s > !stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0:
                            revert with 0, 17
                        if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                            revert with 0, 33
                        mem[32] = 8
                        if s + stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0 / 2 >= stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0:
                            revert with 0, 50
                        mem[0] = sha3(uint8(stor5[address(arg1)][arg2].field_1280), 8)
                        if stor8[uint8(stor5[address(arg1)][arg2].field_1280)][Mask(255, 1, s + stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0)].field_0 >= stor5[address(arg1)][arg2].field_512:
                            s = s
                            continue 
                        if 1 > !(s + stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0 / 2):
                            revert with 0, 17
                        s = (s + stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0 / 2) + 1
                        continue 
                    t = idx
                    u = stor5[address(arg1)][arg2].field_768
                    while t < s:
                        if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                            revert with 0, 33
                        mem[32] = 8
                        if t >= stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0:
                            revert with 0, 50
                        mem[0] = sha3(uint8(stor5[address(arg1)][arg2].field_1280), 8)
                        if 100 * 10^6 < stor8[uint8(stor5[address(arg1)][arg2].field_1280)][t].field_256 - 0x8000000000000000000000000000000000000000000000000000000000000000 and stor8[uint8(stor5[address(arg1)][arg2].field_1280)][t].field_256 >= 0:
                            revert with 0, 17
                        if stor8[uint8(stor5[address(arg1)][arg2].field_1280)][t].field_256 < 0 and 100 * 10^6 > stor8[uint8(stor5[address(arg1)][arg2].field_1280)][t].field_256 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                            revert with 0, 17
                        if u and -stor8[uint8(stor5[address(arg1)][arg2].field_1280)][t].field_256 + 100 * 10^6 > -1 / u:
                            revert with 0, 17
                        if t == -1:
                            revert with 0, 17
                        t = t + 1
                        u = (100 * 10^6 * u) - (stor8[uint8(stor5[address(arg1)][arg2].field_1280)][t].field_256 * u) / 100 * 10^6
                        continue 
                    if stor5[address(arg1)][arg2].field_512 < stor5[address(arg1)][arg2].field_256:
                        revert with 0, 17
                    if not sub_9b28d1a7:
                        revert with 0, 18
                    idx = stor5[address(arg1)][arg2].field_512 - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7
                    s = u
                    while idx:
                        if not idx:
                            revert with 0, 17
                        if 100 * 10^6 < sub_93520a80 - 0x8000000000000000000000000000000000000000000000000000000000000000 and sub_93520a80 >= 0:
                            revert with 0, 17
                        if sub_93520a80 < 0 and 100 * 10^6 > sub_93520a80 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                            revert with 0, 17
                        if s and -sub_93520a80 + 100 * 10^6 > -1 / s:
                            revert with 0, 17
                        idx = idx - 1
                        s = (100 * 10^6 * s) - (sub_93520a80 * s) / 100 * 10^6
                        continue 
                    if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                        revert with 0, 33
                    idx = var150001
                    s = var150002
                    t = var150004
                    u = var150005
                    v = var150006
                    w = var150007
                    x = var150008
                    y = var150009
                    while idx < stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0:
                        if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                            revert with 0, 33
                        if idx >= stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0:
                            revert with 0, 50
                        if x < stor5[address(arg1)][arg2].field_256:
                            revert with 0, 17
                        if not sub_9b28d1a7:
                            revert with 0, 18
                        if stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 < stor5[address(arg1)][arg2].field_256:
                            revert with 0, 17
                        if not sub_9b28d1a7:
                            revert with 0, 18
                        if stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 == x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7:
                            if stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 < x:
                                revert with 0, 17
                            if stor5[address(arg1)][arg2].field_1024 and y > -1 / stor5[address(arg1)][arg2].field_1024:
                                revert with 0, 17
                            if stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6 and stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 - x > -1 / stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6:
                                revert with 0, 17
                            if v > !((stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) - (x * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) / 8760 * 24 * 3600):
                                revert with 0, 17
                            if stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 != x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7:
                                if 100 * 10^6 < sub_93520a80 - 0x8000000000000000000000000000000000000000000000000000000000000000 and sub_93520a80 >= 0:
                                    revert with 0, 17
                                if sub_93520a80 < 0 and 100 * 10^6 > sub_93520a80 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                    revert with 0, 17
                                if y and -sub_93520a80 + 100 * 10^6 > -1 / y:
                                    revert with 0, 17
                                if not idx:
                                    revert with 0, 17
                                if idx - 1 == -1:
                                    revert with 0, 17
                                if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                                    revert with 0, 33
                                mem[0] = uint8(stor5[address(arg1)][arg2].field_1280)
                                mem[32] = 8
                                idx = idx
                                s = stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 != x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7
                                t = (stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) - (x * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) / 8760 * 24 * 3600
                                u = stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 - x
                                v = v + ((stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) - (x * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) / 8760 * 24 * 3600)
                                w = stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0
                                x = stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0
                                y = (100 * 10^6 * y) - (sub_93520a80 * y) / 100 * 10^6
                                continue 
                            if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                                revert with 0, 33
                            if idx >= stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0:
                                revert with 0, 50
                            if 100 * 10^6 < stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_256 - 0x8000000000000000000000000000000000000000000000000000000000000000 and stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_256 >= 0:
                                revert with 0, 17
                            if stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_256 < 0 and 100 * 10^6 > stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_256 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                revert with 0, 17
                            if y and -stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_256 + 100 * 10^6 > -1 / y:
                                revert with 0, 17
                            if idx == -1:
                                revert with 0, 17
                            if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                                revert with 0, 33
                            mem[0] = uint8(stor5[address(arg1)][arg2].field_1280)
                            mem[32] = 8
                            idx = idx + 1
                            s = stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 != x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7
                            t = (stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) - (x * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) / 8760 * 24 * 3600
                            u = stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 - x
                            v = v + ((stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) - (x * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) / 8760 * 24 * 3600)
                            w = stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0
                            x = stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0
                            y = (100 * 10^6 * y) - (stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_256 * y) / 100 * 10^6
                            continue 
                        if x < stor5[address(arg1)][arg2].field_256:
                            revert with 0, 17
                        if not sub_9b28d1a7:
                            revert with 0, 18
                        if 1 > !(x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7):
                            revert with 0, 17
                        if sub_9b28d1a7 and (x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7) + 1 > -1 / sub_9b28d1a7:
                            revert with 0, 17
                        if stor5[address(arg1)][arg2].field_256 > !(sub_9b28d1a7 + (x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 * sub_9b28d1a7)):
                            revert with 0, 17
                        if stor5[address(arg1)][arg2].field_256 + sub_9b28d1a7 + (x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 * sub_9b28d1a7) < x:
                            revert with 0, 17
                        if stor5[address(arg1)][arg2].field_1024 and y > -1 / stor5[address(arg1)][arg2].field_1024:
                            revert with 0, 17
                        if stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6 and stor5[address(arg1)][arg2].field_256 + sub_9b28d1a7 + (x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 * sub_9b28d1a7) - x > -1 / stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6:
                            revert with 0, 17
                        if v > !((stor5[address(arg1)][arg2].field_256 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) + (sub_9b28d1a7 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) + (x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 * sub_9b28d1a7 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) - (x * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) / 8760 * 24 * 3600):
                            revert with 0, 17
                        if stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 != x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7:
                            if 100 * 10^6 < sub_93520a80 - 0x8000000000000000000000000000000000000000000000000000000000000000 and sub_93520a80 >= 0:
                                revert with 0, 17
                            if sub_93520a80 < 0 and 100 * 10^6 > sub_93520a80 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                revert with 0, 17
                            if y and -sub_93520a80 + 100 * 10^6 > -1 / y:
                                revert with 0, 17
                            if not idx:
                                revert with 0, 17
                            if idx - 1 == -1:
                                revert with 0, 17
                            if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                                revert with 0, 33
                            mem[0] = uint8(stor5[address(arg1)][arg2].field_1280)
                            mem[32] = 8
                            idx = idx
                            s = stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 != x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7
                            t = (stor5[address(arg1)][arg2].field_256 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) + (sub_9b28d1a7 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) + (x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 * sub_9b28d1a7 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) - (x * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) / 8760 * 24 * 3600
                            u = stor5[address(arg1)][arg2].field_256 + sub_9b28d1a7 + (x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 * sub_9b28d1a7) - x
                            v = v + ((stor5[address(arg1)][arg2].field_256 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) + (sub_9b28d1a7 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) + (x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 * sub_9b28d1a7 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) - (x * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) / 8760 * 24 * 3600)
                            w = stor5[address(arg1)][arg2].field_256 + sub_9b28d1a7 + (x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 * sub_9b28d1a7)
                            x = stor5[address(arg1)][arg2].field_256 + sub_9b28d1a7 + (x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 * sub_9b28d1a7)
                            y = (100 * 10^6 * y) - (sub_93520a80 * y) / 100 * 10^6
                            continue 
                        if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                            revert with 0, 33
                        if idx >= stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0:
                            revert with 0, 50
                        if 100 * 10^6 < stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_256 - 0x8000000000000000000000000000000000000000000000000000000000000000 and stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_256 >= 0:
                            revert with 0, 17
                        if stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_256 < 0 and 100 * 10^6 > stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_256 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                            revert with 0, 17
                        if y and -stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_256 + 100 * 10^6 > -1 / y:
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                            revert with 0, 33
                        mem[0] = uint8(stor5[address(arg1)][arg2].field_1280)
                        mem[32] = 8
                        idx = idx + 1
                        s = stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 != x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7
                        t = (stor5[address(arg1)][arg2].field_256 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) + (sub_9b28d1a7 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) + (x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 * sub_9b28d1a7 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) - (x * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) / 8760 * 24 * 3600
                        u = stor5[address(arg1)][arg2].field_256 + sub_9b28d1a7 + (x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 * sub_9b28d1a7) - x
                        v = v + ((stor5[address(arg1)][arg2].field_256 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) + (sub_9b28d1a7 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) + (x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 * sub_9b28d1a7 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) - (x * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) / 8760 * 24 * 3600)
                        w = stor5[address(arg1)][arg2].field_256 + sub_9b28d1a7 + (x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 * sub_9b28d1a7)
                        x = stor5[address(arg1)][arg2].field_256 + sub_9b28d1a7 + (x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 * sub_9b28d1a7)
                        y = (100 * 10^6 * y) - (stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_256 * y) / 100 * 10^6
                        continue 
                else:
                    idx = 320
                    s = 0
                    while (uint255(stor5[address(arg1)][arg2].field_0) * 0.5) + 288 > idx:
                        mem[idx + 32] = stor5[address(arg1)][(6 * arg2) + s].field_256
                        idx = idx + 32
                        s = s + 1
                        continue 
                    if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                        revert with 0, 33
                    if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                        revert with 0, 33
                    idx = 0
                    while stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0 > idx:
                        if idx > !stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0:
                            revert with 0, 17
                        if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                            revert with 0, 33
                        mem[32] = 8
                        if idx + stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0 / 2 >= stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0:
                            revert with 0, 50
                        mem[0] = sha3(uint8(stor5[address(arg1)][arg2].field_1280), 8)
                        if stor8[uint8(stor5[address(arg1)][arg2].field_1280)][Mask(255, 1, idx + stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0)].field_0 >= stor5[address(arg1)][arg2].field_512:
                            idx = idx
                            continue 
                        if 1 > !(idx + stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0 / 2):
                            revert with 0, 17
                        idx = (idx + stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0 / 2) + 1
                        continue 
                    if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                        revert with 0, 33
                    idx = 0
                    while stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0 > idx:
                        if idx > !stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0:
                            revert with 0, 17
                        if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                            revert with 0, 33
                        mem[32] = 8
                        if idx + stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0 / 2 >= stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0:
                            revert with 0, 50
                        mem[0] = sha3(uint8(stor5[address(arg1)][arg2].field_1280), 8)
                        if stor8[uint8(stor5[address(arg1)][arg2].field_1280)][Mask(255, 1, idx + stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0)].field_0 >= stor5[address(arg1)][arg2].field_256:
                            idx = idx
                            continue 
                        if 1 > !(idx + stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0 / 2):
                            revert with 0, 17
                        idx = (idx + stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0 / 2) + 1
                        continue 
                    if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                        revert with 0, 33
                    s = 0
                    while stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0 > s:
                        if s > !stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0:
                            revert with 0, 17
                        if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                            revert with 0, 33
                        mem[32] = 8
                        if s + stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0 / 2 >= stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0:
                            revert with 0, 50
                        mem[0] = sha3(uint8(stor5[address(arg1)][arg2].field_1280), 8)
                        if stor8[uint8(stor5[address(arg1)][arg2].field_1280)][Mask(255, 1, s + stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0)].field_0 >= stor5[address(arg1)][arg2].field_512:
                            s = s
                            continue 
                        if 1 > !(s + stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0 / 2):
                            revert with 0, 17
                        s = (s + stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0 / 2) + 1
                        continue 
                    t = idx
                    u = stor5[address(arg1)][arg2].field_768
                    while t < s:
                        if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                            revert with 0, 33
                        mem[32] = 8
                        if t >= stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0:
                            revert with 0, 50
                        mem[0] = sha3(uint8(stor5[address(arg1)][arg2].field_1280), 8)
                        if 100 * 10^6 < stor8[uint8(stor5[address(arg1)][arg2].field_1280)][t].field_256 - 0x8000000000000000000000000000000000000000000000000000000000000000 and stor8[uint8(stor5[address(arg1)][arg2].field_1280)][t].field_256 >= 0:
                            revert with 0, 17
                        if stor8[uint8(stor5[address(arg1)][arg2].field_1280)][t].field_256 < 0 and 100 * 10^6 > stor8[uint8(stor5[address(arg1)][arg2].field_1280)][t].field_256 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                            revert with 0, 17
                        if u and -stor8[uint8(stor5[address(arg1)][arg2].field_1280)][t].field_256 + 100 * 10^6 > -1 / u:
                            revert with 0, 17
                        if t == -1:
                            revert with 0, 17
                        t = t + 1
                        u = (100 * 10^6 * u) - (stor8[uint8(stor5[address(arg1)][arg2].field_1280)][t].field_256 * u) / 100 * 10^6
                        continue 
                    if stor5[address(arg1)][arg2].field_512 < stor5[address(arg1)][arg2].field_256:
                        revert with 0, 17
                    if not sub_9b28d1a7:
                        revert with 0, 18
                    idx = stor5[address(arg1)][arg2].field_512 - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7
                    s = u
                    while idx:
                        if not idx:
                            revert with 0, 17
                        if 100 * 10^6 < sub_93520a80 - 0x8000000000000000000000000000000000000000000000000000000000000000 and sub_93520a80 >= 0:
                            revert with 0, 17
                        if sub_93520a80 < 0 and 100 * 10^6 > sub_93520a80 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                            revert with 0, 17
                        if s and -sub_93520a80 + 100 * 10^6 > -1 / s:
                            revert with 0, 17
                        idx = idx - 1
                        s = (100 * 10^6 * s) - (sub_93520a80 * s) / 100 * 10^6
                        continue 
                    if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                        revert with 0, 33
                    idx = var153001
                    s = var153002
                    t = var153004
                    u = var153005
                    v = var153006
                    w = var153007
                    x = var153008
                    y = var153009
                    while idx < stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0:
                        if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                            revert with 0, 33
                        if idx >= stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0:
                            revert with 0, 50
                        if x < stor5[address(arg1)][arg2].field_256:
                            revert with 0, 17
                        if not sub_9b28d1a7:
                            revert with 0, 18
                        if stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 < stor5[address(arg1)][arg2].field_256:
                            revert with 0, 17
                        if not sub_9b28d1a7:
                            revert with 0, 18
                        if stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 == x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7:
                            if stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 < x:
                                revert with 0, 17
                            if stor5[address(arg1)][arg2].field_1024 and y > -1 / stor5[address(arg1)][arg2].field_1024:
                                revert with 0, 17
                            if stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6 and stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 - x > -1 / stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6:
                                revert with 0, 17
                            if v > !((stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) - (x * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) / 8760 * 24 * 3600):
                                revert with 0, 17
                            if stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 != x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7:
                                if 100 * 10^6 < sub_93520a80 - 0x8000000000000000000000000000000000000000000000000000000000000000 and sub_93520a80 >= 0:
                                    revert with 0, 17
                                if sub_93520a80 < 0 and 100 * 10^6 > sub_93520a80 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                    revert with 0, 17
                                if y and -sub_93520a80 + 100 * 10^6 > -1 / y:
                                    revert with 0, 17
                                if not idx:
                                    revert with 0, 17
                                if idx - 1 == -1:
                                    revert with 0, 17
                                if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                                    revert with 0, 33
                                mem[0] = uint8(stor5[address(arg1)][arg2].field_1280)
                                mem[32] = 8
                                idx = idx
                                s = stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 != x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7
                                t = (stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) - (x * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) / 8760 * 24 * 3600
                                u = stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 - x
                                v = v + ((stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) - (x * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) / 8760 * 24 * 3600)
                                w = stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0
                                x = stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0
                                y = (100 * 10^6 * y) - (sub_93520a80 * y) / 100 * 10^6
                                continue 
                            if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                                revert with 0, 33
                            if idx >= stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0:
                                revert with 0, 50
                            if 100 * 10^6 < stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_256 - 0x8000000000000000000000000000000000000000000000000000000000000000 and stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_256 >= 0:
                                revert with 0, 17
                            if stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_256 < 0 and 100 * 10^6 > stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_256 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                revert with 0, 17
                            if y and -stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_256 + 100 * 10^6 > -1 / y:
                                revert with 0, 17
                            if idx == -1:
                                revert with 0, 17
                            if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                                revert with 0, 33
                            mem[0] = uint8(stor5[address(arg1)][arg2].field_1280)
                            mem[32] = 8
                            idx = idx + 1
                            s = stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 != x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7
                            t = (stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) - (x * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) / 8760 * 24 * 3600
                            u = stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 - x
                            v = v + ((stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) - (x * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) / 8760 * 24 * 3600)
                            w = stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0
                            x = stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0
                            y = (100 * 10^6 * y) - (stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_256 * y) / 100 * 10^6
                            continue 
                        if x < stor5[address(arg1)][arg2].field_256:
                            revert with 0, 17
                        if not sub_9b28d1a7:
                            revert with 0, 18
                        if 1 > !(x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7):
                            revert with 0, 17
                        if sub_9b28d1a7 and (x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7) + 1 > -1 / sub_9b28d1a7:
                            revert with 0, 17
                        if stor5[address(arg1)][arg2].field_256 > !(sub_9b28d1a7 + (x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 * sub_9b28d1a7)):
                            revert with 0, 17
                        if stor5[address(arg1)][arg2].field_256 + sub_9b28d1a7 + (x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 * sub_9b28d1a7) < x:
                            revert with 0, 17
                        if stor5[address(arg1)][arg2].field_1024 and y > -1 / stor5[address(arg1)][arg2].field_1024:
                            revert with 0, 17
                        if stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6 and stor5[address(arg1)][arg2].field_256 + sub_9b28d1a7 + (x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 * sub_9b28d1a7) - x > -1 / stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6:
                            revert with 0, 17
                        if v > !((stor5[address(arg1)][arg2].field_256 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) + (sub_9b28d1a7 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) + (x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 * sub_9b28d1a7 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) - (x * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) / 8760 * 24 * 3600):
                            revert with 0, 17
                        if stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 != x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7:
                            if 100 * 10^6 < sub_93520a80 - 0x8000000000000000000000000000000000000000000000000000000000000000 and sub_93520a80 >= 0:
                                revert with 0, 17
                            if sub_93520a80 < 0 and 100 * 10^6 > sub_93520a80 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                revert with 0, 17
                            if y and -sub_93520a80 + 100 * 10^6 > -1 / y:
                                revert with 0, 17
                            if not idx:
                                revert with 0, 17
                            if idx - 1 == -1:
                                revert with 0, 17
                            if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                                revert with 0, 33
                            mem[0] = uint8(stor5[address(arg1)][arg2].field_1280)
                            mem[32] = 8
                            idx = idx
                            s = stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 != x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7
                            t = (stor5[address(arg1)][arg2].field_256 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) + (sub_9b28d1a7 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) + (x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 * sub_9b28d1a7 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) - (x * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) / 8760 * 24 * 3600
                            u = stor5[address(arg1)][arg2].field_256 + sub_9b28d1a7 + (x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 * sub_9b28d1a7) - x
                            v = v + ((stor5[address(arg1)][arg2].field_256 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) + (sub_9b28d1a7 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) + (x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 * sub_9b28d1a7 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) - (x * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) / 8760 * 24 * 3600)
                            w = stor5[address(arg1)][arg2].field_256 + sub_9b28d1a7 + (x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 * sub_9b28d1a7)
                            x = stor5[address(arg1)][arg2].field_256 + sub_9b28d1a7 + (x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 * sub_9b28d1a7)
                            y = (100 * 10^6 * y) - (sub_93520a80 * y) / 100 * 10^6
                            continue 
                        if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                            revert with 0, 33
                        if idx >= stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0:
                            revert with 0, 50
                        if 100 * 10^6 < stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_256 - 0x8000000000000000000000000000000000000000000000000000000000000000 and stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_256 >= 0:
                            revert with 0, 17
                        if stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_256 < 0 and 100 * 10^6 > stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_256 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                            revert with 0, 17
                        if y and -stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_256 + 100 * 10^6 > -1 / y:
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                            revert with 0, 33
                        mem[0] = uint8(stor5[address(arg1)][arg2].field_1280)
                        mem[32] = 8
                        idx = idx + 1
                        s = stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 != x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7
                        t = (stor5[address(arg1)][arg2].field_256 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) + (sub_9b28d1a7 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) + (x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 * sub_9b28d1a7 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) - (x * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) / 8760 * 24 * 3600
                        u = stor5[address(arg1)][arg2].field_256 + sub_9b28d1a7 + (x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 * sub_9b28d1a7) - x
                        v = v + ((stor5[address(arg1)][arg2].field_256 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) + (sub_9b28d1a7 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) + (x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 * sub_9b28d1a7 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) - (x * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) / 8760 * 24 * 3600)
                        w = stor5[address(arg1)][arg2].field_256 + sub_9b28d1a7 + (x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 * sub_9b28d1a7)
                        x = stor5[address(arg1)][arg2].field_256 + sub_9b28d1a7 + (x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 * sub_9b28d1a7)
                        y = (100 * 10^6 * y) - (stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_256 * y) / 100 * 10^6
                        continue 
        else:
            if bool(stor5[address(arg1)][arg2].field_0) == stor5[address(arg1)][arg2].field_1 % 128 < 32:
                revert with 0, 34
            if not stor5[address(arg1)][arg2].field_1 % 128:
                if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                    revert with 0, 33
                if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                    revert with 0, 33
                idx = 0
                while stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0 > idx:
                    if idx > !stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0:
                        revert with 0, 17
                    if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                        revert with 0, 33
                    mem[32] = 8
                    if idx + stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0 / 2 >= stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0:
                        revert with 0, 50
                    mem[0] = sha3(uint8(stor5[address(arg1)][arg2].field_1280), 8)
                    if stor8[uint8(stor5[address(arg1)][arg2].field_1280)][Mask(255, 1, idx + stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0)].field_0 >= stor5[address(arg1)][arg2].field_512:
                        idx = idx
                        continue 
                    if 1 > !(idx + stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0 / 2):
                        revert with 0, 17
                    idx = (idx + stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0 / 2) + 1
                    continue 
                if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                    revert with 0, 33
                idx = 0
                while stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0 > idx:
                    if idx > !stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0:
                        revert with 0, 17
                    if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                        revert with 0, 33
                    mem[32] = 8
                    if idx + stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0 / 2 >= stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0:
                        revert with 0, 50
                    mem[0] = sha3(uint8(stor5[address(arg1)][arg2].field_1280), 8)
                    if stor8[uint8(stor5[address(arg1)][arg2].field_1280)][Mask(255, 1, idx + stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0)].field_0 >= stor5[address(arg1)][arg2].field_256:
                        idx = idx
                        continue 
                    if 1 > !(idx + stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0 / 2):
                        revert with 0, 17
                    idx = (idx + stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0 / 2) + 1
                    continue 
                if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                    revert with 0, 33
                s = 0
                while stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0 > s:
                    if s > !stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0:
                        revert with 0, 17
                    if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                        revert with 0, 33
                    mem[32] = 8
                    if s + stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0 / 2 >= stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0:
                        revert with 0, 50
                    mem[0] = sha3(uint8(stor5[address(arg1)][arg2].field_1280), 8)
                    if stor8[uint8(stor5[address(arg1)][arg2].field_1280)][Mask(255, 1, s + stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0)].field_0 >= stor5[address(arg1)][arg2].field_512:
                        s = s
                        continue 
                    if 1 > !(s + stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0 / 2):
                        revert with 0, 17
                    s = (s + stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0 / 2) + 1
                    continue 
                t = idx
                u = stor5[address(arg1)][arg2].field_768
                while t < s:
                    if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                        revert with 0, 33
                    mem[32] = 8
                    if t >= stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0:
                        revert with 0, 50
                    mem[0] = sha3(uint8(stor5[address(arg1)][arg2].field_1280), 8)
                    if 100 * 10^6 < stor8[uint8(stor5[address(arg1)][arg2].field_1280)][t].field_256 - 0x8000000000000000000000000000000000000000000000000000000000000000 and stor8[uint8(stor5[address(arg1)][arg2].field_1280)][t].field_256 >= 0:
                        revert with 0, 17
                    if stor8[uint8(stor5[address(arg1)][arg2].field_1280)][t].field_256 < 0 and 100 * 10^6 > stor8[uint8(stor5[address(arg1)][arg2].field_1280)][t].field_256 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                        revert with 0, 17
                    if u and -stor8[uint8(stor5[address(arg1)][arg2].field_1280)][t].field_256 + 100 * 10^6 > -1 / u:
                        revert with 0, 17
                    if t == -1:
                        revert with 0, 17
                    t = t + 1
                    u = (100 * 10^6 * u) - (stor8[uint8(stor5[address(arg1)][arg2].field_1280)][t].field_256 * u) / 100 * 10^6
                    continue 
                if stor5[address(arg1)][arg2].field_512 < stor5[address(arg1)][arg2].field_256:
                    revert with 0, 17
                if not sub_9b28d1a7:
                    revert with 0, 18
                idx = stor5[address(arg1)][arg2].field_512 - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7
                s = u
                while idx:
                    if not idx:
                        revert with 0, 17
                    if 100 * 10^6 < sub_93520a80 - 0x8000000000000000000000000000000000000000000000000000000000000000 and sub_93520a80 >= 0:
                        revert with 0, 17
                    if sub_93520a80 < 0 and 100 * 10^6 > sub_93520a80 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                        revert with 0, 17
                    if s and -sub_93520a80 + 100 * 10^6 > -1 / s:
                        revert with 0, 17
                    idx = idx - 1
                    s = (100 * 10^6 * s) - (sub_93520a80 * s) / 100 * 10^6
                    continue 
                if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                    revert with 0, 33
                idx = var149001
                s = var149002
                t = var149004
                u = var149005
                v = var149006
                w = var149007
                x = var149008
                y = var149009
                while idx < stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0:
                    if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                        revert with 0, 33
                    if idx >= stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0:
                        revert with 0, 50
                    if x < stor5[address(arg1)][arg2].field_256:
                        revert with 0, 17
                    if not sub_9b28d1a7:
                        revert with 0, 18
                    if stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 < stor5[address(arg1)][arg2].field_256:
                        revert with 0, 17
                    if not sub_9b28d1a7:
                        revert with 0, 18
                    if stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 == x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7:
                        if stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 < x:
                            revert with 0, 17
                        if stor5[address(arg1)][arg2].field_1024 and y > -1 / stor5[address(arg1)][arg2].field_1024:
                            revert with 0, 17
                        if stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6 and stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 - x > -1 / stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6:
                            revert with 0, 17
                        if v > !((stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) - (x * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) / 8760 * 24 * 3600):
                            revert with 0, 17
                        if stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 != x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7:
                            if 100 * 10^6 < sub_93520a80 - 0x8000000000000000000000000000000000000000000000000000000000000000 and sub_93520a80 >= 0:
                                revert with 0, 17
                            if sub_93520a80 < 0 and 100 * 10^6 > sub_93520a80 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                revert with 0, 17
                            if y and -sub_93520a80 + 100 * 10^6 > -1 / y:
                                revert with 0, 17
                            if not idx:
                                revert with 0, 17
                            if idx - 1 == -1:
                                revert with 0, 17
                            if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                                revert with 0, 33
                            mem[0] = uint8(stor5[address(arg1)][arg2].field_1280)
                            mem[32] = 8
                            idx = idx
                            s = stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 != x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7
                            t = (stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) - (x * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) / 8760 * 24 * 3600
                            u = stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 - x
                            v = v + ((stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) - (x * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) / 8760 * 24 * 3600)
                            w = stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0
                            x = stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0
                            y = (100 * 10^6 * y) - (sub_93520a80 * y) / 100 * 10^6
                            continue 
                        if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                            revert with 0, 33
                        if idx >= stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0:
                            revert with 0, 50
                        if 100 * 10^6 < stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_256 - 0x8000000000000000000000000000000000000000000000000000000000000000 and stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_256 >= 0:
                            revert with 0, 17
                        if stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_256 < 0 and 100 * 10^6 > stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_256 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                            revert with 0, 17
                        if y and -stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_256 + 100 * 10^6 > -1 / y:
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                            revert with 0, 33
                        mem[0] = uint8(stor5[address(arg1)][arg2].field_1280)
                        mem[32] = 8
                        idx = idx + 1
                        s = stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 != x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7
                        t = (stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) - (x * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) / 8760 * 24 * 3600
                        u = stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 - x
                        v = v + ((stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) - (x * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) / 8760 * 24 * 3600)
                        w = stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0
                        x = stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0
                        y = (100 * 10^6 * y) - (stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_256 * y) / 100 * 10^6
                        continue 
                    if x < stor5[address(arg1)][arg2].field_256:
                        revert with 0, 17
                    if not sub_9b28d1a7:
                        revert with 0, 18
                    if 1 > !(x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7):
                        revert with 0, 17
                    if sub_9b28d1a7 and (x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7) + 1 > -1 / sub_9b28d1a7:
                        revert with 0, 17
                    if stor5[address(arg1)][arg2].field_256 > !(sub_9b28d1a7 + (x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 * sub_9b28d1a7)):
                        revert with 0, 17
                    if stor5[address(arg1)][arg2].field_256 + sub_9b28d1a7 + (x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 * sub_9b28d1a7) < x:
                        revert with 0, 17
                    if stor5[address(arg1)][arg2].field_1024 and y > -1 / stor5[address(arg1)][arg2].field_1024:
                        revert with 0, 17
                    if stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6 and stor5[address(arg1)][arg2].field_256 + sub_9b28d1a7 + (x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 * sub_9b28d1a7) - x > -1 / stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6:
                        revert with 0, 17
                    if v > !((stor5[address(arg1)][arg2].field_256 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) + (sub_9b28d1a7 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) + (x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 * sub_9b28d1a7 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) - (x * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) / 8760 * 24 * 3600):
                        revert with 0, 17
                    if stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 != x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7:
                        if 100 * 10^6 < sub_93520a80 - 0x8000000000000000000000000000000000000000000000000000000000000000 and sub_93520a80 >= 0:
                            revert with 0, 17
                        if sub_93520a80 < 0 and 100 * 10^6 > sub_93520a80 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                            revert with 0, 17
                        if y and -sub_93520a80 + 100 * 10^6 > -1 / y:
                            revert with 0, 17
                        if not idx:
                            revert with 0, 17
                        if idx - 1 == -1:
                            revert with 0, 17
                        if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                            revert with 0, 33
                        mem[0] = uint8(stor5[address(arg1)][arg2].field_1280)
                        mem[32] = 8
                        idx = idx
                        s = stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 != x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7
                        t = (stor5[address(arg1)][arg2].field_256 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) + (sub_9b28d1a7 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) + (x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 * sub_9b28d1a7 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) - (x * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) / 8760 * 24 * 3600
                        u = stor5[address(arg1)][arg2].field_256 + sub_9b28d1a7 + (x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 * sub_9b28d1a7) - x
                        v = v + ((stor5[address(arg1)][arg2].field_256 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) + (sub_9b28d1a7 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) + (x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 * sub_9b28d1a7 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) - (x * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) / 8760 * 24 * 3600)
                        w = stor5[address(arg1)][arg2].field_256 + sub_9b28d1a7 + (x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 * sub_9b28d1a7)
                        x = stor5[address(arg1)][arg2].field_256 + sub_9b28d1a7 + (x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 * sub_9b28d1a7)
                        y = (100 * 10^6 * y) - (sub_93520a80 * y) / 100 * 10^6
                        continue 
                    if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                        revert with 0, 33
                    if idx >= stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0:
                        revert with 0, 50
                    if 100 * 10^6 < stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_256 - 0x8000000000000000000000000000000000000000000000000000000000000000 and stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_256 >= 0:
                        revert with 0, 17
                    if stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_256 < 0 and 100 * 10^6 > stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_256 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                        revert with 0, 17
                    if y and -stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_256 + 100 * 10^6 > -1 / y:
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                        revert with 0, 33
                    mem[0] = uint8(stor5[address(arg1)][arg2].field_1280)
                    mem[32] = 8
                    idx = idx + 1
                    s = stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 != x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7
                    t = (stor5[address(arg1)][arg2].field_256 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) + (sub_9b28d1a7 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) + (x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 * sub_9b28d1a7 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) - (x * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) / 8760 * 24 * 3600
                    u = stor5[address(arg1)][arg2].field_256 + sub_9b28d1a7 + (x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 * sub_9b28d1a7) - x
                    v = v + ((stor5[address(arg1)][arg2].field_256 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) + (sub_9b28d1a7 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) + (x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 * sub_9b28d1a7 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) - (x * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) / 8760 * 24 * 3600)
                    w = stor5[address(arg1)][arg2].field_256 + sub_9b28d1a7 + (x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 * sub_9b28d1a7)
                    x = stor5[address(arg1)][arg2].field_256 + sub_9b28d1a7 + (x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 * sub_9b28d1a7)
                    y = (100 * 10^6 * y) - (stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_256 * y) / 100 * 10^6
                    continue 
            else:
                if 31 >= stor5[address(arg1)][arg2].field_1 % 128:
                    if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                        revert with 0, 33
                    if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                        revert with 0, 33
                    idx = 0
                    while stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0 > idx:
                        if idx > !stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0:
                            revert with 0, 17
                        if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                            revert with 0, 33
                        mem[32] = 8
                        if idx + stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0 / 2 >= stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0:
                            revert with 0, 50
                        mem[0] = sha3(uint8(stor5[address(arg1)][arg2].field_1280), 8)
                        if stor8[uint8(stor5[address(arg1)][arg2].field_1280)][Mask(255, 1, idx + stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0)].field_0 >= stor5[address(arg1)][arg2].field_512:
                            idx = idx
                            continue 
                        if 1 > !(idx + stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0 / 2):
                            revert with 0, 17
                        idx = (idx + stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0 / 2) + 1
                        continue 
                    if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                        revert with 0, 33
                    idx = 0
                    while stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0 > idx:
                        if idx > !stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0:
                            revert with 0, 17
                        if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                            revert with 0, 33
                        mem[32] = 8
                        if idx + stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0 / 2 >= stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0:
                            revert with 0, 50
                        mem[0] = sha3(uint8(stor5[address(arg1)][arg2].field_1280), 8)
                        if stor8[uint8(stor5[address(arg1)][arg2].field_1280)][Mask(255, 1, idx + stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0)].field_0 >= stor5[address(arg1)][arg2].field_256:
                            idx = idx
                            continue 
                        if 1 > !(idx + stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0 / 2):
                            revert with 0, 17
                        idx = (idx + stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0 / 2) + 1
                        continue 
                    if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                        revert with 0, 33
                    s = 0
                    while stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0 > s:
                        if s > !stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0:
                            revert with 0, 17
                        if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                            revert with 0, 33
                        mem[32] = 8
                        if s + stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0 / 2 >= stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0:
                            revert with 0, 50
                        mem[0] = sha3(uint8(stor5[address(arg1)][arg2].field_1280), 8)
                        if stor8[uint8(stor5[address(arg1)][arg2].field_1280)][Mask(255, 1, s + stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0)].field_0 >= stor5[address(arg1)][arg2].field_512:
                            s = s
                            continue 
                        if 1 > !(s + stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0 / 2):
                            revert with 0, 17
                        s = (s + stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0 / 2) + 1
                        continue 
                    t = idx
                    u = stor5[address(arg1)][arg2].field_768
                    while t < s:
                        if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                            revert with 0, 33
                        mem[32] = 8
                        if t >= stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0:
                            revert with 0, 50
                        mem[0] = sha3(uint8(stor5[address(arg1)][arg2].field_1280), 8)
                        if 100 * 10^6 < stor8[uint8(stor5[address(arg1)][arg2].field_1280)][t].field_256 - 0x8000000000000000000000000000000000000000000000000000000000000000 and stor8[uint8(stor5[address(arg1)][arg2].field_1280)][t].field_256 >= 0:
                            revert with 0, 17
                        if stor8[uint8(stor5[address(arg1)][arg2].field_1280)][t].field_256 < 0 and 100 * 10^6 > stor8[uint8(stor5[address(arg1)][arg2].field_1280)][t].field_256 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                            revert with 0, 17
                        if u and -stor8[uint8(stor5[address(arg1)][arg2].field_1280)][t].field_256 + 100 * 10^6 > -1 / u:
                            revert with 0, 17
                        if t == -1:
                            revert with 0, 17
                        t = t + 1
                        u = (100 * 10^6 * u) - (stor8[uint8(stor5[address(arg1)][arg2].field_1280)][t].field_256 * u) / 100 * 10^6
                        continue 
                    if stor5[address(arg1)][arg2].field_512 < stor5[address(arg1)][arg2].field_256:
                        revert with 0, 17
                    if not sub_9b28d1a7:
                        revert with 0, 18
                    idx = stor5[address(arg1)][arg2].field_512 - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7
                    s = u
                    while idx:
                        if not idx:
                            revert with 0, 17
                        if 100 * 10^6 < sub_93520a80 - 0x8000000000000000000000000000000000000000000000000000000000000000 and sub_93520a80 >= 0:
                            revert with 0, 17
                        if sub_93520a80 < 0 and 100 * 10^6 > sub_93520a80 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                            revert with 0, 17
                        if s and -sub_93520a80 + 100 * 10^6 > -1 / s:
                            revert with 0, 17
                        idx = idx - 1
                        s = (100 * 10^6 * s) - (sub_93520a80 * s) / 100 * 10^6
                        continue 
                    if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                        revert with 0, 33
                    idx = var151001
                    s = var151002
                    t = var151004
                    u = var151005
                    v = var151006
                    w = var151007
                    x = var151008
                    y = var151009
                    while idx < stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0:
                        if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                            revert with 0, 33
                        if idx >= stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0:
                            revert with 0, 50
                        if x < stor5[address(arg1)][arg2].field_256:
                            revert with 0, 17
                        if not sub_9b28d1a7:
                            revert with 0, 18
                        if stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 < stor5[address(arg1)][arg2].field_256:
                            revert with 0, 17
                        if not sub_9b28d1a7:
                            revert with 0, 18
                        if stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 == x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7:
                            if stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 < x:
                                revert with 0, 17
                            if stor5[address(arg1)][arg2].field_1024 and y > -1 / stor5[address(arg1)][arg2].field_1024:
                                revert with 0, 17
                            if stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6 and stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 - x > -1 / stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6:
                                revert with 0, 17
                            if v > !((stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) - (x * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) / 8760 * 24 * 3600):
                                revert with 0, 17
                            if stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 != x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7:
                                if 100 * 10^6 < sub_93520a80 - 0x8000000000000000000000000000000000000000000000000000000000000000 and sub_93520a80 >= 0:
                                    revert with 0, 17
                                if sub_93520a80 < 0 and 100 * 10^6 > sub_93520a80 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                    revert with 0, 17
                                if y and -sub_93520a80 + 100 * 10^6 > -1 / y:
                                    revert with 0, 17
                                if not idx:
                                    revert with 0, 17
                                if idx - 1 == -1:
                                    revert with 0, 17
                                if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                                    revert with 0, 33
                                mem[0] = uint8(stor5[address(arg1)][arg2].field_1280)
                                mem[32] = 8
                                idx = idx
                                s = stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 != x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7
                                t = (stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) - (x * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) / 8760 * 24 * 3600
                                u = stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 - x
                                v = v + ((stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) - (x * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) / 8760 * 24 * 3600)
                                w = stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0
                                x = stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0
                                y = (100 * 10^6 * y) - (sub_93520a80 * y) / 100 * 10^6
                                continue 
                            if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                                revert with 0, 33
                            if idx >= stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0:
                                revert with 0, 50
                            if 100 * 10^6 < stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_256 - 0x8000000000000000000000000000000000000000000000000000000000000000 and stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_256 >= 0:
                                revert with 0, 17
                            if stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_256 < 0 and 100 * 10^6 > stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_256 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                revert with 0, 17
                            if y and -stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_256 + 100 * 10^6 > -1 / y:
                                revert with 0, 17
                            if idx == -1:
                                revert with 0, 17
                            if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                                revert with 0, 33
                            mem[0] = uint8(stor5[address(arg1)][arg2].field_1280)
                            mem[32] = 8
                            idx = idx + 1
                            s = stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 != x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7
                            t = (stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) - (x * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) / 8760 * 24 * 3600
                            u = stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 - x
                            v = v + ((stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) - (x * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) / 8760 * 24 * 3600)
                            w = stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0
                            x = stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0
                            y = (100 * 10^6 * y) - (stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_256 * y) / 100 * 10^6
                            continue 
                        if x < stor5[address(arg1)][arg2].field_256:
                            revert with 0, 17
                        if not sub_9b28d1a7:
                            revert with 0, 18
                        if 1 > !(x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7):
                            revert with 0, 17
                        if sub_9b28d1a7 and (x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7) + 1 > -1 / sub_9b28d1a7:
                            revert with 0, 17
                        if stor5[address(arg1)][arg2].field_256 > !(sub_9b28d1a7 + (x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 * sub_9b28d1a7)):
                            revert with 0, 17
                        if stor5[address(arg1)][arg2].field_256 + sub_9b28d1a7 + (x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 * sub_9b28d1a7) < x:
                            revert with 0, 17
                        if stor5[address(arg1)][arg2].field_1024 and y > -1 / stor5[address(arg1)][arg2].field_1024:
                            revert with 0, 17
                        if stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6 and stor5[address(arg1)][arg2].field_256 + sub_9b28d1a7 + (x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 * sub_9b28d1a7) - x > -1 / stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6:
                            revert with 0, 17
                        if v > !((stor5[address(arg1)][arg2].field_256 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) + (sub_9b28d1a7 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) + (x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 * sub_9b28d1a7 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) - (x * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) / 8760 * 24 * 3600):
                            revert with 0, 17
                        if stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 != x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7:
                            if 100 * 10^6 < sub_93520a80 - 0x8000000000000000000000000000000000000000000000000000000000000000 and sub_93520a80 >= 0:
                                revert with 0, 17
                            if sub_93520a80 < 0 and 100 * 10^6 > sub_93520a80 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                revert with 0, 17
                            if y and -sub_93520a80 + 100 * 10^6 > -1 / y:
                                revert with 0, 17
                            if not idx:
                                revert with 0, 17
                            if idx - 1 == -1:
                                revert with 0, 17
                            if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                                revert with 0, 33
                            mem[0] = uint8(stor5[address(arg1)][arg2].field_1280)
                            mem[32] = 8
                            idx = idx
                            s = stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 != x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7
                            t = (stor5[address(arg1)][arg2].field_256 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) + (sub_9b28d1a7 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) + (x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 * sub_9b28d1a7 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) - (x * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) / 8760 * 24 * 3600
                            u = stor5[address(arg1)][arg2].field_256 + sub_9b28d1a7 + (x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 * sub_9b28d1a7) - x
                            v = v + ((stor5[address(arg1)][arg2].field_256 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) + (sub_9b28d1a7 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) + (x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 * sub_9b28d1a7 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) - (x * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) / 8760 * 24 * 3600)
                            w = stor5[address(arg1)][arg2].field_256 + sub_9b28d1a7 + (x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 * sub_9b28d1a7)
                            x = stor5[address(arg1)][arg2].field_256 + sub_9b28d1a7 + (x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 * sub_9b28d1a7)
                            y = (100 * 10^6 * y) - (sub_93520a80 * y) / 100 * 10^6
                            continue 
                        if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                            revert with 0, 33
                        if idx >= stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0:
                            revert with 0, 50
                        if 100 * 10^6 < stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_256 - 0x8000000000000000000000000000000000000000000000000000000000000000 and stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_256 >= 0:
                            revert with 0, 17
                        if stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_256 < 0 and 100 * 10^6 > stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_256 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                            revert with 0, 17
                        if y and -stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_256 + 100 * 10^6 > -1 / y:
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                            revert with 0, 33
                        mem[0] = uint8(stor5[address(arg1)][arg2].field_1280)
                        mem[32] = 8
                        idx = idx + 1
                        s = stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 != x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7
                        t = (stor5[address(arg1)][arg2].field_256 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) + (sub_9b28d1a7 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) + (x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 * sub_9b28d1a7 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) - (x * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) / 8760 * 24 * 3600
                        u = stor5[address(arg1)][arg2].field_256 + sub_9b28d1a7 + (x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 * sub_9b28d1a7) - x
                        v = v + ((stor5[address(arg1)][arg2].field_256 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) + (sub_9b28d1a7 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) + (x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 * sub_9b28d1a7 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) - (x * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) / 8760 * 24 * 3600)
                        w = stor5[address(arg1)][arg2].field_256 + sub_9b28d1a7 + (x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 * sub_9b28d1a7)
                        x = stor5[address(arg1)][arg2].field_256 + sub_9b28d1a7 + (x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 * sub_9b28d1a7)
                        y = (100 * 10^6 * y) - (stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_256 * y) / 100 * 10^6
                        continue 
                else:
                    idx = 320
                    s = 0
                    while stor5[address(arg1)][arg2].field_1 % 128 + 288 > idx:
                        mem[idx + 32] = stor5[address(arg1)][(6 * arg2) + s].field_256
                        idx = idx + 32
                        s = s + 1
                        continue 
                    if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                        revert with 0, 33
                    if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                        revert with 0, 33
                    idx = 0
                    while stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0 > idx:
                        if idx > !stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0:
                            revert with 0, 17
                        if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                            revert with 0, 33
                        mem[32] = 8
                        if idx + stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0 / 2 >= stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0:
                            revert with 0, 50
                        mem[0] = sha3(uint8(stor5[address(arg1)][arg2].field_1280), 8)
                        if stor8[uint8(stor5[address(arg1)][arg2].field_1280)][Mask(255, 1, idx + stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0)].field_0 >= stor5[address(arg1)][arg2].field_512:
                            idx = idx
                            continue 
                        if 1 > !(idx + stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0 / 2):
                            revert with 0, 17
                        idx = (idx + stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0 / 2) + 1
                        continue 
                    if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                        revert with 0, 33
                    idx = 0
                    while stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0 > idx:
                        if idx > !stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0:
                            revert with 0, 17
                        if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                            revert with 0, 33
                        mem[32] = 8
                        if idx + stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0 / 2 >= stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0:
                            revert with 0, 50
                        mem[0] = sha3(uint8(stor5[address(arg1)][arg2].field_1280), 8)
                        if stor8[uint8(stor5[address(arg1)][arg2].field_1280)][Mask(255, 1, idx + stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0)].field_0 >= stor5[address(arg1)][arg2].field_256:
                            idx = idx
                            continue 
                        if 1 > !(idx + stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0 / 2):
                            revert with 0, 17
                        idx = (idx + stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0 / 2) + 1
                        continue 
                    if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                        revert with 0, 33
                    s = 0
                    while stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0 > s:
                        if s > !stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0:
                            revert with 0, 17
                        if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                            revert with 0, 33
                        mem[32] = 8
                        if s + stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0 / 2 >= stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0:
                            revert with 0, 50
                        mem[0] = sha3(uint8(stor5[address(arg1)][arg2].field_1280), 8)
                        if stor8[uint8(stor5[address(arg1)][arg2].field_1280)][Mask(255, 1, s + stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0)].field_0 >= stor5[address(arg1)][arg2].field_512:
                            s = s
                            continue 
                        if 1 > !(s + stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0 / 2):
                            revert with 0, 17
                        s = (s + stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0 / 2) + 1
                        continue 
                    t = idx
                    u = stor5[address(arg1)][arg2].field_768
                    while t < s:
                        if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                            revert with 0, 33
                        mem[32] = 8
                        if t >= stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0:
                            revert with 0, 50
                        mem[0] = sha3(uint8(stor5[address(arg1)][arg2].field_1280), 8)
                        if 100 * 10^6 < stor8[uint8(stor5[address(arg1)][arg2].field_1280)][t].field_256 - 0x8000000000000000000000000000000000000000000000000000000000000000 and stor8[uint8(stor5[address(arg1)][arg2].field_1280)][t].field_256 >= 0:
                            revert with 0, 17
                        if stor8[uint8(stor5[address(arg1)][arg2].field_1280)][t].field_256 < 0 and 100 * 10^6 > stor8[uint8(stor5[address(arg1)][arg2].field_1280)][t].field_256 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                            revert with 0, 17
                        if u and -stor8[uint8(stor5[address(arg1)][arg2].field_1280)][t].field_256 + 100 * 10^6 > -1 / u:
                            revert with 0, 17
                        if t == -1:
                            revert with 0, 17
                        t = t + 1
                        u = (100 * 10^6 * u) - (stor8[uint8(stor5[address(arg1)][arg2].field_1280)][t].field_256 * u) / 100 * 10^6
                        continue 
                    if stor5[address(arg1)][arg2].field_512 < stor5[address(arg1)][arg2].field_256:
                        revert with 0, 17
                    if not sub_9b28d1a7:
                        revert with 0, 18
                    idx = stor5[address(arg1)][arg2].field_512 - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7
                    s = u
                    while idx:
                        if not idx:
                            revert with 0, 17
                        if 100 * 10^6 < sub_93520a80 - 0x8000000000000000000000000000000000000000000000000000000000000000 and sub_93520a80 >= 0:
                            revert with 0, 17
                        if sub_93520a80 < 0 and 100 * 10^6 > sub_93520a80 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                            revert with 0, 17
                        if s and -sub_93520a80 + 100 * 10^6 > -1 / s:
                            revert with 0, 17
                        idx = idx - 1
                        s = (100 * 10^6 * s) - (sub_93520a80 * s) / 100 * 10^6
                        continue 
                    if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                        revert with 0, 33
                    idx = var154001
                    s = var154002
                    t = var154004
                    u = var154005
                    v = var154006
                    w = var154007
                    x = var154008
                    y = var154009
                    while idx < stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0:
                        if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                            revert with 0, 33
                        if idx >= stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0:
                            revert with 0, 50
                        if x < stor5[address(arg1)][arg2].field_256:
                            revert with 0, 17
                        if not sub_9b28d1a7:
                            revert with 0, 18
                        if stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 < stor5[address(arg1)][arg2].field_256:
                            revert with 0, 17
                        if not sub_9b28d1a7:
                            revert with 0, 18
                        if stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 == x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7:
                            if stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 < x:
                                revert with 0, 17
                            if stor5[address(arg1)][arg2].field_1024 and y > -1 / stor5[address(arg1)][arg2].field_1024:
                                revert with 0, 17
                            if stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6 and stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 - x > -1 / stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6:
                                revert with 0, 17
                            if v > !((stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) - (x * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) / 8760 * 24 * 3600):
                                revert with 0, 17
                            if stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 != x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7:
                                if 100 * 10^6 < sub_93520a80 - 0x8000000000000000000000000000000000000000000000000000000000000000 and sub_93520a80 >= 0:
                                    revert with 0, 17
                                if sub_93520a80 < 0 and 100 * 10^6 > sub_93520a80 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                    revert with 0, 17
                                if y and -sub_93520a80 + 100 * 10^6 > -1 / y:
                                    revert with 0, 17
                                if not idx:
                                    revert with 0, 17
                                if idx - 1 == -1:
                                    revert with 0, 17
                                if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                                    revert with 0, 33
                                mem[0] = uint8(stor5[address(arg1)][arg2].field_1280)
                                mem[32] = 8
                                idx = idx
                                s = stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 != x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7
                                t = (stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) - (x * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) / 8760 * 24 * 3600
                                u = stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 - x
                                v = v + ((stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) - (x * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) / 8760 * 24 * 3600)
                                w = stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0
                                x = stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0
                                y = (100 * 10^6 * y) - (sub_93520a80 * y) / 100 * 10^6
                                continue 
                            if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                                revert with 0, 33
                            if idx >= stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0:
                                revert with 0, 50
                            if 100 * 10^6 < stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_256 - 0x8000000000000000000000000000000000000000000000000000000000000000 and stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_256 >= 0:
                                revert with 0, 17
                            if stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_256 < 0 and 100 * 10^6 > stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_256 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                revert with 0, 17
                            if y and -stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_256 + 100 * 10^6 > -1 / y:
                                revert with 0, 17
                            if idx == -1:
                                revert with 0, 17
                            if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                                revert with 0, 33
                            mem[0] = uint8(stor5[address(arg1)][arg2].field_1280)
                            mem[32] = 8
                            idx = idx + 1
                            s = stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 != x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7
                            t = (stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) - (x * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) / 8760 * 24 * 3600
                            u = stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 - x
                            v = v + ((stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) - (x * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) / 8760 * 24 * 3600)
                            w = stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0
                            x = stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0
                            y = (100 * 10^6 * y) - (stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_256 * y) / 100 * 10^6
                            continue 
                        if x < stor5[address(arg1)][arg2].field_256:
                            revert with 0, 17
                        if not sub_9b28d1a7:
                            revert with 0, 18
                        if 1 > !(x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7):
                            revert with 0, 17
                        if sub_9b28d1a7 and (x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7) + 1 > -1 / sub_9b28d1a7:
                            revert with 0, 17
                        if stor5[address(arg1)][arg2].field_256 > !(sub_9b28d1a7 + (x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 * sub_9b28d1a7)):
                            revert with 0, 17
                        if stor5[address(arg1)][arg2].field_256 + sub_9b28d1a7 + (x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 * sub_9b28d1a7) < x:
                            revert with 0, 17
                        if stor5[address(arg1)][arg2].field_1024 and y > -1 / stor5[address(arg1)][arg2].field_1024:
                            revert with 0, 17
                        if stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6 and stor5[address(arg1)][arg2].field_256 + sub_9b28d1a7 + (x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 * sub_9b28d1a7) - x > -1 / stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6:
                            revert with 0, 17
                        if v > !((stor5[address(arg1)][arg2].field_256 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) + (sub_9b28d1a7 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) + (x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 * sub_9b28d1a7 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) - (x * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) / 8760 * 24 * 3600):
                            revert with 0, 17
                        if stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 != x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7:
                            if 100 * 10^6 < sub_93520a80 - 0x8000000000000000000000000000000000000000000000000000000000000000 and sub_93520a80 >= 0:
                                revert with 0, 17
                            if sub_93520a80 < 0 and 100 * 10^6 > sub_93520a80 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                revert with 0, 17
                            if y and -sub_93520a80 + 100 * 10^6 > -1 / y:
                                revert with 0, 17
                            if not idx:
                                revert with 0, 17
                            if idx - 1 == -1:
                                revert with 0, 17
                            if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                                revert with 0, 33
                            mem[0] = uint8(stor5[address(arg1)][arg2].field_1280)
                            mem[32] = 8
                            idx = idx
                            s = stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 != x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7
                            t = (stor5[address(arg1)][arg2].field_256 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) + (sub_9b28d1a7 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) + (x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 * sub_9b28d1a7 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) - (x * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) / 8760 * 24 * 3600
                            u = stor5[address(arg1)][arg2].field_256 + sub_9b28d1a7 + (x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 * sub_9b28d1a7) - x
                            v = v + ((stor5[address(arg1)][arg2].field_256 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) + (sub_9b28d1a7 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) + (x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 * sub_9b28d1a7 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) - (x * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) / 8760 * 24 * 3600)
                            w = stor5[address(arg1)][arg2].field_256 + sub_9b28d1a7 + (x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 * sub_9b28d1a7)
                            x = stor5[address(arg1)][arg2].field_256 + sub_9b28d1a7 + (x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 * sub_9b28d1a7)
                            y = (100 * 10^6 * y) - (sub_93520a80 * y) / 100 * 10^6
                            continue 
                        if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                            revert with 0, 33
                        if idx >= stor8[uint8(stor5[address(arg1)][arg2].field_1280)].field_0:
                            revert with 0, 50
                        if 100 * 10^6 < stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_256 - 0x8000000000000000000000000000000000000000000000000000000000000000 and stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_256 >= 0:
                            revert with 0, 17
                        if stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_256 < 0 and 100 * 10^6 > stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_256 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                            revert with 0, 17
                        if y and -stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_256 + 100 * 10^6 > -1 / y:
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        if uint8(stor5[address(arg1)][arg2].field_1280) > 2:
                            revert with 0, 33
                        mem[0] = uint8(stor5[address(arg1)][arg2].field_1280)
                        mem[32] = 8
                        idx = idx + 1
                        s = stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_0 - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 != x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7
                        t = (stor5[address(arg1)][arg2].field_256 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) + (sub_9b28d1a7 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) + (x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 * sub_9b28d1a7 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) - (x * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) / 8760 * 24 * 3600
                        u = stor5[address(arg1)][arg2].field_256 + sub_9b28d1a7 + (x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 * sub_9b28d1a7) - x
                        v = v + ((stor5[address(arg1)][arg2].field_256 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) + (sub_9b28d1a7 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) + (x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 * sub_9b28d1a7 * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) - (x * stor5[address(arg1)][arg2].field_1024 * y / 100 * 10^6) / 8760 * 24 * 3600)
                        w = stor5[address(arg1)][arg2].field_256 + sub_9b28d1a7 + (x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 * sub_9b28d1a7)
                        x = stor5[address(arg1)][arg2].field_256 + sub_9b28d1a7 + (x - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 * sub_9b28d1a7)
                        y = (100 * 10^6 * y) - (stor8[uint8(stor5[address(arg1)][arg2].field_1280)][idx].field_256 * y) / 100 * 10^6
                        continue 
    z = s
    z = t
    z = u
    z = v
    a = w
    idx = x
    a = y
    while idx != block.timestamp:
        if idx < stor5[address(arg1)][arg2].field_256:
            revert with 0, 17
        if not sub_9b28d1a7:
            revert with 0, 18
        if block.timestamp < stor5[address(arg1)][arg2].field_256:
            revert with 0, 17
        if not sub_9b28d1a7:
            revert with 0, 18
        if block.timestamp - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 == idx - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7:
            if block.timestamp < idx:
                revert with 0, 17
            if stor5[address(arg1)][arg2].field_1024 and a > -1 / stor5[address(arg1)][arg2].field_1024:
                revert with 0, 17
            if stor5[address(arg1)][arg2].field_1024 * a / 100 * 10^6 and block.timestamp - idx > -1 / stor5[address(arg1)][arg2].field_1024 * a / 100 * 10^6:
                revert with 0, 17
            if z > !((block.timestamp * stor5[address(arg1)][arg2].field_1024 * a / 100 * 10^6) - (idx * stor5[address(arg1)][arg2].field_1024 * a / 100 * 10^6) / 8760 * 24 * 3600):
                revert with 0, 17
            if block.timestamp - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 == idx - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7:
                z = block.timestamp - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 != idx - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7
                z = (block.timestamp * stor5[address(arg1)][arg2].field_1024 * a / 100 * 10^6) - (idx * stor5[address(arg1)][arg2].field_1024 * a / 100 * 10^6) / 8760 * 24 * 3600
                z = block.timestamp - idx
                z = z + ((block.timestamp * stor5[address(arg1)][arg2].field_1024 * a / 100 * 10^6) - (idx * stor5[address(arg1)][arg2].field_1024 * a / 100 * 10^6) / 8760 * 24 * 3600)
                a = block.timestamp
                idx = block.timestamp
                a = a
                continue 
            if 100 * 10^6 < sub_93520a80 - 0x8000000000000000000000000000000000000000000000000000000000000000 and sub_93520a80 >= 0:
                revert with 0, 17
            if sub_93520a80 < 0 and 100 * 10^6 > sub_93520a80 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                revert with 0, 17
            if a and -sub_93520a80 + 100 * 10^6 > -1 / a:
                revert with 0, 17
            z = block.timestamp - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 != idx - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7
            z = (block.timestamp * stor5[address(arg1)][arg2].field_1024 * a / 100 * 10^6) - (idx * stor5[address(arg1)][arg2].field_1024 * a / 100 * 10^6) / 8760 * 24 * 3600
            z = block.timestamp - idx
            z = z + ((block.timestamp * stor5[address(arg1)][arg2].field_1024 * a / 100 * 10^6) - (idx * stor5[address(arg1)][arg2].field_1024 * a / 100 * 10^6) / 8760 * 24 * 3600)
            a = block.timestamp
            idx = block.timestamp
            a = (100 * 10^6 * a) - (sub_93520a80 * a) / 100 * 10^6
            continue 
        if idx < stor5[address(arg1)][arg2].field_256:
            revert with 0, 17
        if not sub_9b28d1a7:
            revert with 0, 18
        if 1 > !(idx - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7):
            revert with 0, 17
        if sub_9b28d1a7 and (idx - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7) + 1 > -1 / sub_9b28d1a7:
            revert with 0, 17
        if stor5[address(arg1)][arg2].field_256 > !(sub_9b28d1a7 + (idx - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 * sub_9b28d1a7)):
            revert with 0, 17
        if stor5[address(arg1)][arg2].field_256 + sub_9b28d1a7 + (idx - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 * sub_9b28d1a7) < idx:
            revert with 0, 17
        if stor5[address(arg1)][arg2].field_1024 and a > -1 / stor5[address(arg1)][arg2].field_1024:
            revert with 0, 17
        if stor5[address(arg1)][arg2].field_1024 * a / 100 * 10^6 and stor5[address(arg1)][arg2].field_256 + sub_9b28d1a7 + (idx - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 * sub_9b28d1a7) - idx > -1 / stor5[address(arg1)][arg2].field_1024 * a / 100 * 10^6:
            revert with 0, 17
        if z > !((stor5[address(arg1)][arg2].field_256 * stor5[address(arg1)][arg2].field_1024 * a / 100 * 10^6) + (sub_9b28d1a7 * stor5[address(arg1)][arg2].field_1024 * a / 100 * 10^6) + (idx - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 * sub_9b28d1a7 * stor5[address(arg1)][arg2].field_1024 * a / 100 * 10^6) - (idx * stor5[address(arg1)][arg2].field_1024 * a / 100 * 10^6) / 8760 * 24 * 3600):
            revert with 0, 17
        if block.timestamp - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 == idx - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7:
            z = block.timestamp - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 != idx - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7
            z = (stor5[address(arg1)][arg2].field_256 * stor5[address(arg1)][arg2].field_1024 * a / 100 * 10^6) + (sub_9b28d1a7 * stor5[address(arg1)][arg2].field_1024 * a / 100 * 10^6) + (idx - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 * sub_9b28d1a7 * stor5[address(arg1)][arg2].field_1024 * a / 100 * 10^6) - (idx * stor5[address(arg1)][arg2].field_1024 * a / 100 * 10^6) / 8760 * 24 * 3600
            z = stor5[address(arg1)][arg2].field_256 + sub_9b28d1a7 + (idx - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 * sub_9b28d1a7) - idx
            z = z + ((stor5[address(arg1)][arg2].field_256 * stor5[address(arg1)][arg2].field_1024 * a / 100 * 10^6) + (sub_9b28d1a7 * stor5[address(arg1)][arg2].field_1024 * a / 100 * 10^6) + (idx - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 * sub_9b28d1a7 * stor5[address(arg1)][arg2].field_1024 * a / 100 * 10^6) - (idx * stor5[address(arg1)][arg2].field_1024 * a / 100 * 10^6) / 8760 * 24 * 3600)
            a = stor5[address(arg1)][arg2].field_256 + sub_9b28d1a7 + (idx - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 * sub_9b28d1a7)
            idx = stor5[address(arg1)][arg2].field_256 + sub_9b28d1a7 + (idx - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 * sub_9b28d1a7)
            a = a
            continue 
        if 100 * 10^6 < sub_93520a80 - 0x8000000000000000000000000000000000000000000000000000000000000000 and sub_93520a80 >= 0:
            revert with 0, 17
        if sub_93520a80 < 0 and 100 * 10^6 > sub_93520a80 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
            revert with 0, 17
        if a and -sub_93520a80 + 100 * 10^6 > -1 / a:
            revert with 0, 17
        z = block.timestamp - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 != idx - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7
        z = (stor5[address(arg1)][arg2].field_256 * stor5[address(arg1)][arg2].field_1024 * a / 100 * 10^6) + (sub_9b28d1a7 * stor5[address(arg1)][arg2].field_1024 * a / 100 * 10^6) + (idx - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 * sub_9b28d1a7 * stor5[address(arg1)][arg2].field_1024 * a / 100 * 10^6) - (idx * stor5[address(arg1)][arg2].field_1024 * a / 100 * 10^6) / 8760 * 24 * 3600
        z = stor5[address(arg1)][arg2].field_256 + sub_9b28d1a7 + (idx - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 * sub_9b28d1a7) - idx
        z = z + ((stor5[address(arg1)][arg2].field_256 * stor5[address(arg1)][arg2].field_1024 * a / 100 * 10^6) + (sub_9b28d1a7 * stor5[address(arg1)][arg2].field_1024 * a / 100 * 10^6) + (idx - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 * sub_9b28d1a7 * stor5[address(arg1)][arg2].field_1024 * a / 100 * 10^6) - (idx * stor5[address(arg1)][arg2].field_1024 * a / 100 * 10^6) / 8760 * 24 * 3600)
        a = stor5[address(arg1)][arg2].field_256 + sub_9b28d1a7 + (idx - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 * sub_9b28d1a7)
        idx = stor5[address(arg1)][arg2].field_256 + sub_9b28d1a7 + (idx - stor5[address(arg1)][arg2].field_256 / sub_9b28d1a7 * sub_9b28d1a7)
        a = (100 * 10^6 * a) - (sub_93520a80 * a) / 100 * 10^6
        continue 
    stor5[address(arg1)][arg2].field_512 = block.timestamp
    return z
}

function sub_d094fa8d(?) payable {
    mem[64] = 96
    require calldata.size - 4 >= 32
    require arg1 == address(arg1)
    if tokenAddress != msg.sender:
        revert with 0, 'Access Denied!'
    mem[0] = address(arg1)
    mem[32] = 5
    if not stor5[address(arg1)].field_0:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'CASHOUT ERROR: You don't have conts to cash-out'
    idx = 0
    s = 0
    while idx < stor5[address(arg1)].field_0:
        mem[0] = sha3(address(arg1), 5)
        if idx == -1:
            revert with 0, 17
        if stor5[address(arg1)][idx].field_512 <= s:
            idx = idx + 1
            s = s
            continue 
        idx = idx + 1
        s = stor5[address(arg1)][idx].field_512
        continue 
    if s > !sub_55a757d0:
        revert with 0, 17
    if s + sub_55a757d0 > block.timestamp:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    'CASHOUT ERROR: You have to wait before claiming all conts.'
    idx = 0
    s = 0
    while idx < stor5[address(arg1)].field_0:
        mem[0] = sha3(address(arg1), 5)
        _633 = mem[64]
        mem[64] = mem[64] + 192
        if bool(stor5[address(arg1)][idx].field_0):
            if bool(stor5[address(arg1)][idx].field_0) == uint255(stor5[address(arg1)][idx].field_0) * 0.5 < 32:
                revert with 0, 34
            _636 = mem[64]
            mem[64] = mem[64] + ceil32(uint255(stor5[address(arg1)][idx].field_0) * 0.5) + 32
            mem[_636] = uint255(stor5[address(arg1)][idx].field_0) * 0.5
            if bool(stor5[address(arg1)][idx].field_0):
                if bool(stor5[address(arg1)][idx].field_0) == uint255(stor5[address(arg1)][idx].field_0) * 0.5 < 32:
                    revert with 0, 34
                if not Mask(256, -1, stor5[address(arg1)][idx].field_0):
                    mem[_633] = _636
                    mem[_633 + 32] = stor5[address(arg1)][idx].field_256
                    mem[_633 + 64] = stor5[address(arg1)][idx].field_512
                    mem[_633 + 96] = stor5[address(arg1)][idx].field_768
                    mem[_633 + 128] = stor5[address(arg1)][idx].field_1024
                    if uint8(stor5[address(arg1)][idx].field_1280) > 2:
                        revert with 0, 33
                    mem[_633 + 160] = uint8(stor5[address(arg1)][idx].field_1280)
                    if uint8(stor5[address(arg1)][idx].field_1280) > 2:
                        revert with 0, 33
                    mem[32] = 8
                    s = 0
                    while stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0 > s:
                        if s > !stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0:
                            revert with 0, 17
                        if uint8(stor5[address(arg1)][idx].field_1280) > 2:
                            revert with 0, 33
                        mem[32] = 8
                        if s + stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0 / 2 >= stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0:
                            revert with 0, 50
                        mem[0] = sha3(uint8(stor5[address(arg1)][idx].field_1280), 8)
                        if stor8[uint8(stor5[address(arg1)][idx].field_1280)][Mask(255, 1, s + stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0)].field_0 >= stor5[address(arg1)][idx].field_512:
                            s = s
                            continue 
                        if 1 > !(s + stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0 / 2):
                            revert with 0, 17
                        s = (s + stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0 / 2) + 1
                        continue 
                    _958 = mem[_633 + 32]
                    if uint8(stor5[address(arg1)][idx].field_1280) > 2:
                        revert with 0, 33
                    s = 0
                    while stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0 > s:
                        if s > !stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0:
                            revert with 0, 17
                        if uint8(stor5[address(arg1)][idx].field_1280) > 2:
                            revert with 0, 33
                        mem[32] = 8
                        if s + stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0 / 2 >= stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0:
                            revert with 0, 50
                        mem[0] = sha3(uint8(stor5[address(arg1)][idx].field_1280), 8)
                        if stor8[uint8(stor5[address(arg1)][idx].field_1280)][Mask(255, 1, s + stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0)].field_0 >= _958:
                            s = s
                            continue 
                        if 1 > !(s + stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0 / 2):
                            revert with 0, 17
                        s = (s + stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0 / 2) + 1
                        continue 
                    if uint8(stor5[address(arg1)][idx].field_1280) > 2:
                        revert with 0, 33
                    mem[32] = 8
                    t = 0
                    while stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0 > t:
                        if t > !stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0:
                            revert with 0, 17
                        if uint8(stor5[address(arg1)][idx].field_1280) > 2:
                            revert with 0, 33
                        mem[32] = 8
                        if t + stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0 / 2 >= stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0:
                            revert with 0, 50
                        mem[0] = sha3(uint8(stor5[address(arg1)][idx].field_1280), 8)
                        if stor8[uint8(stor5[address(arg1)][idx].field_1280)][Mask(255, 1, t + stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0)].field_0 >= stor5[address(arg1)][idx].field_512:
                            t = t
                            continue 
                        if 1 > !(t + stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0 / 2):
                            revert with 0, 17
                        t = (t + stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0 / 2) + 1
                        continue 
                    u = s
                    v = stor5[address(arg1)][idx].field_768
                    while u < t:
                        if uint8(stor5[address(arg1)][idx].field_1280) > 2:
                            revert with 0, 33
                        mem[32] = 8
                        if u >= stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0:
                            revert with 0, 50
                        mem[0] = sha3(uint8(stor5[address(arg1)][idx].field_1280), 8)
                        if 100 * 10^6 < stor8[uint8(stor5[address(arg1)][idx].field_1280)][u].field_256 - 0x8000000000000000000000000000000000000000000000000000000000000000 and stor8[uint8(stor5[address(arg1)][idx].field_1280)][u].field_256 >= 0:
                            revert with 0, 17
                        if stor8[uint8(stor5[address(arg1)][idx].field_1280)][u].field_256 < 0 and 100 * 10^6 > stor8[uint8(stor5[address(arg1)][idx].field_1280)][u].field_256 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                            revert with 0, 17
                        if v and -stor8[uint8(stor5[address(arg1)][idx].field_1280)][u].field_256 + 100 * 10^6 > -1 / v:
                            revert with 0, 17
                        if u == -1:
                            revert with 0, 17
                        u = u + 1
                        v = (100 * 10^6 * v) - (stor8[uint8(stor5[address(arg1)][idx].field_1280)][u].field_256 * v) / 100 * 10^6
                        continue 
                    if stor5[address(arg1)][idx].field_512 < _958:
                        revert with 0, 17
                    if not sub_9b28d1a7:
                        revert with 0, 18
                    s = stor5[address(arg1)][idx].field_512 - _958 / sub_9b28d1a7
                    t = v
                    while s:
                        if not s:
                            revert with 0, 17
                        if 100 * 10^6 < sub_93520a80 - 0x8000000000000000000000000000000000000000000000000000000000000000 and sub_93520a80 >= 0:
                            revert with 0, 17
                        if sub_93520a80 < 0 and 100 * 10^6 > sub_93520a80 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                            revert with 0, 17
                        if t and -sub_93520a80 + 100 * 10^6 > -1 / t:
                            revert with 0, 17
                        s = s - 1
                        t = (100 * 10^6 * t) - (sub_93520a80 * t) / 100 * 10^6
                        continue 
                    _1743 = mem[_633 + 32]
                    if uint8(stor5[address(arg1)][idx].field_1280) > 2:
                        revert with 0, 33
                    mem[0] = uint8(stor5[address(arg1)][idx].field_1280)
                    mem[32] = 8
                    s = var153001
                    t = var153002
                    u = var153004
                    v = var153005
                    w = var153006
                    x = var153007
                    y = var153008
                    z = var153009
                    while s < stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0:
                        if uint8(stor5[address(arg1)][idx].field_1280) > 2:
                            revert with 0, 33
                        if s >= stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0:
                            revert with 0, 50
                        if y < _1743:
                            revert with 0, 17
                        if not sub_9b28d1a7:
                            revert with 0, 18
                        if stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0 < _1743:
                            revert with 0, 17
                        if not sub_9b28d1a7:
                            revert with 0, 18
                        if stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0 - _1743 / sub_9b28d1a7 == y - _1743 / sub_9b28d1a7:
                            if stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0 < y:
                                revert with 0, 17
                            if stor5[address(arg1)][idx].field_1024 and z > -1 / stor5[address(arg1)][idx].field_1024:
                                revert with 0, 17
                            if stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6 and stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0 - y > -1 / stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6:
                                revert with 0, 17
                            if w > !((stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) - (y * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) / 8760 * 24 * 3600):
                                revert with 0, 17
                            if stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0 - _1743 / sub_9b28d1a7 != y - _1743 / sub_9b28d1a7:
                                if 100 * 10^6 < sub_93520a80 - 0x8000000000000000000000000000000000000000000000000000000000000000 and sub_93520a80 >= 0:
                                    revert with 0, 17
                                if sub_93520a80 < 0 and 100 * 10^6 > sub_93520a80 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                    revert with 0, 17
                                if z and -sub_93520a80 + 100 * 10^6 > -1 / z:
                                    revert with 0, 17
                                if not s:
                                    revert with 0, 17
                                if s - 1 == -1:
                                    revert with 0, 17
                                if uint8(stor5[address(arg1)][idx].field_1280) > 2:
                                    revert with 0, 33
                                mem[0] = uint8(stor5[address(arg1)][idx].field_1280)
                                mem[32] = 8
                                s = s
                                t = stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0 - _1743 / sub_9b28d1a7 != y - _1743 / sub_9b28d1a7
                                u = (stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) - (y * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) / 8760 * 24 * 3600
                                v = stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0 - y
                                w = w + ((stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) - (y * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) / 8760 * 24 * 3600)
                                x = stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0
                                y = stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0
                                z = (100 * 10^6 * z) - (sub_93520a80 * z) / 100 * 10^6
                                continue 
                            if uint8(stor5[address(arg1)][idx].field_1280) > 2:
                                revert with 0, 33
                            if s >= stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0:
                                revert with 0, 50
                            if 100 * 10^6 < stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_256 - 0x8000000000000000000000000000000000000000000000000000000000000000 and stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_256 >= 0:
                                revert with 0, 17
                            if stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_256 < 0 and 100 * 10^6 > stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_256 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                revert with 0, 17
                            if z and -stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_256 + 100 * 10^6 > -1 / z:
                                revert with 0, 17
                            if s == -1:
                                revert with 0, 17
                            if uint8(stor5[address(arg1)][idx].field_1280) > 2:
                                revert with 0, 33
                            mem[0] = uint8(stor5[address(arg1)][idx].field_1280)
                            mem[32] = 8
                            s = s + 1
                            t = stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0 - _1743 / sub_9b28d1a7 != y - _1743 / sub_9b28d1a7
                            u = (stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) - (y * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) / 8760 * 24 * 3600
                            v = stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0 - y
                            w = w + ((stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) - (y * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) / 8760 * 24 * 3600)
                            x = stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0
                            y = stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0
                            z = (100 * 10^6 * z) - (stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_256 * z) / 100 * 10^6
                            continue 
                        if y < _1743:
                            revert with 0, 17
                        if not sub_9b28d1a7:
                            revert with 0, 18
                        if 1 > !(y - _1743 / sub_9b28d1a7):
                            revert with 0, 17
                        if sub_9b28d1a7 and (y - _1743 / sub_9b28d1a7) + 1 > -1 / sub_9b28d1a7:
                            revert with 0, 17
                        if _1743 > !(sub_9b28d1a7 + (y - _1743 / sub_9b28d1a7 * sub_9b28d1a7)):
                            revert with 0, 17
                        if _1743 + sub_9b28d1a7 + (y - _1743 / sub_9b28d1a7 * sub_9b28d1a7) < y:
                            revert with 0, 17
                        if stor5[address(arg1)][idx].field_1024 and z > -1 / stor5[address(arg1)][idx].field_1024:
                            revert with 0, 17
                        if stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6 and _1743 + sub_9b28d1a7 + (y - _1743 / sub_9b28d1a7 * sub_9b28d1a7) - y > -1 / stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6:
                            revert with 0, 17
                        if w > !((_1743 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) + (sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) + (y - _1743 / sub_9b28d1a7 * sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) - (y * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) / 8760 * 24 * 3600):
                            revert with 0, 17
                        if stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0 - _1743 / sub_9b28d1a7 != y - _1743 / sub_9b28d1a7:
                            if 100 * 10^6 < sub_93520a80 - 0x8000000000000000000000000000000000000000000000000000000000000000 and sub_93520a80 >= 0:
                                revert with 0, 17
                            if sub_93520a80 < 0 and 100 * 10^6 > sub_93520a80 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                revert with 0, 17
                            if z and -sub_93520a80 + 100 * 10^6 > -1 / z:
                                revert with 0, 17
                            if not s:
                                revert with 0, 17
                            if s - 1 == -1:
                                revert with 0, 17
                            if uint8(stor5[address(arg1)][idx].field_1280) > 2:
                                revert with 0, 33
                            mem[0] = uint8(stor5[address(arg1)][idx].field_1280)
                            mem[32] = 8
                            s = s
                            t = stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0 - _1743 / sub_9b28d1a7 != y - _1743 / sub_9b28d1a7
                            u = (_1743 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) + (sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) + (y - _1743 / sub_9b28d1a7 * sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) - (y * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) / 8760 * 24 * 3600
                            v = _1743 + sub_9b28d1a7 + (y - _1743 / sub_9b28d1a7 * sub_9b28d1a7) - y
                            w = w + ((_1743 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) + (sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) + (y - _1743 / sub_9b28d1a7 * sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) - (y * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) / 8760 * 24 * 3600)
                            x = _1743 + sub_9b28d1a7 + (y - _1743 / sub_9b28d1a7 * sub_9b28d1a7)
                            y = _1743 + sub_9b28d1a7 + (y - _1743 / sub_9b28d1a7 * sub_9b28d1a7)
                            z = (100 * 10^6 * z) - (sub_93520a80 * z) / 100 * 10^6
                            continue 
                        if uint8(stor5[address(arg1)][idx].field_1280) > 2:
                            revert with 0, 33
                        if s >= stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0:
                            revert with 0, 50
                        if 100 * 10^6 < stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_256 - 0x8000000000000000000000000000000000000000000000000000000000000000 and stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_256 >= 0:
                            revert with 0, 17
                        if stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_256 < 0 and 100 * 10^6 > stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_256 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                            revert with 0, 17
                        if z and -stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_256 + 100 * 10^6 > -1 / z:
                            revert with 0, 17
                        if s == -1:
                            revert with 0, 17
                        if uint8(stor5[address(arg1)][idx].field_1280) > 2:
                            revert with 0, 33
                        mem[0] = uint8(stor5[address(arg1)][idx].field_1280)
                        mem[32] = 8
                        s = s + 1
                        t = stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0 - _1743 / sub_9b28d1a7 != y - _1743 / sub_9b28d1a7
                        u = (_1743 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) + (sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) + (y - _1743 / sub_9b28d1a7 * sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) - (y * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) / 8760 * 24 * 3600
                        v = _1743 + sub_9b28d1a7 + (y - _1743 / sub_9b28d1a7 * sub_9b28d1a7) - y
                        w = w + ((_1743 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) + (sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) + (y - _1743 / sub_9b28d1a7 * sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) - (y * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) / 8760 * 24 * 3600)
                        x = _1743 + sub_9b28d1a7 + (y - _1743 / sub_9b28d1a7 * sub_9b28d1a7)
                        y = _1743 + sub_9b28d1a7 + (y - _1743 / sub_9b28d1a7 * sub_9b28d1a7)
                        z = (100 * 10^6 * z) - (stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_256 * z) / 100 * 10^6
                        continue 
                    a = t
                    a = u
                    a = v
                    a = w
                    b = x
                    s = y
                    b = z
                    while s != block.timestamp:
                        if s < _1743:
                            revert with 0, 17
                        if not sub_9b28d1a7:
                            revert with 0, 18
                        if block.timestamp < _1743:
                            revert with 0, 17
                        if not sub_9b28d1a7:
                            revert with 0, 18
                        if block.timestamp - _1743 / sub_9b28d1a7 == s - _1743 / sub_9b28d1a7:
                            if block.timestamp < s:
                                revert with 0, 17
                            if stor5[address(arg1)][idx].field_1024 and b > -1 / stor5[address(arg1)][idx].field_1024:
                                revert with 0, 17
                            if stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6 and block.timestamp - s > -1 / stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6:
                                revert with 0, 17
                            if a > !((block.timestamp * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) - (s * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) / 8760 * 24 * 3600):
                                revert with 0, 17
                            if block.timestamp - _1743 / sub_9b28d1a7 == s - _1743 / sub_9b28d1a7:
                                a = block.timestamp - _1743 / sub_9b28d1a7 != s - _1743 / sub_9b28d1a7
                                a = (block.timestamp * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) - (s * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) / 8760 * 24 * 3600
                                a = block.timestamp - s
                                a = a + ((block.timestamp * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) - (s * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) / 8760 * 24 * 3600)
                                b = block.timestamp
                                s = block.timestamp
                                b = b
                                continue 
                            if 100 * 10^6 < sub_93520a80 - 0x8000000000000000000000000000000000000000000000000000000000000000 and sub_93520a80 >= 0:
                                revert with 0, 17
                            if sub_93520a80 < 0 and 100 * 10^6 > sub_93520a80 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                revert with 0, 17
                            if b and -sub_93520a80 + 100 * 10^6 > -1 / b:
                                revert with 0, 17
                            a = block.timestamp - _1743 / sub_9b28d1a7 != s - _1743 / sub_9b28d1a7
                            a = (block.timestamp * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) - (s * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) / 8760 * 24 * 3600
                            a = block.timestamp - s
                            a = a + ((block.timestamp * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) - (s * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) / 8760 * 24 * 3600)
                            b = block.timestamp
                            s = block.timestamp
                            b = (100 * 10^6 * b) - (sub_93520a80 * b) / 100 * 10^6
                            continue 
                        if s < _1743:
                            revert with 0, 17
                        if not sub_9b28d1a7:
                            revert with 0, 18
                        if 1 > !(s - _1743 / sub_9b28d1a7):
                            revert with 0, 17
                        if sub_9b28d1a7 and (s - _1743 / sub_9b28d1a7) + 1 > -1 / sub_9b28d1a7:
                            revert with 0, 17
                        if _1743 > !(sub_9b28d1a7 + (s - _1743 / sub_9b28d1a7 * sub_9b28d1a7)):
                            revert with 0, 17
                        if _1743 + sub_9b28d1a7 + (s - _1743 / sub_9b28d1a7 * sub_9b28d1a7) < s:
                            revert with 0, 17
                        if stor5[address(arg1)][idx].field_1024 and b > -1 / stor5[address(arg1)][idx].field_1024:
                            revert with 0, 17
                        if stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6 and _1743 + sub_9b28d1a7 + (s - _1743 / sub_9b28d1a7 * sub_9b28d1a7) - s > -1 / stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6:
                            revert with 0, 17
                        if a > !((_1743 * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) + (sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) + (s - _1743 / sub_9b28d1a7 * sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) - (s * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) / 8760 * 24 * 3600):
                            revert with 0, 17
                        if block.timestamp - _1743 / sub_9b28d1a7 == s - _1743 / sub_9b28d1a7:
                            a = block.timestamp - _1743 / sub_9b28d1a7 != s - _1743 / sub_9b28d1a7
                            a = (_1743 * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) + (sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) + (s - _1743 / sub_9b28d1a7 * sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) - (s * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) / 8760 * 24 * 3600
                            a = _1743 + sub_9b28d1a7 + (s - _1743 / sub_9b28d1a7 * sub_9b28d1a7) - s
                            a = a + ((_1743 * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) + (sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) + (s - _1743 / sub_9b28d1a7 * sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) - (s * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) / 8760 * 24 * 3600)
                            b = _1743 + sub_9b28d1a7 + (s - _1743 / sub_9b28d1a7 * sub_9b28d1a7)
                            s = _1743 + sub_9b28d1a7 + (s - _1743 / sub_9b28d1a7 * sub_9b28d1a7)
                            b = b
                            continue 
                        if 100 * 10^6 < sub_93520a80 - 0x8000000000000000000000000000000000000000000000000000000000000000 and sub_93520a80 >= 0:
                            revert with 0, 17
                        if sub_93520a80 < 0 and 100 * 10^6 > sub_93520a80 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                            revert with 0, 17
                        if b and -sub_93520a80 + 100 * 10^6 > -1 / b:
                            revert with 0, 17
                        a = block.timestamp - _1743 / sub_9b28d1a7 != s - _1743 / sub_9b28d1a7
                        a = (_1743 * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) + (sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) + (s - _1743 / sub_9b28d1a7 * sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) - (s * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) / 8760 * 24 * 3600
                        a = _1743 + sub_9b28d1a7 + (s - _1743 / sub_9b28d1a7 * sub_9b28d1a7) - s
                        a = a + ((_1743 * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) + (sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) + (s - _1743 / sub_9b28d1a7 * sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) - (s * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) / 8760 * 24 * 3600)
                        b = _1743 + sub_9b28d1a7 + (s - _1743 / sub_9b28d1a7 * sub_9b28d1a7)
                        s = _1743 + sub_9b28d1a7 + (s - _1743 / sub_9b28d1a7 * sub_9b28d1a7)
                        b = (100 * 10^6 * b) - (sub_93520a80 * b) / 100 * 10^6
                        continue 
                else:
                    if 31 >= uint255(stor5[address(arg1)][idx].field_0) * 0.5:
                        mem[_636 + 32] = 256 * Mask(248, 0, stor5[address(arg1)][idx].field_8)
                        mem[_633] = _636
                        mem[_633 + 32] = stor5[address(arg1)][idx].field_256
                        mem[_633 + 64] = stor5[address(arg1)][idx].field_512
                        mem[_633 + 96] = stor5[address(arg1)][idx].field_768
                        mem[_633 + 128] = stor5[address(arg1)][idx].field_1024
                        if uint8(stor5[address(arg1)][idx].field_1280) > 2:
                            revert with 0, 33
                        mem[_633 + 160] = uint8(stor5[address(arg1)][idx].field_1280)
                        if uint8(stor5[address(arg1)][idx].field_1280) > 2:
                            revert with 0, 33
                        mem[32] = 8
                        s = 0
                        while stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0 > s:
                            if s > !stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0:
                                revert with 0, 17
                            if uint8(stor5[address(arg1)][idx].field_1280) > 2:
                                revert with 0, 33
                            mem[32] = 8
                            if s + stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0 / 2 >= stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0:
                                revert with 0, 50
                            mem[0] = sha3(uint8(stor5[address(arg1)][idx].field_1280), 8)
                            if stor8[uint8(stor5[address(arg1)][idx].field_1280)][Mask(255, 1, s + stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0)].field_0 >= stor5[address(arg1)][idx].field_512:
                                s = s
                                continue 
                            if 1 > !(s + stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0 / 2):
                                revert with 0, 17
                            s = (s + stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0 / 2) + 1
                            continue 
                        _961 = mem[_633 + 32]
                        if uint8(stor5[address(arg1)][idx].field_1280) > 2:
                            revert with 0, 33
                        s = 0
                        while stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0 > s:
                            if s > !stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0:
                                revert with 0, 17
                            if uint8(stor5[address(arg1)][idx].field_1280) > 2:
                                revert with 0, 33
                            mem[32] = 8
                            if s + stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0 / 2 >= stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0:
                                revert with 0, 50
                            mem[0] = sha3(uint8(stor5[address(arg1)][idx].field_1280), 8)
                            if stor8[uint8(stor5[address(arg1)][idx].field_1280)][Mask(255, 1, s + stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0)].field_0 >= _961:
                                s = s
                                continue 
                            if 1 > !(s + stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0 / 2):
                                revert with 0, 17
                            s = (s + stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0 / 2) + 1
                            continue 
                        if uint8(stor5[address(arg1)][idx].field_1280) > 2:
                            revert with 0, 33
                        mem[32] = 8
                        t = 0
                        while stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0 > t:
                            if t > !stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0:
                                revert with 0, 17
                            if uint8(stor5[address(arg1)][idx].field_1280) > 2:
                                revert with 0, 33
                            mem[32] = 8
                            if t + stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0 / 2 >= stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0:
                                revert with 0, 50
                            mem[0] = sha3(uint8(stor5[address(arg1)][idx].field_1280), 8)
                            if stor8[uint8(stor5[address(arg1)][idx].field_1280)][Mask(255, 1, t + stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0)].field_0 >= stor5[address(arg1)][idx].field_512:
                                t = t
                                continue 
                            if 1 > !(t + stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0 / 2):
                                revert with 0, 17
                            t = (t + stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0 / 2) + 1
                            continue 
                        u = s
                        v = stor5[address(arg1)][idx].field_768
                        while u < t:
                            if uint8(stor5[address(arg1)][idx].field_1280) > 2:
                                revert with 0, 33
                            mem[32] = 8
                            if u >= stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0:
                                revert with 0, 50
                            mem[0] = sha3(uint8(stor5[address(arg1)][idx].field_1280), 8)
                            if 100 * 10^6 < stor8[uint8(stor5[address(arg1)][idx].field_1280)][u].field_256 - 0x8000000000000000000000000000000000000000000000000000000000000000 and stor8[uint8(stor5[address(arg1)][idx].field_1280)][u].field_256 >= 0:
                                revert with 0, 17
                            if stor8[uint8(stor5[address(arg1)][idx].field_1280)][u].field_256 < 0 and 100 * 10^6 > stor8[uint8(stor5[address(arg1)][idx].field_1280)][u].field_256 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                revert with 0, 17
                            if v and -stor8[uint8(stor5[address(arg1)][idx].field_1280)][u].field_256 + 100 * 10^6 > -1 / v:
                                revert with 0, 17
                            if u == -1:
                                revert with 0, 17
                            u = u + 1
                            v = (100 * 10^6 * v) - (stor8[uint8(stor5[address(arg1)][idx].field_1280)][u].field_256 * v) / 100 * 10^6
                            continue 
                        if stor5[address(arg1)][idx].field_512 < _961:
                            revert with 0, 17
                        if not sub_9b28d1a7:
                            revert with 0, 18
                        s = stor5[address(arg1)][idx].field_512 - _961 / sub_9b28d1a7
                        t = v
                        while s:
                            if not s:
                                revert with 0, 17
                            if 100 * 10^6 < sub_93520a80 - 0x8000000000000000000000000000000000000000000000000000000000000000 and sub_93520a80 >= 0:
                                revert with 0, 17
                            if sub_93520a80 < 0 and 100 * 10^6 > sub_93520a80 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                revert with 0, 17
                            if t and -sub_93520a80 + 100 * 10^6 > -1 / t:
                                revert with 0, 17
                            s = s - 1
                            t = (100 * 10^6 * t) - (sub_93520a80 * t) / 100 * 10^6
                            continue 
                        _1745 = mem[_633 + 32]
                        if uint8(stor5[address(arg1)][idx].field_1280) > 2:
                            revert with 0, 33
                        mem[0] = uint8(stor5[address(arg1)][idx].field_1280)
                        mem[32] = 8
                        s = var155001
                        t = var155002
                        u = var155004
                        v = var155005
                        w = var155006
                        x = var155007
                        y = var155008
                        z = var155009
                        while s < stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0:
                            if uint8(stor5[address(arg1)][idx].field_1280) > 2:
                                revert with 0, 33
                            if s >= stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0:
                                revert with 0, 50
                            if y < _1745:
                                revert with 0, 17
                            if not sub_9b28d1a7:
                                revert with 0, 18
                            if stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0 < _1745:
                                revert with 0, 17
                            if not sub_9b28d1a7:
                                revert with 0, 18
                            if stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0 - _1745 / sub_9b28d1a7 == y - _1745 / sub_9b28d1a7:
                                if stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0 < y:
                                    revert with 0, 17
                                if stor5[address(arg1)][idx].field_1024 and z > -1 / stor5[address(arg1)][idx].field_1024:
                                    revert with 0, 17
                                if stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6 and stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0 - y > -1 / stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6:
                                    revert with 0, 17
                                if w > !((stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) - (y * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) / 8760 * 24 * 3600):
                                    revert with 0, 17
                                if stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0 - _1745 / sub_9b28d1a7 != y - _1745 / sub_9b28d1a7:
                                    if 100 * 10^6 < sub_93520a80 - 0x8000000000000000000000000000000000000000000000000000000000000000 and sub_93520a80 >= 0:
                                        revert with 0, 17
                                    if sub_93520a80 < 0 and 100 * 10^6 > sub_93520a80 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                        revert with 0, 17
                                    if z and -sub_93520a80 + 100 * 10^6 > -1 / z:
                                        revert with 0, 17
                                    if not s:
                                        revert with 0, 17
                                    if s - 1 == -1:
                                        revert with 0, 17
                                    if uint8(stor5[address(arg1)][idx].field_1280) > 2:
                                        revert with 0, 33
                                    mem[0] = uint8(stor5[address(arg1)][idx].field_1280)
                                    mem[32] = 8
                                    s = s
                                    t = stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0 - _1745 / sub_9b28d1a7 != y - _1745 / sub_9b28d1a7
                                    u = (stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) - (y * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) / 8760 * 24 * 3600
                                    v = stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0 - y
                                    w = w + ((stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) - (y * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) / 8760 * 24 * 3600)
                                    x = stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0
                                    y = stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0
                                    z = (100 * 10^6 * z) - (sub_93520a80 * z) / 100 * 10^6
                                    continue 
                                if uint8(stor5[address(arg1)][idx].field_1280) > 2:
                                    revert with 0, 33
                                if s >= stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0:
                                    revert with 0, 50
                                if 100 * 10^6 < stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_256 - 0x8000000000000000000000000000000000000000000000000000000000000000 and stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_256 >= 0:
                                    revert with 0, 17
                                if stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_256 < 0 and 100 * 10^6 > stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_256 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                    revert with 0, 17
                                if z and -stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_256 + 100 * 10^6 > -1 / z:
                                    revert with 0, 17
                                if s == -1:
                                    revert with 0, 17
                                if uint8(stor5[address(arg1)][idx].field_1280) > 2:
                                    revert with 0, 33
                                mem[0] = uint8(stor5[address(arg1)][idx].field_1280)
                                mem[32] = 8
                                s = s + 1
                                t = stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0 - _1745 / sub_9b28d1a7 != y - _1745 / sub_9b28d1a7
                                u = (stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) - (y * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) / 8760 * 24 * 3600
                                v = stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0 - y
                                w = w + ((stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) - (y * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) / 8760 * 24 * 3600)
                                x = stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0
                                y = stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0
                                z = (100 * 10^6 * z) - (stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_256 * z) / 100 * 10^6
                                continue 
                            if y < _1745:
                                revert with 0, 17
                            if not sub_9b28d1a7:
                                revert with 0, 18
                            if 1 > !(y - _1745 / sub_9b28d1a7):
                                revert with 0, 17
                            if sub_9b28d1a7 and (y - _1745 / sub_9b28d1a7) + 1 > -1 / sub_9b28d1a7:
                                revert with 0, 17
                            if _1745 > !(sub_9b28d1a7 + (y - _1745 / sub_9b28d1a7 * sub_9b28d1a7)):
                                revert with 0, 17
                            if _1745 + sub_9b28d1a7 + (y - _1745 / sub_9b28d1a7 * sub_9b28d1a7) < y:
                                revert with 0, 17
                            if stor5[address(arg1)][idx].field_1024 and z > -1 / stor5[address(arg1)][idx].field_1024:
                                revert with 0, 17
                            if stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6 and _1745 + sub_9b28d1a7 + (y - _1745 / sub_9b28d1a7 * sub_9b28d1a7) - y > -1 / stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6:
                                revert with 0, 17
                            if w > !((_1745 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) + (sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) + (y - _1745 / sub_9b28d1a7 * sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) - (y * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) / 8760 * 24 * 3600):
                                revert with 0, 17
                            if stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0 - _1745 / sub_9b28d1a7 != y - _1745 / sub_9b28d1a7:
                                if 100 * 10^6 < sub_93520a80 - 0x8000000000000000000000000000000000000000000000000000000000000000 and sub_93520a80 >= 0:
                                    revert with 0, 17
                                if sub_93520a80 < 0 and 100 * 10^6 > sub_93520a80 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                    revert with 0, 17
                                if z and -sub_93520a80 + 100 * 10^6 > -1 / z:
                                    revert with 0, 17
                                if not s:
                                    revert with 0, 17
                                if s - 1 == -1:
                                    revert with 0, 17
                                if uint8(stor5[address(arg1)][idx].field_1280) > 2:
                                    revert with 0, 33
                                mem[0] = uint8(stor5[address(arg1)][idx].field_1280)
                                mem[32] = 8
                                s = s
                                t = stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0 - _1745 / sub_9b28d1a7 != y - _1745 / sub_9b28d1a7
                                u = (_1745 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) + (sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) + (y - _1745 / sub_9b28d1a7 * sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) - (y * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) / 8760 * 24 * 3600
                                v = _1745 + sub_9b28d1a7 + (y - _1745 / sub_9b28d1a7 * sub_9b28d1a7) - y
                                w = w + ((_1745 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) + (sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) + (y - _1745 / sub_9b28d1a7 * sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) - (y * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) / 8760 * 24 * 3600)
                                x = _1745 + sub_9b28d1a7 + (y - _1745 / sub_9b28d1a7 * sub_9b28d1a7)
                                y = _1745 + sub_9b28d1a7 + (y - _1745 / sub_9b28d1a7 * sub_9b28d1a7)
                                z = (100 * 10^6 * z) - (sub_93520a80 * z) / 100 * 10^6
                                continue 
                            if uint8(stor5[address(arg1)][idx].field_1280) > 2:
                                revert with 0, 33
                            if s >= stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0:
                                revert with 0, 50
                            if 100 * 10^6 < stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_256 - 0x8000000000000000000000000000000000000000000000000000000000000000 and stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_256 >= 0:
                                revert with 0, 17
                            if stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_256 < 0 and 100 * 10^6 > stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_256 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                revert with 0, 17
                            if z and -stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_256 + 100 * 10^6 > -1 / z:
                                revert with 0, 17
                            if s == -1:
                                revert with 0, 17
                            if uint8(stor5[address(arg1)][idx].field_1280) > 2:
                                revert with 0, 33
                            mem[0] = uint8(stor5[address(arg1)][idx].field_1280)
                            mem[32] = 8
                            s = s + 1
                            t = stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0 - _1745 / sub_9b28d1a7 != y - _1745 / sub_9b28d1a7
                            u = (_1745 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) + (sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) + (y - _1745 / sub_9b28d1a7 * sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) - (y * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) / 8760 * 24 * 3600
                            v = _1745 + sub_9b28d1a7 + (y - _1745 / sub_9b28d1a7 * sub_9b28d1a7) - y
                            w = w + ((_1745 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) + (sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) + (y - _1745 / sub_9b28d1a7 * sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) - (y * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) / 8760 * 24 * 3600)
                            x = _1745 + sub_9b28d1a7 + (y - _1745 / sub_9b28d1a7 * sub_9b28d1a7)
                            y = _1745 + sub_9b28d1a7 + (y - _1745 / sub_9b28d1a7 * sub_9b28d1a7)
                            z = (100 * 10^6 * z) - (stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_256 * z) / 100 * 10^6
                            continue 
                        a = t
                        a = u
                        a = v
                        a = w
                        b = x
                        s = y
                        b = z
                        while s != block.timestamp:
                            if s < _1745:
                                revert with 0, 17
                            if not sub_9b28d1a7:
                                revert with 0, 18
                            if block.timestamp < _1745:
                                revert with 0, 17
                            if not sub_9b28d1a7:
                                revert with 0, 18
                            if block.timestamp - _1745 / sub_9b28d1a7 == s - _1745 / sub_9b28d1a7:
                                if block.timestamp < s:
                                    revert with 0, 17
                                if stor5[address(arg1)][idx].field_1024 and b > -1 / stor5[address(arg1)][idx].field_1024:
                                    revert with 0, 17
                                if stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6 and block.timestamp - s > -1 / stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6:
                                    revert with 0, 17
                                if a > !((block.timestamp * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) - (s * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) / 8760 * 24 * 3600):
                                    revert with 0, 17
                                if block.timestamp - _1745 / sub_9b28d1a7 == s - _1745 / sub_9b28d1a7:
                                    a = block.timestamp - _1745 / sub_9b28d1a7 != s - _1745 / sub_9b28d1a7
                                    a = (block.timestamp * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) - (s * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) / 8760 * 24 * 3600
                                    a = block.timestamp - s
                                    a = a + ((block.timestamp * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) - (s * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) / 8760 * 24 * 3600)
                                    b = block.timestamp
                                    s = block.timestamp
                                    b = b
                                    continue 
                                if 100 * 10^6 < sub_93520a80 - 0x8000000000000000000000000000000000000000000000000000000000000000 and sub_93520a80 >= 0:
                                    revert with 0, 17
                                if sub_93520a80 < 0 and 100 * 10^6 > sub_93520a80 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                    revert with 0, 17
                                if b and -sub_93520a80 + 100 * 10^6 > -1 / b:
                                    revert with 0, 17
                                a = block.timestamp - _1745 / sub_9b28d1a7 != s - _1745 / sub_9b28d1a7
                                a = (block.timestamp * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) - (s * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) / 8760 * 24 * 3600
                                a = block.timestamp - s
                                a = a + ((block.timestamp * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) - (s * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) / 8760 * 24 * 3600)
                                b = block.timestamp
                                s = block.timestamp
                                b = (100 * 10^6 * b) - (sub_93520a80 * b) / 100 * 10^6
                                continue 
                            if s < _1745:
                                revert with 0, 17
                            if not sub_9b28d1a7:
                                revert with 0, 18
                            if 1 > !(s - _1745 / sub_9b28d1a7):
                                revert with 0, 17
                            if sub_9b28d1a7 and (s - _1745 / sub_9b28d1a7) + 1 > -1 / sub_9b28d1a7:
                                revert with 0, 17
                            if _1745 > !(sub_9b28d1a7 + (s - _1745 / sub_9b28d1a7 * sub_9b28d1a7)):
                                revert with 0, 17
                            if _1745 + sub_9b28d1a7 + (s - _1745 / sub_9b28d1a7 * sub_9b28d1a7) < s:
                                revert with 0, 17
                            if stor5[address(arg1)][idx].field_1024 and b > -1 / stor5[address(arg1)][idx].field_1024:
                                revert with 0, 17
                            if stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6 and _1745 + sub_9b28d1a7 + (s - _1745 / sub_9b28d1a7 * sub_9b28d1a7) - s > -1 / stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6:
                                revert with 0, 17
                            if a > !((_1745 * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) + (sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) + (s - _1745 / sub_9b28d1a7 * sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) - (s * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) / 8760 * 24 * 3600):
                                revert with 0, 17
                            if block.timestamp - _1745 / sub_9b28d1a7 == s - _1745 / sub_9b28d1a7:
                                a = block.timestamp - _1745 / sub_9b28d1a7 != s - _1745 / sub_9b28d1a7
                                a = (_1745 * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) + (sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) + (s - _1745 / sub_9b28d1a7 * sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) - (s * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) / 8760 * 24 * 3600
                                a = _1745 + sub_9b28d1a7 + (s - _1745 / sub_9b28d1a7 * sub_9b28d1a7) - s
                                a = a + ((_1745 * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) + (sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) + (s - _1745 / sub_9b28d1a7 * sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) - (s * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) / 8760 * 24 * 3600)
                                b = _1745 + sub_9b28d1a7 + (s - _1745 / sub_9b28d1a7 * sub_9b28d1a7)
                                s = _1745 + sub_9b28d1a7 + (s - _1745 / sub_9b28d1a7 * sub_9b28d1a7)
                                b = b
                                continue 
                            if 100 * 10^6 < sub_93520a80 - 0x8000000000000000000000000000000000000000000000000000000000000000 and sub_93520a80 >= 0:
                                revert with 0, 17
                            if sub_93520a80 < 0 and 100 * 10^6 > sub_93520a80 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                revert with 0, 17
                            if b and -sub_93520a80 + 100 * 10^6 > -1 / b:
                                revert with 0, 17
                            a = block.timestamp - _1745 / sub_9b28d1a7 != s - _1745 / sub_9b28d1a7
                            a = (_1745 * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) + (sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) + (s - _1745 / sub_9b28d1a7 * sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) - (s * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) / 8760 * 24 * 3600
                            a = _1745 + sub_9b28d1a7 + (s - _1745 / sub_9b28d1a7 * sub_9b28d1a7) - s
                            a = a + ((_1745 * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) + (sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) + (s - _1745 / sub_9b28d1a7 * sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) - (s * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) / 8760 * 24 * 3600)
                            b = _1745 + sub_9b28d1a7 + (s - _1745 / sub_9b28d1a7 * sub_9b28d1a7)
                            s = _1745 + sub_9b28d1a7 + (s - _1745 / sub_9b28d1a7 * sub_9b28d1a7)
                            b = (100 * 10^6 * b) - (sub_93520a80 * b) / 100 * 10^6
                            continue 
                    else:
                        mem[0] = (6 * idx) + sha3(sha3(address(arg1), 5))
                        mem[_636 + 32] = stor5[address(arg1)][idx].field_0
                        s = _636 + 32
                        t = sha3(mem[0])
                        while _636 + (uint255(stor5[address(arg1)][idx].field_0) * 0.5) > s:
                            mem[s + 32] = uint256(stor1[t])
                            s = s + 32
                            t = t + 1
                            continue 
                        mem[_633] = _636
                        mem[_633 + 32] = stor5[address(arg1)][idx].field_256
                        mem[_633 + 64] = stor5[address(arg1)][idx].field_512
                        mem[_633 + 96] = stor5[address(arg1)][idx].field_768
                        mem[_633 + 128] = stor5[address(arg1)][idx].field_1024
                        if uint8(stor5[address(arg1)][idx].field_1280) > 2:
                            revert with 0, 33
                        mem[_633 + 160] = uint8(stor5[address(arg1)][idx].field_1280)
                        if uint8(stor5[address(arg1)][idx].field_1280) > 2:
                            revert with 0, 33
                        mem[32] = 8
                        s = 0
                        while stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0 > s:
                            if s > !stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0:
                                revert with 0, 17
                            if uint8(stor5[address(arg1)][idx].field_1280) > 2:
                                revert with 0, 33
                            mem[32] = 8
                            if s + stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0 / 2 >= stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0:
                                revert with 0, 50
                            mem[0] = sha3(uint8(stor5[address(arg1)][idx].field_1280), 8)
                            if stor8[uint8(stor5[address(arg1)][idx].field_1280)][Mask(255, 1, s + stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0)].field_0 >= stor5[address(arg1)][idx].field_512:
                                s = s
                                continue 
                            if 1 > !(s + stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0 / 2):
                                revert with 0, 17
                            s = (s + stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0 / 2) + 1
                            continue 
                        _1226 = mem[_633 + 32]
                        if uint8(stor5[address(arg1)][idx].field_1280) > 2:
                            revert with 0, 33
                        s = 0
                        while stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0 > s:
                            if s > !stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0:
                                revert with 0, 17
                            if uint8(stor5[address(arg1)][idx].field_1280) > 2:
                                revert with 0, 33
                            mem[32] = 8
                            if s + stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0 / 2 >= stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0:
                                revert with 0, 50
                            mem[0] = sha3(uint8(stor5[address(arg1)][idx].field_1280), 8)
                            if stor8[uint8(stor5[address(arg1)][idx].field_1280)][Mask(255, 1, s + stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0)].field_0 >= _1226:
                                s = s
                                continue 
                            if 1 > !(s + stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0 / 2):
                                revert with 0, 17
                            s = (s + stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0 / 2) + 1
                            continue 
                        if uint8(stor5[address(arg1)][idx].field_1280) > 2:
                            revert with 0, 33
                        mem[32] = 8
                        t = 0
                        while stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0 > t:
                            if t > !stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0:
                                revert with 0, 17
                            if uint8(stor5[address(arg1)][idx].field_1280) > 2:
                                revert with 0, 33
                            mem[32] = 8
                            if t + stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0 / 2 >= stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0:
                                revert with 0, 50
                            mem[0] = sha3(uint8(stor5[address(arg1)][idx].field_1280), 8)
                            if stor8[uint8(stor5[address(arg1)][idx].field_1280)][Mask(255, 1, t + stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0)].field_0 >= stor5[address(arg1)][idx].field_512:
                                t = t
                                continue 
                            if 1 > !(t + stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0 / 2):
                                revert with 0, 17
                            t = (t + stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0 / 2) + 1
                            continue 
                        u = s
                        v = stor5[address(arg1)][idx].field_768
                        while u < t:
                            if uint8(stor5[address(arg1)][idx].field_1280) > 2:
                                revert with 0, 33
                            mem[32] = 8
                            if u >= stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0:
                                revert with 0, 50
                            mem[0] = sha3(uint8(stor5[address(arg1)][idx].field_1280), 8)
                            if 100 * 10^6 < stor8[uint8(stor5[address(arg1)][idx].field_1280)][u].field_256 - 0x8000000000000000000000000000000000000000000000000000000000000000 and stor8[uint8(stor5[address(arg1)][idx].field_1280)][u].field_256 >= 0:
                                revert with 0, 17
                            if stor8[uint8(stor5[address(arg1)][idx].field_1280)][u].field_256 < 0 and 100 * 10^6 > stor8[uint8(stor5[address(arg1)][idx].field_1280)][u].field_256 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                revert with 0, 17
                            if v and -stor8[uint8(stor5[address(arg1)][idx].field_1280)][u].field_256 + 100 * 10^6 > -1 / v:
                                revert with 0, 17
                            if u == -1:
                                revert with 0, 17
                            u = u + 1
                            v = (100 * 10^6 * v) - (stor8[uint8(stor5[address(arg1)][idx].field_1280)][u].field_256 * v) / 100 * 10^6
                            continue 
                        if stor5[address(arg1)][idx].field_512 < _1226:
                            revert with 0, 17
                        if not sub_9b28d1a7:
                            revert with 0, 18
                        s = stor5[address(arg1)][idx].field_512 - _1226 / sub_9b28d1a7
                        t = v
                        while s:
                            if not s:
                                revert with 0, 17
                            if 100 * 10^6 < sub_93520a80 - 0x8000000000000000000000000000000000000000000000000000000000000000 and sub_93520a80 >= 0:
                                revert with 0, 17
                            if sub_93520a80 < 0 and 100 * 10^6 > sub_93520a80 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                revert with 0, 17
                            if t and -sub_93520a80 + 100 * 10^6 > -1 / t:
                                revert with 0, 17
                            s = s - 1
                            t = (100 * 10^6 * t) - (sub_93520a80 * t) / 100 * 10^6
                            continue 
                        _1860 = mem[_633 + 32]
                        if uint8(stor5[address(arg1)][idx].field_1280) > 2:
                            revert with 0, 33
                        mem[0] = uint8(stor5[address(arg1)][idx].field_1280)
                        mem[32] = 8
                        s = var158001
                        t = var158002
                        u = var158004
                        v = var158005
                        w = var158006
                        x = var158007
                        y = var158008
                        z = var158009
                        while s < stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0:
                            if uint8(stor5[address(arg1)][idx].field_1280) > 2:
                                revert with 0, 33
                            if s >= stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0:
                                revert with 0, 50
                            if y < _1860:
                                revert with 0, 17
                            if not sub_9b28d1a7:
                                revert with 0, 18
                            if stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0 < _1860:
                                revert with 0, 17
                            if not sub_9b28d1a7:
                                revert with 0, 18
                            if stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0 - _1860 / sub_9b28d1a7 == y - _1860 / sub_9b28d1a7:
                                if stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0 < y:
                                    revert with 0, 17
                                if stor5[address(arg1)][idx].field_1024 and z > -1 / stor5[address(arg1)][idx].field_1024:
                                    revert with 0, 17
                                if stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6 and stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0 - y > -1 / stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6:
                                    revert with 0, 17
                                if w > !((stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) - (y * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) / 8760 * 24 * 3600):
                                    revert with 0, 17
                                if stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0 - _1860 / sub_9b28d1a7 != y - _1860 / sub_9b28d1a7:
                                    if 100 * 10^6 < sub_93520a80 - 0x8000000000000000000000000000000000000000000000000000000000000000 and sub_93520a80 >= 0:
                                        revert with 0, 17
                                    if sub_93520a80 < 0 and 100 * 10^6 > sub_93520a80 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                        revert with 0, 17
                                    if z and -sub_93520a80 + 100 * 10^6 > -1 / z:
                                        revert with 0, 17
                                    if not s:
                                        revert with 0, 17
                                    if s - 1 == -1:
                                        revert with 0, 17
                                    if uint8(stor5[address(arg1)][idx].field_1280) > 2:
                                        revert with 0, 33
                                    mem[0] = uint8(stor5[address(arg1)][idx].field_1280)
                                    mem[32] = 8
                                    s = s
                                    t = stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0 - _1860 / sub_9b28d1a7 != y - _1860 / sub_9b28d1a7
                                    u = (stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) - (y * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) / 8760 * 24 * 3600
                                    v = stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0 - y
                                    w = w + ((stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) - (y * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) / 8760 * 24 * 3600)
                                    x = stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0
                                    y = stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0
                                    z = (100 * 10^6 * z) - (sub_93520a80 * z) / 100 * 10^6
                                    continue 
                                if uint8(stor5[address(arg1)][idx].field_1280) > 2:
                                    revert with 0, 33
                                if s >= stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0:
                                    revert with 0, 50
                                if 100 * 10^6 < stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_256 - 0x8000000000000000000000000000000000000000000000000000000000000000 and stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_256 >= 0:
                                    revert with 0, 17
                                if stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_256 < 0 and 100 * 10^6 > stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_256 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                    revert with 0, 17
                                if z and -stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_256 + 100 * 10^6 > -1 / z:
                                    revert with 0, 17
                                if s == -1:
                                    revert with 0, 17
                                if uint8(stor5[address(arg1)][idx].field_1280) > 2:
                                    revert with 0, 33
                                mem[0] = uint8(stor5[address(arg1)][idx].field_1280)
                                mem[32] = 8
                                s = s + 1
                                t = stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0 - _1860 / sub_9b28d1a7 != y - _1860 / sub_9b28d1a7
                                u = (stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) - (y * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) / 8760 * 24 * 3600
                                v = stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0 - y
                                w = w + ((stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) - (y * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) / 8760 * 24 * 3600)
                                x = stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0
                                y = stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0
                                z = (100 * 10^6 * z) - (stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_256 * z) / 100 * 10^6
                                continue 
                            if y < _1860:
                                revert with 0, 17
                            if not sub_9b28d1a7:
                                revert with 0, 18
                            if 1 > !(y - _1860 / sub_9b28d1a7):
                                revert with 0, 17
                            if sub_9b28d1a7 and (y - _1860 / sub_9b28d1a7) + 1 > -1 / sub_9b28d1a7:
                                revert with 0, 17
                            if _1860 > !(sub_9b28d1a7 + (y - _1860 / sub_9b28d1a7 * sub_9b28d1a7)):
                                revert with 0, 17
                            if _1860 + sub_9b28d1a7 + (y - _1860 / sub_9b28d1a7 * sub_9b28d1a7) < y:
                                revert with 0, 17
                            if stor5[address(arg1)][idx].field_1024 and z > -1 / stor5[address(arg1)][idx].field_1024:
                                revert with 0, 17
                            if stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6 and _1860 + sub_9b28d1a7 + (y - _1860 / sub_9b28d1a7 * sub_9b28d1a7) - y > -1 / stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6:
                                revert with 0, 17
                            if w > !((_1860 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) + (sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) + (y - _1860 / sub_9b28d1a7 * sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) - (y * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) / 8760 * 24 * 3600):
                                revert with 0, 17
                            if stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0 - _1860 / sub_9b28d1a7 != y - _1860 / sub_9b28d1a7:
                                if 100 * 10^6 < sub_93520a80 - 0x8000000000000000000000000000000000000000000000000000000000000000 and sub_93520a80 >= 0:
                                    revert with 0, 17
                                if sub_93520a80 < 0 and 100 * 10^6 > sub_93520a80 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                    revert with 0, 17
                                if z and -sub_93520a80 + 100 * 10^6 > -1 / z:
                                    revert with 0, 17
                                if not s:
                                    revert with 0, 17
                                if s - 1 == -1:
                                    revert with 0, 17
                                if uint8(stor5[address(arg1)][idx].field_1280) > 2:
                                    revert with 0, 33
                                mem[0] = uint8(stor5[address(arg1)][idx].field_1280)
                                mem[32] = 8
                                s = s
                                t = stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0 - _1860 / sub_9b28d1a7 != y - _1860 / sub_9b28d1a7
                                u = (_1860 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) + (sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) + (y - _1860 / sub_9b28d1a7 * sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) - (y * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) / 8760 * 24 * 3600
                                v = _1860 + sub_9b28d1a7 + (y - _1860 / sub_9b28d1a7 * sub_9b28d1a7) - y
                                w = w + ((_1860 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) + (sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) + (y - _1860 / sub_9b28d1a7 * sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) - (y * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) / 8760 * 24 * 3600)
                                x = _1860 + sub_9b28d1a7 + (y - _1860 / sub_9b28d1a7 * sub_9b28d1a7)
                                y = _1860 + sub_9b28d1a7 + (y - _1860 / sub_9b28d1a7 * sub_9b28d1a7)
                                z = (100 * 10^6 * z) - (sub_93520a80 * z) / 100 * 10^6
                                continue 
                            if uint8(stor5[address(arg1)][idx].field_1280) > 2:
                                revert with 0, 33
                            if s >= stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0:
                                revert with 0, 50
                            if 100 * 10^6 < stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_256 - 0x8000000000000000000000000000000000000000000000000000000000000000 and stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_256 >= 0:
                                revert with 0, 17
                            if stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_256 < 0 and 100 * 10^6 > stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_256 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                revert with 0, 17
                            if z and -stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_256 + 100 * 10^6 > -1 / z:
                                revert with 0, 17
                            if s == -1:
                                revert with 0, 17
                            if uint8(stor5[address(arg1)][idx].field_1280) > 2:
                                revert with 0, 33
                            mem[0] = uint8(stor5[address(arg1)][idx].field_1280)
                            mem[32] = 8
                            s = s + 1
                            t = stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0 - _1860 / sub_9b28d1a7 != y - _1860 / sub_9b28d1a7
                            u = (_1860 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) + (sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) + (y - _1860 / sub_9b28d1a7 * sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) - (y * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) / 8760 * 24 * 3600
                            v = _1860 + sub_9b28d1a7 + (y - _1860 / sub_9b28d1a7 * sub_9b28d1a7) - y
                            w = w + ((_1860 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) + (sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) + (y - _1860 / sub_9b28d1a7 * sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) - (y * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) / 8760 * 24 * 3600)
                            x = _1860 + sub_9b28d1a7 + (y - _1860 / sub_9b28d1a7 * sub_9b28d1a7)
                            y = _1860 + sub_9b28d1a7 + (y - _1860 / sub_9b28d1a7 * sub_9b28d1a7)
                            z = (100 * 10^6 * z) - (stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_256 * z) / 100 * 10^6
                            continue 
                        a = t
                        a = u
                        a = v
                        a = w
                        b = x
                        s = y
                        b = z
                        while s != block.timestamp:
                            if s < _1860:
                                revert with 0, 17
                            if not sub_9b28d1a7:
                                revert with 0, 18
                            if block.timestamp < _1860:
                                revert with 0, 17
                            if not sub_9b28d1a7:
                                revert with 0, 18
                            if block.timestamp - _1860 / sub_9b28d1a7 == s - _1860 / sub_9b28d1a7:
                                if block.timestamp < s:
                                    revert with 0, 17
                                if stor5[address(arg1)][idx].field_1024 and b > -1 / stor5[address(arg1)][idx].field_1024:
                                    revert with 0, 17
                                if stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6 and block.timestamp - s > -1 / stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6:
                                    revert with 0, 17
                                if a > !((block.timestamp * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) - (s * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) / 8760 * 24 * 3600):
                                    revert with 0, 17
                                if block.timestamp - _1860 / sub_9b28d1a7 == s - _1860 / sub_9b28d1a7:
                                    a = block.timestamp - _1860 / sub_9b28d1a7 != s - _1860 / sub_9b28d1a7
                                    a = (block.timestamp * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) - (s * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) / 8760 * 24 * 3600
                                    a = block.timestamp - s
                                    a = a + ((block.timestamp * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) - (s * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) / 8760 * 24 * 3600)
                                    b = block.timestamp
                                    s = block.timestamp
                                    b = b
                                    continue 
                                if 100 * 10^6 < sub_93520a80 - 0x8000000000000000000000000000000000000000000000000000000000000000 and sub_93520a80 >= 0:
                                    revert with 0, 17
                                if sub_93520a80 < 0 and 100 * 10^6 > sub_93520a80 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                    revert with 0, 17
                                if b and -sub_93520a80 + 100 * 10^6 > -1 / b:
                                    revert with 0, 17
                                a = block.timestamp - _1860 / sub_9b28d1a7 != s - _1860 / sub_9b28d1a7
                                a = (block.timestamp * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) - (s * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) / 8760 * 24 * 3600
                                a = block.timestamp - s
                                a = a + ((block.timestamp * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) - (s * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) / 8760 * 24 * 3600)
                                b = block.timestamp
                                s = block.timestamp
                                b = (100 * 10^6 * b) - (sub_93520a80 * b) / 100 * 10^6
                                continue 
                            if s < _1860:
                                revert with 0, 17
                            if not sub_9b28d1a7:
                                revert with 0, 18
                            if 1 > !(s - _1860 / sub_9b28d1a7):
                                revert with 0, 17
                            if sub_9b28d1a7 and (s - _1860 / sub_9b28d1a7) + 1 > -1 / sub_9b28d1a7:
                                revert with 0, 17
                            if _1860 > !(sub_9b28d1a7 + (s - _1860 / sub_9b28d1a7 * sub_9b28d1a7)):
                                revert with 0, 17
                            if _1860 + sub_9b28d1a7 + (s - _1860 / sub_9b28d1a7 * sub_9b28d1a7) < s:
                                revert with 0, 17
                            if stor5[address(arg1)][idx].field_1024 and b > -1 / stor5[address(arg1)][idx].field_1024:
                                revert with 0, 17
                            if stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6 and _1860 + sub_9b28d1a7 + (s - _1860 / sub_9b28d1a7 * sub_9b28d1a7) - s > -1 / stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6:
                                revert with 0, 17
                            if a > !((_1860 * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) + (sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) + (s - _1860 / sub_9b28d1a7 * sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) - (s * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) / 8760 * 24 * 3600):
                                revert with 0, 17
                            if block.timestamp - _1860 / sub_9b28d1a7 == s - _1860 / sub_9b28d1a7:
                                a = block.timestamp - _1860 / sub_9b28d1a7 != s - _1860 / sub_9b28d1a7
                                a = (_1860 * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) + (sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) + (s - _1860 / sub_9b28d1a7 * sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) - (s * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) / 8760 * 24 * 3600
                                a = _1860 + sub_9b28d1a7 + (s - _1860 / sub_9b28d1a7 * sub_9b28d1a7) - s
                                a = a + ((_1860 * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) + (sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) + (s - _1860 / sub_9b28d1a7 * sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) - (s * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) / 8760 * 24 * 3600)
                                b = _1860 + sub_9b28d1a7 + (s - _1860 / sub_9b28d1a7 * sub_9b28d1a7)
                                s = _1860 + sub_9b28d1a7 + (s - _1860 / sub_9b28d1a7 * sub_9b28d1a7)
                                b = b
                                continue 
                            if 100 * 10^6 < sub_93520a80 - 0x8000000000000000000000000000000000000000000000000000000000000000 and sub_93520a80 >= 0:
                                revert with 0, 17
                            if sub_93520a80 < 0 and 100 * 10^6 > sub_93520a80 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                revert with 0, 17
                            if b and -sub_93520a80 + 100 * 10^6 > -1 / b:
                                revert with 0, 17
                            a = block.timestamp - _1860 / sub_9b28d1a7 != s - _1860 / sub_9b28d1a7
                            a = (_1860 * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) + (sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) + (s - _1860 / sub_9b28d1a7 * sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) - (s * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) / 8760 * 24 * 3600
                            a = _1860 + sub_9b28d1a7 + (s - _1860 / sub_9b28d1a7 * sub_9b28d1a7) - s
                            a = a + ((_1860 * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) + (sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) + (s - _1860 / sub_9b28d1a7 * sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) - (s * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) / 8760 * 24 * 3600)
                            b = _1860 + sub_9b28d1a7 + (s - _1860 / sub_9b28d1a7 * sub_9b28d1a7)
                            s = _1860 + sub_9b28d1a7 + (s - _1860 / sub_9b28d1a7 * sub_9b28d1a7)
                            b = (100 * 10^6 * b) - (sub_93520a80 * b) / 100 * 10^6
                            continue 
                if 0 > !a:
                    revert with 0, 17
                stor5[address(arg1)][idx].field_512 = block.timestamp
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                s = (6 * idx) + sha3(sha3(address(arg1), 5))
                continue 
            if bool(stor5[address(arg1)][idx].field_0) == stor5[address(arg1)][idx].field_1 % 128 < 32:
                revert with 0, 34
            if not stor5[address(arg1)][idx].field_1 % 128:
                mem[_633] = _636
                mem[_633 + 32] = stor5[address(arg1)][idx].field_256
                mem[_633 + 64] = stor5[address(arg1)][idx].field_512
                mem[_633 + 96] = stor5[address(arg1)][idx].field_768
                mem[_633 + 128] = stor5[address(arg1)][idx].field_1024
                if uint8(stor5[address(arg1)][idx].field_1280) > 2:
                    revert with 0, 33
                mem[_633 + 160] = uint8(stor5[address(arg1)][idx].field_1280)
                if uint8(stor5[address(arg1)][idx].field_1280) > 2:
                    revert with 0, 33
                mem[32] = 8
                s = 0
                while stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0 > s:
                    if s > !stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0:
                        revert with 0, 17
                    if uint8(stor5[address(arg1)][idx].field_1280) > 2:
                        revert with 0, 33
                    mem[32] = 8
                    if s + stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0 / 2 >= stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0:
                        revert with 0, 50
                    mem[0] = sha3(uint8(stor5[address(arg1)][idx].field_1280), 8)
                    if stor8[uint8(stor5[address(arg1)][idx].field_1280)][Mask(255, 1, s + stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0)].field_0 >= stor5[address(arg1)][idx].field_512:
                        s = s
                        continue 
                    if 1 > !(s + stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0 / 2):
                        revert with 0, 17
                    s = (s + stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0 / 2) + 1
                    continue 
                _964 = mem[_633 + 32]
                if uint8(stor5[address(arg1)][idx].field_1280) > 2:
                    revert with 0, 33
                s = 0
                while stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0 > s:
                    if s > !stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0:
                        revert with 0, 17
                    if uint8(stor5[address(arg1)][idx].field_1280) > 2:
                        revert with 0, 33
                    mem[32] = 8
                    if s + stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0 / 2 >= stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0:
                        revert with 0, 50
                    mem[0] = sha3(uint8(stor5[address(arg1)][idx].field_1280), 8)
                    if stor8[uint8(stor5[address(arg1)][idx].field_1280)][Mask(255, 1, s + stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0)].field_0 >= _964:
                        s = s
                        continue 
                    if 1 > !(s + stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0 / 2):
                        revert with 0, 17
                    s = (s + stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0 / 2) + 1
                    continue 
                if uint8(stor5[address(arg1)][idx].field_1280) > 2:
                    revert with 0, 33
                mem[32] = 8
                t = 0
                while stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0 > t:
                    if t > !stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0:
                        revert with 0, 17
                    if uint8(stor5[address(arg1)][idx].field_1280) > 2:
                        revert with 0, 33
                    mem[32] = 8
                    if t + stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0 / 2 >= stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0:
                        revert with 0, 50
                    mem[0] = sha3(uint8(stor5[address(arg1)][idx].field_1280), 8)
                    if stor8[uint8(stor5[address(arg1)][idx].field_1280)][Mask(255, 1, t + stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0)].field_0 >= stor5[address(arg1)][idx].field_512:
                        t = t
                        continue 
                    if 1 > !(t + stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0 / 2):
                        revert with 0, 17
                    t = (t + stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0 / 2) + 1
                    continue 
                u = s
                v = stor5[address(arg1)][idx].field_768
                while u < t:
                    if uint8(stor5[address(arg1)][idx].field_1280) > 2:
                        revert with 0, 33
                    mem[32] = 8
                    if u >= stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0:
                        revert with 0, 50
                    mem[0] = sha3(uint8(stor5[address(arg1)][idx].field_1280), 8)
                    if 100 * 10^6 < stor8[uint8(stor5[address(arg1)][idx].field_1280)][u].field_256 - 0x8000000000000000000000000000000000000000000000000000000000000000 and stor8[uint8(stor5[address(arg1)][idx].field_1280)][u].field_256 >= 0:
                        revert with 0, 17
                    if stor8[uint8(stor5[address(arg1)][idx].field_1280)][u].field_256 < 0 and 100 * 10^6 > stor8[uint8(stor5[address(arg1)][idx].field_1280)][u].field_256 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                        revert with 0, 17
                    if v and -stor8[uint8(stor5[address(arg1)][idx].field_1280)][u].field_256 + 100 * 10^6 > -1 / v:
                        revert with 0, 17
                    if u == -1:
                        revert with 0, 17
                    u = u + 1
                    v = (100 * 10^6 * v) - (stor8[uint8(stor5[address(arg1)][idx].field_1280)][u].field_256 * v) / 100 * 10^6
                    continue 
                if stor5[address(arg1)][idx].field_512 < _964:
                    revert with 0, 17
                if not sub_9b28d1a7:
                    revert with 0, 18
                s = stor5[address(arg1)][idx].field_512 - _964 / sub_9b28d1a7
                t = v
                while s:
                    if not s:
                        revert with 0, 17
                    if 100 * 10^6 < sub_93520a80 - 0x8000000000000000000000000000000000000000000000000000000000000000 and sub_93520a80 >= 0:
                        revert with 0, 17
                    if sub_93520a80 < 0 and 100 * 10^6 > sub_93520a80 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                        revert with 0, 17
                    if t and -sub_93520a80 + 100 * 10^6 > -1 / t:
                        revert with 0, 17
                    s = s - 1
                    t = (100 * 10^6 * t) - (sub_93520a80 * t) / 100 * 10^6
                    continue 
                _1747 = mem[_633 + 32]
                if uint8(stor5[address(arg1)][idx].field_1280) > 2:
                    revert with 0, 33
                mem[0] = uint8(stor5[address(arg1)][idx].field_1280)
                mem[32] = 8
                s = var154001
                t = var154002
                u = var154004
                v = var154005
                w = var154006
                x = var154007
                y = var154008
                z = var154009
                while s < stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0:
                    if uint8(stor5[address(arg1)][idx].field_1280) > 2:
                        revert with 0, 33
                    if s >= stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0:
                        revert with 0, 50
                    if y < _1747:
                        revert with 0, 17
                    if not sub_9b28d1a7:
                        revert with 0, 18
                    if stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0 < _1747:
                        revert with 0, 17
                    if not sub_9b28d1a7:
                        revert with 0, 18
                    if stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0 - _1747 / sub_9b28d1a7 == y - _1747 / sub_9b28d1a7:
                        if stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0 < y:
                            revert with 0, 17
                        if stor5[address(arg1)][idx].field_1024 and z > -1 / stor5[address(arg1)][idx].field_1024:
                            revert with 0, 17
                        if stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6 and stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0 - y > -1 / stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6:
                            revert with 0, 17
                        if w > !((stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) - (y * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) / 8760 * 24 * 3600):
                            revert with 0, 17
                        if stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0 - _1747 / sub_9b28d1a7 != y - _1747 / sub_9b28d1a7:
                            if 100 * 10^6 < sub_93520a80 - 0x8000000000000000000000000000000000000000000000000000000000000000 and sub_93520a80 >= 0:
                                revert with 0, 17
                            if sub_93520a80 < 0 and 100 * 10^6 > sub_93520a80 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                revert with 0, 17
                            if z and -sub_93520a80 + 100 * 10^6 > -1 / z:
                                revert with 0, 17
                            if not s:
                                revert with 0, 17
                            if s - 1 == -1:
                                revert with 0, 17
                            if uint8(stor5[address(arg1)][idx].field_1280) > 2:
                                revert with 0, 33
                            mem[0] = uint8(stor5[address(arg1)][idx].field_1280)
                            mem[32] = 8
                            s = s
                            t = stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0 - _1747 / sub_9b28d1a7 != y - _1747 / sub_9b28d1a7
                            u = (stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) - (y * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) / 8760 * 24 * 3600
                            v = stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0 - y
                            w = w + ((stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) - (y * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) / 8760 * 24 * 3600)
                            x = stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0
                            y = stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0
                            z = (100 * 10^6 * z) - (sub_93520a80 * z) / 100 * 10^6
                            continue 
                        if uint8(stor5[address(arg1)][idx].field_1280) > 2:
                            revert with 0, 33
                        if s >= stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0:
                            revert with 0, 50
                        if 100 * 10^6 < stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_256 - 0x8000000000000000000000000000000000000000000000000000000000000000 and stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_256 >= 0:
                            revert with 0, 17
                        if stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_256 < 0 and 100 * 10^6 > stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_256 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                            revert with 0, 17
                        if z and -stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_256 + 100 * 10^6 > -1 / z:
                            revert with 0, 17
                        if s == -1:
                            revert with 0, 17
                        if uint8(stor5[address(arg1)][idx].field_1280) > 2:
                            revert with 0, 33
                        mem[0] = uint8(stor5[address(arg1)][idx].field_1280)
                        mem[32] = 8
                        s = s + 1
                        t = stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0 - _1747 / sub_9b28d1a7 != y - _1747 / sub_9b28d1a7
                        u = (stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) - (y * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) / 8760 * 24 * 3600
                        v = stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0 - y
                        w = w + ((stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) - (y * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) / 8760 * 24 * 3600)
                        x = stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0
                        y = stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0
                        z = (100 * 10^6 * z) - (stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_256 * z) / 100 * 10^6
                        continue 
                    if y < _1747:
                        revert with 0, 17
                    if not sub_9b28d1a7:
                        revert with 0, 18
                    if 1 > !(y - _1747 / sub_9b28d1a7):
                        revert with 0, 17
                    if sub_9b28d1a7 and (y - _1747 / sub_9b28d1a7) + 1 > -1 / sub_9b28d1a7:
                        revert with 0, 17
                    if _1747 > !(sub_9b28d1a7 + (y - _1747 / sub_9b28d1a7 * sub_9b28d1a7)):
                        revert with 0, 17
                    if _1747 + sub_9b28d1a7 + (y - _1747 / sub_9b28d1a7 * sub_9b28d1a7) < y:
                        revert with 0, 17
                    if stor5[address(arg1)][idx].field_1024 and z > -1 / stor5[address(arg1)][idx].field_1024:
                        revert with 0, 17
                    if stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6 and _1747 + sub_9b28d1a7 + (y - _1747 / sub_9b28d1a7 * sub_9b28d1a7) - y > -1 / stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6:
                        revert with 0, 17
                    if w > !((_1747 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) + (sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) + (y - _1747 / sub_9b28d1a7 * sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) - (y * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) / 8760 * 24 * 3600):
                        revert with 0, 17
                    if stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0 - _1747 / sub_9b28d1a7 != y - _1747 / sub_9b28d1a7:
                        if 100 * 10^6 < sub_93520a80 - 0x8000000000000000000000000000000000000000000000000000000000000000 and sub_93520a80 >= 0:
                            revert with 0, 17
                        if sub_93520a80 < 0 and 100 * 10^6 > sub_93520a80 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                            revert with 0, 17
                        if z and -sub_93520a80 + 100 * 10^6 > -1 / z:
                            revert with 0, 17
                        if not s:
                            revert with 0, 17
                        if s - 1 == -1:
                            revert with 0, 17
                        if uint8(stor5[address(arg1)][idx].field_1280) > 2:
                            revert with 0, 33
                        mem[0] = uint8(stor5[address(arg1)][idx].field_1280)
                        mem[32] = 8
                        s = s
                        t = stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0 - _1747 / sub_9b28d1a7 != y - _1747 / sub_9b28d1a7
                        u = (_1747 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) + (sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) + (y - _1747 / sub_9b28d1a7 * sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) - (y * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) / 8760 * 24 * 3600
                        v = _1747 + sub_9b28d1a7 + (y - _1747 / sub_9b28d1a7 * sub_9b28d1a7) - y
                        w = w + ((_1747 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) + (sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) + (y - _1747 / sub_9b28d1a7 * sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) - (y * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) / 8760 * 24 * 3600)
                        x = _1747 + sub_9b28d1a7 + (y - _1747 / sub_9b28d1a7 * sub_9b28d1a7)
                        y = _1747 + sub_9b28d1a7 + (y - _1747 / sub_9b28d1a7 * sub_9b28d1a7)
                        z = (100 * 10^6 * z) - (sub_93520a80 * z) / 100 * 10^6
                        continue 
                    if uint8(stor5[address(arg1)][idx].field_1280) > 2:
                        revert with 0, 33
                    if s >= stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0:
                        revert with 0, 50
                    if 100 * 10^6 < stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_256 - 0x8000000000000000000000000000000000000000000000000000000000000000 and stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_256 >= 0:
                        revert with 0, 17
                    if stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_256 < 0 and 100 * 10^6 > stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_256 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                        revert with 0, 17
                    if z and -stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_256 + 100 * 10^6 > -1 / z:
                        revert with 0, 17
                    if s == -1:
                        revert with 0, 17
                    if uint8(stor5[address(arg1)][idx].field_1280) > 2:
                        revert with 0, 33
                    mem[0] = uint8(stor5[address(arg1)][idx].field_1280)
                    mem[32] = 8
                    s = s + 1
                    t = stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0 - _1747 / sub_9b28d1a7 != y - _1747 / sub_9b28d1a7
                    u = (_1747 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) + (sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) + (y - _1747 / sub_9b28d1a7 * sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) - (y * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) / 8760 * 24 * 3600
                    v = _1747 + sub_9b28d1a7 + (y - _1747 / sub_9b28d1a7 * sub_9b28d1a7) - y
                    w = w + ((_1747 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) + (sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) + (y - _1747 / sub_9b28d1a7 * sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) - (y * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) / 8760 * 24 * 3600)
                    x = _1747 + sub_9b28d1a7 + (y - _1747 / sub_9b28d1a7 * sub_9b28d1a7)
                    y = _1747 + sub_9b28d1a7 + (y - _1747 / sub_9b28d1a7 * sub_9b28d1a7)
                    z = (100 * 10^6 * z) - (stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_256 * z) / 100 * 10^6
                    continue 
                a = t
                a = u
                a = v
                a = w
                b = x
                s = y
                b = z
                while s != block.timestamp:
                    if s < _1747:
                        revert with 0, 17
                    if not sub_9b28d1a7:
                        revert with 0, 18
                    if block.timestamp < _1747:
                        revert with 0, 17
                    if not sub_9b28d1a7:
                        revert with 0, 18
                    if block.timestamp - _1747 / sub_9b28d1a7 == s - _1747 / sub_9b28d1a7:
                        if block.timestamp < s:
                            revert with 0, 17
                        if stor5[address(arg1)][idx].field_1024 and b > -1 / stor5[address(arg1)][idx].field_1024:
                            revert with 0, 17
                        if stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6 and block.timestamp - s > -1 / stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6:
                            revert with 0, 17
                        if a > !((block.timestamp * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) - (s * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) / 8760 * 24 * 3600):
                            revert with 0, 17
                        if block.timestamp - _1747 / sub_9b28d1a7 == s - _1747 / sub_9b28d1a7:
                            a = block.timestamp - _1747 / sub_9b28d1a7 != s - _1747 / sub_9b28d1a7
                            a = (block.timestamp * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) - (s * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) / 8760 * 24 * 3600
                            a = block.timestamp - s
                            a = a + ((block.timestamp * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) - (s * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) / 8760 * 24 * 3600)
                            b = block.timestamp
                            s = block.timestamp
                            b = b
                            continue 
                        if 100 * 10^6 < sub_93520a80 - 0x8000000000000000000000000000000000000000000000000000000000000000 and sub_93520a80 >= 0:
                            revert with 0, 17
                        if sub_93520a80 < 0 and 100 * 10^6 > sub_93520a80 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                            revert with 0, 17
                        if b and -sub_93520a80 + 100 * 10^6 > -1 / b:
                            revert with 0, 17
                        a = block.timestamp - _1747 / sub_9b28d1a7 != s - _1747 / sub_9b28d1a7
                        a = (block.timestamp * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) - (s * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) / 8760 * 24 * 3600
                        a = block.timestamp - s
                        a = a + ((block.timestamp * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) - (s * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) / 8760 * 24 * 3600)
                        b = block.timestamp
                        s = block.timestamp
                        b = (100 * 10^6 * b) - (sub_93520a80 * b) / 100 * 10^6
                        continue 
                    if s < _1747:
                        revert with 0, 17
                    if not sub_9b28d1a7:
                        revert with 0, 18
                    if 1 > !(s - _1747 / sub_9b28d1a7):
                        revert with 0, 17
                    if sub_9b28d1a7 and (s - _1747 / sub_9b28d1a7) + 1 > -1 / sub_9b28d1a7:
                        revert with 0, 17
                    if _1747 > !(sub_9b28d1a7 + (s - _1747 / sub_9b28d1a7 * sub_9b28d1a7)):
                        revert with 0, 17
                    if _1747 + sub_9b28d1a7 + (s - _1747 / sub_9b28d1a7 * sub_9b28d1a7) < s:
                        revert with 0, 17
                    if stor5[address(arg1)][idx].field_1024 and b > -1 / stor5[address(arg1)][idx].field_1024:
                        revert with 0, 17
                    if stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6 and _1747 + sub_9b28d1a7 + (s - _1747 / sub_9b28d1a7 * sub_9b28d1a7) - s > -1 / stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6:
                        revert with 0, 17
                    if a > !((_1747 * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) + (sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) + (s - _1747 / sub_9b28d1a7 * sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) - (s * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) / 8760 * 24 * 3600):
                        revert with 0, 17
                    if block.timestamp - _1747 / sub_9b28d1a7 == s - _1747 / sub_9b28d1a7:
                        a = block.timestamp - _1747 / sub_9b28d1a7 != s - _1747 / sub_9b28d1a7
                        a = (_1747 * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) + (sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) + (s - _1747 / sub_9b28d1a7 * sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) - (s * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) / 8760 * 24 * 3600
                        a = _1747 + sub_9b28d1a7 + (s - _1747 / sub_9b28d1a7 * sub_9b28d1a7) - s
                        a = a + ((_1747 * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) + (sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) + (s - _1747 / sub_9b28d1a7 * sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) - (s * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) / 8760 * 24 * 3600)
                        b = _1747 + sub_9b28d1a7 + (s - _1747 / sub_9b28d1a7 * sub_9b28d1a7)
                        s = _1747 + sub_9b28d1a7 + (s - _1747 / sub_9b28d1a7 * sub_9b28d1a7)
                        b = b
                        continue 
                    if 100 * 10^6 < sub_93520a80 - 0x8000000000000000000000000000000000000000000000000000000000000000 and sub_93520a80 >= 0:
                        revert with 0, 17
                    if sub_93520a80 < 0 and 100 * 10^6 > sub_93520a80 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                        revert with 0, 17
                    if b and -sub_93520a80 + 100 * 10^6 > -1 / b:
                        revert with 0, 17
                    a = block.timestamp - _1747 / sub_9b28d1a7 != s - _1747 / sub_9b28d1a7
                    a = (_1747 * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) + (sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) + (s - _1747 / sub_9b28d1a7 * sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) - (s * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) / 8760 * 24 * 3600
                    a = _1747 + sub_9b28d1a7 + (s - _1747 / sub_9b28d1a7 * sub_9b28d1a7) - s
                    a = a + ((_1747 * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) + (sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) + (s - _1747 / sub_9b28d1a7 * sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) - (s * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) / 8760 * 24 * 3600)
                    b = _1747 + sub_9b28d1a7 + (s - _1747 / sub_9b28d1a7 * sub_9b28d1a7)
                    s = _1747 + sub_9b28d1a7 + (s - _1747 / sub_9b28d1a7 * sub_9b28d1a7)
                    b = (100 * 10^6 * b) - (sub_93520a80 * b) / 100 * 10^6
                    continue 
                if 0 > !a:
                    revert with 0, 17
                stor5[address(arg1)][idx].field_512 = block.timestamp
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                s = (6 * idx) + sha3(sha3(address(arg1), 5))
                continue 
            if 31 >= stor5[address(arg1)][idx].field_1 % 128:
                mem[_636 + 32] = 256 * Mask(248, 0, stor5[address(arg1)][idx].field_8)
                mem[_633] = _636
                mem[_633 + 32] = stor5[address(arg1)][idx].field_256
                mem[_633 + 64] = stor5[address(arg1)][idx].field_512
                mem[_633 + 96] = stor5[address(arg1)][idx].field_768
                mem[_633 + 128] = stor5[address(arg1)][idx].field_1024
                if uint8(stor5[address(arg1)][idx].field_1280) > 2:
                    revert with 0, 33
                mem[_633 + 160] = uint8(stor5[address(arg1)][idx].field_1280)
                if uint8(stor5[address(arg1)][idx].field_1280) > 2:
                    revert with 0, 33
                mem[32] = 8
                s = 0
                while stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0 > s:
                    if s > !stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0:
                        revert with 0, 17
                    if uint8(stor5[address(arg1)][idx].field_1280) > 2:
                        revert with 0, 33
                    mem[32] = 8
                    if s + stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0 / 2 >= stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0:
                        revert with 0, 50
                    mem[0] = sha3(uint8(stor5[address(arg1)][idx].field_1280), 8)
                    if stor8[uint8(stor5[address(arg1)][idx].field_1280)][Mask(255, 1, s + stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0)].field_0 >= stor5[address(arg1)][idx].field_512:
                        s = s
                        continue 
                    if 1 > !(s + stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0 / 2):
                        revert with 0, 17
                    s = (s + stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0 / 2) + 1
                    continue 
                _967 = mem[_633 + 32]
                if uint8(stor5[address(arg1)][idx].field_1280) > 2:
                    revert with 0, 33
                s = 0
                while stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0 > s:
                    if s > !stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0:
                        revert with 0, 17
                    if uint8(stor5[address(arg1)][idx].field_1280) > 2:
                        revert with 0, 33
                    mem[32] = 8
                    if s + stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0 / 2 >= stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0:
                        revert with 0, 50
                    mem[0] = sha3(uint8(stor5[address(arg1)][idx].field_1280), 8)
                    if stor8[uint8(stor5[address(arg1)][idx].field_1280)][Mask(255, 1, s + stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0)].field_0 >= _967:
                        s = s
                        continue 
                    if 1 > !(s + stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0 / 2):
                        revert with 0, 17
                    s = (s + stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0 / 2) + 1
                    continue 
                if uint8(stor5[address(arg1)][idx].field_1280) > 2:
                    revert with 0, 33
                mem[32] = 8
                t = 0
                while stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0 > t:
                    if t > !stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0:
                        revert with 0, 17
                    if uint8(stor5[address(arg1)][idx].field_1280) > 2:
                        revert with 0, 33
                    mem[32] = 8
                    if t + stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0 / 2 >= stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0:
                        revert with 0, 50
                    mem[0] = sha3(uint8(stor5[address(arg1)][idx].field_1280), 8)
                    if stor8[uint8(stor5[address(arg1)][idx].field_1280)][Mask(255, 1, t + stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0)].field_0 >= stor5[address(arg1)][idx].field_512:
                        t = t
                        continue 
                    if 1 > !(t + stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0 / 2):
                        revert with 0, 17
                    t = (t + stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0 / 2) + 1
                    continue 
                u = s
                v = stor5[address(arg1)][idx].field_768
                while u < t:
                    if uint8(stor5[address(arg1)][idx].field_1280) > 2:
                        revert with 0, 33
                    mem[32] = 8
                    if u >= stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0:
                        revert with 0, 50
                    mem[0] = sha3(uint8(stor5[address(arg1)][idx].field_1280), 8)
                    if 100 * 10^6 < stor8[uint8(stor5[address(arg1)][idx].field_1280)][u].field_256 - 0x8000000000000000000000000000000000000000000000000000000000000000 and stor8[uint8(stor5[address(arg1)][idx].field_1280)][u].field_256 >= 0:
                        revert with 0, 17
                    if stor8[uint8(stor5[address(arg1)][idx].field_1280)][u].field_256 < 0 and 100 * 10^6 > stor8[uint8(stor5[address(arg1)][idx].field_1280)][u].field_256 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                        revert with 0, 17
                    if v and -stor8[uint8(stor5[address(arg1)][idx].field_1280)][u].field_256 + 100 * 10^6 > -1 / v:
                        revert with 0, 17
                    if u == -1:
                        revert with 0, 17
                    u = u + 1
                    v = (100 * 10^6 * v) - (stor8[uint8(stor5[address(arg1)][idx].field_1280)][u].field_256 * v) / 100 * 10^6
                    continue 
                if stor5[address(arg1)][idx].field_512 < _967:
                    revert with 0, 17
                if not sub_9b28d1a7:
                    revert with 0, 18
                s = stor5[address(arg1)][idx].field_512 - _967 / sub_9b28d1a7
                t = v
                while s:
                    if not s:
                        revert with 0, 17
                    if 100 * 10^6 < sub_93520a80 - 0x8000000000000000000000000000000000000000000000000000000000000000 and sub_93520a80 >= 0:
                        revert with 0, 17
                    if sub_93520a80 < 0 and 100 * 10^6 > sub_93520a80 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                        revert with 0, 17
                    if t and -sub_93520a80 + 100 * 10^6 > -1 / t:
                        revert with 0, 17
                    s = s - 1
                    t = (100 * 10^6 * t) - (sub_93520a80 * t) / 100 * 10^6
                    continue 
                _1749 = mem[_633 + 32]
                if uint8(stor5[address(arg1)][idx].field_1280) > 2:
                    revert with 0, 33
                mem[0] = uint8(stor5[address(arg1)][idx].field_1280)
                mem[32] = 8
                s = var156001
                t = var156002
                u = var156004
                v = var156005
                w = var156006
                x = var156007
                y = var156008
                z = var156009
                while s < stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0:
                    if uint8(stor5[address(arg1)][idx].field_1280) > 2:
                        revert with 0, 33
                    if s >= stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0:
                        revert with 0, 50
                    if y < _1749:
                        revert with 0, 17
                    if not sub_9b28d1a7:
                        revert with 0, 18
                    if stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0 < _1749:
                        revert with 0, 17
                    if not sub_9b28d1a7:
                        revert with 0, 18
                    if stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0 - _1749 / sub_9b28d1a7 == y - _1749 / sub_9b28d1a7:
                        if stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0 < y:
                            revert with 0, 17
                        if stor5[address(arg1)][idx].field_1024 and z > -1 / stor5[address(arg1)][idx].field_1024:
                            revert with 0, 17
                        if stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6 and stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0 - y > -1 / stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6:
                            revert with 0, 17
                        if w > !((stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) - (y * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) / 8760 * 24 * 3600):
                            revert with 0, 17
                        if stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0 - _1749 / sub_9b28d1a7 != y - _1749 / sub_9b28d1a7:
                            if 100 * 10^6 < sub_93520a80 - 0x8000000000000000000000000000000000000000000000000000000000000000 and sub_93520a80 >= 0:
                                revert with 0, 17
                            if sub_93520a80 < 0 and 100 * 10^6 > sub_93520a80 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                revert with 0, 17
                            if z and -sub_93520a80 + 100 * 10^6 > -1 / z:
                                revert with 0, 17
                            if not s:
                                revert with 0, 17
                            if s - 1 == -1:
                                revert with 0, 17
                            if uint8(stor5[address(arg1)][idx].field_1280) > 2:
                                revert with 0, 33
                            mem[0] = uint8(stor5[address(arg1)][idx].field_1280)
                            mem[32] = 8
                            s = s
                            t = stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0 - _1749 / sub_9b28d1a7 != y - _1749 / sub_9b28d1a7
                            u = (stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) - (y * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) / 8760 * 24 * 3600
                            v = stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0 - y
                            w = w + ((stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) - (y * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) / 8760 * 24 * 3600)
                            x = stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0
                            y = stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0
                            z = (100 * 10^6 * z) - (sub_93520a80 * z) / 100 * 10^6
                            continue 
                        if uint8(stor5[address(arg1)][idx].field_1280) > 2:
                            revert with 0, 33
                        if s >= stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0:
                            revert with 0, 50
                        if 100 * 10^6 < stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_256 - 0x8000000000000000000000000000000000000000000000000000000000000000 and stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_256 >= 0:
                            revert with 0, 17
                        if stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_256 < 0 and 100 * 10^6 > stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_256 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                            revert with 0, 17
                        if z and -stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_256 + 100 * 10^6 > -1 / z:
                            revert with 0, 17
                        if s == -1:
                            revert with 0, 17
                        if uint8(stor5[address(arg1)][idx].field_1280) > 2:
                            revert with 0, 33
                        mem[0] = uint8(stor5[address(arg1)][idx].field_1280)
                        mem[32] = 8
                        s = s + 1
                        t = stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0 - _1749 / sub_9b28d1a7 != y - _1749 / sub_9b28d1a7
                        u = (stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) - (y * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) / 8760 * 24 * 3600
                        v = stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0 - y
                        w = w + ((stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) - (y * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) / 8760 * 24 * 3600)
                        x = stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0
                        y = stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0
                        z = (100 * 10^6 * z) - (stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_256 * z) / 100 * 10^6
                        continue 
                    if y < _1749:
                        revert with 0, 17
                    if not sub_9b28d1a7:
                        revert with 0, 18
                    if 1 > !(y - _1749 / sub_9b28d1a7):
                        revert with 0, 17
                    if sub_9b28d1a7 and (y - _1749 / sub_9b28d1a7) + 1 > -1 / sub_9b28d1a7:
                        revert with 0, 17
                    if _1749 > !(sub_9b28d1a7 + (y - _1749 / sub_9b28d1a7 * sub_9b28d1a7)):
                        revert with 0, 17
                    if _1749 + sub_9b28d1a7 + (y - _1749 / sub_9b28d1a7 * sub_9b28d1a7) < y:
                        revert with 0, 17
                    if stor5[address(arg1)][idx].field_1024 and z > -1 / stor5[address(arg1)][idx].field_1024:
                        revert with 0, 17
                    if stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6 and _1749 + sub_9b28d1a7 + (y - _1749 / sub_9b28d1a7 * sub_9b28d1a7) - y > -1 / stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6:
                        revert with 0, 17
                    if w > !((_1749 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) + (sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) + (y - _1749 / sub_9b28d1a7 * sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) - (y * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) / 8760 * 24 * 3600):
                        revert with 0, 17
                    if stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0 - _1749 / sub_9b28d1a7 != y - _1749 / sub_9b28d1a7:
                        if 100 * 10^6 < sub_93520a80 - 0x8000000000000000000000000000000000000000000000000000000000000000 and sub_93520a80 >= 0:
                            revert with 0, 17
                        if sub_93520a80 < 0 and 100 * 10^6 > sub_93520a80 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                            revert with 0, 17
                        if z and -sub_93520a80 + 100 * 10^6 > -1 / z:
                            revert with 0, 17
                        if not s:
                            revert with 0, 17
                        if s - 1 == -1:
                            revert with 0, 17
                        if uint8(stor5[address(arg1)][idx].field_1280) > 2:
                            revert with 0, 33
                        mem[0] = uint8(stor5[address(arg1)][idx].field_1280)
                        mem[32] = 8
                        s = s
                        t = stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0 - _1749 / sub_9b28d1a7 != y - _1749 / sub_9b28d1a7
                        u = (_1749 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) + (sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) + (y - _1749 / sub_9b28d1a7 * sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) - (y * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) / 8760 * 24 * 3600
                        v = _1749 + sub_9b28d1a7 + (y - _1749 / sub_9b28d1a7 * sub_9b28d1a7) - y
                        w = w + ((_1749 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) + (sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) + (y - _1749 / sub_9b28d1a7 * sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) - (y * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) / 8760 * 24 * 3600)
                        x = _1749 + sub_9b28d1a7 + (y - _1749 / sub_9b28d1a7 * sub_9b28d1a7)
                        y = _1749 + sub_9b28d1a7 + (y - _1749 / sub_9b28d1a7 * sub_9b28d1a7)
                        z = (100 * 10^6 * z) - (sub_93520a80 * z) / 100 * 10^6
                        continue 
                    if uint8(stor5[address(arg1)][idx].field_1280) > 2:
                        revert with 0, 33
                    if s >= stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0:
                        revert with 0, 50
                    if 100 * 10^6 < stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_256 - 0x8000000000000000000000000000000000000000000000000000000000000000 and stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_256 >= 0:
                        revert with 0, 17
                    if stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_256 < 0 and 100 * 10^6 > stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_256 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                        revert with 0, 17
                    if z and -stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_256 + 100 * 10^6 > -1 / z:
                        revert with 0, 17
                    if s == -1:
                        revert with 0, 17
                    if uint8(stor5[address(arg1)][idx].field_1280) > 2:
                        revert with 0, 33
                    mem[0] = uint8(stor5[address(arg1)][idx].field_1280)
                    mem[32] = 8
                    s = s + 1
                    t = stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0 - _1749 / sub_9b28d1a7 != y - _1749 / sub_9b28d1a7
                    u = (_1749 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) + (sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) + (y - _1749 / sub_9b28d1a7 * sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) - (y * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) / 8760 * 24 * 3600
                    v = _1749 + sub_9b28d1a7 + (y - _1749 / sub_9b28d1a7 * sub_9b28d1a7) - y
                    w = w + ((_1749 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) + (sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) + (y - _1749 / sub_9b28d1a7 * sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) - (y * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) / 8760 * 24 * 3600)
                    x = _1749 + sub_9b28d1a7 + (y - _1749 / sub_9b28d1a7 * sub_9b28d1a7)
                    y = _1749 + sub_9b28d1a7 + (y - _1749 / sub_9b28d1a7 * sub_9b28d1a7)
                    z = (100 * 10^6 * z) - (stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_256 * z) / 100 * 10^6
                    continue 
                a = t
                a = u
                a = v
                a = w
                b = x
                s = y
                b = z
                while s != block.timestamp:
                    if s < _1749:
                        revert with 0, 17
                    if not sub_9b28d1a7:
                        revert with 0, 18
                    if block.timestamp < _1749:
                        revert with 0, 17
                    if not sub_9b28d1a7:
                        revert with 0, 18
                    if block.timestamp - _1749 / sub_9b28d1a7 == s - _1749 / sub_9b28d1a7:
                        if block.timestamp < s:
                            revert with 0, 17
                        if stor5[address(arg1)][idx].field_1024 and b > -1 / stor5[address(arg1)][idx].field_1024:
                            revert with 0, 17
                        if stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6 and block.timestamp - s > -1 / stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6:
                            revert with 0, 17
                        if a > !((block.timestamp * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) - (s * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) / 8760 * 24 * 3600):
                            revert with 0, 17
                        if block.timestamp - _1749 / sub_9b28d1a7 == s - _1749 / sub_9b28d1a7:
                            a = block.timestamp - _1749 / sub_9b28d1a7 != s - _1749 / sub_9b28d1a7
                            a = (block.timestamp * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) - (s * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) / 8760 * 24 * 3600
                            a = block.timestamp - s
                            a = a + ((block.timestamp * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) - (s * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) / 8760 * 24 * 3600)
                            b = block.timestamp
                            s = block.timestamp
                            b = b
                            continue 
                        if 100 * 10^6 < sub_93520a80 - 0x8000000000000000000000000000000000000000000000000000000000000000 and sub_93520a80 >= 0:
                            revert with 0, 17
                        if sub_93520a80 < 0 and 100 * 10^6 > sub_93520a80 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                            revert with 0, 17
                        if b and -sub_93520a80 + 100 * 10^6 > -1 / b:
                            revert with 0, 17
                        a = block.timestamp - _1749 / sub_9b28d1a7 != s - _1749 / sub_9b28d1a7
                        a = (block.timestamp * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) - (s * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) / 8760 * 24 * 3600
                        a = block.timestamp - s
                        a = a + ((block.timestamp * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) - (s * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) / 8760 * 24 * 3600)
                        b = block.timestamp
                        s = block.timestamp
                        b = (100 * 10^6 * b) - (sub_93520a80 * b) / 100 * 10^6
                        continue 
                    if s < _1749:
                        revert with 0, 17
                    if not sub_9b28d1a7:
                        revert with 0, 18
                    if 1 > !(s - _1749 / sub_9b28d1a7):
                        revert with 0, 17
                    if sub_9b28d1a7 and (s - _1749 / sub_9b28d1a7) + 1 > -1 / sub_9b28d1a7:
                        revert with 0, 17
                    if _1749 > !(sub_9b28d1a7 + (s - _1749 / sub_9b28d1a7 * sub_9b28d1a7)):
                        revert with 0, 17
                    if _1749 + sub_9b28d1a7 + (s - _1749 / sub_9b28d1a7 * sub_9b28d1a7) < s:
                        revert with 0, 17
                    if stor5[address(arg1)][idx].field_1024 and b > -1 / stor5[address(arg1)][idx].field_1024:
                        revert with 0, 17
                    if stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6 and _1749 + sub_9b28d1a7 + (s - _1749 / sub_9b28d1a7 * sub_9b28d1a7) - s > -1 / stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6:
                        revert with 0, 17
                    if a > !((_1749 * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) + (sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) + (s - _1749 / sub_9b28d1a7 * sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) - (s * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) / 8760 * 24 * 3600):
                        revert with 0, 17
                    if block.timestamp - _1749 / sub_9b28d1a7 == s - _1749 / sub_9b28d1a7:
                        a = block.timestamp - _1749 / sub_9b28d1a7 != s - _1749 / sub_9b28d1a7
                        a = (_1749 * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) + (sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) + (s - _1749 / sub_9b28d1a7 * sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) - (s * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) / 8760 * 24 * 3600
                        a = _1749 + sub_9b28d1a7 + (s - _1749 / sub_9b28d1a7 * sub_9b28d1a7) - s
                        a = a + ((_1749 * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) + (sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) + (s - _1749 / sub_9b28d1a7 * sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) - (s * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) / 8760 * 24 * 3600)
                        b = _1749 + sub_9b28d1a7 + (s - _1749 / sub_9b28d1a7 * sub_9b28d1a7)
                        s = _1749 + sub_9b28d1a7 + (s - _1749 / sub_9b28d1a7 * sub_9b28d1a7)
                        b = b
                        continue 
                    if 100 * 10^6 < sub_93520a80 - 0x8000000000000000000000000000000000000000000000000000000000000000 and sub_93520a80 >= 0:
                        revert with 0, 17
                    if sub_93520a80 < 0 and 100 * 10^6 > sub_93520a80 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                        revert with 0, 17
                    if b and -sub_93520a80 + 100 * 10^6 > -1 / b:
                        revert with 0, 17
                    a = block.timestamp - _1749 / sub_9b28d1a7 != s - _1749 / sub_9b28d1a7
                    a = (_1749 * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) + (sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) + (s - _1749 / sub_9b28d1a7 * sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) - (s * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) / 8760 * 24 * 3600
                    a = _1749 + sub_9b28d1a7 + (s - _1749 / sub_9b28d1a7 * sub_9b28d1a7) - s
                    a = a + ((_1749 * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) + (sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) + (s - _1749 / sub_9b28d1a7 * sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) - (s * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) / 8760 * 24 * 3600)
                    b = _1749 + sub_9b28d1a7 + (s - _1749 / sub_9b28d1a7 * sub_9b28d1a7)
                    s = _1749 + sub_9b28d1a7 + (s - _1749 / sub_9b28d1a7 * sub_9b28d1a7)
                    b = (100 * 10^6 * b) - (sub_93520a80 * b) / 100 * 10^6
                    continue 
                if 0 > !a:
                    revert with 0, 17
                stor5[address(arg1)][idx].field_512 = block.timestamp
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                s = (6 * idx) + sha3(sha3(address(arg1), 5))
                continue 
            mem[0] = (6 * idx) + sha3(sha3(address(arg1), 5))
            mem[_636 + 32] = stor5[address(arg1)][idx].field_0
            s = _636 + 32
            t = sha3(mem[0])
            while _636 + stor5[address(arg1)][idx].field_1 % 128 > s:
                mem[s + 32] = uint256(stor1[t])
                s = s + 32
                t = t + 1
                continue 
            mem[_633] = _636
            mem[_633 + 32] = stor5[address(arg1)][idx].field_256
            mem[_633 + 64] = stor5[address(arg1)][idx].field_512
            mem[_633 + 96] = stor5[address(arg1)][idx].field_768
            mem[_633 + 128] = stor5[address(arg1)][idx].field_1024
            if uint8(stor5[address(arg1)][idx].field_1280) > 2:
                revert with 0, 33
            mem[_633 + 160] = uint8(stor5[address(arg1)][idx].field_1280)
            if uint8(stor5[address(arg1)][idx].field_1280) > 2:
                revert with 0, 33
            mem[32] = 8
            s = 0
            while stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0 > s:
                if s > !stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0:
                    revert with 0, 17
                if uint8(stor5[address(arg1)][idx].field_1280) > 2:
                    revert with 0, 33
                mem[32] = 8
                if s + stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0 / 2 >= stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0:
                    revert with 0, 50
                mem[0] = sha3(uint8(stor5[address(arg1)][idx].field_1280), 8)
                if stor8[uint8(stor5[address(arg1)][idx].field_1280)][Mask(255, 1, s + stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0)].field_0 >= stor5[address(arg1)][idx].field_512:
                    s = s
                    continue 
                if 1 > !(s + stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0 / 2):
                    revert with 0, 17
                s = (s + stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0 / 2) + 1
                continue 
            _1229 = mem[_633 + 32]
            if uint8(stor5[address(arg1)][idx].field_1280) > 2:
                revert with 0, 33
            s = 0
            while stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0 > s:
                if s > !stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0:
                    revert with 0, 17
                if uint8(stor5[address(arg1)][idx].field_1280) > 2:
                    revert with 0, 33
                mem[32] = 8
                if s + stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0 / 2 >= stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0:
                    revert with 0, 50
                mem[0] = sha3(uint8(stor5[address(arg1)][idx].field_1280), 8)
                if stor8[uint8(stor5[address(arg1)][idx].field_1280)][Mask(255, 1, s + stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0)].field_0 >= _1229:
                    s = s
                    continue 
                if 1 > !(s + stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0 / 2):
                    revert with 0, 17
                s = (s + stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0 / 2) + 1
                continue 
            if uint8(stor5[address(arg1)][idx].field_1280) > 2:
                revert with 0, 33
            mem[32] = 8
            t = 0
            while stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0 > t:
                if t > !stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0:
                    revert with 0, 17
                if uint8(stor5[address(arg1)][idx].field_1280) > 2:
                    revert with 0, 33
                mem[32] = 8
                if t + stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0 / 2 >= stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0:
                    revert with 0, 50
                mem[0] = sha3(uint8(stor5[address(arg1)][idx].field_1280), 8)
                if stor8[uint8(stor5[address(arg1)][idx].field_1280)][Mask(255, 1, t + stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0)].field_0 >= stor5[address(arg1)][idx].field_512:
                    t = t
                    continue 
                if 1 > !(t + stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0 / 2):
                    revert with 0, 17
                t = (t + stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0 / 2) + 1
                continue 
            u = s
            v = stor5[address(arg1)][u].field_768
            while u < t:
                if uint8(stor5[address(arg1)][u].field_1280) > 2:
                    revert with 0, 33
                mem[32] = 8
                if u >= stor8[uint8(stor5[address(arg1)][u].field_1280)].field_0:
                    revert with 0, 50
                mem[0] = sha3(uint8(stor5[address(arg1)][u].field_1280), 8)
                if 100 * 10^6 < stor8[uint8(stor5[address(arg1)][u].field_1280)][u].field_256 - 0x8000000000000000000000000000000000000000000000000000000000000000 and stor8[uint8(stor5[address(arg1)][u].field_1280)][u].field_256 >= 0:
                    revert with 0, 17
                if stor8[uint8(stor5[address(arg1)][u].field_1280)][u].field_256 < 0 and 100 * 10^6 > stor8[uint8(stor5[address(arg1)][u].field_1280)][u].field_256 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                    revert with 0, 17
                if v and -stor8[uint8(stor5[address(arg1)][u].field_1280)][u].field_256 + 100 * 10^6 > -1 / v:
                    revert with 0, 17
                if u == -1:
                    revert with 0, 17
                u = u + 1
                v = (100 * 10^6 * v) - (stor8[uint8(stor5[address(arg1)][u].field_1280)][u].field_256 * v) / 100 * 10^6
                continue 
            if stor5[address(arg1)][u].field_512 < _1229:
                revert with 0, 17
            if not sub_9b28d1a7:
                revert with 0, 18
            idx = stor5[address(arg1)][u].field_512 - _1229 / sub_9b28d1a7
            s = v
            while idx:
                if not idx:
                    revert with 0, 17
                if 100 * 10^6 < sub_93520a80 - 0x8000000000000000000000000000000000000000000000000000000000000000 and sub_93520a80 >= 0:
                    revert with 0, 17
                if sub_93520a80 < 0 and 100 * 10^6 > sub_93520a80 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                    revert with 0, 17
                if s and -sub_93520a80 + 100 * 10^6 > -1 / s:
                    revert with 0, 17
                idx = idx - 1
                s = (100 * 10^6 * s) - (sub_93520a80 * s) / 100 * 10^6
                continue 
            _1864 = mem[_633 + 32]
            if uint8(stor5[address(arg1)][u].field_1280) > 2:
                revert with 0, 33
            mem[0] = uint8(stor5[address(arg1)][u].field_1280)
            mem[32] = 8
            s = var159001
            t = var159002
            v = var159004
            w = var159005
            x = var159006
            y = var159007
            z = var159008
            a = var159009
            while s < stor8[uint8(stor5[address(arg1)][u].field_1280)].field_0:
                if uint8(stor5[address(arg1)][u].field_1280) > 2:
                    revert with 0, 33
                if s >= stor8[uint8(stor5[address(arg1)][u].field_1280)].field_0:
                    revert with 0, 50
                if z < _1864:
                    revert with 0, 17
                if not sub_9b28d1a7:
                    revert with 0, 18
                if stor8[uint8(stor5[address(arg1)][u].field_1280)][s].field_0 < _1864:
                    revert with 0, 17
                if not sub_9b28d1a7:
                    revert with 0, 18
                if stor8[uint8(stor5[address(arg1)][u].field_1280)][s].field_0 - _1864 / sub_9b28d1a7 == z - _1864 / sub_9b28d1a7:
                    if stor8[uint8(stor5[address(arg1)][u].field_1280)][s].field_0 < z:
                        revert with 0, 17
                    if stor5[address(arg1)][u].field_1024 and a > -1 / stor5[address(arg1)][u].field_1024:
                        revert with 0, 17
                    if stor5[address(arg1)][u].field_1024 * a / 100 * 10^6 and stor8[uint8(stor5[address(arg1)][u].field_1280)][s].field_0 - z > -1 / stor5[address(arg1)][u].field_1024 * a / 100 * 10^6:
                        revert with 0, 17
                    if x > !((stor8[uint8(stor5[address(arg1)][u].field_1280)][s].field_0 * stor5[address(arg1)][u].field_1024 * a / 100 * 10^6) - (z * stor5[address(arg1)][u].field_1024 * a / 100 * 10^6) / 8760 * 24 * 3600):
                        revert with 0, 17
                    if stor8[uint8(stor5[address(arg1)][u].field_1280)][s].field_0 - _1864 / sub_9b28d1a7 != z - _1864 / sub_9b28d1a7:
                        if 100 * 10^6 < sub_93520a80 - 0x8000000000000000000000000000000000000000000000000000000000000000 and sub_93520a80 >= 0:
                            revert with 0, 17
                        if sub_93520a80 < 0 and 100 * 10^6 > sub_93520a80 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                            revert with 0, 17
                        if a and -sub_93520a80 + 100 * 10^6 > -1 / a:
                            revert with 0, 17
                        if not s:
                            revert with 0, 17
                        if s - 1 == -1:
                            revert with 0, 17
                        if uint8(stor5[address(arg1)][u].field_1280) > 2:
                            revert with 0, 33
                        mem[0] = uint8(stor5[address(arg1)][u].field_1280)
                        mem[32] = 8
                        s = s
                        t = stor8[uint8(stor5[address(arg1)][u].field_1280)][s].field_0 - _1864 / sub_9b28d1a7 != z - _1864 / sub_9b28d1a7
                        v = (stor8[uint8(stor5[address(arg1)][u].field_1280)][s].field_0 * stor5[address(arg1)][u].field_1024 * a / 100 * 10^6) - (z * stor5[address(arg1)][u].field_1024 * a / 100 * 10^6) / 8760 * 24 * 3600
                        w = stor8[uint8(stor5[address(arg1)][u].field_1280)][s].field_0 - z
                        x = x + ((stor8[uint8(stor5[address(arg1)][u].field_1280)][s].field_0 * stor5[address(arg1)][u].field_1024 * a / 100 * 10^6) - (z * stor5[address(arg1)][u].field_1024 * a / 100 * 10^6) / 8760 * 24 * 3600)
                        y = stor8[uint8(stor5[address(arg1)][u].field_1280)][s].field_0
                        z = stor8[uint8(stor5[address(arg1)][u].field_1280)][s].field_0
                        a = (100 * 10^6 * a) - (sub_93520a80 * a) / 100 * 10^6
                        continue 
                    if uint8(stor5[address(arg1)][u].field_1280) > 2:
                        revert with 0, 33
                    if s >= stor8[uint8(stor5[address(arg1)][u].field_1280)].field_0:
                        revert with 0, 50
                    if 100 * 10^6 < stor8[uint8(stor5[address(arg1)][u].field_1280)][s].field_256 - 0x8000000000000000000000000000000000000000000000000000000000000000 and stor8[uint8(stor5[address(arg1)][u].field_1280)][s].field_256 >= 0:
                        revert with 0, 17
                    if stor8[uint8(stor5[address(arg1)][u].field_1280)][s].field_256 < 0 and 100 * 10^6 > stor8[uint8(stor5[address(arg1)][u].field_1280)][s].field_256 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                        revert with 0, 17
                    if a and -stor8[uint8(stor5[address(arg1)][u].field_1280)][s].field_256 + 100 * 10^6 > -1 / a:
                        revert with 0, 17
                    if s == -1:
                        revert with 0, 17
                    if uint8(stor5[address(arg1)][u].field_1280) > 2:
                        revert with 0, 33
                    mem[0] = uint8(stor5[address(arg1)][u].field_1280)
                    mem[32] = 8
                    s = s + 1
                    t = stor8[uint8(stor5[address(arg1)][u].field_1280)][s].field_0 - _1864 / sub_9b28d1a7 != z - _1864 / sub_9b28d1a7
                    v = (stor8[uint8(stor5[address(arg1)][u].field_1280)][s].field_0 * stor5[address(arg1)][u].field_1024 * a / 100 * 10^6) - (z * stor5[address(arg1)][u].field_1024 * a / 100 * 10^6) / 8760 * 24 * 3600
                    w = stor8[uint8(stor5[address(arg1)][u].field_1280)][s].field_0 - z
                    x = x + ((stor8[uint8(stor5[address(arg1)][u].field_1280)][s].field_0 * stor5[address(arg1)][u].field_1024 * a / 100 * 10^6) - (z * stor5[address(arg1)][u].field_1024 * a / 100 * 10^6) / 8760 * 24 * 3600)
                    y = stor8[uint8(stor5[address(arg1)][u].field_1280)][s].field_0
                    z = stor8[uint8(stor5[address(arg1)][u].field_1280)][s].field_0
                    a = (100 * 10^6 * a) - (stor8[uint8(stor5[address(arg1)][u].field_1280)][s].field_256 * a) / 100 * 10^6
                    continue 
                if z < _1864:
                    revert with 0, 17
                if not sub_9b28d1a7:
                    revert with 0, 18
                if 1 > !(z - _1864 / sub_9b28d1a7):
                    revert with 0, 17
                if sub_9b28d1a7 and (z - _1864 / sub_9b28d1a7) + 1 > -1 / sub_9b28d1a7:
                    revert with 0, 17
                if _1864 > !(sub_9b28d1a7 + (z - _1864 / sub_9b28d1a7 * sub_9b28d1a7)):
                    revert with 0, 17
                if _1864 + sub_9b28d1a7 + (z - _1864 / sub_9b28d1a7 * sub_9b28d1a7) < z:
                    revert with 0, 17
                if stor5[address(arg1)][u].field_1024 and a > -1 / stor5[address(arg1)][u].field_1024:
                    revert with 0, 17
                if stor5[address(arg1)][u].field_1024 * a / 100 * 10^6 and _1864 + sub_9b28d1a7 + (z - _1864 / sub_9b28d1a7 * sub_9b28d1a7) - z > -1 / stor5[address(arg1)][u].field_1024 * a / 100 * 10^6:
                    revert with 0, 17
                if x > !((_1864 * stor5[address(arg1)][u].field_1024 * a / 100 * 10^6) + (sub_9b28d1a7 * stor5[address(arg1)][u].field_1024 * a / 100 * 10^6) + (z - _1864 / sub_9b28d1a7 * sub_9b28d1a7 * stor5[address(arg1)][u].field_1024 * a / 100 * 10^6) - (z * stor5[address(arg1)][u].field_1024 * a / 100 * 10^6) / 8760 * 24 * 3600):
                    revert with 0, 17
                if stor8[uint8(stor5[address(arg1)][u].field_1280)][s].field_0 - _1864 / sub_9b28d1a7 != z - _1864 / sub_9b28d1a7:
                    if 100 * 10^6 < sub_93520a80 - 0x8000000000000000000000000000000000000000000000000000000000000000 and sub_93520a80 >= 0:
                        revert with 0, 17
                    if sub_93520a80 < 0 and 100 * 10^6 > sub_93520a80 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                        revert with 0, 17
                    if a and -sub_93520a80 + 100 * 10^6 > -1 / a:
                        revert with 0, 17
                    if not s:
                        revert with 0, 17
                    if s - 1 == -1:
                        revert with 0, 17
                    if uint8(stor5[address(arg1)][u].field_1280) > 2:
                        revert with 0, 33
                    mem[0] = uint8(stor5[address(arg1)][u].field_1280)
                    mem[32] = 8
                    s = s
                    t = stor8[uint8(stor5[address(arg1)][u].field_1280)][s].field_0 - _1864 / sub_9b28d1a7 != z - _1864 / sub_9b28d1a7
                    v = (_1864 * stor5[address(arg1)][u].field_1024 * a / 100 * 10^6) + (sub_9b28d1a7 * stor5[address(arg1)][u].field_1024 * a / 100 * 10^6) + (z - _1864 / sub_9b28d1a7 * sub_9b28d1a7 * stor5[address(arg1)][u].field_1024 * a / 100 * 10^6) - (z * stor5[address(arg1)][u].field_1024 * a / 100 * 10^6) / 8760 * 24 * 3600
                    w = _1864 + sub_9b28d1a7 + (z - _1864 / sub_9b28d1a7 * sub_9b28d1a7) - z
                    x = x + ((_1864 * stor5[address(arg1)][u].field_1024 * a / 100 * 10^6) + (sub_9b28d1a7 * stor5[address(arg1)][u].field_1024 * a / 100 * 10^6) + (z - _1864 / sub_9b28d1a7 * sub_9b28d1a7 * stor5[address(arg1)][u].field_1024 * a / 100 * 10^6) - (z * stor5[address(arg1)][u].field_1024 * a / 100 * 10^6) / 8760 * 24 * 3600)
                    y = _1864 + sub_9b28d1a7 + (z - _1864 / sub_9b28d1a7 * sub_9b28d1a7)
                    z = _1864 + sub_9b28d1a7 + (z - _1864 / sub_9b28d1a7 * sub_9b28d1a7)
                    a = (100 * 10^6 * a) - (sub_93520a80 * a) / 100 * 10^6
                    continue 
                if uint8(stor5[address(arg1)][u].field_1280) > 2:
                    revert with 0, 33
                if s >= stor8[uint8(stor5[address(arg1)][u].field_1280)].field_0:
                    revert with 0, 50
                if 100 * 10^6 < stor8[uint8(stor5[address(arg1)][u].field_1280)][s].field_256 - 0x8000000000000000000000000000000000000000000000000000000000000000 and stor8[uint8(stor5[address(arg1)][u].field_1280)][s].field_256 >= 0:
                    revert with 0, 17
                if stor8[uint8(stor5[address(arg1)][u].field_1280)][s].field_256 < 0 and 100 * 10^6 > stor8[uint8(stor5[address(arg1)][u].field_1280)][s].field_256 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                    revert with 0, 17
                if a and -stor8[uint8(stor5[address(arg1)][u].field_1280)][s].field_256 + 100 * 10^6 > -1 / a:
                    revert with 0, 17
                if s == -1:
                    revert with 0, 17
                if uint8(stor5[address(arg1)][u].field_1280) > 2:
                    revert with 0, 33
                mem[0] = uint8(stor5[address(arg1)][u].field_1280)
                mem[32] = 8
                s = s + 1
                t = stor8[uint8(stor5[address(arg1)][u].field_1280)][s].field_0 - _1864 / sub_9b28d1a7 != z - _1864 / sub_9b28d1a7
                v = (_1864 * stor5[address(arg1)][u].field_1024 * a / 100 * 10^6) + (sub_9b28d1a7 * stor5[address(arg1)][u].field_1024 * a / 100 * 10^6) + (z - _1864 / sub_9b28d1a7 * sub_9b28d1a7 * stor5[address(arg1)][u].field_1024 * a / 100 * 10^6) - (z * stor5[address(arg1)][u].field_1024 * a / 100 * 10^6) / 8760 * 24 * 3600
                w = _1864 + sub_9b28d1a7 + (z - _1864 / sub_9b28d1a7 * sub_9b28d1a7) - z
                x = x + ((_1864 * stor5[address(arg1)][u].field_1024 * a / 100 * 10^6) + (sub_9b28d1a7 * stor5[address(arg1)][u].field_1024 * a / 100 * 10^6) + (z - _1864 / sub_9b28d1a7 * sub_9b28d1a7 * stor5[address(arg1)][u].field_1024 * a / 100 * 10^6) - (z * stor5[address(arg1)][u].field_1024 * a / 100 * 10^6) / 8760 * 24 * 3600)
                y = _1864 + sub_9b28d1a7 + (z - _1864 / sub_9b28d1a7 * sub_9b28d1a7)
                z = _1864 + sub_9b28d1a7 + (z - _1864 / sub_9b28d1a7 * sub_9b28d1a7)
                a = (100 * 10^6 * a) - (stor8[uint8(stor5[address(arg1)][u].field_1280)][s].field_256 * a) / 100 * 10^6
                continue 
            s = t
            s = v
            s = w
            s = x
            b = y
            idx = z
            b = a
            while idx != block.timestamp:
                if idx < _1864:
                    revert with 0, 17
                if not sub_9b28d1a7:
                    revert with 0, 18
                if block.timestamp < _1864:
                    revert with 0, 17
                if not sub_9b28d1a7:
                    revert with 0, 18
                if block.timestamp - _1864 / sub_9b28d1a7 == idx - _1864 / sub_9b28d1a7:
                    if block.timestamp < idx:
                        revert with 0, 17
                    if stor5[address(arg1)][u].field_1024 and b > -1 / stor5[address(arg1)][u].field_1024:
                        revert with 0, 17
                    if stor5[address(arg1)][u].field_1024 * b / 100 * 10^6 and block.timestamp - idx > -1 / stor5[address(arg1)][u].field_1024 * b / 100 * 10^6:
                        revert with 0, 17
                    if s > !((block.timestamp * stor5[address(arg1)][u].field_1024 * b / 100 * 10^6) - (idx * stor5[address(arg1)][u].field_1024 * b / 100 * 10^6) / 8760 * 24 * 3600):
                        revert with 0, 17
                    if block.timestamp - _1864 / sub_9b28d1a7 == idx - _1864 / sub_9b28d1a7:
                        s = block.timestamp - _1864 / sub_9b28d1a7 != idx - _1864 / sub_9b28d1a7
                        s = (block.timestamp * stor5[address(arg1)][u].field_1024 * b / 100 * 10^6) - (idx * stor5[address(arg1)][u].field_1024 * b / 100 * 10^6) / 8760 * 24 * 3600
                        s = block.timestamp - idx
                        s = s + ((block.timestamp * stor5[address(arg1)][u].field_1024 * b / 100 * 10^6) - (idx * stor5[address(arg1)][u].field_1024 * b / 100 * 10^6) / 8760 * 24 * 3600)
                        b = block.timestamp
                        idx = block.timestamp
                        b = b
                        continue 
                    if 100 * 10^6 < sub_93520a80 - 0x8000000000000000000000000000000000000000000000000000000000000000 and sub_93520a80 >= 0:
                        revert with 0, 17
                    if sub_93520a80 < 0 and 100 * 10^6 > sub_93520a80 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                        revert with 0, 17
                    if b and -sub_93520a80 + 100 * 10^6 > -1 / b:
                        revert with 0, 17
                    s = block.timestamp - _1864 / sub_9b28d1a7 != idx - _1864 / sub_9b28d1a7
                    s = (block.timestamp * stor5[address(arg1)][u].field_1024 * b / 100 * 10^6) - (idx * stor5[address(arg1)][u].field_1024 * b / 100 * 10^6) / 8760 * 24 * 3600
                    s = block.timestamp - idx
                    s = s + ((block.timestamp * stor5[address(arg1)][u].field_1024 * b / 100 * 10^6) - (idx * stor5[address(arg1)][u].field_1024 * b / 100 * 10^6) / 8760 * 24 * 3600)
                    b = block.timestamp
                    idx = block.timestamp
                    b = (100 * 10^6 * b) - (sub_93520a80 * b) / 100 * 10^6
                    continue 
                if idx < _1864:
                    revert with 0, 17
                if not sub_9b28d1a7:
                    revert with 0, 18
                if 1 > !(idx - _1864 / sub_9b28d1a7):
                    revert with 0, 17
                if sub_9b28d1a7 and (idx - _1864 / sub_9b28d1a7) + 1 > -1 / sub_9b28d1a7:
                    revert with 0, 17
                if _1864 > !(sub_9b28d1a7 + (idx - _1864 / sub_9b28d1a7 * sub_9b28d1a7)):
                    revert with 0, 17
                if _1864 + sub_9b28d1a7 + (idx - _1864 / sub_9b28d1a7 * sub_9b28d1a7) < idx:
                    revert with 0, 17
                if stor5[address(arg1)][u].field_1024 and b > -1 / stor5[address(arg1)][u].field_1024:
                    revert with 0, 17
                if stor5[address(arg1)][u].field_1024 * b / 100 * 10^6 and _1864 + sub_9b28d1a7 + (idx - _1864 / sub_9b28d1a7 * sub_9b28d1a7) - idx > -1 / stor5[address(arg1)][u].field_1024 * b / 100 * 10^6:
                    revert with 0, 17
                if s > !((_1864 * stor5[address(arg1)][u].field_1024 * b / 100 * 10^6) + (sub_9b28d1a7 * stor5[address(arg1)][u].field_1024 * b / 100 * 10^6) + (idx - _1864 / sub_9b28d1a7 * sub_9b28d1a7 * stor5[address(arg1)][u].field_1024 * b / 100 * 10^6) - (idx * stor5[address(arg1)][u].field_1024 * b / 100 * 10^6) / 8760 * 24 * 3600):
                    revert with 0, 17
                if block.timestamp - _1864 / sub_9b28d1a7 == idx - _1864 / sub_9b28d1a7:
                    s = block.timestamp - _1864 / sub_9b28d1a7 != idx - _1864 / sub_9b28d1a7
                    s = (_1864 * stor5[address(arg1)][u].field_1024 * b / 100 * 10^6) + (sub_9b28d1a7 * stor5[address(arg1)][u].field_1024 * b / 100 * 10^6) + (idx - _1864 / sub_9b28d1a7 * sub_9b28d1a7 * stor5[address(arg1)][u].field_1024 * b / 100 * 10^6) - (idx * stor5[address(arg1)][u].field_1024 * b / 100 * 10^6) / 8760 * 24 * 3600
                    s = _1864 + sub_9b28d1a7 + (idx - _1864 / sub_9b28d1a7 * sub_9b28d1a7) - idx
                    s = s + ((_1864 * stor5[address(arg1)][u].field_1024 * b / 100 * 10^6) + (sub_9b28d1a7 * stor5[address(arg1)][u].field_1024 * b / 100 * 10^6) + (idx - _1864 / sub_9b28d1a7 * sub_9b28d1a7 * stor5[address(arg1)][u].field_1024 * b / 100 * 10^6) - (idx * stor5[address(arg1)][u].field_1024 * b / 100 * 10^6) / 8760 * 24 * 3600)
                    b = _1864 + sub_9b28d1a7 + (idx - _1864 / sub_9b28d1a7 * sub_9b28d1a7)
                    idx = _1864 + sub_9b28d1a7 + (idx - _1864 / sub_9b28d1a7 * sub_9b28d1a7)
                    b = b
                    continue 
                if 100 * 10^6 < sub_93520a80 - 0x8000000000000000000000000000000000000000000000000000000000000000 and sub_93520a80 >= 0:
                    revert with 0, 17
                if sub_93520a80 < 0 and 100 * 10^6 > sub_93520a80 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                    revert with 0, 17
                if b and -sub_93520a80 + 100 * 10^6 > -1 / b:
                    revert with 0, 17
                s = block.timestamp - _1864 / sub_9b28d1a7 != idx - _1864 / sub_9b28d1a7
                s = (_1864 * stor5[address(arg1)][u].field_1024 * b / 100 * 10^6) + (sub_9b28d1a7 * stor5[address(arg1)][u].field_1024 * b / 100 * 10^6) + (idx - _1864 / sub_9b28d1a7 * sub_9b28d1a7 * stor5[address(arg1)][u].field_1024 * b / 100 * 10^6) - (idx * stor5[address(arg1)][u].field_1024 * b / 100 * 10^6) / 8760 * 24 * 3600
                s = _1864 + sub_9b28d1a7 + (idx - _1864 / sub_9b28d1a7 * sub_9b28d1a7) - idx
                s = s + ((_1864 * stor5[address(arg1)][u].field_1024 * b / 100 * 10^6) + (sub_9b28d1a7 * stor5[address(arg1)][u].field_1024 * b / 100 * 10^6) + (idx - _1864 / sub_9b28d1a7 * sub_9b28d1a7 * stor5[address(arg1)][u].field_1024 * b / 100 * 10^6) - (idx * stor5[address(arg1)][u].field_1024 * b / 100 * 10^6) / 8760 * 24 * 3600)
                b = _1864 + sub_9b28d1a7 + (idx - _1864 / sub_9b28d1a7 * sub_9b28d1a7)
                idx = _1864 + sub_9b28d1a7 + (idx - _1864 / sub_9b28d1a7 * sub_9b28d1a7)
                b = (100 * 10^6 * b) - (sub_93520a80 * b) / 100 * 10^6
                continue 
            if 0 > !s:
                revert with 0, 17
            stor5[address(arg1)][u].field_512 = block.timestamp
            if u == -1:
                revert with 0, 17
            u = u + 1
            s = (6 * u) + sha3(sha3(address(arg1), 5))
            continue 
        if bool(stor5[address(arg1)][idx].field_0) == stor5[address(arg1)][idx].field_1 % 128 < 32:
            revert with 0, 34
        _637 = mem[64]
        mem[64] = mem[64] + ceil32(stor5[address(arg1)][idx].field_1 % 128) + 32
        mem[_637] = stor5[address(arg1)][idx].field_1 % 128
        if bool(stor5[address(arg1)][idx].field_0):
            if bool(stor5[address(arg1)][idx].field_0) == uint255(stor5[address(arg1)][idx].field_0) * 0.5 < 32:
                revert with 0, 34
            if not Mask(256, -1, stor5[address(arg1)][idx].field_0):
                mem[_633] = _637
                mem[_633 + 32] = stor5[address(arg1)][idx].field_256
                mem[_633 + 64] = stor5[address(arg1)][idx].field_512
                mem[_633 + 96] = stor5[address(arg1)][idx].field_768
                mem[_633 + 128] = stor5[address(arg1)][idx].field_1024
                if uint8(stor5[address(arg1)][idx].field_1280) > 2:
                    revert with 0, 33
                mem[_633 + 160] = uint8(stor5[address(arg1)][idx].field_1280)
                if uint8(stor5[address(arg1)][idx].field_1280) > 2:
                    revert with 0, 33
                mem[32] = 8
                s = 0
                while stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0 > s:
                    if s > !stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0:
                        revert with 0, 17
                    if uint8(stor5[address(arg1)][idx].field_1280) > 2:
                        revert with 0, 33
                    mem[32] = 8
                    if s + stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0 / 2 >= stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0:
                        revert with 0, 50
                    mem[0] = sha3(uint8(stor5[address(arg1)][idx].field_1280), 8)
                    if stor8[uint8(stor5[address(arg1)][idx].field_1280)][Mask(255, 1, s + stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0)].field_0 >= stor5[address(arg1)][idx].field_512:
                        s = s
                        continue 
                    if 1 > !(s + stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0 / 2):
                        revert with 0, 17
                    s = (s + stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0 / 2) + 1
                    continue 
                _970 = mem[_633 + 32]
                if uint8(stor5[address(arg1)][idx].field_1280) > 2:
                    revert with 0, 33
                s = 0
                while stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0 > s:
                    if s > !stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0:
                        revert with 0, 17
                    if uint8(stor5[address(arg1)][idx].field_1280) > 2:
                        revert with 0, 33
                    mem[32] = 8
                    if s + stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0 / 2 >= stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0:
                        revert with 0, 50
                    mem[0] = sha3(uint8(stor5[address(arg1)][idx].field_1280), 8)
                    if stor8[uint8(stor5[address(arg1)][idx].field_1280)][Mask(255, 1, s + stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0)].field_0 >= _970:
                        s = s
                        continue 
                    if 1 > !(s + stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0 / 2):
                        revert with 0, 17
                    s = (s + stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0 / 2) + 1
                    continue 
                if uint8(stor5[address(arg1)][idx].field_1280) > 2:
                    revert with 0, 33
                mem[32] = 8
                t = 0
                while stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0 > t:
                    if t > !stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0:
                        revert with 0, 17
                    if uint8(stor5[address(arg1)][idx].field_1280) > 2:
                        revert with 0, 33
                    mem[32] = 8
                    if t + stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0 / 2 >= stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0:
                        revert with 0, 50
                    mem[0] = sha3(uint8(stor5[address(arg1)][idx].field_1280), 8)
                    if stor8[uint8(stor5[address(arg1)][idx].field_1280)][Mask(255, 1, t + stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0)].field_0 >= stor5[address(arg1)][idx].field_512:
                        t = t
                        continue 
                    if 1 > !(t + stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0 / 2):
                        revert with 0, 17
                    t = (t + stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0 / 2) + 1
                    continue 
                u = s
                v = stor5[address(arg1)][idx].field_768
                while u < t:
                    if uint8(stor5[address(arg1)][idx].field_1280) > 2:
                        revert with 0, 33
                    mem[32] = 8
                    if u >= stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0:
                        revert with 0, 50
                    mem[0] = sha3(uint8(stor5[address(arg1)][idx].field_1280), 8)
                    if 100 * 10^6 < stor8[uint8(stor5[address(arg1)][idx].field_1280)][u].field_256 - 0x8000000000000000000000000000000000000000000000000000000000000000 and stor8[uint8(stor5[address(arg1)][idx].field_1280)][u].field_256 >= 0:
                        revert with 0, 17
                    if stor8[uint8(stor5[address(arg1)][idx].field_1280)][u].field_256 < 0 and 100 * 10^6 > stor8[uint8(stor5[address(arg1)][idx].field_1280)][u].field_256 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                        revert with 0, 17
                    if v and -stor8[uint8(stor5[address(arg1)][idx].field_1280)][u].field_256 + 100 * 10^6 > -1 / v:
                        revert with 0, 17
                    if u == -1:
                        revert with 0, 17
                    u = u + 1
                    v = (100 * 10^6 * v) - (stor8[uint8(stor5[address(arg1)][idx].field_1280)][u].field_256 * v) / 100 * 10^6
                    continue 
                if stor5[address(arg1)][idx].field_512 < _970:
                    revert with 0, 17
                if not sub_9b28d1a7:
                    revert with 0, 18
                s = stor5[address(arg1)][idx].field_512 - _970 / sub_9b28d1a7
                t = v
                while s:
                    if not s:
                        revert with 0, 17
                    if 100 * 10^6 < sub_93520a80 - 0x8000000000000000000000000000000000000000000000000000000000000000 and sub_93520a80 >= 0:
                        revert with 0, 17
                    if sub_93520a80 < 0 and 100 * 10^6 > sub_93520a80 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                        revert with 0, 17
                    if t and -sub_93520a80 + 100 * 10^6 > -1 / t:
                        revert with 0, 17
                    s = s - 1
                    t = (100 * 10^6 * t) - (sub_93520a80 * t) / 100 * 10^6
                    continue 
                _1751 = mem[_633 + 32]
                if uint8(stor5[address(arg1)][idx].field_1280) > 2:
                    revert with 0, 33
                mem[0] = uint8(stor5[address(arg1)][idx].field_1280)
                mem[32] = 8
                s = var154001
                t = var154002
                u = var154004
                v = var154005
                w = var154006
                x = var154007
                y = var154008
                z = var154009
                while s < stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0:
                    if uint8(stor5[address(arg1)][idx].field_1280) > 2:
                        revert with 0, 33
                    if s >= stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0:
                        revert with 0, 50
                    if y < _1751:
                        revert with 0, 17
                    if not sub_9b28d1a7:
                        revert with 0, 18
                    if stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0 < _1751:
                        revert with 0, 17
                    if not sub_9b28d1a7:
                        revert with 0, 18
                    if stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0 - _1751 / sub_9b28d1a7 == y - _1751 / sub_9b28d1a7:
                        if stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0 < y:
                            revert with 0, 17
                        if stor5[address(arg1)][idx].field_1024 and z > -1 / stor5[address(arg1)][idx].field_1024:
                            revert with 0, 17
                        if stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6 and stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0 - y > -1 / stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6:
                            revert with 0, 17
                        if w > !((stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) - (y * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) / 8760 * 24 * 3600):
                            revert with 0, 17
                        if stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0 - _1751 / sub_9b28d1a7 != y - _1751 / sub_9b28d1a7:
                            if 100 * 10^6 < sub_93520a80 - 0x8000000000000000000000000000000000000000000000000000000000000000 and sub_93520a80 >= 0:
                                revert with 0, 17
                            if sub_93520a80 < 0 and 100 * 10^6 > sub_93520a80 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                revert with 0, 17
                            if z and -sub_93520a80 + 100 * 10^6 > -1 / z:
                                revert with 0, 17
                            if not s:
                                revert with 0, 17
                            if s - 1 == -1:
                                revert with 0, 17
                            if uint8(stor5[address(arg1)][idx].field_1280) > 2:
                                revert with 0, 33
                            mem[0] = uint8(stor5[address(arg1)][idx].field_1280)
                            mem[32] = 8
                            s = s
                            t = stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0 - _1751 / sub_9b28d1a7 != y - _1751 / sub_9b28d1a7
                            u = (stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) - (y * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) / 8760 * 24 * 3600
                            v = stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0 - y
                            w = w + ((stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) - (y * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) / 8760 * 24 * 3600)
                            x = stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0
                            y = stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0
                            z = (100 * 10^6 * z) - (sub_93520a80 * z) / 100 * 10^6
                            continue 
                        if uint8(stor5[address(arg1)][idx].field_1280) > 2:
                            revert with 0, 33
                        if s >= stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0:
                            revert with 0, 50
                        if 100 * 10^6 < stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_256 - 0x8000000000000000000000000000000000000000000000000000000000000000 and stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_256 >= 0:
                            revert with 0, 17
                        if stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_256 < 0 and 100 * 10^6 > stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_256 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                            revert with 0, 17
                        if z and -stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_256 + 100 * 10^6 > -1 / z:
                            revert with 0, 17
                        if s == -1:
                            revert with 0, 17
                        if uint8(stor5[address(arg1)][idx].field_1280) > 2:
                            revert with 0, 33
                        mem[0] = uint8(stor5[address(arg1)][idx].field_1280)
                        mem[32] = 8
                        s = s + 1
                        t = stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0 - _1751 / sub_9b28d1a7 != y - _1751 / sub_9b28d1a7
                        u = (stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) - (y * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) / 8760 * 24 * 3600
                        v = stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0 - y
                        w = w + ((stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) - (y * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) / 8760 * 24 * 3600)
                        x = stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0
                        y = stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0
                        z = (100 * 10^6 * z) - (stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_256 * z) / 100 * 10^6
                        continue 
                    if y < _1751:
                        revert with 0, 17
                    if not sub_9b28d1a7:
                        revert with 0, 18
                    if 1 > !(y - _1751 / sub_9b28d1a7):
                        revert with 0, 17
                    if sub_9b28d1a7 and (y - _1751 / sub_9b28d1a7) + 1 > -1 / sub_9b28d1a7:
                        revert with 0, 17
                    if _1751 > !(sub_9b28d1a7 + (y - _1751 / sub_9b28d1a7 * sub_9b28d1a7)):
                        revert with 0, 17
                    if _1751 + sub_9b28d1a7 + (y - _1751 / sub_9b28d1a7 * sub_9b28d1a7) < y:
                        revert with 0, 17
                    if stor5[address(arg1)][idx].field_1024 and z > -1 / stor5[address(arg1)][idx].field_1024:
                        revert with 0, 17
                    if stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6 and _1751 + sub_9b28d1a7 + (y - _1751 / sub_9b28d1a7 * sub_9b28d1a7) - y > -1 / stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6:
                        revert with 0, 17
                    if w > !((_1751 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) + (sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) + (y - _1751 / sub_9b28d1a7 * sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) - (y * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) / 8760 * 24 * 3600):
                        revert with 0, 17
                    if stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0 - _1751 / sub_9b28d1a7 != y - _1751 / sub_9b28d1a7:
                        if 100 * 10^6 < sub_93520a80 - 0x8000000000000000000000000000000000000000000000000000000000000000 and sub_93520a80 >= 0:
                            revert with 0, 17
                        if sub_93520a80 < 0 and 100 * 10^6 > sub_93520a80 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                            revert with 0, 17
                        if z and -sub_93520a80 + 100 * 10^6 > -1 / z:
                            revert with 0, 17
                        if not s:
                            revert with 0, 17
                        if s - 1 == -1:
                            revert with 0, 17
                        if uint8(stor5[address(arg1)][idx].field_1280) > 2:
                            revert with 0, 33
                        mem[0] = uint8(stor5[address(arg1)][idx].field_1280)
                        mem[32] = 8
                        s = s
                        t = stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0 - _1751 / sub_9b28d1a7 != y - _1751 / sub_9b28d1a7
                        u = (_1751 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) + (sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) + (y - _1751 / sub_9b28d1a7 * sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) - (y * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) / 8760 * 24 * 3600
                        v = _1751 + sub_9b28d1a7 + (y - _1751 / sub_9b28d1a7 * sub_9b28d1a7) - y
                        w = w + ((_1751 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) + (sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) + (y - _1751 / sub_9b28d1a7 * sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) - (y * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) / 8760 * 24 * 3600)
                        x = _1751 + sub_9b28d1a7 + (y - _1751 / sub_9b28d1a7 * sub_9b28d1a7)
                        y = _1751 + sub_9b28d1a7 + (y - _1751 / sub_9b28d1a7 * sub_9b28d1a7)
                        z = (100 * 10^6 * z) - (sub_93520a80 * z) / 100 * 10^6
                        continue 
                    if uint8(stor5[address(arg1)][idx].field_1280) > 2:
                        revert with 0, 33
                    if s >= stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0:
                        revert with 0, 50
                    if 100 * 10^6 < stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_256 - 0x8000000000000000000000000000000000000000000000000000000000000000 and stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_256 >= 0:
                        revert with 0, 17
                    if stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_256 < 0 and 100 * 10^6 > stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_256 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                        revert with 0, 17
                    if z and -stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_256 + 100 * 10^6 > -1 / z:
                        revert with 0, 17
                    if s == -1:
                        revert with 0, 17
                    if uint8(stor5[address(arg1)][idx].field_1280) > 2:
                        revert with 0, 33
                    mem[0] = uint8(stor5[address(arg1)][idx].field_1280)
                    mem[32] = 8
                    s = s + 1
                    t = stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0 - _1751 / sub_9b28d1a7 != y - _1751 / sub_9b28d1a7
                    u = (_1751 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) + (sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) + (y - _1751 / sub_9b28d1a7 * sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) - (y * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) / 8760 * 24 * 3600
                    v = _1751 + sub_9b28d1a7 + (y - _1751 / sub_9b28d1a7 * sub_9b28d1a7) - y
                    w = w + ((_1751 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) + (sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) + (y - _1751 / sub_9b28d1a7 * sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) - (y * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) / 8760 * 24 * 3600)
                    x = _1751 + sub_9b28d1a7 + (y - _1751 / sub_9b28d1a7 * sub_9b28d1a7)
                    y = _1751 + sub_9b28d1a7 + (y - _1751 / sub_9b28d1a7 * sub_9b28d1a7)
                    z = (100 * 10^6 * z) - (stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_256 * z) / 100 * 10^6
                    continue 
                a = t
                a = u
                a = v
                a = w
                b = x
                s = y
                b = z
                while s != block.timestamp:
                    if s < _1751:
                        revert with 0, 17
                    if not sub_9b28d1a7:
                        revert with 0, 18
                    if block.timestamp < _1751:
                        revert with 0, 17
                    if not sub_9b28d1a7:
                        revert with 0, 18
                    if block.timestamp - _1751 / sub_9b28d1a7 == s - _1751 / sub_9b28d1a7:
                        if block.timestamp < s:
                            revert with 0, 17
                        if stor5[address(arg1)][idx].field_1024 and b > -1 / stor5[address(arg1)][idx].field_1024:
                            revert with 0, 17
                        if stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6 and block.timestamp - s > -1 / stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6:
                            revert with 0, 17
                        if a > !((block.timestamp * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) - (s * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) / 8760 * 24 * 3600):
                            revert with 0, 17
                        if block.timestamp - _1751 / sub_9b28d1a7 == s - _1751 / sub_9b28d1a7:
                            a = block.timestamp - _1751 / sub_9b28d1a7 != s - _1751 / sub_9b28d1a7
                            a = (block.timestamp * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) - (s * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) / 8760 * 24 * 3600
                            a = block.timestamp - s
                            a = a + ((block.timestamp * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) - (s * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) / 8760 * 24 * 3600)
                            b = block.timestamp
                            s = block.timestamp
                            b = b
                            continue 
                        if 100 * 10^6 < sub_93520a80 - 0x8000000000000000000000000000000000000000000000000000000000000000 and sub_93520a80 >= 0:
                            revert with 0, 17
                        if sub_93520a80 < 0 and 100 * 10^6 > sub_93520a80 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                            revert with 0, 17
                        if b and -sub_93520a80 + 100 * 10^6 > -1 / b:
                            revert with 0, 17
                        a = block.timestamp - _1751 / sub_9b28d1a7 != s - _1751 / sub_9b28d1a7
                        a = (block.timestamp * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) - (s * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) / 8760 * 24 * 3600
                        a = block.timestamp - s
                        a = a + ((block.timestamp * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) - (s * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) / 8760 * 24 * 3600)
                        b = block.timestamp
                        s = block.timestamp
                        b = (100 * 10^6 * b) - (sub_93520a80 * b) / 100 * 10^6
                        continue 
                    if s < _1751:
                        revert with 0, 17
                    if not sub_9b28d1a7:
                        revert with 0, 18
                    if 1 > !(s - _1751 / sub_9b28d1a7):
                        revert with 0, 17
                    if sub_9b28d1a7 and (s - _1751 / sub_9b28d1a7) + 1 > -1 / sub_9b28d1a7:
                        revert with 0, 17
                    if _1751 > !(sub_9b28d1a7 + (s - _1751 / sub_9b28d1a7 * sub_9b28d1a7)):
                        revert with 0, 17
                    if _1751 + sub_9b28d1a7 + (s - _1751 / sub_9b28d1a7 * sub_9b28d1a7) < s:
                        revert with 0, 17
                    if stor5[address(arg1)][idx].field_1024 and b > -1 / stor5[address(arg1)][idx].field_1024:
                        revert with 0, 17
                    if stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6 and _1751 + sub_9b28d1a7 + (s - _1751 / sub_9b28d1a7 * sub_9b28d1a7) - s > -1 / stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6:
                        revert with 0, 17
                    if a > !((_1751 * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) + (sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) + (s - _1751 / sub_9b28d1a7 * sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) - (s * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) / 8760 * 24 * 3600):
                        revert with 0, 17
                    if block.timestamp - _1751 / sub_9b28d1a7 == s - _1751 / sub_9b28d1a7:
                        a = block.timestamp - _1751 / sub_9b28d1a7 != s - _1751 / sub_9b28d1a7
                        a = (_1751 * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) + (sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) + (s - _1751 / sub_9b28d1a7 * sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) - (s * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) / 8760 * 24 * 3600
                        a = _1751 + sub_9b28d1a7 + (s - _1751 / sub_9b28d1a7 * sub_9b28d1a7) - s
                        a = a + ((_1751 * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) + (sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) + (s - _1751 / sub_9b28d1a7 * sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) - (s * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) / 8760 * 24 * 3600)
                        b = _1751 + sub_9b28d1a7 + (s - _1751 / sub_9b28d1a7 * sub_9b28d1a7)
                        s = _1751 + sub_9b28d1a7 + (s - _1751 / sub_9b28d1a7 * sub_9b28d1a7)
                        b = b
                        continue 
                    if 100 * 10^6 < sub_93520a80 - 0x8000000000000000000000000000000000000000000000000000000000000000 and sub_93520a80 >= 0:
                        revert with 0, 17
                    if sub_93520a80 < 0 and 100 * 10^6 > sub_93520a80 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                        revert with 0, 17
                    if b and -sub_93520a80 + 100 * 10^6 > -1 / b:
                        revert with 0, 17
                    a = block.timestamp - _1751 / sub_9b28d1a7 != s - _1751 / sub_9b28d1a7
                    a = (_1751 * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) + (sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) + (s - _1751 / sub_9b28d1a7 * sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) - (s * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) / 8760 * 24 * 3600
                    a = _1751 + sub_9b28d1a7 + (s - _1751 / sub_9b28d1a7 * sub_9b28d1a7) - s
                    a = a + ((_1751 * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) + (sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) + (s - _1751 / sub_9b28d1a7 * sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) - (s * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) / 8760 * 24 * 3600)
                    b = _1751 + sub_9b28d1a7 + (s - _1751 / sub_9b28d1a7 * sub_9b28d1a7)
                    s = _1751 + sub_9b28d1a7 + (s - _1751 / sub_9b28d1a7 * sub_9b28d1a7)
                    b = (100 * 10^6 * b) - (sub_93520a80 * b) / 100 * 10^6
                    continue 
                if 0 > !a:
                    revert with 0, 17
                stor5[address(arg1)][idx].field_512 = block.timestamp
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                s = (6 * idx) + sha3(sha3(address(arg1), 5))
                continue 
            if 31 >= uint255(stor5[address(arg1)][idx].field_0) * 0.5:
                mem[_637 + 32] = 256 * Mask(248, 0, stor5[address(arg1)][idx].field_8)
                mem[_633] = _637
                mem[_633 + 32] = stor5[address(arg1)][idx].field_256
                mem[_633 + 64] = stor5[address(arg1)][idx].field_512
                mem[_633 + 96] = stor5[address(arg1)][idx].field_768
                mem[_633 + 128] = stor5[address(arg1)][idx].field_1024
                if uint8(stor5[address(arg1)][idx].field_1280) > 2:
                    revert with 0, 33
                mem[_633 + 160] = uint8(stor5[address(arg1)][idx].field_1280)
                if uint8(stor5[address(arg1)][idx].field_1280) > 2:
                    revert with 0, 33
                mem[32] = 8
                s = 0
                while stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0 > s:
                    if s > !stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0:
                        revert with 0, 17
                    if uint8(stor5[address(arg1)][idx].field_1280) > 2:
                        revert with 0, 33
                    mem[32] = 8
                    if s + stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0 / 2 >= stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0:
                        revert with 0, 50
                    mem[0] = sha3(uint8(stor5[address(arg1)][idx].field_1280), 8)
                    if stor8[uint8(stor5[address(arg1)][idx].field_1280)][Mask(255, 1, s + stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0)].field_0 >= stor5[address(arg1)][idx].field_512:
                        s = s
                        continue 
                    if 1 > !(s + stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0 / 2):
                        revert with 0, 17
                    s = (s + stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0 / 2) + 1
                    continue 
                _973 = mem[_633 + 32]
                if uint8(stor5[address(arg1)][idx].field_1280) > 2:
                    revert with 0, 33
                s = 0
                while stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0 > s:
                    if s > !stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0:
                        revert with 0, 17
                    if uint8(stor5[address(arg1)][idx].field_1280) > 2:
                        revert with 0, 33
                    mem[32] = 8
                    if s + stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0 / 2 >= stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0:
                        revert with 0, 50
                    mem[0] = sha3(uint8(stor5[address(arg1)][idx].field_1280), 8)
                    if stor8[uint8(stor5[address(arg1)][idx].field_1280)][Mask(255, 1, s + stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0)].field_0 >= _973:
                        s = s
                        continue 
                    if 1 > !(s + stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0 / 2):
                        revert with 0, 17
                    s = (s + stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0 / 2) + 1
                    continue 
                if uint8(stor5[address(arg1)][idx].field_1280) > 2:
                    revert with 0, 33
                mem[32] = 8
                t = 0
                while stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0 > t:
                    if t > !stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0:
                        revert with 0, 17
                    if uint8(stor5[address(arg1)][idx].field_1280) > 2:
                        revert with 0, 33
                    mem[32] = 8
                    if t + stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0 / 2 >= stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0:
                        revert with 0, 50
                    mem[0] = sha3(uint8(stor5[address(arg1)][idx].field_1280), 8)
                    if stor8[uint8(stor5[address(arg1)][idx].field_1280)][Mask(255, 1, t + stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0)].field_0 >= stor5[address(arg1)][idx].field_512:
                        t = t
                        continue 
                    if 1 > !(t + stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0 / 2):
                        revert with 0, 17
                    t = (t + stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0 / 2) + 1
                    continue 
                u = s
                v = stor5[address(arg1)][idx].field_768
                while u < t:
                    if uint8(stor5[address(arg1)][idx].field_1280) > 2:
                        revert with 0, 33
                    mem[32] = 8
                    if u >= stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0:
                        revert with 0, 50
                    mem[0] = sha3(uint8(stor5[address(arg1)][idx].field_1280), 8)
                    if 100 * 10^6 < stor8[uint8(stor5[address(arg1)][idx].field_1280)][u].field_256 - 0x8000000000000000000000000000000000000000000000000000000000000000 and stor8[uint8(stor5[address(arg1)][idx].field_1280)][u].field_256 >= 0:
                        revert with 0, 17
                    if stor8[uint8(stor5[address(arg1)][idx].field_1280)][u].field_256 < 0 and 100 * 10^6 > stor8[uint8(stor5[address(arg1)][idx].field_1280)][u].field_256 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                        revert with 0, 17
                    if v and -stor8[uint8(stor5[address(arg1)][idx].field_1280)][u].field_256 + 100 * 10^6 > -1 / v:
                        revert with 0, 17
                    if u == -1:
                        revert with 0, 17
                    u = u + 1
                    v = (100 * 10^6 * v) - (stor8[uint8(stor5[address(arg1)][idx].field_1280)][u].field_256 * v) / 100 * 10^6
                    continue 
                if stor5[address(arg1)][idx].field_512 < _973:
                    revert with 0, 17
                if not sub_9b28d1a7:
                    revert with 0, 18
                s = stor5[address(arg1)][idx].field_512 - _973 / sub_9b28d1a7
                t = v
                while s:
                    if not s:
                        revert with 0, 17
                    if 100 * 10^6 < sub_93520a80 - 0x8000000000000000000000000000000000000000000000000000000000000000 and sub_93520a80 >= 0:
                        revert with 0, 17
                    if sub_93520a80 < 0 and 100 * 10^6 > sub_93520a80 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                        revert with 0, 17
                    if t and -sub_93520a80 + 100 * 10^6 > -1 / t:
                        revert with 0, 17
                    s = s - 1
                    t = (100 * 10^6 * t) - (sub_93520a80 * t) / 100 * 10^6
                    continue 
                _1753 = mem[_633 + 32]
                if uint8(stor5[address(arg1)][idx].field_1280) > 2:
                    revert with 0, 33
                mem[0] = uint8(stor5[address(arg1)][idx].field_1280)
                mem[32] = 8
                s = var156001
                t = var156002
                u = var156004
                v = var156005
                w = var156006
                x = var156007
                y = var156008
                z = var156009
                while s < stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0:
                    if uint8(stor5[address(arg1)][idx].field_1280) > 2:
                        revert with 0, 33
                    if s >= stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0:
                        revert with 0, 50
                    if y < _1753:
                        revert with 0, 17
                    if not sub_9b28d1a7:
                        revert with 0, 18
                    if stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0 < _1753:
                        revert with 0, 17
                    if not sub_9b28d1a7:
                        revert with 0, 18
                    if stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0 - _1753 / sub_9b28d1a7 == y - _1753 / sub_9b28d1a7:
                        if stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0 < y:
                            revert with 0, 17
                        if stor5[address(arg1)][idx].field_1024 and z > -1 / stor5[address(arg1)][idx].field_1024:
                            revert with 0, 17
                        if stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6 and stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0 - y > -1 / stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6:
                            revert with 0, 17
                        if w > !((stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) - (y * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) / 8760 * 24 * 3600):
                            revert with 0, 17
                        if stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0 - _1753 / sub_9b28d1a7 != y - _1753 / sub_9b28d1a7:
                            if 100 * 10^6 < sub_93520a80 - 0x8000000000000000000000000000000000000000000000000000000000000000 and sub_93520a80 >= 0:
                                revert with 0, 17
                            if sub_93520a80 < 0 and 100 * 10^6 > sub_93520a80 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                revert with 0, 17
                            if z and -sub_93520a80 + 100 * 10^6 > -1 / z:
                                revert with 0, 17
                            if not s:
                                revert with 0, 17
                            if s - 1 == -1:
                                revert with 0, 17
                            if uint8(stor5[address(arg1)][idx].field_1280) > 2:
                                revert with 0, 33
                            mem[0] = uint8(stor5[address(arg1)][idx].field_1280)
                            mem[32] = 8
                            s = s
                            t = stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0 - _1753 / sub_9b28d1a7 != y - _1753 / sub_9b28d1a7
                            u = (stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) - (y * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) / 8760 * 24 * 3600
                            v = stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0 - y
                            w = w + ((stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) - (y * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) / 8760 * 24 * 3600)
                            x = stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0
                            y = stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0
                            z = (100 * 10^6 * z) - (sub_93520a80 * z) / 100 * 10^6
                            continue 
                        if uint8(stor5[address(arg1)][idx].field_1280) > 2:
                            revert with 0, 33
                        if s >= stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0:
                            revert with 0, 50
                        if 100 * 10^6 < stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_256 - 0x8000000000000000000000000000000000000000000000000000000000000000 and stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_256 >= 0:
                            revert with 0, 17
                        if stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_256 < 0 and 100 * 10^6 > stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_256 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                            revert with 0, 17
                        if z and -stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_256 + 100 * 10^6 > -1 / z:
                            revert with 0, 17
                        if s == -1:
                            revert with 0, 17
                        if uint8(stor5[address(arg1)][idx].field_1280) > 2:
                            revert with 0, 33
                        mem[0] = uint8(stor5[address(arg1)][idx].field_1280)
                        mem[32] = 8
                        s = s + 1
                        t = stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0 - _1753 / sub_9b28d1a7 != y - _1753 / sub_9b28d1a7
                        u = (stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) - (y * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) / 8760 * 24 * 3600
                        v = stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0 - y
                        w = w + ((stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) - (y * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) / 8760 * 24 * 3600)
                        x = stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0
                        y = stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0
                        z = (100 * 10^6 * z) - (stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_256 * z) / 100 * 10^6
                        continue 
                    if y < _1753:
                        revert with 0, 17
                    if not sub_9b28d1a7:
                        revert with 0, 18
                    if 1 > !(y - _1753 / sub_9b28d1a7):
                        revert with 0, 17
                    if sub_9b28d1a7 and (y - _1753 / sub_9b28d1a7) + 1 > -1 / sub_9b28d1a7:
                        revert with 0, 17
                    if _1753 > !(sub_9b28d1a7 + (y - _1753 / sub_9b28d1a7 * sub_9b28d1a7)):
                        revert with 0, 17
                    if _1753 + sub_9b28d1a7 + (y - _1753 / sub_9b28d1a7 * sub_9b28d1a7) < y:
                        revert with 0, 17
                    if stor5[address(arg1)][idx].field_1024 and z > -1 / stor5[address(arg1)][idx].field_1024:
                        revert with 0, 17
                    if stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6 and _1753 + sub_9b28d1a7 + (y - _1753 / sub_9b28d1a7 * sub_9b28d1a7) - y > -1 / stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6:
                        revert with 0, 17
                    if w > !((_1753 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) + (sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) + (y - _1753 / sub_9b28d1a7 * sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) - (y * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) / 8760 * 24 * 3600):
                        revert with 0, 17
                    if stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0 - _1753 / sub_9b28d1a7 != y - _1753 / sub_9b28d1a7:
                        if 100 * 10^6 < sub_93520a80 - 0x8000000000000000000000000000000000000000000000000000000000000000 and sub_93520a80 >= 0:
                            revert with 0, 17
                        if sub_93520a80 < 0 and 100 * 10^6 > sub_93520a80 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                            revert with 0, 17
                        if z and -sub_93520a80 + 100 * 10^6 > -1 / z:
                            revert with 0, 17
                        if not s:
                            revert with 0, 17
                        if s - 1 == -1:
                            revert with 0, 17
                        if uint8(stor5[address(arg1)][idx].field_1280) > 2:
                            revert with 0, 33
                        mem[0] = uint8(stor5[address(arg1)][idx].field_1280)
                        mem[32] = 8
                        s = s
                        t = stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0 - _1753 / sub_9b28d1a7 != y - _1753 / sub_9b28d1a7
                        u = (_1753 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) + (sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) + (y - _1753 / sub_9b28d1a7 * sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) - (y * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) / 8760 * 24 * 3600
                        v = _1753 + sub_9b28d1a7 + (y - _1753 / sub_9b28d1a7 * sub_9b28d1a7) - y
                        w = w + ((_1753 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) + (sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) + (y - _1753 / sub_9b28d1a7 * sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) - (y * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) / 8760 * 24 * 3600)
                        x = _1753 + sub_9b28d1a7 + (y - _1753 / sub_9b28d1a7 * sub_9b28d1a7)
                        y = _1753 + sub_9b28d1a7 + (y - _1753 / sub_9b28d1a7 * sub_9b28d1a7)
                        z = (100 * 10^6 * z) - (sub_93520a80 * z) / 100 * 10^6
                        continue 
                    if uint8(stor5[address(arg1)][idx].field_1280) > 2:
                        revert with 0, 33
                    if s >= stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0:
                        revert with 0, 50
                    if 100 * 10^6 < stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_256 - 0x8000000000000000000000000000000000000000000000000000000000000000 and stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_256 >= 0:
                        revert with 0, 17
                    if stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_256 < 0 and 100 * 10^6 > stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_256 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                        revert with 0, 17
                    if z and -stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_256 + 100 * 10^6 > -1 / z:
                        revert with 0, 17
                    if s == -1:
                        revert with 0, 17
                    if uint8(stor5[address(arg1)][idx].field_1280) > 2:
                        revert with 0, 33
                    mem[0] = uint8(stor5[address(arg1)][idx].field_1280)
                    mem[32] = 8
                    s = s + 1
                    t = stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0 - _1753 / sub_9b28d1a7 != y - _1753 / sub_9b28d1a7
                    u = (_1753 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) + (sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) + (y - _1753 / sub_9b28d1a7 * sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) - (y * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) / 8760 * 24 * 3600
                    v = _1753 + sub_9b28d1a7 + (y - _1753 / sub_9b28d1a7 * sub_9b28d1a7) - y
                    w = w + ((_1753 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) + (sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) + (y - _1753 / sub_9b28d1a7 * sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) - (y * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) / 8760 * 24 * 3600)
                    x = _1753 + sub_9b28d1a7 + (y - _1753 / sub_9b28d1a7 * sub_9b28d1a7)
                    y = _1753 + sub_9b28d1a7 + (y - _1753 / sub_9b28d1a7 * sub_9b28d1a7)
                    z = (100 * 10^6 * z) - (stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_256 * z) / 100 * 10^6
                    continue 
                a = t
                a = u
                a = v
                a = w
                b = x
                s = y
                b = z
                while s != block.timestamp:
                    if s < _1753:
                        revert with 0, 17
                    if not sub_9b28d1a7:
                        revert with 0, 18
                    if block.timestamp < _1753:
                        revert with 0, 17
                    if not sub_9b28d1a7:
                        revert with 0, 18
                    if block.timestamp - _1753 / sub_9b28d1a7 == s - _1753 / sub_9b28d1a7:
                        if block.timestamp < s:
                            revert with 0, 17
                        if stor5[address(arg1)][idx].field_1024 and b > -1 / stor5[address(arg1)][idx].field_1024:
                            revert with 0, 17
                        if stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6 and block.timestamp - s > -1 / stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6:
                            revert with 0, 17
                        if a > !((block.timestamp * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) - (s * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) / 8760 * 24 * 3600):
                            revert with 0, 17
                        if block.timestamp - _1753 / sub_9b28d1a7 == s - _1753 / sub_9b28d1a7:
                            a = block.timestamp - _1753 / sub_9b28d1a7 != s - _1753 / sub_9b28d1a7
                            a = (block.timestamp * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) - (s * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) / 8760 * 24 * 3600
                            a = block.timestamp - s
                            a = a + ((block.timestamp * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) - (s * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) / 8760 * 24 * 3600)
                            b = block.timestamp
                            s = block.timestamp
                            b = b
                            continue 
                        if 100 * 10^6 < sub_93520a80 - 0x8000000000000000000000000000000000000000000000000000000000000000 and sub_93520a80 >= 0:
                            revert with 0, 17
                        if sub_93520a80 < 0 and 100 * 10^6 > sub_93520a80 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                            revert with 0, 17
                        if b and -sub_93520a80 + 100 * 10^6 > -1 / b:
                            revert with 0, 17
                        a = block.timestamp - _1753 / sub_9b28d1a7 != s - _1753 / sub_9b28d1a7
                        a = (block.timestamp * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) - (s * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) / 8760 * 24 * 3600
                        a = block.timestamp - s
                        a = a + ((block.timestamp * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) - (s * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) / 8760 * 24 * 3600)
                        b = block.timestamp
                        s = block.timestamp
                        b = (100 * 10^6 * b) - (sub_93520a80 * b) / 100 * 10^6
                        continue 
                    if s < _1753:
                        revert with 0, 17
                    if not sub_9b28d1a7:
                        revert with 0, 18
                    if 1 > !(s - _1753 / sub_9b28d1a7):
                        revert with 0, 17
                    if sub_9b28d1a7 and (s - _1753 / sub_9b28d1a7) + 1 > -1 / sub_9b28d1a7:
                        revert with 0, 17
                    if _1753 > !(sub_9b28d1a7 + (s - _1753 / sub_9b28d1a7 * sub_9b28d1a7)):
                        revert with 0, 17
                    if _1753 + sub_9b28d1a7 + (s - _1753 / sub_9b28d1a7 * sub_9b28d1a7) < s:
                        revert with 0, 17
                    if stor5[address(arg1)][idx].field_1024 and b > -1 / stor5[address(arg1)][idx].field_1024:
                        revert with 0, 17
                    if stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6 and _1753 + sub_9b28d1a7 + (s - _1753 / sub_9b28d1a7 * sub_9b28d1a7) - s > -1 / stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6:
                        revert with 0, 17
                    if a > !((_1753 * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) + (sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) + (s - _1753 / sub_9b28d1a7 * sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) - (s * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) / 8760 * 24 * 3600):
                        revert with 0, 17
                    if block.timestamp - _1753 / sub_9b28d1a7 == s - _1753 / sub_9b28d1a7:
                        a = block.timestamp - _1753 / sub_9b28d1a7 != s - _1753 / sub_9b28d1a7
                        a = (_1753 * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) + (sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) + (s - _1753 / sub_9b28d1a7 * sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) - (s * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) / 8760 * 24 * 3600
                        a = _1753 + sub_9b28d1a7 + (s - _1753 / sub_9b28d1a7 * sub_9b28d1a7) - s
                        a = a + ((_1753 * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) + (sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) + (s - _1753 / sub_9b28d1a7 * sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) - (s * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) / 8760 * 24 * 3600)
                        b = _1753 + sub_9b28d1a7 + (s - _1753 / sub_9b28d1a7 * sub_9b28d1a7)
                        s = _1753 + sub_9b28d1a7 + (s - _1753 / sub_9b28d1a7 * sub_9b28d1a7)
                        b = b
                        continue 
                    if 100 * 10^6 < sub_93520a80 - 0x8000000000000000000000000000000000000000000000000000000000000000 and sub_93520a80 >= 0:
                        revert with 0, 17
                    if sub_93520a80 < 0 and 100 * 10^6 > sub_93520a80 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                        revert with 0, 17
                    if b and -sub_93520a80 + 100 * 10^6 > -1 / b:
                        revert with 0, 17
                    a = block.timestamp - _1753 / sub_9b28d1a7 != s - _1753 / sub_9b28d1a7
                    a = (_1753 * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) + (sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) + (s - _1753 / sub_9b28d1a7 * sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) - (s * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) / 8760 * 24 * 3600
                    a = _1753 + sub_9b28d1a7 + (s - _1753 / sub_9b28d1a7 * sub_9b28d1a7) - s
                    a = a + ((_1753 * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) + (sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) + (s - _1753 / sub_9b28d1a7 * sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) - (s * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) / 8760 * 24 * 3600)
                    b = _1753 + sub_9b28d1a7 + (s - _1753 / sub_9b28d1a7 * sub_9b28d1a7)
                    s = _1753 + sub_9b28d1a7 + (s - _1753 / sub_9b28d1a7 * sub_9b28d1a7)
                    b = (100 * 10^6 * b) - (sub_93520a80 * b) / 100 * 10^6
                    continue 
                if 0 > !a:
                    revert with 0, 17
                stor5[address(arg1)][idx].field_512 = block.timestamp
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                s = (6 * idx) + sha3(sha3(address(arg1), 5))
                continue 
            mem[0] = (6 * idx) + sha3(sha3(address(arg1), 5))
            mem[_637 + 32] = stor5[address(arg1)][idx].field_0
            s = _637 + 32
            t = sha3(mem[0])
            while _637 + (uint255(stor5[address(arg1)][idx].field_0) * 0.5) > s:
                mem[s + 32] = uint256(stor1[t])
                s = s + 32
                t = t + 1
                continue 
            mem[_633] = _637
            mem[_633 + 32] = stor5[address(arg1)][idx].field_256
            mem[_633 + 64] = stor5[address(arg1)][idx].field_512
            mem[_633 + 96] = stor5[address(arg1)][idx].field_768
            mem[_633 + 128] = stor5[address(arg1)][idx].field_1024
            if uint8(stor5[address(arg1)][idx].field_1280) > 2:
                revert with 0, 33
            mem[_633 + 160] = uint8(stor5[address(arg1)][idx].field_1280)
            if uint8(stor5[address(arg1)][idx].field_1280) > 2:
                revert with 0, 33
            mem[32] = 8
            s = 0
            while stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0 > s:
                if s > !stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0:
                    revert with 0, 17
                if uint8(stor5[address(arg1)][idx].field_1280) > 2:
                    revert with 0, 33
                mem[32] = 8
                if s + stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0 / 2 >= stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0:
                    revert with 0, 50
                mem[0] = sha3(uint8(stor5[address(arg1)][idx].field_1280), 8)
                if stor8[uint8(stor5[address(arg1)][idx].field_1280)][Mask(255, 1, s + stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0)].field_0 >= stor5[address(arg1)][idx].field_512:
                    s = s
                    continue 
                if 1 > !(s + stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0 / 2):
                    revert with 0, 17
                s = (s + stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0 / 2) + 1
                continue 
            _1232 = mem[_633 + 32]
            if uint8(stor5[address(arg1)][idx].field_1280) > 2:
                revert with 0, 33
            s = 0
            while stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0 > s:
                if s > !stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0:
                    revert with 0, 17
                if uint8(stor5[address(arg1)][idx].field_1280) > 2:
                    revert with 0, 33
                mem[32] = 8
                if s + stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0 / 2 >= stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0:
                    revert with 0, 50
                mem[0] = sha3(uint8(stor5[address(arg1)][idx].field_1280), 8)
                if stor8[uint8(stor5[address(arg1)][idx].field_1280)][Mask(255, 1, s + stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0)].field_0 >= _1232:
                    s = s
                    continue 
                if 1 > !(s + stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0 / 2):
                    revert with 0, 17
                s = (s + stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0 / 2) + 1
                continue 
            if uint8(stor5[address(arg1)][idx].field_1280) > 2:
                revert with 0, 33
            mem[32] = 8
            t = 0
            while stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0 > t:
                if t > !stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0:
                    revert with 0, 17
                if uint8(stor5[address(arg1)][idx].field_1280) > 2:
                    revert with 0, 33
                mem[32] = 8
                if t + stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0 / 2 >= stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0:
                    revert with 0, 50
                mem[0] = sha3(uint8(stor5[address(arg1)][idx].field_1280), 8)
                if stor8[uint8(stor5[address(arg1)][idx].field_1280)][Mask(255, 1, t + stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0)].field_0 >= stor5[address(arg1)][idx].field_512:
                    t = t
                    continue 
                if 1 > !(t + stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0 / 2):
                    revert with 0, 17
                t = (t + stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0 / 2) + 1
                continue 
            u = s
            v = stor5[address(arg1)][u].field_768
            while u < t:
                if uint8(stor5[address(arg1)][u].field_1280) > 2:
                    revert with 0, 33
                mem[32] = 8
                if u >= stor8[uint8(stor5[address(arg1)][u].field_1280)].field_0:
                    revert with 0, 50
                mem[0] = sha3(uint8(stor5[address(arg1)][u].field_1280), 8)
                if 100 * 10^6 < stor8[uint8(stor5[address(arg1)][u].field_1280)][u].field_256 - 0x8000000000000000000000000000000000000000000000000000000000000000 and stor8[uint8(stor5[address(arg1)][u].field_1280)][u].field_256 >= 0:
                    revert with 0, 17
                if stor8[uint8(stor5[address(arg1)][u].field_1280)][u].field_256 < 0 and 100 * 10^6 > stor8[uint8(stor5[address(arg1)][u].field_1280)][u].field_256 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                    revert with 0, 17
                if v and -stor8[uint8(stor5[address(arg1)][u].field_1280)][u].field_256 + 100 * 10^6 > -1 / v:
                    revert with 0, 17
                if u == -1:
                    revert with 0, 17
                u = u + 1
                v = (100 * 10^6 * v) - (stor8[uint8(stor5[address(arg1)][u].field_1280)][u].field_256 * v) / 100 * 10^6
                continue 
            if stor5[address(arg1)][u].field_512 < _1232:
                revert with 0, 17
            if not sub_9b28d1a7:
                revert with 0, 18
            idx = stor5[address(arg1)][u].field_512 - _1232 / sub_9b28d1a7
            s = v
            while idx:
                if not idx:
                    revert with 0, 17
                if 100 * 10^6 < sub_93520a80 - 0x8000000000000000000000000000000000000000000000000000000000000000 and sub_93520a80 >= 0:
                    revert with 0, 17
                if sub_93520a80 < 0 and 100 * 10^6 > sub_93520a80 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                    revert with 0, 17
                if s and -sub_93520a80 + 100 * 10^6 > -1 / s:
                    revert with 0, 17
                idx = idx - 1
                s = (100 * 10^6 * s) - (sub_93520a80 * s) / 100 * 10^6
                continue 
            _1868 = mem[_633 + 32]
            if uint8(stor5[address(arg1)][u].field_1280) > 2:
                revert with 0, 33
            mem[0] = uint8(stor5[address(arg1)][u].field_1280)
            mem[32] = 8
            s = var159001
            t = var159002
            v = var159004
            w = var159005
            x = var159006
            y = var159007
            z = var159008
            a = var159009
            while s < stor8[uint8(stor5[address(arg1)][u].field_1280)].field_0:
                if uint8(stor5[address(arg1)][u].field_1280) > 2:
                    revert with 0, 33
                if s >= stor8[uint8(stor5[address(arg1)][u].field_1280)].field_0:
                    revert with 0, 50
                if z < _1868:
                    revert with 0, 17
                if not sub_9b28d1a7:
                    revert with 0, 18
                if stor8[uint8(stor5[address(arg1)][u].field_1280)][s].field_0 < _1868:
                    revert with 0, 17
                if not sub_9b28d1a7:
                    revert with 0, 18
                if stor8[uint8(stor5[address(arg1)][u].field_1280)][s].field_0 - _1868 / sub_9b28d1a7 == z - _1868 / sub_9b28d1a7:
                    if stor8[uint8(stor5[address(arg1)][u].field_1280)][s].field_0 < z:
                        revert with 0, 17
                    if stor5[address(arg1)][u].field_1024 and a > -1 / stor5[address(arg1)][u].field_1024:
                        revert with 0, 17
                    if stor5[address(arg1)][u].field_1024 * a / 100 * 10^6 and stor8[uint8(stor5[address(arg1)][u].field_1280)][s].field_0 - z > -1 / stor5[address(arg1)][u].field_1024 * a / 100 * 10^6:
                        revert with 0, 17
                    if x > !((stor8[uint8(stor5[address(arg1)][u].field_1280)][s].field_0 * stor5[address(arg1)][u].field_1024 * a / 100 * 10^6) - (z * stor5[address(arg1)][u].field_1024 * a / 100 * 10^6) / 8760 * 24 * 3600):
                        revert with 0, 17
                    if stor8[uint8(stor5[address(arg1)][u].field_1280)][s].field_0 - _1868 / sub_9b28d1a7 != z - _1868 / sub_9b28d1a7:
                        if 100 * 10^6 < sub_93520a80 - 0x8000000000000000000000000000000000000000000000000000000000000000 and sub_93520a80 >= 0:
                            revert with 0, 17
                        if sub_93520a80 < 0 and 100 * 10^6 > sub_93520a80 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                            revert with 0, 17
                        if a and -sub_93520a80 + 100 * 10^6 > -1 / a:
                            revert with 0, 17
                        if not s:
                            revert with 0, 17
                        if s - 1 == -1:
                            revert with 0, 17
                        if uint8(stor5[address(arg1)][u].field_1280) > 2:
                            revert with 0, 33
                        mem[0] = uint8(stor5[address(arg1)][u].field_1280)
                        mem[32] = 8
                        s = s
                        t = stor8[uint8(stor5[address(arg1)][u].field_1280)][s].field_0 - _1868 / sub_9b28d1a7 != z - _1868 / sub_9b28d1a7
                        v = (stor8[uint8(stor5[address(arg1)][u].field_1280)][s].field_0 * stor5[address(arg1)][u].field_1024 * a / 100 * 10^6) - (z * stor5[address(arg1)][u].field_1024 * a / 100 * 10^6) / 8760 * 24 * 3600
                        w = stor8[uint8(stor5[address(arg1)][u].field_1280)][s].field_0 - z
                        x = x + ((stor8[uint8(stor5[address(arg1)][u].field_1280)][s].field_0 * stor5[address(arg1)][u].field_1024 * a / 100 * 10^6) - (z * stor5[address(arg1)][u].field_1024 * a / 100 * 10^6) / 8760 * 24 * 3600)
                        y = stor8[uint8(stor5[address(arg1)][u].field_1280)][s].field_0
                        z = stor8[uint8(stor5[address(arg1)][u].field_1280)][s].field_0
                        a = (100 * 10^6 * a) - (sub_93520a80 * a) / 100 * 10^6
                        continue 
                    if uint8(stor5[address(arg1)][u].field_1280) > 2:
                        revert with 0, 33
                    if s >= stor8[uint8(stor5[address(arg1)][u].field_1280)].field_0:
                        revert with 0, 50
                    if 100 * 10^6 < stor8[uint8(stor5[address(arg1)][u].field_1280)][s].field_256 - 0x8000000000000000000000000000000000000000000000000000000000000000 and stor8[uint8(stor5[address(arg1)][u].field_1280)][s].field_256 >= 0:
                        revert with 0, 17
                    if stor8[uint8(stor5[address(arg1)][u].field_1280)][s].field_256 < 0 and 100 * 10^6 > stor8[uint8(stor5[address(arg1)][u].field_1280)][s].field_256 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                        revert with 0, 17
                    if a and -stor8[uint8(stor5[address(arg1)][u].field_1280)][s].field_256 + 100 * 10^6 > -1 / a:
                        revert with 0, 17
                    if s == -1:
                        revert with 0, 17
                    if uint8(stor5[address(arg1)][u].field_1280) > 2:
                        revert with 0, 33
                    mem[0] = uint8(stor5[address(arg1)][u].field_1280)
                    mem[32] = 8
                    s = s + 1
                    t = stor8[uint8(stor5[address(arg1)][u].field_1280)][s].field_0 - _1868 / sub_9b28d1a7 != z - _1868 / sub_9b28d1a7
                    v = (stor8[uint8(stor5[address(arg1)][u].field_1280)][s].field_0 * stor5[address(arg1)][u].field_1024 * a / 100 * 10^6) - (z * stor5[address(arg1)][u].field_1024 * a / 100 * 10^6) / 8760 * 24 * 3600
                    w = stor8[uint8(stor5[address(arg1)][u].field_1280)][s].field_0 - z
                    x = x + ((stor8[uint8(stor5[address(arg1)][u].field_1280)][s].field_0 * stor5[address(arg1)][u].field_1024 * a / 100 * 10^6) - (z * stor5[address(arg1)][u].field_1024 * a / 100 * 10^6) / 8760 * 24 * 3600)
                    y = stor8[uint8(stor5[address(arg1)][u].field_1280)][s].field_0
                    z = stor8[uint8(stor5[address(arg1)][u].field_1280)][s].field_0
                    a = (100 * 10^6 * a) - (stor8[uint8(stor5[address(arg1)][u].field_1280)][s].field_256 * a) / 100 * 10^6
                    continue 
                if z < _1868:
                    revert with 0, 17
                if not sub_9b28d1a7:
                    revert with 0, 18
                if 1 > !(z - _1868 / sub_9b28d1a7):
                    revert with 0, 17
                if sub_9b28d1a7 and (z - _1868 / sub_9b28d1a7) + 1 > -1 / sub_9b28d1a7:
                    revert with 0, 17
                if _1868 > !(sub_9b28d1a7 + (z - _1868 / sub_9b28d1a7 * sub_9b28d1a7)):
                    revert with 0, 17
                if _1868 + sub_9b28d1a7 + (z - _1868 / sub_9b28d1a7 * sub_9b28d1a7) < z:
                    revert with 0, 17
                if stor5[address(arg1)][u].field_1024 and a > -1 / stor5[address(arg1)][u].field_1024:
                    revert with 0, 17
                if stor5[address(arg1)][u].field_1024 * a / 100 * 10^6 and _1868 + sub_9b28d1a7 + (z - _1868 / sub_9b28d1a7 * sub_9b28d1a7) - z > -1 / stor5[address(arg1)][u].field_1024 * a / 100 * 10^6:
                    revert with 0, 17
                if x > !((_1868 * stor5[address(arg1)][u].field_1024 * a / 100 * 10^6) + (sub_9b28d1a7 * stor5[address(arg1)][u].field_1024 * a / 100 * 10^6) + (z - _1868 / sub_9b28d1a7 * sub_9b28d1a7 * stor5[address(arg1)][u].field_1024 * a / 100 * 10^6) - (z * stor5[address(arg1)][u].field_1024 * a / 100 * 10^6) / 8760 * 24 * 3600):
                    revert with 0, 17
                if stor8[uint8(stor5[address(arg1)][u].field_1280)][s].field_0 - _1868 / sub_9b28d1a7 != z - _1868 / sub_9b28d1a7:
                    if 100 * 10^6 < sub_93520a80 - 0x8000000000000000000000000000000000000000000000000000000000000000 and sub_93520a80 >= 0:
                        revert with 0, 17
                    if sub_93520a80 < 0 and 100 * 10^6 > sub_93520a80 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                        revert with 0, 17
                    if a and -sub_93520a80 + 100 * 10^6 > -1 / a:
                        revert with 0, 17
                    if not s:
                        revert with 0, 17
                    if s - 1 == -1:
                        revert with 0, 17
                    if uint8(stor5[address(arg1)][u].field_1280) > 2:
                        revert with 0, 33
                    mem[0] = uint8(stor5[address(arg1)][u].field_1280)
                    mem[32] = 8
                    s = s
                    t = stor8[uint8(stor5[address(arg1)][u].field_1280)][s].field_0 - _1868 / sub_9b28d1a7 != z - _1868 / sub_9b28d1a7
                    v = (_1868 * stor5[address(arg1)][u].field_1024 * a / 100 * 10^6) + (sub_9b28d1a7 * stor5[address(arg1)][u].field_1024 * a / 100 * 10^6) + (z - _1868 / sub_9b28d1a7 * sub_9b28d1a7 * stor5[address(arg1)][u].field_1024 * a / 100 * 10^6) - (z * stor5[address(arg1)][u].field_1024 * a / 100 * 10^6) / 8760 * 24 * 3600
                    w = _1868 + sub_9b28d1a7 + (z - _1868 / sub_9b28d1a7 * sub_9b28d1a7) - z
                    x = x + ((_1868 * stor5[address(arg1)][u].field_1024 * a / 100 * 10^6) + (sub_9b28d1a7 * stor5[address(arg1)][u].field_1024 * a / 100 * 10^6) + (z - _1868 / sub_9b28d1a7 * sub_9b28d1a7 * stor5[address(arg1)][u].field_1024 * a / 100 * 10^6) - (z * stor5[address(arg1)][u].field_1024 * a / 100 * 10^6) / 8760 * 24 * 3600)
                    y = _1868 + sub_9b28d1a7 + (z - _1868 / sub_9b28d1a7 * sub_9b28d1a7)
                    z = _1868 + sub_9b28d1a7 + (z - _1868 / sub_9b28d1a7 * sub_9b28d1a7)
                    a = (100 * 10^6 * a) - (sub_93520a80 * a) / 100 * 10^6
                    continue 
                if uint8(stor5[address(arg1)][u].field_1280) > 2:
                    revert with 0, 33
                if s >= stor8[uint8(stor5[address(arg1)][u].field_1280)].field_0:
                    revert with 0, 50
                if 100 * 10^6 < stor8[uint8(stor5[address(arg1)][u].field_1280)][s].field_256 - 0x8000000000000000000000000000000000000000000000000000000000000000 and stor8[uint8(stor5[address(arg1)][u].field_1280)][s].field_256 >= 0:
                    revert with 0, 17
                if stor8[uint8(stor5[address(arg1)][u].field_1280)][s].field_256 < 0 and 100 * 10^6 > stor8[uint8(stor5[address(arg1)][u].field_1280)][s].field_256 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                    revert with 0, 17
                if a and -stor8[uint8(stor5[address(arg1)][u].field_1280)][s].field_256 + 100 * 10^6 > -1 / a:
                    revert with 0, 17
                if s == -1:
                    revert with 0, 17
                if uint8(stor5[address(arg1)][u].field_1280) > 2:
                    revert with 0, 33
                mem[0] = uint8(stor5[address(arg1)][u].field_1280)
                mem[32] = 8
                s = s + 1
                t = stor8[uint8(stor5[address(arg1)][u].field_1280)][s].field_0 - _1868 / sub_9b28d1a7 != z - _1868 / sub_9b28d1a7
                v = (_1868 * stor5[address(arg1)][u].field_1024 * a / 100 * 10^6) + (sub_9b28d1a7 * stor5[address(arg1)][u].field_1024 * a / 100 * 10^6) + (z - _1868 / sub_9b28d1a7 * sub_9b28d1a7 * stor5[address(arg1)][u].field_1024 * a / 100 * 10^6) - (z * stor5[address(arg1)][u].field_1024 * a / 100 * 10^6) / 8760 * 24 * 3600
                w = _1868 + sub_9b28d1a7 + (z - _1868 / sub_9b28d1a7 * sub_9b28d1a7) - z
                x = x + ((_1868 * stor5[address(arg1)][u].field_1024 * a / 100 * 10^6) + (sub_9b28d1a7 * stor5[address(arg1)][u].field_1024 * a / 100 * 10^6) + (z - _1868 / sub_9b28d1a7 * sub_9b28d1a7 * stor5[address(arg1)][u].field_1024 * a / 100 * 10^6) - (z * stor5[address(arg1)][u].field_1024 * a / 100 * 10^6) / 8760 * 24 * 3600)
                y = _1868 + sub_9b28d1a7 + (z - _1868 / sub_9b28d1a7 * sub_9b28d1a7)
                z = _1868 + sub_9b28d1a7 + (z - _1868 / sub_9b28d1a7 * sub_9b28d1a7)
                a = (100 * 10^6 * a) - (stor8[uint8(stor5[address(arg1)][u].field_1280)][s].field_256 * a) / 100 * 10^6
                continue 
            s = t
            s = v
            s = w
            s = x
            b = y
            idx = z
            b = a
            while idx != block.timestamp:
                if idx < _1868:
                    revert with 0, 17
                if not sub_9b28d1a7:
                    revert with 0, 18
                if block.timestamp < _1868:
                    revert with 0, 17
                if not sub_9b28d1a7:
                    revert with 0, 18
                if block.timestamp - _1868 / sub_9b28d1a7 == idx - _1868 / sub_9b28d1a7:
                    if block.timestamp < idx:
                        revert with 0, 17
                    if stor5[address(arg1)][u].field_1024 and b > -1 / stor5[address(arg1)][u].field_1024:
                        revert with 0, 17
                    if stor5[address(arg1)][u].field_1024 * b / 100 * 10^6 and block.timestamp - idx > -1 / stor5[address(arg1)][u].field_1024 * b / 100 * 10^6:
                        revert with 0, 17
                    if s > !((block.timestamp * stor5[address(arg1)][u].field_1024 * b / 100 * 10^6) - (idx * stor5[address(arg1)][u].field_1024 * b / 100 * 10^6) / 8760 * 24 * 3600):
                        revert with 0, 17
                    if block.timestamp - _1868 / sub_9b28d1a7 == idx - _1868 / sub_9b28d1a7:
                        s = block.timestamp - _1868 / sub_9b28d1a7 != idx - _1868 / sub_9b28d1a7
                        s = (block.timestamp * stor5[address(arg1)][u].field_1024 * b / 100 * 10^6) - (idx * stor5[address(arg1)][u].field_1024 * b / 100 * 10^6) / 8760 * 24 * 3600
                        s = block.timestamp - idx
                        s = s + ((block.timestamp * stor5[address(arg1)][u].field_1024 * b / 100 * 10^6) - (idx * stor5[address(arg1)][u].field_1024 * b / 100 * 10^6) / 8760 * 24 * 3600)
                        b = block.timestamp
                        idx = block.timestamp
                        b = b
                        continue 
                    if 100 * 10^6 < sub_93520a80 - 0x8000000000000000000000000000000000000000000000000000000000000000 and sub_93520a80 >= 0:
                        revert with 0, 17
                    if sub_93520a80 < 0 and 100 * 10^6 > sub_93520a80 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                        revert with 0, 17
                    if b and -sub_93520a80 + 100 * 10^6 > -1 / b:
                        revert with 0, 17
                    s = block.timestamp - _1868 / sub_9b28d1a7 != idx - _1868 / sub_9b28d1a7
                    s = (block.timestamp * stor5[address(arg1)][u].field_1024 * b / 100 * 10^6) - (idx * stor5[address(arg1)][u].field_1024 * b / 100 * 10^6) / 8760 * 24 * 3600
                    s = block.timestamp - idx
                    s = s + ((block.timestamp * stor5[address(arg1)][u].field_1024 * b / 100 * 10^6) - (idx * stor5[address(arg1)][u].field_1024 * b / 100 * 10^6) / 8760 * 24 * 3600)
                    b = block.timestamp
                    idx = block.timestamp
                    b = (100 * 10^6 * b) - (sub_93520a80 * b) / 100 * 10^6
                    continue 
                if idx < _1868:
                    revert with 0, 17
                if not sub_9b28d1a7:
                    revert with 0, 18
                if 1 > !(idx - _1868 / sub_9b28d1a7):
                    revert with 0, 17
                if sub_9b28d1a7 and (idx - _1868 / sub_9b28d1a7) + 1 > -1 / sub_9b28d1a7:
                    revert with 0, 17
                if _1868 > !(sub_9b28d1a7 + (idx - _1868 / sub_9b28d1a7 * sub_9b28d1a7)):
                    revert with 0, 17
                if _1868 + sub_9b28d1a7 + (idx - _1868 / sub_9b28d1a7 * sub_9b28d1a7) < idx:
                    revert with 0, 17
                if stor5[address(arg1)][u].field_1024 and b > -1 / stor5[address(arg1)][u].field_1024:
                    revert with 0, 17
                if stor5[address(arg1)][u].field_1024 * b / 100 * 10^6 and _1868 + sub_9b28d1a7 + (idx - _1868 / sub_9b28d1a7 * sub_9b28d1a7) - idx > -1 / stor5[address(arg1)][u].field_1024 * b / 100 * 10^6:
                    revert with 0, 17
                if s > !((_1868 * stor5[address(arg1)][u].field_1024 * b / 100 * 10^6) + (sub_9b28d1a7 * stor5[address(arg1)][u].field_1024 * b / 100 * 10^6) + (idx - _1868 / sub_9b28d1a7 * sub_9b28d1a7 * stor5[address(arg1)][u].field_1024 * b / 100 * 10^6) - (idx * stor5[address(arg1)][u].field_1024 * b / 100 * 10^6) / 8760 * 24 * 3600):
                    revert with 0, 17
                if block.timestamp - _1868 / sub_9b28d1a7 == idx - _1868 / sub_9b28d1a7:
                    s = block.timestamp - _1868 / sub_9b28d1a7 != idx - _1868 / sub_9b28d1a7
                    s = (_1868 * stor5[address(arg1)][u].field_1024 * b / 100 * 10^6) + (sub_9b28d1a7 * stor5[address(arg1)][u].field_1024 * b / 100 * 10^6) + (idx - _1868 / sub_9b28d1a7 * sub_9b28d1a7 * stor5[address(arg1)][u].field_1024 * b / 100 * 10^6) - (idx * stor5[address(arg1)][u].field_1024 * b / 100 * 10^6) / 8760 * 24 * 3600
                    s = _1868 + sub_9b28d1a7 + (idx - _1868 / sub_9b28d1a7 * sub_9b28d1a7) - idx
                    s = s + ((_1868 * stor5[address(arg1)][u].field_1024 * b / 100 * 10^6) + (sub_9b28d1a7 * stor5[address(arg1)][u].field_1024 * b / 100 * 10^6) + (idx - _1868 / sub_9b28d1a7 * sub_9b28d1a7 * stor5[address(arg1)][u].field_1024 * b / 100 * 10^6) - (idx * stor5[address(arg1)][u].field_1024 * b / 100 * 10^6) / 8760 * 24 * 3600)
                    b = _1868 + sub_9b28d1a7 + (idx - _1868 / sub_9b28d1a7 * sub_9b28d1a7)
                    idx = _1868 + sub_9b28d1a7 + (idx - _1868 / sub_9b28d1a7 * sub_9b28d1a7)
                    b = b
                    continue 
                if 100 * 10^6 < sub_93520a80 - 0x8000000000000000000000000000000000000000000000000000000000000000 and sub_93520a80 >= 0:
                    revert with 0, 17
                if sub_93520a80 < 0 and 100 * 10^6 > sub_93520a80 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                    revert with 0, 17
                if b and -sub_93520a80 + 100 * 10^6 > -1 / b:
                    revert with 0, 17
                s = block.timestamp - _1868 / sub_9b28d1a7 != idx - _1868 / sub_9b28d1a7
                s = (_1868 * stor5[address(arg1)][u].field_1024 * b / 100 * 10^6) + (sub_9b28d1a7 * stor5[address(arg1)][u].field_1024 * b / 100 * 10^6) + (idx - _1868 / sub_9b28d1a7 * sub_9b28d1a7 * stor5[address(arg1)][u].field_1024 * b / 100 * 10^6) - (idx * stor5[address(arg1)][u].field_1024 * b / 100 * 10^6) / 8760 * 24 * 3600
                s = _1868 + sub_9b28d1a7 + (idx - _1868 / sub_9b28d1a7 * sub_9b28d1a7) - idx
                s = s + ((_1868 * stor5[address(arg1)][u].field_1024 * b / 100 * 10^6) + (sub_9b28d1a7 * stor5[address(arg1)][u].field_1024 * b / 100 * 10^6) + (idx - _1868 / sub_9b28d1a7 * sub_9b28d1a7 * stor5[address(arg1)][u].field_1024 * b / 100 * 10^6) - (idx * stor5[address(arg1)][u].field_1024 * b / 100 * 10^6) / 8760 * 24 * 3600)
                b = _1868 + sub_9b28d1a7 + (idx - _1868 / sub_9b28d1a7 * sub_9b28d1a7)
                idx = _1868 + sub_9b28d1a7 + (idx - _1868 / sub_9b28d1a7 * sub_9b28d1a7)
                b = (100 * 10^6 * b) - (sub_93520a80 * b) / 100 * 10^6
                continue 
            if 0 > !s:
                revert with 0, 17
            stor5[address(arg1)][u].field_512 = block.timestamp
            if u == -1:
                revert with 0, 17
            u = u + 1
            s = (6 * u) + sha3(sha3(address(arg1), 5))
            continue 
        if bool(stor5[address(arg1)][idx].field_0) == stor5[address(arg1)][idx].field_1 % 128 < 32:
            revert with 0, 34
        if not stor5[address(arg1)][idx].field_1 % 128:
            mem[_633] = _637
            mem[_633 + 32] = stor5[address(arg1)][idx].field_256
            mem[_633 + 64] = stor5[address(arg1)][idx].field_512
            mem[_633 + 96] = stor5[address(arg1)][idx].field_768
            mem[_633 + 128] = stor5[address(arg1)][idx].field_1024
            if uint8(stor5[address(arg1)][idx].field_1280) > 2:
                revert with 0, 33
            mem[_633 + 160] = uint8(stor5[address(arg1)][idx].field_1280)
            if uint8(stor5[address(arg1)][idx].field_1280) > 2:
                revert with 0, 33
            mem[32] = 8
            s = 0
            while stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0 > s:
                if s > !stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0:
                    revert with 0, 17
                if uint8(stor5[address(arg1)][idx].field_1280) > 2:
                    revert with 0, 33
                mem[32] = 8
                if s + stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0 / 2 >= stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0:
                    revert with 0, 50
                mem[0] = sha3(uint8(stor5[address(arg1)][idx].field_1280), 8)
                if stor8[uint8(stor5[address(arg1)][idx].field_1280)][Mask(255, 1, s + stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0)].field_0 >= stor5[address(arg1)][idx].field_512:
                    s = s
                    continue 
                if 1 > !(s + stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0 / 2):
                    revert with 0, 17
                s = (s + stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0 / 2) + 1
                continue 
            _976 = mem[_633 + 32]
            if uint8(stor5[address(arg1)][idx].field_1280) > 2:
                revert with 0, 33
            s = 0
            while stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0 > s:
                if s > !stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0:
                    revert with 0, 17
                if uint8(stor5[address(arg1)][idx].field_1280) > 2:
                    revert with 0, 33
                mem[32] = 8
                if s + stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0 / 2 >= stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0:
                    revert with 0, 50
                mem[0] = sha3(uint8(stor5[address(arg1)][idx].field_1280), 8)
                if stor8[uint8(stor5[address(arg1)][idx].field_1280)][Mask(255, 1, s + stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0)].field_0 >= _976:
                    s = s
                    continue 
                if 1 > !(s + stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0 / 2):
                    revert with 0, 17
                s = (s + stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0 / 2) + 1
                continue 
            if uint8(stor5[address(arg1)][idx].field_1280) > 2:
                revert with 0, 33
            mem[32] = 8
            t = 0
            while stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0 > t:
                if t > !stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0:
                    revert with 0, 17
                if uint8(stor5[address(arg1)][idx].field_1280) > 2:
                    revert with 0, 33
                mem[32] = 8
                if t + stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0 / 2 >= stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0:
                    revert with 0, 50
                mem[0] = sha3(uint8(stor5[address(arg1)][idx].field_1280), 8)
                if stor8[uint8(stor5[address(arg1)][idx].field_1280)][Mask(255, 1, t + stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0)].field_0 >= stor5[address(arg1)][idx].field_512:
                    t = t
                    continue 
                if 1 > !(t + stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0 / 2):
                    revert with 0, 17
                t = (t + stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0 / 2) + 1
                continue 
            u = s
            v = stor5[address(arg1)][idx].field_768
            while u < t:
                if uint8(stor5[address(arg1)][idx].field_1280) > 2:
                    revert with 0, 33
                mem[32] = 8
                if u >= stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0:
                    revert with 0, 50
                mem[0] = sha3(uint8(stor5[address(arg1)][idx].field_1280), 8)
                if 100 * 10^6 < stor8[uint8(stor5[address(arg1)][idx].field_1280)][u].field_256 - 0x8000000000000000000000000000000000000000000000000000000000000000 and stor8[uint8(stor5[address(arg1)][idx].field_1280)][u].field_256 >= 0:
                    revert with 0, 17
                if stor8[uint8(stor5[address(arg1)][idx].field_1280)][u].field_256 < 0 and 100 * 10^6 > stor8[uint8(stor5[address(arg1)][idx].field_1280)][u].field_256 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                    revert with 0, 17
                if v and -stor8[uint8(stor5[address(arg1)][idx].field_1280)][u].field_256 + 100 * 10^6 > -1 / v:
                    revert with 0, 17
                if u == -1:
                    revert with 0, 17
                u = u + 1
                v = (100 * 10^6 * v) - (stor8[uint8(stor5[address(arg1)][idx].field_1280)][u].field_256 * v) / 100 * 10^6
                continue 
            if stor5[address(arg1)][idx].field_512 < _976:
                revert with 0, 17
            if not sub_9b28d1a7:
                revert with 0, 18
            s = stor5[address(arg1)][idx].field_512 - _976 / sub_9b28d1a7
            t = v
            while s:
                if not s:
                    revert with 0, 17
                if 100 * 10^6 < sub_93520a80 - 0x8000000000000000000000000000000000000000000000000000000000000000 and sub_93520a80 >= 0:
                    revert with 0, 17
                if sub_93520a80 < 0 and 100 * 10^6 > sub_93520a80 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                    revert with 0, 17
                if t and -sub_93520a80 + 100 * 10^6 > -1 / t:
                    revert with 0, 17
                s = s - 1
                t = (100 * 10^6 * t) - (sub_93520a80 * t) / 100 * 10^6
                continue 
            _1755 = mem[_633 + 32]
            if uint8(stor5[address(arg1)][idx].field_1280) > 2:
                revert with 0, 33
            mem[0] = uint8(stor5[address(arg1)][idx].field_1280)
            mem[32] = 8
            s = var155001
            t = var155002
            u = var155004
            v = var155005
            w = var155006
            x = var155007
            y = var155008
            z = var155009
            while s < stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0:
                if uint8(stor5[address(arg1)][idx].field_1280) > 2:
                    revert with 0, 33
                if s >= stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0:
                    revert with 0, 50
                if y < _1755:
                    revert with 0, 17
                if not sub_9b28d1a7:
                    revert with 0, 18
                if stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0 < _1755:
                    revert with 0, 17
                if not sub_9b28d1a7:
                    revert with 0, 18
                if stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0 - _1755 / sub_9b28d1a7 == y - _1755 / sub_9b28d1a7:
                    if stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0 < y:
                        revert with 0, 17
                    if stor5[address(arg1)][idx].field_1024 and z > -1 / stor5[address(arg1)][idx].field_1024:
                        revert with 0, 17
                    if stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6 and stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0 - y > -1 / stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6:
                        revert with 0, 17
                    if w > !((stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) - (y * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) / 8760 * 24 * 3600):
                        revert with 0, 17
                    if stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0 - _1755 / sub_9b28d1a7 != y - _1755 / sub_9b28d1a7:
                        if 100 * 10^6 < sub_93520a80 - 0x8000000000000000000000000000000000000000000000000000000000000000 and sub_93520a80 >= 0:
                            revert with 0, 17
                        if sub_93520a80 < 0 and 100 * 10^6 > sub_93520a80 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                            revert with 0, 17
                        if z and -sub_93520a80 + 100 * 10^6 > -1 / z:
                            revert with 0, 17
                        if not s:
                            revert with 0, 17
                        if s - 1 == -1:
                            revert with 0, 17
                        if uint8(stor5[address(arg1)][idx].field_1280) > 2:
                            revert with 0, 33
                        mem[0] = uint8(stor5[address(arg1)][idx].field_1280)
                        mem[32] = 8
                        s = s
                        t = stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0 - _1755 / sub_9b28d1a7 != y - _1755 / sub_9b28d1a7
                        u = (stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) - (y * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) / 8760 * 24 * 3600
                        v = stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0 - y
                        w = w + ((stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) - (y * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) / 8760 * 24 * 3600)
                        x = stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0
                        y = stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0
                        z = (100 * 10^6 * z) - (sub_93520a80 * z) / 100 * 10^6
                        continue 
                    if uint8(stor5[address(arg1)][idx].field_1280) > 2:
                        revert with 0, 33
                    if s >= stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0:
                        revert with 0, 50
                    if 100 * 10^6 < stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_256 - 0x8000000000000000000000000000000000000000000000000000000000000000 and stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_256 >= 0:
                        revert with 0, 17
                    if stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_256 < 0 and 100 * 10^6 > stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_256 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                        revert with 0, 17
                    if z and -stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_256 + 100 * 10^6 > -1 / z:
                        revert with 0, 17
                    if s == -1:
                        revert with 0, 17
                    if uint8(stor5[address(arg1)][idx].field_1280) > 2:
                        revert with 0, 33
                    mem[0] = uint8(stor5[address(arg1)][idx].field_1280)
                    mem[32] = 8
                    s = s + 1
                    t = stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0 - _1755 / sub_9b28d1a7 != y - _1755 / sub_9b28d1a7
                    u = (stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) - (y * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) / 8760 * 24 * 3600
                    v = stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0 - y
                    w = w + ((stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) - (y * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) / 8760 * 24 * 3600)
                    x = stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0
                    y = stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0
                    z = (100 * 10^6 * z) - (stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_256 * z) / 100 * 10^6
                    continue 
                if y < _1755:
                    revert with 0, 17
                if not sub_9b28d1a7:
                    revert with 0, 18
                if 1 > !(y - _1755 / sub_9b28d1a7):
                    revert with 0, 17
                if sub_9b28d1a7 and (y - _1755 / sub_9b28d1a7) + 1 > -1 / sub_9b28d1a7:
                    revert with 0, 17
                if _1755 > !(sub_9b28d1a7 + (y - _1755 / sub_9b28d1a7 * sub_9b28d1a7)):
                    revert with 0, 17
                if _1755 + sub_9b28d1a7 + (y - _1755 / sub_9b28d1a7 * sub_9b28d1a7) < y:
                    revert with 0, 17
                if stor5[address(arg1)][idx].field_1024 and z > -1 / stor5[address(arg1)][idx].field_1024:
                    revert with 0, 17
                if stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6 and _1755 + sub_9b28d1a7 + (y - _1755 / sub_9b28d1a7 * sub_9b28d1a7) - y > -1 / stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6:
                    revert with 0, 17
                if w > !((_1755 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) + (sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) + (y - _1755 / sub_9b28d1a7 * sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) - (y * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) / 8760 * 24 * 3600):
                    revert with 0, 17
                if stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0 - _1755 / sub_9b28d1a7 != y - _1755 / sub_9b28d1a7:
                    if 100 * 10^6 < sub_93520a80 - 0x8000000000000000000000000000000000000000000000000000000000000000 and sub_93520a80 >= 0:
                        revert with 0, 17
                    if sub_93520a80 < 0 and 100 * 10^6 > sub_93520a80 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                        revert with 0, 17
                    if z and -sub_93520a80 + 100 * 10^6 > -1 / z:
                        revert with 0, 17
                    if not s:
                        revert with 0, 17
                    if s - 1 == -1:
                        revert with 0, 17
                    if uint8(stor5[address(arg1)][idx].field_1280) > 2:
                        revert with 0, 33
                    mem[0] = uint8(stor5[address(arg1)][idx].field_1280)
                    mem[32] = 8
                    s = s
                    t = stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0 - _1755 / sub_9b28d1a7 != y - _1755 / sub_9b28d1a7
                    u = (_1755 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) + (sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) + (y - _1755 / sub_9b28d1a7 * sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) - (y * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) / 8760 * 24 * 3600
                    v = _1755 + sub_9b28d1a7 + (y - _1755 / sub_9b28d1a7 * sub_9b28d1a7) - y
                    w = w + ((_1755 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) + (sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) + (y - _1755 / sub_9b28d1a7 * sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) - (y * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) / 8760 * 24 * 3600)
                    x = _1755 + sub_9b28d1a7 + (y - _1755 / sub_9b28d1a7 * sub_9b28d1a7)
                    y = _1755 + sub_9b28d1a7 + (y - _1755 / sub_9b28d1a7 * sub_9b28d1a7)
                    z = (100 * 10^6 * z) - (sub_93520a80 * z) / 100 * 10^6
                    continue 
                if uint8(stor5[address(arg1)][idx].field_1280) > 2:
                    revert with 0, 33
                if s >= stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0:
                    revert with 0, 50
                if 100 * 10^6 < stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_256 - 0x8000000000000000000000000000000000000000000000000000000000000000 and stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_256 >= 0:
                    revert with 0, 17
                if stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_256 < 0 and 100 * 10^6 > stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_256 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                    revert with 0, 17
                if z and -stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_256 + 100 * 10^6 > -1 / z:
                    revert with 0, 17
                if s == -1:
                    revert with 0, 17
                if uint8(stor5[address(arg1)][idx].field_1280) > 2:
                    revert with 0, 33
                mem[0] = uint8(stor5[address(arg1)][idx].field_1280)
                mem[32] = 8
                s = s + 1
                t = stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0 - _1755 / sub_9b28d1a7 != y - _1755 / sub_9b28d1a7
                u = (_1755 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) + (sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) + (y - _1755 / sub_9b28d1a7 * sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) - (y * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) / 8760 * 24 * 3600
                v = _1755 + sub_9b28d1a7 + (y - _1755 / sub_9b28d1a7 * sub_9b28d1a7) - y
                w = w + ((_1755 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) + (sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) + (y - _1755 / sub_9b28d1a7 * sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) - (y * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) / 8760 * 24 * 3600)
                x = _1755 + sub_9b28d1a7 + (y - _1755 / sub_9b28d1a7 * sub_9b28d1a7)
                y = _1755 + sub_9b28d1a7 + (y - _1755 / sub_9b28d1a7 * sub_9b28d1a7)
                z = (100 * 10^6 * z) - (stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_256 * z) / 100 * 10^6
                continue 
            a = t
            a = u
            a = v
            a = w
            b = x
            s = y
            b = z
            while s != block.timestamp:
                if s < _1755:
                    revert with 0, 17
                if not sub_9b28d1a7:
                    revert with 0, 18
                if block.timestamp < _1755:
                    revert with 0, 17
                if not sub_9b28d1a7:
                    revert with 0, 18
                if block.timestamp - _1755 / sub_9b28d1a7 == s - _1755 / sub_9b28d1a7:
                    if block.timestamp < s:
                        revert with 0, 17
                    if stor5[address(arg1)][idx].field_1024 and b > -1 / stor5[address(arg1)][idx].field_1024:
                        revert with 0, 17
                    if stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6 and block.timestamp - s > -1 / stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6:
                        revert with 0, 17
                    if a > !((block.timestamp * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) - (s * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) / 8760 * 24 * 3600):
                        revert with 0, 17
                    if block.timestamp - _1755 / sub_9b28d1a7 == s - _1755 / sub_9b28d1a7:
                        a = block.timestamp - _1755 / sub_9b28d1a7 != s - _1755 / sub_9b28d1a7
                        a = (block.timestamp * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) - (s * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) / 8760 * 24 * 3600
                        a = block.timestamp - s
                        a = a + ((block.timestamp * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) - (s * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) / 8760 * 24 * 3600)
                        b = block.timestamp
                        s = block.timestamp
                        b = b
                        continue 
                    if 100 * 10^6 < sub_93520a80 - 0x8000000000000000000000000000000000000000000000000000000000000000 and sub_93520a80 >= 0:
                        revert with 0, 17
                    if sub_93520a80 < 0 and 100 * 10^6 > sub_93520a80 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                        revert with 0, 17
                    if b and -sub_93520a80 + 100 * 10^6 > -1 / b:
                        revert with 0, 17
                    a = block.timestamp - _1755 / sub_9b28d1a7 != s - _1755 / sub_9b28d1a7
                    a = (block.timestamp * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) - (s * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) / 8760 * 24 * 3600
                    a = block.timestamp - s
                    a = a + ((block.timestamp * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) - (s * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) / 8760 * 24 * 3600)
                    b = block.timestamp
                    s = block.timestamp
                    b = (100 * 10^6 * b) - (sub_93520a80 * b) / 100 * 10^6
                    continue 
                if s < _1755:
                    revert with 0, 17
                if not sub_9b28d1a7:
                    revert with 0, 18
                if 1 > !(s - _1755 / sub_9b28d1a7):
                    revert with 0, 17
                if sub_9b28d1a7 and (s - _1755 / sub_9b28d1a7) + 1 > -1 / sub_9b28d1a7:
                    revert with 0, 17
                if _1755 > !(sub_9b28d1a7 + (s - _1755 / sub_9b28d1a7 * sub_9b28d1a7)):
                    revert with 0, 17
                if _1755 + sub_9b28d1a7 + (s - _1755 / sub_9b28d1a7 * sub_9b28d1a7) < s:
                    revert with 0, 17
                if stor5[address(arg1)][idx].field_1024 and b > -1 / stor5[address(arg1)][idx].field_1024:
                    revert with 0, 17
                if stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6 and _1755 + sub_9b28d1a7 + (s - _1755 / sub_9b28d1a7 * sub_9b28d1a7) - s > -1 / stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6:
                    revert with 0, 17
                if a > !((_1755 * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) + (sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) + (s - _1755 / sub_9b28d1a7 * sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) - (s * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) / 8760 * 24 * 3600):
                    revert with 0, 17
                if block.timestamp - _1755 / sub_9b28d1a7 == s - _1755 / sub_9b28d1a7:
                    a = block.timestamp - _1755 / sub_9b28d1a7 != s - _1755 / sub_9b28d1a7
                    a = (_1755 * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) + (sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) + (s - _1755 / sub_9b28d1a7 * sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) - (s * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) / 8760 * 24 * 3600
                    a = _1755 + sub_9b28d1a7 + (s - _1755 / sub_9b28d1a7 * sub_9b28d1a7) - s
                    a = a + ((_1755 * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) + (sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) + (s - _1755 / sub_9b28d1a7 * sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) - (s * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) / 8760 * 24 * 3600)
                    b = _1755 + sub_9b28d1a7 + (s - _1755 / sub_9b28d1a7 * sub_9b28d1a7)
                    s = _1755 + sub_9b28d1a7 + (s - _1755 / sub_9b28d1a7 * sub_9b28d1a7)
                    b = b
                    continue 
                if 100 * 10^6 < sub_93520a80 - 0x8000000000000000000000000000000000000000000000000000000000000000 and sub_93520a80 >= 0:
                    revert with 0, 17
                if sub_93520a80 < 0 and 100 * 10^6 > sub_93520a80 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                    revert with 0, 17
                if b and -sub_93520a80 + 100 * 10^6 > -1 / b:
                    revert with 0, 17
                a = block.timestamp - _1755 / sub_9b28d1a7 != s - _1755 / sub_9b28d1a7
                a = (_1755 * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) + (sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) + (s - _1755 / sub_9b28d1a7 * sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) - (s * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) / 8760 * 24 * 3600
                a = _1755 + sub_9b28d1a7 + (s - _1755 / sub_9b28d1a7 * sub_9b28d1a7) - s
                a = a + ((_1755 * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) + (sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) + (s - _1755 / sub_9b28d1a7 * sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) - (s * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) / 8760 * 24 * 3600)
                b = _1755 + sub_9b28d1a7 + (s - _1755 / sub_9b28d1a7 * sub_9b28d1a7)
                s = _1755 + sub_9b28d1a7 + (s - _1755 / sub_9b28d1a7 * sub_9b28d1a7)
                b = (100 * 10^6 * b) - (sub_93520a80 * b) / 100 * 10^6
                continue 
        else:
            if 31 >= stor5[address(arg1)][idx].field_1 % 128:
                mem[_637 + 32] = 256 * Mask(248, 0, stor5[address(arg1)][idx].field_8)
                mem[_633] = _637
                mem[_633 + 32] = stor5[address(arg1)][idx].field_256
                mem[_633 + 64] = stor5[address(arg1)][idx].field_512
                mem[_633 + 96] = stor5[address(arg1)][idx].field_768
                mem[_633 + 128] = stor5[address(arg1)][idx].field_1024
                if uint8(stor5[address(arg1)][idx].field_1280) > 2:
                    revert with 0, 33
                mem[_633 + 160] = uint8(stor5[address(arg1)][idx].field_1280)
                if uint8(stor5[address(arg1)][idx].field_1280) > 2:
                    revert with 0, 33
                mem[32] = 8
                s = 0
                while stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0 > s:
                    if s > !stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0:
                        revert with 0, 17
                    if uint8(stor5[address(arg1)][idx].field_1280) > 2:
                        revert with 0, 33
                    mem[32] = 8
                    if s + stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0 / 2 >= stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0:
                        revert with 0, 50
                    mem[0] = sha3(uint8(stor5[address(arg1)][idx].field_1280), 8)
                    if stor8[uint8(stor5[address(arg1)][idx].field_1280)][Mask(255, 1, s + stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0)].field_0 >= stor5[address(arg1)][idx].field_512:
                        s = s
                        continue 
                    if 1 > !(s + stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0 / 2):
                        revert with 0, 17
                    s = (s + stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0 / 2) + 1
                    continue 
                _979 = mem[_633 + 32]
                if uint8(stor5[address(arg1)][idx].field_1280) > 2:
                    revert with 0, 33
                s = 0
                while stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0 > s:
                    if s > !stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0:
                        revert with 0, 17
                    if uint8(stor5[address(arg1)][idx].field_1280) > 2:
                        revert with 0, 33
                    mem[32] = 8
                    if s + stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0 / 2 >= stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0:
                        revert with 0, 50
                    mem[0] = sha3(uint8(stor5[address(arg1)][idx].field_1280), 8)
                    if stor8[uint8(stor5[address(arg1)][idx].field_1280)][Mask(255, 1, s + stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0)].field_0 >= _979:
                        s = s
                        continue 
                    if 1 > !(s + stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0 / 2):
                        revert with 0, 17
                    s = (s + stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0 / 2) + 1
                    continue 
                if uint8(stor5[address(arg1)][idx].field_1280) > 2:
                    revert with 0, 33
                mem[32] = 8
                t = 0
                while stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0 > t:
                    if t > !stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0:
                        revert with 0, 17
                    if uint8(stor5[address(arg1)][idx].field_1280) > 2:
                        revert with 0, 33
                    mem[32] = 8
                    if t + stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0 / 2 >= stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0:
                        revert with 0, 50
                    mem[0] = sha3(uint8(stor5[address(arg1)][idx].field_1280), 8)
                    if stor8[uint8(stor5[address(arg1)][idx].field_1280)][Mask(255, 1, t + stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0)].field_0 >= stor5[address(arg1)][idx].field_512:
                        t = t
                        continue 
                    if 1 > !(t + stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0 / 2):
                        revert with 0, 17
                    t = (t + stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0 / 2) + 1
                    continue 
                u = s
                v = stor5[address(arg1)][idx].field_768
                while u < t:
                    if uint8(stor5[address(arg1)][idx].field_1280) > 2:
                        revert with 0, 33
                    mem[32] = 8
                    if u >= stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0:
                        revert with 0, 50
                    mem[0] = sha3(uint8(stor5[address(arg1)][idx].field_1280), 8)
                    if 100 * 10^6 < stor8[uint8(stor5[address(arg1)][idx].field_1280)][u].field_256 - 0x8000000000000000000000000000000000000000000000000000000000000000 and stor8[uint8(stor5[address(arg1)][idx].field_1280)][u].field_256 >= 0:
                        revert with 0, 17
                    if stor8[uint8(stor5[address(arg1)][idx].field_1280)][u].field_256 < 0 and 100 * 10^6 > stor8[uint8(stor5[address(arg1)][idx].field_1280)][u].field_256 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                        revert with 0, 17
                    if v and -stor8[uint8(stor5[address(arg1)][idx].field_1280)][u].field_256 + 100 * 10^6 > -1 / v:
                        revert with 0, 17
                    if u == -1:
                        revert with 0, 17
                    u = u + 1
                    v = (100 * 10^6 * v) - (stor8[uint8(stor5[address(arg1)][idx].field_1280)][u].field_256 * v) / 100 * 10^6
                    continue 
                if stor5[address(arg1)][idx].field_512 < _979:
                    revert with 0, 17
                if not sub_9b28d1a7:
                    revert with 0, 18
                s = stor5[address(arg1)][idx].field_512 - _979 / sub_9b28d1a7
                t = v
                while s:
                    if not s:
                        revert with 0, 17
                    if 100 * 10^6 < sub_93520a80 - 0x8000000000000000000000000000000000000000000000000000000000000000 and sub_93520a80 >= 0:
                        revert with 0, 17
                    if sub_93520a80 < 0 and 100 * 10^6 > sub_93520a80 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                        revert with 0, 17
                    if t and -sub_93520a80 + 100 * 10^6 > -1 / t:
                        revert with 0, 17
                    s = s - 1
                    t = (100 * 10^6 * t) - (sub_93520a80 * t) / 100 * 10^6
                    continue 
                _1757 = mem[_633 + 32]
                if uint8(stor5[address(arg1)][idx].field_1280) > 2:
                    revert with 0, 33
                mem[0] = uint8(stor5[address(arg1)][idx].field_1280)
                mem[32] = 8
                s = var157001
                t = var157002
                u = var157004
                v = var157005
                w = var157006
                x = var157007
                y = var157008
                z = var157009
                while s < stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0:
                    if uint8(stor5[address(arg1)][idx].field_1280) > 2:
                        revert with 0, 33
                    if s >= stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0:
                        revert with 0, 50
                    if y < _1757:
                        revert with 0, 17
                    if not sub_9b28d1a7:
                        revert with 0, 18
                    if stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0 < _1757:
                        revert with 0, 17
                    if not sub_9b28d1a7:
                        revert with 0, 18
                    if stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0 - _1757 / sub_9b28d1a7 == y - _1757 / sub_9b28d1a7:
                        if stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0 < y:
                            revert with 0, 17
                        if stor5[address(arg1)][idx].field_1024 and z > -1 / stor5[address(arg1)][idx].field_1024:
                            revert with 0, 17
                        if stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6 and stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0 - y > -1 / stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6:
                            revert with 0, 17
                        if w > !((stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) - (y * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) / 8760 * 24 * 3600):
                            revert with 0, 17
                        if stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0 - _1757 / sub_9b28d1a7 != y - _1757 / sub_9b28d1a7:
                            if 100 * 10^6 < sub_93520a80 - 0x8000000000000000000000000000000000000000000000000000000000000000 and sub_93520a80 >= 0:
                                revert with 0, 17
                            if sub_93520a80 < 0 and 100 * 10^6 > sub_93520a80 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                revert with 0, 17
                            if z and -sub_93520a80 + 100 * 10^6 > -1 / z:
                                revert with 0, 17
                            if not s:
                                revert with 0, 17
                            if s - 1 == -1:
                                revert with 0, 17
                            if uint8(stor5[address(arg1)][idx].field_1280) > 2:
                                revert with 0, 33
                            mem[0] = uint8(stor5[address(arg1)][idx].field_1280)
                            mem[32] = 8
                            s = s
                            t = stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0 - _1757 / sub_9b28d1a7 != y - _1757 / sub_9b28d1a7
                            u = (stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) - (y * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) / 8760 * 24 * 3600
                            v = stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0 - y
                            w = w + ((stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) - (y * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) / 8760 * 24 * 3600)
                            x = stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0
                            y = stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0
                            z = (100 * 10^6 * z) - (sub_93520a80 * z) / 100 * 10^6
                            continue 
                        if uint8(stor5[address(arg1)][idx].field_1280) > 2:
                            revert with 0, 33
                        if s >= stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0:
                            revert with 0, 50
                        if 100 * 10^6 < stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_256 - 0x8000000000000000000000000000000000000000000000000000000000000000 and stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_256 >= 0:
                            revert with 0, 17
                        if stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_256 < 0 and 100 * 10^6 > stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_256 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                            revert with 0, 17
                        if z and -stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_256 + 100 * 10^6 > -1 / z:
                            revert with 0, 17
                        if s == -1:
                            revert with 0, 17
                        if uint8(stor5[address(arg1)][idx].field_1280) > 2:
                            revert with 0, 33
                        mem[0] = uint8(stor5[address(arg1)][idx].field_1280)
                        mem[32] = 8
                        s = s + 1
                        t = stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0 - _1757 / sub_9b28d1a7 != y - _1757 / sub_9b28d1a7
                        u = (stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) - (y * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) / 8760 * 24 * 3600
                        v = stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0 - y
                        w = w + ((stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) - (y * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) / 8760 * 24 * 3600)
                        x = stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0
                        y = stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0
                        z = (100 * 10^6 * z) - (stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_256 * z) / 100 * 10^6
                        continue 
                    if y < _1757:
                        revert with 0, 17
                    if not sub_9b28d1a7:
                        revert with 0, 18
                    if 1 > !(y - _1757 / sub_9b28d1a7):
                        revert with 0, 17
                    if sub_9b28d1a7 and (y - _1757 / sub_9b28d1a7) + 1 > -1 / sub_9b28d1a7:
                        revert with 0, 17
                    if _1757 > !(sub_9b28d1a7 + (y - _1757 / sub_9b28d1a7 * sub_9b28d1a7)):
                        revert with 0, 17
                    if _1757 + sub_9b28d1a7 + (y - _1757 / sub_9b28d1a7 * sub_9b28d1a7) < y:
                        revert with 0, 17
                    if stor5[address(arg1)][idx].field_1024 and z > -1 / stor5[address(arg1)][idx].field_1024:
                        revert with 0, 17
                    if stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6 and _1757 + sub_9b28d1a7 + (y - _1757 / sub_9b28d1a7 * sub_9b28d1a7) - y > -1 / stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6:
                        revert with 0, 17
                    if w > !((_1757 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) + (sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) + (y - _1757 / sub_9b28d1a7 * sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) - (y * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) / 8760 * 24 * 3600):
                        revert with 0, 17
                    if stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0 - _1757 / sub_9b28d1a7 != y - _1757 / sub_9b28d1a7:
                        if 100 * 10^6 < sub_93520a80 - 0x8000000000000000000000000000000000000000000000000000000000000000 and sub_93520a80 >= 0:
                            revert with 0, 17
                        if sub_93520a80 < 0 and 100 * 10^6 > sub_93520a80 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                            revert with 0, 17
                        if z and -sub_93520a80 + 100 * 10^6 > -1 / z:
                            revert with 0, 17
                        if not s:
                            revert with 0, 17
                        if s - 1 == -1:
                            revert with 0, 17
                        if uint8(stor5[address(arg1)][idx].field_1280) > 2:
                            revert with 0, 33
                        mem[0] = uint8(stor5[address(arg1)][idx].field_1280)
                        mem[32] = 8
                        s = s
                        t = stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0 - _1757 / sub_9b28d1a7 != y - _1757 / sub_9b28d1a7
                        u = (_1757 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) + (sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) + (y - _1757 / sub_9b28d1a7 * sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) - (y * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) / 8760 * 24 * 3600
                        v = _1757 + sub_9b28d1a7 + (y - _1757 / sub_9b28d1a7 * sub_9b28d1a7) - y
                        w = w + ((_1757 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) + (sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) + (y - _1757 / sub_9b28d1a7 * sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) - (y * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) / 8760 * 24 * 3600)
                        x = _1757 + sub_9b28d1a7 + (y - _1757 / sub_9b28d1a7 * sub_9b28d1a7)
                        y = _1757 + sub_9b28d1a7 + (y - _1757 / sub_9b28d1a7 * sub_9b28d1a7)
                        z = (100 * 10^6 * z) - (sub_93520a80 * z) / 100 * 10^6
                        continue 
                    if uint8(stor5[address(arg1)][idx].field_1280) > 2:
                        revert with 0, 33
                    if s >= stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0:
                        revert with 0, 50
                    if 100 * 10^6 < stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_256 - 0x8000000000000000000000000000000000000000000000000000000000000000 and stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_256 >= 0:
                        revert with 0, 17
                    if stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_256 < 0 and 100 * 10^6 > stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_256 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                        revert with 0, 17
                    if z and -stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_256 + 100 * 10^6 > -1 / z:
                        revert with 0, 17
                    if s == -1:
                        revert with 0, 17
                    if uint8(stor5[address(arg1)][idx].field_1280) > 2:
                        revert with 0, 33
                    mem[0] = uint8(stor5[address(arg1)][idx].field_1280)
                    mem[32] = 8
                    s = s + 1
                    t = stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0 - _1757 / sub_9b28d1a7 != y - _1757 / sub_9b28d1a7
                    u = (_1757 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) + (sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) + (y - _1757 / sub_9b28d1a7 * sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) - (y * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) / 8760 * 24 * 3600
                    v = _1757 + sub_9b28d1a7 + (y - _1757 / sub_9b28d1a7 * sub_9b28d1a7) - y
                    w = w + ((_1757 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) + (sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) + (y - _1757 / sub_9b28d1a7 * sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) - (y * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) / 8760 * 24 * 3600)
                    x = _1757 + sub_9b28d1a7 + (y - _1757 / sub_9b28d1a7 * sub_9b28d1a7)
                    y = _1757 + sub_9b28d1a7 + (y - _1757 / sub_9b28d1a7 * sub_9b28d1a7)
                    z = (100 * 10^6 * z) - (stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_256 * z) / 100 * 10^6
                    continue 
                a = t
                a = u
                a = v
                a = w
                b = x
                s = y
                b = z
                while s != block.timestamp:
                    if s < _1757:
                        revert with 0, 17
                    if not sub_9b28d1a7:
                        revert with 0, 18
                    if block.timestamp < _1757:
                        revert with 0, 17
                    if not sub_9b28d1a7:
                        revert with 0, 18
                    if block.timestamp - _1757 / sub_9b28d1a7 == s - _1757 / sub_9b28d1a7:
                        if block.timestamp < s:
                            revert with 0, 17
                        if stor5[address(arg1)][idx].field_1024 and b > -1 / stor5[address(arg1)][idx].field_1024:
                            revert with 0, 17
                        if stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6 and block.timestamp - s > -1 / stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6:
                            revert with 0, 17
                        if a > !((block.timestamp * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) - (s * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) / 8760 * 24 * 3600):
                            revert with 0, 17
                        if block.timestamp - _1757 / sub_9b28d1a7 == s - _1757 / sub_9b28d1a7:
                            a = block.timestamp - _1757 / sub_9b28d1a7 != s - _1757 / sub_9b28d1a7
                            a = (block.timestamp * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) - (s * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) / 8760 * 24 * 3600
                            a = block.timestamp - s
                            a = a + ((block.timestamp * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) - (s * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) / 8760 * 24 * 3600)
                            b = block.timestamp
                            s = block.timestamp
                            b = b
                            continue 
                        if 100 * 10^6 < sub_93520a80 - 0x8000000000000000000000000000000000000000000000000000000000000000 and sub_93520a80 >= 0:
                            revert with 0, 17
                        if sub_93520a80 < 0 and 100 * 10^6 > sub_93520a80 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                            revert with 0, 17
                        if b and -sub_93520a80 + 100 * 10^6 > -1 / b:
                            revert with 0, 17
                        a = block.timestamp - _1757 / sub_9b28d1a7 != s - _1757 / sub_9b28d1a7
                        a = (block.timestamp * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) - (s * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) / 8760 * 24 * 3600
                        a = block.timestamp - s
                        a = a + ((block.timestamp * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) - (s * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) / 8760 * 24 * 3600)
                        b = block.timestamp
                        s = block.timestamp
                        b = (100 * 10^6 * b) - (sub_93520a80 * b) / 100 * 10^6
                        continue 
                    if s < _1757:
                        revert with 0, 17
                    if not sub_9b28d1a7:
                        revert with 0, 18
                    if 1 > !(s - _1757 / sub_9b28d1a7):
                        revert with 0, 17
                    if sub_9b28d1a7 and (s - _1757 / sub_9b28d1a7) + 1 > -1 / sub_9b28d1a7:
                        revert with 0, 17
                    if _1757 > !(sub_9b28d1a7 + (s - _1757 / sub_9b28d1a7 * sub_9b28d1a7)):
                        revert with 0, 17
                    if _1757 + sub_9b28d1a7 + (s - _1757 / sub_9b28d1a7 * sub_9b28d1a7) < s:
                        revert with 0, 17
                    if stor5[address(arg1)][idx].field_1024 and b > -1 / stor5[address(arg1)][idx].field_1024:
                        revert with 0, 17
                    if stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6 and _1757 + sub_9b28d1a7 + (s - _1757 / sub_9b28d1a7 * sub_9b28d1a7) - s > -1 / stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6:
                        revert with 0, 17
                    if a > !((_1757 * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) + (sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) + (s - _1757 / sub_9b28d1a7 * sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) - (s * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) / 8760 * 24 * 3600):
                        revert with 0, 17
                    if block.timestamp - _1757 / sub_9b28d1a7 == s - _1757 / sub_9b28d1a7:
                        a = block.timestamp - _1757 / sub_9b28d1a7 != s - _1757 / sub_9b28d1a7
                        a = (_1757 * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) + (sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) + (s - _1757 / sub_9b28d1a7 * sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) - (s * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) / 8760 * 24 * 3600
                        a = _1757 + sub_9b28d1a7 + (s - _1757 / sub_9b28d1a7 * sub_9b28d1a7) - s
                        a = a + ((_1757 * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) + (sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) + (s - _1757 / sub_9b28d1a7 * sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) - (s * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) / 8760 * 24 * 3600)
                        b = _1757 + sub_9b28d1a7 + (s - _1757 / sub_9b28d1a7 * sub_9b28d1a7)
                        s = _1757 + sub_9b28d1a7 + (s - _1757 / sub_9b28d1a7 * sub_9b28d1a7)
                        b = b
                        continue 
                    if 100 * 10^6 < sub_93520a80 - 0x8000000000000000000000000000000000000000000000000000000000000000 and sub_93520a80 >= 0:
                        revert with 0, 17
                    if sub_93520a80 < 0 and 100 * 10^6 > sub_93520a80 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                        revert with 0, 17
                    if b and -sub_93520a80 + 100 * 10^6 > -1 / b:
                        revert with 0, 17
                    a = block.timestamp - _1757 / sub_9b28d1a7 != s - _1757 / sub_9b28d1a7
                    a = (_1757 * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) + (sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) + (s - _1757 / sub_9b28d1a7 * sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) - (s * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) / 8760 * 24 * 3600
                    a = _1757 + sub_9b28d1a7 + (s - _1757 / sub_9b28d1a7 * sub_9b28d1a7) - s
                    a = a + ((_1757 * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) + (sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) + (s - _1757 / sub_9b28d1a7 * sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) - (s * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) / 8760 * 24 * 3600)
                    b = _1757 + sub_9b28d1a7 + (s - _1757 / sub_9b28d1a7 * sub_9b28d1a7)
                    s = _1757 + sub_9b28d1a7 + (s - _1757 / sub_9b28d1a7 * sub_9b28d1a7)
                    b = (100 * 10^6 * b) - (sub_93520a80 * b) / 100 * 10^6
                    continue 
            else:
                mem[0] = (6 * idx) + sha3(sha3(address(arg1), 5))
                mem[_637 + 32] = stor5[address(arg1)][idx].field_0
                s = _637 + 32
                t = sha3(mem[0])
                while _637 + stor5[address(arg1)][idx].field_1 % 128 > s:
                    mem[s + 32] = uint256(stor1[t])
                    s = s + 32
                    t = t + 1
                    continue 
                mem[_633] = _637
                mem[_633 + 32] = stor5[address(arg1)][idx].field_256
                mem[_633 + 64] = stor5[address(arg1)][idx].field_512
                mem[_633 + 96] = stor5[address(arg1)][idx].field_768
                mem[_633 + 128] = stor5[address(arg1)][idx].field_1024
                if uint8(stor5[address(arg1)][idx].field_1280) > 2:
                    revert with 0, 33
                mem[_633 + 160] = uint8(stor5[address(arg1)][idx].field_1280)
                if uint8(stor5[address(arg1)][idx].field_1280) > 2:
                    revert with 0, 33
                mem[32] = 8
                s = 0
                while stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0 > s:
                    if s > !stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0:
                        revert with 0, 17
                    if uint8(stor5[address(arg1)][idx].field_1280) > 2:
                        revert with 0, 33
                    mem[32] = 8
                    if s + stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0 / 2 >= stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0:
                        revert with 0, 50
                    mem[0] = sha3(uint8(stor5[address(arg1)][idx].field_1280), 8)
                    if stor8[uint8(stor5[address(arg1)][idx].field_1280)][Mask(255, 1, s + stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0)].field_0 >= stor5[address(arg1)][idx].field_512:
                        s = s
                        continue 
                    if 1 > !(s + stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0 / 2):
                        revert with 0, 17
                    s = (s + stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0 / 2) + 1
                    continue 
                _1235 = mem[_633 + 32]
                if uint8(stor5[address(arg1)][idx].field_1280) > 2:
                    revert with 0, 33
                s = 0
                while stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0 > s:
                    if s > !stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0:
                        revert with 0, 17
                    if uint8(stor5[address(arg1)][idx].field_1280) > 2:
                        revert with 0, 33
                    mem[32] = 8
                    if s + stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0 / 2 >= stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0:
                        revert with 0, 50
                    mem[0] = sha3(uint8(stor5[address(arg1)][idx].field_1280), 8)
                    if stor8[uint8(stor5[address(arg1)][idx].field_1280)][Mask(255, 1, s + stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0)].field_0 >= _1235:
                        s = s
                        continue 
                    if 1 > !(s + stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0 / 2):
                        revert with 0, 17
                    s = (s + stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0 / 2) + 1
                    continue 
                if uint8(stor5[address(arg1)][idx].field_1280) > 2:
                    revert with 0, 33
                mem[32] = 8
                t = 0
                while stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0 > t:
                    if t > !stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0:
                        revert with 0, 17
                    if uint8(stor5[address(arg1)][idx].field_1280) > 2:
                        revert with 0, 33
                    mem[32] = 8
                    if t + stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0 / 2 >= stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0:
                        revert with 0, 50
                    mem[0] = sha3(uint8(stor5[address(arg1)][idx].field_1280), 8)
                    if stor8[uint8(stor5[address(arg1)][idx].field_1280)][Mask(255, 1, t + stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0)].field_0 >= stor5[address(arg1)][idx].field_512:
                        t = t
                        continue 
                    if 1 > !(t + stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0 / 2):
                        revert with 0, 17
                    t = (t + stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0 / 2) + 1
                    continue 
                u = s
                v = stor5[address(arg1)][idx].field_768
                while u < t:
                    if uint8(stor5[address(arg1)][idx].field_1280) > 2:
                        revert with 0, 33
                    mem[32] = 8
                    if u >= stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0:
                        revert with 0, 50
                    mem[0] = sha3(uint8(stor5[address(arg1)][idx].field_1280), 8)
                    if 100 * 10^6 < stor8[uint8(stor5[address(arg1)][idx].field_1280)][u].field_256 - 0x8000000000000000000000000000000000000000000000000000000000000000 and stor8[uint8(stor5[address(arg1)][idx].field_1280)][u].field_256 >= 0:
                        revert with 0, 17
                    if stor8[uint8(stor5[address(arg1)][idx].field_1280)][u].field_256 < 0 and 100 * 10^6 > stor8[uint8(stor5[address(arg1)][idx].field_1280)][u].field_256 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                        revert with 0, 17
                    if v and -stor8[uint8(stor5[address(arg1)][idx].field_1280)][u].field_256 + 100 * 10^6 > -1 / v:
                        revert with 0, 17
                    if u == -1:
                        revert with 0, 17
                    u = u + 1
                    v = (100 * 10^6 * v) - (stor8[uint8(stor5[address(arg1)][idx].field_1280)][u].field_256 * v) / 100 * 10^6
                    continue 
                if stor5[address(arg1)][idx].field_512 < _1235:
                    revert with 0, 17
                if not sub_9b28d1a7:
                    revert with 0, 18
                s = stor5[address(arg1)][idx].field_512 - _1235 / sub_9b28d1a7
                t = v
                while s:
                    if not s:
                        revert with 0, 17
                    if 100 * 10^6 < sub_93520a80 - 0x8000000000000000000000000000000000000000000000000000000000000000 and sub_93520a80 >= 0:
                        revert with 0, 17
                    if sub_93520a80 < 0 and 100 * 10^6 > sub_93520a80 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                        revert with 0, 17
                    if t and -sub_93520a80 + 100 * 10^6 > -1 / t:
                        revert with 0, 17
                    s = s - 1
                    t = (100 * 10^6 * t) - (sub_93520a80 * t) / 100 * 10^6
                    continue 
                _1872 = mem[_633 + 32]
                if uint8(stor5[address(arg1)][idx].field_1280) > 2:
                    revert with 0, 33
                mem[0] = uint8(stor5[address(arg1)][idx].field_1280)
                mem[32] = 8
                s = var160001
                t = var160002
                u = var160004
                v = var160005
                w = var160006
                x = var160007
                y = var160008
                z = var160009
                while s < stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0:
                    if uint8(stor5[address(arg1)][idx].field_1280) > 2:
                        revert with 0, 33
                    if s >= stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0:
                        revert with 0, 50
                    if y < _1872:
                        revert with 0, 17
                    if not sub_9b28d1a7:
                        revert with 0, 18
                    if stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0 < _1872:
                        revert with 0, 17
                    if not sub_9b28d1a7:
                        revert with 0, 18
                    if stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0 - _1872 / sub_9b28d1a7 == y - _1872 / sub_9b28d1a7:
                        if stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0 < y:
                            revert with 0, 17
                        if stor5[address(arg1)][idx].field_1024 and z > -1 / stor5[address(arg1)][idx].field_1024:
                            revert with 0, 17
                        if stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6 and stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0 - y > -1 / stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6:
                            revert with 0, 17
                        if w > !((stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) - (y * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) / 8760 * 24 * 3600):
                            revert with 0, 17
                        if stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0 - _1872 / sub_9b28d1a7 != y - _1872 / sub_9b28d1a7:
                            if 100 * 10^6 < sub_93520a80 - 0x8000000000000000000000000000000000000000000000000000000000000000 and sub_93520a80 >= 0:
                                revert with 0, 17
                            if sub_93520a80 < 0 and 100 * 10^6 > sub_93520a80 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                revert with 0, 17
                            if z and -sub_93520a80 + 100 * 10^6 > -1 / z:
                                revert with 0, 17
                            if not s:
                                revert with 0, 17
                            if s - 1 == -1:
                                revert with 0, 17
                            if uint8(stor5[address(arg1)][idx].field_1280) > 2:
                                revert with 0, 33
                            mem[0] = uint8(stor5[address(arg1)][idx].field_1280)
                            mem[32] = 8
                            s = s
                            t = stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0 - _1872 / sub_9b28d1a7 != y - _1872 / sub_9b28d1a7
                            u = (stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) - (y * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) / 8760 * 24 * 3600
                            v = stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0 - y
                            w = w + ((stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) - (y * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) / 8760 * 24 * 3600)
                            x = stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0
                            y = stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0
                            z = (100 * 10^6 * z) - (sub_93520a80 * z) / 100 * 10^6
                            continue 
                        if uint8(stor5[address(arg1)][idx].field_1280) > 2:
                            revert with 0, 33
                        if s >= stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0:
                            revert with 0, 50
                        if 100 * 10^6 < stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_256 - 0x8000000000000000000000000000000000000000000000000000000000000000 and stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_256 >= 0:
                            revert with 0, 17
                        if stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_256 < 0 and 100 * 10^6 > stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_256 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                            revert with 0, 17
                        if z and -stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_256 + 100 * 10^6 > -1 / z:
                            revert with 0, 17
                        if s == -1:
                            revert with 0, 17
                        if uint8(stor5[address(arg1)][idx].field_1280) > 2:
                            revert with 0, 33
                        mem[0] = uint8(stor5[address(arg1)][idx].field_1280)
                        mem[32] = 8
                        s = s + 1
                        t = stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0 - _1872 / sub_9b28d1a7 != y - _1872 / sub_9b28d1a7
                        u = (stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) - (y * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) / 8760 * 24 * 3600
                        v = stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0 - y
                        w = w + ((stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) - (y * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) / 8760 * 24 * 3600)
                        x = stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0
                        y = stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0
                        z = (100 * 10^6 * z) - (stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_256 * z) / 100 * 10^6
                        continue 
                    if y < _1872:
                        revert with 0, 17
                    if not sub_9b28d1a7:
                        revert with 0, 18
                    if 1 > !(y - _1872 / sub_9b28d1a7):
                        revert with 0, 17
                    if sub_9b28d1a7 and (y - _1872 / sub_9b28d1a7) + 1 > -1 / sub_9b28d1a7:
                        revert with 0, 17
                    if _1872 > !(sub_9b28d1a7 + (y - _1872 / sub_9b28d1a7 * sub_9b28d1a7)):
                        revert with 0, 17
                    if _1872 + sub_9b28d1a7 + (y - _1872 / sub_9b28d1a7 * sub_9b28d1a7) < y:
                        revert with 0, 17
                    if stor5[address(arg1)][idx].field_1024 and z > -1 / stor5[address(arg1)][idx].field_1024:
                        revert with 0, 17
                    if stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6 and _1872 + sub_9b28d1a7 + (y - _1872 / sub_9b28d1a7 * sub_9b28d1a7) - y > -1 / stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6:
                        revert with 0, 17
                    if w > !((_1872 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) + (sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) + (y - _1872 / sub_9b28d1a7 * sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) - (y * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) / 8760 * 24 * 3600):
                        revert with 0, 17
                    if stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0 - _1872 / sub_9b28d1a7 != y - _1872 / sub_9b28d1a7:
                        if 100 * 10^6 < sub_93520a80 - 0x8000000000000000000000000000000000000000000000000000000000000000 and sub_93520a80 >= 0:
                            revert with 0, 17
                        if sub_93520a80 < 0 and 100 * 10^6 > sub_93520a80 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                            revert with 0, 17
                        if z and -sub_93520a80 + 100 * 10^6 > -1 / z:
                            revert with 0, 17
                        if not s:
                            revert with 0, 17
                        if s - 1 == -1:
                            revert with 0, 17
                        if uint8(stor5[address(arg1)][idx].field_1280) > 2:
                            revert with 0, 33
                        mem[0] = uint8(stor5[address(arg1)][idx].field_1280)
                        mem[32] = 8
                        s = s
                        t = stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0 - _1872 / sub_9b28d1a7 != y - _1872 / sub_9b28d1a7
                        u = (_1872 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) + (sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) + (y - _1872 / sub_9b28d1a7 * sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) - (y * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) / 8760 * 24 * 3600
                        v = _1872 + sub_9b28d1a7 + (y - _1872 / sub_9b28d1a7 * sub_9b28d1a7) - y
                        w = w + ((_1872 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) + (sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) + (y - _1872 / sub_9b28d1a7 * sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) - (y * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) / 8760 * 24 * 3600)
                        x = _1872 + sub_9b28d1a7 + (y - _1872 / sub_9b28d1a7 * sub_9b28d1a7)
                        y = _1872 + sub_9b28d1a7 + (y - _1872 / sub_9b28d1a7 * sub_9b28d1a7)
                        z = (100 * 10^6 * z) - (sub_93520a80 * z) / 100 * 10^6
                        continue 
                    if uint8(stor5[address(arg1)][idx].field_1280) > 2:
                        revert with 0, 33
                    if s >= stor8[uint8(stor5[address(arg1)][idx].field_1280)].field_0:
                        revert with 0, 50
                    if 100 * 10^6 < stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_256 - 0x8000000000000000000000000000000000000000000000000000000000000000 and stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_256 >= 0:
                        revert with 0, 17
                    if stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_256 < 0 and 100 * 10^6 > stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_256 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                        revert with 0, 17
                    if z and -stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_256 + 100 * 10^6 > -1 / z:
                        revert with 0, 17
                    if s == -1:
                        revert with 0, 17
                    if uint8(stor5[address(arg1)][idx].field_1280) > 2:
                        revert with 0, 33
                    mem[0] = uint8(stor5[address(arg1)][idx].field_1280)
                    mem[32] = 8
                    s = s + 1
                    t = stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_0 - _1872 / sub_9b28d1a7 != y - _1872 / sub_9b28d1a7
                    u = (_1872 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) + (sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) + (y - _1872 / sub_9b28d1a7 * sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) - (y * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) / 8760 * 24 * 3600
                    v = _1872 + sub_9b28d1a7 + (y - _1872 / sub_9b28d1a7 * sub_9b28d1a7) - y
                    w = w + ((_1872 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) + (sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) + (y - _1872 / sub_9b28d1a7 * sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) - (y * stor5[address(arg1)][idx].field_1024 * z / 100 * 10^6) / 8760 * 24 * 3600)
                    x = _1872 + sub_9b28d1a7 + (y - _1872 / sub_9b28d1a7 * sub_9b28d1a7)
                    y = _1872 + sub_9b28d1a7 + (y - _1872 / sub_9b28d1a7 * sub_9b28d1a7)
                    z = (100 * 10^6 * z) - (stor8[uint8(stor5[address(arg1)][idx].field_1280)][s].field_256 * z) / 100 * 10^6
                    continue 
                a = t
                a = u
                a = v
                a = w
                b = x
                s = y
                b = z
                while s != block.timestamp:
                    if s < _1872:
                        revert with 0, 17
                    if not sub_9b28d1a7:
                        revert with 0, 18
                    if block.timestamp < _1872:
                        revert with 0, 17
                    if not sub_9b28d1a7:
                        revert with 0, 18
                    if block.timestamp - _1872 / sub_9b28d1a7 == s - _1872 / sub_9b28d1a7:
                        if block.timestamp < s:
                            revert with 0, 17
                        if stor5[address(arg1)][idx].field_1024 and b > -1 / stor5[address(arg1)][idx].field_1024:
                            revert with 0, 17
                        if stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6 and block.timestamp - s > -1 / stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6:
                            revert with 0, 17
                        if a > !((block.timestamp * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) - (s * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) / 8760 * 24 * 3600):
                            revert with 0, 17
                        if block.timestamp - _1872 / sub_9b28d1a7 == s - _1872 / sub_9b28d1a7:
                            a = block.timestamp - _1872 / sub_9b28d1a7 != s - _1872 / sub_9b28d1a7
                            a = (block.timestamp * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) - (s * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) / 8760 * 24 * 3600
                            a = block.timestamp - s
                            a = a + ((block.timestamp * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) - (s * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) / 8760 * 24 * 3600)
                            b = block.timestamp
                            s = block.timestamp
                            b = b
                            continue 
                        if 100 * 10^6 < sub_93520a80 - 0x8000000000000000000000000000000000000000000000000000000000000000 and sub_93520a80 >= 0:
                            revert with 0, 17
                        if sub_93520a80 < 0 and 100 * 10^6 > sub_93520a80 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                            revert with 0, 17
                        if b and -sub_93520a80 + 100 * 10^6 > -1 / b:
                            revert with 0, 17
                        a = block.timestamp - _1872 / sub_9b28d1a7 != s - _1872 / sub_9b28d1a7
                        a = (block.timestamp * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) - (s * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) / 8760 * 24 * 3600
                        a = block.timestamp - s
                        a = a + ((block.timestamp * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) - (s * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) / 8760 * 24 * 3600)
                        b = block.timestamp
                        s = block.timestamp
                        b = (100 * 10^6 * b) - (sub_93520a80 * b) / 100 * 10^6
                        continue 
                    if s < _1872:
                        revert with 0, 17
                    if not sub_9b28d1a7:
                        revert with 0, 18
                    if 1 > !(s - _1872 / sub_9b28d1a7):
                        revert with 0, 17
                    if sub_9b28d1a7 and (s - _1872 / sub_9b28d1a7) + 1 > -1 / sub_9b28d1a7:
                        revert with 0, 17
                    if _1872 > !(sub_9b28d1a7 + (s - _1872 / sub_9b28d1a7 * sub_9b28d1a7)):
                        revert with 0, 17
                    if _1872 + sub_9b28d1a7 + (s - _1872 / sub_9b28d1a7 * sub_9b28d1a7) < s:
                        revert with 0, 17
                    if stor5[address(arg1)][idx].field_1024 and b > -1 / stor5[address(arg1)][idx].field_1024:
                        revert with 0, 17
                    if stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6 and _1872 + sub_9b28d1a7 + (s - _1872 / sub_9b28d1a7 * sub_9b28d1a7) - s > -1 / stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6:
                        revert with 0, 17
                    if a > !((_1872 * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) + (sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) + (s - _1872 / sub_9b28d1a7 * sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) - (s * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) / 8760 * 24 * 3600):
                        revert with 0, 17
                    if block.timestamp - _1872 / sub_9b28d1a7 == s - _1872 / sub_9b28d1a7:
                        a = block.timestamp - _1872 / sub_9b28d1a7 != s - _1872 / sub_9b28d1a7
                        a = (_1872 * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) + (sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) + (s - _1872 / sub_9b28d1a7 * sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) - (s * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) / 8760 * 24 * 3600
                        a = _1872 + sub_9b28d1a7 + (s - _1872 / sub_9b28d1a7 * sub_9b28d1a7) - s
                        a = a + ((_1872 * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) + (sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) + (s - _1872 / sub_9b28d1a7 * sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) - (s * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) / 8760 * 24 * 3600)
                        b = _1872 + sub_9b28d1a7 + (s - _1872 / sub_9b28d1a7 * sub_9b28d1a7)
                        s = _1872 + sub_9b28d1a7 + (s - _1872 / sub_9b28d1a7 * sub_9b28d1a7)
                        b = b
                        continue 
                    if 100 * 10^6 < sub_93520a80 - 0x8000000000000000000000000000000000000000000000000000000000000000 and sub_93520a80 >= 0:
                        revert with 0, 17
                    if sub_93520a80 < 0 and 100 * 10^6 > sub_93520a80 + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                        revert with 0, 17
                    if b and -sub_93520a80 + 100 * 10^6 > -1 / b:
                        revert with 0, 17
                    a = block.timestamp - _1872 / sub_9b28d1a7 != s - _1872 / sub_9b28d1a7
                    a = (_1872 * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) + (sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) + (s - _1872 / sub_9b28d1a7 * sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) - (s * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) / 8760 * 24 * 3600
                    a = _1872 + sub_9b28d1a7 + (s - _1872 / sub_9b28d1a7 * sub_9b28d1a7) - s
                    a = a + ((_1872 * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) + (sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) + (s - _1872 / sub_9b28d1a7 * sub_9b28d1a7 * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) - (s * stor5[address(arg1)][idx].field_1024 * b / 100 * 10^6) / 8760 * 24 * 3600)
                    b = _1872 + sub_9b28d1a7 + (s - _1872 / sub_9b28d1a7 * sub_9b28d1a7)
                    s = _1872 + sub_9b28d1a7 + (s - _1872 / sub_9b28d1a7 * sub_9b28d1a7)
                    b = (100 * 10^6 * b) - (sub_93520a80 * b) / 100 * 10^6
                    continue 
        if 0 > !a:
            revert with 0, 17
        stor5[address(arg1)][idx].field_512 = block.timestamp
        if idx == -1:
            revert with 0, 17
        idx = idx + 1
        s = (6 * idx) + sha3(sha3(address(arg1), 5))
        continue 
    return 0
}



}
