contract main {




// =====================  Runtime code  =====================


#
#  - sub_05ba9930(?)
#
mapping of struct stor0;
array of uint256 stor2;
array of uint256 stor3;
array of uint256 stor4;
array of address stor5;
array of uint256 stor6;
array of struct stor7;
array of uint256 stor8;
mapping of struct stor10;
array of struct stor11;
mapping of struct stor12;
array of struct stor13;
mapping of struct sub_4088ee14;
array of struct stor15;
address owner;

function sub_4088ee14(?) {
    require calldata.size - 4 >= 32
    require arg1 == address(arg1)
    return sub_4088ee14[address(arg1)].field_0, 
           sub_4088ee14[address(arg1)].field_256,
           sub_4088ee14[address(arg1)].field_512,
           sub_4088ee14[address(arg1)].field_768
}

function owner() {
    return owner
}

function sub_8f9e289d(?) {
    return stor9.length
}

function totalProducts() {
    return stor1.length
}

function _fallback() payable {
    revert
}

function sub_58d0643c(?) {
    return stor3.length, stor4.length, stor5.length, stor6.length, stor7.length, stor8.length
}

function sub_ce9363e8(?) {
    require calldata.size - 4 >= 32
    require arg1 == address(arg1)
    return not bool(stor13[address(arg1)].field_0)
}

function sub_723c1c1a(?) {
    require calldata.size - 4 >= 32
    require arg1 == address(arg1)
    return (block.timestamp < sub_4088ee14[address(arg1)].field_768)
}

function renounceOwnership() {
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    owner = 0
    emit OwnershipTransferred(owner, 0);
}

function sub_77bb3653(?) {
    require calldata.size - 4 >= 64
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    if not stor0[arg1].field_1280:
        revert with 0, 'Product: Product does not exist'
    stor0[arg1].field_512 = arg2
    emit 0x63ab01ad: arg2, arg1, msg.sender
}

function sub_08d43faa(?) {
    require calldata.size - 4 >= 32
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    if not stor0[arg1].field_1280:
        revert with 0, 'Product: Product does not exist'
    stor0[arg1].field_896 = 1
    stor0[arg1].field_904 = 0
    emit 0x867e5e09: arg1, msg.sender
}

function sub_c7497b0c(?) {
    require calldata.size - 4 >= 32
    return stor0[arg1].field_0, 
           stor0[arg1].field_256,
           stor0[arg1].field_512,
           stor0[arg1].field_768,
           stor0[arg1].field_768,
           stor0[arg1].field_1024,
           stor0[arg1].field_1280,
           stor0[arg1].field_1536,
           stor0[arg1].field_1792
}

function transferOwnership(address arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    if not arg1:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'Ownable: new owner is the zero address'
    owner = arg1
    emit OwnershipTransferred(owner, arg1);
}

function sub_02b8b948(?) {
    require calldata.size - 4 >= 64
    require arg1 == address(arg1)
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    if block.timestamp <= sub_4088ee14[address(arg1)].field_768:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    'Finance:not expired, the account cannot be upgraded or renewed.'
    if not sub_4088ee14[address(arg1)].field_512:
        if 1 > !stor8.length:
            revert with 0, 17
        stor8.length++
    sub_4088ee14[address(arg1)].field_512 = block.timestamp
    sub_4088ee14[address(arg1)].field_768 = arg2
    emit 0xbf358482: arg2, msg.sender, address(arg1)
}

function withdraw() {
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    if eth.balance(this.address) <= 0:
        revert with 0, 'Finance: insufficient balance'
    call owner with:
       value eth.balance(this.address) wei
         gas gas_remaining wei
    if not return_data.size:
        if not ext_call.success:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                        'Address: unable to send value, recipient may have reverted'
    else:
        if not ext_call.success:
            revert with 0, 'Address: unable to send value, recipient may have reverted'
    ('bool', 'ext_call.success')
    emit 0xf90e3ba7: owner
}

function sub_16ae911a(?) {
    require calldata.size - 4 >= 160
    require arg4 == uint128(arg4)
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    if stor0[arg1].field_1280:
        revert with 0, 'Product: Product i18nId conflict'
    stor0[arg1].field_0 = arg1
    stor0[arg1].field_256 = arg2
    stor0[arg1].field_512 = arg3
    stor0[arg1].field_768 = uint128(arg4)
    stor0[arg1].field_896 = 0
    stor0[arg1].field_1024 = arg5
    stor0[arg1].field_1280 = block.timestamp
    stor0[arg1].field_1536 = msg.sender or Mask(96, 160, stor0[arg1].field_1536)
    stor0[arg1].field_1792 = msg.sender or Mask(96, 160, stor0[arg1].field_1792)
    stor1.length++
    stor1[stor1.length] = arg1
    emit 0xe7895645: arg1, msg.sender
}

function withdrawERC20(address arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    require ext_code.size(arg1)
    staticcall arg1.0x70a08231 with:
            gas gas_remaining wei
           args this.address
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if ext_call.return_data[0] <= 0:
        revert with 0, 'Address: insufficient balance'
    require ext_code.size(arg1)
    staticcall arg1.0x70a08231 with:
            gas gas_remaining wei
           args this.address
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(arg1)
    call arg1.0xa9059cbb with:
         gas gas_remaining wei
        args owner, ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == bool(ext_call.return_data[0])
    emit 0x8c6761ad: owner, arg1
}

function sub_2b8f72ed(?) payable {
    require calldata.size - 4 >= 128
    require arg2 == address(arg2)
    require arg4 == address(arg4)
    if stor12[arg1].field_2048:
        revert with 0, 'Finance: Order id conflict'
    if address(arg2) == address(arg4):
        revert with 0, 'Finance: I can't invite myself'
    if stor0[arg3].field_1280 <= 0:
        revert with 0, 'Finance: Product does not exist'
    if stor0[arg3].field_896:
        revert with 0, 'Finance: Product does not exist'
    if stor13[address(arg2)].field_0:
        if stor0[arg3].field_512 != msg.value:
            revert with 0, 'Finance:The receivables does not match the actual payment'
        if stor3.length > !stor0[arg3].field_512:
            revert with 0, 17
        stor3.length += stor0[arg3].field_512
        if stor4.length > !0:
            revert with 0, 17
        if stor5.length > !0:
            revert with 0, 17
        if 1 > !stor6.length:
            revert with 0, 17
        stor6.length++
        if stor10[stor0[arg3].field_256].field_256 > !stor0[arg3].field_512:
            revert with 0, 17
        stor10[stor0[arg3].field_256].field_256 += stor0[arg3].field_512
        if stor10[stor0[arg3].field_256].field_512 > !0:
            revert with 0, 17
        if stor10[stor0[arg3].field_256].field_768 > !0:
            revert with 0, 17
        if 1 > !stor10[stor0[arg3].field_256].field_1024:
            revert with 0, 17
        stor10[stor0[arg3].field_256].field_1024++
        if not stor10[stor0[arg3].field_256].field_1280:
            stor10[stor0[arg3].field_256].field_0 = stor0[arg3].field_256
            stor10[stor0[arg3].field_256].field_1280 = block.timestamp
            stor9.length++
            stor9[stor9.length] = stor0[arg3].field_256
        stor11.length++
        stor11[stor11.length].field_0 = arg1
        stor13[address(arg2)].field_0++
        stor13[address(arg2)][stor13[address(arg2)].field_0].field_0 = arg1
        stor12[arg1].field_0 = arg1
        stor12[arg1].field_0 = arg1
        stor12[arg1].field_256 = stor0[arg3].field_256
        stor12[arg1].field_512 = stor0[arg3].field_0
        stor12[arg1].field_768 = stor0[arg3].field_512
        stor12[arg1].field_1024 = stor0[arg3].field_512
        stor12[arg1].field_1280 = address(arg2)
        stor12[arg1].field_1536 = 0
        stor12[arg1].field_1792 = address(arg4)
        stor12[arg1].field_1952 = 0
        stor12[arg1].field_2048 = block.timestamp
        if address(arg4):
            if sub_4088ee14[address(arg4)].field_0 > !0:
                revert with 0, 17
    else:
        if not address(arg4):
            if stor0[arg3].field_512 != msg.value:
                revert with 0, 'Finance:The receivables does not match the actual payment'
            if stor3.length > !stor0[arg3].field_512:
                revert with 0, 17
            stor3.length += stor0[arg3].field_512
            if stor4.length > !0:
                revert with 0, 17
            if stor5.length > !0:
                revert with 0, 17
            if 1 > !stor6.length:
                revert with 0, 17
            stor6.length++
            if 1 > !stor7.length:
                revert with 0, 17
            stor7.length++
            if stor10[stor0[arg3].field_256].field_256 > !stor0[arg3].field_512:
                revert with 0, 17
            stor10[stor0[arg3].field_256].field_256 += stor0[arg3].field_512
            if stor10[stor0[arg3].field_256].field_512 > !0:
                revert with 0, 17
            if stor10[stor0[arg3].field_256].field_768 > !0:
                revert with 0, 17
            if 1 > !stor10[stor0[arg3].field_256].field_1024:
                revert with 0, 17
            stor10[stor0[arg3].field_256].field_1024++
            if not stor10[stor0[arg3].field_256].field_1280:
                stor10[stor0[arg3].field_256].field_0 = stor0[arg3].field_256
                stor10[stor0[arg3].field_256].field_1280 = block.timestamp
                stor9.length++
                stor9[stor9.length] = stor0[arg3].field_256
            stor11.length++
            stor11[stor11.length].field_0 = arg1
            stor13[address(arg2)].field_0++
            stor13[address(arg2)][stor13[address(arg2)].field_0].field_0 = arg1
            stor12[arg1].field_0 = arg1
            stor12[arg1].field_0 = arg1
            stor12[arg1].field_256 = stor0[arg3].field_256
            stor12[arg1].field_512 = stor0[arg3].field_0
            stor12[arg1].field_768 = stor0[arg3].field_512
            stor12[arg1].field_1024 = stor0[arg3].field_512
            stor12[arg1].field_1280 = address(arg2)
            stor12[arg1].field_1536 = 0
            stor12[arg1].field_1792 = address(arg4)
            stor12[arg1].field_1952 = 0
            stor12[arg1].field_2048 = block.timestamp
            if address(arg4):
                if sub_4088ee14[address(arg4)].field_0 > !0:
                    revert with 0, 17
                stor15[address(arg4)].field_0++
                stor15[address(arg4)][stor15[address(arg4)].field_0].field_0 = arg1
                if 1 > !sub_4088ee14[address(arg4)].field_256:
                    revert with 0, 17
                sub_4088ee14[address(arg4)].field_256++
        else:
            if block.timestamp >= sub_4088ee14[address(arg4)].field_768:
                if stor0[arg3].field_512 / 100 > 0x2d82d82d82d82d82d82d82d82d82d82d82d82d82d82d82d82d82d82d82d82d8:
                    revert with 0, 17
                if 90 * stor0[arg3].field_512 / 100 / 100 > 0x1999999999999999999999999999999999999999999999999999999999999999:
                    revert with 0, 17
                if 90 * stor0[arg3].field_512 / 100 / 100 > 0x2d82d82d82d82d82d82d82d82d82d82d82d82d82d82d82d82d82d82d82d82d8:
                    revert with 0, 17
                if 90 * stor0[arg3].field_512 / 100 != msg.value:
                    revert with 0, 'Finance:The receivables does not match the actual payment'
                if 10 * 90 * stor0[arg3].field_512 / 100 / 100:
                    if eth.balance(this.address) < 10 * 90 * stor0[arg3].field_512 / 100 / 100:
                        revert with 0, 'Finance: insufficient balance'
                    call address(arg4) with:
                       value 10 * 90 * stor0[arg3].field_512 / 100 / 100 wei
                         gas gas_remaining wei
                    if not ext_call.success:
                        revert with 0, 'Finance: unable to send value, recipient may have reverted'
                if stor3.length > !(90 * stor0[arg3].field_512 / 100):
                    revert with 0, 17
                stor3.length += 90 * stor0[arg3].field_512 / 100
                if stor4.length > !0:
                    revert with 0, 17
                if stor5.length > !(10 * 90 * stor0[arg3].field_512 / 100 / 100):
                    revert with 0, 17
                stor5.length += 10 * 90 * stor0[arg3].field_512 / 100 / 100
                if 1 > !stor6.length:
                    revert with 0, 17
                stor6.length++
                if 1 > !stor7.length:
                    revert with 0, 17
                stor7.length++
                if stor10[stor0[arg3].field_256].field_256 > !(90 * stor0[arg3].field_512 / 100):
                    revert with 0, 17
                stor10[stor0[arg3].field_256].field_256 += 90 * stor0[arg3].field_512 / 100
                if stor10[stor0[arg3].field_256].field_512 > !0:
                    revert with 0, 17
                if stor10[stor0[arg3].field_256].field_768 > !(10 * 90 * stor0[arg3].field_512 / 100 / 100):
                    revert with 0, 17
                stor10[stor0[arg3].field_256].field_768 += 10 * 90 * stor0[arg3].field_512 / 100 / 100
                if 1 > !stor10[stor0[arg3].field_256].field_1024:
                    revert with 0, 17
                stor10[stor0[arg3].field_256].field_1024++
                if not stor10[stor0[arg3].field_256].field_1280:
                    stor10[stor0[arg3].field_256].field_0 = stor0[arg3].field_256
                    stor10[stor0[arg3].field_256].field_1280 = block.timestamp
                    stor9.length++
                    stor9[stor9.length] = stor0[arg3].field_256
                stor11.length++
                stor11[stor11.length].field_0 = arg1
                stor13[address(arg2)].field_0++
                stor13[address(arg2)][stor13[address(arg2)].field_0].field_0 = arg1
                stor12[arg1].field_0 = arg1
                stor12[arg1].field_0 = arg1
                stor12[arg1].field_256 = stor0[arg3].field_256
                stor12[arg1].field_512 = stor0[arg3].field_0
                stor12[arg1].field_768 = stor0[arg3].field_512
                stor12[arg1].field_1024 = 90 * stor0[arg3].field_512 / 100
                stor12[arg1].field_1280 = address(arg2)
                stor12[arg1].field_1536 = 10 * 90 * stor0[arg3].field_512 / 100 / 100
                stor12[arg1].field_1792 = address(arg4)
                stor12[arg1].field_1952 = 0
                stor12[arg1].field_2048 = block.timestamp
                if address(arg4):
                    if sub_4088ee14[address(arg4)].field_0 > !(10 * 90 * stor0[arg3].field_512 / 100 / 100):
                        revert with 0, 17
                    sub_4088ee14[address(arg4)].field_0 += 10 * 90 * stor0[arg3].field_512 / 100 / 100
                    stor15[address(arg4)].field_0++
                    stor15[address(arg4)][stor15[address(arg4)].field_0].field_0 = arg1
                    if 1 > !sub_4088ee14[address(arg4)].field_256:
                        revert with 0, 17
                    sub_4088ee14[address(arg4)].field_256++
            else:
                if stor0[arg3].field_512 / 100 > 0x333333333333333333333333333333333333333333333333333333333333333:
                    revert with 0, 17
                if 80 * stor0[arg3].field_512 / 100 / 100 > 0x888888888888888888888888888888888888888888888888888888888888888:
                    revert with 0, 17
                if 80 * stor0[arg3].field_512 / 100 / 100 > 0x3a83a83a83a83a83a83a83a83a83a83a83a83a83a83a83a83a83a83a83a83a8:
                    revert with 0, 17
                if 80 * stor0[arg3].field_512 / 100 != msg.value:
                    revert with 0, 'Finance:The receivables does not match the actual payment'
                if 30 * 80 * stor0[arg3].field_512 / 100 / 100:
                    if eth.balance(this.address) < 30 * 80 * stor0[arg3].field_512 / 100 / 100:
                        revert with 0, 'Finance: insufficient balance'
                    call address(arg4) with:
                       value 30 * 80 * stor0[arg3].field_512 / 100 / 100 wei
                         gas gas_remaining wei
                    if not ext_call.success:
                        revert with 0, 'Finance: unable to send value, recipient may have reverted'
                if stor3.length > !(80 * stor0[arg3].field_512 / 100):
                    revert with 0, 17
                stor3.length += 80 * stor0[arg3].field_512 / 100
                if stor4.length > !(30 * 80 * stor0[arg3].field_512 / 100 / 100):
                    revert with 0, 17
                stor4.length += 30 * 80 * stor0[arg3].field_512 / 100 / 100
                if stor5.length > !0:
                    revert with 0, 17
                if 1 > !stor6.length:
                    revert with 0, 17
                stor6.length++
                if 1 > !stor7.length:
                    revert with 0, 17
                stor7.length++
                if stor10[stor0[arg3].field_256].field_256 > !(80 * stor0[arg3].field_512 / 100):
                    revert with 0, 17
                stor10[stor0[arg3].field_256].field_256 += 80 * stor0[arg3].field_512 / 100
                if stor10[stor0[arg3].field_256].field_512 > !(30 * 80 * stor0[arg3].field_512 / 100 / 100):
                    revert with 0, 17
                stor10[stor0[arg3].field_256].field_512 += 30 * 80 * stor0[arg3].field_512 / 100 / 100
                if stor10[stor0[arg3].field_256].field_768 > !0:
                    revert with 0, 17
                if 1 > !stor10[stor0[arg3].field_256].field_1024:
                    revert with 0, 17
                stor10[stor0[arg3].field_256].field_1024++
                if not stor10[stor0[arg3].field_256].field_1280:
                    stor10[stor0[arg3].field_256].field_0 = stor0[arg3].field_256
                    stor10[stor0[arg3].field_256].field_1280 = block.timestamp
                    stor9.length++
                    stor9[stor9.length] = stor0[arg3].field_256
                stor11.length++
                stor11[stor11.length].field_0 = arg1
                stor13[address(arg2)].field_0++
                stor13[address(arg2)][stor13[address(arg2)].field_0].field_0 = arg1
                stor12[arg1].field_0 = arg1
                stor12[arg1].field_0 = arg1
                stor12[arg1].field_256 = stor0[arg3].field_256
                stor12[arg1].field_512 = stor0[arg3].field_0
                stor12[arg1].field_768 = stor0[arg3].field_512
                stor12[arg1].field_1024 = 80 * stor0[arg3].field_512 / 100
                stor12[arg1].field_1280 = address(arg2)
                stor12[arg1].field_1536 = 30 * 80 * stor0[arg3].field_512 / 100 / 100
                stor12[arg1].field_1792 = address(arg4)
                stor12[arg1].field_1952 = 1
                stor12[arg1].field_2048 = block.timestamp
                if address(arg4):
                    if sub_4088ee14[address(arg4)].field_0 > !(30 * 80 * stor0[arg3].field_512 / 100 / 100):
                        revert with 0, 17
                    sub_4088ee14[address(arg4)].field_0 += 30 * 80 * stor0[arg3].field_512 / 100 / 100
                    stor15[address(arg4)].field_0++
                    stor15[address(arg4)][stor15[address(arg4)].field_0].field_0 = arg1
                    if 1 > !sub_4088ee14[address(arg4)].field_256:
                        revert with 0, 17
                    sub_4088ee14[address(arg4)].field_256++
    emit 0xb3c5e402: address(arg2), arg1
}

function sub_547bc0d9(?) {
    require calldata.size - 4 >= 96
    if arg1 >= stor9.length:
        if stor9.length < 1:
            revert with 0, 17
        if arg3:
            if arg2 <= stor9.length - 1:
                if arg2 > test266151307():
                    revert with 0, 65
                mem[96] = arg2
                mem[64] = (32 * arg2) + 128
                if not arg2:
                    idx = 0
                    while idx < arg2:
                        if stor9.length - 1 < idx:
                            revert with 0, 17
                        if stor9.length + -idx - 1 >= stor9.length:
                            revert with 0, 50
                        mem[0] = stor[('name', 'stor9', 9) + stor9.length - idx]
                        mem[32] = 10
                        _508 = mem[64]
                        mem[64] = mem[64] + 192
                        mem[_508] = stor10[stor[('name', 'stor9', 9) + stor9.length - idx]].field_0
                        mem[_508 + 32] = stor10[stor[('name', 'stor9', 9) + stor9.length - idx]].field_256
                        mem[_508 + 64] = stor10[stor[('name', 'stor9', 9) + stor9.length - idx]].field_512
                        mem[_508 + 96] = stor10[stor[('name', 'stor9', 9) + stor9.length - idx]].field_768
                        mem[_508 + 128] = stor10[stor[('name', 'stor9', 9) + stor9.length - idx]].field_1024
                        mem[_508 + 160] = stor10[stor[('name', 'stor9', 9) + stor9.length - idx]].field_1280
                        if idx >= mem[96]:
                            revert with 0, 50
                        mem[(32 * idx) + 128] = _508
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if stor9.length - 1 < arg2:
                        _478 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_478] = 4
                        mem[_478 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                        _482 = mem[64]
                        mem[mem[64]] = 96
                        _504 = mem[96]
                        mem[mem[64] + 96] = mem[96]
                        idx = 0
                        s = 128
                        t = mem[64] + 128
                        while idx < _504:
                            _1019 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_1019 + 32]
                            mem[t + 64] = mem[_1019 + 64]
                            mem[t + 96] = mem[_1019 + 96]
                            mem[t + 128] = mem[_1019 + 128]
                            mem[t + 160] = mem[_1019 + 160]
                            idx = idx + 1
                            s = s + 32
                            t = t + 192
                            continue 
                        mem[_482 + 32] = 0
                        mem[_482 + 64] = (192 * _504) + 128
                        _1083 = mem[_478]
                        mem[_482 + (192 * _504) + 128] = mem[_478]
                        mem[_482 + (192 * _504) + 160 len ceil32(_1083)] = mem[_478 + 32 len ceil32(_1083)]
                        if ceil32(_1083) > _1083:
                            mem[_482 + (192 * _504) + _1083 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_1083) + _482 + (192 * _504) + -mem[64] + 160
                    _505 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_505] = 7
                    mem[_505 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                    _549 = mem[64]
                    mem[mem[64]] = 96
                    _569 = mem[96]
                    mem[mem[64] + 96] = mem[96]
                    idx = 0
                    s = 128
                    t = mem[64] + 128
                    while idx < _569:
                        _1026 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_1026 + 32]
                        mem[t + 64] = mem[_1026 + 64]
                        mem[t + 96] = mem[_1026 + 96]
                        mem[t + 128] = mem[_1026 + 128]
                        mem[t + 160] = mem[_1026 + 160]
                        idx = idx + 1
                        s = s + 32
                        t = t + 192
                        continue 
                    mem[_549 + 32] = stor9.length + -arg2 - 1
                    mem[_549 + 64] = (192 * _569) + 128
                    _1084 = mem[_505]
                    mem[_549 + (192 * _569) + 128] = mem[_505]
                    mem[_549 + (192 * _569) + 160 len ceil32(_1084)] = mem[_505 + 32 len ceil32(_1084)]
                    if ceil32(_1084) > _1084:
                        mem[_549 + (192 * _569) + _1084 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_1084) + _549 + (192 * _569) + -mem[64] + 160
                mem[64] = (32 * arg2) + 320
                mem[(32 * arg2) + 128] = 0
                mem[(32 * arg2) + 160] = 0
                mem[(32 * arg2) + 192] = 0
                mem[(32 * arg2) + 224] = 0
                mem[(32 * arg2) + 256] = 0
                mem[(32 * arg2) + 288] = 0
                mem[var19001] = (32 * arg2) + 128
                s = var19001
                idx = var19002
                while idx - 1:
                    mem[64] = mem[64] + 192
                    mem[(32 * arg2) + 128] = 0
                    mem[(32 * arg2) + 160] = 0
                    mem[(32 * arg2) + 192] = 0
                    mem[(32 * arg2) + 224] = 0
                    mem[(32 * arg2) + 256] = 0
                    mem[(32 * arg2) + 288] = 0
                    mem[s + 32] = (32 * arg2) + 128
                    s = s + 32
                    idx = idx - 1
                    continue 
                idx = 0
                while idx < arg2:
                    if stor9.length - 1 < idx:
                        revert with 0, 17
                    if stor9.length + -idx - 1 >= stor9.length:
                        revert with 0, 50
                    mem[0] = stor[('name', 'stor9', 9) + stor9.length - idx]
                    mem[32] = 10
                    _1437 = mem[64]
                    mem[64] = mem[64] + 192
                    mem[_1437] = stor10[stor[('name', 'stor9', 9) + stor9.length - idx]].field_0
                    mem[_1437 + 32] = stor10[stor[('name', 'stor9', 9) + stor9.length - idx]].field_256
                    mem[_1437 + 64] = stor10[stor[('name', 'stor9', 9) + stor9.length - idx]].field_512
                    mem[_1437 + 96] = stor10[stor[('name', 'stor9', 9) + stor9.length - idx]].field_768
                    mem[_1437 + 128] = stor10[stor[('name', 'stor9', 9) + stor9.length - idx]].field_1024
                    mem[_1437 + 160] = stor10[stor[('name', 'stor9', 9) + stor9.length - idx]].field_1280
                    if idx >= mem[96]:
                        revert with 0, 50
                    mem[(32 * idx) + 128] = _1437
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
                if stor9.length - 1 < arg2:
                    _1381 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_1381] = 4
                    mem[_1381 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                    _1395 = mem[64]
                    mem[mem[64]] = 96
                    _1433 = mem[96]
                    mem[mem[64] + 96] = mem[96]
                    idx = 0
                    s = 128
                    t = mem[64] + 128
                    while idx < _1433:
                        _1691 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_1691 + 32]
                        mem[t + 64] = mem[_1691 + 64]
                        mem[t + 96] = mem[_1691 + 96]
                        mem[t + 128] = mem[_1691 + 128]
                        mem[t + 160] = mem[_1691 + 160]
                        idx = idx + 1
                        s = s + 32
                        t = t + 192
                        continue 
                    mem[_1395 + 32] = 0
                    mem[_1395 + 64] = (192 * _1433) + 128
                    _1741 = mem[_1381]
                    mem[_1395 + (192 * _1433) + 128] = mem[_1381]
                    mem[_1395 + (192 * _1433) + 160 len ceil32(_1741)] = mem[_1381 + 32 len ceil32(_1741)]
                    if ceil32(_1741) > _1741:
                        mem[_1395 + (192 * _1433) + _1741 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_1741) + _1395 + (192 * _1433) + -mem[64] + 160
                _1434 = mem[64]
                mem[64] = mem[64] + 64
                mem[_1434] = 7
                mem[_1434 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                _1478 = mem[64]
                mem[mem[64]] = 96
                _1496 = mem[96]
                mem[mem[64] + 96] = mem[96]
                idx = 0
                s = 128
                t = mem[64] + 128
                while idx < _1496:
                    _1698 = mem[s]
                    mem[t] = mem[mem[s]]
                    mem[t + 32] = mem[_1698 + 32]
                    mem[t + 64] = mem[_1698 + 64]
                    mem[t + 96] = mem[_1698 + 96]
                    mem[t + 128] = mem[_1698 + 128]
                    mem[t + 160] = mem[_1698 + 160]
                    idx = idx + 1
                    s = s + 32
                    t = t + 192
                    continue 
                mem[_1478 + 32] = stor9.length + -arg2 - 1
                mem[_1478 + 64] = (192 * _1496) + 128
                _1742 = mem[_1434]
                mem[_1478 + (192 * _1496) + 128] = mem[_1434]
                mem[_1478 + (192 * _1496) + 160 len ceil32(_1742)] = mem[_1434 + 32 len ceil32(_1742)]
                if ceil32(_1742) > _1742:
                    mem[_1478 + (192 * _1496) + _1742 + 160] = 0
                return memory
                  from mem[64]
                   len ceil32(_1742) + _1478 + (192 * _1496) + -mem[64] + 160
            if 1 > !(stor9.length - 1):
                revert with 0, 17
            if stor9.length > test266151307():
                revert with 0, 65
            mem[96] = stor9.length
            mem[64] = (32 * stor9.length) + 128
            if not stor9.length:
                idx = 0
                while idx < stor9.length:
                    if stor9.length - 1 < idx:
                        revert with 0, 17
                    if stor9.length + -idx - 1 >= stor9.length:
                        revert with 0, 50
                    mem[0] = stor[('name', 'stor9', 9) + stor9.length - idx]
                    mem[32] = 10
                    _514 = mem[64]
                    mem[64] = mem[64] + 192
                    mem[_514] = stor10[stor[('name', 'stor9', 9) + stor9.length - idx]].field_0
                    mem[_514 + 32] = stor10[stor[('name', 'stor9', 9) + stor9.length - idx]].field_256
                    mem[_514 + 64] = stor10[stor[('name', 'stor9', 9) + stor9.length - idx]].field_512
                    mem[_514 + 96] = stor10[stor[('name', 'stor9', 9) + stor9.length - idx]].field_768
                    mem[_514 + 128] = stor10[stor[('name', 'stor9', 9) + stor9.length - idx]].field_1024
                    mem[_514 + 160] = stor10[stor[('name', 'stor9', 9) + stor9.length - idx]].field_1280
                    if idx >= mem[96]:
                        revert with 0, 50
                    mem[(32 * idx) + 128] = _514
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
                if stor9.length - 1 < stor9.length:
                    _479 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_479] = 4
                    mem[_479 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                    _483 = mem[64]
                    mem[mem[64]] = 96
                    _510 = mem[96]
                    mem[mem[64] + 96] = mem[96]
                    idx = 0
                    s = 128
                    t = mem[64] + 128
                    while idx < _510:
                        _1033 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_1033 + 32]
                        mem[t + 64] = mem[_1033 + 64]
                        mem[t + 96] = mem[_1033 + 96]
                        mem[t + 128] = mem[_1033 + 128]
                        mem[t + 160] = mem[_1033 + 160]
                        idx = idx + 1
                        s = s + 32
                        t = t + 192
                        continue 
                    mem[_483 + 32] = 0
                    mem[_483 + 64] = (192 * _510) + 128
                    _1085 = mem[_479]
                    mem[_483 + (192 * _510) + 128] = mem[_479]
                    mem[_483 + (192 * _510) + 160 len ceil32(_1085)] = mem[_479 + 32 len ceil32(_1085)]
                    if ceil32(_1085) > _1085:
                        mem[_483 + (192 * _510) + _1085 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_1085) + _483 + (192 * _510) + -mem[64] + 160
                _511 = mem[64]
                mem[64] = mem[64] + 64
                mem[_511] = 7
                mem[_511 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                _558 = mem[64]
                mem[mem[64]] = 96
                _571 = mem[96]
                mem[mem[64] + 96] = mem[96]
                idx = 0
                s = 128
                t = mem[64] + 128
                while idx < _571:
                    _1040 = mem[s]
                    mem[t] = mem[mem[s]]
                    mem[t + 32] = mem[_1040 + 32]
                    mem[t + 64] = mem[_1040 + 64]
                    mem[t + 96] = mem[_1040 + 96]
                    mem[t + 128] = mem[_1040 + 128]
                    mem[t + 160] = mem[_1040 + 160]
                    idx = idx + 1
                    s = s + 32
                    t = t + 192
                    continue 
                mem[_558 + 32] = -1
                mem[_558 + 64] = (192 * _571) + 128
                _1086 = mem[_511]
                mem[_558 + (192 * _571) + 128] = mem[_511]
                mem[_558 + (192 * _571) + 160 len ceil32(_1086)] = mem[_511 + 32 len ceil32(_1086)]
                if ceil32(_1086) > _1086:
                    mem[_558 + (192 * _571) + _1086 + 160] = 0
                return memory
                  from mem[64]
                   len ceil32(_1086) + _558 + (192 * _571) + -mem[64] + 160
            mem[64] = (32 * stor9.length) + 320
            mem[(32 * stor9.length) + 128] = 0
            mem[(32 * stor9.length) + 160] = 0
            mem[(32 * stor9.length) + 192] = 0
            mem[(32 * stor9.length) + 224] = 0
            mem[(32 * stor9.length) + 256] = 0
            mem[(32 * stor9.length) + 288] = 0
            mem[var23001] = (32 * stor9.length) + 128
            s = var23001
            idx = var23002
            while idx - 1:
                mem[64] = mem[64] + 192
                mem[(32 * stor9.length) + 128] = 0
                mem[(32 * stor9.length) + 160] = 0
                mem[(32 * stor9.length) + 192] = 0
                mem[(32 * stor9.length) + 224] = 0
                mem[(32 * stor9.length) + 256] = 0
                mem[(32 * stor9.length) + 288] = 0
                mem[s + 32] = (32 * stor9.length) + 128
                s = s + 32
                idx = idx - 1
                continue 
            idx = 0
            while idx < stor9.length:
                if stor9.length - 1 < idx:
                    revert with 0, 17
                if stor9.length + -idx - 1 >= stor9.length:
                    revert with 0, 50
                mem[0] = stor[('name', 'stor9', 9) + stor9.length - idx]
                mem[32] = 10
                _1445 = mem[64]
                mem[64] = mem[64] + 192
                mem[_1445] = stor10[stor[('name', 'stor9', 9) + stor9.length - idx]].field_0
                mem[_1445 + 32] = stor10[stor[('name', 'stor9', 9) + stor9.length - idx]].field_256
                mem[_1445 + 64] = stor10[stor[('name', 'stor9', 9) + stor9.length - idx]].field_512
                mem[_1445 + 96] = stor10[stor[('name', 'stor9', 9) + stor9.length - idx]].field_768
                mem[_1445 + 128] = stor10[stor[('name', 'stor9', 9) + stor9.length - idx]].field_1024
                mem[_1445 + 160] = stor10[stor[('name', 'stor9', 9) + stor9.length - idx]].field_1280
                if idx >= mem[96]:
                    revert with 0, 50
                mem[(32 * idx) + 128] = _1445
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
            if stor9.length - 1 < stor9.length:
                _1382 = mem[64]
                mem[64] = mem[64] + 64
                mem[_1382] = 4
                mem[_1382 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                _1398 = mem[64]
                mem[mem[64]] = 96
                _1441 = mem[96]
                mem[mem[64] + 96] = mem[96]
                idx = 0
                s = 128
                t = mem[64] + 128
                while idx < _1441:
                    _1705 = mem[s]
                    mem[t] = mem[mem[s]]
                    mem[t + 32] = mem[_1705 + 32]
                    mem[t + 64] = mem[_1705 + 64]
                    mem[t + 96] = mem[_1705 + 96]
                    mem[t + 128] = mem[_1705 + 128]
                    mem[t + 160] = mem[_1705 + 160]
                    idx = idx + 1
                    s = s + 32
                    t = t + 192
                    continue 
                mem[_1398 + 32] = 0
                mem[_1398 + 64] = (192 * _1441) + 128
                _1743 = mem[_1382]
                mem[_1398 + (192 * _1441) + 128] = mem[_1382]
                mem[_1398 + (192 * _1441) + 160 len ceil32(_1743)] = mem[_1382 + 32 len ceil32(_1743)]
                if ceil32(_1743) > _1743:
                    mem[_1398 + (192 * _1441) + _1743 + 160] = 0
                return memory
                  from mem[64]
                   len ceil32(_1743) + _1398 + (192 * _1441) + -mem[64] + 160
            _1442 = mem[64]
            mem[64] = mem[64] + 64
            mem[_1442] = 7
            mem[_1442 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
            _1486 = mem[64]
            mem[mem[64]] = 96
            _1498 = mem[96]
            mem[mem[64] + 96] = mem[96]
            idx = 0
            s = 128
            t = mem[64] + 128
            while idx < _1498:
                _1712 = mem[s]
                mem[t] = mem[mem[s]]
                mem[t + 32] = mem[_1712 + 32]
                mem[t + 64] = mem[_1712 + 64]
                mem[t + 96] = mem[_1712 + 96]
                mem[t + 128] = mem[_1712 + 128]
                mem[t + 160] = mem[_1712 + 160]
                idx = idx + 1
                s = s + 32
                t = t + 192
                continue 
            mem[_1486 + 32] = -1
            mem[_1486 + 64] = (192 * _1498) + 128
            _1744 = mem[_1442]
            mem[_1486 + (192 * _1498) + 128] = mem[_1442]
            mem[_1486 + (192 * _1498) + 160 len ceil32(_1744)] = mem[_1442 + 32 len ceil32(_1744)]
            if ceil32(_1744) > _1744:
                mem[_1486 + (192 * _1498) + _1744 + 160] = 0
            return memory
              from mem[64]
               len ceil32(_1744) + _1486 + (192 * _1498) + -mem[64] + 160
        if stor9.length < stor9.length - 1:
            revert with 0, 17
        if arg2 > 1:
            if stor9.length < stor9.length - 1:
                revert with 0, 17
            mem[96] = 1
            mem[64] = 352
            mem[160] = 0
            mem[192] = 0
            mem[224] = 0
            mem[256] = 0
            mem[288] = 0
            mem[320] = 0
            mem[128] = 160
            idx = 0
            while idx < 1:
                if stor9.length - 1 > !idx:
                    revert with 0, 17
                if stor9.length + idx - 1 >= stor9.length:
                    revert with 0, 50
                mem[0] = stor[('name', 'stor9', 9) + stor9.length + idx]
                mem[32] = 10
                _522 = mem[64]
                mem[64] = mem[64] + 192
                mem[_522] = stor10[stor[('name', 'stor9', 9) + stor9.length + idx]].field_0
                mem[_522 + 32] = stor10[stor[('name', 'stor9', 9) + stor9.length + idx]].field_256
                mem[_522 + 64] = stor10[stor[('name', 'stor9', 9) + stor9.length + idx]].field_512
                mem[_522 + 96] = stor10[stor[('name', 'stor9', 9) + stor9.length + idx]].field_768
                mem[_522 + 128] = stor10[stor[('name', 'stor9', 9) + stor9.length + idx]].field_1024
                mem[_522 + 160] = stor10[stor[('name', 'stor9', 9) + stor9.length + idx]].field_1280
                if idx >= mem[96]:
                    revert with 0, 50
                mem[(32 * idx) + 128] = _522
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
            if stor9.length - 1 > -2:
                revert with 0, 17
            if stor9.length - 1 > -2:
                revert with 0, 17
            if stor9.length < stor9.length:
                _574 = mem[64]
                mem[64] = mem[64] + 64
                mem[_574] = 7
                mem[_574 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                _654 = mem[64]
                mem[mem[64]] = 96
                _666 = mem[96]
                mem[mem[64] + 96] = mem[96]
                idx = 0
                s = 128
                t = mem[64] + 128
                while idx < _666:
                    _1061 = mem[s]
                    mem[t] = mem[mem[s]]
                    mem[t + 32] = mem[_1061 + 32]
                    mem[t + 64] = mem[_1061 + 64]
                    mem[t + 96] = mem[_1061 + 96]
                    mem[t + 128] = mem[_1061 + 128]
                    mem[t + 160] = mem[_1061 + 160]
                    idx = idx + 1
                    s = s + 32
                    t = t + 192
                    continue 
                mem[_654 + 32] = stor9.length
                mem[_654 + 64] = (192 * _666) + 128
                _1089 = mem[_574]
                mem[_654 + (192 * _666) + 128] = mem[_574]
                mem[_654 + (192 * _666) + 160 len ceil32(_1089)] = mem[_574 + 32 len ceil32(_1089)]
                if ceil32(_1089) > _1089:
                    mem[_654 + (192 * _666) + _1089 + 160] = 0
                return memory
                  from mem[64]
                   len ceil32(_1089) + _654 + (192 * _666) + -mem[64] + 160
            _575 = mem[64]
            mem[64] = mem[64] + 64
            mem[_575] = 4
            mem[_575 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
            _655 = mem[64]
            mem[mem[64]] = 96
            _667 = mem[96]
            mem[mem[64] + 96] = mem[96]
            idx = 0
            s = 128
            t = mem[64] + 128
            while idx < _667:
                _1068 = mem[s]
                mem[t] = mem[mem[s]]
                mem[t + 32] = mem[_1068 + 32]
                mem[t + 64] = mem[_1068 + 64]
                mem[t + 96] = mem[_1068 + 96]
                mem[t + 128] = mem[_1068 + 128]
                mem[t + 160] = mem[_1068 + 160]
                idx = idx + 1
                s = s + 32
                t = t + 192
                continue 
            mem[_655 + 32] = stor9.length
            mem[_655 + 64] = (192 * _667) + 128
            _1090 = mem[_575]
            mem[_655 + (192 * _667) + 128] = mem[_575]
            mem[_655 + (192 * _667) + 160 len ceil32(_1090)] = mem[_575 + 32 len ceil32(_1090)]
            if ceil32(_1090) > _1090:
                mem[_655 + (192 * _667) + _1090 + 160] = 0
            return memory
              from mem[64]
               len ceil32(_1090) + _655 + (192 * _667) + -mem[64] + 160
        mem[96] = arg2
        mem[64] = (32 * arg2) + 128
        if not arg2:
            idx = 0
            while idx < arg2:
                if stor9.length - 1 > !idx:
                    revert with 0, 17
                if stor9.length + idx - 1 >= stor9.length:
                    revert with 0, 50
                mem[0] = stor[('name', 'stor9', 9) + stor9.length + idx]
                mem[32] = 10
                _518 = mem[64]
                mem[64] = mem[64] + 192
                mem[_518] = stor10[stor[('name', 'stor9', 9) + stor9.length + idx]].field_0
                mem[_518 + 32] = stor10[stor[('name', 'stor9', 9) + stor9.length + idx]].field_256
                mem[_518 + 64] = stor10[stor[('name', 'stor9', 9) + stor9.length + idx]].field_512
                mem[_518 + 96] = stor10[stor[('name', 'stor9', 9) + stor9.length + idx]].field_768
                mem[_518 + 128] = stor10[stor[('name', 'stor9', 9) + stor9.length + idx]].field_1024
                mem[_518 + 160] = stor10[stor[('name', 'stor9', 9) + stor9.length + idx]].field_1280
                if idx >= mem[96]:
                    revert with 0, 50
                mem[(32 * idx) + 128] = _518
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
            if stor9.length - 1 > !arg2:
                revert with 0, 17
            if stor9.length - 1 > !arg2:
                revert with 0, 17
            if stor9.length + arg2 - 1 < stor9.length:
                _572 = mem[64]
                mem[64] = mem[64] + 64
                mem[_572] = 7
                mem[_572 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                _648 = mem[64]
                mem[mem[64]] = 96
                _664 = mem[96]
                mem[mem[64] + 96] = mem[96]
                idx = 0
                s = 128
                t = mem[64] + 128
                while idx < _664:
                    _1047 = mem[s]
                    mem[t] = mem[mem[s]]
                    mem[t + 32] = mem[_1047 + 32]
                    mem[t + 64] = mem[_1047 + 64]
                    mem[t + 96] = mem[_1047 + 96]
                    mem[t + 128] = mem[_1047 + 128]
                    mem[t + 160] = mem[_1047 + 160]
                    idx = idx + 1
                    s = s + 32
                    t = t + 192
                    continue 
                mem[_648 + 32] = stor9.length + arg2 - 1
                mem[_648 + 64] = (192 * _664) + 128
                _1087 = mem[_572]
                mem[_648 + (192 * _664) + 128] = mem[_572]
                mem[_648 + (192 * _664) + 160 len ceil32(_1087)] = mem[_572 + 32 len ceil32(_1087)]
                if ceil32(_1087) > _1087:
                    mem[_648 + (192 * _664) + _1087 + 160] = 0
                return memory
                  from mem[64]
                   len ceil32(_1087) + _648 + (192 * _664) + -mem[64] + 160
            _573 = mem[64]
            mem[64] = mem[64] + 64
            mem[_573] = 4
            mem[_573 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
            _649 = mem[64]
            mem[mem[64]] = 96
            _665 = mem[96]
            mem[mem[64] + 96] = mem[96]
            idx = 0
            s = 128
            t = mem[64] + 128
            while idx < _665:
                _1054 = mem[s]
                mem[t] = mem[mem[s]]
                mem[t + 32] = mem[_1054 + 32]
                mem[t + 64] = mem[_1054 + 64]
                mem[t + 96] = mem[_1054 + 96]
                mem[t + 128] = mem[_1054 + 128]
                mem[t + 160] = mem[_1054 + 160]
                idx = idx + 1
                s = s + 32
                t = t + 192
                continue 
            mem[_649 + 32] = stor9.length + arg2 - 1
            mem[_649 + 64] = (192 * _665) + 128
            _1088 = mem[_573]
            mem[_649 + (192 * _665) + 128] = mem[_573]
            mem[_649 + (192 * _665) + 160 len ceil32(_1088)] = mem[_573 + 32 len ceil32(_1088)]
            if ceil32(_1088) > _1088:
                mem[_649 + (192 * _665) + _1088 + 160] = 0
            return memory
              from mem[64]
               len ceil32(_1088) + _649 + (192 * _665) + -mem[64] + 160
        mem[64] = (32 * arg2) + 320
        mem[(32 * arg2) + 128] = 0
        mem[(32 * arg2) + 160] = 0
        mem[(32 * arg2) + 192] = 0
        mem[(32 * arg2) + 224] = 0
        mem[(32 * arg2) + 256] = 0
        mem[(32 * arg2) + 288] = 0
        mem[var22001] = (32 * arg2) + 128
        s = var22001
        idx = var22002
        while idx - 1:
            mem[64] = mem[64] + 192
            mem[(32 * arg2) + 128] = 0
            mem[(32 * arg2) + 160] = 0
            mem[(32 * arg2) + 192] = 0
            mem[(32 * arg2) + 224] = 0
            mem[(32 * arg2) + 256] = 0
            mem[(32 * arg2) + 288] = 0
            mem[s + 32] = (32 * arg2) + 128
            s = s + 32
            idx = idx - 1
            continue 
        idx = 0
        while idx < arg2:
            if stor9.length - 1 > !idx:
                revert with 0, 17
            if stor9.length + idx - 1 >= stor9.length:
                revert with 0, 50
            mem[0] = stor[('name', 'stor9', 9) + stor9.length + idx]
            mem[32] = 10
            _1451 = mem[64]
            mem[64] = mem[64] + 192
            mem[_1451] = stor10[stor[('name', 'stor9', 9) + stor9.length + idx]].field_0
            mem[_1451 + 32] = stor10[stor[('name', 'stor9', 9) + stor9.length + idx]].field_256
            mem[_1451 + 64] = stor10[stor[('name', 'stor9', 9) + stor9.length + idx]].field_512
            mem[_1451 + 96] = stor10[stor[('name', 'stor9', 9) + stor9.length + idx]].field_768
            mem[_1451 + 128] = stor10[stor[('name', 'stor9', 9) + stor9.length + idx]].field_1024
            mem[_1451 + 160] = stor10[stor[('name', 'stor9', 9) + stor9.length + idx]].field_1280
            if idx >= mem[96]:
                revert with 0, 50
            mem[(32 * idx) + 128] = _1451
            if idx == -1:
                revert with 0, 17
            idx = idx + 1
            continue 
        if stor9.length - 1 > !arg2:
            revert with 0, 17
        if stor9.length - 1 > !arg2:
            revert with 0, 17
        if stor9.length + arg2 - 1 < stor9.length:
            _1499 = mem[64]
            mem[64] = mem[64] + 64
            mem[_1499] = 7
            mem[_1499 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
            _1537 = mem[64]
            mem[mem[64]] = 96
            _1547 = mem[96]
            mem[mem[64] + 96] = mem[96]
            idx = 0
            s = 128
            t = mem[64] + 128
            while idx < _1547:
                _1719 = mem[s]
                mem[t] = mem[mem[s]]
                mem[t + 32] = mem[_1719 + 32]
                mem[t + 64] = mem[_1719 + 64]
                mem[t + 96] = mem[_1719 + 96]
                mem[t + 128] = mem[_1719 + 128]
                mem[t + 160] = mem[_1719 + 160]
                idx = idx + 1
                s = s + 32
                t = t + 192
                continue 
            mem[_1537 + 32] = stor9.length + arg2 - 1
            mem[_1537 + 64] = (192 * _1547) + 128
            _1745 = mem[_1499]
            mem[_1537 + (192 * _1547) + 128] = mem[_1499]
            mem[_1537 + (192 * _1547) + 160 len ceil32(_1745)] = mem[_1499 + 32 len ceil32(_1745)]
            if ceil32(_1745) > _1745:
                mem[_1537 + (192 * _1547) + _1745 + 160] = 0
            return memory
              from mem[64]
               len ceil32(_1745) + _1537 + (192 * _1547) + -mem[64] + 160
        _1500 = mem[64]
        mem[64] = mem[64] + 64
        mem[_1500] = 4
        mem[_1500 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
        _1538 = mem[64]
        mem[mem[64]] = 96
        _1548 = mem[96]
        mem[mem[64] + 96] = mem[96]
        idx = 0
        s = 128
        t = mem[64] + 128
        while idx < _1548:
            _1726 = mem[s]
            mem[t] = mem[mem[s]]
            mem[t + 32] = mem[_1726 + 32]
            mem[t + 64] = mem[_1726 + 64]
            mem[t + 96] = mem[_1726 + 96]
            mem[t + 128] = mem[_1726 + 128]
            mem[t + 160] = mem[_1726 + 160]
            idx = idx + 1
            s = s + 32
            t = t + 192
            continue 
        mem[_1538 + 32] = stor9.length + arg2 - 1
        mem[_1538 + 64] = (192 * _1548) + 128
        _1746 = mem[_1500]
        mem[_1538 + (192 * _1548) + 128] = mem[_1500]
        mem[_1538 + (192 * _1548) + 160 len ceil32(_1746)] = mem[_1500 + 32 len ceil32(_1746)]
        if ceil32(_1746) > _1746:
            mem[_1538 + (192 * _1548) + _1746 + 160] = 0
        return memory
          from mem[64]
           len ceil32(_1746) + _1538 + (192 * _1548) + -mem[64] + 160
    if arg3:
        if arg2 <= arg1:
            if arg2 > test266151307():
                revert with 0, 65
            mem[96] = arg2
            mem[64] = (32 * arg2) + 128
            if not arg2:
                idx = 0
                while idx < arg2:
                    if arg1 < idx:
                        revert with 0, 17
                    if arg1 - idx >= stor9.length:
                        revert with 0, 50
                    mem[0] = stor[('name', 'stor9', 9) + arg1 - idx]
                    mem[32] = 10
                    _488 = mem[64]
                    mem[64] = mem[64] + 192
                    mem[_488] = stor10[stor[('name', 'stor9', 9) + arg1 - idx]].field_0
                    mem[_488 + 32] = stor10[stor[('name', 'stor9', 9) + arg1 - idx]].field_256
                    mem[_488 + 64] = stor10[stor[('name', 'stor9', 9) + arg1 - idx]].field_512
                    mem[_488 + 96] = stor10[stor[('name', 'stor9', 9) + arg1 - idx]].field_768
                    mem[_488 + 128] = stor10[stor[('name', 'stor9', 9) + arg1 - idx]].field_1024
                    mem[_488 + 160] = stor10[stor[('name', 'stor9', 9) + arg1 - idx]].field_1280
                    if idx >= mem[96]:
                        revert with 0, 50
                    mem[(32 * idx) + 128] = _488
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
                if arg1 < arg2:
                    _476 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_476] = 4
                    mem[_476 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                    _480 = mem[64]
                    mem[mem[64]] = 96
                    _484 = mem[96]
                    mem[mem[64] + 96] = mem[96]
                    idx = 0
                    s = 128
                    t = mem[64] + 128
                    while idx < _484:
                        _963 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_963 + 32]
                        mem[t + 64] = mem[_963 + 64]
                        mem[t + 96] = mem[_963 + 96]
                        mem[t + 128] = mem[_963 + 128]
                        mem[t + 160] = mem[_963 + 160]
                        idx = idx + 1
                        s = s + 32
                        t = t + 192
                        continue 
                    mem[_480 + 32] = 0
                    mem[_480 + 64] = (192 * _484) + 128
                    _1075 = mem[_476]
                    mem[_480 + (192 * _484) + 128] = mem[_476]
                    mem[_480 + (192 * _484) + 160 len ceil32(_1075)] = mem[_476 + 32 len ceil32(_1075)]
                    if ceil32(_1075) > _1075:
                        mem[_480 + (192 * _484) + _1075 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_1075) + _480 + (192 * _484) + -mem[64] + 160
                _485 = mem[64]
                mem[64] = mem[64] + 64
                mem[_485] = 7
                mem[_485 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                _531 = mem[64]
                mem[mem[64]] = 96
                _561 = mem[96]
                mem[mem[64] + 96] = mem[96]
                idx = 0
                s = 128
                t = mem[64] + 128
                while idx < _561:
                    _970 = mem[s]
                    mem[t] = mem[mem[s]]
                    mem[t + 32] = mem[_970 + 32]
                    mem[t + 64] = mem[_970 + 64]
                    mem[t + 96] = mem[_970 + 96]
                    mem[t + 128] = mem[_970 + 128]
                    mem[t + 160] = mem[_970 + 160]
                    idx = idx + 1
                    s = s + 32
                    t = t + 192
                    continue 
                mem[_531 + 32] = arg1 - arg2
                mem[_531 + 64] = (192 * _561) + 128
                _1076 = mem[_485]
                mem[_531 + (192 * _561) + 128] = mem[_485]
                mem[_531 + (192 * _561) + 160 len ceil32(_1076)] = mem[_485 + 32 len ceil32(_1076)]
                if ceil32(_1076) > _1076:
                    mem[_531 + (192 * _561) + _1076 + 160] = 0
                return memory
                  from mem[64]
                   len ceil32(_1076) + _531 + (192 * _561) + -mem[64] + 160
            mem[64] = (32 * arg2) + 320
            mem[(32 * arg2) + 128] = 0
            mem[(32 * arg2) + 160] = 0
            mem[(32 * arg2) + 192] = 0
            mem[(32 * arg2) + 224] = 0
            mem[(32 * arg2) + 256] = 0
            mem[(32 * arg2) + 288] = 0
            mem[var15001] = (32 * arg2) + 128
            s = var15001
            idx = var15002
            while idx - 1:
                mem[64] = mem[64] + 192
                mem[(32 * arg2) + 128] = 0
                mem[(32 * arg2) + 160] = 0
                mem[(32 * arg2) + 192] = 0
                mem[(32 * arg2) + 224] = 0
                mem[(32 * arg2) + 256] = 0
                mem[(32 * arg2) + 288] = 0
                mem[s + 32] = (32 * arg2) + 128
                s = s + 32
                idx = idx - 1
                continue 
            idx = 0
            while idx < arg2:
                if arg1 < idx:
                    revert with 0, 17
                if arg1 - idx >= stor9.length:
                    revert with 0, 50
                mem[0] = stor[('name', 'stor9', 9) + arg1 - idx]
                mem[32] = 10
                _1409 = mem[64]
                mem[64] = mem[64] + 192
                mem[_1409] = stor10[stor[('name', 'stor9', 9) + arg1 - idx]].field_0
                mem[_1409 + 32] = stor10[stor[('name', 'stor9', 9) + arg1 - idx]].field_256
                mem[_1409 + 64] = stor10[stor[('name', 'stor9', 9) + arg1 - idx]].field_512
                mem[_1409 + 96] = stor10[stor[('name', 'stor9', 9) + arg1 - idx]].field_768
                mem[_1409 + 128] = stor10[stor[('name', 'stor9', 9) + arg1 - idx]].field_1024
                mem[_1409 + 160] = stor10[stor[('name', 'stor9', 9) + arg1 - idx]].field_1280
                if idx >= mem[96]:
                    revert with 0, 50
                mem[(32 * idx) + 128] = _1409
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
            if arg1 < arg2:
                _1379 = mem[64]
                mem[64] = mem[64] + 64
                mem[_1379] = 4
                mem[_1379 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                _1385 = mem[64]
                mem[mem[64]] = 96
                _1405 = mem[96]
                mem[mem[64] + 96] = mem[96]
                idx = 0
                s = 128
                t = mem[64] + 128
                while idx < _1405:
                    _1635 = mem[s]
                    mem[t] = mem[mem[s]]
                    mem[t + 32] = mem[_1635 + 32]
                    mem[t + 64] = mem[_1635 + 64]
                    mem[t + 96] = mem[_1635 + 96]
                    mem[t + 128] = mem[_1635 + 128]
                    mem[t + 160] = mem[_1635 + 160]
                    idx = idx + 1
                    s = s + 32
                    t = t + 192
                    continue 
                mem[_1385 + 32] = 0
                mem[_1385 + 64] = (192 * _1405) + 128
                _1733 = mem[_1379]
                mem[_1385 + (192 * _1405) + 128] = mem[_1379]
                mem[_1385 + (192 * _1405) + 160 len ceil32(_1733)] = mem[_1379 + 32 len ceil32(_1733)]
                if ceil32(_1733) > _1733:
                    mem[_1385 + (192 * _1405) + _1733 + 160] = 0
                return memory
                  from mem[64]
                   len ceil32(_1733) + _1385 + (192 * _1405) + -mem[64] + 160
            _1406 = mem[64]
            mem[64] = mem[64] + 64
            mem[_1406] = 7
            mem[_1406 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
            _1462 = mem[64]
            mem[mem[64]] = 96
            _1488 = mem[96]
            mem[mem[64] + 96] = mem[96]
            idx = 0
            s = 128
            t = mem[64] + 128
            while idx < _1488:
                _1642 = mem[s]
                mem[t] = mem[mem[s]]
                mem[t + 32] = mem[_1642 + 32]
                mem[t + 64] = mem[_1642 + 64]
                mem[t + 96] = mem[_1642 + 96]
                mem[t + 128] = mem[_1642 + 128]
                mem[t + 160] = mem[_1642 + 160]
                idx = idx + 1
                s = s + 32
                t = t + 192
                continue 
            mem[_1462 + 32] = arg1 - arg2
            mem[_1462 + 64] = (192 * _1488) + 128
            _1734 = mem[_1406]
            mem[_1462 + (192 * _1488) + 128] = mem[_1406]
            mem[_1462 + (192 * _1488) + 160 len ceil32(_1734)] = mem[_1406 + 32 len ceil32(_1734)]
            if ceil32(_1734) > _1734:
                mem[_1462 + (192 * _1488) + _1734 + 160] = 0
            return memory
              from mem[64]
               len ceil32(_1734) + _1462 + (192 * _1488) + -mem[64] + 160
        if 1 > !arg1:
            revert with 0, 17
        if arg1 + 1 > test266151307():
            revert with 0, 65
        mem[96] = arg1 + 1
        mem[64] = (32 * arg1 + 1) + 128
        if not arg1 + 1:
            idx = 0
            while idx < arg1 + 1:
                if arg1 < idx:
                    revert with 0, 17
                if arg1 - idx >= stor9.length:
                    revert with 0, 50
                mem[0] = stor[('name', 'stor9', 9) + arg1 - idx]
                mem[32] = 10
                _494 = mem[64]
                mem[64] = mem[64] + 192
                mem[_494] = stor10[stor[('name', 'stor9', 9) + arg1 - idx]].field_0
                mem[_494 + 32] = stor10[stor[('name', 'stor9', 9) + arg1 - idx]].field_256
                mem[_494 + 64] = stor10[stor[('name', 'stor9', 9) + arg1 - idx]].field_512
                mem[_494 + 96] = stor10[stor[('name', 'stor9', 9) + arg1 - idx]].field_768
                mem[_494 + 128] = stor10[stor[('name', 'stor9', 9) + arg1 - idx]].field_1024
                mem[_494 + 160] = stor10[stor[('name', 'stor9', 9) + arg1 - idx]].field_1280
                if idx >= mem[96]:
                    revert with 0, 50
                mem[(32 * idx) + 128] = _494
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
            if arg1 < arg1 + 1:
                _477 = mem[64]
                mem[64] = mem[64] + 64
                mem[_477] = 4
                mem[_477 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                _481 = mem[64]
                mem[mem[64]] = 96
                _490 = mem[96]
                mem[mem[64] + 96] = mem[96]
                idx = 0
                s = 128
                t = mem[64] + 128
                while idx < _490:
                    _977 = mem[s]
                    mem[t] = mem[mem[s]]
                    mem[t + 32] = mem[_977 + 32]
                    mem[t + 64] = mem[_977 + 64]
                    mem[t + 96] = mem[_977 + 96]
                    mem[t + 128] = mem[_977 + 128]
                    mem[t + 160] = mem[_977 + 160]
                    idx = idx + 1
                    s = s + 32
                    t = t + 192
                    continue 
                mem[_481 + 32] = 0
                mem[_481 + 64] = (192 * _490) + 128
                _1077 = mem[_477]
                mem[_481 + (192 * _490) + 128] = mem[_477]
                mem[_481 + (192 * _490) + 160 len ceil32(_1077)] = mem[_477 + 32 len ceil32(_1077)]
                if ceil32(_1077) > _1077:
                    mem[_481 + (192 * _490) + _1077 + 160] = 0
                return memory
                  from mem[64]
                   len ceil32(_1077) + _481 + (192 * _490) + -mem[64] + 160
            _491 = mem[64]
            mem[64] = mem[64] + 64
            mem[_491] = 7
            mem[_491 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
            _540 = mem[64]
            mem[mem[64]] = 96
            _563 = mem[96]
            mem[mem[64] + 96] = mem[96]
            idx = 0
            s = 128
            t = mem[64] + 128
            while idx < _563:
                _984 = mem[s]
                mem[t] = mem[mem[s]]
                mem[t + 32] = mem[_984 + 32]
                mem[t + 64] = mem[_984 + 64]
                mem[t + 96] = mem[_984 + 96]
                mem[t + 128] = mem[_984 + 128]
                mem[t + 160] = mem[_984 + 160]
                idx = idx + 1
                s = s + 32
                t = t + 192
                continue 
            mem[_540 + 32] = -1
            mem[_540 + 64] = (192 * _563) + 128
            _1078 = mem[_491]
            mem[_540 + (192 * _563) + 128] = mem[_491]
            mem[_540 + (192 * _563) + 160 len ceil32(_1078)] = mem[_491 + 32 len ceil32(_1078)]
            if ceil32(_1078) > _1078:
                mem[_540 + (192 * _563) + _1078 + 160] = 0
            return memory
              from mem[64]
               len ceil32(_1078) + _540 + (192 * _563) + -mem[64] + 160
        mem[64] = (32 * arg1 + 1) + 320
        mem[(32 * arg1 + 1) + 128] = 0
        mem[(32 * arg1 + 1) + 160] = 0
        mem[(32 * arg1 + 1) + 192] = 0
        mem[(32 * arg1 + 1) + 224] = 0
        mem[(32 * arg1 + 1) + 256] = 0
        mem[(32 * arg1 + 1) + 288] = 0
        mem[var19001] = (32 * arg1 + 1) + 128
        s = var19001
        idx = var19002
        while idx - 1:
            mem[64] = mem[64] + 192
            mem[(32 * arg1 + 1) + 128] = 0
            mem[(32 * arg1 + 1) + 160] = 0
            mem[(32 * arg1 + 1) + 192] = 0
            mem[(32 * arg1 + 1) + 224] = 0
            mem[(32 * arg1 + 1) + 256] = 0
            mem[(32 * arg1 + 1) + 288] = 0
            mem[s + 32] = (32 * arg1 + 1) + 128
            s = s + 32
            idx = idx - 1
            continue 
        idx = 0
        while idx < arg1 + 1:
            if arg1 < idx:
                revert with 0, 17
            if arg1 - idx >= stor9.length:
                revert with 0, 50
            mem[0] = stor[('name', 'stor9', 9) + arg1 - idx]
            mem[32] = 10
            _1417 = mem[64]
            mem[64] = mem[64] + 192
            mem[_1417] = stor10[stor[('name', 'stor9', 9) + arg1 - idx]].field_0
            mem[_1417 + 32] = stor10[stor[('name', 'stor9', 9) + arg1 - idx]].field_256
            mem[_1417 + 64] = stor10[stor[('name', 'stor9', 9) + arg1 - idx]].field_512
            mem[_1417 + 96] = stor10[stor[('name', 'stor9', 9) + arg1 - idx]].field_768
            mem[_1417 + 128] = stor10[stor[('name', 'stor9', 9) + arg1 - idx]].field_1024
            mem[_1417 + 160] = stor10[stor[('name', 'stor9', 9) + arg1 - idx]].field_1280
            if idx >= mem[96]:
                revert with 0, 50
            mem[(32 * idx) + 128] = _1417
            if idx == -1:
                revert with 0, 17
            idx = idx + 1
            continue 
        if arg1 < arg1 + 1:
            _1380 = mem[64]
            mem[64] = mem[64] + 64
            mem[_1380] = 4
            mem[_1380 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
            _1388 = mem[64]
            mem[mem[64]] = 96
            _1413 = mem[96]
            mem[mem[64] + 96] = mem[96]
            idx = 0
            s = 128
            t = mem[64] + 128
            while idx < _1413:
                _1649 = mem[s]
                mem[t] = mem[mem[s]]
                mem[t + 32] = mem[_1649 + 32]
                mem[t + 64] = mem[_1649 + 64]
                mem[t + 96] = mem[_1649 + 96]
                mem[t + 128] = mem[_1649 + 128]
                mem[t + 160] = mem[_1649 + 160]
                idx = idx + 1
                s = s + 32
                t = t + 192
                continue 
            mem[_1388 + 32] = 0
            mem[_1388 + 64] = (192 * _1413) + 128
            _1735 = mem[_1380]
            mem[_1388 + (192 * _1413) + 128] = mem[_1380]
            mem[_1388 + (192 * _1413) + 160 len ceil32(_1735)] = mem[_1380 + 32 len ceil32(_1735)]
            if ceil32(_1735) > _1735:
                mem[_1388 + (192 * _1413) + _1735 + 160] = 0
            return memory
              from mem[64]
               len ceil32(_1735) + _1388 + (192 * _1413) + -mem[64] + 160
        _1414 = mem[64]
        mem[64] = mem[64] + 64
        mem[_1414] = 7
        mem[_1414 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
        _1470 = mem[64]
        mem[mem[64]] = 96
        _1490 = mem[96]
        mem[mem[64] + 96] = mem[96]
        idx = 0
        s = 128
        t = mem[64] + 128
        while idx < _1490:
            _1656 = mem[s]
            mem[t] = mem[mem[s]]
            mem[t + 32] = mem[_1656 + 32]
            mem[t + 64] = mem[_1656 + 64]
            mem[t + 96] = mem[_1656 + 96]
            mem[t + 128] = mem[_1656 + 128]
            mem[t + 160] = mem[_1656 + 160]
            idx = idx + 1
            s = s + 32
            t = t + 192
            continue 
        mem[_1470 + 32] = -1
        mem[_1470 + 64] = (192 * _1490) + 128
        _1736 = mem[_1414]
        mem[_1470 + (192 * _1490) + 128] = mem[_1414]
        mem[_1470 + (192 * _1490) + 160 len ceil32(_1736)] = mem[_1414 + 32 len ceil32(_1736)]
        if ceil32(_1736) > _1736:
            mem[_1470 + (192 * _1490) + _1736 + 160] = 0
        return memory
          from mem[64]
           len ceil32(_1736) + _1470 + (192 * _1490) + -mem[64] + 160
    if stor9.length < arg1:
        revert with 0, 17
    if arg2 <= stor9.length - arg1:
        if arg2 > test266151307():
            revert with 0, 65
        mem[96] = arg2
        mem[64] = (32 * arg2) + 128
        if not arg2:
            idx = 0
            while idx < arg2:
                if arg1 > !idx:
                    revert with 0, 17
                if arg1 + idx >= stor9.length:
                    revert with 0, 50
                mem[0] = stor[('name', 'stor9', 9) + arg1 + idx]
                mem[32] = 10
                _498 = mem[64]
                mem[64] = mem[64] + 192
                mem[_498] = stor10[stor[('name', 'stor9', 9) + arg1 + idx]].field_0
                mem[_498 + 32] = stor10[stor[('name', 'stor9', 9) + arg1 + idx]].field_256
                mem[_498 + 64] = stor10[stor[('name', 'stor9', 9) + arg1 + idx]].field_512
                mem[_498 + 96] = stor10[stor[('name', 'stor9', 9) + arg1 + idx]].field_768
                mem[_498 + 128] = stor10[stor[('name', 'stor9', 9) + arg1 + idx]].field_1024
                mem[_498 + 160] = stor10[stor[('name', 'stor9', 9) + arg1 + idx]].field_1280
                if idx >= mem[96]:
                    revert with 0, 50
                mem[(32 * idx) + 128] = _498
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
            if arg1 > !arg2:
                revert with 0, 17
            if arg1 > !arg2:
                revert with 0, 17
            if arg1 + arg2 < stor9.length:
                _564 = mem[64]
                mem[64] = mem[64] + 64
                mem[_564] = 7
                mem[_564 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                _608 = mem[64]
                mem[mem[64]] = 96
                _658 = mem[96]
                mem[mem[64] + 96] = mem[96]
                idx = 0
                s = 128
                t = mem[64] + 128
                while idx < _658:
                    _991 = mem[s]
                    mem[t] = mem[mem[s]]
                    mem[t + 32] = mem[_991 + 32]
                    mem[t + 64] = mem[_991 + 64]
                    mem[t + 96] = mem[_991 + 96]
                    mem[t + 128] = mem[_991 + 128]
                    mem[t + 160] = mem[_991 + 160]
                    idx = idx + 1
                    s = s + 32
                    t = t + 192
                    continue 
                mem[_608 + 32] = arg1 + arg2
                mem[_608 + 64] = (192 * _658) + 128
                _1079 = mem[_564]
                mem[_608 + (192 * _658) + 128] = mem[_564]
                mem[_608 + (192 * _658) + 160 len ceil32(_1079)] = mem[_564 + 32 len ceil32(_1079)]
                if ceil32(_1079) > _1079:
                    mem[_608 + (192 * _658) + _1079 + 160] = 0
                return memory
                  from mem[64]
                   len ceil32(_1079) + _608 + (192 * _658) + -mem[64] + 160
            _565 = mem[64]
            mem[64] = mem[64] + 64
            mem[_565] = 4
            mem[_565 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
            _609 = mem[64]
            mem[mem[64]] = 96
            _659 = mem[96]
            mem[mem[64] + 96] = mem[96]
            idx = 0
            s = 128
            t = mem[64] + 128
            while idx < _659:
                _998 = mem[s]
                mem[t] = mem[mem[s]]
                mem[t + 32] = mem[_998 + 32]
                mem[t + 64] = mem[_998 + 64]
                mem[t + 96] = mem[_998 + 96]
                mem[t + 128] = mem[_998 + 128]
                mem[t + 160] = mem[_998 + 160]
                idx = idx + 1
                s = s + 32
                t = t + 192
                continue 
            mem[_609 + 32] = arg1 + arg2
            mem[_609 + 64] = (192 * _659) + 128
            _1080 = mem[_565]
            mem[_609 + (192 * _659) + 128] = mem[_565]
            mem[_609 + (192 * _659) + 160 len ceil32(_1080)] = mem[_565 + 32 len ceil32(_1080)]
            if ceil32(_1080) > _1080:
                mem[_609 + (192 * _659) + _1080 + 160] = 0
            return memory
              from mem[64]
               len ceil32(_1080) + _609 + (192 * _659) + -mem[64] + 160
        mem[64] = (32 * arg2) + 320
        mem[(32 * arg2) + 128] = 0
        mem[(32 * arg2) + 160] = 0
        mem[(32 * arg2) + 192] = 0
        mem[(32 * arg2) + 224] = 0
        mem[(32 * arg2) + 256] = 0
        mem[(32 * arg2) + 288] = 0
        mem[var18001] = (32 * arg2) + 128
        s = var18001
        idx = var18002
        while idx - 1:
            mem[64] = mem[64] + 192
            mem[(32 * arg2) + 128] = 0
            mem[(32 * arg2) + 160] = 0
            mem[(32 * arg2) + 192] = 0
            mem[(32 * arg2) + 224] = 0
            mem[(32 * arg2) + 256] = 0
            mem[(32 * arg2) + 288] = 0
            mem[s + 32] = (32 * arg2) + 128
            s = s + 32
            idx = idx - 1
            continue 
        idx = 0
        while idx < arg2:
            if arg1 > !idx:
                revert with 0, 17
            if arg1 + idx >= stor9.length:
                revert with 0, 50
            mem[0] = stor[('name', 'stor9', 9) + arg1 + idx]
            mem[32] = 10
            _1423 = mem[64]
            mem[64] = mem[64] + 192
            mem[_1423] = stor10[stor[('name', 'stor9', 9) + arg1 + idx]].field_0
            mem[_1423 + 32] = stor10[stor[('name', 'stor9', 9) + arg1 + idx]].field_256
            mem[_1423 + 64] = stor10[stor[('name', 'stor9', 9) + arg1 + idx]].field_512
            mem[_1423 + 96] = stor10[stor[('name', 'stor9', 9) + arg1 + idx]].field_768
            mem[_1423 + 128] = stor10[stor[('name', 'stor9', 9) + arg1 + idx]].field_1024
            mem[_1423 + 160] = stor10[stor[('name', 'stor9', 9) + arg1 + idx]].field_1280
            if idx >= mem[96]:
                revert with 0, 50
            mem[(32 * idx) + 128] = _1423
            if idx == -1:
                revert with 0, 17
            idx = idx + 1
            continue 
        if arg1 > !arg2:
            revert with 0, 17
        if arg1 > !arg2:
            revert with 0, 17
        if arg1 + arg2 < stor9.length:
            _1491 = mem[64]
            mem[64] = mem[64] + 64
            mem[_1491] = 7
            mem[_1491 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
            _1517 = mem[64]
            mem[mem[64]] = 96
            _1541 = mem[96]
            mem[mem[64] + 96] = mem[96]
            idx = 0
            s = 128
            t = mem[64] + 128
            while idx < _1541:
                _1663 = mem[s]
                mem[t] = mem[mem[s]]
                mem[t + 32] = mem[_1663 + 32]
                mem[t + 64] = mem[_1663 + 64]
                mem[t + 96] = mem[_1663 + 96]
                mem[t + 128] = mem[_1663 + 128]
                mem[t + 160] = mem[_1663 + 160]
                idx = idx + 1
                s = s + 32
                t = t + 192
                continue 
            mem[_1517 + 32] = arg1 + arg2
            mem[_1517 + 64] = (192 * _1541) + 128
            _1737 = mem[_1491]
            mem[_1517 + (192 * _1541) + 128] = mem[_1491]
            mem[_1517 + (192 * _1541) + 160 len ceil32(_1737)] = mem[_1491 + 32 len ceil32(_1737)]
            if ceil32(_1737) > _1737:
                mem[_1517 + (192 * _1541) + _1737 + 160] = 0
            return memory
              from mem[64]
               len ceil32(_1737) + _1517 + (192 * _1541) + -mem[64] + 160
        _1492 = mem[64]
        mem[64] = mem[64] + 64
        mem[_1492] = 4
        mem[_1492 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
        _1518 = mem[64]
        mem[mem[64]] = 96
        _1542 = mem[96]
        mem[mem[64] + 96] = mem[96]
        idx = 0
        s = 128
        t = mem[64] + 128
        while idx < _1542:
            _1670 = mem[s]
            mem[t] = mem[mem[s]]
            mem[t + 32] = mem[_1670 + 32]
            mem[t + 64] = mem[_1670 + 64]
            mem[t + 96] = mem[_1670 + 96]
            mem[t + 128] = mem[_1670 + 128]
            mem[t + 160] = mem[_1670 + 160]
            idx = idx + 1
            s = s + 32
            t = t + 192
            continue 
        mem[_1518 + 32] = arg1 + arg2
        mem[_1518 + 64] = (192 * _1542) + 128
        _1738 = mem[_1492]
        mem[_1518 + (192 * _1542) + 128] = mem[_1492]
        mem[_1518 + (192 * _1542) + 160 len ceil32(_1738)] = mem[_1492 + 32 len ceil32(_1738)]
        if ceil32(_1738) > _1738:
            mem[_1518 + (192 * _1542) + _1738 + 160] = 0
        return memory
          from mem[64]
           len ceil32(_1738) + _1518 + (192 * _1542) + -mem[64] + 160
    if stor9.length < arg1:
        revert with 0, 17
    if stor9.length - arg1 > test266151307():
        revert with 0, 65
    mem[96] = stor9.length - arg1
    mem[64] = (32 * stor9.length - arg1) + 128
    if not stor9.length - arg1:
        idx = 0
        while idx < stor9.length - arg1:
            if arg1 > !idx:
                revert with 0, 17
            if arg1 + idx >= stor9.length:
                revert with 0, 50
            mem[0] = stor[('name', 'stor9', 9) + arg1 + idx]
            mem[32] = 10
            _502 = mem[64]
            mem[64] = mem[64] + 192
            mem[_502] = stor10[stor[('name', 'stor9', 9) + arg1 + idx]].field_0
            mem[_502 + 32] = stor10[stor[('name', 'stor9', 9) + arg1 + idx]].field_256
            mem[_502 + 64] = stor10[stor[('name', 'stor9', 9) + arg1 + idx]].field_512
            mem[_502 + 96] = stor10[stor[('name', 'stor9', 9) + arg1 + idx]].field_768
            mem[_502 + 128] = stor10[stor[('name', 'stor9', 9) + arg1 + idx]].field_1024
            mem[_502 + 160] = stor10[stor[('name', 'stor9', 9) + arg1 + idx]].field_1280
            if idx >= mem[96]:
                revert with 0, 50
            mem[(32 * idx) + 128] = _502
            if idx == -1:
                revert with 0, 17
            idx = idx + 1
            continue 
        if arg1 > !(stor9.length - arg1):
            revert with 0, 17
        if arg1 > !(stor9.length - arg1):
            revert with 0, 17
        if stor9.length < stor9.length:
            _566 = mem[64]
            mem[64] = mem[64] + 64
            mem[_566] = 7
            mem[_566 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
            _614 = mem[64]
            mem[mem[64]] = 96
            _660 = mem[96]
            mem[mem[64] + 96] = mem[96]
            idx = 0
            s = 128
            t = mem[64] + 128
            while idx < _660:
                _1005 = mem[s]
                mem[t] = mem[mem[s]]
                mem[t + 32] = mem[_1005 + 32]
                mem[t + 64] = mem[_1005 + 64]
                mem[t + 96] = mem[_1005 + 96]
                mem[t + 128] = mem[_1005 + 128]
                mem[t + 160] = mem[_1005 + 160]
                idx = idx + 1
                s = s + 32
                t = t + 192
                continue 
            mem[_614 + 32] = stor9.length
            mem[_614 + 64] = (192 * _660) + 128
            _1081 = mem[_566]
            mem[_614 + (192 * _660) + 128] = mem[_566]
            mem[_614 + (192 * _660) + 160 len ceil32(_1081)] = mem[_566 + 32 len ceil32(_1081)]
            if ceil32(_1081) > _1081:
                mem[_614 + (192 * _660) + _1081 + 160] = 0
            return memory
              from mem[64]
               len ceil32(_1081) + _614 + (192 * _660) + -mem[64] + 160
        _567 = mem[64]
        mem[64] = mem[64] + 64
        mem[_567] = 4
        mem[_567 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
        _615 = mem[64]
        mem[mem[64]] = 96
        _661 = mem[96]
        mem[mem[64] + 96] = mem[96]
        idx = 0
        s = 128
        t = mem[64] + 128
        while idx < _661:
            _1012 = mem[s]
            mem[t] = mem[mem[s]]
            mem[t + 32] = mem[_1012 + 32]
            mem[t + 64] = mem[_1012 + 64]
            mem[t + 96] = mem[_1012 + 96]
            mem[t + 128] = mem[_1012 + 128]
            mem[t + 160] = mem[_1012 + 160]
            idx = idx + 1
            s = s + 32
            t = t + 192
            continue 
        mem[_615 + 32] = stor9.length
        mem[_615 + 64] = (192 * _661) + 128
        _1082 = mem[_567]
        mem[_615 + (192 * _661) + 128] = mem[_567]
        mem[_615 + (192 * _661) + 160 len ceil32(_1082)] = mem[_567 + 32 len ceil32(_1082)]
        if ceil32(_1082) > _1082:
            mem[_615 + (192 * _661) + _1082 + 160] = 0
        return memory
          from mem[64]
           len ceil32(_1082) + _615 + (192 * _661) + -mem[64] + 160
    mem[64] = (32 * stor9.length - arg1) + 320
    mem[(32 * stor9.length - arg1) + 128] = 0
    mem[(32 * stor9.length - arg1) + 160] = 0
    mem[(32 * stor9.length - arg1) + 192] = 0
    mem[(32 * stor9.length - arg1) + 224] = 0
    mem[(32 * stor9.length - arg1) + 256] = 0
    mem[(32 * stor9.length - arg1) + 288] = 0
    mem[var22001] = (32 * stor9.length - arg1) + 128
    s = var22001
    idx = var22002
    while idx - 1:
        mem[64] = mem[64] + 192
        mem[(32 * stor9.length - arg1) + 128] = 0
        mem[(32 * stor9.length - arg1) + 160] = 0
        mem[(32 * stor9.length - arg1) + 192] = 0
        mem[(32 * stor9.length - arg1) + 224] = 0
        mem[(32 * stor9.length - arg1) + 256] = 0
        mem[(32 * stor9.length - arg1) + 288] = 0
        mem[s + 32] = (32 * stor9.length - arg1) + 128
        s = s + 32
        idx = idx - 1
        continue 
    idx = 0
    while idx < stor9.length - arg1:
        if arg1 > !idx:
            revert with 0, 17
        if arg1 + idx >= stor9.length:
            revert with 0, 50
        mem[0] = stor[('name', 'stor9', 9) + arg1 + idx]
        mem[32] = 10
        _1429 = mem[64]
        mem[64] = mem[64] + 192
        mem[_1429] = stor10[stor[('name', 'stor9', 9) + arg1 + idx]].field_0
        mem[_1429 + 32] = stor10[stor[('name', 'stor9', 9) + arg1 + idx]].field_256
        mem[_1429 + 64] = stor10[stor[('name', 'stor9', 9) + arg1 + idx]].field_512
        mem[_1429 + 96] = stor10[stor[('name', 'stor9', 9) + arg1 + idx]].field_768
        mem[_1429 + 128] = stor10[stor[('name', 'stor9', 9) + arg1 + idx]].field_1024
        mem[_1429 + 160] = stor10[stor[('name', 'stor9', 9) + arg1 + idx]].field_1280
        if idx >= mem[96]:
            revert with 0, 50
        mem[(32 * idx) + 128] = _1429
        if idx == -1:
            revert with 0, 17
        idx = idx + 1
        continue 
    if arg1 > !(stor9.length - arg1):
        revert with 0, 17
    if arg1 > !(stor9.length - arg1):
        revert with 0, 17
    if stor9.length < stor9.length:
        _1493 = mem[64]
        mem[64] = mem[64] + 64
        mem[_1493] = 7
        mem[_1493 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
        _1519 = mem[64]
        mem[mem[64]] = 96
        _1543 = mem[96]
        mem[mem[64] + 96] = mem[96]
        idx = 0
        s = 128
        t = mem[64] + 128
        while idx < _1543:
            _1677 = mem[s]
            mem[t] = mem[mem[s]]
            mem[t + 32] = mem[_1677 + 32]
            mem[t + 64] = mem[_1677 + 64]
            mem[t + 96] = mem[_1677 + 96]
            mem[t + 128] = mem[_1677 + 128]
            mem[t + 160] = mem[_1677 + 160]
            idx = idx + 1
            s = s + 32
            t = t + 192
            continue 
        mem[_1519 + 32] = stor9.length
        mem[_1519 + 64] = (192 * _1543) + 128
        _1739 = mem[_1493]
        mem[_1519 + (192 * _1543) + 128] = mem[_1493]
        mem[_1519 + (192 * _1543) + 160 len ceil32(_1739)] = mem[_1493 + 32 len ceil32(_1739)]
        if ceil32(_1739) > _1739:
            mem[_1519 + (192 * _1543) + _1739 + 160] = 0
        return memory
          from mem[64]
           len ceil32(_1739) + _1519 + (192 * _1543) + -mem[64] + 160
    _1494 = mem[64]
    mem[64] = mem[64] + 64
    mem[_1494] = 4
    mem[_1494 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
    _1520 = mem[64]
    mem[mem[64]] = 96
    _1544 = mem[96]
    mem[mem[64] + 96] = mem[96]
    idx = 0
    s = 128
    t = mem[64] + 128
    while idx < _1544:
        _1684 = mem[s]
        mem[t] = mem[mem[s]]
        mem[t + 32] = mem[_1684 + 32]
        mem[t + 64] = mem[_1684 + 64]
        mem[t + 96] = mem[_1684 + 96]
        mem[t + 128] = mem[_1684 + 128]
        mem[t + 160] = mem[_1684 + 160]
        idx = idx + 1
        s = s + 32
        t = t + 192
        continue 
    mem[_1520 + 32] = stor9.length
    mem[_1520 + 64] = (192 * _1544) + 128
    _1740 = mem[_1494]
    mem[_1520 + (192 * _1544) + 128] = mem[_1494]
    mem[_1520 + (192 * _1544) + 160 len ceil32(_1740)] = mem[_1494 + 32 len ceil32(_1740)]
    if ceil32(_1740) > _1740:
        mem[_1520 + (192 * _1544) + _1740 + 160] = 0
    return memory
      from mem[64]
       len ceil32(_1740) + _1520 + (192 * _1544) + -mem[64] + 160
}

function sub_73c5ccea(?) {
    require calldata.size - 4 >= 96
    if not stor1.length:
        mem[96] = 0
        mem[64] = 192
        mem[128] = 4
        mem[160] = 0x6f76657200000000000000000000000000000000000000000000000000000000
        mem[192] = 96
        mem[288] = 0
        idx = 0
        s = 128
        t = 320
        while idx < mem[96]:
            _578 = mem[s]
            mem[t] = mem[mem[s]]
            mem[t + 32] = mem[_578 + 32]
            mem[t + 64] = mem[_578 + 64]
            mem[t + 96] = mem[_578 + 112 len 16]
            mem[t + 128] = mem[_578 + 144 len 16]
            mem[t + 160] = mem[_578 + 160]
            mem[t + 192] = mem[_578 + 192]
            mem[t + 224] = mem[_578 + 236 len 20]
            mem[t + 256] = mem[_578 + 268 len 20]
            idx = idx + 1
            s = s + 32
            t = t + 288
            continue 
        mem[224] = 0
        mem[256] = 128
        mem[320] = mem[128]
        s = 0
        while 0 < mem[128]:
            mem[352] = mem[160]
            s = 32
            continue 
        if 0 > mem[128]:
            mem[mem[128] + 352] = 0
        return memory
          from mem[64]
           len ceil32(mem[128]) + -mem[64] + 352
    if arg1 >= stor1.length:
        if stor1.length < 1:
            revert with 0, 17
        if arg3:
            if arg2 <= stor1.length - 1:
                if arg2 > test266151307():
                    revert with 0, 65
                mem[96] = arg2
                mem[64] = (32 * arg2) + 128
                if not arg2:
                    idx = 0
                    while idx < arg2:
                        if stor1.length - 1 < idx:
                            revert with 0, 17
                        if stor1.length + -idx - 1 >= stor1.length:
                            revert with 0, 50
                        mem[0] = stor[stor1.length - idx + ('name', 'stor1', 1)]
                        mem[32] = 0
                        _622 = mem[64]
                        mem[64] = mem[64] + 288
                        mem[_622] = stor0[stor[stor1.length - idx + ('name', 'stor1', 1)]].field_0
                        mem[_622 + 32] = stor0[stor[stor1.length - idx + ('name', 'stor1', 1)]].field_256
                        mem[_622 + 64] = stor0[stor[stor1.length - idx + ('name', 'stor1', 1)]].field_512
                        mem[_622 + 96] = stor0[stor[stor1.length - idx + ('name', 'stor1', 1)]].field_768
                        mem[_622 + 128] = stor0[stor[stor1.length - idx + ('name', 'stor1', 1)]].field_896
                        mem[_622 + 160] = stor0[stor[stor1.length - idx + ('name', 'stor1', 1)]].field_1024
                        mem[_622 + 192] = stor0[stor[stor1.length - idx + ('name', 'stor1', 1)]].field_1280
                        mem[_622 + 224] = stor0[stor[stor1.length - idx + ('name', 'stor1', 1)]].field_1536
                        mem[_622 + 256] = stor0[stor[stor1.length - idx + ('name', 'stor1', 1)]].field_1792
                        if idx >= mem[96]:
                            revert with 0, 50
                        mem[(32 * idx) + 128] = _622
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if stor1.length - 1 < arg2:
                        _581 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_581] = 4
                        mem[_581 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                        _595 = mem[64]
                        mem[mem[64]] = 96
                        _618 = mem[96]
                        mem[mem[64] + 96] = mem[96]
                        idx = 0
                        s = 128
                        t = mem[64] + 128
                        while idx < _618:
                            _1177 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_1177 + 32]
                            mem[t + 64] = mem[_1177 + 64]
                            mem[t + 96] = mem[_1177 + 112 len 16]
                            mem[t + 128] = mem[_1177 + 144 len 16]
                            mem[t + 160] = mem[_1177 + 160]
                            mem[t + 192] = mem[_1177 + 192]
                            mem[t + 224] = mem[_1177 + 236 len 20]
                            mem[t + 256] = mem[_1177 + 268 len 20]
                            idx = idx + 1
                            s = s + 32
                            t = t + 288
                            continue 
                        mem[_595 + 32] = 0
                        mem[_595 + 64] = (288 * _618) + 128
                        _1266 = mem[_581]
                        mem[_595 + (288 * _618) + 128] = mem[_581]
                        s = 0
                        while _618 < _1266:
                            mem[(289 * _618) + _595 + 160] = mem[_581 + _618 + 32]
                            s = _618 + 32
                            continue 
                        if _618 > _1266:
                            mem[_595 + (288 * _618) + _1266 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_1266) + _595 + (288 * _618) + -mem[64] + 160
                    _619 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_619] = 7
                    mem[_619 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                    _645 = mem[64]
                    mem[mem[64]] = 96
                    _687 = mem[96]
                    mem[mem[64] + 96] = mem[96]
                    idx = 0
                    s = 128
                    t = mem[64] + 128
                    while idx < _687:
                        _1178 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_1178 + 32]
                        mem[t + 64] = mem[_1178 + 64]
                        mem[t + 96] = mem[_1178 + 112 len 16]
                        mem[t + 128] = mem[_1178 + 144 len 16]
                        mem[t + 160] = mem[_1178 + 160]
                        mem[t + 192] = mem[_1178 + 192]
                        mem[t + 224] = mem[_1178 + 236 len 20]
                        mem[t + 256] = mem[_1178 + 268 len 20]
                        idx = idx + 1
                        s = s + 32
                        t = t + 288
                        continue 
                    mem[_645 + 32] = stor1.length + -arg2 - 1
                    mem[_645 + 64] = (288 * _687) + 128
                    _1276 = mem[_619]
                    mem[_645 + (288 * _687) + 128] = mem[_619]
                    s = 0
                    while _687 < _1276:
                        mem[(289 * _687) + _645 + 160] = mem[_619 + _687 + 32]
                        s = _687 + 32
                        continue 
                    if _687 > _1276:
                        mem[_645 + (288 * _687) + _1276 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_1276) + _645 + (288 * _687) + -mem[64] + 160
                mem[64] = (32 * arg2) + 416
                mem[(32 * arg2) + 128] = 0
                mem[(32 * arg2) + 160] = 0
                mem[(32 * arg2) + 192] = 0
                mem[(32 * arg2) + 224] = 0
                mem[(32 * arg2) + 256] = 0
                mem[(32 * arg2) + 288] = 0
                mem[(32 * arg2) + 320] = 0
                mem[(32 * arg2) + 352] = 0
                mem[(32 * arg2) + 384] = 0
                mem[var20001] = (32 * arg2) + 128
                s = var20001
                idx = var20002
                while idx - 1:
                    mem[64] = mem[64] + 288
                    mem[(32 * arg2) + 128] = 0
                    mem[(32 * arg2) + 160] = 0
                    mem[(32 * arg2) + 192] = 0
                    mem[(32 * arg2) + 224] = 0
                    mem[(32 * arg2) + 256] = 0
                    mem[(32 * arg2) + 288] = 0
                    mem[(32 * arg2) + 320] = 0
                    mem[(32 * arg2) + 352] = 0
                    mem[(32 * arg2) + 384] = 0
                    mem[s + 32] = (32 * arg2) + 128
                    s = s + 32
                    idx = idx - 1
                    continue 
                idx = 0
                while idx < arg2:
                    if stor1.length - 1 < idx:
                        revert with 0, 17
                    if stor1.length + -idx - 1 >= stor1.length:
                        revert with 0, 50
                    mem[0] = stor[stor1.length - idx + ('name', 'stor1', 1)]
                    mem[32] = 0
                    _1736 = mem[64]
                    mem[64] = mem[64] + 288
                    mem[_1736] = stor0[stor[stor1.length - idx + ('name', 'stor1', 1)]].field_0
                    mem[_1736 + 32] = stor0[stor[stor1.length - idx + ('name', 'stor1', 1)]].field_256
                    mem[_1736 + 64] = stor0[stor[stor1.length - idx + ('name', 'stor1', 1)]].field_512
                    mem[_1736 + 96] = stor0[stor[stor1.length - idx + ('name', 'stor1', 1)]].field_768
                    mem[_1736 + 128] = stor0[stor[stor1.length - idx + ('name', 'stor1', 1)]].field_896
                    mem[_1736 + 160] = stor0[stor[stor1.length - idx + ('name', 'stor1', 1)]].field_1024
                    mem[_1736 + 192] = stor0[stor[stor1.length - idx + ('name', 'stor1', 1)]].field_1280
                    mem[_1736 + 224] = stor0[stor[stor1.length - idx + ('name', 'stor1', 1)]].field_1536
                    mem[_1736 + 256] = stor0[stor[stor1.length - idx + ('name', 'stor1', 1)]].field_1792
                    if idx >= mem[96]:
                        revert with 0, 50
                    mem[(32 * idx) + 128] = _1736
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
                if stor1.length - 1 < arg2:
                    _1680 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_1680] = 4
                    mem[_1680 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                    _1694 = mem[64]
                    mem[mem[64]] = 96
                    _1732 = mem[96]
                    mem[mem[64] + 96] = mem[96]
                    idx = 0
                    s = 128
                    t = mem[64] + 128
                    while idx < _1732:
                        _1984 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_1984 + 32]
                        mem[t + 64] = mem[_1984 + 64]
                        mem[t + 96] = mem[_1984 + 112 len 16]
                        mem[t + 128] = mem[_1984 + 144 len 16]
                        mem[t + 160] = mem[_1984 + 160]
                        mem[t + 192] = mem[_1984 + 192]
                        mem[t + 224] = mem[_1984 + 236 len 20]
                        mem[t + 256] = mem[_1984 + 268 len 20]
                        idx = idx + 1
                        s = s + 32
                        t = t + 288
                        continue 
                    mem[_1694 + 32] = 0
                    mem[_1694 + 64] = (288 * _1732) + 128
                    _2070 = mem[_1680]
                    mem[_1694 + (288 * _1732) + 128] = mem[_1680]
                    s = 0
                    while _1732 < _2070:
                        mem[(289 * _1732) + _1694 + 160] = mem[_1680 + _1732 + 32]
                        s = _1732 + 32
                        continue 
                    if _1732 > _2070:
                        mem[_1694 + (288 * _1732) + _2070 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_2070) + _1694 + (288 * _1732) + -mem[64] + 160
                _1733 = mem[64]
                mem[64] = mem[64] + 64
                mem[_1733] = 7
                mem[_1733 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                _1759 = mem[64]
                mem[mem[64]] = 96
                _1798 = mem[96]
                mem[mem[64] + 96] = mem[96]
                idx = 0
                s = 128
                t = mem[64] + 128
                while idx < _1798:
                    _1985 = mem[s]
                    mem[t] = mem[mem[s]]
                    mem[t + 32] = mem[_1985 + 32]
                    mem[t + 64] = mem[_1985 + 64]
                    mem[t + 96] = mem[_1985 + 112 len 16]
                    mem[t + 128] = mem[_1985 + 144 len 16]
                    mem[t + 160] = mem[_1985 + 160]
                    mem[t + 192] = mem[_1985 + 192]
                    mem[t + 224] = mem[_1985 + 236 len 20]
                    mem[t + 256] = mem[_1985 + 268 len 20]
                    idx = idx + 1
                    s = s + 32
                    t = t + 288
                    continue 
                mem[_1759 + 32] = stor1.length + -arg2 - 1
                mem[_1759 + 64] = (288 * _1798) + 128
                _2080 = mem[_1733]
                mem[_1759 + (288 * _1798) + 128] = mem[_1733]
                s = 0
                while _1798 < _2080:
                    mem[(289 * _1798) + _1759 + 160] = mem[_1733 + _1798 + 32]
                    s = _1798 + 32
                    continue 
                if _1798 > _2080:
                    mem[_1759 + (288 * _1798) + _2080 + 160] = 0
                return memory
                  from mem[64]
                   len ceil32(_2080) + _1759 + (288 * _1798) + -mem[64] + 160
            if 1 > !(stor1.length - 1):
                revert with 0, 17
            if stor1.length > test266151307():
                revert with 0, 65
            mem[96] = stor1.length
            mem[64] = (32 * stor1.length) + 128
            if not stor1.length:
                idx = 0
                while idx < stor1.length:
                    if stor1.length - 1 < idx:
                        revert with 0, 17
                    if stor1.length + -idx - 1 >= stor1.length:
                        revert with 0, 50
                    mem[0] = stor[stor1.length - idx + ('name', 'stor1', 1)]
                    mem[32] = 0
                    _628 = mem[64]
                    mem[64] = mem[64] + 288
                    mem[_628] = stor0[stor[stor1.length - idx + ('name', 'stor1', 1)]].field_0
                    mem[_628 + 32] = stor0[stor[stor1.length - idx + ('name', 'stor1', 1)]].field_256
                    mem[_628 + 64] = stor0[stor[stor1.length - idx + ('name', 'stor1', 1)]].field_512
                    mem[_628 + 96] = stor0[stor[stor1.length - idx + ('name', 'stor1', 1)]].field_768
                    mem[_628 + 128] = stor0[stor[stor1.length - idx + ('name', 'stor1', 1)]].field_896
                    mem[_628 + 160] = stor0[stor[stor1.length - idx + ('name', 'stor1', 1)]].field_1024
                    mem[_628 + 192] = stor0[stor[stor1.length - idx + ('name', 'stor1', 1)]].field_1280
                    mem[_628 + 224] = stor0[stor[stor1.length - idx + ('name', 'stor1', 1)]].field_1536
                    mem[_628 + 256] = stor0[stor[stor1.length - idx + ('name', 'stor1', 1)]].field_1792
                    if idx >= mem[96]:
                        revert with 0, 50
                    mem[(32 * idx) + 128] = _628
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
                if stor1.length - 1 < stor1.length:
                    _582 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_582] = 4
                    mem[_582 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                    _596 = mem[64]
                    mem[mem[64]] = 96
                    _624 = mem[96]
                    mem[mem[64] + 96] = mem[96]
                    idx = 0
                    s = 128
                    t = mem[64] + 128
                    while idx < _624:
                        _1179 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_1179 + 32]
                        mem[t + 64] = mem[_1179 + 64]
                        mem[t + 96] = mem[_1179 + 112 len 16]
                        mem[t + 128] = mem[_1179 + 144 len 16]
                        mem[t + 160] = mem[_1179 + 160]
                        mem[t + 192] = mem[_1179 + 192]
                        mem[t + 224] = mem[_1179 + 236 len 20]
                        mem[t + 256] = mem[_1179 + 268 len 20]
                        idx = idx + 1
                        s = s + 32
                        t = t + 288
                        continue 
                    mem[_596 + 32] = 0
                    mem[_596 + 64] = (288 * _624) + 128
                    _1286 = mem[_582]
                    mem[_596 + (288 * _624) + 128] = mem[_582]
                    s = 0
                    while _624 < _1286:
                        mem[(289 * _624) + _596 + 160] = mem[_582 + _624 + 32]
                        s = _624 + 32
                        continue 
                    if _624 > _1286:
                        mem[_596 + (288 * _624) + _1286 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_1286) + _596 + (288 * _624) + -mem[64] + 160
                _625 = mem[64]
                mem[64] = mem[64] + 64
                mem[_625] = 7
                mem[_625 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                _648 = mem[64]
                mem[mem[64]] = 96
                _698 = mem[96]
                mem[mem[64] + 96] = mem[96]
                idx = 0
                s = 128
                t = mem[64] + 128
                while idx < _698:
                    _1180 = mem[s]
                    mem[t] = mem[mem[s]]
                    mem[t + 32] = mem[_1180 + 32]
                    mem[t + 64] = mem[_1180 + 64]
                    mem[t + 96] = mem[_1180 + 112 len 16]
                    mem[t + 128] = mem[_1180 + 144 len 16]
                    mem[t + 160] = mem[_1180 + 160]
                    mem[t + 192] = mem[_1180 + 192]
                    mem[t + 224] = mem[_1180 + 236 len 20]
                    mem[t + 256] = mem[_1180 + 268 len 20]
                    idx = idx + 1
                    s = s + 32
                    t = t + 288
                    continue 
                mem[_648 + 32] = -1
                mem[_648 + 64] = (288 * _698) + 128
                _1296 = mem[_625]
                mem[_648 + (288 * _698) + 128] = mem[_625]
                s = 0
                while _698 < _1296:
                    mem[(289 * _698) + _648 + 160] = mem[_625 + _698 + 32]
                    s = _698 + 32
                    continue 
                if _698 > _1296:
                    mem[_648 + (288 * _698) + _1296 + 160] = 0
                return memory
                  from mem[64]
                   len ceil32(_1296) + _648 + (288 * _698) + -mem[64] + 160
            mem[64] = (32 * stor1.length) + 416
            mem[(32 * stor1.length) + 128] = 0
            mem[(32 * stor1.length) + 160] = 0
            mem[(32 * stor1.length) + 192] = 0
            mem[(32 * stor1.length) + 224] = 0
            mem[(32 * stor1.length) + 256] = 0
            mem[(32 * stor1.length) + 288] = 0
            mem[(32 * stor1.length) + 320] = 0
            mem[(32 * stor1.length) + 352] = 0
            mem[(32 * stor1.length) + 384] = 0
            mem[var24001] = (32 * stor1.length) + 128
            s = var24001
            idx = var24002
            while idx - 1:
                mem[64] = mem[64] + 288
                mem[(32 * stor1.length) + 128] = 0
                mem[(32 * stor1.length) + 160] = 0
                mem[(32 * stor1.length) + 192] = 0
                mem[(32 * stor1.length) + 224] = 0
                mem[(32 * stor1.length) + 256] = 0
                mem[(32 * stor1.length) + 288] = 0
                mem[(32 * stor1.length) + 320] = 0
                mem[(32 * stor1.length) + 352] = 0
                mem[(32 * stor1.length) + 384] = 0
                mem[s + 32] = (32 * stor1.length) + 128
                s = s + 32
                idx = idx - 1
                continue 
            idx = 0
            while idx < stor1.length:
                if stor1.length - 1 < idx:
                    revert with 0, 17
                if stor1.length + -idx - 1 >= stor1.length:
                    revert with 0, 50
                mem[0] = stor[stor1.length - idx + ('name', 'stor1', 1)]
                mem[32] = 0
                _1744 = mem[64]
                mem[64] = mem[64] + 288
                mem[_1744] = stor0[stor[stor1.length - idx + ('name', 'stor1', 1)]].field_0
                mem[_1744 + 32] = stor0[stor[stor1.length - idx + ('name', 'stor1', 1)]].field_256
                mem[_1744 + 64] = stor0[stor[stor1.length - idx + ('name', 'stor1', 1)]].field_512
                mem[_1744 + 96] = stor0[stor[stor1.length - idx + ('name', 'stor1', 1)]].field_768
                mem[_1744 + 128] = stor0[stor[stor1.length - idx + ('name', 'stor1', 1)]].field_896
                mem[_1744 + 160] = stor0[stor[stor1.length - idx + ('name', 'stor1', 1)]].field_1024
                mem[_1744 + 192] = stor0[stor[stor1.length - idx + ('name', 'stor1', 1)]].field_1280
                mem[_1744 + 224] = stor0[stor[stor1.length - idx + ('name', 'stor1', 1)]].field_1536
                mem[_1744 + 256] = stor0[stor[stor1.length - idx + ('name', 'stor1', 1)]].field_1792
                if idx >= mem[96]:
                    revert with 0, 50
                mem[(32 * idx) + 128] = _1744
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
            if stor1.length - 1 < stor1.length:
                _1681 = mem[64]
                mem[64] = mem[64] + 64
                mem[_1681] = 4
                mem[_1681 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                _1697 = mem[64]
                mem[mem[64]] = 96
                _1740 = mem[96]
                mem[mem[64] + 96] = mem[96]
                idx = 0
                s = 128
                t = mem[64] + 128
                while idx < _1740:
                    _1986 = mem[s]
                    mem[t] = mem[mem[s]]
                    mem[t + 32] = mem[_1986 + 32]
                    mem[t + 64] = mem[_1986 + 64]
                    mem[t + 96] = mem[_1986 + 112 len 16]
                    mem[t + 128] = mem[_1986 + 144 len 16]
                    mem[t + 160] = mem[_1986 + 160]
                    mem[t + 192] = mem[_1986 + 192]
                    mem[t + 224] = mem[_1986 + 236 len 20]
                    mem[t + 256] = mem[_1986 + 268 len 20]
                    idx = idx + 1
                    s = s + 32
                    t = t + 288
                    continue 
                mem[_1697 + 32] = 0
                mem[_1697 + 64] = (288 * _1740) + 128
                _2090 = mem[_1681]
                mem[_1697 + (288 * _1740) + 128] = mem[_1681]
                s = 0
                while _1740 < _2090:
                    mem[(289 * _1740) + _1697 + 160] = mem[_1681 + _1740 + 32]
                    s = _1740 + 32
                    continue 
                if _1740 > _2090:
                    mem[_1697 + (288 * _1740) + _2090 + 160] = 0
                return memory
                  from mem[64]
                   len ceil32(_2090) + _1697 + (288 * _1740) + -mem[64] + 160
            _1741 = mem[64]
            mem[64] = mem[64] + 64
            mem[_1741] = 7
            mem[_1741 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
            _1761 = mem[64]
            mem[mem[64]] = 96
            _1809 = mem[96]
            mem[mem[64] + 96] = mem[96]
            idx = 0
            s = 128
            t = mem[64] + 128
            while idx < _1809:
                _1987 = mem[s]
                mem[t] = mem[mem[s]]
                mem[t + 32] = mem[_1987 + 32]
                mem[t + 64] = mem[_1987 + 64]
                mem[t + 96] = mem[_1987 + 112 len 16]
                mem[t + 128] = mem[_1987 + 144 len 16]
                mem[t + 160] = mem[_1987 + 160]
                mem[t + 192] = mem[_1987 + 192]
                mem[t + 224] = mem[_1987 + 236 len 20]
                mem[t + 256] = mem[_1987 + 268 len 20]
                idx = idx + 1
                s = s + 32
                t = t + 288
                continue 
            mem[_1761 + 32] = -1
            mem[_1761 + 64] = (288 * _1809) + 128
            _2100 = mem[_1741]
            mem[_1761 + (288 * _1809) + 128] = mem[_1741]
            s = 0
            while _1809 < _2100:
                mem[(289 * _1809) + _1761 + 160] = mem[_1741 + _1809 + 32]
                s = _1809 + 32
                continue 
            if _1809 > _2100:
                mem[_1761 + (288 * _1809) + _2100 + 160] = 0
            return memory
              from mem[64]
               len ceil32(_2100) + _1761 + (288 * _1809) + -mem[64] + 160
        if stor1.length < stor1.length - 1:
            revert with 0, 17
        if arg2 > 1:
            if stor1.length < stor1.length - 1:
                revert with 0, 17
            mem[96] = 1
            mem[64] = 448
            mem[160] = 0
            mem[192] = 0
            mem[224] = 0
            mem[256] = 0
            mem[288] = 0
            mem[320] = 0
            mem[352] = 0
            mem[384] = 0
            mem[416] = 0
            mem[128] = 160
            idx = 0
            while idx < 1:
                if stor1.length - 1 > !idx:
                    revert with 0, 17
                if stor1.length + idx - 1 >= stor1.length:
                    revert with 0, 50
                mem[0] = stor[stor1.length + idx + ('name', 'stor1', 1)]
                mem[32] = 0
                _636 = mem[64]
                mem[64] = mem[64] + 288
                mem[_636] = stor0[stor[stor1.length + idx + ('name', 'stor1', 1)]].field_0
                mem[_636 + 32] = stor0[stor[stor1.length + idx + ('name', 'stor1', 1)]].field_256
                mem[_636 + 64] = stor0[stor[stor1.length + idx + ('name', 'stor1', 1)]].field_512
                mem[_636 + 96] = stor0[stor[stor1.length + idx + ('name', 'stor1', 1)]].field_768
                mem[_636 + 128] = stor0[stor[stor1.length + idx + ('name', 'stor1', 1)]].field_896
                mem[_636 + 160] = stor0[stor[stor1.length + idx + ('name', 'stor1', 1)]].field_1024
                mem[_636 + 192] = stor0[stor[stor1.length + idx + ('name', 'stor1', 1)]].field_1280
                mem[_636 + 224] = stor0[stor[stor1.length + idx + ('name', 'stor1', 1)]].field_1536
                mem[_636 + 256] = stor0[stor[stor1.length + idx + ('name', 'stor1', 1)]].field_1792
                if idx >= mem[96]:
                    revert with 0, 50
                mem[(32 * idx) + 128] = _636
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
            if stor1.length - 1 > -2:
                revert with 0, 17
            if stor1.length - 1 > -2:
                revert with 0, 17
            if stor1.length < stor1.length:
                _701 = mem[64]
                mem[64] = mem[64] + 64
                mem[_701] = 7
                mem[_701 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                _758 = mem[64]
                mem[mem[64]] = 96
                _806 = mem[96]
                mem[mem[64] + 96] = mem[96]
                idx = 0
                s = 128
                t = mem[64] + 128
                while idx < _806:
                    _1183 = mem[s]
                    mem[t] = mem[mem[s]]
                    mem[t + 32] = mem[_1183 + 32]
                    mem[t + 64] = mem[_1183 + 64]
                    mem[t + 96] = mem[_1183 + 112 len 16]
                    mem[t + 128] = mem[_1183 + 144 len 16]
                    mem[t + 160] = mem[_1183 + 160]
                    mem[t + 192] = mem[_1183 + 192]
                    mem[t + 224] = mem[_1183 + 236 len 20]
                    mem[t + 256] = mem[_1183 + 268 len 20]
                    idx = idx + 1
                    s = s + 32
                    t = t + 288
                    continue 
                mem[_758 + 32] = stor1.length
                mem[_758 + 64] = (288 * _806) + 128
                _1326 = mem[_701]
                mem[_758 + (288 * _806) + 128] = mem[_701]
                s = 0
                while _806 < _1326:
                    mem[(289 * _806) + _758 + 160] = mem[_701 + _806 + 32]
                    s = _806 + 32
                    continue 
                if _806 > _1326:
                    mem[_758 + (288 * _806) + _1326 + 160] = 0
                return memory
                  from mem[64]
                   len ceil32(_1326) + _758 + (288 * _806) + -mem[64] + 160
            _702 = mem[64]
            mem[64] = mem[64] + 64
            mem[_702] = 4
            mem[_702 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
            _759 = mem[64]
            mem[mem[64]] = 96
            _807 = mem[96]
            mem[mem[64] + 96] = mem[96]
            idx = 0
            s = 128
            t = mem[64] + 128
            while idx < _807:
                _1184 = mem[s]
                mem[t] = mem[mem[s]]
                mem[t + 32] = mem[_1184 + 32]
                mem[t + 64] = mem[_1184 + 64]
                mem[t + 96] = mem[_1184 + 112 len 16]
                mem[t + 128] = mem[_1184 + 144 len 16]
                mem[t + 160] = mem[_1184 + 160]
                mem[t + 192] = mem[_1184 + 192]
                mem[t + 224] = mem[_1184 + 236 len 20]
                mem[t + 256] = mem[_1184 + 268 len 20]
                idx = idx + 1
                s = s + 32
                t = t + 288
                continue 
            mem[_759 + 32] = stor1.length
            mem[_759 + 64] = (288 * _807) + 128
            _1336 = mem[_702]
            mem[_759 + (288 * _807) + 128] = mem[_702]
            s = 0
            while _807 < _1336:
                mem[(289 * _807) + _759 + 160] = mem[_702 + _807 + 32]
                s = _807 + 32
                continue 
            if _807 > _1336:
                mem[_759 + (288 * _807) + _1336 + 160] = 0
            return memory
              from mem[64]
               len ceil32(_1336) + _759 + (288 * _807) + -mem[64] + 160
        mem[96] = arg2
        mem[64] = (32 * arg2) + 128
        if not arg2:
            idx = 0
            while idx < arg2:
                if stor1.length - 1 > !idx:
                    revert with 0, 17
                if stor1.length + idx - 1 >= stor1.length:
                    revert with 0, 50
                mem[0] = stor[stor1.length + idx + ('name', 'stor1', 1)]
                mem[32] = 0
                _632 = mem[64]
                mem[64] = mem[64] + 288
                mem[_632] = stor0[stor[stor1.length + idx + ('name', 'stor1', 1)]].field_0
                mem[_632 + 32] = stor0[stor[stor1.length + idx + ('name', 'stor1', 1)]].field_256
                mem[_632 + 64] = stor0[stor[stor1.length + idx + ('name', 'stor1', 1)]].field_512
                mem[_632 + 96] = stor0[stor[stor1.length + idx + ('name', 'stor1', 1)]].field_768
                mem[_632 + 128] = stor0[stor[stor1.length + idx + ('name', 'stor1', 1)]].field_896
                mem[_632 + 160] = stor0[stor[stor1.length + idx + ('name', 'stor1', 1)]].field_1024
                mem[_632 + 192] = stor0[stor[stor1.length + idx + ('name', 'stor1', 1)]].field_1280
                mem[_632 + 224] = stor0[stor[stor1.length + idx + ('name', 'stor1', 1)]].field_1536
                mem[_632 + 256] = stor0[stor[stor1.length + idx + ('name', 'stor1', 1)]].field_1792
                if idx >= mem[96]:
                    revert with 0, 50
                mem[(32 * idx) + 128] = _632
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
            if stor1.length - 1 > !arg2:
                revert with 0, 17
            if stor1.length - 1 > !arg2:
                revert with 0, 17
            if stor1.length + arg2 - 1 < stor1.length:
                _699 = mem[64]
                mem[64] = mem[64] + 64
                mem[_699] = 7
                mem[_699 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                _752 = mem[64]
                mem[mem[64]] = 96
                _804 = mem[96]
                mem[mem[64] + 96] = mem[96]
                idx = 0
                s = 128
                t = mem[64] + 128
                while idx < _804:
                    _1181 = mem[s]
                    mem[t] = mem[mem[s]]
                    mem[t + 32] = mem[_1181 + 32]
                    mem[t + 64] = mem[_1181 + 64]
                    mem[t + 96] = mem[_1181 + 112 len 16]
                    mem[t + 128] = mem[_1181 + 144 len 16]
                    mem[t + 160] = mem[_1181 + 160]
                    mem[t + 192] = mem[_1181 + 192]
                    mem[t + 224] = mem[_1181 + 236 len 20]
                    mem[t + 256] = mem[_1181 + 268 len 20]
                    idx = idx + 1
                    s = s + 32
                    t = t + 288
                    continue 
                mem[_752 + 32] = stor1.length + arg2 - 1
                mem[_752 + 64] = (288 * _804) + 128
                _1306 = mem[_699]
                mem[_752 + (288 * _804) + 128] = mem[_699]
                s = 0
                while _804 < _1306:
                    mem[(289 * _804) + _752 + 160] = mem[_699 + _804 + 32]
                    s = _804 + 32
                    continue 
                if _804 > _1306:
                    mem[_752 + (288 * _804) + _1306 + 160] = 0
                return memory
                  from mem[64]
                   len ceil32(_1306) + _752 + (288 * _804) + -mem[64] + 160
            _700 = mem[64]
            mem[64] = mem[64] + 64
            mem[_700] = 4
            mem[_700 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
            _753 = mem[64]
            mem[mem[64]] = 96
            _805 = mem[96]
            mem[mem[64] + 96] = mem[96]
            idx = 0
            s = 128
            t = mem[64] + 128
            while idx < _805:
                _1182 = mem[s]
                mem[t] = mem[mem[s]]
                mem[t + 32] = mem[_1182 + 32]
                mem[t + 64] = mem[_1182 + 64]
                mem[t + 96] = mem[_1182 + 112 len 16]
                mem[t + 128] = mem[_1182 + 144 len 16]
                mem[t + 160] = mem[_1182 + 160]
                mem[t + 192] = mem[_1182 + 192]
                mem[t + 224] = mem[_1182 + 236 len 20]
                mem[t + 256] = mem[_1182 + 268 len 20]
                idx = idx + 1
                s = s + 32
                t = t + 288
                continue 
            mem[_753 + 32] = stor1.length + arg2 - 1
            mem[_753 + 64] = (288 * _805) + 128
            _1316 = mem[_700]
            mem[_753 + (288 * _805) + 128] = mem[_700]
            s = 0
            while _805 < _1316:
                mem[(289 * _805) + _753 + 160] = mem[_700 + _805 + 32]
                s = _805 + 32
                continue 
            if _805 > _1316:
                mem[_753 + (288 * _805) + _1316 + 160] = 0
            return memory
              from mem[64]
               len ceil32(_1316) + _753 + (288 * _805) + -mem[64] + 160
        mem[64] = (32 * arg2) + 416
        mem[(32 * arg2) + 128] = 0
        mem[(32 * arg2) + 160] = 0
        mem[(32 * arg2) + 192] = 0
        mem[(32 * arg2) + 224] = 0
        mem[(32 * arg2) + 256] = 0
        mem[(32 * arg2) + 288] = 0
        mem[(32 * arg2) + 320] = 0
        mem[(32 * arg2) + 352] = 0
        mem[(32 * arg2) + 384] = 0
        mem[var23001] = (32 * arg2) + 128
        s = var23001
        idx = var23002
        while idx - 1:
            mem[64] = mem[64] + 288
            mem[(32 * arg2) + 128] = 0
            mem[(32 * arg2) + 160] = 0
            mem[(32 * arg2) + 192] = 0
            mem[(32 * arg2) + 224] = 0
            mem[(32 * arg2) + 256] = 0
            mem[(32 * arg2) + 288] = 0
            mem[(32 * arg2) + 320] = 0
            mem[(32 * arg2) + 352] = 0
            mem[(32 * arg2) + 384] = 0
            mem[s + 32] = (32 * arg2) + 128
            s = s + 32
            idx = idx - 1
            continue 
        idx = 0
        while idx < arg2:
            if stor1.length - 1 > !idx:
                revert with 0, 17
            if stor1.length + idx - 1 >= stor1.length:
                revert with 0, 50
            mem[0] = stor[stor1.length + idx + ('name', 'stor1', 1)]
            mem[32] = 0
            _1750 = mem[64]
            mem[64] = mem[64] + 288
            mem[_1750] = stor0[stor[stor1.length + idx + ('name', 'stor1', 1)]].field_0
            mem[_1750 + 32] = stor0[stor[stor1.length + idx + ('name', 'stor1', 1)]].field_256
            mem[_1750 + 64] = stor0[stor[stor1.length + idx + ('name', 'stor1', 1)]].field_512
            mem[_1750 + 96] = stor0[stor[stor1.length + idx + ('name', 'stor1', 1)]].field_768
            mem[_1750 + 128] = stor0[stor[stor1.length + idx + ('name', 'stor1', 1)]].field_896
            mem[_1750 + 160] = stor0[stor[stor1.length + idx + ('name', 'stor1', 1)]].field_1024
            mem[_1750 + 192] = stor0[stor[stor1.length + idx + ('name', 'stor1', 1)]].field_1280
            mem[_1750 + 224] = stor0[stor[stor1.length + idx + ('name', 'stor1', 1)]].field_1536
            mem[_1750 + 256] = stor0[stor[stor1.length + idx + ('name', 'stor1', 1)]].field_1792
            if idx >= mem[96]:
                revert with 0, 50
            mem[(32 * idx) + 128] = _1750
            if idx == -1:
                revert with 0, 17
            idx = idx + 1
            continue 
        if stor1.length - 1 > !arg2:
            revert with 0, 17
        if stor1.length - 1 > !arg2:
            revert with 0, 17
        if stor1.length + arg2 - 1 < stor1.length:
            _1810 = mem[64]
            mem[64] = mem[64] + 64
            mem[_1810] = 7
            mem[_1810 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
            _1824 = mem[64]
            mem[mem[64]] = 96
            _1870 = mem[96]
            mem[mem[64] + 96] = mem[96]
            idx = 0
            s = 128
            t = mem[64] + 128
            while idx < _1870:
                _1988 = mem[s]
                mem[t] = mem[mem[s]]
                mem[t + 32] = mem[_1988 + 32]
                mem[t + 64] = mem[_1988 + 64]
                mem[t + 96] = mem[_1988 + 112 len 16]
                mem[t + 128] = mem[_1988 + 144 len 16]
                mem[t + 160] = mem[_1988 + 160]
                mem[t + 192] = mem[_1988 + 192]
                mem[t + 224] = mem[_1988 + 236 len 20]
                mem[t + 256] = mem[_1988 + 268 len 20]
                idx = idx + 1
                s = s + 32
                t = t + 288
                continue 
            mem[_1824 + 32] = stor1.length + arg2 - 1
            mem[_1824 + 64] = (288 * _1870) + 128
            _2110 = mem[_1810]
            mem[_1824 + (288 * _1870) + 128] = mem[_1810]
            s = 0
            while _1870 < _2110:
                mem[(289 * _1870) + _1824 + 160] = mem[_1810 + _1870 + 32]
                s = _1870 + 32
                continue 
            if _1870 > _2110:
                mem[_1824 + (288 * _1870) + _2110 + 160] = 0
            return memory
              from mem[64]
               len ceil32(_2110) + _1824 + (288 * _1870) + -mem[64] + 160
        _1811 = mem[64]
        mem[64] = mem[64] + 64
        mem[_1811] = 4
        mem[_1811 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
        _1825 = mem[64]
        mem[mem[64]] = 96
        _1871 = mem[96]
        mem[mem[64] + 96] = mem[96]
        idx = 0
        s = 128
        t = mem[64] + 128
        while idx < _1871:
            _1989 = mem[s]
            mem[t] = mem[mem[s]]
            mem[t + 32] = mem[_1989 + 32]
            mem[t + 64] = mem[_1989 + 64]
            mem[t + 96] = mem[_1989 + 112 len 16]
            mem[t + 128] = mem[_1989 + 144 len 16]
            mem[t + 160] = mem[_1989 + 160]
            mem[t + 192] = mem[_1989 + 192]
            mem[t + 224] = mem[_1989 + 236 len 20]
            mem[t + 256] = mem[_1989 + 268 len 20]
            idx = idx + 1
            s = s + 32
            t = t + 288
            continue 
        mem[_1825 + 32] = stor1.length + arg2 - 1
        mem[_1825 + 64] = (288 * _1871) + 128
        _2120 = mem[_1811]
        mem[_1825 + (288 * _1871) + 128] = mem[_1811]
        s = 0
        while _1871 < _2120:
            mem[(289 * _1871) + _1825 + 160] = mem[_1811 + _1871 + 32]
            s = _1871 + 32
            continue 
        if _1871 > _2120:
            mem[_1825 + (288 * _1871) + _2120 + 160] = 0
        return memory
          from mem[64]
           len ceil32(_2120) + _1825 + (288 * _1871) + -mem[64] + 160
    if arg3:
        if arg2 <= arg1:
            if arg2 > test266151307():
                revert with 0, 65
            mem[96] = arg2
            mem[64] = (32 * arg2) + 128
            if not arg2:
                idx = 0
                while idx < arg2:
                    if arg1 < idx:
                        revert with 0, 17
                    if arg1 - idx >= stor1.length:
                        revert with 0, 50
                    mem[0] = stor[arg1 - idx + ('name', 'stor1', 1)]
                    mem[32] = 0
                    _602 = mem[64]
                    mem[64] = mem[64] + 288
                    mem[_602] = stor0[stor[arg1 - idx + ('name', 'stor1', 1)]].field_0
                    mem[_602 + 32] = stor0[stor[arg1 - idx + ('name', 'stor1', 1)]].field_256
                    mem[_602 + 64] = stor0[stor[arg1 - idx + ('name', 'stor1', 1)]].field_512
                    mem[_602 + 96] = stor0[stor[arg1 - idx + ('name', 'stor1', 1)]].field_768
                    mem[_602 + 128] = stor0[stor[arg1 - idx + ('name', 'stor1', 1)]].field_896
                    mem[_602 + 160] = stor0[stor[arg1 - idx + ('name', 'stor1', 1)]].field_1024
                    mem[_602 + 192] = stor0[stor[arg1 - idx + ('name', 'stor1', 1)]].field_1280
                    mem[_602 + 224] = stor0[stor[arg1 - idx + ('name', 'stor1', 1)]].field_1536
                    mem[_602 + 256] = stor0[stor[arg1 - idx + ('name', 'stor1', 1)]].field_1792
                    if idx >= mem[96]:
                        revert with 0, 50
                    mem[(32 * idx) + 128] = _602
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
                if arg1 < arg2:
                    _579 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_579] = 4
                    mem[_579 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                    _593 = mem[64]
                    mem[mem[64]] = 96
                    _598 = mem[96]
                    mem[mem[64] + 96] = mem[96]
                    idx = 0
                    s = 128
                    t = mem[64] + 128
                    while idx < _598:
                        _1169 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_1169 + 32]
                        mem[t + 64] = mem[_1169 + 64]
                        mem[t + 96] = mem[_1169 + 112 len 16]
                        mem[t + 128] = mem[_1169 + 144 len 16]
                        mem[t + 160] = mem[_1169 + 160]
                        mem[t + 192] = mem[_1169 + 192]
                        mem[t + 224] = mem[_1169 + 236 len 20]
                        mem[t + 256] = mem[_1169 + 268 len 20]
                        idx = idx + 1
                        s = s + 32
                        t = t + 288
                        continue 
                    mem[_593 + 32] = 0
                    mem[_593 + 64] = (288 * _598) + 128
                    _1186 = mem[_579]
                    mem[_593 + (288 * _598) + 128] = mem[_579]
                    s = 0
                    while _598 < _1186:
                        mem[(289 * _598) + _593 + 160] = mem[_579 + _598 + 32]
                        s = _598 + 32
                        continue 
                    if _598 > _1186:
                        mem[_593 + (288 * _598) + _1186 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_1186) + _593 + (288 * _598) + -mem[64] + 160
                _599 = mem[64]
                mem[64] = mem[64] + 64
                mem[_599] = 7
                mem[_599 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                _639 = mem[64]
                mem[mem[64]] = 96
                _661 = mem[96]
                mem[mem[64] + 96] = mem[96]
                idx = 0
                s = 128
                t = mem[64] + 128
                while idx < _661:
                    _1170 = mem[s]
                    mem[t] = mem[mem[s]]
                    mem[t + 32] = mem[_1170 + 32]
                    mem[t + 64] = mem[_1170 + 64]
                    mem[t + 96] = mem[_1170 + 112 len 16]
                    mem[t + 128] = mem[_1170 + 144 len 16]
                    mem[t + 160] = mem[_1170 + 160]
                    mem[t + 192] = mem[_1170 + 192]
                    mem[t + 224] = mem[_1170 + 236 len 20]
                    mem[t + 256] = mem[_1170 + 268 len 20]
                    idx = idx + 1
                    s = s + 32
                    t = t + 288
                    continue 
                mem[_639 + 32] = arg1 - arg2
                mem[_639 + 64] = (288 * _661) + 128
                _1196 = mem[_599]
                mem[_639 + (288 * _661) + 128] = mem[_599]
                s = 0
                while _661 < _1196:
                    mem[(289 * _661) + _639 + 160] = mem[_599 + _661 + 32]
                    s = _661 + 32
                    continue 
                if _661 > _1196:
                    mem[_639 + (288 * _661) + _1196 + 160] = 0
                return memory
                  from mem[64]
                   len ceil32(_1196) + _639 + (288 * _661) + -mem[64] + 160
            mem[64] = (32 * arg2) + 416
            mem[(32 * arg2) + 128] = 0
            mem[(32 * arg2) + 160] = 0
            mem[(32 * arg2) + 192] = 0
            mem[(32 * arg2) + 224] = 0
            mem[(32 * arg2) + 256] = 0
            mem[(32 * arg2) + 288] = 0
            mem[(32 * arg2) + 320] = 0
            mem[(32 * arg2) + 352] = 0
            mem[(32 * arg2) + 384] = 0
            mem[var16001] = (32 * arg2) + 128
            s = var16001
            idx = var16002
            while idx - 1:
                mem[64] = mem[64] + 288
                mem[(32 * arg2) + 128] = 0
                mem[(32 * arg2) + 160] = 0
                mem[(32 * arg2) + 192] = 0
                mem[(32 * arg2) + 224] = 0
                mem[(32 * arg2) + 256] = 0
                mem[(32 * arg2) + 288] = 0
                mem[(32 * arg2) + 320] = 0
                mem[(32 * arg2) + 352] = 0
                mem[(32 * arg2) + 384] = 0
                mem[s + 32] = (32 * arg2) + 128
                s = s + 32
                idx = idx - 1
                continue 
            idx = 0
            while idx < arg2:
                if arg1 < idx:
                    revert with 0, 17
                if arg1 - idx >= stor1.length:
                    revert with 0, 50
                mem[0] = stor[arg1 - idx + ('name', 'stor1', 1)]
                mem[32] = 0
                _1708 = mem[64]
                mem[64] = mem[64] + 288
                mem[_1708] = stor0[stor[arg1 - idx + ('name', 'stor1', 1)]].field_0
                mem[_1708 + 32] = stor0[stor[arg1 - idx + ('name', 'stor1', 1)]].field_256
                mem[_1708 + 64] = stor0[stor[arg1 - idx + ('name', 'stor1', 1)]].field_512
                mem[_1708 + 96] = stor0[stor[arg1 - idx + ('name', 'stor1', 1)]].field_768
                mem[_1708 + 128] = stor0[stor[arg1 - idx + ('name', 'stor1', 1)]].field_896
                mem[_1708 + 160] = stor0[stor[arg1 - idx + ('name', 'stor1', 1)]].field_1024
                mem[_1708 + 192] = stor0[stor[arg1 - idx + ('name', 'stor1', 1)]].field_1280
                mem[_1708 + 224] = stor0[stor[arg1 - idx + ('name', 'stor1', 1)]].field_1536
                mem[_1708 + 256] = stor0[stor[arg1 - idx + ('name', 'stor1', 1)]].field_1792
                if idx >= mem[96]:
                    revert with 0, 50
                mem[(32 * idx) + 128] = _1708
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
            if arg1 < arg2:
                _1678 = mem[64]
                mem[64] = mem[64] + 64
                mem[_1678] = 4
                mem[_1678 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                _1684 = mem[64]
                mem[mem[64]] = 96
                _1704 = mem[96]
                mem[mem[64] + 96] = mem[96]
                idx = 0
                s = 128
                t = mem[64] + 128
                while idx < _1704:
                    _1976 = mem[s]
                    mem[t] = mem[mem[s]]
                    mem[t + 32] = mem[_1976 + 32]
                    mem[t + 64] = mem[_1976 + 64]
                    mem[t + 96] = mem[_1976 + 112 len 16]
                    mem[t + 128] = mem[_1976 + 144 len 16]
                    mem[t + 160] = mem[_1976 + 160]
                    mem[t + 192] = mem[_1976 + 192]
                    mem[t + 224] = mem[_1976 + 236 len 20]
                    mem[t + 256] = mem[_1976 + 268 len 20]
                    idx = idx + 1
                    s = s + 32
                    t = t + 288
                    continue 
                mem[_1684 + 32] = 0
                mem[_1684 + 64] = (288 * _1704) + 128
                _1990 = mem[_1678]
                mem[_1684 + (288 * _1704) + 128] = mem[_1678]
                s = 0
                while _1704 < _1990:
                    mem[(289 * _1704) + _1684 + 160] = mem[_1678 + _1704 + 32]
                    s = _1704 + 32
                    continue 
                if _1704 > _1990:
                    mem[_1684 + (288 * _1704) + _1990 + 160] = 0
                return memory
                  from mem[64]
                   len ceil32(_1990) + _1684 + (288 * _1704) + -mem[64] + 160
            _1705 = mem[64]
            mem[64] = mem[64] + 64
            mem[_1705] = 7
            mem[_1705 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
            _1755 = mem[64]
            mem[mem[64]] = 96
            _1772 = mem[96]
            mem[mem[64] + 96] = mem[96]
            idx = 0
            s = 128
            t = mem[64] + 128
            while idx < _1772:
                _1977 = mem[s]
                mem[t] = mem[mem[s]]
                mem[t + 32] = mem[_1977 + 32]
                mem[t + 64] = mem[_1977 + 64]
                mem[t + 96] = mem[_1977 + 112 len 16]
                mem[t + 128] = mem[_1977 + 144 len 16]
                mem[t + 160] = mem[_1977 + 160]
                mem[t + 192] = mem[_1977 + 192]
                mem[t + 224] = mem[_1977 + 236 len 20]
                mem[t + 256] = mem[_1977 + 268 len 20]
                idx = idx + 1
                s = s + 32
                t = t + 288
                continue 
            mem[_1755 + 32] = arg1 - arg2
            mem[_1755 + 64] = (288 * _1772) + 128
            _2000 = mem[_1705]
            mem[_1755 + (288 * _1772) + 128] = mem[_1705]
            s = 0
            while _1772 < _2000:
                mem[(289 * _1772) + _1755 + 160] = mem[_1705 + _1772 + 32]
                s = _1772 + 32
                continue 
            if _1772 > _2000:
                mem[_1755 + (288 * _1772) + _2000 + 160] = 0
            return memory
              from mem[64]
               len ceil32(_2000) + _1755 + (288 * _1772) + -mem[64] + 160
        if 1 > !arg1:
            revert with 0, 17
        if arg1 + 1 > test266151307():
            revert with 0, 65
        mem[96] = arg1 + 1
        mem[64] = (32 * arg1 + 1) + 128
        if not arg1 + 1:
            idx = 0
            while idx < arg1 + 1:
                if arg1 < idx:
                    revert with 0, 17
                if arg1 - idx >= stor1.length:
                    revert with 0, 50
                mem[0] = stor[arg1 - idx + ('name', 'stor1', 1)]
                mem[32] = 0
                _608 = mem[64]
                mem[64] = mem[64] + 288
                mem[_608] = stor0[stor[arg1 - idx + ('name', 'stor1', 1)]].field_0
                mem[_608 + 32] = stor0[stor[arg1 - idx + ('name', 'stor1', 1)]].field_256
                mem[_608 + 64] = stor0[stor[arg1 - idx + ('name', 'stor1', 1)]].field_512
                mem[_608 + 96] = stor0[stor[arg1 - idx + ('name', 'stor1', 1)]].field_768
                mem[_608 + 128] = stor0[stor[arg1 - idx + ('name', 'stor1', 1)]].field_896
                mem[_608 + 160] = stor0[stor[arg1 - idx + ('name', 'stor1', 1)]].field_1024
                mem[_608 + 192] = stor0[stor[arg1 - idx + ('name', 'stor1', 1)]].field_1280
                mem[_608 + 224] = stor0[stor[arg1 - idx + ('name', 'stor1', 1)]].field_1536
                mem[_608 + 256] = stor0[stor[arg1 - idx + ('name', 'stor1', 1)]].field_1792
                if idx >= mem[96]:
                    revert with 0, 50
                mem[(32 * idx) + 128] = _608
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
            if arg1 < arg1 + 1:
                _580 = mem[64]
                mem[64] = mem[64] + 64
                mem[_580] = 4
                mem[_580 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                _594 = mem[64]
                mem[mem[64]] = 96
                _604 = mem[96]
                mem[mem[64] + 96] = mem[96]
                idx = 0
                s = 128
                t = mem[64] + 128
                while idx < _604:
                    _1171 = mem[s]
                    mem[t] = mem[mem[s]]
                    mem[t + 32] = mem[_1171 + 32]
                    mem[t + 64] = mem[_1171 + 64]
                    mem[t + 96] = mem[_1171 + 112 len 16]
                    mem[t + 128] = mem[_1171 + 144 len 16]
                    mem[t + 160] = mem[_1171 + 160]
                    mem[t + 192] = mem[_1171 + 192]
                    mem[t + 224] = mem[_1171 + 236 len 20]
                    mem[t + 256] = mem[_1171 + 268 len 20]
                    idx = idx + 1
                    s = s + 32
                    t = t + 288
                    continue 
                mem[_594 + 32] = 0
                mem[_594 + 64] = (288 * _604) + 128
                _1206 = mem[_580]
                mem[_594 + (288 * _604) + 128] = mem[_580]
                s = 0
                while _604 < _1206:
                    mem[(289 * _604) + _594 + 160] = mem[_580 + _604 + 32]
                    s = _604 + 32
                    continue 
                if _604 > _1206:
                    mem[_594 + (288 * _604) + _1206 + 160] = 0
                return memory
                  from mem[64]
                   len ceil32(_1206) + _594 + (288 * _604) + -mem[64] + 160
            _605 = mem[64]
            mem[64] = mem[64] + 64
            mem[_605] = 7
            mem[_605 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
            _642 = mem[64]
            mem[mem[64]] = 96
            _672 = mem[96]
            mem[mem[64] + 96] = mem[96]
            idx = 0
            s = 128
            t = mem[64] + 128
            while idx < _672:
                _1172 = mem[s]
                mem[t] = mem[mem[s]]
                mem[t + 32] = mem[_1172 + 32]
                mem[t + 64] = mem[_1172 + 64]
                mem[t + 96] = mem[_1172 + 112 len 16]
                mem[t + 128] = mem[_1172 + 144 len 16]
                mem[t + 160] = mem[_1172 + 160]
                mem[t + 192] = mem[_1172 + 192]
                mem[t + 224] = mem[_1172 + 236 len 20]
                mem[t + 256] = mem[_1172 + 268 len 20]
                idx = idx + 1
                s = s + 32
                t = t + 288
                continue 
            mem[_642 + 32] = -1
            mem[_642 + 64] = (288 * _672) + 128
            _1216 = mem[_605]
            mem[_642 + (288 * _672) + 128] = mem[_605]
            s = 0
            while _672 < _1216:
                mem[(289 * _672) + _642 + 160] = mem[_605 + _672 + 32]
                s = _672 + 32
                continue 
            if _672 > _1216:
                mem[_642 + (288 * _672) + _1216 + 160] = 0
            return memory
              from mem[64]
               len ceil32(_1216) + _642 + (288 * _672) + -mem[64] + 160
        mem[64] = (32 * arg1 + 1) + 416
        mem[(32 * arg1 + 1) + 128] = 0
        mem[(32 * arg1 + 1) + 160] = 0
        mem[(32 * arg1 + 1) + 192] = 0
        mem[(32 * arg1 + 1) + 224] = 0
        mem[(32 * arg1 + 1) + 256] = 0
        mem[(32 * arg1 + 1) + 288] = 0
        mem[(32 * arg1 + 1) + 320] = 0
        mem[(32 * arg1 + 1) + 352] = 0
        mem[(32 * arg1 + 1) + 384] = 0
        mem[var20001] = (32 * arg1 + 1) + 128
        s = var20001
        idx = var20002
        while idx - 1:
            mem[64] = mem[64] + 288
            mem[(32 * arg1 + 1) + 128] = 0
            mem[(32 * arg1 + 1) + 160] = 0
            mem[(32 * arg1 + 1) + 192] = 0
            mem[(32 * arg1 + 1) + 224] = 0
            mem[(32 * arg1 + 1) + 256] = 0
            mem[(32 * arg1 + 1) + 288] = 0
            mem[(32 * arg1 + 1) + 320] = 0
            mem[(32 * arg1 + 1) + 352] = 0
            mem[(32 * arg1 + 1) + 384] = 0
            mem[s + 32] = (32 * arg1 + 1) + 128
            s = s + 32
            idx = idx - 1
            continue 
        idx = 0
        while idx < arg1 + 1:
            if arg1 < idx:
                revert with 0, 17
            if arg1 - idx >= stor1.length:
                revert with 0, 50
            mem[0] = stor[arg1 - idx + ('name', 'stor1', 1)]
            mem[32] = 0
            _1716 = mem[64]
            mem[64] = mem[64] + 288
            mem[_1716] = stor0[stor[arg1 - idx + ('name', 'stor1', 1)]].field_0
            mem[_1716 + 32] = stor0[stor[arg1 - idx + ('name', 'stor1', 1)]].field_256
            mem[_1716 + 64] = stor0[stor[arg1 - idx + ('name', 'stor1', 1)]].field_512
            mem[_1716 + 96] = stor0[stor[arg1 - idx + ('name', 'stor1', 1)]].field_768
            mem[_1716 + 128] = stor0[stor[arg1 - idx + ('name', 'stor1', 1)]].field_896
            mem[_1716 + 160] = stor0[stor[arg1 - idx + ('name', 'stor1', 1)]].field_1024
            mem[_1716 + 192] = stor0[stor[arg1 - idx + ('name', 'stor1', 1)]].field_1280
            mem[_1716 + 224] = stor0[stor[arg1 - idx + ('name', 'stor1', 1)]].field_1536
            mem[_1716 + 256] = stor0[stor[arg1 - idx + ('name', 'stor1', 1)]].field_1792
            if idx >= mem[96]:
                revert with 0, 50
            mem[(32 * idx) + 128] = _1716
            if idx == -1:
                revert with 0, 17
            idx = idx + 1
            continue 
        if arg1 < arg1 + 1:
            _1679 = mem[64]
            mem[64] = mem[64] + 64
            mem[_1679] = 4
            mem[_1679 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
            _1687 = mem[64]
            mem[mem[64]] = 96
            _1712 = mem[96]
            mem[mem[64] + 96] = mem[96]
            idx = 0
            s = 128
            t = mem[64] + 128
            while idx < _1712:
                _1978 = mem[s]
                mem[t] = mem[mem[s]]
                mem[t + 32] = mem[_1978 + 32]
                mem[t + 64] = mem[_1978 + 64]
                mem[t + 96] = mem[_1978 + 112 len 16]
                mem[t + 128] = mem[_1978 + 144 len 16]
                mem[t + 160] = mem[_1978 + 160]
                mem[t + 192] = mem[_1978 + 192]
                mem[t + 224] = mem[_1978 + 236 len 20]
                mem[t + 256] = mem[_1978 + 268 len 20]
                idx = idx + 1
                s = s + 32
                t = t + 288
                continue 
            mem[_1687 + 32] = 0
            mem[_1687 + 64] = (288 * _1712) + 128
            _2010 = mem[_1679]
            mem[_1687 + (288 * _1712) + 128] = mem[_1679]
            s = 0
            while _1712 < _2010:
                mem[(289 * _1712) + _1687 + 160] = mem[_1679 + _1712 + 32]
                s = _1712 + 32
                continue 
            if _1712 > _2010:
                mem[_1687 + (288 * _1712) + _2010 + 160] = 0
            return memory
              from mem[64]
               len ceil32(_2010) + _1687 + (288 * _1712) + -mem[64] + 160
        _1713 = mem[64]
        mem[64] = mem[64] + 64
        mem[_1713] = 7
        mem[_1713 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
        _1757 = mem[64]
        mem[mem[64]] = 96
        _1783 = mem[96]
        mem[mem[64] + 96] = mem[96]
        idx = 0
        s = 128
        t = mem[64] + 128
        while idx < _1783:
            _1979 = mem[s]
            mem[t] = mem[mem[s]]
            mem[t + 32] = mem[_1979 + 32]
            mem[t + 64] = mem[_1979 + 64]
            mem[t + 96] = mem[_1979 + 112 len 16]
            mem[t + 128] = mem[_1979 + 144 len 16]
            mem[t + 160] = mem[_1979 + 160]
            mem[t + 192] = mem[_1979 + 192]
            mem[t + 224] = mem[_1979 + 236 len 20]
            mem[t + 256] = mem[_1979 + 268 len 20]
            idx = idx + 1
            s = s + 32
            t = t + 288
            continue 
        mem[_1757 + 32] = -1
        mem[_1757 + 64] = (288 * _1783) + 128
        _2020 = mem[_1713]
        mem[_1757 + (288 * _1783) + 128] = mem[_1713]
        s = 0
        while _1783 < _2020:
            mem[(289 * _1783) + _1757 + 160] = mem[_1713 + _1783 + 32]
            s = _1783 + 32
            continue 
        if _1783 > _2020:
            mem[_1757 + (288 * _1783) + _2020 + 160] = 0
        return memory
          from mem[64]
           len ceil32(_2020) + _1757 + (288 * _1783) + -mem[64] + 160
    if stor1.length < arg1:
        revert with 0, 17
    if arg2 <= stor1.length - arg1:
        if arg2 > test266151307():
            revert with 0, 65
        mem[96] = arg2
        mem[64] = (32 * arg2) + 128
        if not arg2:
            idx = 0
            while idx < arg2:
                if arg1 > !idx:
                    revert with 0, 17
                if arg1 + idx >= stor1.length:
                    revert with 0, 50
                mem[0] = stor[arg1 + idx + ('name', 'stor1', 1)]
                mem[32] = 0
                _612 = mem[64]
                mem[64] = mem[64] + 288
                mem[_612] = stor0[stor[arg1 + idx + ('name', 'stor1', 1)]].field_0
                mem[_612 + 32] = stor0[stor[arg1 + idx + ('name', 'stor1', 1)]].field_256
                mem[_612 + 64] = stor0[stor[arg1 + idx + ('name', 'stor1', 1)]].field_512
                mem[_612 + 96] = stor0[stor[arg1 + idx + ('name', 'stor1', 1)]].field_768
                mem[_612 + 128] = stor0[stor[arg1 + idx + ('name', 'stor1', 1)]].field_896
                mem[_612 + 160] = stor0[stor[arg1 + idx + ('name', 'stor1', 1)]].field_1024
                mem[_612 + 192] = stor0[stor[arg1 + idx + ('name', 'stor1', 1)]].field_1280
                mem[_612 + 224] = stor0[stor[arg1 + idx + ('name', 'stor1', 1)]].field_1536
                mem[_612 + 256] = stor0[stor[arg1 + idx + ('name', 'stor1', 1)]].field_1792
                if idx >= mem[96]:
                    revert with 0, 50
                mem[(32 * idx) + 128] = _612
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
            if arg1 > !arg2:
                revert with 0, 17
            if arg1 > !arg2:
                revert with 0, 17
            if arg1 + arg2 < stor1.length:
                _673 = mem[64]
                mem[64] = mem[64] + 64
                mem[_673] = 7
                mem[_673 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                _724 = mem[64]
                mem[mem[64]] = 96
                _780 = mem[96]
                mem[mem[64] + 96] = mem[96]
                idx = 0
                s = 128
                t = mem[64] + 128
                while idx < _780:
                    _1173 = mem[s]
                    mem[t] = mem[mem[s]]
                    mem[t + 32] = mem[_1173 + 32]
                    mem[t + 64] = mem[_1173 + 64]
                    mem[t + 96] = mem[_1173 + 112 len 16]
                    mem[t + 128] = mem[_1173 + 144 len 16]
                    mem[t + 160] = mem[_1173 + 160]
                    mem[t + 192] = mem[_1173 + 192]
                    mem[t + 224] = mem[_1173 + 236 len 20]
                    mem[t + 256] = mem[_1173 + 268 len 20]
                    idx = idx + 1
                    s = s + 32
                    t = t + 288
                    continue 
                mem[_724 + 32] = arg1 + arg2
                mem[_724 + 64] = (288 * _780) + 128
                _1226 = mem[_673]
                mem[_724 + (288 * _780) + 128] = mem[_673]
                s = 0
                while _780 < _1226:
                    mem[(289 * _780) + _724 + 160] = mem[_673 + _780 + 32]
                    s = _780 + 32
                    continue 
                if _780 > _1226:
                    mem[_724 + (288 * _780) + _1226 + 160] = 0
                return memory
                  from mem[64]
                   len ceil32(_1226) + _724 + (288 * _780) + -mem[64] + 160
            _674 = mem[64]
            mem[64] = mem[64] + 64
            mem[_674] = 4
            mem[_674 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
            _725 = mem[64]
            mem[mem[64]] = 96
            _781 = mem[96]
            mem[mem[64] + 96] = mem[96]
            idx = 0
            s = 128
            t = mem[64] + 128
            while idx < _781:
                _1174 = mem[s]
                mem[t] = mem[mem[s]]
                mem[t + 32] = mem[_1174 + 32]
                mem[t + 64] = mem[_1174 + 64]
                mem[t + 96] = mem[_1174 + 112 len 16]
                mem[t + 128] = mem[_1174 + 144 len 16]
                mem[t + 160] = mem[_1174 + 160]
                mem[t + 192] = mem[_1174 + 192]
                mem[t + 224] = mem[_1174 + 236 len 20]
                mem[t + 256] = mem[_1174 + 268 len 20]
                idx = idx + 1
                s = s + 32
                t = t + 288
                continue 
            mem[_725 + 32] = arg1 + arg2
            mem[_725 + 64] = (288 * _781) + 128
            _1236 = mem[_674]
            mem[_725 + (288 * _781) + 128] = mem[_674]
            s = 0
            while _781 < _1236:
                mem[(289 * _781) + _725 + 160] = mem[_674 + _781 + 32]
                s = _781 + 32
                continue 
            if _781 > _1236:
                mem[_725 + (288 * _781) + _1236 + 160] = 0
            return memory
              from mem[64]
               len ceil32(_1236) + _725 + (288 * _781) + -mem[64] + 160
        mem[64] = (32 * arg2) + 416
        mem[(32 * arg2) + 128] = 0
        mem[(32 * arg2) + 160] = 0
        mem[(32 * arg2) + 192] = 0
        mem[(32 * arg2) + 224] = 0
        mem[(32 * arg2) + 256] = 0
        mem[(32 * arg2) + 288] = 0
        mem[(32 * arg2) + 320] = 0
        mem[(32 * arg2) + 352] = 0
        mem[(32 * arg2) + 384] = 0
        mem[var19001] = (32 * arg2) + 128
        s = var19001
        idx = var19002
        while idx - 1:
            mem[64] = mem[64] + 288
            mem[(32 * arg2) + 128] = 0
            mem[(32 * arg2) + 160] = 0
            mem[(32 * arg2) + 192] = 0
            mem[(32 * arg2) + 224] = 0
            mem[(32 * arg2) + 256] = 0
            mem[(32 * arg2) + 288] = 0
            mem[(32 * arg2) + 320] = 0
            mem[(32 * arg2) + 352] = 0
            mem[(32 * arg2) + 384] = 0
            mem[s + 32] = (32 * arg2) + 128
            s = s + 32
            idx = idx - 1
            continue 
        idx = 0
        while idx < arg2:
            if arg1 > !idx:
                revert with 0, 17
            if arg1 + idx >= stor1.length:
                revert with 0, 50
            mem[0] = stor[arg1 + idx + ('name', 'stor1', 1)]
            mem[32] = 0
            _1722 = mem[64]
            mem[64] = mem[64] + 288
            mem[_1722] = stor0[stor[arg1 + idx + ('name', 'stor1', 1)]].field_0
            mem[_1722 + 32] = stor0[stor[arg1 + idx + ('name', 'stor1', 1)]].field_256
            mem[_1722 + 64] = stor0[stor[arg1 + idx + ('name', 'stor1', 1)]].field_512
            mem[_1722 + 96] = stor0[stor[arg1 + idx + ('name', 'stor1', 1)]].field_768
            mem[_1722 + 128] = stor0[stor[arg1 + idx + ('name', 'stor1', 1)]].field_896
            mem[_1722 + 160] = stor0[stor[arg1 + idx + ('name', 'stor1', 1)]].field_1024
            mem[_1722 + 192] = stor0[stor[arg1 + idx + ('name', 'stor1', 1)]].field_1280
            mem[_1722 + 224] = stor0[stor[arg1 + idx + ('name', 'stor1', 1)]].field_1536
            mem[_1722 + 256] = stor0[stor[arg1 + idx + ('name', 'stor1', 1)]].field_1792
            if idx >= mem[96]:
                revert with 0, 50
            mem[(32 * idx) + 128] = _1722
            if idx == -1:
                revert with 0, 17
            idx = idx + 1
            continue 
        if arg1 > !arg2:
            revert with 0, 17
        if arg1 > !arg2:
            revert with 0, 17
        if arg1 + arg2 < stor1.length:
            _1784 = mem[64]
            mem[64] = mem[64] + 64
            mem[_1784] = 7
            mem[_1784 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
            _1816 = mem[64]
            mem[mem[64]] = 96
            _1846 = mem[96]
            mem[mem[64] + 96] = mem[96]
            idx = 0
            s = 128
            t = mem[64] + 128
            while idx < _1846:
                _1980 = mem[s]
                mem[t] = mem[mem[s]]
                mem[t + 32] = mem[_1980 + 32]
                mem[t + 64] = mem[_1980 + 64]
                mem[t + 96] = mem[_1980 + 112 len 16]
                mem[t + 128] = mem[_1980 + 144 len 16]
                mem[t + 160] = mem[_1980 + 160]
                mem[t + 192] = mem[_1980 + 192]
                mem[t + 224] = mem[_1980 + 236 len 20]
                mem[t + 256] = mem[_1980 + 268 len 20]
                idx = idx + 1
                s = s + 32
                t = t + 288
                continue 
            mem[_1816 + 32] = arg1 + arg2
            mem[_1816 + 64] = (288 * _1846) + 128
            _2030 = mem[_1784]
            mem[_1816 + (288 * _1846) + 128] = mem[_1784]
            s = 0
            while _1846 < _2030:
                mem[(289 * _1846) + _1816 + 160] = mem[_1784 + _1846 + 32]
                s = _1846 + 32
                continue 
            if _1846 > _2030:
                mem[_1816 + (288 * _1846) + _2030 + 160] = 0
            return memory
              from mem[64]
               len ceil32(_2030) + _1816 + (288 * _1846) + -mem[64] + 160
        _1785 = mem[64]
        mem[64] = mem[64] + 64
        mem[_1785] = 4
        mem[_1785 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
        _1817 = mem[64]
        mem[mem[64]] = 96
        _1847 = mem[96]
        mem[mem[64] + 96] = mem[96]
        idx = 0
        s = 128
        t = mem[64] + 128
        while idx < _1847:
            _1981 = mem[s]
            mem[t] = mem[mem[s]]
            mem[t + 32] = mem[_1981 + 32]
            mem[t + 64] = mem[_1981 + 64]
            mem[t + 96] = mem[_1981 + 112 len 16]
            mem[t + 128] = mem[_1981 + 144 len 16]
            mem[t + 160] = mem[_1981 + 160]
            mem[t + 192] = mem[_1981 + 192]
            mem[t + 224] = mem[_1981 + 236 len 20]
            mem[t + 256] = mem[_1981 + 268 len 20]
            idx = idx + 1
            s = s + 32
            t = t + 288
            continue 
        mem[_1817 + 32] = arg1 + arg2
        mem[_1817 + 64] = (288 * _1847) + 128
        _2040 = mem[_1785]
        mem[_1817 + (288 * _1847) + 128] = mem[_1785]
        s = 0
        while _1847 < _2040:
            mem[(289 * _1847) + _1817 + 160] = mem[_1785 + _1847 + 32]
            s = _1847 + 32
            continue 
        if _1847 > _2040:
            mem[_1817 + (288 * _1847) + _2040 + 160] = 0
        return memory
          from mem[64]
           len ceil32(_2040) + _1817 + (288 * _1847) + -mem[64] + 160
    if stor1.length < arg1:
        revert with 0, 17
    if stor1.length - arg1 > test266151307():
        revert with 0, 65
    mem[96] = stor1.length - arg1
    mem[64] = (32 * stor1.length - arg1) + 128
    if not stor1.length - arg1:
        idx = 0
        while idx < stor1.length - arg1:
            if arg1 > !idx:
                revert with 0, 17
            if arg1 + idx >= stor1.length:
                revert with 0, 50
            mem[0] = stor[arg1 + idx + ('name', 'stor1', 1)]
            mem[32] = 0
            _616 = mem[64]
            mem[64] = mem[64] + 288
            mem[_616] = stor0[stor[arg1 + idx + ('name', 'stor1', 1)]].field_0
            mem[_616 + 32] = stor0[stor[arg1 + idx + ('name', 'stor1', 1)]].field_256
            mem[_616 + 64] = stor0[stor[arg1 + idx + ('name', 'stor1', 1)]].field_512
            mem[_616 + 96] = stor0[stor[arg1 + idx + ('name', 'stor1', 1)]].field_768
            mem[_616 + 128] = stor0[stor[arg1 + idx + ('name', 'stor1', 1)]].field_896
            mem[_616 + 160] = stor0[stor[arg1 + idx + ('name', 'stor1', 1)]].field_1024
            mem[_616 + 192] = stor0[stor[arg1 + idx + ('name', 'stor1', 1)]].field_1280
            mem[_616 + 224] = stor0[stor[arg1 + idx + ('name', 'stor1', 1)]].field_1536
            mem[_616 + 256] = stor0[stor[arg1 + idx + ('name', 'stor1', 1)]].field_1792
            if idx >= mem[96]:
                revert with 0, 50
            mem[(32 * idx) + 128] = _616
            if idx == -1:
                revert with 0, 17
            idx = idx + 1
            continue 
        if arg1 > !(stor1.length - arg1):
            revert with 0, 17
        if arg1 > !(stor1.length - arg1):
            revert with 0, 17
        if stor1.length < stor1.length:
            _675 = mem[64]
            mem[64] = mem[64] + 64
            mem[_675] = 7
            mem[_675 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
            _730 = mem[64]
            mem[mem[64]] = 96
            _782 = mem[96]
            mem[mem[64] + 96] = mem[96]
            idx = 0
            s = 128
            t = mem[64] + 128
            while idx < _782:
                _1175 = mem[s]
                mem[t] = mem[mem[s]]
                mem[t + 32] = mem[_1175 + 32]
                mem[t + 64] = mem[_1175 + 64]
                mem[t + 96] = mem[_1175 + 112 len 16]
                mem[t + 128] = mem[_1175 + 144 len 16]
                mem[t + 160] = mem[_1175 + 160]
                mem[t + 192] = mem[_1175 + 192]
                mem[t + 224] = mem[_1175 + 236 len 20]
                mem[t + 256] = mem[_1175 + 268 len 20]
                idx = idx + 1
                s = s + 32
                t = t + 288
                continue 
            mem[_730 + 32] = stor1.length
            mem[_730 + 64] = (288 * _782) + 128
            _1246 = mem[_675]
            mem[_730 + (288 * _782) + 128] = mem[_675]
            s = 0
            while _782 < _1246:
                mem[(289 * _782) + _730 + 160] = mem[_675 + _782 + 32]
                s = _782 + 32
                continue 
            if _782 > _1246:
                mem[_730 + (288 * _782) + _1246 + 160] = 0
            return memory
              from mem[64]
               len ceil32(_1246) + _730 + (288 * _782) + -mem[64] + 160
        _676 = mem[64]
        mem[64] = mem[64] + 64
        mem[_676] = 4
        mem[_676 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
        _731 = mem[64]
        mem[mem[64]] = 96
        _783 = mem[96]
        mem[mem[64] + 96] = mem[96]
        idx = 0
        s = 128
        t = mem[64] + 128
        while idx < _783:
            _1176 = mem[s]
            mem[t] = mem[mem[s]]
            mem[t + 32] = mem[_1176 + 32]
            mem[t + 64] = mem[_1176 + 64]
            mem[t + 96] = mem[_1176 + 112 len 16]
            mem[t + 128] = mem[_1176 + 144 len 16]
            mem[t + 160] = mem[_1176 + 160]
            mem[t + 192] = mem[_1176 + 192]
            mem[t + 224] = mem[_1176 + 236 len 20]
            mem[t + 256] = mem[_1176 + 268 len 20]
            idx = idx + 1
            s = s + 32
            t = t + 288
            continue 
        mem[_731 + 32] = stor1.length
        mem[_731 + 64] = (288 * _783) + 128
        _1256 = mem[_676]
        mem[_731 + (288 * _783) + 128] = mem[_676]
        s = 0
        while _783 < _1256:
            mem[(289 * _783) + _731 + 160] = mem[_676 + _783 + 32]
            s = _783 + 32
            continue 
        if _783 > _1256:
            mem[_731 + (288 * _783) + _1256 + 160] = 0
        return memory
          from mem[64]
           len ceil32(_1256) + _731 + (288 * _783) + -mem[64] + 160
    mem[64] = (32 * stor1.length - arg1) + 416
    mem[(32 * stor1.length - arg1) + 128] = 0
    mem[(32 * stor1.length - arg1) + 160] = 0
    mem[(32 * stor1.length - arg1) + 192] = 0
    mem[(32 * stor1.length - arg1) + 224] = 0
    mem[(32 * stor1.length - arg1) + 256] = 0
    mem[(32 * stor1.length - arg1) + 288] = 0
    mem[(32 * stor1.length - arg1) + 320] = 0
    mem[(32 * stor1.length - arg1) + 352] = 0
    mem[(32 * stor1.length - arg1) + 384] = 0
    mem[var23001] = (32 * stor1.length - arg1) + 128
    s = var23001
    idx = var23002
    while idx - 1:
        mem[64] = mem[64] + 288
        mem[(32 * stor1.length - arg1) + 128] = 0
        mem[(32 * stor1.length - arg1) + 160] = 0
        mem[(32 * stor1.length - arg1) + 192] = 0
        mem[(32 * stor1.length - arg1) + 224] = 0
        mem[(32 * stor1.length - arg1) + 256] = 0
        mem[(32 * stor1.length - arg1) + 288] = 0
        mem[(32 * stor1.length - arg1) + 320] = 0
        mem[(32 * stor1.length - arg1) + 352] = 0
        mem[(32 * stor1.length - arg1) + 384] = 0
        mem[s + 32] = (32 * stor1.length - arg1) + 128
        s = s + 32
        idx = idx - 1
        continue 
    idx = 0
    while idx < stor1.length - arg1:
        if arg1 > !idx:
            revert with 0, 17
        if arg1 + idx >= stor1.length:
            revert with 0, 50
        mem[0] = stor[arg1 + idx + ('name', 'stor1', 1)]
        mem[32] = 0
        _1728 = mem[64]
        mem[64] = mem[64] + 288
        mem[_1728] = stor0[stor[arg1 + idx + ('name', 'stor1', 1)]].field_0
        mem[_1728 + 32] = stor0[stor[arg1 + idx + ('name', 'stor1', 1)]].field_256
        mem[_1728 + 64] = stor0[stor[arg1 + idx + ('name', 'stor1', 1)]].field_512
        mem[_1728 + 96] = stor0[stor[arg1 + idx + ('name', 'stor1', 1)]].field_768
        mem[_1728 + 128] = stor0[stor[arg1 + idx + ('name', 'stor1', 1)]].field_896
        mem[_1728 + 160] = stor0[stor[arg1 + idx + ('name', 'stor1', 1)]].field_1024
        mem[_1728 + 192] = stor0[stor[arg1 + idx + ('name', 'stor1', 1)]].field_1280
        mem[_1728 + 224] = stor0[stor[arg1 + idx + ('name', 'stor1', 1)]].field_1536
        mem[_1728 + 256] = stor0[stor[arg1 + idx + ('name', 'stor1', 1)]].field_1792
        if idx >= mem[96]:
            revert with 0, 50
        mem[(32 * idx) + 128] = _1728
        if idx == -1:
            revert with 0, 17
        idx = idx + 1
        continue 
    if arg1 > !(stor1.length - arg1):
        revert with 0, 17
    if arg1 > !(stor1.length - arg1):
        revert with 0, 17
    if stor1.length < stor1.length:
        _1786 = mem[64]
        mem[64] = mem[64] + 64
        mem[_1786] = 7
        mem[_1786 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
        _1818 = mem[64]
        mem[mem[64]] = 96
        _1848 = mem[96]
        mem[mem[64] + 96] = mem[96]
        idx = 0
        s = 128
        t = mem[64] + 128
        while idx < _1848:
            _1982 = mem[s]
            mem[t] = mem[mem[s]]
            mem[t + 32] = mem[_1982 + 32]
            mem[t + 64] = mem[_1982 + 64]
            mem[t + 96] = mem[_1982 + 112 len 16]
            mem[t + 128] = mem[_1982 + 144 len 16]
            mem[t + 160] = mem[_1982 + 160]
            mem[t + 192] = mem[_1982 + 192]
            mem[t + 224] = mem[_1982 + 236 len 20]
            mem[t + 256] = mem[_1982 + 268 len 20]
            idx = idx + 1
            s = s + 32
            t = t + 288
            continue 
        mem[_1818 + 32] = stor1.length
        mem[_1818 + 64] = (288 * _1848) + 128
        _2050 = mem[_1786]
        mem[_1818 + (288 * _1848) + 128] = mem[_1786]
        s = 0
        while _1848 < _2050:
            mem[(289 * _1848) + _1818 + 160] = mem[_1786 + _1848 + 32]
            s = _1848 + 32
            continue 
        if _1848 > _2050:
            mem[_1818 + (288 * _1848) + _2050 + 160] = 0
        return memory
          from mem[64]
           len ceil32(_2050) + _1818 + (288 * _1848) + -mem[64] + 160
    _1787 = mem[64]
    mem[64] = mem[64] + 64
    mem[_1787] = 4
    mem[_1787 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
    _1819 = mem[64]
    mem[mem[64]] = 96
    _1849 = mem[96]
    mem[mem[64] + 96] = mem[96]
    idx = 0
    s = 128
    t = mem[64] + 128
    while idx < _1849:
        _1983 = mem[s]
        mem[t] = mem[mem[s]]
        mem[t + 32] = mem[_1983 + 32]
        mem[t + 64] = mem[_1983 + 64]
        mem[t + 96] = mem[_1983 + 112 len 16]
        mem[t + 128] = mem[_1983 + 144 len 16]
        mem[t + 160] = mem[_1983 + 160]
        mem[t + 192] = mem[_1983 + 192]
        mem[t + 224] = mem[_1983 + 236 len 20]
        mem[t + 256] = mem[_1983 + 268 len 20]
        idx = idx + 1
        s = s + 32
        t = t + 288
        continue 
    mem[_1819 + 32] = stor1.length
    mem[_1819 + 64] = (288 * _1849) + 128
    _2060 = mem[_1787]
    mem[_1819 + (288 * _1849) + 128] = mem[_1787]
    s = 0
    while _1849 < _2060:
        mem[(289 * _1849) + _1819 + 160] = mem[_1787 + _1849 + 32]
        s = _1849 + 32
        continue 
    if _1849 > _2060:
        mem[_1819 + (288 * _1849) + _2060 + 160] = 0
    return memory
      from mem[64]
       len ceil32(_2060) + _1819 + (288 * _1849) + -mem[64] + 160
}

function sub_e5e3395c(?) {
    require calldata.size - 4 >= 160
    require arg5 == address(arg5)
    if arg4:
        if arg4 != 1:
            if arg4 != 2:
                if not mem[96]:
                    mem[96] = 0
                    mem[64] = 192
                    mem[128] = 4
                    mem[160] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                    mem[192] = 96
                    mem[288] = 0
                    idx = 0
                    s = 128
                    t = 320
                    while idx < mem[96]:
                        _5681 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_5681 + 32]
                        mem[t + 64] = mem[_5681 + 64]
                        mem[t + 96] = mem[_5681 + 96]
                        mem[t + 128] = mem[_5681 + 128]
                        mem[t + 160] = mem[_5681 + 172 len 20]
                        mem[t + 192] = mem[_5681 + 192]
                        mem[t + 224] = mem[_5681 + 236 len 20]
                        mem[t + 256] = bool(mem[_5681 + 256])
                        mem[t + 288] = mem[_5681 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[224] = 0
                    mem[256] = 128
                    mem[320] = mem[128]
                    mem[352 len ceil32(mem[128])] = mem[160 len ceil32(mem[128])]
                    if ceil32(mem[128]) > mem[128]:
                        mem[mem[128] + 352] = 0
                    return memory
                      from mem[64]
                       len ceil32(mem[128]) + -mem[64] + 352
                if arg1 < mem[96]:
                    if arg3:
                        if arg2 <= arg1:
                            if arg2 > test266151307():
                                revert with 0, 65
                            mem[96] = arg2
                            mem[64] = (32 * arg2) + 128
                            if not arg2:
                                idx = 0
                                while idx < arg2:
                                    if arg1 < idx:
                                        revert with 0, 17
                                    if arg1 - idx >= mem[96]:
                                        revert with 0, 50
                                    mem[0] = mem[(32 * arg1 - idx) + 128]
                                    mem[32] = 12
                                    _5984 = sha3(mem[(32 * arg1 - idx) + 128], 12)
                                    _5985 = mem[64]
                                    mem[64] = mem[64] + 320
                                    mem[_5985] = stor12[mem[(32 * arg1 - idx) + 128]].field_0
                                    mem[_5985 + 32] = stor1[_5984]
                                    mem[_5985 + 64] = stor2[_5984]
                                    mem[_5985 + 96] = stor3[_5984]
                                    mem[_5985 + 128] = stor4[_5984]
                                    mem[_5985 + 160] = stor5[_5984]
                                    mem[_5985 + 192] = stor6[_5984]
                                    mem[_5985 + 224] = stor7[_5984].field_0
                                    mem[_5985 + 256] = bool(stor7[_5984].field_160)
                                    mem[_5985 + 288] = stor8[_5984]
                                    if idx >= mem[96]:
                                        revert with 0, 50
                                    mem[(32 * idx) + 128] = _5985
                                    if idx == -1:
                                        revert with 0, 17
                                    idx = idx + 1
                                    continue 
                                if arg1 < arg2:
                                    _5821 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_5821] = 4
                                    mem[_5821 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                                    _5877 = mem[64]
                                    mem[mem[64]] = 96
                                    _5981 = mem[96]
                                    mem[mem[64] + 96] = mem[96]
                                    idx = 0
                                    s = 128
                                    t = mem[64] + 128
                                    while idx < _5981:
                                        _11229 = mem[s]
                                        mem[t] = mem[mem[s]]
                                        mem[t + 32] = mem[_11229 + 32]
                                        mem[t + 64] = mem[_11229 + 64]
                                        mem[t + 96] = mem[_11229 + 96]
                                        mem[t + 128] = mem[_11229 + 128]
                                        mem[t + 160] = mem[_11229 + 172 len 20]
                                        mem[t + 192] = mem[_11229 + 192]
                                        mem[t + 224] = mem[_11229 + 236 len 20]
                                        mem[t + 256] = bool(mem[_11229 + 256])
                                        mem[t + 288] = mem[_11229 + 288]
                                        idx = idx + 1
                                        s = s + 32
                                        t = t + 320
                                        continue 
                                    mem[_5877 + 32] = 0
                                    mem[_5877 + 64] = (320 * _5981) + 128
                                    _12137 = mem[_5821]
                                    mem[_5877 + (320 * _5981) + 128] = mem[_5821]
                                    mem[_5877 + (320 * _5981) + 160 len ceil32(_12137)] = mem[_5821 + 32 len ceil32(_12137)]
                                    if ceil32(_12137) > _12137:
                                        mem[_5877 + (320 * _5981) + _12137 + 160] = 0
                                    return memory
                                      from mem[64]
                                       len ceil32(_12137) + _5877 + (320 * _5981) + -mem[64] + 160
                                _5982 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_5982] = 7
                                mem[_5982 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                                _6348 = mem[64]
                                mem[mem[64]] = 96
                                _6646 = mem[96]
                                mem[mem[64] + 96] = mem[96]
                                idx = 0
                                s = 128
                                t = mem[64] + 128
                                while idx < _6646:
                                    _11236 = mem[s]
                                    mem[t] = mem[mem[s]]
                                    mem[t + 32] = mem[_11236 + 32]
                                    mem[t + 64] = mem[_11236 + 64]
                                    mem[t + 96] = mem[_11236 + 96]
                                    mem[t + 128] = mem[_11236 + 128]
                                    mem[t + 160] = mem[_11236 + 172 len 20]
                                    mem[t + 192] = mem[_11236 + 192]
                                    mem[t + 224] = mem[_11236 + 236 len 20]
                                    mem[t + 256] = bool(mem[_11236 + 256])
                                    mem[t + 288] = mem[_11236 + 288]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 320
                                    continue 
                                mem[_6348 + 32] = arg1 - arg2
                                mem[_6348 + 64] = (320 * _6646) + 128
                                _12138 = mem[_5982]
                                mem[_6348 + (320 * _6646) + 128] = mem[_5982]
                                mem[_6348 + (320 * _6646) + 160 len ceil32(_12138)] = mem[_5982 + 32 len ceil32(_12138)]
                                if ceil32(_12138) > _12138:
                                    mem[_6348 + (320 * _6646) + _12138 + 160] = 0
                                return memory
                                  from mem[64]
                                   len ceil32(_12138) + _6348 + (320 * _6646) + -mem[64] + 160
                            mem[64] = (32 * arg2) + 448
                            mem[(32 * arg2) + 128] = 0
                            mem[(32 * arg2) + 160] = 0
                            mem[(32 * arg2) + 192] = 0
                            mem[(32 * arg2) + 224] = 0
                            mem[(32 * arg2) + 256] = 0
                            mem[(32 * arg2) + 288] = 0
                            mem[(32 * arg2) + 320] = 0
                            mem[(32 * arg2) + 352] = 0
                            mem[(32 * arg2) + 384] = 0
                            mem[(32 * arg2) + 416] = 0
                            mem[var22001] = (32 * arg2) + 128
                            s = var22001
                            idx = var22002
                            while idx - 1:
                                mem[64] = mem[64] + 320
                                mem[(32 * arg2) + 128] = 0
                                mem[(32 * arg2) + 160] = 0
                                mem[(32 * arg2) + 192] = 0
                                mem[(32 * arg2) + 224] = 0
                                mem[(32 * arg2) + 256] = 0
                                mem[(32 * arg2) + 288] = 0
                                mem[(32 * arg2) + 320] = 0
                                mem[(32 * arg2) + 352] = 0
                                mem[(32 * arg2) + 384] = 0
                                mem[(32 * arg2) + 416] = 0
                                mem[s + 32] = (32 * arg2) + 128
                                s = s + 32
                                idx = idx - 1
                                continue 
                            idx = 0
                            while idx < arg2:
                                if arg1 < idx:
                                    revert with 0, 17
                                if arg1 - idx >= mem[96]:
                                    revert with 0, 50
                                mem[0] = mem[(32 * arg1 - idx) + 128]
                                mem[32] = 12
                                _25205 = sha3(mem[(32 * arg1 - idx) + 128], 12)
                                _25206 = mem[64]
                                mem[64] = mem[64] + 320
                                mem[_25206] = stor12[mem[(32 * arg1 - idx) + 128]].field_0
                                mem[_25206 + 32] = stor1[_25205]
                                mem[_25206 + 64] = stor2[_25205]
                                mem[_25206 + 96] = stor3[_25205]
                                mem[_25206 + 128] = stor4[_25205]
                                mem[_25206 + 160] = stor5[_25205]
                                mem[_25206 + 192] = stor6[_25205]
                                mem[_25206 + 224] = stor7[_25205].field_0
                                mem[_25206 + 256] = bool(stor7[_25205].field_160)
                                mem[_25206 + 288] = stor8[_25205]
                                if idx >= mem[96]:
                                    revert with 0, 50
                                mem[(32 * idx) + 128] = _25206
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                continue 
                            if arg1 < arg2:
                                _24704 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_24704] = 4
                                mem[_24704 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                                _24822 = mem[64]
                                mem[mem[64]] = 96
                                _25202 = mem[96]
                                mem[mem[64] + 96] = mem[96]
                                idx = 0
                                s = 128
                                t = mem[64] + 128
                                while idx < _25202:
                                    _35696 = mem[s]
                                    mem[t] = mem[mem[s]]
                                    mem[t + 32] = mem[_35696 + 32]
                                    mem[t + 64] = mem[_35696 + 64]
                                    mem[t + 96] = mem[_35696 + 96]
                                    mem[t + 128] = mem[_35696 + 128]
                                    mem[t + 160] = mem[_35696 + 172 len 20]
                                    mem[t + 192] = mem[_35696 + 192]
                                    mem[t + 224] = mem[_35696 + 236 len 20]
                                    mem[t + 256] = bool(mem[_35696 + 256])
                                    mem[t + 288] = mem[_35696 + 288]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 320
                                    continue 
                                mem[_24822 + 32] = 0
                                mem[_24822 + 64] = (320 * _25202) + 128
                                _37952 = mem[_24704]
                                mem[_24822 + (320 * _25202) + 128] = mem[_24704]
                                mem[_24822 + (320 * _25202) + 160 len ceil32(_37952)] = mem[_24704 + 32 len ceil32(_37952)]
                                if ceil32(_37952) > _37952:
                                    mem[_24822 + (320 * _25202) + _37952 + 160] = 0
                                return memory
                                  from mem[64]
                                   len ceil32(_37952) + _24822 + (320 * _25202) + -mem[64] + 160
                            _25203 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_25203] = 7
                            mem[_25203 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                            _26195 = mem[64]
                            mem[mem[64]] = 96
                            _26901 = mem[96]
                            mem[mem[64] + 96] = mem[96]
                            idx = 0
                            s = 128
                            t = mem[64] + 128
                            while idx < _26901:
                                _35703 = mem[s]
                                mem[t] = mem[mem[s]]
                                mem[t + 32] = mem[_35703 + 32]
                                mem[t + 64] = mem[_35703 + 64]
                                mem[t + 96] = mem[_35703 + 96]
                                mem[t + 128] = mem[_35703 + 128]
                                mem[t + 160] = mem[_35703 + 172 len 20]
                                mem[t + 192] = mem[_35703 + 192]
                                mem[t + 224] = mem[_35703 + 236 len 20]
                                mem[t + 256] = bool(mem[_35703 + 256])
                                mem[t + 288] = mem[_35703 + 288]
                                idx = idx + 1
                                s = s + 32
                                t = t + 320
                                continue 
                            mem[_26195 + 32] = arg1 - arg2
                            mem[_26195 + 64] = (320 * _26901) + 128
                            _37953 = mem[_25203]
                            mem[_26195 + (320 * _26901) + 128] = mem[_25203]
                            mem[_26195 + (320 * _26901) + 160 len ceil32(_37953)] = mem[_25203 + 32 len ceil32(_37953)]
                            if ceil32(_37953) > _37953:
                                mem[_26195 + (320 * _26901) + _37953 + 160] = 0
                            return memory
                              from mem[64]
                               len ceil32(_37953) + _26195 + (320 * _26901) + -mem[64] + 160
                        if 1 > !arg1:
                            revert with 0, 17
                        if arg1 + 1 > test266151307():
                            revert with 0, 65
                        mem[96] = arg1 + 1
                        mem[64] = (32 * arg1 + 1) + 128
                        if not arg1 + 1:
                            idx = 0
                            while idx < arg1 + 1:
                                if arg1 < idx:
                                    revert with 0, 17
                                if arg1 - idx >= mem[96]:
                                    revert with 0, 50
                                mem[0] = mem[(32 * arg1 - idx) + 128]
                                mem[32] = 12
                                _5990 = sha3(mem[(32 * arg1 - idx) + 128], 12)
                                _5991 = mem[64]
                                mem[64] = mem[64] + 320
                                mem[_5991] = stor12[mem[(32 * arg1 - idx) + 128]].field_0
                                mem[_5991 + 32] = stor1[_5990]
                                mem[_5991 + 64] = stor2[_5990]
                                mem[_5991 + 96] = stor3[_5990]
                                mem[_5991 + 128] = stor4[_5990]
                                mem[_5991 + 160] = stor5[_5990]
                                mem[_5991 + 192] = stor6[_5990]
                                mem[_5991 + 224] = stor7[_5990].field_0
                                mem[_5991 + 256] = bool(stor7[_5990].field_160)
                                mem[_5991 + 288] = stor8[_5990]
                                if idx >= mem[96]:
                                    revert with 0, 50
                                mem[(32 * idx) + 128] = _5991
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                continue 
                            if arg1 < arg1 + 1:
                                _5822 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_5822] = 4
                                mem[_5822 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                                _5879 = mem[64]
                                mem[mem[64]] = 96
                                _5987 = mem[96]
                                mem[mem[64] + 96] = mem[96]
                                idx = 0
                                s = 128
                                t = mem[64] + 128
                                while idx < _5987:
                                    _11243 = mem[s]
                                    mem[t] = mem[mem[s]]
                                    mem[t + 32] = mem[_11243 + 32]
                                    mem[t + 64] = mem[_11243 + 64]
                                    mem[t + 96] = mem[_11243 + 96]
                                    mem[t + 128] = mem[_11243 + 128]
                                    mem[t + 160] = mem[_11243 + 172 len 20]
                                    mem[t + 192] = mem[_11243 + 192]
                                    mem[t + 224] = mem[_11243 + 236 len 20]
                                    mem[t + 256] = bool(mem[_11243 + 256])
                                    mem[t + 288] = mem[_11243 + 288]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 320
                                    continue 
                                mem[_5879 + 32] = 0
                                mem[_5879 + 64] = (320 * _5987) + 128
                                _12139 = mem[_5822]
                                mem[_5879 + (320 * _5987) + 128] = mem[_5822]
                                mem[_5879 + (320 * _5987) + 160 len ceil32(_12139)] = mem[_5822 + 32 len ceil32(_12139)]
                                if ceil32(_12139) > _12139:
                                    mem[_5879 + (320 * _5987) + _12139 + 160] = 0
                                return memory
                                  from mem[64]
                                   len ceil32(_12139) + _5879 + (320 * _5987) + -mem[64] + 160
                            _5988 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_5988] = 7
                            mem[_5988 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                            _6357 = mem[64]
                            mem[mem[64]] = 96
                            _6648 = mem[96]
                            mem[mem[64] + 96] = mem[96]
                            idx = 0
                            s = 128
                            t = mem[64] + 128
                            while idx < _6648:
                                _11250 = mem[s]
                                mem[t] = mem[mem[s]]
                                mem[t + 32] = mem[_11250 + 32]
                                mem[t + 64] = mem[_11250 + 64]
                                mem[t + 96] = mem[_11250 + 96]
                                mem[t + 128] = mem[_11250 + 128]
                                mem[t + 160] = mem[_11250 + 172 len 20]
                                mem[t + 192] = mem[_11250 + 192]
                                mem[t + 224] = mem[_11250 + 236 len 20]
                                mem[t + 256] = bool(mem[_11250 + 256])
                                mem[t + 288] = mem[_11250 + 288]
                                idx = idx + 1
                                s = s + 32
                                t = t + 320
                                continue 
                            mem[_6357 + 32] = -1
                            mem[_6357 + 64] = (320 * _6648) + 128
                            _12140 = mem[_5988]
                            mem[_6357 + (320 * _6648) + 128] = mem[_5988]
                            mem[_6357 + (320 * _6648) + 160 len ceil32(_12140)] = mem[_5988 + 32 len ceil32(_12140)]
                            if ceil32(_12140) > _12140:
                                mem[_6357 + (320 * _6648) + _12140 + 160] = 0
                            return memory
                              from mem[64]
                               len ceil32(_12140) + _6357 + (320 * _6648) + -mem[64] + 160
                        mem[64] = (32 * arg1 + 1) + 448
                        mem[(32 * arg1 + 1) + 128] = 0
                        mem[(32 * arg1 + 1) + 160] = 0
                        mem[(32 * arg1 + 1) + 192] = 0
                        mem[(32 * arg1 + 1) + 224] = 0
                        mem[(32 * arg1 + 1) + 256] = 0
                        mem[(32 * arg1 + 1) + 288] = 0
                        mem[(32 * arg1 + 1) + 320] = 0
                        mem[(32 * arg1 + 1) + 352] = 0
                        mem[(32 * arg1 + 1) + 384] = 0
                        mem[(32 * arg1 + 1) + 416] = 0
                        mem[var26001] = (32 * arg1 + 1) + 128
                        s = var26001
                        idx = var26002
                        while idx - 1:
                            mem[64] = mem[64] + 320
                            mem[(32 * arg1 + 1) + 128] = 0
                            mem[(32 * arg1 + 1) + 160] = 0
                            mem[(32 * arg1 + 1) + 192] = 0
                            mem[(32 * arg1 + 1) + 224] = 0
                            mem[(32 * arg1 + 1) + 256] = 0
                            mem[(32 * arg1 + 1) + 288] = 0
                            mem[(32 * arg1 + 1) + 320] = 0
                            mem[(32 * arg1 + 1) + 352] = 0
                            mem[(32 * arg1 + 1) + 384] = 0
                            mem[(32 * arg1 + 1) + 416] = 0
                            mem[s + 32] = (32 * arg1 + 1) + 128
                            s = s + 32
                            idx = idx - 1
                            continue 
                        idx = 0
                        while idx < arg1 + 1:
                            if arg1 < idx:
                                revert with 0, 17
                            if arg1 - idx >= mem[96]:
                                revert with 0, 50
                            mem[0] = mem[(32 * arg1 - idx) + 128]
                            mem[32] = 12
                            _25213 = sha3(mem[(32 * arg1 - idx) + 128], 12)
                            _25214 = mem[64]
                            mem[64] = mem[64] + 320
                            mem[_25214] = stor12[mem[(32 * arg1 - idx) + 128]].field_0
                            mem[_25214 + 32] = stor1[_25213]
                            mem[_25214 + 64] = stor2[_25213]
                            mem[_25214 + 96] = stor3[_25213]
                            mem[_25214 + 128] = stor4[_25213]
                            mem[_25214 + 160] = stor5[_25213]
                            mem[_25214 + 192] = stor6[_25213]
                            mem[_25214 + 224] = stor7[_25213].field_0
                            mem[_25214 + 256] = bool(stor7[_25213].field_160)
                            mem[_25214 + 288] = stor8[_25213]
                            if idx >= mem[96]:
                                revert with 0, 50
                            mem[(32 * idx) + 128] = _25214
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            continue 
                        if arg1 < arg1 + 1:
                            _24705 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_24705] = 4
                            mem[_24705 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                            _24826 = mem[64]
                            mem[mem[64]] = 96
                            _25210 = mem[96]
                            mem[mem[64] + 96] = mem[96]
                            idx = 0
                            s = 128
                            t = mem[64] + 128
                            while idx < _25210:
                                _35710 = mem[s]
                                mem[t] = mem[mem[s]]
                                mem[t + 32] = mem[_35710 + 32]
                                mem[t + 64] = mem[_35710 + 64]
                                mem[t + 96] = mem[_35710 + 96]
                                mem[t + 128] = mem[_35710 + 128]
                                mem[t + 160] = mem[_35710 + 172 len 20]
                                mem[t + 192] = mem[_35710 + 192]
                                mem[t + 224] = mem[_35710 + 236 len 20]
                                mem[t + 256] = bool(mem[_35710 + 256])
                                mem[t + 288] = mem[_35710 + 288]
                                idx = idx + 1
                                s = s + 32
                                t = t + 320
                                continue 
                            mem[_24826 + 32] = 0
                            mem[_24826 + 64] = (320 * _25210) + 128
                            _37954 = mem[_24705]
                            mem[_24826 + (320 * _25210) + 128] = mem[_24705]
                            mem[_24826 + (320 * _25210) + 160 len ceil32(_37954)] = mem[_24705 + 32 len ceil32(_37954)]
                            if ceil32(_37954) > _37954:
                                mem[_24826 + (320 * _25210) + _37954 + 160] = 0
                            return memory
                              from mem[64]
                               len ceil32(_37954) + _24826 + (320 * _25210) + -mem[64] + 160
                        _25211 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_25211] = 7
                        mem[_25211 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                        _26203 = mem[64]
                        mem[mem[64]] = 96
                        _26903 = mem[96]
                        mem[mem[64] + 96] = mem[96]
                        idx = 0
                        s = 128
                        t = mem[64] + 128
                        while idx < _26903:
                            _35717 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_35717 + 32]
                            mem[t + 64] = mem[_35717 + 64]
                            mem[t + 96] = mem[_35717 + 96]
                            mem[t + 128] = mem[_35717 + 128]
                            mem[t + 160] = mem[_35717 + 172 len 20]
                            mem[t + 192] = mem[_35717 + 192]
                            mem[t + 224] = mem[_35717 + 236 len 20]
                            mem[t + 256] = bool(mem[_35717 + 256])
                            mem[t + 288] = mem[_35717 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_26203 + 32] = -1
                        mem[_26203 + 64] = (320 * _26903) + 128
                        _37955 = mem[_25211]
                        mem[_26203 + (320 * _26903) + 128] = mem[_25211]
                        mem[_26203 + (320 * _26903) + 160 len ceil32(_37955)] = mem[_25211 + 32 len ceil32(_37955)]
                        if ceil32(_37955) > _37955:
                            mem[_26203 + (320 * _26903) + _37955 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_37955) + _26203 + (320 * _26903) + -mem[64] + 160
                    if mem[96] < arg1:
                        revert with 0, 17
                    if arg2 <= mem[96] - arg1:
                        if arg2 > test266151307():
                            revert with 0, 65
                        mem[96] = arg2
                        mem[64] = (32 * arg2) + 128
                        if not arg2:
                            idx = 0
                            while idx < arg2:
                                if arg1 > !idx:
                                    revert with 0, 17
                                if arg1 + idx >= mem[96]:
                                    revert with 0, 50
                                mem[0] = mem[(32 * arg1 + idx) + 128]
                                mem[32] = 12
                                _5994 = sha3(mem[(32 * arg1 + idx) + 128], 12)
                                _5995 = mem[64]
                                mem[64] = mem[64] + 320
                                mem[_5995] = stor12[mem[(32 * arg1 + idx) + 128]].field_0
                                mem[_5995 + 32] = stor1[_5994]
                                mem[_5995 + 64] = stor2[_5994]
                                mem[_5995 + 96] = stor3[_5994]
                                mem[_5995 + 128] = stor4[_5994]
                                mem[_5995 + 160] = stor5[_5994]
                                mem[_5995 + 192] = stor6[_5994]
                                mem[_5995 + 224] = stor7[_5994].field_0
                                mem[_5995 + 256] = bool(stor7[_5994].field_160)
                                mem[_5995 + 288] = stor8[_5994]
                                if idx >= mem[96]:
                                    revert with 0, 50
                                mem[(32 * idx) + 128] = _5995
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                continue 
                            if arg1 > !arg2:
                                revert with 0, 17
                            if arg1 > !arg2:
                                revert with 0, 17
                            if arg1 + arg2 < mem[96]:
                                _6649 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_6649] = 7
                                mem[_6649 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                                _6969 = mem[64]
                                mem[mem[64]] = 96
                                _7585 = mem[96]
                                mem[mem[64] + 96] = mem[96]
                                idx = 0
                                s = 128
                                t = mem[64] + 128
                                while idx < _7585:
                                    _11257 = mem[s]
                                    mem[t] = mem[mem[s]]
                                    mem[t + 32] = mem[_11257 + 32]
                                    mem[t + 64] = mem[_11257 + 64]
                                    mem[t + 96] = mem[_11257 + 96]
                                    mem[t + 128] = mem[_11257 + 128]
                                    mem[t + 160] = mem[_11257 + 172 len 20]
                                    mem[t + 192] = mem[_11257 + 192]
                                    mem[t + 224] = mem[_11257 + 236 len 20]
                                    mem[t + 256] = bool(mem[_11257 + 256])
                                    mem[t + 288] = mem[_11257 + 288]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 320
                                    continue 
                                mem[_6969 + 32] = arg1 + arg2
                                mem[_6969 + 64] = (320 * _7585) + 128
                                _12141 = mem[_6649]
                                mem[_6969 + (320 * _7585) + 128] = mem[_6649]
                                mem[_6969 + (320 * _7585) + 160 len ceil32(_12141)] = mem[_6649 + 32 len ceil32(_12141)]
                                if ceil32(_12141) > _12141:
                                    mem[_6969 + (320 * _7585) + _12141 + 160] = 0
                                return memory
                                  from mem[64]
                                   len ceil32(_12141) + _6969 + (320 * _7585) + -mem[64] + 160
                            _6650 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_6650] = 4
                            mem[_6650 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                            _6970 = mem[64]
                            mem[mem[64]] = 96
                            _7586 = mem[96]
                            mem[mem[64] + 96] = mem[96]
                            idx = 0
                            s = 128
                            t = mem[64] + 128
                            while idx < _7586:
                                _11264 = mem[s]
                                mem[t] = mem[mem[s]]
                                mem[t + 32] = mem[_11264 + 32]
                                mem[t + 64] = mem[_11264 + 64]
                                mem[t + 96] = mem[_11264 + 96]
                                mem[t + 128] = mem[_11264 + 128]
                                mem[t + 160] = mem[_11264 + 172 len 20]
                                mem[t + 192] = mem[_11264 + 192]
                                mem[t + 224] = mem[_11264 + 236 len 20]
                                mem[t + 256] = bool(mem[_11264 + 256])
                                mem[t + 288] = mem[_11264 + 288]
                                idx = idx + 1
                                s = s + 32
                                t = t + 320
                                continue 
                            mem[_6970 + 32] = arg1 + arg2
                            mem[_6970 + 64] = (320 * _7586) + 128
                            _12142 = mem[_6650]
                            mem[_6970 + (320 * _7586) + 128] = mem[_6650]
                            mem[_6970 + (320 * _7586) + 160 len ceil32(_12142)] = mem[_6650 + 32 len ceil32(_12142)]
                            if ceil32(_12142) > _12142:
                                mem[_6970 + (320 * _7586) + _12142 + 160] = 0
                            return memory
                              from mem[64]
                               len ceil32(_12142) + _6970 + (320 * _7586) + -mem[64] + 160
                        mem[64] = (32 * arg2) + 448
                        mem[(32 * arg2) + 128] = 0
                        mem[(32 * arg2) + 160] = 0
                        mem[(32 * arg2) + 192] = 0
                        mem[(32 * arg2) + 224] = 0
                        mem[(32 * arg2) + 256] = 0
                        mem[(32 * arg2) + 288] = 0
                        mem[(32 * arg2) + 320] = 0
                        mem[(32 * arg2) + 352] = 0
                        mem[(32 * arg2) + 384] = 0
                        mem[(32 * arg2) + 416] = 0
                        mem[var25001] = (32 * arg2) + 128
                        s = var25001
                        idx = var25002
                        while idx - 1:
                            mem[64] = mem[64] + 320
                            mem[(32 * arg2) + 128] = 0
                            mem[(32 * arg2) + 160] = 0
                            mem[(32 * arg2) + 192] = 0
                            mem[(32 * arg2) + 224] = 0
                            mem[(32 * arg2) + 256] = 0
                            mem[(32 * arg2) + 288] = 0
                            mem[(32 * arg2) + 320] = 0
                            mem[(32 * arg2) + 352] = 0
                            mem[(32 * arg2) + 384] = 0
                            mem[(32 * arg2) + 416] = 0
                            mem[s + 32] = (32 * arg2) + 128
                            s = s + 32
                            idx = idx - 1
                            continue 
                        idx = 0
                        while idx < arg2:
                            if arg1 > !idx:
                                revert with 0, 17
                            if arg1 + idx >= mem[96]:
                                revert with 0, 50
                            mem[0] = mem[(32 * arg1 + idx) + 128]
                            mem[32] = 12
                            _25219 = sha3(mem[(32 * arg1 + idx) + 128], 12)
                            _25220 = mem[64]
                            mem[64] = mem[64] + 320
                            mem[_25220] = stor12[mem[(32 * arg1 + idx) + 128]].field_0
                            mem[_25220 + 32] = stor1[_25219]
                            mem[_25220 + 64] = stor2[_25219]
                            mem[_25220 + 96] = stor3[_25219]
                            mem[_25220 + 128] = stor4[_25219]
                            mem[_25220 + 160] = stor5[_25219]
                            mem[_25220 + 192] = stor6[_25219]
                            mem[_25220 + 224] = stor7[_25219].field_0
                            mem[_25220 + 256] = bool(stor7[_25219].field_160)
                            mem[_25220 + 288] = stor8[_25219]
                            if idx >= mem[96]:
                                revert with 0, 50
                            mem[(32 * idx) + 128] = _25220
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            continue 
                        if arg1 > !arg2:
                            revert with 0, 17
                        if arg1 > !arg2:
                            revert with 0, 17
                        if arg1 + arg2 < mem[96]:
                            _26904 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_26904] = 7
                            mem[_26904 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                            _27552 = mem[64]
                            mem[mem[64]] = 96
                            _28820 = mem[96]
                            mem[mem[64] + 96] = mem[96]
                            idx = 0
                            s = 128
                            t = mem[64] + 128
                            while idx < _28820:
                                _35724 = mem[s]
                                mem[t] = mem[mem[s]]
                                mem[t + 32] = mem[_35724 + 32]
                                mem[t + 64] = mem[_35724 + 64]
                                mem[t + 96] = mem[_35724 + 96]
                                mem[t + 128] = mem[_35724 + 128]
                                mem[t + 160] = mem[_35724 + 172 len 20]
                                mem[t + 192] = mem[_35724 + 192]
                                mem[t + 224] = mem[_35724 + 236 len 20]
                                mem[t + 256] = bool(mem[_35724 + 256])
                                mem[t + 288] = mem[_35724 + 288]
                                idx = idx + 1
                                s = s + 32
                                t = t + 320
                                continue 
                            mem[_27552 + 32] = arg1 + arg2
                            mem[_27552 + 64] = (320 * _28820) + 128
                            _37956 = mem[_26904]
                            mem[_27552 + (320 * _28820) + 128] = mem[_26904]
                            mem[_27552 + (320 * _28820) + 160 len ceil32(_37956)] = mem[_26904 + 32 len ceil32(_37956)]
                            if ceil32(_37956) > _37956:
                                mem[_27552 + (320 * _28820) + _37956 + 160] = 0
                            return memory
                              from mem[64]
                               len ceil32(_37956) + _27552 + (320 * _28820) + -mem[64] + 160
                        _26905 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_26905] = 4
                        mem[_26905 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                        _27553 = mem[64]
                        mem[mem[64]] = 96
                        _28821 = mem[96]
                        mem[mem[64] + 96] = mem[96]
                        idx = 0
                        s = 128
                        t = mem[64] + 128
                        while idx < _28821:
                            _35731 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_35731 + 32]
                            mem[t + 64] = mem[_35731 + 64]
                            mem[t + 96] = mem[_35731 + 96]
                            mem[t + 128] = mem[_35731 + 128]
                            mem[t + 160] = mem[_35731 + 172 len 20]
                            mem[t + 192] = mem[_35731 + 192]
                            mem[t + 224] = mem[_35731 + 236 len 20]
                            mem[t + 256] = bool(mem[_35731 + 256])
                            mem[t + 288] = mem[_35731 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_27553 + 32] = arg1 + arg2
                        mem[_27553 + 64] = (320 * _28821) + 128
                        _37957 = mem[_26905]
                        mem[_27553 + (320 * _28821) + 128] = mem[_26905]
                        mem[_27553 + (320 * _28821) + 160 len ceil32(_37957)] = mem[_26905 + 32 len ceil32(_37957)]
                        if ceil32(_37957) > _37957:
                            mem[_27553 + (320 * _28821) + _37957 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_37957) + _27553 + (320 * _28821) + -mem[64] + 160
                    _67 = mem[96]
                    if mem[96] < arg1:
                        revert with 0, 17
                    if mem[96] - arg1 > test266151307():
                        revert with 0, 65
                    mem[96] = mem[96] - arg1
                    mem[64] = (32 * _67 - arg1) + 128
                    if not _67 - arg1:
                        idx = 0
                        while idx < _67 - arg1:
                            if arg1 > !idx:
                                revert with 0, 17
                            if arg1 + idx >= mem[96]:
                                revert with 0, 50
                            mem[0] = mem[(32 * arg1 + idx) + 128]
                            mem[32] = 12
                            _5998 = sha3(mem[(32 * arg1 + idx) + 128], 12)
                            _5999 = mem[64]
                            mem[64] = mem[64] + 320
                            mem[_5999] = stor12[mem[(32 * arg1 + idx) + 128]].field_0
                            mem[_5999 + 32] = stor1[_5998]
                            mem[_5999 + 64] = stor2[_5998]
                            mem[_5999 + 96] = stor3[_5998]
                            mem[_5999 + 128] = stor4[_5998]
                            mem[_5999 + 160] = stor5[_5998]
                            mem[_5999 + 192] = stor6[_5998]
                            mem[_5999 + 224] = stor7[_5998].field_0
                            mem[_5999 + 256] = bool(stor7[_5998].field_160)
                            mem[_5999 + 288] = stor8[_5998]
                            if idx >= mem[96]:
                                revert with 0, 50
                            mem[(32 * idx) + 128] = _5999
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            continue 
                        if arg1 > !(_67 - arg1):
                            revert with 0, 17
                        if arg1 > !(_67 - arg1):
                            revert with 0, 17
                        if _67 < mem[96]:
                            _6651 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_6651] = 7
                            mem[_6651 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                            _6975 = mem[64]
                            mem[mem[64]] = 96
                            _7587 = mem[96]
                            mem[mem[64] + 96] = mem[96]
                            idx = 0
                            s = 128
                            t = mem[64] + 128
                            while idx < _7587:
                                _11271 = mem[s]
                                mem[t] = mem[mem[s]]
                                mem[t + 32] = mem[_11271 + 32]
                                mem[t + 64] = mem[_11271 + 64]
                                mem[t + 96] = mem[_11271 + 96]
                                mem[t + 128] = mem[_11271 + 128]
                                mem[t + 160] = mem[_11271 + 172 len 20]
                                mem[t + 192] = mem[_11271 + 192]
                                mem[t + 224] = mem[_11271 + 236 len 20]
                                mem[t + 256] = bool(mem[_11271 + 256])
                                mem[t + 288] = mem[_11271 + 288]
                                idx = idx + 1
                                s = s + 32
                                t = t + 320
                                continue 
                            mem[_6975 + 32] = _67
                            mem[_6975 + 64] = (320 * _7587) + 128
                            _12143 = mem[_6651]
                            mem[_6975 + (320 * _7587) + 128] = mem[_6651]
                            mem[_6975 + (320 * _7587) + 160 len ceil32(_12143)] = mem[_6651 + 32 len ceil32(_12143)]
                            if ceil32(_12143) > _12143:
                                mem[_6975 + (320 * _7587) + _12143 + 160] = 0
                            return memory
                              from mem[64]
                               len ceil32(_12143) + _6975 + (320 * _7587) + -mem[64] + 160
                        _6652 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_6652] = 4
                        mem[_6652 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                        _6976 = mem[64]
                        mem[mem[64]] = 96
                        _7588 = mem[96]
                        mem[mem[64] + 96] = mem[96]
                        idx = 0
                        s = 128
                        t = mem[64] + 128
                        while idx < _7588:
                            _11278 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_11278 + 32]
                            mem[t + 64] = mem[_11278 + 64]
                            mem[t + 96] = mem[_11278 + 96]
                            mem[t + 128] = mem[_11278 + 128]
                            mem[t + 160] = mem[_11278 + 172 len 20]
                            mem[t + 192] = mem[_11278 + 192]
                            mem[t + 224] = mem[_11278 + 236 len 20]
                            mem[t + 256] = bool(mem[_11278 + 256])
                            mem[t + 288] = mem[_11278 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_6976 + 32] = _67
                        mem[_6976 + 64] = (320 * _7588) + 128
                        _12144 = mem[_6652]
                        mem[_6976 + (320 * _7588) + 128] = mem[_6652]
                        mem[_6976 + (320 * _7588) + 160 len ceil32(_12144)] = mem[_6652 + 32 len ceil32(_12144)]
                        if ceil32(_12144) > _12144:
                            mem[_6976 + (320 * _7588) + _12144 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_12144) + _6976 + (320 * _7588) + -mem[64] + 160
                    mem[64] = (32 * _67 - arg1) + 448
                    mem[(32 * _67 - arg1) + 128] = 0
                    mem[(32 * _67 - arg1) + 160] = 0
                    mem[(32 * _67 - arg1) + 192] = 0
                    mem[(32 * _67 - arg1) + 224] = 0
                    mem[(32 * _67 - arg1) + 256] = 0
                    mem[(32 * _67 - arg1) + 288] = 0
                    mem[(32 * _67 - arg1) + 320] = 0
                    mem[(32 * _67 - arg1) + 352] = 0
                    mem[(32 * _67 - arg1) + 384] = 0
                    mem[(32 * _67 - arg1) + 416] = 0
                    mem[var29001] = (32 * _67 - arg1) + 128
                    s = var29001
                    idx = var29002
                    while idx - 1:
                        mem[64] = mem[64] + 320
                        mem[(32 * _67 - arg1) + 128] = 0
                        mem[(32 * _67 - arg1) + 160] = 0
                        mem[(32 * _67 - arg1) + 192] = 0
                        mem[(32 * _67 - arg1) + 224] = 0
                        mem[(32 * _67 - arg1) + 256] = 0
                        mem[(32 * _67 - arg1) + 288] = 0
                        mem[(32 * _67 - arg1) + 320] = 0
                        mem[(32 * _67 - arg1) + 352] = 0
                        mem[(32 * _67 - arg1) + 384] = 0
                        mem[(32 * _67 - arg1) + 416] = 0
                        mem[s + 32] = (32 * _67 - arg1) + 128
                        s = s + 32
                        idx = idx - 1
                        continue 
                    idx = 0
                    while idx < _67 - arg1:
                        if arg1 > !idx:
                            revert with 0, 17
                        if arg1 + idx >= mem[96]:
                            revert with 0, 50
                        mem[0] = mem[(32 * arg1 + idx) + 128]
                        mem[32] = 12
                        _25225 = sha3(mem[(32 * arg1 + idx) + 128], 12)
                        _25226 = mem[64]
                        mem[64] = mem[64] + 320
                        mem[_25226] = stor12[mem[(32 * arg1 + idx) + 128]].field_0
                        mem[_25226 + 32] = stor1[_25225]
                        mem[_25226 + 64] = stor2[_25225]
                        mem[_25226 + 96] = stor3[_25225]
                        mem[_25226 + 128] = stor4[_25225]
                        mem[_25226 + 160] = stor5[_25225]
                        mem[_25226 + 192] = stor6[_25225]
                        mem[_25226 + 224] = stor7[_25225].field_0
                        mem[_25226 + 256] = bool(stor7[_25225].field_160)
                        mem[_25226 + 288] = stor8[_25225]
                        if idx >= mem[96]:
                            revert with 0, 50
                        mem[(32 * idx) + 128] = _25226
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if arg1 > !(_67 - arg1):
                        revert with 0, 17
                    if arg1 > !(_67 - arg1):
                        revert with 0, 17
                    if _67 < mem[96]:
                        _26906 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_26906] = 7
                        mem[_26906 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                        _27554 = mem[64]
                        mem[mem[64]] = 96
                        _28822 = mem[96]
                        mem[mem[64] + 96] = mem[96]
                        idx = 0
                        s = 128
                        t = mem[64] + 128
                        while idx < _28822:
                            _35738 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_35738 + 32]
                            mem[t + 64] = mem[_35738 + 64]
                            mem[t + 96] = mem[_35738 + 96]
                            mem[t + 128] = mem[_35738 + 128]
                            mem[t + 160] = mem[_35738 + 172 len 20]
                            mem[t + 192] = mem[_35738 + 192]
                            mem[t + 224] = mem[_35738 + 236 len 20]
                            mem[t + 256] = bool(mem[_35738 + 256])
                            mem[t + 288] = mem[_35738 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_27554 + 32] = _67
                        mem[_27554 + 64] = (320 * _28822) + 128
                        _37958 = mem[_26906]
                        mem[_27554 + (320 * _28822) + 128] = mem[_26906]
                        mem[_27554 + (320 * _28822) + 160 len ceil32(_37958)] = mem[_26906 + 32 len ceil32(_37958)]
                        if ceil32(_37958) > _37958:
                            mem[_27554 + (320 * _28822) + _37958 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_37958) + _27554 + (320 * _28822) + -mem[64] + 160
                    _26907 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_26907] = 4
                    mem[_26907 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                    _27555 = mem[64]
                    mem[mem[64]] = 96
                    _28823 = mem[96]
                    mem[mem[64] + 96] = mem[96]
                    idx = 0
                    s = 128
                    t = mem[64] + 128
                    while idx < _28823:
                        _35745 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_35745 + 32]
                        mem[t + 64] = mem[_35745 + 64]
                        mem[t + 96] = mem[_35745 + 96]
                        mem[t + 128] = mem[_35745 + 128]
                        mem[t + 160] = mem[_35745 + 172 len 20]
                        mem[t + 192] = mem[_35745 + 192]
                        mem[t + 224] = mem[_35745 + 236 len 20]
                        mem[t + 256] = bool(mem[_35745 + 256])
                        mem[t + 288] = mem[_35745 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_27555 + 32] = _67
                    mem[_27555 + 64] = (320 * _28823) + 128
                    _37959 = mem[_26907]
                    mem[_27555 + (320 * _28823) + 128] = mem[_26907]
                    mem[_27555 + (320 * _28823) + 160 len ceil32(_37959)] = mem[_26907 + 32 len ceil32(_37959)]
                    if ceil32(_37959) > _37959:
                        mem[_27555 + (320 * _28823) + _37959 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_37959) + _27555 + (320 * _28823) + -mem[64] + 160
                _14 = mem[96]
                if mem[96] < 1:
                    revert with 0, 17
                if arg3:
                    if arg2 <= mem[96] - 1:
                        if arg2 > test266151307():
                            revert with 0, 65
                        mem[96] = arg2
                        mem[64] = (32 * arg2) + 128
                        if not arg2:
                            idx = 0
                            while idx < arg2:
                                if _14 - 1 < idx:
                                    revert with 0, 17
                                if _14 + -idx - 1 >= mem[96]:
                                    revert with 0, 50
                                mem[0] = mem[(32 * _14 + -idx - 1) + 128]
                                mem[32] = 12
                                _6004 = sha3(mem[(32 * _14 + -idx - 1) + 128], 12)
                                _6005 = mem[64]
                                mem[64] = mem[64] + 320
                                mem[_6005] = stor12[mem[(32 * _14 + -idx - 1) + 128]].field_0
                                mem[_6005 + 32] = stor1[_6004]
                                mem[_6005 + 64] = stor2[_6004]
                                mem[_6005 + 96] = stor3[_6004]
                                mem[_6005 + 128] = stor4[_6004]
                                mem[_6005 + 160] = stor5[_6004]
                                mem[_6005 + 192] = stor6[_6004]
                                mem[_6005 + 224] = stor7[_6004].field_0
                                mem[_6005 + 256] = bool(stor7[_6004].field_160)
                                mem[_6005 + 288] = stor8[_6004]
                                if idx >= mem[96]:
                                    revert with 0, 50
                                mem[(32 * idx) + 128] = _6005
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                continue 
                            if _14 - 1 < arg2:
                                _5823 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_5823] = 4
                                mem[_5823 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                                _5883 = mem[64]
                                mem[mem[64]] = 96
                                _6001 = mem[96]
                                mem[mem[64] + 96] = mem[96]
                                idx = 0
                                s = 128
                                t = mem[64] + 128
                                while idx < _6001:
                                    _11285 = mem[s]
                                    mem[t] = mem[mem[s]]
                                    mem[t + 32] = mem[_11285 + 32]
                                    mem[t + 64] = mem[_11285 + 64]
                                    mem[t + 96] = mem[_11285 + 96]
                                    mem[t + 128] = mem[_11285 + 128]
                                    mem[t + 160] = mem[_11285 + 172 len 20]
                                    mem[t + 192] = mem[_11285 + 192]
                                    mem[t + 224] = mem[_11285 + 236 len 20]
                                    mem[t + 256] = bool(mem[_11285 + 256])
                                    mem[t + 288] = mem[_11285 + 288]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 320
                                    continue 
                                mem[_5883 + 32] = 0
                                mem[_5883 + 64] = (320 * _6001) + 128
                                _12145 = mem[_5823]
                                mem[_5883 + (320 * _6001) + 128] = mem[_5823]
                                mem[_5883 + (320 * _6001) + 160 len ceil32(_12145)] = mem[_5823 + 32 len ceil32(_12145)]
                                if ceil32(_12145) > _12145:
                                    mem[_5883 + (320 * _6001) + _12145 + 160] = 0
                                return memory
                                  from mem[64]
                                   len ceil32(_12145) + _5883 + (320 * _6001) + -mem[64] + 160
                            _6002 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_6002] = 7
                            mem[_6002 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                            _6366 = mem[64]
                            mem[mem[64]] = 96
                            _6654 = mem[96]
                            mem[mem[64] + 96] = mem[96]
                            idx = 0
                            s = 128
                            t = mem[64] + 128
                            while idx < _6654:
                                _11292 = mem[s]
                                mem[t] = mem[mem[s]]
                                mem[t + 32] = mem[_11292 + 32]
                                mem[t + 64] = mem[_11292 + 64]
                                mem[t + 96] = mem[_11292 + 96]
                                mem[t + 128] = mem[_11292 + 128]
                                mem[t + 160] = mem[_11292 + 172 len 20]
                                mem[t + 192] = mem[_11292 + 192]
                                mem[t + 224] = mem[_11292 + 236 len 20]
                                mem[t + 256] = bool(mem[_11292 + 256])
                                mem[t + 288] = mem[_11292 + 288]
                                idx = idx + 1
                                s = s + 32
                                t = t + 320
                                continue 
                            mem[_6366 + 32] = _14 + -arg2 - 1
                            mem[_6366 + 64] = (320 * _6654) + 128
                            _12146 = mem[_6002]
                            mem[_6366 + (320 * _6654) + 128] = mem[_6002]
                            mem[_6366 + (320 * _6654) + 160 len ceil32(_12146)] = mem[_6002 + 32 len ceil32(_12146)]
                            if ceil32(_12146) > _12146:
                                mem[_6366 + (320 * _6654) + _12146 + 160] = 0
                            return memory
                              from mem[64]
                               len ceil32(_12146) + _6366 + (320 * _6654) + -mem[64] + 160
                        mem[64] = (32 * arg2) + 448
                        mem[(32 * arg2) + 128] = 0
                        mem[(32 * arg2) + 160] = 0
                        mem[(32 * arg2) + 192] = 0
                        mem[(32 * arg2) + 224] = 0
                        mem[(32 * arg2) + 256] = 0
                        mem[(32 * arg2) + 288] = 0
                        mem[(32 * arg2) + 320] = 0
                        mem[(32 * arg2) + 352] = 0
                        mem[(32 * arg2) + 384] = 0
                        mem[(32 * arg2) + 416] = 0
                        mem[var26001] = (32 * arg2) + 128
                        s = var26001
                        idx = var26002
                        while idx - 1:
                            mem[64] = mem[64] + 320
                            mem[(32 * arg2) + 128] = 0
                            mem[(32 * arg2) + 160] = 0
                            mem[(32 * arg2) + 192] = 0
                            mem[(32 * arg2) + 224] = 0
                            mem[(32 * arg2) + 256] = 0
                            mem[(32 * arg2) + 288] = 0
                            mem[(32 * arg2) + 320] = 0
                            mem[(32 * arg2) + 352] = 0
                            mem[(32 * arg2) + 384] = 0
                            mem[(32 * arg2) + 416] = 0
                            mem[s + 32] = (32 * arg2) + 128
                            s = s + 32
                            idx = idx - 1
                            continue 
                        idx = 0
                        while idx < arg2:
                            if _14 - 1 < idx:
                                revert with 0, 17
                            if _14 + -idx - 1 >= mem[96]:
                                revert with 0, 50
                            mem[0] = mem[(32 * _14 + -idx - 1) + 128]
                            mem[32] = 12
                            _25233 = sha3(mem[(32 * _14 + -idx - 1) + 128], 12)
                            _25234 = mem[64]
                            mem[64] = mem[64] + 320
                            mem[_25234] = stor12[mem[(32 * _14 + -idx - 1) + 128]].field_0
                            mem[_25234 + 32] = stor1[_25233]
                            mem[_25234 + 64] = stor2[_25233]
                            mem[_25234 + 96] = stor3[_25233]
                            mem[_25234 + 128] = stor4[_25233]
                            mem[_25234 + 160] = stor5[_25233]
                            mem[_25234 + 192] = stor6[_25233]
                            mem[_25234 + 224] = stor7[_25233].field_0
                            mem[_25234 + 256] = bool(stor7[_25233].field_160)
                            mem[_25234 + 288] = stor8[_25233]
                            if idx >= mem[96]:
                                revert with 0, 50
                            mem[(32 * idx) + 128] = _25234
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            continue 
                        if _14 - 1 < arg2:
                            _24706 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_24706] = 4
                            mem[_24706 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                            _24836 = mem[64]
                            mem[mem[64]] = 96
                            _25230 = mem[96]
                            mem[mem[64] + 96] = mem[96]
                            idx = 0
                            s = 128
                            t = mem[64] + 128
                            while idx < _25230:
                                _35752 = mem[s]
                                mem[t] = mem[mem[s]]
                                mem[t + 32] = mem[_35752 + 32]
                                mem[t + 64] = mem[_35752 + 64]
                                mem[t + 96] = mem[_35752 + 96]
                                mem[t + 128] = mem[_35752 + 128]
                                mem[t + 160] = mem[_35752 + 172 len 20]
                                mem[t + 192] = mem[_35752 + 192]
                                mem[t + 224] = mem[_35752 + 236 len 20]
                                mem[t + 256] = bool(mem[_35752 + 256])
                                mem[t + 288] = mem[_35752 + 288]
                                idx = idx + 1
                                s = s + 32
                                t = t + 320
                                continue 
                            mem[_24836 + 32] = 0
                            mem[_24836 + 64] = (320 * _25230) + 128
                            _37960 = mem[_24706]
                            mem[_24836 + (320 * _25230) + 128] = mem[_24706]
                            mem[_24836 + (320 * _25230) + 160 len ceil32(_37960)] = mem[_24706 + 32 len ceil32(_37960)]
                            if ceil32(_37960) > _37960:
                                mem[_24836 + (320 * _25230) + _37960 + 160] = 0
                            return memory
                              from mem[64]
                               len ceil32(_37960) + _24836 + (320 * _25230) + -mem[64] + 160
                        _25231 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_25231] = 7
                        mem[_25231 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                        _26211 = mem[64]
                        mem[mem[64]] = 96
                        _26909 = mem[96]
                        mem[mem[64] + 96] = mem[96]
                        idx = 0
                        s = 128
                        t = mem[64] + 128
                        while idx < _26909:
                            _35759 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_35759 + 32]
                            mem[t + 64] = mem[_35759 + 64]
                            mem[t + 96] = mem[_35759 + 96]
                            mem[t + 128] = mem[_35759 + 128]
                            mem[t + 160] = mem[_35759 + 172 len 20]
                            mem[t + 192] = mem[_35759 + 192]
                            mem[t + 224] = mem[_35759 + 236 len 20]
                            mem[t + 256] = bool(mem[_35759 + 256])
                            mem[t + 288] = mem[_35759 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_26211 + 32] = _14 + -arg2 - 1
                        mem[_26211 + 64] = (320 * _26909) + 128
                        _37961 = mem[_25231]
                        mem[_26211 + (320 * _26909) + 128] = mem[_25231]
                        mem[_26211 + (320 * _26909) + 160 len ceil32(_37961)] = mem[_25231 + 32 len ceil32(_37961)]
                        if ceil32(_37961) > _37961:
                            mem[_26211 + (320 * _26909) + _37961 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_37961) + _26211 + (320 * _26909) + -mem[64] + 160
                    if 1 > !(mem[96] - 1):
                        revert with 0, 17
                    if mem[96] > test266151307():
                        revert with 0, 65
                    mem[64] = (32 * mem[96]) + 128
                    if not mem[96]:
                        idx = 0
                        while idx < _14:
                            if _14 - 1 < idx:
                                revert with 0, 17
                            if _14 + -idx - 1 >= mem[96]:
                                revert with 0, 50
                            mem[0] = mem[(32 * _14 + -idx - 1) + 128]
                            mem[32] = 12
                            _6010 = sha3(mem[(32 * _14 + -idx - 1) + 128], 12)
                            _6011 = mem[64]
                            mem[64] = mem[64] + 320
                            mem[_6011] = stor12[mem[(32 * _14 + -idx - 1) + 128]].field_0
                            mem[_6011 + 32] = stor1[_6010]
                            mem[_6011 + 64] = stor2[_6010]
                            mem[_6011 + 96] = stor3[_6010]
                            mem[_6011 + 128] = stor4[_6010]
                            mem[_6011 + 160] = stor5[_6010]
                            mem[_6011 + 192] = stor6[_6010]
                            mem[_6011 + 224] = stor7[_6010].field_0
                            mem[_6011 + 256] = bool(stor7[_6010].field_160)
                            mem[_6011 + 288] = stor8[_6010]
                            if idx >= mem[96]:
                                revert with 0, 50
                            mem[(32 * idx) + 128] = _6011
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            continue 
                        if _14 - 1 < _14:
                            _5824 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_5824] = 4
                            mem[_5824 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                            _5885 = mem[64]
                            mem[mem[64]] = 96
                            _6007 = mem[96]
                            mem[mem[64] + 96] = mem[96]
                            idx = 0
                            s = 128
                            t = mem[64] + 128
                            while idx < _6007:
                                _11299 = mem[s]
                                mem[t] = mem[mem[s]]
                                mem[t + 32] = mem[_11299 + 32]
                                mem[t + 64] = mem[_11299 + 64]
                                mem[t + 96] = mem[_11299 + 96]
                                mem[t + 128] = mem[_11299 + 128]
                                mem[t + 160] = mem[_11299 + 172 len 20]
                                mem[t + 192] = mem[_11299 + 192]
                                mem[t + 224] = mem[_11299 + 236 len 20]
                                mem[t + 256] = bool(mem[_11299 + 256])
                                mem[t + 288] = mem[_11299 + 288]
                                idx = idx + 1
                                s = s + 32
                                t = t + 320
                                continue 
                            mem[_5885 + 32] = 0
                            mem[_5885 + 64] = (320 * _6007) + 128
                            _12147 = mem[_5824]
                            mem[_5885 + (320 * _6007) + 128] = mem[_5824]
                            mem[_5885 + (320 * _6007) + 160 len ceil32(_12147)] = mem[_5824 + 32 len ceil32(_12147)]
                            if ceil32(_12147) > _12147:
                                mem[_5885 + (320 * _6007) + _12147 + 160] = 0
                            return memory
                              from mem[64]
                               len ceil32(_12147) + _5885 + (320 * _6007) + -mem[64] + 160
                        _6008 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_6008] = 7
                        mem[_6008 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                        _6375 = mem[64]
                        mem[mem[64]] = 96
                        _6656 = mem[96]
                        mem[mem[64] + 96] = mem[96]
                        idx = 0
                        s = 128
                        t = mem[64] + 128
                        while idx < _6656:
                            _11306 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_11306 + 32]
                            mem[t + 64] = mem[_11306 + 64]
                            mem[t + 96] = mem[_11306 + 96]
                            mem[t + 128] = mem[_11306 + 128]
                            mem[t + 160] = mem[_11306 + 172 len 20]
                            mem[t + 192] = mem[_11306 + 192]
                            mem[t + 224] = mem[_11306 + 236 len 20]
                            mem[t + 256] = bool(mem[_11306 + 256])
                            mem[t + 288] = mem[_11306 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_6375 + 32] = -1
                        mem[_6375 + 64] = (320 * _6656) + 128
                        _12148 = mem[_6008]
                        mem[_6375 + (320 * _6656) + 128] = mem[_6008]
                        mem[_6375 + (320 * _6656) + 160 len ceil32(_12148)] = mem[_6008 + 32 len ceil32(_12148)]
                        if ceil32(_12148) > _12148:
                            mem[_6375 + (320 * _6656) + _12148 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_12148) + _6375 + (320 * _6656) + -mem[64] + 160
                    _11170 = (32 * mem[96]) + 128
                    mem[64] = (32 * mem[96]) + 448
                    mem[(32 * mem[96]) + 128] = 0
                    mem[_11170 + 32] = 0
                    mem[_11170 + 64] = 0
                    mem[_11170 + 96] = 0
                    mem[_11170 + 128] = 0
                    mem[_11170 + 160] = 0
                    mem[_11170 + 192] = 0
                    mem[_11170 + 224] = 0
                    mem[_11170 + 256] = 0
                    mem[_11170 + 288] = 0
                    mem[var30001] = _11170
                    s = var30001
                    idx = var30002
                    while idx - 1:
                        _11170 = mem[64]
                        mem[64] = mem[64] + 320
                        mem[_11170] = 0
                        mem[_11170 + 32] = 0
                        mem[_11170 + 64] = 0
                        mem[_11170 + 96] = 0
                        mem[_11170 + 128] = 0
                        mem[_11170 + 160] = 0
                        mem[_11170 + 192] = 0
                        mem[_11170 + 224] = 0
                        mem[_11170 + 256] = 0
                        mem[_11170 + 288] = 0
                        mem[s + 32] = _11170
                        s = s + 32
                        idx = idx - 1
                        continue 
                    idx = 0
                    while idx < _14:
                        if _14 - 1 < idx:
                            revert with 0, 17
                        if _14 + -idx - 1 >= mem[96]:
                            revert with 0, 50
                        mem[0] = mem[(32 * _14 + -idx - 1) + 128]
                        mem[32] = 12
                        _25241 = sha3(mem[(32 * _14 + -idx - 1) + 128], 12)
                        _25242 = mem[64]
                        mem[64] = mem[64] + 320
                        mem[_25242] = stor12[mem[(32 * _14 + -idx - 1) + 128]].field_0
                        mem[_25242 + 32] = stor1[_25241]
                        mem[_25242 + 64] = stor2[_25241]
                        mem[_25242 + 96] = stor3[_25241]
                        mem[_25242 + 128] = stor4[_25241]
                        mem[_25242 + 160] = stor5[_25241]
                        mem[_25242 + 192] = stor6[_25241]
                        mem[_25242 + 224] = stor7[_25241].field_0
                        mem[_25242 + 256] = bool(stor7[_25241].field_160)
                        mem[_25242 + 288] = stor8[_25241]
                        if idx >= mem[96]:
                            revert with 0, 50
                        mem[(32 * idx) + 128] = _25242
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if _14 - 1 < _14:
                        _24707 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_24707] = 4
                        mem[_24707 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                        _24840 = mem[64]
                        mem[mem[64]] = 96
                        _25238 = mem[96]
                        mem[mem[64] + 96] = mem[96]
                        idx = 0
                        s = 128
                        t = mem[64] + 128
                        while idx < _25238:
                            _35766 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_35766 + 32]
                            mem[t + 64] = mem[_35766 + 64]
                            mem[t + 96] = mem[_35766 + 96]
                            mem[t + 128] = mem[_35766 + 128]
                            mem[t + 160] = mem[_35766 + 172 len 20]
                            mem[t + 192] = mem[_35766 + 192]
                            mem[t + 224] = mem[_35766 + 236 len 20]
                            mem[t + 256] = bool(mem[_35766 + 256])
                            mem[t + 288] = mem[_35766 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_24840 + 32] = 0
                        mem[_24840 + 64] = (320 * _25238) + 128
                        _37962 = mem[_24707]
                        mem[_24840 + (320 * _25238) + 128] = mem[_24707]
                        mem[_24840 + (320 * _25238) + 160 len ceil32(_37962)] = mem[_24707 + 32 len ceil32(_37962)]
                        if ceil32(_37962) > _37962:
                            mem[_24840 + (320 * _25238) + _37962 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_37962) + _24840 + (320 * _25238) + -mem[64] + 160
                    _25239 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_25239] = 7
                    mem[_25239 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                    _26219 = mem[64]
                    mem[mem[64]] = 96
                    _26911 = mem[96]
                    mem[mem[64] + 96] = mem[96]
                    idx = 0
                    s = 128
                    t = mem[64] + 128
                    while idx < _26911:
                        _35773 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_35773 + 32]
                        mem[t + 64] = mem[_35773 + 64]
                        mem[t + 96] = mem[_35773 + 96]
                        mem[t + 128] = mem[_35773 + 128]
                        mem[t + 160] = mem[_35773 + 172 len 20]
                        mem[t + 192] = mem[_35773 + 192]
                        mem[t + 224] = mem[_35773 + 236 len 20]
                        mem[t + 256] = bool(mem[_35773 + 256])
                        mem[t + 288] = mem[_35773 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_26219 + 32] = -1
                    mem[_26219 + 64] = (320 * _26911) + 128
                    _37963 = mem[_25239]
                    mem[_26219 + (320 * _26911) + 128] = mem[_25239]
                    mem[_26219 + (320 * _26911) + 160 len ceil32(_37963)] = mem[_25239 + 32 len ceil32(_37963)]
                    if ceil32(_37963) > _37963:
                        mem[_26219 + (320 * _26911) + _37963 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_37963) + _26219 + (320 * _26911) + -mem[64] + 160
                if mem[96] < mem[96] - 1:
                    revert with 0, 17
                if arg2 <= 1:
                    if arg2 > test266151307():
                        revert with 0, 65
                    mem[96] = arg2
                    mem[64] = (32 * arg2) + 128
                    if not arg2:
                        idx = 0
                        while idx < arg2:
                            if _14 - 1 > !idx:
                                revert with 0, 17
                            if _14 + idx - 1 >= mem[96]:
                                revert with 0, 50
                            mem[0] = mem[(32 * _14 + idx - 1) + 128]
                            mem[32] = 12
                            _6014 = sha3(mem[(32 * _14 + idx - 1) + 128], 12)
                            _6015 = mem[64]
                            mem[64] = mem[64] + 320
                            mem[_6015] = stor12[mem[(32 * _14 + idx - 1) + 128]].field_0
                            mem[_6015 + 32] = stor1[_6014]
                            mem[_6015 + 64] = stor2[_6014]
                            mem[_6015 + 96] = stor3[_6014]
                            mem[_6015 + 128] = stor4[_6014]
                            mem[_6015 + 160] = stor5[_6014]
                            mem[_6015 + 192] = stor6[_6014]
                            mem[_6015 + 224] = stor7[_6014].field_0
                            mem[_6015 + 256] = bool(stor7[_6014].field_160)
                            mem[_6015 + 288] = stor8[_6014]
                            if idx >= mem[96]:
                                revert with 0, 50
                            mem[(32 * idx) + 128] = _6015
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            continue 
                        if _14 - 1 > !arg2:
                            revert with 0, 17
                        if _14 - 1 > !arg2:
                            revert with 0, 17
                        if _14 + arg2 - 1 < mem[96]:
                            _6657 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_6657] = 7
                            mem[_6657 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                            _7009 = mem[64]
                            mem[mem[64]] = 96
                            _7593 = mem[96]
                            mem[mem[64] + 96] = mem[96]
                            idx = 0
                            s = 128
                            t = mem[64] + 128
                            while idx < _7593:
                                _11313 = mem[s]
                                mem[t] = mem[mem[s]]
                                mem[t + 32] = mem[_11313 + 32]
                                mem[t + 64] = mem[_11313 + 64]
                                mem[t + 96] = mem[_11313 + 96]
                                mem[t + 128] = mem[_11313 + 128]
                                mem[t + 160] = mem[_11313 + 172 len 20]
                                mem[t + 192] = mem[_11313 + 192]
                                mem[t + 224] = mem[_11313 + 236 len 20]
                                mem[t + 256] = bool(mem[_11313 + 256])
                                mem[t + 288] = mem[_11313 + 288]
                                idx = idx + 1
                                s = s + 32
                                t = t + 320
                                continue 
                            mem[_7009 + 32] = _14 + arg2 - 1
                            mem[_7009 + 64] = (320 * _7593) + 128
                            _12149 = mem[_6657]
                            mem[_7009 + (320 * _7593) + 128] = mem[_6657]
                            mem[_7009 + (320 * _7593) + 160 len ceil32(_12149)] = mem[_6657 + 32 len ceil32(_12149)]
                            if ceil32(_12149) > _12149:
                                mem[_7009 + (320 * _7593) + _12149 + 160] = 0
                            return memory
                              from mem[64]
                               len ceil32(_12149) + _7009 + (320 * _7593) + -mem[64] + 160
                        _6658 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_6658] = 4
                        mem[_6658 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                        _7010 = mem[64]
                        mem[mem[64]] = 96
                        _7594 = mem[96]
                        mem[mem[64] + 96] = mem[96]
                        idx = 0
                        s = 128
                        t = mem[64] + 128
                        while idx < _7594:
                            _11320 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_11320 + 32]
                            mem[t + 64] = mem[_11320 + 64]
                            mem[t + 96] = mem[_11320 + 96]
                            mem[t + 128] = mem[_11320 + 128]
                            mem[t + 160] = mem[_11320 + 172 len 20]
                            mem[t + 192] = mem[_11320 + 192]
                            mem[t + 224] = mem[_11320 + 236 len 20]
                            mem[t + 256] = bool(mem[_11320 + 256])
                            mem[t + 288] = mem[_11320 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_7010 + 32] = _14 + arg2 - 1
                        mem[_7010 + 64] = (320 * _7594) + 128
                        _12150 = mem[_6658]
                        mem[_7010 + (320 * _7594) + 128] = mem[_6658]
                        mem[_7010 + (320 * _7594) + 160 len ceil32(_12150)] = mem[_6658 + 32 len ceil32(_12150)]
                        if ceil32(_12150) > _12150:
                            mem[_7010 + (320 * _7594) + _12150 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_12150) + _7010 + (320 * _7594) + -mem[64] + 160
                    mem[64] = (32 * arg2) + 448
                    mem[(32 * arg2) + 128] = 0
                    mem[(32 * arg2) + 160] = 0
                    mem[(32 * arg2) + 192] = 0
                    mem[(32 * arg2) + 224] = 0
                    mem[(32 * arg2) + 256] = 0
                    mem[(32 * arg2) + 288] = 0
                    mem[(32 * arg2) + 320] = 0
                    mem[(32 * arg2) + 352] = 0
                    mem[(32 * arg2) + 384] = 0
                    mem[(32 * arg2) + 416] = 0
                    mem[var29001] = (32 * arg2) + 128
                    s = var29001
                    idx = var29002
                    while idx - 1:
                        mem[64] = mem[64] + 320
                        mem[(32 * arg2) + 128] = 0
                        mem[(32 * arg2) + 160] = 0
                        mem[(32 * arg2) + 192] = 0
                        mem[(32 * arg2) + 224] = 0
                        mem[(32 * arg2) + 256] = 0
                        mem[(32 * arg2) + 288] = 0
                        mem[(32 * arg2) + 320] = 0
                        mem[(32 * arg2) + 352] = 0
                        mem[(32 * arg2) + 384] = 0
                        mem[(32 * arg2) + 416] = 0
                        mem[s + 32] = (32 * arg2) + 128
                        s = s + 32
                        idx = idx - 1
                        continue 
                    idx = 0
                    while idx < arg2:
                        if _14 - 1 > !idx:
                            revert with 0, 17
                        if _14 + idx - 1 >= mem[96]:
                            revert with 0, 50
                        mem[0] = mem[(32 * _14 + idx - 1) + 128]
                        mem[32] = 12
                        _25247 = sha3(mem[(32 * _14 + idx - 1) + 128], 12)
                        _25248 = mem[64]
                        mem[64] = mem[64] + 320
                        mem[_25248] = stor12[mem[(32 * _14 + idx - 1) + 128]].field_0
                        mem[_25248 + 32] = stor1[_25247]
                        mem[_25248 + 64] = stor2[_25247]
                        mem[_25248 + 96] = stor3[_25247]
                        mem[_25248 + 128] = stor4[_25247]
                        mem[_25248 + 160] = stor5[_25247]
                        mem[_25248 + 192] = stor6[_25247]
                        mem[_25248 + 224] = stor7[_25247].field_0
                        mem[_25248 + 256] = bool(stor7[_25247].field_160)
                        mem[_25248 + 288] = stor8[_25247]
                        if idx >= mem[96]:
                            revert with 0, 50
                        mem[(32 * idx) + 128] = _25248
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if _14 - 1 > !arg2:
                        revert with 0, 17
                    if _14 - 1 > !arg2:
                        revert with 0, 17
                    if _14 + arg2 - 1 < mem[96]:
                        _26912 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_26912] = 7
                        mem[_26912 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                        _27572 = mem[64]
                        mem[mem[64]] = 96
                        _28828 = mem[96]
                        mem[mem[64] + 96] = mem[96]
                        idx = 0
                        s = 128
                        t = mem[64] + 128
                        while idx < _28828:
                            _35780 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_35780 + 32]
                            mem[t + 64] = mem[_35780 + 64]
                            mem[t + 96] = mem[_35780 + 96]
                            mem[t + 128] = mem[_35780 + 128]
                            mem[t + 160] = mem[_35780 + 172 len 20]
                            mem[t + 192] = mem[_35780 + 192]
                            mem[t + 224] = mem[_35780 + 236 len 20]
                            mem[t + 256] = bool(mem[_35780 + 256])
                            mem[t + 288] = mem[_35780 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_27572 + 32] = _14 + arg2 - 1
                        mem[_27572 + 64] = (320 * _28828) + 128
                        _37964 = mem[_26912]
                        mem[_27572 + (320 * _28828) + 128] = mem[_26912]
                        mem[_27572 + (320 * _28828) + 160 len ceil32(_37964)] = mem[_26912 + 32 len ceil32(_37964)]
                        if ceil32(_37964) > _37964:
                            mem[_27572 + (320 * _28828) + _37964 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_37964) + _27572 + (320 * _28828) + -mem[64] + 160
                    _26913 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_26913] = 4
                    mem[_26913 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                    _27573 = mem[64]
                    mem[mem[64]] = 96
                    _28829 = mem[96]
                    mem[mem[64] + 96] = mem[96]
                    idx = 0
                    s = 128
                    t = mem[64] + 128
                    while idx < _28829:
                        _35787 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_35787 + 32]
                        mem[t + 64] = mem[_35787 + 64]
                        mem[t + 96] = mem[_35787 + 96]
                        mem[t + 128] = mem[_35787 + 128]
                        mem[t + 160] = mem[_35787 + 172 len 20]
                        mem[t + 192] = mem[_35787 + 192]
                        mem[t + 224] = mem[_35787 + 236 len 20]
                        mem[t + 256] = bool(mem[_35787 + 256])
                        mem[t + 288] = mem[_35787 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_27573 + 32] = _14 + arg2 - 1
                    mem[_27573 + 64] = (320 * _28829) + 128
                    _37965 = mem[_26913]
                    mem[_27573 + (320 * _28829) + 128] = mem[_26913]
                    mem[_27573 + (320 * _28829) + 160 len ceil32(_37965)] = mem[_26913 + 32 len ceil32(_37965)]
                    if ceil32(_37965) > _37965:
                        mem[_27573 + (320 * _28829) + _37965 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_37965) + _27573 + (320 * _28829) + -mem[64] + 160
                _149 = mem[96]
                if mem[96] < mem[96] - 1:
                    revert with 0, 17
                mem[96] = 1
                mem[64] = (32 * _149 + -_14 + 1) + 128
                if not _149 + -_14 + 1:
                    idx = 0
                    while idx < _149 + -_14 + 1:
                        if _14 - 1 > !idx:
                            revert with 0, 17
                        if _14 + idx - 1 >= mem[96]:
                            revert with 0, 50
                        mem[0] = mem[(32 * _14 + idx - 1) + 128]
                        mem[32] = 12
                        _6018 = sha3(mem[(32 * _14 + idx - 1) + 128], 12)
                        _6019 = mem[64]
                        mem[64] = mem[64] + 320
                        mem[_6019] = stor12[mem[(32 * _14 + idx - 1) + 128]].field_0
                        mem[_6019 + 32] = stor1[_6018]
                        mem[_6019 + 64] = stor2[_6018]
                        mem[_6019 + 96] = stor3[_6018]
                        mem[_6019 + 128] = stor4[_6018]
                        mem[_6019 + 160] = stor5[_6018]
                        mem[_6019 + 192] = stor6[_6018]
                        mem[_6019 + 224] = stor7[_6018].field_0
                        mem[_6019 + 256] = bool(stor7[_6018].field_160)
                        mem[_6019 + 288] = stor8[_6018]
                        if idx >= mem[96]:
                            revert with 0, 50
                        mem[(32 * idx) + 128] = _6019
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if _14 - 1 > !(_149 + -_14 + 1):
                        revert with 0, 17
                    if _14 - 1 > !(_149 + -_14 + 1):
                        revert with 0, 17
                    if _149 < mem[96]:
                        _6659 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_6659] = 7
                        mem[_6659 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                        _7015 = mem[64]
                        mem[mem[64]] = 96
                        _7595 = mem[96]
                        mem[mem[64] + 96] = mem[96]
                        idx = 0
                        s = 128
                        t = mem[64] + 128
                        while idx < _7595:
                            _11327 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_11327 + 32]
                            mem[t + 64] = mem[_11327 + 64]
                            mem[t + 96] = mem[_11327 + 96]
                            mem[t + 128] = mem[_11327 + 128]
                            mem[t + 160] = mem[_11327 + 172 len 20]
                            mem[t + 192] = mem[_11327 + 192]
                            mem[t + 224] = mem[_11327 + 236 len 20]
                            mem[t + 256] = bool(mem[_11327 + 256])
                            mem[t + 288] = mem[_11327 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_7015 + 32] = _149
                        mem[_7015 + 64] = (320 * _7595) + 128
                        _12151 = mem[_6659]
                        mem[_7015 + (320 * _7595) + 128] = mem[_6659]
                        mem[_7015 + (320 * _7595) + 160 len ceil32(_12151)] = mem[_6659 + 32 len ceil32(_12151)]
                        if ceil32(_12151) > _12151:
                            mem[_7015 + (320 * _7595) + _12151 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_12151) + _7015 + (320 * _7595) + -mem[64] + 160
                    _6660 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_6660] = 4
                    mem[_6660 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                    _7016 = mem[64]
                    mem[mem[64]] = 96
                    _7596 = mem[96]
                    mem[mem[64] + 96] = mem[96]
                    idx = 0
                    s = 128
                    t = mem[64] + 128
                    while idx < _7596:
                        _11334 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_11334 + 32]
                        mem[t + 64] = mem[_11334 + 64]
                        mem[t + 96] = mem[_11334 + 96]
                        mem[t + 128] = mem[_11334 + 128]
                        mem[t + 160] = mem[_11334 + 172 len 20]
                        mem[t + 192] = mem[_11334 + 192]
                        mem[t + 224] = mem[_11334 + 236 len 20]
                        mem[t + 256] = bool(mem[_11334 + 256])
                        mem[t + 288] = mem[_11334 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_7016 + 32] = _149
                    mem[_7016 + 64] = (320 * _7596) + 128
                    _12152 = mem[_6660]
                    mem[_7016 + (320 * _7596) + 128] = mem[_6660]
                    mem[_7016 + (320 * _7596) + 160 len ceil32(_12152)] = mem[_6660 + 32 len ceil32(_12152)]
                    if ceil32(_12152) > _12152:
                        mem[_7016 + (320 * _7596) + _12152 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_12152) + _7016 + (320 * _7596) + -mem[64] + 160
                mem[64] = (32 * _149 + -_14 + 1) + 448
                mem[(32 * _149 + -_14 + 1) + 128] = 0
                mem[(32 * _149 + -_14 + 1) + 160] = 0
                mem[(32 * _149 + -_14 + 1) + 192] = 0
                mem[(32 * _149 + -_14 + 1) + 224] = 0
                mem[(32 * _149 + -_14 + 1) + 256] = 0
                mem[(32 * _149 + -_14 + 1) + 288] = 0
                mem[(32 * _149 + -_14 + 1) + 320] = 0
                mem[(32 * _149 + -_14 + 1) + 352] = 0
                mem[(32 * _149 + -_14 + 1) + 384] = 0
                mem[(32 * _149 + -_14 + 1) + 416] = 0
                mem[var33001] = (32 * _149 + -_14 + 1) + 128
                s = var33001
                idx = var33002
                while idx - 1:
                    mem[64] = mem[64] + 320
                    mem[(32 * _149 + -_14 + 1) + 128] = 0
                    mem[(32 * _149 + -_14 + 1) + 160] = 0
                    mem[(32 * _149 + -_14 + 1) + 192] = 0
                    mem[(32 * _149 + -_14 + 1) + 224] = 0
                    mem[(32 * _149 + -_14 + 1) + 256] = 0
                    mem[(32 * _149 + -_14 + 1) + 288] = 0
                    mem[(32 * _149 + -_14 + 1) + 320] = 0
                    mem[(32 * _149 + -_14 + 1) + 352] = 0
                    mem[(32 * _149 + -_14 + 1) + 384] = 0
                    mem[(32 * _149 + -_14 + 1) + 416] = 0
                    mem[s + 32] = (32 * _149 + -_14 + 1) + 128
                    s = s + 32
                    idx = idx - 1
                    continue 
                idx = 0
                while idx < _149 + -_14 + 1:
                    if _14 - 1 > !idx:
                        revert with 0, 17
                    if _14 + idx - 1 >= mem[96]:
                        revert with 0, 50
                    mem[0] = mem[(32 * _14 + idx - 1) + 128]
                    mem[32] = 12
                    _25253 = sha3(mem[(32 * _14 + idx - 1) + 128], 12)
                    _25254 = mem[64]
                    mem[64] = mem[64] + 320
                    mem[_25254] = stor12[mem[(32 * _14 + idx - 1) + 128]].field_0
                    mem[_25254 + 32] = stor1[_25253]
                    mem[_25254 + 64] = stor2[_25253]
                    mem[_25254 + 96] = stor3[_25253]
                    mem[_25254 + 128] = stor4[_25253]
                    mem[_25254 + 160] = stor5[_25253]
                    mem[_25254 + 192] = stor6[_25253]
                    mem[_25254 + 224] = stor7[_25253].field_0
                    mem[_25254 + 256] = bool(stor7[_25253].field_160)
                    mem[_25254 + 288] = stor8[_25253]
                    if idx >= mem[96]:
                        revert with 0, 50
                    mem[(32 * idx) + 128] = _25254
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
                if _14 - 1 > !(_149 + -_14 + 1):
                    revert with 0, 17
                if _14 - 1 > !(_149 + -_14 + 1):
                    revert with 0, 17
                if _149 < mem[96]:
                    _26914 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_26914] = 7
                    mem[_26914 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                    _27574 = mem[64]
                    mem[mem[64]] = 96
                    _28830 = mem[96]
                    mem[mem[64] + 96] = mem[96]
                    idx = 0
                    s = 128
                    t = mem[64] + 128
                    while idx < _28830:
                        _35794 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_35794 + 32]
                        mem[t + 64] = mem[_35794 + 64]
                        mem[t + 96] = mem[_35794 + 96]
                        mem[t + 128] = mem[_35794 + 128]
                        mem[t + 160] = mem[_35794 + 172 len 20]
                        mem[t + 192] = mem[_35794 + 192]
                        mem[t + 224] = mem[_35794 + 236 len 20]
                        mem[t + 256] = bool(mem[_35794 + 256])
                        mem[t + 288] = mem[_35794 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_27574 + 32] = _149
                    mem[_27574 + 64] = (320 * _28830) + 128
                    _37966 = mem[_26914]
                    mem[_27574 + (320 * _28830) + 128] = mem[_26914]
                    mem[_27574 + (320 * _28830) + 160 len ceil32(_37966)] = mem[_26914 + 32 len ceil32(_37966)]
                    if ceil32(_37966) > _37966:
                        mem[_27574 + (320 * _28830) + _37966 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_37966) + _27574 + (320 * _28830) + -mem[64] + 160
                _26915 = mem[64]
                mem[64] = mem[64] + 64
                mem[_26915] = 4
                mem[_26915 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                _27575 = mem[64]
                mem[mem[64]] = 96
                _28831 = mem[96]
                mem[mem[64] + 96] = mem[96]
                idx = 0
                s = 128
                t = mem[64] + 128
                while idx < _28831:
                    _35801 = mem[s]
                    mem[t] = mem[mem[s]]
                    mem[t + 32] = mem[_35801 + 32]
                    mem[t + 64] = mem[_35801 + 64]
                    mem[t + 96] = mem[_35801 + 96]
                    mem[t + 128] = mem[_35801 + 128]
                    mem[t + 160] = mem[_35801 + 172 len 20]
                    mem[t + 192] = mem[_35801 + 192]
                    mem[t + 224] = mem[_35801 + 236 len 20]
                    mem[t + 256] = bool(mem[_35801 + 256])
                    mem[t + 288] = mem[_35801 + 288]
                    idx = idx + 1
                    s = s + 32
                    t = t + 320
                    continue 
                mem[_27575 + 32] = _149
                mem[_27575 + 64] = (320 * _28831) + 128
                _37967 = mem[_26915]
                mem[_27575 + (320 * _28831) + 128] = mem[_26915]
                mem[_27575 + (320 * _28831) + 160 len ceil32(_37967)] = mem[_26915 + 32 len ceil32(_37967)]
                if ceil32(_37967) > _37967:
                    mem[_27575 + (320 * _28831) + _37967 + 160] = 0
                return memory
                  from mem[64]
                   len ceil32(_37967) + _27575 + (320 * _28831) + -mem[64] + 160
            mem[0] = address(arg5)
            mem[32] = 15
            mem[96] = stor15[address(arg5)].field_0
            if not stor15[address(arg5)].field_0:
                if not stor15[address(arg5)].field_0:
                    mem[(32 * stor15[address(arg5)].field_0) + 128] = 0
                    mem[64] = (32 * stor15[address(arg5)].field_0) + 224
                    mem[(32 * stor15[address(arg5)].field_0) + 160] = 4
                    mem[(32 * stor15[address(arg5)].field_0) + 192] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                    mem[(32 * stor15[address(arg5)].field_0) + 224] = 96
                    mem[(32 * stor15[address(arg5)].field_0) + 320] = 0
                    idx = 0
                    s = (32 * stor15[address(arg5)].field_0) + 160
                    t = (32 * stor15[address(arg5)].field_0) + 352
                    while idx < mem[(32 * stor15[address(arg5)].field_0) + 128]:
                        _5700 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_5700 + 32]
                        mem[t + 64] = mem[_5700 + 64]
                        mem[t + 96] = mem[_5700 + 96]
                        mem[t + 128] = mem[_5700 + 128]
                        mem[t + 160] = mem[_5700 + 172 len 20]
                        mem[t + 192] = mem[_5700 + 192]
                        mem[t + 224] = mem[_5700 + 236 len 20]
                        mem[t + 256] = bool(mem[_5700 + 256])
                        mem[t + 288] = mem[_5700 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[(32 * stor15[address(arg5)].field_0) + 256] = 0
                    mem[(32 * stor15[address(arg5)].field_0) + 288] = 128
                    mem[(32 * stor15[address(arg5)].field_0) + 352] = mem[(32 * stor15[address(arg5)].field_0) + 160]
                    mem[(32 * stor15[address(arg5)].field_0) + 384 len ceil32(mem[(32 * stor15[address(arg5)].field_0) + 160])] = mem[(32 * stor15[address(arg5)].field_0) + 192 len ceil32(mem[(32 * stor15[address(arg5)].field_0) + 160])]
                    if ceil32(mem[(32 * stor15[address(arg5)].field_0) + 160]) > mem[(32 * stor15[address(arg5)].field_0) + 160]:
                        mem[(32 * stor15[address(arg5)].field_0) + mem[(32 * stor15[address(arg5)].field_0) + 160] + 384] = 0
                    return memory
                      from mem[64]
                       len ceil32(mem[(32 * stor15[address(arg5)].field_0) + 160]) + (32 * stor15[address(arg5)].field_0) + -mem[64] + 384
                if arg1 < stor15[address(arg5)].field_0:
                    if arg3:
                        if arg2 <= arg1:
                            if arg2 > test266151307():
                                revert with 0, 65
                            mem[(32 * stor15[address(arg5)].field_0) + 128] = arg2
                            mem[64] = (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 160
                            if not arg2:
                                idx = 0
                                while idx < arg2:
                                    if arg1 < idx:
                                        revert with 0, 17
                                    if arg1 - idx >= mem[96]:
                                        revert with 0, 50
                                    mem[0] = mem[(32 * arg1 - idx) + 128]
                                    mem[32] = 12
                                    _6025 = sha3(mem[(32 * arg1 - idx) + 128], 12)
                                    _6026 = mem[64]
                                    mem[64] = mem[64] + 320
                                    mem[_6026] = stor12[mem[(32 * arg1 - idx) + 128]].field_0
                                    mem[_6026 + 32] = stor1[_6025]
                                    mem[_6026 + 64] = stor2[_6025]
                                    mem[_6026 + 96] = stor3[_6025]
                                    mem[_6026 + 128] = stor4[_6025]
                                    mem[_6026 + 160] = stor5[_6025]
                                    mem[_6026 + 192] = stor6[_6025]
                                    mem[_6026 + 224] = stor7[_6025].field_0
                                    mem[_6026 + 256] = bool(stor7[_6025].field_160)
                                    mem[_6026 + 288] = stor8[_6025]
                                    if idx >= mem[(32 * stor15[address(arg5)].field_0) + 128]:
                                        revert with 0, 50
                                    mem[(32 * idx) + (32 * stor15[address(arg5)].field_0) + 160] = _6026
                                    if idx == -1:
                                        revert with 0, 17
                                    idx = idx + 1
                                    continue 
                                if arg1 < arg2:
                                    _5826 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_5826] = 4
                                    mem[_5826 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                                    _5890 = mem[64]
                                    mem[mem[64]] = 96
                                    _6022 = mem[(32 * stor15[address(arg5)].field_0) + 128]
                                    mem[mem[64] + 96] = mem[(32 * stor15[address(arg5)].field_0) + 128]
                                    idx = 0
                                    s = (32 * stor15[address(arg5)].field_0) + 160
                                    t = mem[64] + 128
                                    while idx < _6022:
                                        _11342 = mem[s]
                                        mem[t] = mem[mem[s]]
                                        mem[t + 32] = mem[_11342 + 32]
                                        mem[t + 64] = mem[_11342 + 64]
                                        mem[t + 96] = mem[_11342 + 96]
                                        mem[t + 128] = mem[_11342 + 128]
                                        mem[t + 160] = mem[_11342 + 172 len 20]
                                        mem[t + 192] = mem[_11342 + 192]
                                        mem[t + 224] = mem[_11342 + 236 len 20]
                                        mem[t + 256] = bool(mem[_11342 + 256])
                                        mem[t + 288] = mem[_11342 + 288]
                                        idx = idx + 1
                                        s = s + 32
                                        t = t + 320
                                        continue 
                                    mem[_5890 + 32] = 0
                                    mem[_5890 + 64] = (320 * _6022) + 128
                                    _12153 = mem[_5826]
                                    mem[_5890 + (320 * _6022) + 128] = mem[_5826]
                                    mem[_5890 + (320 * _6022) + 160 len ceil32(_12153)] = mem[_5826 + 32 len ceil32(_12153)]
                                    if ceil32(_12153) > _12153:
                                        mem[_5890 + (320 * _6022) + _12153 + 160] = 0
                                    return memory
                                      from mem[64]
                                       len ceil32(_12153) + _5890 + (320 * _6022) + -mem[64] + 160
                                _6023 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_6023] = 7
                                mem[_6023 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                                _6386 = mem[64]
                                mem[mem[64]] = 96
                                _6663 = mem[(32 * stor15[address(arg5)].field_0) + 128]
                                mem[mem[64] + 96] = mem[(32 * stor15[address(arg5)].field_0) + 128]
                                idx = 0
                                s = (32 * stor15[address(arg5)].field_0) + 160
                                t = mem[64] + 128
                                while idx < _6663:
                                    _11349 = mem[s]
                                    mem[t] = mem[mem[s]]
                                    mem[t + 32] = mem[_11349 + 32]
                                    mem[t + 64] = mem[_11349 + 64]
                                    mem[t + 96] = mem[_11349 + 96]
                                    mem[t + 128] = mem[_11349 + 128]
                                    mem[t + 160] = mem[_11349 + 172 len 20]
                                    mem[t + 192] = mem[_11349 + 192]
                                    mem[t + 224] = mem[_11349 + 236 len 20]
                                    mem[t + 256] = bool(mem[_11349 + 256])
                                    mem[t + 288] = mem[_11349 + 288]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 320
                                    continue 
                                mem[_6386 + 32] = arg1 - arg2
                                mem[_6386 + 64] = (320 * _6663) + 128
                                _12154 = mem[_6023]
                                mem[_6386 + (320 * _6663) + 128] = mem[_6023]
                                mem[_6386 + (320 * _6663) + 160 len ceil32(_12154)] = mem[_6023 + 32 len ceil32(_12154)]
                                if ceil32(_12154) > _12154:
                                    mem[_6386 + (320 * _6663) + _12154 + 160] = 0
                                return memory
                                  from mem[64]
                                   len ceil32(_12154) + _6386 + (320 * _6663) + -mem[64] + 160
                            mem[64] = (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 480
                            mem[(32 * stor15[address(arg5)].field_0) + (32 * arg2) + 160] = 0
                            mem[(32 * stor15[address(arg5)].field_0) + (32 * arg2) + 192] = 0
                            mem[(32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224] = 0
                            mem[(32 * stor15[address(arg5)].field_0) + (32 * arg2) + 256] = 0
                            mem[(32 * stor15[address(arg5)].field_0) + (32 * arg2) + 288] = 0
                            mem[(32 * stor15[address(arg5)].field_0) + (32 * arg2) + 320] = 0
                            mem[(32 * stor15[address(arg5)].field_0) + (32 * arg2) + 352] = 0
                            mem[(32 * stor15[address(arg5)].field_0) + (32 * arg2) + 384] = 0
                            mem[(32 * stor15[address(arg5)].field_0) + (32 * arg2) + 416] = 0
                            mem[(32 * stor15[address(arg5)].field_0) + (32 * arg2) + 448] = 0
                            mem[var24001] = (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 160
                            s = var24001
                            idx = var24002
                            while idx - 1:
                                mem[64] = mem[64] + 320
                                mem[(32 * stor15[address(arg5)].field_0) + (32 * arg2) + 160] = 0
                                mem[(32 * stor15[address(arg5)].field_0) + (32 * arg2) + 192] = 0
                                mem[(32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224] = 0
                                mem[(32 * stor15[address(arg5)].field_0) + (32 * arg2) + 256] = 0
                                mem[(32 * stor15[address(arg5)].field_0) + (32 * arg2) + 288] = 0
                                mem[(32 * stor15[address(arg5)].field_0) + (32 * arg2) + 320] = 0
                                mem[(32 * stor15[address(arg5)].field_0) + (32 * arg2) + 352] = 0
                                mem[(32 * stor15[address(arg5)].field_0) + (32 * arg2) + 384] = 0
                                mem[(32 * stor15[address(arg5)].field_0) + (32 * arg2) + 416] = 0
                                mem[(32 * stor15[address(arg5)].field_0) + (32 * arg2) + 448] = 0
                                mem[s + 32] = (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 160
                                s = s + 32
                                idx = idx - 1
                                continue 
                            idx = 0
                            while idx < arg2:
                                if arg1 < idx:
                                    revert with 0, 17
                                if arg1 - idx >= mem[96]:
                                    revert with 0, 50
                                mem[0] = mem[(32 * arg1 - idx) + 128]
                                mem[32] = 12
                                _25261 = sha3(mem[(32 * arg1 - idx) + 128], 12)
                                _25262 = mem[64]
                                mem[64] = mem[64] + 320
                                mem[_25262] = stor12[mem[(32 * arg1 - idx) + 128]].field_0
                                mem[_25262 + 32] = stor1[_25261]
                                mem[_25262 + 64] = stor2[_25261]
                                mem[_25262 + 96] = stor3[_25261]
                                mem[_25262 + 128] = stor4[_25261]
                                mem[_25262 + 160] = stor5[_25261]
                                mem[_25262 + 192] = stor6[_25261]
                                mem[_25262 + 224] = stor7[_25261].field_0
                                mem[_25262 + 256] = bool(stor7[_25261].field_160)
                                mem[_25262 + 288] = stor8[_25261]
                                if idx >= mem[(32 * stor15[address(arg5)].field_0) + 128]:
                                    revert with 0, 50
                                mem[(32 * idx) + (32 * stor15[address(arg5)].field_0) + 160] = _25262
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                continue 
                            if arg1 < arg2:
                                _24708 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_24708] = 4
                                mem[_24708 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                                _24850 = mem[64]
                                mem[mem[64]] = 96
                                _25258 = mem[(32 * stor15[address(arg5)].field_0) + 128]
                                mem[mem[64] + 96] = mem[(32 * stor15[address(arg5)].field_0) + 128]
                                idx = 0
                                s = (32 * stor15[address(arg5)].field_0) + 160
                                t = mem[64] + 128
                                while idx < _25258:
                                    _35808 = mem[s]
                                    mem[t] = mem[mem[s]]
                                    mem[t + 32] = mem[_35808 + 32]
                                    mem[t + 64] = mem[_35808 + 64]
                                    mem[t + 96] = mem[_35808 + 96]
                                    mem[t + 128] = mem[_35808 + 128]
                                    mem[t + 160] = mem[_35808 + 172 len 20]
                                    mem[t + 192] = mem[_35808 + 192]
                                    mem[t + 224] = mem[_35808 + 236 len 20]
                                    mem[t + 256] = bool(mem[_35808 + 256])
                                    mem[t + 288] = mem[_35808 + 288]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 320
                                    continue 
                                mem[_24850 + 32] = 0
                                mem[_24850 + 64] = (320 * _25258) + 128
                                _37968 = mem[_24708]
                                mem[_24850 + (320 * _25258) + 128] = mem[_24708]
                                mem[_24850 + (320 * _25258) + 160 len ceil32(_37968)] = mem[_24708 + 32 len ceil32(_37968)]
                                if ceil32(_37968) > _37968:
                                    mem[_24850 + (320 * _25258) + _37968 + 160] = 0
                                return memory
                                  from mem[64]
                                   len ceil32(_37968) + _24850 + (320 * _25258) + -mem[64] + 160
                            _25259 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_25259] = 7
                            mem[_25259 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                            _26227 = mem[64]
                            mem[mem[64]] = 96
                            _26917 = mem[(32 * stor15[address(arg5)].field_0) + 128]
                            mem[mem[64] + 96] = mem[(32 * stor15[address(arg5)].field_0) + 128]
                            idx = 0
                            s = (32 * stor15[address(arg5)].field_0) + 160
                            t = mem[64] + 128
                            while idx < _26917:
                                _35815 = mem[s]
                                mem[t] = mem[mem[s]]
                                mem[t + 32] = mem[_35815 + 32]
                                mem[t + 64] = mem[_35815 + 64]
                                mem[t + 96] = mem[_35815 + 96]
                                mem[t + 128] = mem[_35815 + 128]
                                mem[t + 160] = mem[_35815 + 172 len 20]
                                mem[t + 192] = mem[_35815 + 192]
                                mem[t + 224] = mem[_35815 + 236 len 20]
                                mem[t + 256] = bool(mem[_35815 + 256])
                                mem[t + 288] = mem[_35815 + 288]
                                idx = idx + 1
                                s = s + 32
                                t = t + 320
                                continue 
                            mem[_26227 + 32] = arg1 - arg2
                            mem[_26227 + 64] = (320 * _26917) + 128
                            _37969 = mem[_25259]
                            mem[_26227 + (320 * _26917) + 128] = mem[_25259]
                            mem[_26227 + (320 * _26917) + 160 len ceil32(_37969)] = mem[_25259 + 32 len ceil32(_37969)]
                            if ceil32(_37969) > _37969:
                                mem[_26227 + (320 * _26917) + _37969 + 160] = 0
                            return memory
                              from mem[64]
                               len ceil32(_37969) + _26227 + (320 * _26917) + -mem[64] + 160
                        if 1 > !arg1:
                            revert with 0, 17
                        if arg1 + 1 > test266151307():
                            revert with 0, 65
                        mem[(32 * stor15[address(arg5)].field_0) + 128] = arg1 + 1
                        mem[64] = (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 160
                        if not arg1 + 1:
                            idx = 0
                            while idx < arg1 + 1:
                                if arg1 < idx:
                                    revert with 0, 17
                                if arg1 - idx >= mem[96]:
                                    revert with 0, 50
                                mem[0] = mem[(32 * arg1 - idx) + 128]
                                mem[32] = 12
                                _6031 = sha3(mem[(32 * arg1 - idx) + 128], 12)
                                _6032 = mem[64]
                                mem[64] = mem[64] + 320
                                mem[_6032] = stor12[mem[(32 * arg1 - idx) + 128]].field_0
                                mem[_6032 + 32] = stor1[_6031]
                                mem[_6032 + 64] = stor2[_6031]
                                mem[_6032 + 96] = stor3[_6031]
                                mem[_6032 + 128] = stor4[_6031]
                                mem[_6032 + 160] = stor5[_6031]
                                mem[_6032 + 192] = stor6[_6031]
                                mem[_6032 + 224] = stor7[_6031].field_0
                                mem[_6032 + 256] = bool(stor7[_6031].field_160)
                                mem[_6032 + 288] = stor8[_6031]
                                if idx >= mem[(32 * stor15[address(arg5)].field_0) + 128]:
                                    revert with 0, 50
                                mem[(32 * idx) + (32 * stor15[address(arg5)].field_0) + 160] = _6032
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                continue 
                            if arg1 < arg1 + 1:
                                _5827 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_5827] = 4
                                mem[_5827 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                                _5892 = mem[64]
                                mem[mem[64]] = 96
                                _6028 = mem[(32 * stor15[address(arg5)].field_0) + 128]
                                mem[mem[64] + 96] = mem[(32 * stor15[address(arg5)].field_0) + 128]
                                idx = 0
                                s = (32 * stor15[address(arg5)].field_0) + 160
                                t = mem[64] + 128
                                while idx < _6028:
                                    _11356 = mem[s]
                                    mem[t] = mem[mem[s]]
                                    mem[t + 32] = mem[_11356 + 32]
                                    mem[t + 64] = mem[_11356 + 64]
                                    mem[t + 96] = mem[_11356 + 96]
                                    mem[t + 128] = mem[_11356 + 128]
                                    mem[t + 160] = mem[_11356 + 172 len 20]
                                    mem[t + 192] = mem[_11356 + 192]
                                    mem[t + 224] = mem[_11356 + 236 len 20]
                                    mem[t + 256] = bool(mem[_11356 + 256])
                                    mem[t + 288] = mem[_11356 + 288]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 320
                                    continue 
                                mem[_5892 + 32] = 0
                                mem[_5892 + 64] = (320 * _6028) + 128
                                _12155 = mem[_5827]
                                mem[_5892 + (320 * _6028) + 128] = mem[_5827]
                                mem[_5892 + (320 * _6028) + 160 len ceil32(_12155)] = mem[_5827 + 32 len ceil32(_12155)]
                                if ceil32(_12155) > _12155:
                                    mem[_5892 + (320 * _6028) + _12155 + 160] = 0
                                return memory
                                  from mem[64]
                                   len ceil32(_12155) + _5892 + (320 * _6028) + -mem[64] + 160
                            _6029 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_6029] = 7
                            mem[_6029 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                            _6395 = mem[64]
                            mem[mem[64]] = 96
                            _6665 = mem[(32 * stor15[address(arg5)].field_0) + 128]
                            mem[mem[64] + 96] = mem[(32 * stor15[address(arg5)].field_0) + 128]
                            idx = 0
                            s = (32 * stor15[address(arg5)].field_0) + 160
                            t = mem[64] + 128
                            while idx < _6665:
                                _11363 = mem[s]
                                mem[t] = mem[mem[s]]
                                mem[t + 32] = mem[_11363 + 32]
                                mem[t + 64] = mem[_11363 + 64]
                                mem[t + 96] = mem[_11363 + 96]
                                mem[t + 128] = mem[_11363 + 128]
                                mem[t + 160] = mem[_11363 + 172 len 20]
                                mem[t + 192] = mem[_11363 + 192]
                                mem[t + 224] = mem[_11363 + 236 len 20]
                                mem[t + 256] = bool(mem[_11363 + 256])
                                mem[t + 288] = mem[_11363 + 288]
                                idx = idx + 1
                                s = s + 32
                                t = t + 320
                                continue 
                            mem[_6395 + 32] = -1
                            mem[_6395 + 64] = (320 * _6665) + 128
                            _12156 = mem[_6029]
                            mem[_6395 + (320 * _6665) + 128] = mem[_6029]
                            mem[_6395 + (320 * _6665) + 160 len ceil32(_12156)] = mem[_6029 + 32 len ceil32(_12156)]
                            if ceil32(_12156) > _12156:
                                mem[_6395 + (320 * _6665) + _12156 + 160] = 0
                            return memory
                              from mem[64]
                               len ceil32(_12156) + _6395 + (320 * _6665) + -mem[64] + 160
                        mem[64] = (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 480
                        mem[(32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 160] = 0
                        mem[(32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 192] = 0
                        mem[(32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 224] = 0
                        mem[(32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 256] = 0
                        mem[(32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 288] = 0
                        mem[(32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 320] = 0
                        mem[(32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 352] = 0
                        mem[(32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 384] = 0
                        mem[(32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 416] = 0
                        mem[(32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 448] = 0
                        mem[var28001] = (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 160
                        s = var28001
                        idx = var28002
                        while idx - 1:
                            mem[64] = mem[64] + 320
                            mem[(32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 160] = 0
                            mem[(32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 192] = 0
                            mem[(32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 224] = 0
                            mem[(32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 256] = 0
                            mem[(32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 288] = 0
                            mem[(32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 320] = 0
                            mem[(32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 352] = 0
                            mem[(32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 384] = 0
                            mem[(32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 416] = 0
                            mem[(32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 448] = 0
                            mem[s + 32] = (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 160
                            s = s + 32
                            idx = idx - 1
                            continue 
                        idx = 0
                        while idx < arg1 + 1:
                            if arg1 < idx:
                                revert with 0, 17
                            if arg1 - idx >= mem[96]:
                                revert with 0, 50
                            mem[0] = mem[(32 * arg1 - idx) + 128]
                            mem[32] = 12
                            _25269 = sha3(mem[(32 * arg1 - idx) + 128], 12)
                            _25270 = mem[64]
                            mem[64] = mem[64] + 320
                            mem[_25270] = stor12[mem[(32 * arg1 - idx) + 128]].field_0
                            mem[_25270 + 32] = stor1[_25269]
                            mem[_25270 + 64] = stor2[_25269]
                            mem[_25270 + 96] = stor3[_25269]
                            mem[_25270 + 128] = stor4[_25269]
                            mem[_25270 + 160] = stor5[_25269]
                            mem[_25270 + 192] = stor6[_25269]
                            mem[_25270 + 224] = stor7[_25269].field_0
                            mem[_25270 + 256] = bool(stor7[_25269].field_160)
                            mem[_25270 + 288] = stor8[_25269]
                            if idx >= mem[(32 * stor15[address(arg5)].field_0) + 128]:
                                revert with 0, 50
                            mem[(32 * idx) + (32 * stor15[address(arg5)].field_0) + 160] = _25270
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            continue 
                        if arg1 < arg1 + 1:
                            _24709 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_24709] = 4
                            mem[_24709 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                            _24854 = mem[64]
                            mem[mem[64]] = 96
                            _25266 = mem[(32 * stor15[address(arg5)].field_0) + 128]
                            mem[mem[64] + 96] = mem[(32 * stor15[address(arg5)].field_0) + 128]
                            idx = 0
                            s = (32 * stor15[address(arg5)].field_0) + 160
                            t = mem[64] + 128
                            while idx < _25266:
                                _35822 = mem[s]
                                mem[t] = mem[mem[s]]
                                mem[t + 32] = mem[_35822 + 32]
                                mem[t + 64] = mem[_35822 + 64]
                                mem[t + 96] = mem[_35822 + 96]
                                mem[t + 128] = mem[_35822 + 128]
                                mem[t + 160] = mem[_35822 + 172 len 20]
                                mem[t + 192] = mem[_35822 + 192]
                                mem[t + 224] = mem[_35822 + 236 len 20]
                                mem[t + 256] = bool(mem[_35822 + 256])
                                mem[t + 288] = mem[_35822 + 288]
                                idx = idx + 1
                                s = s + 32
                                t = t + 320
                                continue 
                            mem[_24854 + 32] = 0
                            mem[_24854 + 64] = (320 * _25266) + 128
                            _37970 = mem[_24709]
                            mem[_24854 + (320 * _25266) + 128] = mem[_24709]
                            mem[_24854 + (320 * _25266) + 160 len ceil32(_37970)] = mem[_24709 + 32 len ceil32(_37970)]
                            if ceil32(_37970) > _37970:
                                mem[_24854 + (320 * _25266) + _37970 + 160] = 0
                            return memory
                              from mem[64]
                               len ceil32(_37970) + _24854 + (320 * _25266) + -mem[64] + 160
                        _25267 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_25267] = 7
                        mem[_25267 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                        _26235 = mem[64]
                        mem[mem[64]] = 96
                        _26919 = mem[(32 * stor15[address(arg5)].field_0) + 128]
                        mem[mem[64] + 96] = mem[(32 * stor15[address(arg5)].field_0) + 128]
                        idx = 0
                        s = (32 * stor15[address(arg5)].field_0) + 160
                        t = mem[64] + 128
                        while idx < _26919:
                            _35829 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_35829 + 32]
                            mem[t + 64] = mem[_35829 + 64]
                            mem[t + 96] = mem[_35829 + 96]
                            mem[t + 128] = mem[_35829 + 128]
                            mem[t + 160] = mem[_35829 + 172 len 20]
                            mem[t + 192] = mem[_35829 + 192]
                            mem[t + 224] = mem[_35829 + 236 len 20]
                            mem[t + 256] = bool(mem[_35829 + 256])
                            mem[t + 288] = mem[_35829 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_26235 + 32] = -1
                        mem[_26235 + 64] = (320 * _26919) + 128
                        _37971 = mem[_25267]
                        mem[_26235 + (320 * _26919) + 128] = mem[_25267]
                        mem[_26235 + (320 * _26919) + 160 len ceil32(_37971)] = mem[_25267 + 32 len ceil32(_37971)]
                        if ceil32(_37971) > _37971:
                            mem[_26235 + (320 * _26919) + _37971 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_37971) + _26235 + (320 * _26919) + -mem[64] + 160
                    if stor15[address(arg5)].field_0 < arg1:
                        revert with 0, 17
                    if arg2 <= stor15[address(arg5)].field_0 - arg1:
                        if arg2 > test266151307():
                            revert with 0, 65
                        mem[(32 * stor15[address(arg5)].field_0) + 128] = arg2
                        mem[64] = (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 160
                        if not arg2:
                            idx = 0
                            while idx < arg2:
                                if arg1 > !idx:
                                    revert with 0, 17
                                if arg1 + idx >= mem[96]:
                                    revert with 0, 50
                                mem[0] = mem[(32 * arg1 + idx) + 128]
                                mem[32] = 12
                                _6035 = sha3(mem[(32 * arg1 + idx) + 128], 12)
                                _6036 = mem[64]
                                mem[64] = mem[64] + 320
                                mem[_6036] = stor12[mem[(32 * arg1 + idx) + 128]].field_0
                                mem[_6036 + 32] = stor1[_6035]
                                mem[_6036 + 64] = stor2[_6035]
                                mem[_6036 + 96] = stor3[_6035]
                                mem[_6036 + 128] = stor4[_6035]
                                mem[_6036 + 160] = stor5[_6035]
                                mem[_6036 + 192] = stor6[_6035]
                                mem[_6036 + 224] = stor7[_6035].field_0
                                mem[_6036 + 256] = bool(stor7[_6035].field_160)
                                mem[_6036 + 288] = stor8[_6035]
                                if idx >= mem[(32 * stor15[address(arg5)].field_0) + 128]:
                                    revert with 0, 50
                                mem[(32 * idx) + (32 * stor15[address(arg5)].field_0) + 160] = _6036
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                continue 
                            if arg1 > !arg2:
                                revert with 0, 17
                            if arg1 > !arg2:
                                revert with 0, 17
                            if arg1 + arg2 < mem[96]:
                                _6666 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_6666] = 7
                                mem[_6666 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                                _7049 = mem[64]
                                mem[mem[64]] = 96
                                _7601 = mem[(32 * stor15[address(arg5)].field_0) + 128]
                                mem[mem[64] + 96] = mem[(32 * stor15[address(arg5)].field_0) + 128]
                                idx = 0
                                s = (32 * stor15[address(arg5)].field_0) + 160
                                t = mem[64] + 128
                                while idx < _7601:
                                    _11370 = mem[s]
                                    mem[t] = mem[mem[s]]
                                    mem[t + 32] = mem[_11370 + 32]
                                    mem[t + 64] = mem[_11370 + 64]
                                    mem[t + 96] = mem[_11370 + 96]
                                    mem[t + 128] = mem[_11370 + 128]
                                    mem[t + 160] = mem[_11370 + 172 len 20]
                                    mem[t + 192] = mem[_11370 + 192]
                                    mem[t + 224] = mem[_11370 + 236 len 20]
                                    mem[t + 256] = bool(mem[_11370 + 256])
                                    mem[t + 288] = mem[_11370 + 288]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 320
                                    continue 
                                mem[_7049 + 32] = arg1 + arg2
                                mem[_7049 + 64] = (320 * _7601) + 128
                                _12157 = mem[_6666]
                                mem[_7049 + (320 * _7601) + 128] = mem[_6666]
                                mem[_7049 + (320 * _7601) + 160 len ceil32(_12157)] = mem[_6666 + 32 len ceil32(_12157)]
                                if ceil32(_12157) > _12157:
                                    mem[_7049 + (320 * _7601) + _12157 + 160] = 0
                                return memory
                                  from mem[64]
                                   len ceil32(_12157) + _7049 + (320 * _7601) + -mem[64] + 160
                            _6667 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_6667] = 4
                            mem[_6667 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                            _7050 = mem[64]
                            mem[mem[64]] = 96
                            _7602 = mem[(32 * stor15[address(arg5)].field_0) + 128]
                            mem[mem[64] + 96] = mem[(32 * stor15[address(arg5)].field_0) + 128]
                            idx = 0
                            s = (32 * stor15[address(arg5)].field_0) + 160
                            t = mem[64] + 128
                            while idx < _7602:
                                _11377 = mem[s]
                                mem[t] = mem[mem[s]]
                                mem[t + 32] = mem[_11377 + 32]
                                mem[t + 64] = mem[_11377 + 64]
                                mem[t + 96] = mem[_11377 + 96]
                                mem[t + 128] = mem[_11377 + 128]
                                mem[t + 160] = mem[_11377 + 172 len 20]
                                mem[t + 192] = mem[_11377 + 192]
                                mem[t + 224] = mem[_11377 + 236 len 20]
                                mem[t + 256] = bool(mem[_11377 + 256])
                                mem[t + 288] = mem[_11377 + 288]
                                idx = idx + 1
                                s = s + 32
                                t = t + 320
                                continue 
                            mem[_7050 + 32] = arg1 + arg2
                            mem[_7050 + 64] = (320 * _7602) + 128
                            _12158 = mem[_6667]
                            mem[_7050 + (320 * _7602) + 128] = mem[_6667]
                            mem[_7050 + (320 * _7602) + 160 len ceil32(_12158)] = mem[_6667 + 32 len ceil32(_12158)]
                            if ceil32(_12158) > _12158:
                                mem[_7050 + (320 * _7602) + _12158 + 160] = 0
                            return memory
                              from mem[64]
                               len ceil32(_12158) + _7050 + (320 * _7602) + -mem[64] + 160
                        mem[64] = (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 480
                        mem[(32 * stor15[address(arg5)].field_0) + (32 * arg2) + 160] = 0
                        mem[(32 * stor15[address(arg5)].field_0) + (32 * arg2) + 192] = 0
                        mem[(32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224] = 0
                        mem[(32 * stor15[address(arg5)].field_0) + (32 * arg2) + 256] = 0
                        mem[(32 * stor15[address(arg5)].field_0) + (32 * arg2) + 288] = 0
                        mem[(32 * stor15[address(arg5)].field_0) + (32 * arg2) + 320] = 0
                        mem[(32 * stor15[address(arg5)].field_0) + (32 * arg2) + 352] = 0
                        mem[(32 * stor15[address(arg5)].field_0) + (32 * arg2) + 384] = 0
                        mem[(32 * stor15[address(arg5)].field_0) + (32 * arg2) + 416] = 0
                        mem[(32 * stor15[address(arg5)].field_0) + (32 * arg2) + 448] = 0
                        mem[var27001] = (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 160
                        s = var27001
                        idx = var27002
                        while idx - 1:
                            mem[64] = mem[64] + 320
                            mem[(32 * stor15[address(arg5)].field_0) + (32 * arg2) + 160] = 0
                            mem[(32 * stor15[address(arg5)].field_0) + (32 * arg2) + 192] = 0
                            mem[(32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224] = 0
                            mem[(32 * stor15[address(arg5)].field_0) + (32 * arg2) + 256] = 0
                            mem[(32 * stor15[address(arg5)].field_0) + (32 * arg2) + 288] = 0
                            mem[(32 * stor15[address(arg5)].field_0) + (32 * arg2) + 320] = 0
                            mem[(32 * stor15[address(arg5)].field_0) + (32 * arg2) + 352] = 0
                            mem[(32 * stor15[address(arg5)].field_0) + (32 * arg2) + 384] = 0
                            mem[(32 * stor15[address(arg5)].field_0) + (32 * arg2) + 416] = 0
                            mem[(32 * stor15[address(arg5)].field_0) + (32 * arg2) + 448] = 0
                            mem[s + 32] = (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 160
                            s = s + 32
                            idx = idx - 1
                            continue 
                        idx = 0
                        while idx < arg2:
                            if arg1 > !idx:
                                revert with 0, 17
                            if arg1 + idx >= mem[96]:
                                revert with 0, 50
                            mem[0] = mem[(32 * arg1 + idx) + 128]
                            mem[32] = 12
                            _25275 = sha3(mem[(32 * arg1 + idx) + 128], 12)
                            _25276 = mem[64]
                            mem[64] = mem[64] + 320
                            mem[_25276] = stor12[mem[(32 * arg1 + idx) + 128]].field_0
                            mem[_25276 + 32] = stor1[_25275]
                            mem[_25276 + 64] = stor2[_25275]
                            mem[_25276 + 96] = stor3[_25275]
                            mem[_25276 + 128] = stor4[_25275]
                            mem[_25276 + 160] = stor5[_25275]
                            mem[_25276 + 192] = stor6[_25275]
                            mem[_25276 + 224] = stor7[_25275].field_0
                            mem[_25276 + 256] = bool(stor7[_25275].field_160)
                            mem[_25276 + 288] = stor8[_25275]
                            if idx >= mem[(32 * stor15[address(arg5)].field_0) + 128]:
                                revert with 0, 50
                            mem[(32 * idx) + (32 * stor15[address(arg5)].field_0) + 160] = _25276
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            continue 
                        if arg1 > !arg2:
                            revert with 0, 17
                        if arg1 > !arg2:
                            revert with 0, 17
                        if arg1 + arg2 < mem[96]:
                            _26920 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_26920] = 7
                            mem[_26920 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                            _27592 = mem[64]
                            mem[mem[64]] = 96
                            _28836 = mem[(32 * stor15[address(arg5)].field_0) + 128]
                            mem[mem[64] + 96] = mem[(32 * stor15[address(arg5)].field_0) + 128]
                            idx = 0
                            s = (32 * stor15[address(arg5)].field_0) + 160
                            t = mem[64] + 128
                            while idx < _28836:
                                _35836 = mem[s]
                                mem[t] = mem[mem[s]]
                                mem[t + 32] = mem[_35836 + 32]
                                mem[t + 64] = mem[_35836 + 64]
                                mem[t + 96] = mem[_35836 + 96]
                                mem[t + 128] = mem[_35836 + 128]
                                mem[t + 160] = mem[_35836 + 172 len 20]
                                mem[t + 192] = mem[_35836 + 192]
                                mem[t + 224] = mem[_35836 + 236 len 20]
                                mem[t + 256] = bool(mem[_35836 + 256])
                                mem[t + 288] = mem[_35836 + 288]
                                idx = idx + 1
                                s = s + 32
                                t = t + 320
                                continue 
                            mem[_27592 + 32] = arg1 + arg2
                            mem[_27592 + 64] = (320 * _28836) + 128
                            _37972 = mem[_26920]
                            mem[_27592 + (320 * _28836) + 128] = mem[_26920]
                            mem[_27592 + (320 * _28836) + 160 len ceil32(_37972)] = mem[_26920 + 32 len ceil32(_37972)]
                            if ceil32(_37972) > _37972:
                                mem[_27592 + (320 * _28836) + _37972 + 160] = 0
                            return memory
                              from mem[64]
                               len ceil32(_37972) + _27592 + (320 * _28836) + -mem[64] + 160
                        _26921 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_26921] = 4
                        mem[_26921 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                        _27593 = mem[64]
                        mem[mem[64]] = 96
                        _28837 = mem[(32 * stor15[address(arg5)].field_0) + 128]
                        mem[mem[64] + 96] = mem[(32 * stor15[address(arg5)].field_0) + 128]
                        idx = 0
                        s = (32 * stor15[address(arg5)].field_0) + 160
                        t = mem[64] + 128
                        while idx < _28837:
                            _35843 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_35843 + 32]
                            mem[t + 64] = mem[_35843 + 64]
                            mem[t + 96] = mem[_35843 + 96]
                            mem[t + 128] = mem[_35843 + 128]
                            mem[t + 160] = mem[_35843 + 172 len 20]
                            mem[t + 192] = mem[_35843 + 192]
                            mem[t + 224] = mem[_35843 + 236 len 20]
                            mem[t + 256] = bool(mem[_35843 + 256])
                            mem[t + 288] = mem[_35843 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_27593 + 32] = arg1 + arg2
                        mem[_27593 + 64] = (320 * _28837) + 128
                        _37973 = mem[_26921]
                        mem[_27593 + (320 * _28837) + 128] = mem[_26921]
                        mem[_27593 + (320 * _28837) + 160 len ceil32(_37973)] = mem[_26921 + 32 len ceil32(_37973)]
                        if ceil32(_37973) > _37973:
                            mem[_27593 + (320 * _28837) + _37973 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_37973) + _27593 + (320 * _28837) + -mem[64] + 160
                    if stor15[address(arg5)].field_0 < arg1:
                        revert with 0, 17
                    if stor15[address(arg5)].field_0 - arg1 > test266151307():
                        revert with 0, 65
                    mem[(32 * stor15[address(arg5)].field_0) + 128] = stor15[address(arg5)].field_0 - arg1
                    mem[64] = (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 160
                    if not stor15[address(arg5)].field_0 - arg1:
                        idx = 0
                        while idx < stor15[address(arg5)].field_0 - arg1:
                            if arg1 > !idx:
                                revert with 0, 17
                            if arg1 + idx >= mem[96]:
                                revert with 0, 50
                            mem[0] = mem[(32 * arg1 + idx) + 128]
                            mem[32] = 12
                            _6039 = sha3(mem[(32 * arg1 + idx) + 128], 12)
                            _6040 = mem[64]
                            mem[64] = mem[64] + 320
                            mem[_6040] = stor12[mem[(32 * arg1 + idx) + 128]].field_0
                            mem[_6040 + 32] = stor1[_6039]
                            mem[_6040 + 64] = stor2[_6039]
                            mem[_6040 + 96] = stor3[_6039]
                            mem[_6040 + 128] = stor4[_6039]
                            mem[_6040 + 160] = stor5[_6039]
                            mem[_6040 + 192] = stor6[_6039]
                            mem[_6040 + 224] = stor7[_6039].field_0
                            mem[_6040 + 256] = bool(stor7[_6039].field_160)
                            mem[_6040 + 288] = stor8[_6039]
                            if idx >= mem[(32 * stor15[address(arg5)].field_0) + 128]:
                                revert with 0, 50
                            mem[(32 * idx) + (32 * stor15[address(arg5)].field_0) + 160] = _6040
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            continue 
                        if arg1 > !(stor15[address(arg5)].field_0 - arg1):
                            revert with 0, 17
                        if arg1 > !(stor15[address(arg5)].field_0 - arg1):
                            revert with 0, 17
                        if stor15[address(arg5)].field_0 < mem[96]:
                            _6668 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_6668] = 7
                            mem[_6668 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                            _7055 = mem[64]
                            mem[mem[64]] = 96
                            _7603 = mem[(32 * stor15[address(arg5)].field_0) + 128]
                            mem[mem[64] + 96] = mem[(32 * stor15[address(arg5)].field_0) + 128]
                            idx = 0
                            s = (32 * stor15[address(arg5)].field_0) + 160
                            t = mem[64] + 128
                            while idx < _7603:
                                _11384 = mem[s]
                                mem[t] = mem[mem[s]]
                                mem[t + 32] = mem[_11384 + 32]
                                mem[t + 64] = mem[_11384 + 64]
                                mem[t + 96] = mem[_11384 + 96]
                                mem[t + 128] = mem[_11384 + 128]
                                mem[t + 160] = mem[_11384 + 172 len 20]
                                mem[t + 192] = mem[_11384 + 192]
                                mem[t + 224] = mem[_11384 + 236 len 20]
                                mem[t + 256] = bool(mem[_11384 + 256])
                                mem[t + 288] = mem[_11384 + 288]
                                idx = idx + 1
                                s = s + 32
                                t = t + 320
                                continue 
                            mem[_7055 + 32] = stor15[address(arg5)].field_0
                            mem[_7055 + 64] = (320 * _7603) + 128
                            _12159 = mem[_6668]
                            mem[_7055 + (320 * _7603) + 128] = mem[_6668]
                            mem[_7055 + (320 * _7603) + 160 len ceil32(_12159)] = mem[_6668 + 32 len ceil32(_12159)]
                            if ceil32(_12159) > _12159:
                                mem[_7055 + (320 * _7603) + _12159 + 160] = 0
                            return memory
                              from mem[64]
                               len ceil32(_12159) + _7055 + (320 * _7603) + -mem[64] + 160
                        _6669 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_6669] = 4
                        mem[_6669 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                        _7056 = mem[64]
                        mem[mem[64]] = 96
                        _7604 = mem[(32 * stor15[address(arg5)].field_0) + 128]
                        mem[mem[64] + 96] = mem[(32 * stor15[address(arg5)].field_0) + 128]
                        idx = 0
                        s = (32 * stor15[address(arg5)].field_0) + 160
                        t = mem[64] + 128
                        while idx < _7604:
                            _11391 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_11391 + 32]
                            mem[t + 64] = mem[_11391 + 64]
                            mem[t + 96] = mem[_11391 + 96]
                            mem[t + 128] = mem[_11391 + 128]
                            mem[t + 160] = mem[_11391 + 172 len 20]
                            mem[t + 192] = mem[_11391 + 192]
                            mem[t + 224] = mem[_11391 + 236 len 20]
                            mem[t + 256] = bool(mem[_11391 + 256])
                            mem[t + 288] = mem[_11391 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_7056 + 32] = stor15[address(arg5)].field_0
                        mem[_7056 + 64] = (320 * _7604) + 128
                        _12160 = mem[_6669]
                        mem[_7056 + (320 * _7604) + 128] = mem[_6669]
                        mem[_7056 + (320 * _7604) + 160 len ceil32(_12160)] = mem[_6669 + 32 len ceil32(_12160)]
                        if ceil32(_12160) > _12160:
                            mem[_7056 + (320 * _7604) + _12160 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_12160) + _7056 + (320 * _7604) + -mem[64] + 160
                    mem[64] = (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 480
                    mem[(32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 160] = 0
                    mem[(32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 192] = 0
                    mem[(32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 224] = 0
                    mem[(32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 256] = 0
                    mem[(32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 288] = 0
                    mem[(32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 320] = 0
                    mem[(32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 352] = 0
                    mem[(32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 384] = 0
                    mem[(32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 416] = 0
                    mem[(32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 448] = 0
                    mem[var31001] = (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 160
                    s = var31001
                    idx = var31002
                    while idx - 1:
                        mem[64] = mem[64] + 320
                        mem[(32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 160] = 0
                        mem[(32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 192] = 0
                        mem[(32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 224] = 0
                        mem[(32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 256] = 0
                        mem[(32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 288] = 0
                        mem[(32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 320] = 0
                        mem[(32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 352] = 0
                        mem[(32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 384] = 0
                        mem[(32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 416] = 0
                        mem[(32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 448] = 0
                        mem[s + 32] = (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 160
                        s = s + 32
                        idx = idx - 1
                        continue 
                    idx = 0
                    while idx < stor15[address(arg5)].field_0 - arg1:
                        if arg1 > !idx:
                            revert with 0, 17
                        if arg1 + idx >= mem[96]:
                            revert with 0, 50
                        mem[0] = mem[(32 * arg1 + idx) + 128]
                        mem[32] = 12
                        _25281 = sha3(mem[(32 * arg1 + idx) + 128], 12)
                        _25282 = mem[64]
                        mem[64] = mem[64] + 320
                        mem[_25282] = stor12[mem[(32 * arg1 + idx) + 128]].field_0
                        mem[_25282 + 32] = stor1[_25281]
                        mem[_25282 + 64] = stor2[_25281]
                        mem[_25282 + 96] = stor3[_25281]
                        mem[_25282 + 128] = stor4[_25281]
                        mem[_25282 + 160] = stor5[_25281]
                        mem[_25282 + 192] = stor6[_25281]
                        mem[_25282 + 224] = stor7[_25281].field_0
                        mem[_25282 + 256] = bool(stor7[_25281].field_160)
                        mem[_25282 + 288] = stor8[_25281]
                        if idx >= mem[(32 * stor15[address(arg5)].field_0) + 128]:
                            revert with 0, 50
                        mem[(32 * idx) + (32 * stor15[address(arg5)].field_0) + 160] = _25282
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if arg1 > !(stor15[address(arg5)].field_0 - arg1):
                        revert with 0, 17
                    if arg1 > !(stor15[address(arg5)].field_0 - arg1):
                        revert with 0, 17
                    if stor15[address(arg5)].field_0 < mem[96]:
                        _26922 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_26922] = 7
                        mem[_26922 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                        _27594 = mem[64]
                        mem[mem[64]] = 96
                        _28838 = mem[(32 * stor15[address(arg5)].field_0) + 128]
                        mem[mem[64] + 96] = mem[(32 * stor15[address(arg5)].field_0) + 128]
                        idx = 0
                        s = (32 * stor15[address(arg5)].field_0) + 160
                        t = mem[64] + 128
                        while idx < _28838:
                            _35850 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_35850 + 32]
                            mem[t + 64] = mem[_35850 + 64]
                            mem[t + 96] = mem[_35850 + 96]
                            mem[t + 128] = mem[_35850 + 128]
                            mem[t + 160] = mem[_35850 + 172 len 20]
                            mem[t + 192] = mem[_35850 + 192]
                            mem[t + 224] = mem[_35850 + 236 len 20]
                            mem[t + 256] = bool(mem[_35850 + 256])
                            mem[t + 288] = mem[_35850 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_27594 + 32] = stor15[address(arg5)].field_0
                        mem[_27594 + 64] = (320 * _28838) + 128
                        _37974 = mem[_26922]
                        mem[_27594 + (320 * _28838) + 128] = mem[_26922]
                        mem[_27594 + (320 * _28838) + 160 len ceil32(_37974)] = mem[_26922 + 32 len ceil32(_37974)]
                        if ceil32(_37974) > _37974:
                            mem[_27594 + (320 * _28838) + _37974 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_37974) + _27594 + (320 * _28838) + -mem[64] + 160
                    _26923 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_26923] = 4
                    mem[_26923 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                    _27595 = mem[64]
                    mem[mem[64]] = 96
                    _28839 = mem[(32 * stor15[address(arg5)].field_0) + 128]
                    mem[mem[64] + 96] = mem[(32 * stor15[address(arg5)].field_0) + 128]
                    idx = 0
                    s = (32 * stor15[address(arg5)].field_0) + 160
                    t = mem[64] + 128
                    while idx < _28839:
                        _35857 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_35857 + 32]
                        mem[t + 64] = mem[_35857 + 64]
                        mem[t + 96] = mem[_35857 + 96]
                        mem[t + 128] = mem[_35857 + 128]
                        mem[t + 160] = mem[_35857 + 172 len 20]
                        mem[t + 192] = mem[_35857 + 192]
                        mem[t + 224] = mem[_35857 + 236 len 20]
                        mem[t + 256] = bool(mem[_35857 + 256])
                        mem[t + 288] = mem[_35857 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_27595 + 32] = stor15[address(arg5)].field_0
                    mem[_27595 + 64] = (320 * _28839) + 128
                    _37975 = mem[_26923]
                    mem[_27595 + (320 * _28839) + 128] = mem[_26923]
                    mem[_27595 + (320 * _28839) + 160 len ceil32(_37975)] = mem[_26923 + 32 len ceil32(_37975)]
                    if ceil32(_37975) > _37975:
                        mem[_27595 + (320 * _28839) + _37975 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_37975) + _27595 + (320 * _28839) + -mem[64] + 160
                if stor15[address(arg5)].field_0 < 1:
                    revert with 0, 17
                if arg3:
                    if arg2 <= stor15[address(arg5)].field_0 - 1:
                        if arg2 > test266151307():
                            revert with 0, 65
                        mem[(32 * stor15[address(arg5)].field_0) + 128] = arg2
                        mem[64] = (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 160
                        if not arg2:
                            idx = 0
                            while idx < arg2:
                                if stor15[address(arg5)].field_0 - 1 < idx:
                                    revert with 0, 17
                                if stor15[address(arg5)].field_0 + -idx - 1 >= mem[96]:
                                    revert with 0, 50
                                mem[0] = mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + 128]
                                mem[32] = 12
                                _6045 = sha3(mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + 128], 12)
                                _6046 = mem[64]
                                mem[64] = mem[64] + 320
                                mem[_6046] = stor12[mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + 128]].field_0
                                mem[_6046 + 32] = stor1[_6045]
                                mem[_6046 + 64] = stor2[_6045]
                                mem[_6046 + 96] = stor3[_6045]
                                mem[_6046 + 128] = stor4[_6045]
                                mem[_6046 + 160] = stor5[_6045]
                                mem[_6046 + 192] = stor6[_6045]
                                mem[_6046 + 224] = stor7[_6045].field_0
                                mem[_6046 + 256] = bool(stor7[_6045].field_160)
                                mem[_6046 + 288] = stor8[_6045]
                                if idx >= mem[(32 * stor15[address(arg5)].field_0) + 128]:
                                    revert with 0, 50
                                mem[(32 * idx) + (32 * stor15[address(arg5)].field_0) + 160] = _6046
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                continue 
                            if stor15[address(arg5)].field_0 - 1 < arg2:
                                _5828 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_5828] = 4
                                mem[_5828 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                                _5896 = mem[64]
                                mem[mem[64]] = 96
                                _6042 = mem[(32 * stor15[address(arg5)].field_0) + 128]
                                mem[mem[64] + 96] = mem[(32 * stor15[address(arg5)].field_0) + 128]
                                idx = 0
                                s = (32 * stor15[address(arg5)].field_0) + 160
                                t = mem[64] + 128
                                while idx < _6042:
                                    _11398 = mem[s]
                                    mem[t] = mem[mem[s]]
                                    mem[t + 32] = mem[_11398 + 32]
                                    mem[t + 64] = mem[_11398 + 64]
                                    mem[t + 96] = mem[_11398 + 96]
                                    mem[t + 128] = mem[_11398 + 128]
                                    mem[t + 160] = mem[_11398 + 172 len 20]
                                    mem[t + 192] = mem[_11398 + 192]
                                    mem[t + 224] = mem[_11398 + 236 len 20]
                                    mem[t + 256] = bool(mem[_11398 + 256])
                                    mem[t + 288] = mem[_11398 + 288]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 320
                                    continue 
                                mem[_5896 + 32] = 0
                                mem[_5896 + 64] = (320 * _6042) + 128
                                _12161 = mem[_5828]
                                mem[_5896 + (320 * _6042) + 128] = mem[_5828]
                                mem[_5896 + (320 * _6042) + 160 len ceil32(_12161)] = mem[_5828 + 32 len ceil32(_12161)]
                                if ceil32(_12161) > _12161:
                                    mem[_5896 + (320 * _6042) + _12161 + 160] = 0
                                return memory
                                  from mem[64]
                                   len ceil32(_12161) + _5896 + (320 * _6042) + -mem[64] + 160
                            _6043 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_6043] = 7
                            mem[_6043 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                            _6404 = mem[64]
                            mem[mem[64]] = 96
                            _6671 = mem[(32 * stor15[address(arg5)].field_0) + 128]
                            mem[mem[64] + 96] = mem[(32 * stor15[address(arg5)].field_0) + 128]
                            idx = 0
                            s = (32 * stor15[address(arg5)].field_0) + 160
                            t = mem[64] + 128
                            while idx < _6671:
                                _11405 = mem[s]
                                mem[t] = mem[mem[s]]
                                mem[t + 32] = mem[_11405 + 32]
                                mem[t + 64] = mem[_11405 + 64]
                                mem[t + 96] = mem[_11405 + 96]
                                mem[t + 128] = mem[_11405 + 128]
                                mem[t + 160] = mem[_11405 + 172 len 20]
                                mem[t + 192] = mem[_11405 + 192]
                                mem[t + 224] = mem[_11405 + 236 len 20]
                                mem[t + 256] = bool(mem[_11405 + 256])
                                mem[t + 288] = mem[_11405 + 288]
                                idx = idx + 1
                                s = s + 32
                                t = t + 320
                                continue 
                            mem[_6404 + 32] = stor15[address(arg5)].field_0 + -arg2 - 1
                            mem[_6404 + 64] = (320 * _6671) + 128
                            _12162 = mem[_6043]
                            mem[_6404 + (320 * _6671) + 128] = mem[_6043]
                            mem[_6404 + (320 * _6671) + 160 len ceil32(_12162)] = mem[_6043 + 32 len ceil32(_12162)]
                            if ceil32(_12162) > _12162:
                                mem[_6404 + (320 * _6671) + _12162 + 160] = 0
                            return memory
                              from mem[64]
                               len ceil32(_12162) + _6404 + (320 * _6671) + -mem[64] + 160
                        mem[64] = (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 480
                        mem[(32 * stor15[address(arg5)].field_0) + (32 * arg2) + 160] = 0
                        mem[(32 * stor15[address(arg5)].field_0) + (32 * arg2) + 192] = 0
                        mem[(32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224] = 0
                        mem[(32 * stor15[address(arg5)].field_0) + (32 * arg2) + 256] = 0
                        mem[(32 * stor15[address(arg5)].field_0) + (32 * arg2) + 288] = 0
                        mem[(32 * stor15[address(arg5)].field_0) + (32 * arg2) + 320] = 0
                        mem[(32 * stor15[address(arg5)].field_0) + (32 * arg2) + 352] = 0
                        mem[(32 * stor15[address(arg5)].field_0) + (32 * arg2) + 384] = 0
                        mem[(32 * stor15[address(arg5)].field_0) + (32 * arg2) + 416] = 0
                        mem[(32 * stor15[address(arg5)].field_0) + (32 * arg2) + 448] = 0
                        mem[var28001] = (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 160
                        s = var28001
                        idx = var28002
                        while idx - 1:
                            mem[64] = mem[64] + 320
                            mem[(32 * stor15[address(arg5)].field_0) + (32 * arg2) + 160] = 0
                            mem[(32 * stor15[address(arg5)].field_0) + (32 * arg2) + 192] = 0
                            mem[(32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224] = 0
                            mem[(32 * stor15[address(arg5)].field_0) + (32 * arg2) + 256] = 0
                            mem[(32 * stor15[address(arg5)].field_0) + (32 * arg2) + 288] = 0
                            mem[(32 * stor15[address(arg5)].field_0) + (32 * arg2) + 320] = 0
                            mem[(32 * stor15[address(arg5)].field_0) + (32 * arg2) + 352] = 0
                            mem[(32 * stor15[address(arg5)].field_0) + (32 * arg2) + 384] = 0
                            mem[(32 * stor15[address(arg5)].field_0) + (32 * arg2) + 416] = 0
                            mem[(32 * stor15[address(arg5)].field_0) + (32 * arg2) + 448] = 0
                            mem[s + 32] = (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 160
                            s = s + 32
                            idx = idx - 1
                            continue 
                        idx = 0
                        while idx < arg2:
                            if stor15[address(arg5)].field_0 - 1 < idx:
                                revert with 0, 17
                            if stor15[address(arg5)].field_0 + -idx - 1 >= mem[96]:
                                revert with 0, 50
                            mem[0] = mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + 128]
                            mem[32] = 12
                            _25289 = sha3(mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + 128], 12)
                            _25290 = mem[64]
                            mem[64] = mem[64] + 320
                            mem[_25290] = stor12[mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + 128]].field_0
                            mem[_25290 + 32] = stor1[_25289]
                            mem[_25290 + 64] = stor2[_25289]
                            mem[_25290 + 96] = stor3[_25289]
                            mem[_25290 + 128] = stor4[_25289]
                            mem[_25290 + 160] = stor5[_25289]
                            mem[_25290 + 192] = stor6[_25289]
                            mem[_25290 + 224] = stor7[_25289].field_0
                            mem[_25290 + 256] = bool(stor7[_25289].field_160)
                            mem[_25290 + 288] = stor8[_25289]
                            if idx >= mem[(32 * stor15[address(arg5)].field_0) + 128]:
                                revert with 0, 50
                            mem[(32 * idx) + (32 * stor15[address(arg5)].field_0) + 160] = _25290
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            continue 
                        if stor15[address(arg5)].field_0 - 1 < arg2:
                            _24710 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_24710] = 4
                            mem[_24710 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                            _24864 = mem[64]
                            mem[mem[64]] = 96
                            _25286 = mem[(32 * stor15[address(arg5)].field_0) + 128]
                            mem[mem[64] + 96] = mem[(32 * stor15[address(arg5)].field_0) + 128]
                            idx = 0
                            s = (32 * stor15[address(arg5)].field_0) + 160
                            t = mem[64] + 128
                            while idx < _25286:
                                _35864 = mem[s]
                                mem[t] = mem[mem[s]]
                                mem[t + 32] = mem[_35864 + 32]
                                mem[t + 64] = mem[_35864 + 64]
                                mem[t + 96] = mem[_35864 + 96]
                                mem[t + 128] = mem[_35864 + 128]
                                mem[t + 160] = mem[_35864 + 172 len 20]
                                mem[t + 192] = mem[_35864 + 192]
                                mem[t + 224] = mem[_35864 + 236 len 20]
                                mem[t + 256] = bool(mem[_35864 + 256])
                                mem[t + 288] = mem[_35864 + 288]
                                idx = idx + 1
                                s = s + 32
                                t = t + 320
                                continue 
                            mem[_24864 + 32] = 0
                            mem[_24864 + 64] = (320 * _25286) + 128
                            _37976 = mem[_24710]
                            mem[_24864 + (320 * _25286) + 128] = mem[_24710]
                            mem[_24864 + (320 * _25286) + 160 len ceil32(_37976)] = mem[_24710 + 32 len ceil32(_37976)]
                            if ceil32(_37976) > _37976:
                                mem[_24864 + (320 * _25286) + _37976 + 160] = 0
                            return memory
                              from mem[64]
                               len ceil32(_37976) + _24864 + (320 * _25286) + -mem[64] + 160
                        _25287 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_25287] = 7
                        mem[_25287 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                        _26243 = mem[64]
                        mem[mem[64]] = 96
                        _26925 = mem[(32 * stor15[address(arg5)].field_0) + 128]
                        mem[mem[64] + 96] = mem[(32 * stor15[address(arg5)].field_0) + 128]
                        idx = 0
                        s = (32 * stor15[address(arg5)].field_0) + 160
                        t = mem[64] + 128
                        while idx < _26925:
                            _35871 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_35871 + 32]
                            mem[t + 64] = mem[_35871 + 64]
                            mem[t + 96] = mem[_35871 + 96]
                            mem[t + 128] = mem[_35871 + 128]
                            mem[t + 160] = mem[_35871 + 172 len 20]
                            mem[t + 192] = mem[_35871 + 192]
                            mem[t + 224] = mem[_35871 + 236 len 20]
                            mem[t + 256] = bool(mem[_35871 + 256])
                            mem[t + 288] = mem[_35871 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_26243 + 32] = stor15[address(arg5)].field_0 + -arg2 - 1
                        mem[_26243 + 64] = (320 * _26925) + 128
                        _37977 = mem[_25287]
                        mem[_26243 + (320 * _26925) + 128] = mem[_25287]
                        mem[_26243 + (320 * _26925) + 160 len ceil32(_37977)] = mem[_25287 + 32 len ceil32(_37977)]
                        if ceil32(_37977) > _37977:
                            mem[_26243 + (320 * _26925) + _37977 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_37977) + _26243 + (320 * _26925) + -mem[64] + 160
                    if 1 > !(stor15[address(arg5)].field_0 - 1):
                        revert with 0, 17
                    if stor15[address(arg5)].field_0 > test266151307():
                        revert with 0, 65
                    mem[(32 * stor15[address(arg5)].field_0) + 128] = stor15[address(arg5)].field_0
                    mem[64] = (64 * stor15[address(arg5)].field_0) + 160
                    if not stor15[address(arg5)].field_0:
                        idx = 0
                        while idx < stor15[address(arg5)].field_0:
                            if stor15[address(arg5)].field_0 - 1 < idx:
                                revert with 0, 17
                            if stor15[address(arg5)].field_0 + -idx - 1 >= mem[96]:
                                revert with 0, 50
                            mem[0] = mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + 128]
                            mem[32] = 12
                            _6051 = sha3(mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + 128], 12)
                            _6052 = mem[64]
                            mem[64] = mem[64] + 320
                            mem[_6052] = stor12[mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + 128]].field_0
                            mem[_6052 + 32] = stor1[_6051]
                            mem[_6052 + 64] = stor2[_6051]
                            mem[_6052 + 96] = stor3[_6051]
                            mem[_6052 + 128] = stor4[_6051]
                            mem[_6052 + 160] = stor5[_6051]
                            mem[_6052 + 192] = stor6[_6051]
                            mem[_6052 + 224] = stor7[_6051].field_0
                            mem[_6052 + 256] = bool(stor7[_6051].field_160)
                            mem[_6052 + 288] = stor8[_6051]
                            if idx >= mem[(32 * stor15[address(arg5)].field_0) + 128]:
                                revert with 0, 50
                            mem[(32 * idx) + (32 * stor15[address(arg5)].field_0) + 160] = _6052
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            continue 
                        if stor15[address(arg5)].field_0 - 1 < stor15[address(arg5)].field_0:
                            _5829 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_5829] = 4
                            mem[_5829 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                            _5898 = mem[64]
                            mem[mem[64]] = 96
                            _6048 = mem[(32 * stor15[address(arg5)].field_0) + 128]
                            mem[mem[64] + 96] = mem[(32 * stor15[address(arg5)].field_0) + 128]
                            idx = 0
                            s = (32 * stor15[address(arg5)].field_0) + 160
                            t = mem[64] + 128
                            while idx < _6048:
                                _11412 = mem[s]
                                mem[t] = mem[mem[s]]
                                mem[t + 32] = mem[_11412 + 32]
                                mem[t + 64] = mem[_11412 + 64]
                                mem[t + 96] = mem[_11412 + 96]
                                mem[t + 128] = mem[_11412 + 128]
                                mem[t + 160] = mem[_11412 + 172 len 20]
                                mem[t + 192] = mem[_11412 + 192]
                                mem[t + 224] = mem[_11412 + 236 len 20]
                                mem[t + 256] = bool(mem[_11412 + 256])
                                mem[t + 288] = mem[_11412 + 288]
                                idx = idx + 1
                                s = s + 32
                                t = t + 320
                                continue 
                            mem[_5898 + 32] = 0
                            mem[_5898 + 64] = (320 * _6048) + 128
                            _12163 = mem[_5829]
                            mem[_5898 + (320 * _6048) + 128] = mem[_5829]
                            mem[_5898 + (320 * _6048) + 160 len ceil32(_12163)] = mem[_5829 + 32 len ceil32(_12163)]
                            if ceil32(_12163) > _12163:
                                mem[_5898 + (320 * _6048) + _12163 + 160] = 0
                            return memory
                              from mem[64]
                               len ceil32(_12163) + _5898 + (320 * _6048) + -mem[64] + 160
                        _6049 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_6049] = 7
                        mem[_6049 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                        _6413 = mem[64]
                        mem[mem[64]] = 96
                        _6673 = mem[(32 * stor15[address(arg5)].field_0) + 128]
                        mem[mem[64] + 96] = mem[(32 * stor15[address(arg5)].field_0) + 128]
                        idx = 0
                        s = (32 * stor15[address(arg5)].field_0) + 160
                        t = mem[64] + 128
                        while idx < _6673:
                            _11419 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_11419 + 32]
                            mem[t + 64] = mem[_11419 + 64]
                            mem[t + 96] = mem[_11419 + 96]
                            mem[t + 128] = mem[_11419 + 128]
                            mem[t + 160] = mem[_11419 + 172 len 20]
                            mem[t + 192] = mem[_11419 + 192]
                            mem[t + 224] = mem[_11419 + 236 len 20]
                            mem[t + 256] = bool(mem[_11419 + 256])
                            mem[t + 288] = mem[_11419 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_6413 + 32] = -1
                        mem[_6413 + 64] = (320 * _6673) + 128
                        _12164 = mem[_6049]
                        mem[_6413 + (320 * _6673) + 128] = mem[_6049]
                        mem[_6413 + (320 * _6673) + 160 len ceil32(_12164)] = mem[_6049 + 32 len ceil32(_12164)]
                        if ceil32(_12164) > _12164:
                            mem[_6413 + (320 * _6673) + _12164 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_12164) + _6413 + (320 * _6673) + -mem[64] + 160
                    mem[64] = (64 * stor15[address(arg5)].field_0) + 480
                    mem[(64 * stor15[address(arg5)].field_0) + 160] = 0
                    mem[(64 * stor15[address(arg5)].field_0) + 192] = 0
                    mem[(64 * stor15[address(arg5)].field_0) + 224] = 0
                    mem[(64 * stor15[address(arg5)].field_0) + 256] = 0
                    mem[(64 * stor15[address(arg5)].field_0) + 288] = 0
                    mem[(64 * stor15[address(arg5)].field_0) + 320] = 0
                    mem[(64 * stor15[address(arg5)].field_0) + 352] = 0
                    mem[(64 * stor15[address(arg5)].field_0) + 384] = 0
                    mem[(64 * stor15[address(arg5)].field_0) + 416] = 0
                    mem[(64 * stor15[address(arg5)].field_0) + 448] = 0
                    mem[var32001] = (64 * stor15[address(arg5)].field_0) + 160
                    s = var32001
                    idx = var32002
                    while idx - 1:
                        mem[64] = mem[64] + 320
                        mem[(64 * stor15[address(arg5)].field_0) + 160] = 0
                        mem[(64 * stor15[address(arg5)].field_0) + 192] = 0
                        mem[(64 * stor15[address(arg5)].field_0) + 224] = 0
                        mem[(64 * stor15[address(arg5)].field_0) + 256] = 0
                        mem[(64 * stor15[address(arg5)].field_0) + 288] = 0
                        mem[(64 * stor15[address(arg5)].field_0) + 320] = 0
                        mem[(64 * stor15[address(arg5)].field_0) + 352] = 0
                        mem[(64 * stor15[address(arg5)].field_0) + 384] = 0
                        mem[(64 * stor15[address(arg5)].field_0) + 416] = 0
                        mem[(64 * stor15[address(arg5)].field_0) + 448] = 0
                        mem[s + 32] = (64 * stor15[address(arg5)].field_0) + 160
                        s = s + 32
                        idx = idx - 1
                        continue 
                    idx = 0
                    while idx < stor15[address(arg5)].field_0:
                        if stor15[address(arg5)].field_0 - 1 < idx:
                            revert with 0, 17
                        if stor15[address(arg5)].field_0 + -idx - 1 >= mem[96]:
                            revert with 0, 50
                        mem[0] = mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + 128]
                        mem[32] = 12
                        _25297 = sha3(mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + 128], 12)
                        _25298 = mem[64]
                        mem[64] = mem[64] + 320
                        mem[_25298] = stor12[mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + 128]].field_0
                        mem[_25298 + 32] = stor1[_25297]
                        mem[_25298 + 64] = stor2[_25297]
                        mem[_25298 + 96] = stor3[_25297]
                        mem[_25298 + 128] = stor4[_25297]
                        mem[_25298 + 160] = stor5[_25297]
                        mem[_25298 + 192] = stor6[_25297]
                        mem[_25298 + 224] = stor7[_25297].field_0
                        mem[_25298 + 256] = bool(stor7[_25297].field_160)
                        mem[_25298 + 288] = stor8[_25297]
                        if idx >= mem[(32 * stor15[address(arg5)].field_0) + 128]:
                            revert with 0, 50
                        mem[(32 * idx) + (32 * stor15[address(arg5)].field_0) + 160] = _25298
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if stor15[address(arg5)].field_0 - 1 < stor15[address(arg5)].field_0:
                        _24711 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_24711] = 4
                        mem[_24711 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                        _24868 = mem[64]
                        mem[mem[64]] = 96
                        _25294 = mem[(32 * stor15[address(arg5)].field_0) + 128]
                        mem[mem[64] + 96] = mem[(32 * stor15[address(arg5)].field_0) + 128]
                        idx = 0
                        s = (32 * stor15[address(arg5)].field_0) + 160
                        t = mem[64] + 128
                        while idx < _25294:
                            _35878 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_35878 + 32]
                            mem[t + 64] = mem[_35878 + 64]
                            mem[t + 96] = mem[_35878 + 96]
                            mem[t + 128] = mem[_35878 + 128]
                            mem[t + 160] = mem[_35878 + 172 len 20]
                            mem[t + 192] = mem[_35878 + 192]
                            mem[t + 224] = mem[_35878 + 236 len 20]
                            mem[t + 256] = bool(mem[_35878 + 256])
                            mem[t + 288] = mem[_35878 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_24868 + 32] = 0
                        mem[_24868 + 64] = (320 * _25294) + 128
                        _37978 = mem[_24711]
                        mem[_24868 + (320 * _25294) + 128] = mem[_24711]
                        mem[_24868 + (320 * _25294) + 160 len ceil32(_37978)] = mem[_24711 + 32 len ceil32(_37978)]
                        if ceil32(_37978) > _37978:
                            mem[_24868 + (320 * _25294) + _37978 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_37978) + _24868 + (320 * _25294) + -mem[64] + 160
                    _25295 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_25295] = 7
                    mem[_25295 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                    _26251 = mem[64]
                    mem[mem[64]] = 96
                    _26927 = mem[(32 * stor15[address(arg5)].field_0) + 128]
                    mem[mem[64] + 96] = mem[(32 * stor15[address(arg5)].field_0) + 128]
                    idx = 0
                    s = (32 * stor15[address(arg5)].field_0) + 160
                    t = mem[64] + 128
                    while idx < _26927:
                        _35885 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_35885 + 32]
                        mem[t + 64] = mem[_35885 + 64]
                        mem[t + 96] = mem[_35885 + 96]
                        mem[t + 128] = mem[_35885 + 128]
                        mem[t + 160] = mem[_35885 + 172 len 20]
                        mem[t + 192] = mem[_35885 + 192]
                        mem[t + 224] = mem[_35885 + 236 len 20]
                        mem[t + 256] = bool(mem[_35885 + 256])
                        mem[t + 288] = mem[_35885 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_26251 + 32] = -1
                    mem[_26251 + 64] = (320 * _26927) + 128
                    _37979 = mem[_25295]
                    mem[_26251 + (320 * _26927) + 128] = mem[_25295]
                    mem[_26251 + (320 * _26927) + 160 len ceil32(_37979)] = mem[_25295 + 32 len ceil32(_37979)]
                    if ceil32(_37979) > _37979:
                        mem[_26251 + (320 * _26927) + _37979 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_37979) + _26251 + (320 * _26927) + -mem[64] + 160
                if stor15[address(arg5)].field_0 < stor15[address(arg5)].field_0 - 1:
                    revert with 0, 17
                if arg2 > 1:
                    if stor15[address(arg5)].field_0 < stor15[address(arg5)].field_0 - 1:
                        revert with 0, 17
                    mem[(32 * stor15[address(arg5)].field_0) + 128] = 1
                    mem[64] = (32 * stor15[address(arg5)].field_0) + 512
                    mem[(32 * stor15[address(arg5)].field_0) + 192] = 0
                    mem[(32 * stor15[address(arg5)].field_0) + 224] = 0
                    mem[(32 * stor15[address(arg5)].field_0) + 256] = 0
                    mem[(32 * stor15[address(arg5)].field_0) + 288] = 0
                    mem[(32 * stor15[address(arg5)].field_0) + 320] = 0
                    mem[(32 * stor15[address(arg5)].field_0) + 352] = 0
                    mem[(32 * stor15[address(arg5)].field_0) + 384] = 0
                    mem[(32 * stor15[address(arg5)].field_0) + 416] = 0
                    mem[(32 * stor15[address(arg5)].field_0) + 448] = 0
                    mem[(32 * stor15[address(arg5)].field_0) + 480] = 0
                    mem[var35001] = (32 * stor15[address(arg5)].field_0) + 192
                    s = var35001
                    idx = var35002
                    while idx - 1:
                        mem[64] = mem[64] + 320
                        mem[(32 * stor15[address(arg5)].field_0) + 192] = 0
                        mem[(32 * stor15[address(arg5)].field_0) + 224] = 0
                        mem[(32 * stor15[address(arg5)].field_0) + 256] = 0
                        mem[(32 * stor15[address(arg5)].field_0) + 288] = 0
                        mem[(32 * stor15[address(arg5)].field_0) + 320] = 0
                        mem[(32 * stor15[address(arg5)].field_0) + 352] = 0
                        mem[(32 * stor15[address(arg5)].field_0) + 384] = 0
                        mem[(32 * stor15[address(arg5)].field_0) + 416] = 0
                        mem[(32 * stor15[address(arg5)].field_0) + 448] = 0
                        mem[(32 * stor15[address(arg5)].field_0) + 480] = 0
                        mem[s + 32] = (32 * stor15[address(arg5)].field_0) + 192
                        s = s + 32
                        idx = idx - 1
                        continue 
                    idx = 0
                    while idx < 1:
                        if stor15[address(arg5)].field_0 - 1 > !idx:
                            revert with 0, 17
                        if stor15[address(arg5)].field_0 + idx - 1 >= mem[96]:
                            revert with 0, 50
                        mem[0] = mem[(32 * stor15[address(arg5)].field_0 + idx - 1) + 128]
                        mem[32] = 12
                        _25309 = sha3(mem[(32 * stor15[address(arg5)].field_0 + idx - 1) + 128], 12)
                        _25310 = mem[64]
                        mem[64] = mem[64] + 320
                        mem[_25310] = stor12[mem[(32 * stor15[address(arg5)].field_0 + idx - 1) + 128]].field_0
                        mem[_25310 + 32] = stor1[_25309]
                        mem[_25310 + 64] = stor2[_25309]
                        mem[_25310 + 96] = stor3[_25309]
                        mem[_25310 + 128] = stor4[_25309]
                        mem[_25310 + 160] = stor5[_25309]
                        mem[_25310 + 192] = stor6[_25309]
                        mem[_25310 + 224] = stor7[_25309].field_0
                        mem[_25310 + 256] = bool(stor7[_25309].field_160)
                        mem[_25310 + 288] = stor8[_25309]
                        if idx >= mem[(32 * stor15[address(arg5)].field_0) + 128]:
                            revert with 0, 50
                        mem[(32 * idx) + (32 * stor15[address(arg5)].field_0) + 160] = _25310
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if stor15[address(arg5)].field_0 - 1 > !1:
                        revert with 0, 17
                    if stor15[address(arg5)].field_0 - 1 > !1:
                        revert with 0, 17
                    if stor15[address(arg5)].field_0 < mem[96]:
                        _26930 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_26930] = 7
                        mem[_26930 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                        _27614 = mem[64]
                        mem[mem[64]] = 96
                        _28846 = mem[(32 * stor15[address(arg5)].field_0) + 128]
                        mem[mem[64] + 96] = mem[(32 * stor15[address(arg5)].field_0) + 128]
                        idx = 0
                        s = (32 * stor15[address(arg5)].field_0) + 160
                        t = mem[64] + 128
                        while idx < _28846:
                            _35906 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_35906 + 32]
                            mem[t + 64] = mem[_35906 + 64]
                            mem[t + 96] = mem[_35906 + 96]
                            mem[t + 128] = mem[_35906 + 128]
                            mem[t + 160] = mem[_35906 + 172 len 20]
                            mem[t + 192] = mem[_35906 + 192]
                            mem[t + 224] = mem[_35906 + 236 len 20]
                            mem[t + 256] = bool(mem[_35906 + 256])
                            mem[t + 288] = mem[_35906 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_27614 + 32] = stor15[address(arg5)].field_0
                        mem[_27614 + 64] = (320 * _28846) + 128
                        _37982 = mem[_26930]
                        mem[_27614 + (320 * _28846) + 128] = mem[_26930]
                        mem[_27614 + (320 * _28846) + 160 len ceil32(_37982)] = mem[_26930 + 32 len ceil32(_37982)]
                        if ceil32(_37982) > _37982:
                            mem[_27614 + (320 * _28846) + _37982 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_37982) + _27614 + (320 * _28846) + -mem[64] + 160
                    _26931 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_26931] = 4
                    mem[_26931 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                    _27615 = mem[64]
                    mem[mem[64]] = 96
                    _28847 = mem[(32 * stor15[address(arg5)].field_0) + 128]
                    mem[mem[64] + 96] = mem[(32 * stor15[address(arg5)].field_0) + 128]
                    idx = 0
                    s = (32 * stor15[address(arg5)].field_0) + 160
                    t = mem[64] + 128
                    while idx < _28847:
                        _35913 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_35913 + 32]
                        mem[t + 64] = mem[_35913 + 64]
                        mem[t + 96] = mem[_35913 + 96]
                        mem[t + 128] = mem[_35913 + 128]
                        mem[t + 160] = mem[_35913 + 172 len 20]
                        mem[t + 192] = mem[_35913 + 192]
                        mem[t + 224] = mem[_35913 + 236 len 20]
                        mem[t + 256] = bool(mem[_35913 + 256])
                        mem[t + 288] = mem[_35913 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_27615 + 32] = stor15[address(arg5)].field_0
                    mem[_27615 + 64] = (320 * _28847) + 128
                    _37983 = mem[_26931]
                    mem[_27615 + (320 * _28847) + 128] = mem[_26931]
                    mem[_27615 + (320 * _28847) + 160 len ceil32(_37983)] = mem[_26931 + 32 len ceil32(_37983)]
                    if ceil32(_37983) > _37983:
                        mem[_27615 + (320 * _28847) + _37983 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_37983) + _27615 + (320 * _28847) + -mem[64] + 160
                if arg2 > test266151307():
                    revert with 0, 65
                mem[(32 * stor15[address(arg5)].field_0) + 128] = arg2
                mem[64] = (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 160
                if not arg2:
                    idx = 0
                    while idx < arg2:
                        if stor15[address(arg5)].field_0 - 1 > !idx:
                            revert with 0, 17
                        if stor15[address(arg5)].field_0 + idx - 1 >= mem[96]:
                            revert with 0, 50
                        mem[0] = mem[(32 * stor15[address(arg5)].field_0 + idx - 1) + 128]
                        mem[32] = 12
                        _6055 = sha3(mem[(32 * stor15[address(arg5)].field_0 + idx - 1) + 128], 12)
                        _6056 = mem[64]
                        mem[64] = mem[64] + 320
                        mem[_6056] = stor12[mem[(32 * stor15[address(arg5)].field_0 + idx - 1) + 128]].field_0
                        mem[_6056 + 32] = stor1[_6055]
                        mem[_6056 + 64] = stor2[_6055]
                        mem[_6056 + 96] = stor3[_6055]
                        mem[_6056 + 128] = stor4[_6055]
                        mem[_6056 + 160] = stor5[_6055]
                        mem[_6056 + 192] = stor6[_6055]
                        mem[_6056 + 224] = stor7[_6055].field_0
                        mem[_6056 + 256] = bool(stor7[_6055].field_160)
                        mem[_6056 + 288] = stor8[_6055]
                        if idx >= mem[(32 * stor15[address(arg5)].field_0) + 128]:
                            revert with 0, 50
                        mem[(32 * idx) + (32 * stor15[address(arg5)].field_0) + 160] = _6056
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if stor15[address(arg5)].field_0 - 1 > !arg2:
                        revert with 0, 17
                    if stor15[address(arg5)].field_0 - 1 > !arg2:
                        revert with 0, 17
                    if stor15[address(arg5)].field_0 + arg2 - 1 < mem[96]:
                        _6674 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_6674] = 7
                        mem[_6674 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                        _7089 = mem[64]
                        mem[mem[64]] = 96
                        _7609 = mem[(32 * stor15[address(arg5)].field_0) + 128]
                        mem[mem[64] + 96] = mem[(32 * stor15[address(arg5)].field_0) + 128]
                        idx = 0
                        s = (32 * stor15[address(arg5)].field_0) + 160
                        t = mem[64] + 128
                        while idx < _7609:
                            _11426 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_11426 + 32]
                            mem[t + 64] = mem[_11426 + 64]
                            mem[t + 96] = mem[_11426 + 96]
                            mem[t + 128] = mem[_11426 + 128]
                            mem[t + 160] = mem[_11426 + 172 len 20]
                            mem[t + 192] = mem[_11426 + 192]
                            mem[t + 224] = mem[_11426 + 236 len 20]
                            mem[t + 256] = bool(mem[_11426 + 256])
                            mem[t + 288] = mem[_11426 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_7089 + 32] = stor15[address(arg5)].field_0 + arg2 - 1
                        mem[_7089 + 64] = (320 * _7609) + 128
                        _12165 = mem[_6674]
                        mem[_7089 + (320 * _7609) + 128] = mem[_6674]
                        mem[_7089 + (320 * _7609) + 160 len ceil32(_12165)] = mem[_6674 + 32 len ceil32(_12165)]
                        if ceil32(_12165) > _12165:
                            mem[_7089 + (320 * _7609) + _12165 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_12165) + _7089 + (320 * _7609) + -mem[64] + 160
                    _6675 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_6675] = 4
                    mem[_6675 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                    _7090 = mem[64]
                    mem[mem[64]] = 96
                    _7610 = mem[(32 * stor15[address(arg5)].field_0) + 128]
                    mem[mem[64] + 96] = mem[(32 * stor15[address(arg5)].field_0) + 128]
                    idx = 0
                    s = (32 * stor15[address(arg5)].field_0) + 160
                    t = mem[64] + 128
                    while idx < _7610:
                        _11433 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_11433 + 32]
                        mem[t + 64] = mem[_11433 + 64]
                        mem[t + 96] = mem[_11433 + 96]
                        mem[t + 128] = mem[_11433 + 128]
                        mem[t + 160] = mem[_11433 + 172 len 20]
                        mem[t + 192] = mem[_11433 + 192]
                        mem[t + 224] = mem[_11433 + 236 len 20]
                        mem[t + 256] = bool(mem[_11433 + 256])
                        mem[t + 288] = mem[_11433 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_7090 + 32] = stor15[address(arg5)].field_0 + arg2 - 1
                    mem[_7090 + 64] = (320 * _7610) + 128
                    _12166 = mem[_6675]
                    mem[_7090 + (320 * _7610) + 128] = mem[_6675]
                    mem[_7090 + (320 * _7610) + 160 len ceil32(_12166)] = mem[_6675 + 32 len ceil32(_12166)]
                    if ceil32(_12166) > _12166:
                        mem[_7090 + (320 * _7610) + _12166 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_12166) + _7090 + (320 * _7610) + -mem[64] + 160
                mem[64] = (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 480
                mem[(32 * stor15[address(arg5)].field_0) + (32 * arg2) + 160] = 0
                mem[(32 * stor15[address(arg5)].field_0) + (32 * arg2) + 192] = 0
                mem[(32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224] = 0
                mem[(32 * stor15[address(arg5)].field_0) + (32 * arg2) + 256] = 0
                mem[(32 * stor15[address(arg5)].field_0) + (32 * arg2) + 288] = 0
                mem[(32 * stor15[address(arg5)].field_0) + (32 * arg2) + 320] = 0
                mem[(32 * stor15[address(arg5)].field_0) + (32 * arg2) + 352] = 0
                mem[(32 * stor15[address(arg5)].field_0) + (32 * arg2) + 384] = 0
                mem[(32 * stor15[address(arg5)].field_0) + (32 * arg2) + 416] = 0
                mem[(32 * stor15[address(arg5)].field_0) + (32 * arg2) + 448] = 0
                mem[var31001] = (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 160
                s = var31001
                idx = var31002
                while idx - 1:
                    mem[64] = mem[64] + 320
                    mem[(32 * stor15[address(arg5)].field_0) + (32 * arg2) + 160] = 0
                    mem[(32 * stor15[address(arg5)].field_0) + (32 * arg2) + 192] = 0
                    mem[(32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224] = 0
                    mem[(32 * stor15[address(arg5)].field_0) + (32 * arg2) + 256] = 0
                    mem[(32 * stor15[address(arg5)].field_0) + (32 * arg2) + 288] = 0
                    mem[(32 * stor15[address(arg5)].field_0) + (32 * arg2) + 320] = 0
                    mem[(32 * stor15[address(arg5)].field_0) + (32 * arg2) + 352] = 0
                    mem[(32 * stor15[address(arg5)].field_0) + (32 * arg2) + 384] = 0
                    mem[(32 * stor15[address(arg5)].field_0) + (32 * arg2) + 416] = 0
                    mem[(32 * stor15[address(arg5)].field_0) + (32 * arg2) + 448] = 0
                    mem[s + 32] = (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 160
                    s = s + 32
                    idx = idx - 1
                    continue 
                idx = 0
                while idx < arg2:
                    if stor15[address(arg5)].field_0 - 1 > !idx:
                        revert with 0, 17
                    if stor15[address(arg5)].field_0 + idx - 1 >= mem[96]:
                        revert with 0, 50
                    mem[0] = mem[(32 * stor15[address(arg5)].field_0 + idx - 1) + 128]
                    mem[32] = 12
                    _25303 = sha3(mem[(32 * stor15[address(arg5)].field_0 + idx - 1) + 128], 12)
                    _25304 = mem[64]
                    mem[64] = mem[64] + 320
                    mem[_25304] = stor12[mem[(32 * stor15[address(arg5)].field_0 + idx - 1) + 128]].field_0
                    mem[_25304 + 32] = stor1[_25303]
                    mem[_25304 + 64] = stor2[_25303]
                    mem[_25304 + 96] = stor3[_25303]
                    mem[_25304 + 128] = stor4[_25303]
                    mem[_25304 + 160] = stor5[_25303]
                    mem[_25304 + 192] = stor6[_25303]
                    mem[_25304 + 224] = stor7[_25303].field_0
                    mem[_25304 + 256] = bool(stor7[_25303].field_160)
                    mem[_25304 + 288] = stor8[_25303]
                    if idx >= mem[(32 * stor15[address(arg5)].field_0) + 128]:
                        revert with 0, 50
                    mem[(32 * idx) + (32 * stor15[address(arg5)].field_0) + 160] = _25304
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
                if stor15[address(arg5)].field_0 - 1 > !arg2:
                    revert with 0, 17
                if stor15[address(arg5)].field_0 - 1 > !arg2:
                    revert with 0, 17
                if stor15[address(arg5)].field_0 + arg2 - 1 < mem[96]:
                    _26928 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_26928] = 7
                    mem[_26928 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                    _27612 = mem[64]
                    mem[mem[64]] = 96
                    _28844 = mem[(32 * stor15[address(arg5)].field_0) + 128]
                    mem[mem[64] + 96] = mem[(32 * stor15[address(arg5)].field_0) + 128]
                    idx = 0
                    s = (32 * stor15[address(arg5)].field_0) + 160
                    t = mem[64] + 128
                    while idx < _28844:
                        _35892 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_35892 + 32]
                        mem[t + 64] = mem[_35892 + 64]
                        mem[t + 96] = mem[_35892 + 96]
                        mem[t + 128] = mem[_35892 + 128]
                        mem[t + 160] = mem[_35892 + 172 len 20]
                        mem[t + 192] = mem[_35892 + 192]
                        mem[t + 224] = mem[_35892 + 236 len 20]
                        mem[t + 256] = bool(mem[_35892 + 256])
                        mem[t + 288] = mem[_35892 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_27612 + 32] = stor15[address(arg5)].field_0 + arg2 - 1
                    mem[_27612 + 64] = (320 * _28844) + 128
                    _37980 = mem[_26928]
                    mem[_27612 + (320 * _28844) + 128] = mem[_26928]
                    mem[_27612 + (320 * _28844) + 160 len ceil32(_37980)] = mem[_26928 + 32 len ceil32(_37980)]
                    if ceil32(_37980) > _37980:
                        mem[_27612 + (320 * _28844) + _37980 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_37980) + _27612 + (320 * _28844) + -mem[64] + 160
                _26929 = mem[64]
                mem[64] = mem[64] + 64
                mem[_26929] = 4
                mem[_26929 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                _27613 = mem[64]
                mem[mem[64]] = 96
                _28845 = mem[(32 * stor15[address(arg5)].field_0) + 128]
                mem[mem[64] + 96] = mem[(32 * stor15[address(arg5)].field_0) + 128]
                idx = 0
                s = (32 * stor15[address(arg5)].field_0) + 160
                t = mem[64] + 128
                while idx < _28845:
                    _35899 = mem[s]
                    mem[t] = mem[mem[s]]
                    mem[t + 32] = mem[_35899 + 32]
                    mem[t + 64] = mem[_35899 + 64]
                    mem[t + 96] = mem[_35899 + 96]
                    mem[t + 128] = mem[_35899 + 128]
                    mem[t + 160] = mem[_35899 + 172 len 20]
                    mem[t + 192] = mem[_35899 + 192]
                    mem[t + 224] = mem[_35899 + 236 len 20]
                    mem[t + 256] = bool(mem[_35899 + 256])
                    mem[t + 288] = mem[_35899 + 288]
                    idx = idx + 1
                    s = s + 32
                    t = t + 320
                    continue 
                mem[_27613 + 32] = stor15[address(arg5)].field_0 + arg2 - 1
                mem[_27613 + 64] = (320 * _28845) + 128
                _37981 = mem[_26929]
                mem[_27613 + (320 * _28845) + 128] = mem[_26929]
                mem[_27613 + (320 * _28845) + 160 len ceil32(_37981)] = mem[_26929 + 32 len ceil32(_37981)]
                if ceil32(_37981) > _37981:
                    mem[_27613 + (320 * _28845) + _37981 + 160] = 0
                return memory
                  from mem[64]
                   len ceil32(_37981) + _27613 + (320 * _28845) + -mem[64] + 160
            mem[0] = sha3(address(arg5), 15)
            mem[128] = stor15[address(arg5)].field_0
            idx = 128
            s = 0
            while (32 * stor15[address(arg5)].field_0) + 96 > idx:
                mem[idx + 32] = stor15[address(arg5)][s].field_256
                idx = idx + 32
                s = s + 1
                continue 
            if not stor15[address(arg5)].field_0:
                mem[64] = (32 * stor15[address(arg5)].field_0) + 224
                mem[(32 * stor15[address(arg5)].field_0) + 160] = 4
                mem[(32 * stor15[address(arg5)].field_0) + 192] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                mem[(32 * stor15[address(arg5)].field_0) + 224] = 96
                _12897 = mem[(32 * stor15[address(arg5)].field_0) + 128]
                mem[(32 * stor15[address(arg5)].field_0) + 320] = mem[(32 * stor15[address(arg5)].field_0) + 128]
                idx = 0
                s = (32 * stor15[address(arg5)].field_0) + 160
                t = (32 * stor15[address(arg5)].field_0) + 352
                while idx < mem[(32 * stor15[address(arg5)].field_0) + 128]:
                    _24368 = mem[s]
                    mem[t] = mem[mem[s]]
                    mem[t + 32] = mem[_24368 + 32]
                    mem[t + 64] = mem[_24368 + 64]
                    mem[t + 96] = mem[_24368 + 96]
                    mem[t + 128] = mem[_24368 + 128]
                    mem[t + 160] = mem[_24368 + 172 len 20]
                    mem[t + 192] = mem[_24368 + 192]
                    mem[t + 224] = mem[_24368 + 236 len 20]
                    mem[t + 256] = bool(mem[_24368 + 256])
                    mem[t + 288] = mem[_24368 + 288]
                    idx = idx + 1
                    s = s + 32
                    t = t + 320
                    continue 
                mem[(32 * stor15[address(arg5)].field_0) + 256] = 0
                mem[(32 * stor15[address(arg5)].field_0) + 288] = (320 * _12897) + 128
                mem[(32 * stor15[address(arg5)].field_0) + (320 * _12897) + 352] = mem[(32 * stor15[address(arg5)].field_0) + 160]
                mem[(32 * stor15[address(arg5)].field_0) + (320 * _12897) + 384 len ceil32(mem[(32 * stor15[address(arg5)].field_0) + 160])] = mem[(32 * stor15[address(arg5)].field_0) + 192 len ceil32(mem[(32 * stor15[address(arg5)].field_0) + 160])]
                if ceil32(mem[(32 * stor15[address(arg5)].field_0) + 160]) > mem[(32 * stor15[address(arg5)].field_0) + 160]:
                    mem[(32 * stor15[address(arg5)].field_0) + (320 * _12897) + mem[(32 * stor15[address(arg5)].field_0) + 160] + 384] = 0
                return memory
                  from mem[64]
                   len ceil32(mem[(32 * stor15[address(arg5)].field_0) + 160]) + (32 * stor15[address(arg5)].field_0) + (320 * _12897) + -mem[64] + 384
            if arg1 < stor15[address(arg5)].field_0:
                if arg3:
                    if arg2 <= arg1:
                        if arg2 > test266151307():
                            revert with 0, 65
                        mem[(32 * stor15[address(arg5)].field_0) + 128] = arg2
                        mem[64] = (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 160
                        if not arg2:
                            idx = 0
                            while idx < arg2:
                                if arg1 < idx:
                                    revert with 0, 17
                                if arg1 - idx >= mem[96]:
                                    revert with 0, 50
                                mem[0] = mem[(32 * arg1 - idx) + 128]
                                mem[32] = 12
                                _25315 = sha3(mem[(32 * arg1 - idx) + 128], 12)
                                _25316 = mem[64]
                                mem[64] = mem[64] + 320
                                mem[_25316] = stor12[mem[(32 * arg1 - idx) + 128]].field_0
                                mem[_25316 + 32] = stor1[_25315]
                                mem[_25316 + 64] = stor2[_25315]
                                mem[_25316 + 96] = stor3[_25315]
                                mem[_25316 + 128] = stor4[_25315]
                                mem[_25316 + 160] = stor5[_25315]
                                mem[_25316 + 192] = stor6[_25315]
                                mem[_25316 + 224] = stor7[_25315].field_0
                                mem[_25316 + 256] = bool(stor7[_25315].field_160)
                                mem[_25316 + 288] = stor8[_25315]
                                if idx >= mem[(32 * stor15[address(arg5)].field_0) + 128]:
                                    revert with 0, 50
                                mem[(32 * idx) + (32 * stor15[address(arg5)].field_0) + 160] = _25316
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                continue 
                            if arg1 >= arg2:
                                _25313 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_25313] = 7
                                mem[_25313 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                                _26259 = mem[64]
                                mem[mem[64]] = 96
                                _26933 = mem[(32 * stor15[address(arg5)].field_0) + 128]
                                mem[mem[64] + 96] = mem[(32 * stor15[address(arg5)].field_0) + 128]
                                idx = 0
                                s = (32 * stor15[address(arg5)].field_0) + 160
                                t = mem[64] + 128
                                while idx < _26933:
                                    _35927 = mem[s]
                                    mem[t] = mem[mem[s]]
                                    mem[t + 32] = mem[_35927 + 32]
                                    mem[t + 64] = mem[_35927 + 64]
                                    mem[t + 96] = mem[_35927 + 96]
                                    mem[t + 128] = mem[_35927 + 128]
                                    mem[t + 160] = mem[_35927 + 172 len 20]
                                    mem[t + 192] = mem[_35927 + 192]
                                    mem[t + 224] = mem[_35927 + 236 len 20]
                                    mem[t + 256] = bool(mem[_35927 + 256])
                                    mem[t + 288] = mem[_35927 + 288]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 320
                                    continue 
                                mem[_26259 + 32] = arg1 - arg2
                                mem[_26259 + 64] = (320 * _26933) + 128
                                _37985 = mem[_25313]
                                mem[_26259 + (320 * _26933) + 128] = mem[_25313]
                                mem[_26259 + (320 * _26933) + 160 len ceil32(_37985)] = mem[_25313 + 32 len ceil32(_37985)]
                                if ceil32(_37985) > _37985:
                                    mem[_26259 + (320 * _26933) + _37985 + 160] = 0
                                return memory
                                  from mem[64]
                                   len ceil32(_37985) + _26259 + (320 * _26933) + -mem[64] + 160
                            _24712 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_24712] = 4
                            mem[_24712 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                            _24876 = mem[64]
                            mem[mem[64]] = 96
                            _25312 = mem[(32 * stor15[address(arg5)].field_0) + 128]
                            mem[mem[64] + 96] = mem[(32 * stor15[address(arg5)].field_0) + 128]
                            idx = 0
                            s = (32 * stor15[address(arg5)].field_0) + 160
                            t = mem[64] + 128
                            while idx < _25312:
                                _35920 = mem[s]
                                mem[t] = mem[mem[s]]
                                mem[t + 32] = mem[_35920 + 32]
                                mem[t + 64] = mem[_35920 + 64]
                                mem[t + 96] = mem[_35920 + 96]
                                mem[t + 128] = mem[_35920 + 128]
                                mem[t + 160] = mem[_35920 + 172 len 20]
                                mem[t + 192] = mem[_35920 + 192]
                                mem[t + 224] = mem[_35920 + 236 len 20]
                                mem[t + 256] = bool(mem[_35920 + 256])
                                mem[t + 288] = mem[_35920 + 288]
                                idx = idx + 1
                                s = s + 32
                                t = t + 320
                                continue 
                            mem[_24876 + 32] = 0
                            mem[_24876 + 64] = (320 * _25312) + 128
                            _37984 = mem[_24712]
                            mem[_24876 + (320 * _25312) + 128] = mem[_24712]
                            mem[_24876 + (320 * _25312) + 160 len ceil32(_37984)] = mem[_24712 + 32 len ceil32(_37984)]
                            var38001 = ceil32(_37984)
                            if ceil32(_37984) > _37984:
                                mem[_24876 + (320 * _25312) + _37984 + 160] = 0
                            return memory
                              from mem[64]
                               len ceil32(_37984) + _24876 + (320 * _25312) + -mem[64] + 160
                        mem[64] = (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 480
                        mem[(32 * stor15[address(arg5)].field_0) + (32 * arg2) + 160] = 0
                        mem[(32 * stor15[address(arg5)].field_0) + (32 * arg2) + 192] = 0
                        mem[(32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224] = 0
                        mem[(32 * stor15[address(arg5)].field_0) + (32 * arg2) + 256] = 0
                        mem[(32 * stor15[address(arg5)].field_0) + (32 * arg2) + 288] = 0
                        mem[(32 * stor15[address(arg5)].field_0) + (32 * arg2) + 320] = 0
                        mem[(32 * stor15[address(arg5)].field_0) + (32 * arg2) + 352] = 0
                        mem[(32 * stor15[address(arg5)].field_0) + (32 * arg2) + 384] = 0
                        mem[(32 * stor15[address(arg5)].field_0) + (32 * arg2) + 416] = 0
                        mem[(32 * stor15[address(arg5)].field_0) + (32 * arg2) + 448] = 0
                        mem[var28001] = (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 160
                        s = var28001
                        idx = var28002
                        while idx - 1:
                            mem[64] = mem[64] + 320
                            mem[(32 * stor15[address(arg5)].field_0) + (32 * arg2) + 160] = 0
                            mem[(32 * stor15[address(arg5)].field_0) + (32 * arg2) + 192] = 0
                            mem[(32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224] = 0
                            mem[(32 * stor15[address(arg5)].field_0) + (32 * arg2) + 256] = 0
                            mem[(32 * stor15[address(arg5)].field_0) + (32 * arg2) + 288] = 0
                            mem[(32 * stor15[address(arg5)].field_0) + (32 * arg2) + 320] = 0
                            mem[(32 * stor15[address(arg5)].field_0) + (32 * arg2) + 352] = 0
                            mem[(32 * stor15[address(arg5)].field_0) + (32 * arg2) + 384] = 0
                            mem[(32 * stor15[address(arg5)].field_0) + (32 * arg2) + 416] = 0
                            mem[(32 * stor15[address(arg5)].field_0) + (32 * arg2) + 448] = 0
                            mem[s + 32] = (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 160
                            s = s + 32
                            idx = idx - 1
                            continue 
                        idx = 0
                        while idx < arg2:
                            if arg1 < idx:
                                revert with 0, 17
                            if arg1 - idx >= mem[96]:
                                revert with 0, 50
                            mem[0] = mem[(32 * arg1 - idx) + 128]
                            mem[32] = 12
                            _49906 = sha3(mem[(32 * arg1 - idx) + 128], 12)
                            _49907 = mem[64]
                            mem[64] = mem[64] + 320
                            mem[_49907] = stor12[mem[(32 * arg1 - idx) + 128]].field_0
                            mem[_49907 + 32] = stor1[_49906]
                            mem[_49907 + 64] = stor2[_49906]
                            mem[_49907 + 96] = stor3[_49906]
                            mem[_49907 + 128] = stor4[_49906]
                            mem[_49907 + 160] = stor5[_49906]
                            mem[_49907 + 192] = stor6[_49906]
                            mem[_49907 + 224] = stor7[_49906].field_0
                            mem[_49907 + 256] = bool(stor7[_49906].field_160)
                            mem[_49907 + 288] = stor8[_49906]
                            if idx >= mem[(32 * stor15[address(arg5)].field_0) + 128]:
                                revert with 0, 50
                            mem[(32 * idx) + (32 * stor15[address(arg5)].field_0) + 160] = _49907
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            continue 
                        if arg1 < arg2:
                            _49237 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_49237] = 4
                            mem[_49237 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                            _49361 = mem[64]
                            mem[mem[64]] = 96
                            _49903 = mem[(32 * stor15[address(arg5)].field_0) + 128]
                            mem[mem[64] + 96] = mem[(32 * stor15[address(arg5)].field_0) + 128]
                            idx = 0
                            s = (32 * stor15[address(arg5)].field_0) + 160
                            t = mem[64] + 128
                            while idx < _49903:
                                _57869 = mem[s]
                                mem[t] = mem[mem[s]]
                                mem[t + 32] = mem[_57869 + 32]
                                mem[t + 64] = mem[_57869 + 64]
                                mem[t + 96] = mem[_57869 + 96]
                                mem[t + 128] = mem[_57869 + 128]
                                mem[t + 160] = mem[_57869 + 172 len 20]
                                mem[t + 192] = mem[_57869 + 192]
                                mem[t + 224] = mem[_57869 + 236 len 20]
                                mem[t + 256] = bool(mem[_57869 + 256])
                                mem[t + 288] = mem[_57869 + 288]
                                idx = idx + 1
                                s = s + 32
                                t = t + 320
                                continue 
                            mem[_49361 + 32] = 0
                            mem[_49361 + 64] = (320 * _49903) + 128
                            _59892 = mem[_49237]
                            mem[_49361 + (320 * _49903) + 128] = mem[_49237]
                            mem[_49361 + (320 * _49903) + 160 len ceil32(_59892)] = mem[_49237 + 32 len ceil32(_59892)]
                            var45001 = ceil32(_59892)
                            if ceil32(_59892) > _59892:
                                mem[_49361 + (320 * _49903) + _59892 + 160] = 0
                            return memory
                              from mem[64]
                               len ceil32(_59892) + _49361 + (320 * _49903) + -mem[64] + 160
                        _49904 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_49904] = 7
                        mem[_49904 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                        _50946 = mem[64]
                        mem[mem[64]] = 96
                        _51552 = mem[(32 * stor15[address(arg5)].field_0) + 128]
                        mem[mem[64] + 96] = mem[(32 * stor15[address(arg5)].field_0) + 128]
                        idx = 0
                        s = (32 * stor15[address(arg5)].field_0) + 160
                        t = mem[64] + 128
                        while idx < _51552:
                            _57876 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_57876 + 32]
                            mem[t + 64] = mem[_57876 + 64]
                            mem[t + 96] = mem[_57876 + 96]
                            mem[t + 128] = mem[_57876 + 128]
                            mem[t + 160] = mem[_57876 + 172 len 20]
                            mem[t + 192] = mem[_57876 + 192]
                            mem[t + 224] = mem[_57876 + 236 len 20]
                            mem[t + 256] = bool(mem[_57876 + 256])
                            mem[t + 288] = mem[_57876 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_50946 + 32] = arg1 - arg2
                        mem[_50946 + 64] = (320 * _51552) + 128
                        _59893 = mem[_49904]
                        mem[_50946 + (320 * _51552) + 128] = mem[_49904]
                        mem[_50946 + (320 * _51552) + 160 len ceil32(_59893)] = mem[_49904 + 32 len ceil32(_59893)]
                        var48001 = ceil32(_59893)
                        if ceil32(_59893) > _59893:
                            mem[_50946 + (320 * _51552) + _59893 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_59893) + _50946 + (320 * _51552) + -mem[64] + 160
                    if 1 > !arg1:
                        revert with 0, 17
                    if arg1 + 1 > test266151307():
                        revert with 0, 65
                    mem[(32 * stor15[address(arg5)].field_0) + 128] = arg1 + 1
                    mem[64] = (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 160
                    if not arg1 + 1:
                        idx = 0
                        while idx < arg1 + 1:
                            if arg1 < idx:
                                revert with 0, 17
                            if arg1 - idx >= mem[96]:
                                revert with 0, 50
                            mem[0] = mem[(32 * arg1 - idx) + 128]
                            mem[32] = 12
                            _25321 = sha3(mem[(32 * arg1 - idx) + 128], 12)
                            _25322 = mem[64]
                            mem[64] = mem[64] + 320
                            mem[_25322] = stor12[mem[(32 * arg1 - idx) + 128]].field_0
                            mem[_25322 + 32] = stor1[_25321]
                            mem[_25322 + 64] = stor2[_25321]
                            mem[_25322 + 96] = stor3[_25321]
                            mem[_25322 + 128] = stor4[_25321]
                            mem[_25322 + 160] = stor5[_25321]
                            mem[_25322 + 192] = stor6[_25321]
                            mem[_25322 + 224] = stor7[_25321].field_0
                            mem[_25322 + 256] = bool(stor7[_25321].field_160)
                            mem[_25322 + 288] = stor8[_25321]
                            if idx >= mem[(32 * stor15[address(arg5)].field_0) + 128]:
                                revert with 0, 50
                            mem[(32 * idx) + (32 * stor15[address(arg5)].field_0) + 160] = _25322
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            continue 
                        if arg1 < arg1 + 1:
                            _24713 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_24713] = 4
                            mem[_24713 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                            _24878 = mem[64]
                            mem[mem[64]] = 96
                            _25318 = mem[(32 * stor15[address(arg5)].field_0) + 128]
                            mem[mem[64] + 96] = mem[(32 * stor15[address(arg5)].field_0) + 128]
                            idx = 0
                            s = (32 * stor15[address(arg5)].field_0) + 160
                            t = mem[64] + 128
                            while idx < _25318:
                                _35934 = mem[s]
                                mem[t] = mem[mem[s]]
                                mem[t + 32] = mem[_35934 + 32]
                                mem[t + 64] = mem[_35934 + 64]
                                mem[t + 96] = mem[_35934 + 96]
                                mem[t + 128] = mem[_35934 + 128]
                                mem[t + 160] = mem[_35934 + 172 len 20]
                                mem[t + 192] = mem[_35934 + 192]
                                mem[t + 224] = mem[_35934 + 236 len 20]
                                mem[t + 256] = bool(mem[_35934 + 256])
                                mem[t + 288] = mem[_35934 + 288]
                                idx = idx + 1
                                s = s + 32
                                t = t + 320
                                continue 
                            mem[_24878 + 32] = 0
                            mem[_24878 + 64] = (320 * _25318) + 128
                            _37986 = mem[_24713]
                            mem[_24878 + (320 * _25318) + 128] = mem[_24713]
                            mem[_24878 + (320 * _25318) + 160 len ceil32(_37986)] = mem[_24713 + 32 len ceil32(_37986)]
                            var42001 = ceil32(_37986)
                            if ceil32(_37986) > _37986:
                                mem[_24878 + (320 * _25318) + _37986 + 160] = 0
                            return memory
                              from mem[64]
                               len ceil32(_37986) + _24878 + (320 * _25318) + -mem[64] + 160
                        _25319 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_25319] = 7
                        mem[_25319 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                        _26268 = mem[64]
                        mem[mem[64]] = 96
                        _26935 = mem[(32 * stor15[address(arg5)].field_0) + 128]
                        mem[mem[64] + 96] = mem[(32 * stor15[address(arg5)].field_0) + 128]
                        idx = 0
                        s = (32 * stor15[address(arg5)].field_0) + 160
                        t = mem[64] + 128
                        while idx < _26935:
                            _35941 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_35941 + 32]
                            mem[t + 64] = mem[_35941 + 64]
                            mem[t + 96] = mem[_35941 + 96]
                            mem[t + 128] = mem[_35941 + 128]
                            mem[t + 160] = mem[_35941 + 172 len 20]
                            mem[t + 192] = mem[_35941 + 192]
                            mem[t + 224] = mem[_35941 + 236 len 20]
                            mem[t + 256] = bool(mem[_35941 + 256])
                            mem[t + 288] = mem[_35941 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_26268 + 32] = -1
                        mem[_26268 + 64] = (320 * _26935) + 128
                        _37987 = mem[_25319]
                        mem[_26268 + (320 * _26935) + 128] = mem[_25319]
                        mem[_26268 + (320 * _26935) + 160 len ceil32(_37987)] = mem[_25319 + 32 len ceil32(_37987)]
                        var45001 = ceil32(_37987)
                        if ceil32(_37987) > _37987:
                            mem[_26268 + (320 * _26935) + _37987 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_37987) + _26268 + (320 * _26935) + -mem[64] + 160
                    mem[64] = (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 480
                    mem[(32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 160] = 0
                    mem[(32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 192] = 0
                    mem[(32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 224] = 0
                    mem[(32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 256] = 0
                    mem[(32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 288] = 0
                    mem[(32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 320] = 0
                    mem[(32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 352] = 0
                    mem[(32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 384] = 0
                    mem[(32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 416] = 0
                    mem[(32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 448] = 0
                    mem[var32001] = (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 160
                    s = var32001
                    idx = var32002
                    while idx - 1:
                        mem[64] = mem[64] + 320
                        mem[(32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 160] = 0
                        mem[(32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 192] = 0
                        mem[(32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 224] = 0
                        mem[(32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 256] = 0
                        mem[(32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 288] = 0
                        mem[(32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 320] = 0
                        mem[(32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 352] = 0
                        mem[(32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 384] = 0
                        mem[(32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 416] = 0
                        mem[(32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 448] = 0
                        mem[s + 32] = (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 160
                        s = s + 32
                        idx = idx - 1
                        continue 
                    idx = 0
                    while idx < arg1 + 1:
                        if arg1 < idx:
                            revert with 0, 17
                        if arg1 - idx >= mem[96]:
                            revert with 0, 50
                        mem[0] = mem[(32 * arg1 - idx) + 128]
                        mem[32] = 12
                        _49914 = sha3(mem[(32 * arg1 - idx) + 128], 12)
                        _49915 = mem[64]
                        mem[64] = mem[64] + 320
                        mem[_49915] = stor12[mem[(32 * arg1 - idx) + 128]].field_0
                        mem[_49915 + 32] = stor1[_49914]
                        mem[_49915 + 64] = stor2[_49914]
                        mem[_49915 + 96] = stor3[_49914]
                        mem[_49915 + 128] = stor4[_49914]
                        mem[_49915 + 160] = stor5[_49914]
                        mem[_49915 + 192] = stor6[_49914]
                        mem[_49915 + 224] = stor7[_49914].field_0
                        mem[_49915 + 256] = bool(stor7[_49914].field_160)
                        mem[_49915 + 288] = stor8[_49914]
                        if idx >= mem[(32 * stor15[address(arg5)].field_0) + 128]:
                            revert with 0, 50
                        mem[(32 * idx) + (32 * stor15[address(arg5)].field_0) + 160] = _49915
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if arg1 >= arg1 + 1:
                        _49912 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_49912] = 7
                        mem[_49912 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                        _50954 = mem[64]
                        mem[mem[64]] = 96
                        _51554 = mem[(32 * stor15[address(arg5)].field_0) + 128]
                        mem[mem[64] + 96] = mem[(32 * stor15[address(arg5)].field_0) + 128]
                        idx = 0
                        s = (32 * stor15[address(arg5)].field_0) + 160
                        t = mem[64] + 128
                        while idx < _51554:
                            _57890 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_57890 + 32]
                            mem[t + 64] = mem[_57890 + 64]
                            mem[t + 96] = mem[_57890 + 96]
                            mem[t + 128] = mem[_57890 + 128]
                            mem[t + 160] = mem[_57890 + 172 len 20]
                            mem[t + 192] = mem[_57890 + 192]
                            mem[t + 224] = mem[_57890 + 236 len 20]
                            mem[t + 256] = bool(mem[_57890 + 256])
                            mem[t + 288] = mem[_57890 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_50954 + 32] = -1
                        mem[_50954 + 64] = (320 * _51554) + 128
                        _59895 = mem[_49912]
                        mem[_50954 + (320 * _51554) + 128] = mem[_49912]
                        mem[_50954 + (320 * _51554) + 160 len ceil32(_59895)] = mem[_49912 + 32 len ceil32(_59895)]
                        if ceil32(_59895) > _59895:
                            mem[_50954 + (320 * _51554) + _59895 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_59895) + _50954 + (320 * _51554) + -mem[64] + 160
                    _49238 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_49238] = 4
                    mem[_49238 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                    _49365 = mem[64]
                    mem[mem[64]] = 96
                    _49911 = mem[(32 * stor15[address(arg5)].field_0) + 128]
                    mem[mem[64] + 96] = mem[(32 * stor15[address(arg5)].field_0) + 128]
                    idx = 0
                    s = (32 * stor15[address(arg5)].field_0) + 160
                    t = mem[64] + 128
                    while idx < _49911:
                        _57883 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_57883 + 32]
                        mem[t + 64] = mem[_57883 + 64]
                        mem[t + 96] = mem[_57883 + 96]
                        mem[t + 128] = mem[_57883 + 128]
                        mem[t + 160] = mem[_57883 + 172 len 20]
                        mem[t + 192] = mem[_57883 + 192]
                        mem[t + 224] = mem[_57883 + 236 len 20]
                        mem[t + 256] = bool(mem[_57883 + 256])
                        mem[t + 288] = mem[_57883 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_49365 + 32] = 0
                    mem[_49365 + 64] = (320 * _49911) + 128
                    _59894 = mem[_49238]
                    mem[_49365 + (320 * _49911) + 128] = mem[_49238]
                    mem[_49365 + (320 * _49911) + 160 len ceil32(_59894)] = mem[_49238 + 32 len ceil32(_59894)]
                    var49001 = ceil32(_59894)
                    if ceil32(_59894) > _59894:
                        mem[_49365 + (320 * _49911) + _59894 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_59894) + _49365 + (320 * _49911) + -mem[64] + 160
                if stor15[address(arg5)].field_0 < arg1:
                    revert with 0, 17
                if arg2 <= stor15[address(arg5)].field_0 - arg1:
                    if arg2 > test266151307():
                        revert with 0, 65
                    mem[(32 * stor15[address(arg5)].field_0) + 128] = arg2
                    mem[64] = (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 160
                    if not arg2:
                        idx = 0
                        while idx < arg2:
                            if arg1 > !idx:
                                revert with 0, 17
                            if arg1 + idx >= mem[96]:
                                revert with 0, 50
                            mem[0] = mem[(32 * arg1 + idx) + 128]
                            mem[32] = 12
                            _25325 = sha3(mem[(32 * arg1 + idx) + 128], 12)
                            _25326 = mem[64]
                            mem[64] = mem[64] + 320
                            mem[_25326] = stor12[mem[(32 * arg1 + idx) + 128]].field_0
                            mem[_25326 + 32] = stor1[_25325]
                            mem[_25326 + 64] = stor2[_25325]
                            mem[_25326 + 96] = stor3[_25325]
                            mem[_25326 + 128] = stor4[_25325]
                            mem[_25326 + 160] = stor5[_25325]
                            mem[_25326 + 192] = stor6[_25325]
                            mem[_25326 + 224] = stor7[_25325].field_0
                            mem[_25326 + 256] = bool(stor7[_25325].field_160)
                            mem[_25326 + 288] = stor8[_25325]
                            if idx >= mem[(32 * stor15[address(arg5)].field_0) + 128]:
                                revert with 0, 50
                            mem[(32 * idx) + (32 * stor15[address(arg5)].field_0) + 160] = _25326
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            continue 
                        if arg1 > !arg2:
                            revert with 0, 17
                        if arg1 > !arg2:
                            revert with 0, 17
                        if arg1 + arg2 < mem[96]:
                            _26936 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_26936] = 7
                            mem[_26936 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                            _27644 = mem[64]
                            mem[mem[64]] = 96
                            _28852 = mem[(32 * stor15[address(arg5)].field_0) + 128]
                            mem[mem[64] + 96] = mem[(32 * stor15[address(arg5)].field_0) + 128]
                            idx = 0
                            s = (32 * stor15[address(arg5)].field_0) + 160
                            t = mem[64] + 128
                            while idx < _28852:
                                _35948 = mem[s]
                                mem[t] = mem[mem[s]]
                                mem[t + 32] = mem[_35948 + 32]
                                mem[t + 64] = mem[_35948 + 64]
                                mem[t + 96] = mem[_35948 + 96]
                                mem[t + 128] = mem[_35948 + 128]
                                mem[t + 160] = mem[_35948 + 172 len 20]
                                mem[t + 192] = mem[_35948 + 192]
                                mem[t + 224] = mem[_35948 + 236 len 20]
                                mem[t + 256] = bool(mem[_35948 + 256])
                                mem[t + 288] = mem[_35948 + 288]
                                idx = idx + 1
                                s = s + 32
                                t = t + 320
                                continue 
                            mem[_27644 + 32] = arg1 + arg2
                            mem[_27644 + 64] = (320 * _28852) + 128
                            _37988 = mem[_26936]
                            mem[_27644 + (320 * _28852) + 128] = mem[_26936]
                            mem[_27644 + (320 * _28852) + 160 len ceil32(_37988)] = mem[_26936 + 32 len ceil32(_37988)]
                            var47001 = ceil32(_37988)
                            if ceil32(_37988) > _37988:
                                mem[_27644 + (320 * _28852) + _37988 + 160] = 0
                            return memory
                              from mem[64]
                               len ceil32(_37988) + _27644 + (320 * _28852) + -mem[64] + 160
                        _26937 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_26937] = 4
                        mem[_26937 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                        _27645 = mem[64]
                        mem[mem[64]] = 96
                        _28853 = mem[(32 * stor15[address(arg5)].field_0) + 128]
                        mem[mem[64] + 96] = mem[(32 * stor15[address(arg5)].field_0) + 128]
                        idx = 0
                        s = (32 * stor15[address(arg5)].field_0) + 160
                        t = mem[64] + 128
                        while idx < _28853:
                            _35955 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_35955 + 32]
                            mem[t + 64] = mem[_35955 + 64]
                            mem[t + 96] = mem[_35955 + 96]
                            mem[t + 128] = mem[_35955 + 128]
                            mem[t + 160] = mem[_35955 + 172 len 20]
                            mem[t + 192] = mem[_35955 + 192]
                            mem[t + 224] = mem[_35955 + 236 len 20]
                            mem[t + 256] = bool(mem[_35955 + 256])
                            mem[t + 288] = mem[_35955 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_27645 + 32] = arg1 + arg2
                        mem[_27645 + 64] = (320 * _28853) + 128
                        _37989 = mem[_26937]
                        mem[_27645 + (320 * _28853) + 128] = mem[_26937]
                        mem[_27645 + (320 * _28853) + 160 len ceil32(_37989)] = mem[_26937 + 32 len ceil32(_37989)]
                        var47001 = ceil32(_37989)
                        if ceil32(_37989) > _37989:
                            mem[_27645 + (320 * _28853) + _37989 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_37989) + _27645 + (320 * _28853) + -mem[64] + 160
                    mem[64] = (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 480
                    mem[(32 * stor15[address(arg5)].field_0) + (32 * arg2) + 160] = 0
                    mem[(32 * stor15[address(arg5)].field_0) + (32 * arg2) + 192] = 0
                    mem[(32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224] = 0
                    mem[(32 * stor15[address(arg5)].field_0) + (32 * arg2) + 256] = 0
                    mem[(32 * stor15[address(arg5)].field_0) + (32 * arg2) + 288] = 0
                    mem[(32 * stor15[address(arg5)].field_0) + (32 * arg2) + 320] = 0
                    mem[(32 * stor15[address(arg5)].field_0) + (32 * arg2) + 352] = 0
                    mem[(32 * stor15[address(arg5)].field_0) + (32 * arg2) + 384] = 0
                    mem[(32 * stor15[address(arg5)].field_0) + (32 * arg2) + 416] = 0
                    mem[(32 * stor15[address(arg5)].field_0) + (32 * arg2) + 448] = 0
                    mem[var31001] = (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 160
                    s = var31001
                    idx = var31002
                    while idx - 1:
                        mem[64] = mem[64] + 320
                        mem[(32 * stor15[address(arg5)].field_0) + (32 * arg2) + 160] = 0
                        mem[(32 * stor15[address(arg5)].field_0) + (32 * arg2) + 192] = 0
                        mem[(32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224] = 0
                        mem[(32 * stor15[address(arg5)].field_0) + (32 * arg2) + 256] = 0
                        mem[(32 * stor15[address(arg5)].field_0) + (32 * arg2) + 288] = 0
                        mem[(32 * stor15[address(arg5)].field_0) + (32 * arg2) + 320] = 0
                        mem[(32 * stor15[address(arg5)].field_0) + (32 * arg2) + 352] = 0
                        mem[(32 * stor15[address(arg5)].field_0) + (32 * arg2) + 384] = 0
                        mem[(32 * stor15[address(arg5)].field_0) + (32 * arg2) + 416] = 0
                        mem[(32 * stor15[address(arg5)].field_0) + (32 * arg2) + 448] = 0
                        mem[s + 32] = (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 160
                        s = s + 32
                        idx = idx - 1
                        continue 
                    idx = 0
                    while idx < arg2:
                        if arg1 > !idx:
                            revert with 0, 17
                        if arg1 + idx >= mem[96]:
                            revert with 0, 50
                        mem[0] = mem[(32 * arg1 + idx) + 128]
                        mem[32] = 12
                        _49920 = sha3(mem[(32 * arg1 + idx) + 128], 12)
                        _49921 = mem[64]
                        mem[64] = mem[64] + 320
                        mem[_49921] = stor12[mem[(32 * arg1 + idx) + 128]].field_0
                        mem[_49921 + 32] = stor1[_49920]
                        mem[_49921 + 64] = stor2[_49920]
                        mem[_49921 + 96] = stor3[_49920]
                        mem[_49921 + 128] = stor4[_49920]
                        mem[_49921 + 160] = stor5[_49920]
                        mem[_49921 + 192] = stor6[_49920]
                        mem[_49921 + 224] = stor7[_49920].field_0
                        mem[_49921 + 256] = bool(stor7[_49920].field_160)
                        mem[_49921 + 288] = stor8[_49920]
                        if idx >= mem[(32 * stor15[address(arg5)].field_0) + 128]:
                            revert with 0, 50
                        mem[(32 * idx) + (32 * stor15[address(arg5)].field_0) + 160] = _49921
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if arg1 > !arg2:
                        revert with 0, 17
                    if arg1 > !arg2:
                        revert with 0, 17
                    if arg1 + arg2 < mem[96]:
                        _51555 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_51555] = 7
                        mem[_51555 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                        _52077 = mem[64]
                        mem[mem[64]] = 96
                        _53025 = mem[(32 * stor15[address(arg5)].field_0) + 128]
                        mem[mem[64] + 96] = mem[(32 * stor15[address(arg5)].field_0) + 128]
                        idx = 0
                        s = (32 * stor15[address(arg5)].field_0) + 160
                        t = mem[64] + 128
                        while idx < _53025:
                            _57897 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_57897 + 32]
                            mem[t + 64] = mem[_57897 + 64]
                            mem[t + 96] = mem[_57897 + 96]
                            mem[t + 128] = mem[_57897 + 128]
                            mem[t + 160] = mem[_57897 + 172 len 20]
                            mem[t + 192] = mem[_57897 + 192]
                            mem[t + 224] = mem[_57897 + 236 len 20]
                            mem[t + 256] = bool(mem[_57897 + 256])
                            mem[t + 288] = mem[_57897 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_52077 + 32] = arg1 + arg2
                        mem[_52077 + 64] = (320 * _53025) + 128
                        _59896 = mem[_51555]
                        mem[_52077 + (320 * _53025) + 128] = mem[_51555]
                        mem[_52077 + (320 * _53025) + 160 len ceil32(_59896)] = mem[_51555 + 32 len ceil32(_59896)]
                        var54001 = ceil32(_59896)
                        if ceil32(_59896) > _59896:
                            mem[_52077 + (320 * _53025) + _59896 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_59896) + _52077 + (320 * _53025) + -mem[64] + 160
                    _51556 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_51556] = 4
                    mem[_51556 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                    _52078 = mem[64]
                    mem[mem[64]] = 96
                    _53026 = mem[(32 * stor15[address(arg5)].field_0) + 128]
                    mem[mem[64] + 96] = mem[(32 * stor15[address(arg5)].field_0) + 128]
                    idx = 0
                    s = (32 * stor15[address(arg5)].field_0) + 160
                    t = mem[64] + 128
                    while idx < _53026:
                        _57904 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_57904 + 32]
                        mem[t + 64] = mem[_57904 + 64]
                        mem[t + 96] = mem[_57904 + 96]
                        mem[t + 128] = mem[_57904 + 128]
                        mem[t + 160] = mem[_57904 + 172 len 20]
                        mem[t + 192] = mem[_57904 + 192]
                        mem[t + 224] = mem[_57904 + 236 len 20]
                        mem[t + 256] = bool(mem[_57904 + 256])
                        mem[t + 288] = mem[_57904 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_52078 + 32] = arg1 + arg2
                    mem[_52078 + 64] = (320 * _53026) + 128
                    _59897 = mem[_51556]
                    mem[_52078 + (320 * _53026) + 128] = mem[_51556]
                    mem[_52078 + (320 * _53026) + 160 len ceil32(_59897)] = mem[_51556 + 32 len ceil32(_59897)]
                    var54001 = ceil32(_59897)
                    if ceil32(_59897) > _59897:
                        mem[_52078 + (320 * _53026) + _59897 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_59897) + _52078 + (320 * _53026) + -mem[64] + 160
                if stor15[address(arg5)].field_0 < arg1:
                    revert with 0, 17
                if stor15[address(arg5)].field_0 - arg1 > test266151307():
                    revert with 0, 65
                mem[(32 * stor15[address(arg5)].field_0) + 128] = stor15[address(arg5)].field_0 - arg1
                mem[64] = (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 160
                if not stor15[address(arg5)].field_0 - arg1:
                    idx = 0
                    while idx < stor15[address(arg5)].field_0 - arg1:
                        if arg1 > !idx:
                            revert with 0, 17
                        if arg1 + idx >= mem[96]:
                            revert with 0, 50
                        mem[0] = mem[(32 * arg1 + idx) + 128]
                        mem[32] = 12
                        _25329 = sha3(mem[(32 * arg1 + idx) + 128], 12)
                        _25330 = mem[64]
                        mem[64] = mem[64] + 320
                        mem[_25330] = stor12[mem[(32 * arg1 + idx) + 128]].field_0
                        mem[_25330 + 32] = stor1[_25329]
                        mem[_25330 + 64] = stor2[_25329]
                        mem[_25330 + 96] = stor3[_25329]
                        mem[_25330 + 128] = stor4[_25329]
                        mem[_25330 + 160] = stor5[_25329]
                        mem[_25330 + 192] = stor6[_25329]
                        mem[_25330 + 224] = stor7[_25329].field_0
                        mem[_25330 + 256] = bool(stor7[_25329].field_160)
                        mem[_25330 + 288] = stor8[_25329]
                        if idx >= mem[(32 * stor15[address(arg5)].field_0) + 128]:
                            revert with 0, 50
                        mem[(32 * idx) + (32 * stor15[address(arg5)].field_0) + 160] = _25330
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if arg1 > !(stor15[address(arg5)].field_0 - arg1):
                        revert with 0, 17
                    if arg1 > !(stor15[address(arg5)].field_0 - arg1):
                        revert with 0, 17
                    if stor15[address(arg5)].field_0 < mem[96]:
                        _26938 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_26938] = 7
                        mem[_26938 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                        _27650 = mem[64]
                        mem[mem[64]] = 96
                        _28854 = mem[(32 * stor15[address(arg5)].field_0) + 128]
                        mem[mem[64] + 96] = mem[(32 * stor15[address(arg5)].field_0) + 128]
                        idx = 0
                        s = (32 * stor15[address(arg5)].field_0) + 160
                        t = mem[64] + 128
                        while idx < _28854:
                            _35962 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_35962 + 32]
                            mem[t + 64] = mem[_35962 + 64]
                            mem[t + 96] = mem[_35962 + 96]
                            mem[t + 128] = mem[_35962 + 128]
                            mem[t + 160] = mem[_35962 + 172 len 20]
                            mem[t + 192] = mem[_35962 + 192]
                            mem[t + 224] = mem[_35962 + 236 len 20]
                            mem[t + 256] = bool(mem[_35962 + 256])
                            mem[t + 288] = mem[_35962 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_27650 + 32] = stor15[address(arg5)].field_0
                        mem[_27650 + 64] = (320 * _28854) + 128
                        _37990 = mem[_26938]
                        mem[_27650 + (320 * _28854) + 128] = mem[_26938]
                        mem[_27650 + (320 * _28854) + 160 len ceil32(_37990)] = mem[_26938 + 32 len ceil32(_37990)]
                        var51001 = ceil32(_37990)
                        if ceil32(_37990) > _37990:
                            mem[_27650 + (320 * _28854) + _37990 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_37990) + _27650 + (320 * _28854) + -mem[64] + 160
                    _26939 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_26939] = 4
                    mem[_26939 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                    _27651 = mem[64]
                    mem[mem[64]] = 96
                    _28855 = mem[(32 * stor15[address(arg5)].field_0) + 128]
                    mem[mem[64] + 96] = mem[(32 * stor15[address(arg5)].field_0) + 128]
                    idx = 0
                    s = (32 * stor15[address(arg5)].field_0) + 160
                    t = mem[64] + 128
                    while idx < _28855:
                        _35969 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_35969 + 32]
                        mem[t + 64] = mem[_35969 + 64]
                        mem[t + 96] = mem[_35969 + 96]
                        mem[t + 128] = mem[_35969 + 128]
                        mem[t + 160] = mem[_35969 + 172 len 20]
                        mem[t + 192] = mem[_35969 + 192]
                        mem[t + 224] = mem[_35969 + 236 len 20]
                        mem[t + 256] = bool(mem[_35969 + 256])
                        mem[t + 288] = mem[_35969 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_27651 + 32] = stor15[address(arg5)].field_0
                    mem[_27651 + 64] = (320 * _28855) + 128
                    _37991 = mem[_26939]
                    mem[_27651 + (320 * _28855) + 128] = mem[_26939]
                    mem[_27651 + (320 * _28855) + 160 len ceil32(_37991)] = mem[_26939 + 32 len ceil32(_37991)]
                    var51001 = ceil32(_37991)
                    if ceil32(_37991) > _37991:
                        mem[_27651 + (320 * _28855) + _37991 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_37991) + _27651 + (320 * _28855) + -mem[64] + 160
                mem[64] = (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 480
                mem[(32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 160] = 0
                mem[(32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 192] = 0
                mem[(32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 224] = 0
                mem[(32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 256] = 0
                mem[(32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 288] = 0
                mem[(32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 320] = 0
                mem[(32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 352] = 0
                mem[(32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 384] = 0
                mem[(32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 416] = 0
                mem[(32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 448] = 0
                mem[var35001] = (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 160
                s = var35001
                idx = var35002
                while idx - 1:
                    mem[64] = mem[64] + 320
                    mem[(32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 160] = 0
                    mem[(32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 192] = 0
                    mem[(32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 224] = 0
                    mem[(32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 256] = 0
                    mem[(32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 288] = 0
                    mem[(32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 320] = 0
                    mem[(32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 352] = 0
                    mem[(32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 384] = 0
                    mem[(32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 416] = 0
                    mem[(32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 448] = 0
                    mem[s + 32] = (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 160
                    s = s + 32
                    idx = idx - 1
                    continue 
                idx = 0
                while idx < stor15[address(arg5)].field_0 - arg1:
                    if arg1 > !idx:
                        revert with 0, 17
                    if arg1 + idx >= mem[96]:
                        revert with 0, 50
                    mem[0] = mem[(32 * arg1 + idx) + 128]
                    mem[32] = 12
                    _49926 = sha3(mem[(32 * arg1 + idx) + 128], 12)
                    _49927 = mem[64]
                    mem[64] = mem[64] + 320
                    mem[_49927] = stor12[mem[(32 * arg1 + idx) + 128]].field_0
                    mem[_49927 + 32] = stor1[_49926]
                    mem[_49927 + 64] = stor2[_49926]
                    mem[_49927 + 96] = stor3[_49926]
                    mem[_49927 + 128] = stor4[_49926]
                    mem[_49927 + 160] = stor5[_49926]
                    mem[_49927 + 192] = stor6[_49926]
                    mem[_49927 + 224] = stor7[_49926].field_0
                    mem[_49927 + 256] = bool(stor7[_49926].field_160)
                    mem[_49927 + 288] = stor8[_49926]
                    if idx >= mem[(32 * stor15[address(arg5)].field_0) + 128]:
                        revert with 0, 50
                    mem[(32 * idx) + (32 * stor15[address(arg5)].field_0) + 160] = _49927
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
                if arg1 > !(stor15[address(arg5)].field_0 - arg1):
                    revert with 0, 17
                if arg1 > !(stor15[address(arg5)].field_0 - arg1):
                    revert with 0, 17
                if stor15[address(arg5)].field_0 < mem[96]:
                    _51557 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_51557] = 7
                    mem[_51557 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                    _52079 = mem[64]
                    mem[mem[64]] = 96
                    _53027 = mem[(32 * stor15[address(arg5)].field_0) + 128]
                    mem[mem[64] + 96] = mem[(32 * stor15[address(arg5)].field_0) + 128]
                    idx = 0
                    s = (32 * stor15[address(arg5)].field_0) + 160
                    t = mem[64] + 128
                    while idx < _53027:
                        _57911 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_57911 + 32]
                        mem[t + 64] = mem[_57911 + 64]
                        mem[t + 96] = mem[_57911 + 96]
                        mem[t + 128] = mem[_57911 + 128]
                        mem[t + 160] = mem[_57911 + 172 len 20]
                        mem[t + 192] = mem[_57911 + 192]
                        mem[t + 224] = mem[_57911 + 236 len 20]
                        mem[t + 256] = bool(mem[_57911 + 256])
                        mem[t + 288] = mem[_57911 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_52079 + 32] = stor15[address(arg5)].field_0
                    mem[_52079 + 64] = (320 * _53027) + 128
                    _59898 = mem[_51557]
                    mem[_52079 + (320 * _53027) + 128] = mem[_51557]
                    mem[_52079 + (320 * _53027) + 160 len ceil32(_59898)] = mem[_51557 + 32 len ceil32(_59898)]
                    var58001 = ceil32(_59898)
                    if ceil32(_59898) > _59898:
                        mem[_52079 + (320 * _53027) + _59898 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_59898) + _52079 + (320 * _53027) + -mem[64] + 160
                _51558 = mem[64]
                mem[64] = mem[64] + 64
                mem[_51558] = 4
                mem[_51558 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                _52080 = mem[64]
                mem[mem[64]] = 96
                _53028 = mem[(32 * stor15[address(arg5)].field_0) + 128]
                mem[mem[64] + 96] = mem[(32 * stor15[address(arg5)].field_0) + 128]
                idx = 0
                s = (32 * stor15[address(arg5)].field_0) + 160
                t = mem[64] + 128
                while idx < _53028:
                    _57918 = mem[s]
                    mem[t] = mem[mem[s]]
                    mem[t + 32] = mem[_57918 + 32]
                    mem[t + 64] = mem[_57918 + 64]
                    mem[t + 96] = mem[_57918 + 96]
                    mem[t + 128] = mem[_57918 + 128]
                    mem[t + 160] = mem[_57918 + 172 len 20]
                    mem[t + 192] = mem[_57918 + 192]
                    mem[t + 224] = mem[_57918 + 236 len 20]
                    mem[t + 256] = bool(mem[_57918 + 256])
                    mem[t + 288] = mem[_57918 + 288]
                    idx = idx + 1
                    s = s + 32
                    t = t + 320
                    continue 
                mem[_52080 + 32] = stor15[address(arg5)].field_0
                mem[_52080 + 64] = (320 * _53028) + 128
                _59899 = mem[_51558]
                mem[_52080 + (320 * _53028) + 128] = mem[_51558]
                mem[_52080 + (320 * _53028) + 160 len ceil32(_59899)] = mem[_51558 + 32 len ceil32(_59899)]
                var58001 = ceil32(_59899)
                if ceil32(_59899) > _59899:
                    mem[_52080 + (320 * _53028) + _59899 + 160] = 0
                return memory
                  from mem[64]
                   len ceil32(_59899) + _52080 + (320 * _53028) + -mem[64] + 160
            if stor15[address(arg5)].field_0 < 1:
                revert with 0, 17
            if arg3:
                if arg2 <= stor15[address(arg5)].field_0 - 1:
                    if arg2 > test266151307():
                        revert with 0, 65
                    mem[(32 * stor15[address(arg5)].field_0) + 128] = arg2
                    mem[64] = (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 160
                    if not arg2:
                        idx = 0
                        while idx < arg2:
                            if stor15[address(arg5)].field_0 - 1 < idx:
                                revert with 0, 17
                            if stor15[address(arg5)].field_0 + -idx - 1 >= mem[96]:
                                revert with 0, 50
                            mem[0] = mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + 128]
                            mem[32] = 12
                            _25335 = sha3(mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + 128], 12)
                            _25336 = mem[64]
                            mem[64] = mem[64] + 320
                            mem[_25336] = stor12[mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + 128]].field_0
                            mem[_25336 + 32] = stor1[_25335]
                            mem[_25336 + 64] = stor2[_25335]
                            mem[_25336 + 96] = stor3[_25335]
                            mem[_25336 + 128] = stor4[_25335]
                            mem[_25336 + 160] = stor5[_25335]
                            mem[_25336 + 192] = stor6[_25335]
                            mem[_25336 + 224] = stor7[_25335].field_0
                            mem[_25336 + 256] = bool(stor7[_25335].field_160)
                            mem[_25336 + 288] = stor8[_25335]
                            if idx >= mem[(32 * stor15[address(arg5)].field_0) + 128]:
                                revert with 0, 50
                            mem[(32 * idx) + (32 * stor15[address(arg5)].field_0) + 160] = _25336
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            continue 
                        if stor15[address(arg5)].field_0 - 1 < arg2:
                            _24714 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_24714] = 4
                            mem[_24714 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                            _24882 = mem[64]
                            mem[mem[64]] = 96
                            _25332 = mem[(32 * stor15[address(arg5)].field_0) + 128]
                            mem[mem[64] + 96] = mem[(32 * stor15[address(arg5)].field_0) + 128]
                            idx = 0
                            s = (32 * stor15[address(arg5)].field_0) + 160
                            t = mem[64] + 128
                            while idx < _25332:
                                _35976 = mem[s]
                                mem[t] = mem[mem[s]]
                                mem[t + 32] = mem[_35976 + 32]
                                mem[t + 64] = mem[_35976 + 64]
                                mem[t + 96] = mem[_35976 + 96]
                                mem[t + 128] = mem[_35976 + 128]
                                mem[t + 160] = mem[_35976 + 172 len 20]
                                mem[t + 192] = mem[_35976 + 192]
                                mem[t + 224] = mem[_35976 + 236 len 20]
                                mem[t + 256] = bool(mem[_35976 + 256])
                                mem[t + 288] = mem[_35976 + 288]
                                idx = idx + 1
                                s = s + 32
                                t = t + 320
                                continue 
                            mem[_24882 + 32] = 0
                            mem[_24882 + 64] = (320 * _25332) + 128
                            _37992 = mem[_24714]
                            mem[_24882 + (320 * _25332) + 128] = mem[_24714]
                            mem[_24882 + (320 * _25332) + 160 len ceil32(_37992)] = mem[_24714 + 32 len ceil32(_37992)]
                            var42001 = ceil32(_37992)
                            if ceil32(_37992) > _37992:
                                mem[_24882 + (320 * _25332) + _37992 + 160] = 0
                            return memory
                              from mem[64]
                               len ceil32(_37992) + _24882 + (320 * _25332) + -mem[64] + 160
                        _25333 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_25333] = 7
                        mem[_25333 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                        _26277 = mem[64]
                        mem[mem[64]] = 96
                        _26941 = mem[(32 * stor15[address(arg5)].field_0) + 128]
                        mem[mem[64] + 96] = mem[(32 * stor15[address(arg5)].field_0) + 128]
                        idx = 0
                        s = (32 * stor15[address(arg5)].field_0) + 160
                        t = mem[64] + 128
                        while idx < _26941:
                            _35983 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_35983 + 32]
                            mem[t + 64] = mem[_35983 + 64]
                            mem[t + 96] = mem[_35983 + 96]
                            mem[t + 128] = mem[_35983 + 128]
                            mem[t + 160] = mem[_35983 + 172 len 20]
                            mem[t + 192] = mem[_35983 + 192]
                            mem[t + 224] = mem[_35983 + 236 len 20]
                            mem[t + 256] = bool(mem[_35983 + 256])
                            mem[t + 288] = mem[_35983 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_26277 + 32] = stor15[address(arg5)].field_0 + -arg2 - 1
                        mem[_26277 + 64] = (320 * _26941) + 128
                        _37993 = mem[_25333]
                        mem[_26277 + (320 * _26941) + 128] = mem[_25333]
                        mem[_26277 + (320 * _26941) + 160 len ceil32(_37993)] = mem[_25333 + 32 len ceil32(_37993)]
                        var45001 = ceil32(_37993)
                        if ceil32(_37993) > _37993:
                            mem[_26277 + (320 * _26941) + _37993 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_37993) + _26277 + (320 * _26941) + -mem[64] + 160
                    mem[64] = (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 480
                    mem[(32 * stor15[address(arg5)].field_0) + (32 * arg2) + 160] = 0
                    mem[(32 * stor15[address(arg5)].field_0) + (32 * arg2) + 192] = 0
                    mem[(32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224] = 0
                    mem[(32 * stor15[address(arg5)].field_0) + (32 * arg2) + 256] = 0
                    mem[(32 * stor15[address(arg5)].field_0) + (32 * arg2) + 288] = 0
                    mem[(32 * stor15[address(arg5)].field_0) + (32 * arg2) + 320] = 0
                    mem[(32 * stor15[address(arg5)].field_0) + (32 * arg2) + 352] = 0
                    mem[(32 * stor15[address(arg5)].field_0) + (32 * arg2) + 384] = 0
                    mem[(32 * stor15[address(arg5)].field_0) + (32 * arg2) + 416] = 0
                    mem[(32 * stor15[address(arg5)].field_0) + (32 * arg2) + 448] = 0
                    mem[var32001] = (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 160
                    s = var32001
                    idx = var32002
                    while idx - 1:
                        mem[64] = mem[64] + 320
                        mem[(32 * stor15[address(arg5)].field_0) + (32 * arg2) + 160] = 0
                        mem[(32 * stor15[address(arg5)].field_0) + (32 * arg2) + 192] = 0
                        mem[(32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224] = 0
                        mem[(32 * stor15[address(arg5)].field_0) + (32 * arg2) + 256] = 0
                        mem[(32 * stor15[address(arg5)].field_0) + (32 * arg2) + 288] = 0
                        mem[(32 * stor15[address(arg5)].field_0) + (32 * arg2) + 320] = 0
                        mem[(32 * stor15[address(arg5)].field_0) + (32 * arg2) + 352] = 0
                        mem[(32 * stor15[address(arg5)].field_0) + (32 * arg2) + 384] = 0
                        mem[(32 * stor15[address(arg5)].field_0) + (32 * arg2) + 416] = 0
                        mem[(32 * stor15[address(arg5)].field_0) + (32 * arg2) + 448] = 0
                        mem[s + 32] = (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 160
                        s = s + 32
                        idx = idx - 1
                        continue 
                    idx = 0
                    while idx < arg2:
                        if stor15[address(arg5)].field_0 - 1 < idx:
                            revert with 0, 17
                        if stor15[address(arg5)].field_0 + -idx - 1 >= mem[96]:
                            revert with 0, 50
                        mem[0] = mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + 128]
                        mem[32] = 12
                        _49934 = sha3(mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + 128], 12)
                        _49935 = mem[64]
                        mem[64] = mem[64] + 320
                        mem[_49935] = stor12[mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + 128]].field_0
                        mem[_49935 + 32] = stor1[_49934]
                        mem[_49935 + 64] = stor2[_49934]
                        mem[_49935 + 96] = stor3[_49934]
                        mem[_49935 + 128] = stor4[_49934]
                        mem[_49935 + 160] = stor5[_49934]
                        mem[_49935 + 192] = stor6[_49934]
                        mem[_49935 + 224] = stor7[_49934].field_0
                        mem[_49935 + 256] = bool(stor7[_49934].field_160)
                        mem[_49935 + 288] = stor8[_49934]
                        if idx >= mem[(32 * stor15[address(arg5)].field_0) + 128]:
                            revert with 0, 50
                        mem[(32 * idx) + (32 * stor15[address(arg5)].field_0) + 160] = _49935
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if stor15[address(arg5)].field_0 - 1 >= arg2:
                        _49932 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_49932] = 7
                        mem[_49932 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                        _50962 = mem[64]
                        mem[mem[64]] = 96
                        _51560 = mem[(32 * stor15[address(arg5)].field_0) + 128]
                        mem[mem[64] + 96] = mem[(32 * stor15[address(arg5)].field_0) + 128]
                        idx = 0
                        s = (32 * stor15[address(arg5)].field_0) + 160
                        t = mem[64] + 128
                        while idx < _51560:
                            _57932 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_57932 + 32]
                            mem[t + 64] = mem[_57932 + 64]
                            mem[t + 96] = mem[_57932 + 96]
                            mem[t + 128] = mem[_57932 + 128]
                            mem[t + 160] = mem[_57932 + 172 len 20]
                            mem[t + 192] = mem[_57932 + 192]
                            mem[t + 224] = mem[_57932 + 236 len 20]
                            mem[t + 256] = bool(mem[_57932 + 256])
                            mem[t + 288] = mem[_57932 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_50962 + 32] = stor15[address(arg5)].field_0 + -arg2 - 1
                        mem[_50962 + 64] = (320 * _51560) + 128
                        _59901 = mem[_49932]
                        mem[_50962 + (320 * _51560) + 128] = mem[_49932]
                        mem[_50962 + (320 * _51560) + 160 len ceil32(_59901)] = mem[_49932 + 32 len ceil32(_59901)]
                        if ceil32(_59901) > _59901:
                            mem[_50962 + (320 * _51560) + _59901 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_59901) + _50962 + (320 * _51560) + -mem[64] + 160
                    _49239 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_49239] = 4
                    mem[_49239 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                    _49375 = mem[64]
                    mem[mem[64]] = 96
                    _49931 = mem[(32 * stor15[address(arg5)].field_0) + 128]
                    mem[mem[64] + 96] = mem[(32 * stor15[address(arg5)].field_0) + 128]
                    idx = 0
                    s = (32 * stor15[address(arg5)].field_0) + 160
                    t = mem[64] + 128
                    while idx < _49931:
                        _57925 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_57925 + 32]
                        mem[t + 64] = mem[_57925 + 64]
                        mem[t + 96] = mem[_57925 + 96]
                        mem[t + 128] = mem[_57925 + 128]
                        mem[t + 160] = mem[_57925 + 172 len 20]
                        mem[t + 192] = mem[_57925 + 192]
                        mem[t + 224] = mem[_57925 + 236 len 20]
                        mem[t + 256] = bool(mem[_57925 + 256])
                        mem[t + 288] = mem[_57925 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_49375 + 32] = 0
                    mem[_49375 + 64] = (320 * _49931) + 128
                    _59900 = mem[_49239]
                    mem[_49375 + (320 * _49931) + 128] = mem[_49239]
                    mem[_49375 + (320 * _49931) + 160 len ceil32(_59900)] = mem[_49239 + 32 len ceil32(_59900)]
                    var49001 = ceil32(_59900)
                    if ceil32(_59900) > _59900:
                        mem[_49375 + (320 * _49931) + _59900 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_59900) + _49375 + (320 * _49931) + -mem[64] + 160
                if 1 > !(stor15[address(arg5)].field_0 - 1):
                    revert with 0, 17
                if stor15[address(arg5)].field_0 > test266151307():
                    revert with 0, 65
                mem[(32 * stor15[address(arg5)].field_0) + 128] = stor15[address(arg5)].field_0
                mem[64] = (64 * stor15[address(arg5)].field_0) + 160
                if not stor15[address(arg5)].field_0:
                    idx = 0
                    while idx < stor15[address(arg5)].field_0:
                        if stor15[address(arg5)].field_0 - 1 < idx:
                            revert with 0, 17
                        if stor15[address(arg5)].field_0 + -idx - 1 >= mem[96]:
                            revert with 0, 50
                        mem[0] = mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + 128]
                        mem[32] = 12
                        _25341 = sha3(mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + 128], 12)
                        _25342 = mem[64]
                        mem[64] = mem[64] + 320
                        mem[_25342] = stor12[mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + 128]].field_0
                        mem[_25342 + 32] = stor1[_25341]
                        mem[_25342 + 64] = stor2[_25341]
                        mem[_25342 + 96] = stor3[_25341]
                        mem[_25342 + 128] = stor4[_25341]
                        mem[_25342 + 160] = stor5[_25341]
                        mem[_25342 + 192] = stor6[_25341]
                        mem[_25342 + 224] = stor7[_25341].field_0
                        mem[_25342 + 256] = bool(stor7[_25341].field_160)
                        mem[_25342 + 288] = stor8[_25341]
                        if idx >= mem[(32 * stor15[address(arg5)].field_0) + 128]:
                            revert with 0, 50
                        mem[(32 * idx) + (32 * stor15[address(arg5)].field_0) + 160] = _25342
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if stor15[address(arg5)].field_0 - 1 < stor15[address(arg5)].field_0:
                        _24715 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_24715] = 4
                        mem[_24715 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                        _24884 = mem[64]
                        mem[mem[64]] = 96
                        _25338 = mem[(32 * stor15[address(arg5)].field_0) + 128]
                        mem[mem[64] + 96] = mem[(32 * stor15[address(arg5)].field_0) + 128]
                        idx = 0
                        s = (32 * stor15[address(arg5)].field_0) + 160
                        t = mem[64] + 128
                        while idx < _25338:
                            _35990 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_35990 + 32]
                            mem[t + 64] = mem[_35990 + 64]
                            mem[t + 96] = mem[_35990 + 96]
                            mem[t + 128] = mem[_35990 + 128]
                            mem[t + 160] = mem[_35990 + 172 len 20]
                            mem[t + 192] = mem[_35990 + 192]
                            mem[t + 224] = mem[_35990 + 236 len 20]
                            mem[t + 256] = bool(mem[_35990 + 256])
                            mem[t + 288] = mem[_35990 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_24884 + 32] = 0
                        mem[_24884 + 64] = (320 * _25338) + 128
                        _37994 = mem[_24715]
                        mem[_24884 + (320 * _25338) + 128] = mem[_24715]
                        mem[_24884 + (320 * _25338) + 160 len ceil32(_37994)] = mem[_24715 + 32 len ceil32(_37994)]
                        var46001 = ceil32(_37994)
                        if ceil32(_37994) > _37994:
                            mem[_24884 + (320 * _25338) + _37994 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_37994) + _24884 + (320 * _25338) + -mem[64] + 160
                    _25339 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_25339] = 7
                    mem[_25339 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                    _26286 = mem[64]
                    mem[mem[64]] = 96
                    _26943 = mem[(32 * stor15[address(arg5)].field_0) + 128]
                    mem[mem[64] + 96] = mem[(32 * stor15[address(arg5)].field_0) + 128]
                    idx = 0
                    s = (32 * stor15[address(arg5)].field_0) + 160
                    t = mem[64] + 128
                    while idx < _26943:
                        _35997 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_35997 + 32]
                        mem[t + 64] = mem[_35997 + 64]
                        mem[t + 96] = mem[_35997 + 96]
                        mem[t + 128] = mem[_35997 + 128]
                        mem[t + 160] = mem[_35997 + 172 len 20]
                        mem[t + 192] = mem[_35997 + 192]
                        mem[t + 224] = mem[_35997 + 236 len 20]
                        mem[t + 256] = bool(mem[_35997 + 256])
                        mem[t + 288] = mem[_35997 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_26286 + 32] = -1
                    mem[_26286 + 64] = (320 * _26943) + 128
                    _37995 = mem[_25339]
                    mem[_26286 + (320 * _26943) + 128] = mem[_25339]
                    mem[_26286 + (320 * _26943) + 160 len ceil32(_37995)] = mem[_25339 + 32 len ceil32(_37995)]
                    var49001 = ceil32(_37995)
                    if ceil32(_37995) > _37995:
                        mem[_26286 + (320 * _26943) + _37995 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_37995) + _26286 + (320 * _26943) + -mem[64] + 160
                mem[64] = (64 * stor15[address(arg5)].field_0) + 480
                mem[(64 * stor15[address(arg5)].field_0) + 160] = 0
                mem[(64 * stor15[address(arg5)].field_0) + 192] = 0
                mem[(64 * stor15[address(arg5)].field_0) + 224] = 0
                mem[(64 * stor15[address(arg5)].field_0) + 256] = 0
                mem[(64 * stor15[address(arg5)].field_0) + 288] = 0
                mem[(64 * stor15[address(arg5)].field_0) + 320] = 0
                mem[(64 * stor15[address(arg5)].field_0) + 352] = 0
                mem[(64 * stor15[address(arg5)].field_0) + 384] = 0
                mem[(64 * stor15[address(arg5)].field_0) + 416] = 0
                mem[(64 * stor15[address(arg5)].field_0) + 448] = 0
                mem[var36001] = (64 * stor15[address(arg5)].field_0) + 160
                s = var36001
                idx = var36002
                while idx - 1:
                    mem[64] = mem[64] + 320
                    mem[(64 * stor15[address(arg5)].field_0) + 160] = 0
                    mem[(64 * stor15[address(arg5)].field_0) + 192] = 0
                    mem[(64 * stor15[address(arg5)].field_0) + 224] = 0
                    mem[(64 * stor15[address(arg5)].field_0) + 256] = 0
                    mem[(64 * stor15[address(arg5)].field_0) + 288] = 0
                    mem[(64 * stor15[address(arg5)].field_0) + 320] = 0
                    mem[(64 * stor15[address(arg5)].field_0) + 352] = 0
                    mem[(64 * stor15[address(arg5)].field_0) + 384] = 0
                    mem[(64 * stor15[address(arg5)].field_0) + 416] = 0
                    mem[(64 * stor15[address(arg5)].field_0) + 448] = 0
                    mem[s + 32] = (64 * stor15[address(arg5)].field_0) + 160
                    s = s + 32
                    idx = idx - 1
                    continue 
                idx = 0
                while idx < stor15[address(arg5)].field_0:
                    if stor15[address(arg5)].field_0 - 1 < idx:
                        revert with 0, 17
                    if stor15[address(arg5)].field_0 + -idx - 1 >= mem[96]:
                        revert with 0, 50
                    mem[0] = mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + 128]
                    mem[32] = 12
                    _49942 = sha3(mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + 128], 12)
                    _49943 = mem[64]
                    mem[64] = mem[64] + 320
                    mem[_49943] = stor12[mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + 128]].field_0
                    mem[_49943 + 32] = stor1[_49942]
                    mem[_49943 + 64] = stor2[_49942]
                    mem[_49943 + 96] = stor3[_49942]
                    mem[_49943 + 128] = stor4[_49942]
                    mem[_49943 + 160] = stor5[_49942]
                    mem[_49943 + 192] = stor6[_49942]
                    mem[_49943 + 224] = stor7[_49942].field_0
                    mem[_49943 + 256] = bool(stor7[_49942].field_160)
                    mem[_49943 + 288] = stor8[_49942]
                    if idx >= mem[(32 * stor15[address(arg5)].field_0) + 128]:
                        revert with 0, 50
                    mem[(32 * idx) + (32 * stor15[address(arg5)].field_0) + 160] = _49943
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
                if stor15[address(arg5)].field_0 - 1 < stor15[address(arg5)].field_0:
                    _49240 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_49240] = 4
                    mem[_49240 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                    _49379 = mem[64]
                    mem[mem[64]] = 96
                    _49939 = mem[(32 * stor15[address(arg5)].field_0) + 128]
                    mem[mem[64] + 96] = mem[(32 * stor15[address(arg5)].field_0) + 128]
                    idx = 0
                    s = (32 * stor15[address(arg5)].field_0) + 160
                    t = mem[64] + 128
                    while idx < _49939:
                        _57939 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_57939 + 32]
                        mem[t + 64] = mem[_57939 + 64]
                        mem[t + 96] = mem[_57939 + 96]
                        mem[t + 128] = mem[_57939 + 128]
                        mem[t + 160] = mem[_57939 + 172 len 20]
                        mem[t + 192] = mem[_57939 + 192]
                        mem[t + 224] = mem[_57939 + 236 len 20]
                        mem[t + 256] = bool(mem[_57939 + 256])
                        mem[t + 288] = mem[_57939 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_49379 + 32] = 0
                    mem[_49379 + 64] = (320 * _49939) + 128
                    _59902 = mem[_49240]
                    mem[_49379 + (320 * _49939) + 128] = mem[_49240]
                    mem[_49379 + (320 * _49939) + 160 len ceil32(_59902)] = mem[_49240 + 32 len ceil32(_59902)]
                    var53001 = ceil32(_59902)
                    if ceil32(_59902) > _59902:
                        mem[_49379 + (320 * _49939) + _59902 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_59902) + _49379 + (320 * _49939) + -mem[64] + 160
                _49940 = mem[64]
                mem[64] = mem[64] + 64
                mem[_49940] = 7
                mem[_49940 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                _50970 = mem[64]
                mem[mem[64]] = 96
                _51562 = mem[(32 * stor15[address(arg5)].field_0) + 128]
                mem[mem[64] + 96] = mem[(32 * stor15[address(arg5)].field_0) + 128]
                idx = 0
                s = (32 * stor15[address(arg5)].field_0) + 160
                t = mem[64] + 128
                while idx < _51562:
                    _57946 = mem[s]
                    mem[t] = mem[mem[s]]
                    mem[t + 32] = mem[_57946 + 32]
                    mem[t + 64] = mem[_57946 + 64]
                    mem[t + 96] = mem[_57946 + 96]
                    mem[t + 128] = mem[_57946 + 128]
                    mem[t + 160] = mem[_57946 + 172 len 20]
                    mem[t + 192] = mem[_57946 + 192]
                    mem[t + 224] = mem[_57946 + 236 len 20]
                    mem[t + 256] = bool(mem[_57946 + 256])
                    mem[t + 288] = mem[_57946 + 288]
                    idx = idx + 1
                    s = s + 32
                    t = t + 320
                    continue 
                mem[_50970 + 32] = -1
                mem[_50970 + 64] = (320 * _51562) + 128
                _59903 = mem[_49940]
                mem[_50970 + (320 * _51562) + 128] = mem[_49940]
                mem[_50970 + (320 * _51562) + 160 len ceil32(_59903)] = mem[_49940 + 32 len ceil32(_59903)]
                var56001 = ceil32(_59903)
                if ceil32(_59903) > _59903:
                    mem[_50970 + (320 * _51562) + _59903 + 160] = 0
                return memory
                  from mem[64]
                   len ceil32(_59903) + _50970 + (320 * _51562) + -mem[64] + 160
            if stor15[address(arg5)].field_0 < stor15[address(arg5)].field_0 - 1:
                revert with 0, 17
            if arg2 > 1:
                if stor15[address(arg5)].field_0 < stor15[address(arg5)].field_0 - 1:
                    revert with 0, 17
                mem[(32 * stor15[address(arg5)].field_0) + 128] = 1
                mem[64] = (32 * stor15[address(arg5)].field_0) + 512
                mem[(32 * stor15[address(arg5)].field_0) + 192] = 0
                mem[(32 * stor15[address(arg5)].field_0) + 224] = 0
                mem[(32 * stor15[address(arg5)].field_0) + 256] = 0
                mem[(32 * stor15[address(arg5)].field_0) + 288] = 0
                mem[(32 * stor15[address(arg5)].field_0) + 320] = 0
                mem[(32 * stor15[address(arg5)].field_0) + 352] = 0
                mem[(32 * stor15[address(arg5)].field_0) + 384] = 0
                mem[(32 * stor15[address(arg5)].field_0) + 416] = 0
                mem[(32 * stor15[address(arg5)].field_0) + 448] = 0
                mem[(32 * stor15[address(arg5)].field_0) + 480] = 0
                mem[var39001] = (32 * stor15[address(arg5)].field_0) + 192
                s = var39001
                idx = var39002
                while idx - 1:
                    mem[64] = mem[64] + 320
                    mem[(32 * stor15[address(arg5)].field_0) + 192] = 0
                    mem[(32 * stor15[address(arg5)].field_0) + 224] = 0
                    mem[(32 * stor15[address(arg5)].field_0) + 256] = 0
                    mem[(32 * stor15[address(arg5)].field_0) + 288] = 0
                    mem[(32 * stor15[address(arg5)].field_0) + 320] = 0
                    mem[(32 * stor15[address(arg5)].field_0) + 352] = 0
                    mem[(32 * stor15[address(arg5)].field_0) + 384] = 0
                    mem[(32 * stor15[address(arg5)].field_0) + 416] = 0
                    mem[(32 * stor15[address(arg5)].field_0) + 448] = 0
                    mem[(32 * stor15[address(arg5)].field_0) + 480] = 0
                    mem[s + 32] = (32 * stor15[address(arg5)].field_0) + 192
                    s = s + 32
                    idx = idx - 1
                    continue 
                idx = 0
                while idx < 1:
                    if stor15[address(arg5)].field_0 - 1 > !idx:
                        revert with 0, 17
                    if stor15[address(arg5)].field_0 + idx - 1 >= mem[96]:
                        revert with 0, 50
                    mem[0] = mem[(32 * stor15[address(arg5)].field_0 + idx - 1) + 128]
                    mem[32] = 12
                    _49954 = sha3(mem[(32 * stor15[address(arg5)].field_0 + idx - 1) + 128], 12)
                    _49955 = mem[64]
                    mem[64] = mem[64] + 320
                    mem[_49955] = stor12[mem[(32 * stor15[address(arg5)].field_0 + idx - 1) + 128]].field_0
                    mem[_49955 + 32] = stor1[_49954]
                    mem[_49955 + 64] = stor2[_49954]
                    mem[_49955 + 96] = stor3[_49954]
                    mem[_49955 + 128] = stor4[_49954]
                    mem[_49955 + 160] = stor5[_49954]
                    mem[_49955 + 192] = stor6[_49954]
                    mem[_49955 + 224] = stor7[_49954].field_0
                    mem[_49955 + 256] = bool(stor7[_49954].field_160)
                    mem[_49955 + 288] = stor8[_49954]
                    if idx >= mem[(32 * stor15[address(arg5)].field_0) + 128]:
                        revert with 0, 50
                    mem[(32 * idx) + (32 * stor15[address(arg5)].field_0) + 160] = _49955
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
                if stor15[address(arg5)].field_0 - 1 > !1:
                    revert with 0, 17
                if stor15[address(arg5)].field_0 - 1 > !1:
                    revert with 0, 17
                if stor15[address(arg5)].field_0 < mem[96]:
                    _51565 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_51565] = 7
                    mem[_51565 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                    _52099 = mem[64]
                    mem[mem[64]] = 96
                    _53035 = mem[(32 * stor15[address(arg5)].field_0) + 128]
                    mem[mem[64] + 96] = mem[(32 * stor15[address(arg5)].field_0) + 128]
                    idx = 0
                    s = (32 * stor15[address(arg5)].field_0) + 160
                    t = mem[64] + 128
                    while idx < _53035:
                        _57967 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_57967 + 32]
                        mem[t + 64] = mem[_57967 + 64]
                        mem[t + 96] = mem[_57967 + 96]
                        mem[t + 128] = mem[_57967 + 128]
                        mem[t + 160] = mem[_57967 + 172 len 20]
                        mem[t + 192] = mem[_57967 + 192]
                        mem[t + 224] = mem[_57967 + 236 len 20]
                        mem[t + 256] = bool(mem[_57967 + 256])
                        mem[t + 288] = mem[_57967 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_52099 + 32] = stor15[address(arg5)].field_0
                    mem[_52099 + 64] = (320 * _53035) + 128
                    _59906 = mem[_51565]
                    mem[_52099 + (320 * _53035) + 128] = mem[_51565]
                    mem[_52099 + (320 * _53035) + 160 len ceil32(_59906)] = mem[_51565 + 32 len ceil32(_59906)]
                    if ceil32(_59906) > _59906:
                        mem[_52099 + (320 * _53035) + _59906 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_59906) + _52099 + (320 * _53035) + -mem[64] + 160
                _51566 = mem[64]
                mem[64] = mem[64] + 64
                mem[_51566] = 4
                mem[_51566 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                _52100 = mem[64]
                mem[mem[64]] = 96
                _53036 = mem[(32 * stor15[address(arg5)].field_0) + 128]
                mem[mem[64] + 96] = mem[(32 * stor15[address(arg5)].field_0) + 128]
                idx = 0
                s = (32 * stor15[address(arg5)].field_0) + 160
                t = mem[64] + 128
                while idx < _53036:
                    _57974 = mem[s]
                    mem[t] = mem[mem[s]]
                    mem[t + 32] = mem[_57974 + 32]
                    mem[t + 64] = mem[_57974 + 64]
                    mem[t + 96] = mem[_57974 + 96]
                    mem[t + 128] = mem[_57974 + 128]
                    mem[t + 160] = mem[_57974 + 172 len 20]
                    mem[t + 192] = mem[_57974 + 192]
                    mem[t + 224] = mem[_57974 + 236 len 20]
                    mem[t + 256] = bool(mem[_57974 + 256])
                    mem[t + 288] = mem[_57974 + 288]
                    idx = idx + 1
                    s = s + 32
                    t = t + 320
                    continue 
                mem[_52100 + 32] = stor15[address(arg5)].field_0
                mem[_52100 + 64] = (320 * _53036) + 128
                _59907 = mem[_51566]
                mem[_52100 + (320 * _53036) + 128] = mem[_51566]
                mem[_52100 + (320 * _53036) + 160 len ceil32(_59907)] = mem[_51566 + 32 len ceil32(_59907)]
                if ceil32(_59907) > _59907:
                    mem[_52100 + (320 * _53036) + _59907 + 160] = 0
                return memory
                  from mem[64]
                   len ceil32(_59907) + _52100 + (320 * _53036) + -mem[64] + 160
            if arg2 > test266151307():
                revert with 0, 65
            mem[(32 * stor15[address(arg5)].field_0) + 128] = arg2
            mem[64] = (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 160
            if not arg2:
                idx = 0
                while idx < arg2:
                    if stor15[address(arg5)].field_0 - 1 > !idx:
                        revert with 0, 17
                    if stor15[address(arg5)].field_0 + idx - 1 >= mem[96]:
                        revert with 0, 50
                    mem[0] = mem[(32 * stor15[address(arg5)].field_0 + idx - 1) + 128]
                    mem[32] = 12
                    _25345 = sha3(mem[(32 * stor15[address(arg5)].field_0 + idx - 1) + 128], 12)
                    _25346 = mem[64]
                    mem[64] = mem[64] + 320
                    mem[_25346] = stor12[mem[(32 * stor15[address(arg5)].field_0 + idx - 1) + 128]].field_0
                    mem[_25346 + 32] = stor1[_25345]
                    mem[_25346 + 64] = stor2[_25345]
                    mem[_25346 + 96] = stor3[_25345]
                    mem[_25346 + 128] = stor4[_25345]
                    mem[_25346 + 160] = stor5[_25345]
                    mem[_25346 + 192] = stor6[_25345]
                    mem[_25346 + 224] = stor7[_25345].field_0
                    mem[_25346 + 256] = bool(stor7[_25345].field_160)
                    mem[_25346 + 288] = stor8[_25345]
                    if idx >= mem[(32 * stor15[address(arg5)].field_0) + 128]:
                        revert with 0, 50
                    mem[(32 * idx) + (32 * stor15[address(arg5)].field_0) + 160] = _25346
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
                if stor15[address(arg5)].field_0 - 1 > !arg2:
                    revert with 0, 17
                if stor15[address(arg5)].field_0 - 1 > !arg2:
                    revert with 0, 17
                if stor15[address(arg5)].field_0 + arg2 - 1 < mem[96]:
                    _26944 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_26944] = 7
                    mem[_26944 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                    _27684 = mem[64]
                    mem[mem[64]] = 96
                    _28860 = mem[(32 * stor15[address(arg5)].field_0) + 128]
                    mem[mem[64] + 96] = mem[(32 * stor15[address(arg5)].field_0) + 128]
                    idx = 0
                    s = (32 * stor15[address(arg5)].field_0) + 160
                    t = mem[64] + 128
                    while idx < _28860:
                        _36004 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_36004 + 32]
                        mem[t + 64] = mem[_36004 + 64]
                        mem[t + 96] = mem[_36004 + 96]
                        mem[t + 128] = mem[_36004 + 128]
                        mem[t + 160] = mem[_36004 + 172 len 20]
                        mem[t + 192] = mem[_36004 + 192]
                        mem[t + 224] = mem[_36004 + 236 len 20]
                        mem[t + 256] = bool(mem[_36004 + 256])
                        mem[t + 288] = mem[_36004 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_27684 + 32] = stor15[address(arg5)].field_0 + arg2 - 1
                    mem[_27684 + 64] = (320 * _28860) + 128
                    _37996 = mem[_26944]
                    mem[_27684 + (320 * _28860) + 128] = mem[_26944]
                    mem[_27684 + (320 * _28860) + 160 len ceil32(_37996)] = mem[_26944 + 32 len ceil32(_37996)]
                    var51001 = ceil32(_37996)
                    if ceil32(_37996) > _37996:
                        mem[_27684 + (320 * _28860) + _37996 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_37996) + _27684 + (320 * _28860) + -mem[64] + 160
                _26945 = mem[64]
                mem[64] = mem[64] + 64
                mem[_26945] = 4
                mem[_26945 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                _27685 = mem[64]
                mem[mem[64]] = 96
                _28861 = mem[(32 * stor15[address(arg5)].field_0) + 128]
                mem[mem[64] + 96] = mem[(32 * stor15[address(arg5)].field_0) + 128]
                idx = 0
                s = (32 * stor15[address(arg5)].field_0) + 160
                t = mem[64] + 128
                while idx < _28861:
                    _36011 = mem[s]
                    mem[t] = mem[mem[s]]
                    mem[t + 32] = mem[_36011 + 32]
                    mem[t + 64] = mem[_36011 + 64]
                    mem[t + 96] = mem[_36011 + 96]
                    mem[t + 128] = mem[_36011 + 128]
                    mem[t + 160] = mem[_36011 + 172 len 20]
                    mem[t + 192] = mem[_36011 + 192]
                    mem[t + 224] = mem[_36011 + 236 len 20]
                    mem[t + 256] = bool(mem[_36011 + 256])
                    mem[t + 288] = mem[_36011 + 288]
                    idx = idx + 1
                    s = s + 32
                    t = t + 320
                    continue 
                mem[_27685 + 32] = stor15[address(arg5)].field_0 + arg2 - 1
                mem[_27685 + 64] = (320 * _28861) + 128
                _37997 = mem[_26945]
                mem[_27685 + (320 * _28861) + 128] = mem[_26945]
                mem[_27685 + (320 * _28861) + 160 len ceil32(_37997)] = mem[_26945 + 32 len ceil32(_37997)]
                var51001 = ceil32(_37997)
                if ceil32(_37997) > _37997:
                    mem[_27685 + (320 * _28861) + _37997 + 160] = 0
                return memory
                  from mem[64]
                   len ceil32(_37997) + _27685 + (320 * _28861) + -mem[64] + 160
            mem[64] = (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 480
            mem[(32 * stor15[address(arg5)].field_0) + (32 * arg2) + 160] = 0
            mem[(32 * stor15[address(arg5)].field_0) + (32 * arg2) + 192] = 0
            mem[(32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224] = 0
            mem[(32 * stor15[address(arg5)].field_0) + (32 * arg2) + 256] = 0
            mem[(32 * stor15[address(arg5)].field_0) + (32 * arg2) + 288] = 0
            mem[(32 * stor15[address(arg5)].field_0) + (32 * arg2) + 320] = 0
            mem[(32 * stor15[address(arg5)].field_0) + (32 * arg2) + 352] = 0
            mem[(32 * stor15[address(arg5)].field_0) + (32 * arg2) + 384] = 0
            mem[(32 * stor15[address(arg5)].field_0) + (32 * arg2) + 416] = 0
            mem[(32 * stor15[address(arg5)].field_0) + (32 * arg2) + 448] = 0
            mem[var35001] = (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 160
            s = var35001
            idx = var35002
            while idx - 1:
                mem[64] = mem[64] + 320
                mem[(32 * stor15[address(arg5)].field_0) + (32 * arg2) + 160] = 0
                mem[(32 * stor15[address(arg5)].field_0) + (32 * arg2) + 192] = 0
                mem[(32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224] = 0
                mem[(32 * stor15[address(arg5)].field_0) + (32 * arg2) + 256] = 0
                mem[(32 * stor15[address(arg5)].field_0) + (32 * arg2) + 288] = 0
                mem[(32 * stor15[address(arg5)].field_0) + (32 * arg2) + 320] = 0
                mem[(32 * stor15[address(arg5)].field_0) + (32 * arg2) + 352] = 0
                mem[(32 * stor15[address(arg5)].field_0) + (32 * arg2) + 384] = 0
                mem[(32 * stor15[address(arg5)].field_0) + (32 * arg2) + 416] = 0
                mem[(32 * stor15[address(arg5)].field_0) + (32 * arg2) + 448] = 0
                mem[s + 32] = (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 160
                s = s + 32
                idx = idx - 1
                continue 
            idx = 0
            while idx < arg2:
                if stor15[address(arg5)].field_0 - 1 > !idx:
                    revert with 0, 17
                if stor15[address(arg5)].field_0 + idx - 1 >= mem[96]:
                    revert with 0, 50
                mem[0] = mem[(32 * stor15[address(arg5)].field_0 + idx - 1) + 128]
                mem[32] = 12
                _49948 = sha3(mem[(32 * stor15[address(arg5)].field_0 + idx - 1) + 128], 12)
                _49949 = mem[64]
                mem[64] = mem[64] + 320
                mem[_49949] = stor12[mem[(32 * stor15[address(arg5)].field_0 + idx - 1) + 128]].field_0
                mem[_49949 + 32] = stor1[_49948]
                mem[_49949 + 64] = stor2[_49948]
                mem[_49949 + 96] = stor3[_49948]
                mem[_49949 + 128] = stor4[_49948]
                mem[_49949 + 160] = stor5[_49948]
                mem[_49949 + 192] = stor6[_49948]
                mem[_49949 + 224] = stor7[_49948].field_0
                mem[_49949 + 256] = bool(stor7[_49948].field_160)
                mem[_49949 + 288] = stor8[_49948]
                if idx >= mem[(32 * stor15[address(arg5)].field_0) + 128]:
                    revert with 0, 50
                mem[(32 * idx) + (32 * stor15[address(arg5)].field_0) + 160] = _49949
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
            if stor15[address(arg5)].field_0 - 1 > !arg2:
                revert with 0, 17
            if stor15[address(arg5)].field_0 - 1 > !arg2:
                revert with 0, 17
            if stor15[address(arg5)].field_0 + arg2 - 1 < mem[96]:
                _51563 = mem[64]
                mem[64] = mem[64] + 64
                mem[_51563] = 7
                mem[_51563 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                _52097 = mem[64]
                mem[mem[64]] = 96
                _53033 = mem[(32 * stor15[address(arg5)].field_0) + 128]
                mem[mem[64] + 96] = mem[(32 * stor15[address(arg5)].field_0) + 128]
                idx = 0
                s = (32 * stor15[address(arg5)].field_0) + 160
                t = mem[64] + 128
                while idx < _53033:
                    _57953 = mem[s]
                    mem[t] = mem[mem[s]]
                    mem[t + 32] = mem[_57953 + 32]
                    mem[t + 64] = mem[_57953 + 64]
                    mem[t + 96] = mem[_57953 + 96]
                    mem[t + 128] = mem[_57953 + 128]
                    mem[t + 160] = mem[_57953 + 172 len 20]
                    mem[t + 192] = mem[_57953 + 192]
                    mem[t + 224] = mem[_57953 + 236 len 20]
                    mem[t + 256] = bool(mem[_57953 + 256])
                    mem[t + 288] = mem[_57953 + 288]
                    idx = idx + 1
                    s = s + 32
                    t = t + 320
                    continue 
                mem[_52097 + 32] = stor15[address(arg5)].field_0 + arg2 - 1
                mem[_52097 + 64] = (320 * _53033) + 128
                _59904 = mem[_51563]
                mem[_52097 + (320 * _53033) + 128] = mem[_51563]
                mem[_52097 + (320 * _53033) + 160 len ceil32(_59904)] = mem[_51563 + 32 len ceil32(_59904)]
                var58001 = ceil32(_59904)
                if ceil32(_59904) > _59904:
                    mem[_52097 + (320 * _53033) + _59904 + 160] = 0
                return memory
                  from mem[64]
                   len ceil32(_59904) + _52097 + (320 * _53033) + -mem[64] + 160
            _51564 = mem[64]
            mem[64] = mem[64] + 64
            mem[_51564] = 4
            mem[_51564 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
            _52098 = mem[64]
            mem[mem[64]] = 96
            _53034 = mem[(32 * stor15[address(arg5)].field_0) + 128]
            mem[mem[64] + 96] = mem[(32 * stor15[address(arg5)].field_0) + 128]
            idx = 0
            s = (32 * stor15[address(arg5)].field_0) + 160
            t = mem[64] + 128
            while idx < _53034:
                _57960 = mem[s]
                mem[t] = mem[mem[s]]
                mem[t + 32] = mem[_57960 + 32]
                mem[t + 64] = mem[_57960 + 64]
                mem[t + 96] = mem[_57960 + 96]
                mem[t + 128] = mem[_57960 + 128]
                mem[t + 160] = mem[_57960 + 172 len 20]
                mem[t + 192] = mem[_57960 + 192]
                mem[t + 224] = mem[_57960 + 236 len 20]
                mem[t + 256] = bool(mem[_57960 + 256])
                mem[t + 288] = mem[_57960 + 288]
                idx = idx + 1
                s = s + 32
                t = t + 320
                continue 
            mem[_52098 + 32] = stor15[address(arg5)].field_0 + arg2 - 1
            mem[_52098 + 64] = (320 * _53034) + 128
            _59905 = mem[_51564]
            mem[_52098 + (320 * _53034) + 128] = mem[_51564]
            mem[_52098 + (320 * _53034) + 160 len ceil32(_59905)] = mem[_51564 + 32 len ceil32(_59905)]
            var58001 = ceil32(_59905)
            if ceil32(_59905) > _59905:
                mem[_52098 + (320 * _53034) + _59905 + 160] = 0
            return memory
              from mem[64]
               len ceil32(_59905) + _52098 + (320 * _53034) + -mem[64] + 160
        mem[0] = address(arg5)
        mem[32] = 13
        mem[96] = stor13[address(arg5)].field_0
        if not stor13[address(arg5)].field_0:
            if arg4 != 2:
                if not stor13[address(arg5)].field_0:
                    mem[(32 * stor13[address(arg5)].field_0) + 128] = 0
                    mem[64] = (32 * stor13[address(arg5)].field_0) + 224
                    mem[(32 * stor13[address(arg5)].field_0) + 160] = 4
                    mem[(32 * stor13[address(arg5)].field_0) + 192] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                    mem[(32 * stor13[address(arg5)].field_0) + 224] = 96
                    mem[(32 * stor13[address(arg5)].field_0) + 320] = 0
                    idx = 0
                    s = (32 * stor13[address(arg5)].field_0) + 160
                    t = (32 * stor13[address(arg5)].field_0) + 352
                    while idx < mem[(32 * stor13[address(arg5)].field_0) + 128]:
                        _5719 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_5719 + 32]
                        mem[t + 64] = mem[_5719 + 64]
                        mem[t + 96] = mem[_5719 + 96]
                        mem[t + 128] = mem[_5719 + 128]
                        mem[t + 160] = mem[_5719 + 172 len 20]
                        mem[t + 192] = mem[_5719 + 192]
                        mem[t + 224] = mem[_5719 + 236 len 20]
                        mem[t + 256] = bool(mem[_5719 + 256])
                        mem[t + 288] = mem[_5719 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[(32 * stor13[address(arg5)].field_0) + 256] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + 288] = 128
                    mem[(32 * stor13[address(arg5)].field_0) + 352] = mem[(32 * stor13[address(arg5)].field_0) + 160]
                    mem[(32 * stor13[address(arg5)].field_0) + 384 len ceil32(mem[(32 * stor13[address(arg5)].field_0) + 160])] = mem[(32 * stor13[address(arg5)].field_0) + 192 len ceil32(mem[(32 * stor13[address(arg5)].field_0) + 160])]
                    if ceil32(mem[(32 * stor13[address(arg5)].field_0) + 160]) > mem[(32 * stor13[address(arg5)].field_0) + 160]:
                        mem[(32 * stor13[address(arg5)].field_0) + mem[(32 * stor13[address(arg5)].field_0) + 160] + 384] = 0
                    return memory
                      from mem[64]
                       len ceil32(mem[(32 * stor13[address(arg5)].field_0) + 160]) + (32 * stor13[address(arg5)].field_0) + -mem[64] + 384
                if arg1 < stor13[address(arg5)].field_0:
                    if arg3:
                        if arg2 <= arg1:
                            if arg2 > test266151307():
                                revert with 0, 65
                            mem[(32 * stor13[address(arg5)].field_0) + 128] = arg2
                            mem[64] = (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 160
                            if not arg2:
                                idx = 0
                                while idx < arg2:
                                    if arg1 < idx:
                                        revert with 0, 17
                                    if arg1 - idx >= mem[96]:
                                        revert with 0, 50
                                    mem[0] = mem[(32 * arg1 - idx) + 128]
                                    mem[32] = 12
                                    _6066 = sha3(mem[(32 * arg1 - idx) + 128], 12)
                                    _6067 = mem[64]
                                    mem[64] = mem[64] + 320
                                    mem[_6067] = stor12[mem[(32 * arg1 - idx) + 128]].field_0
                                    mem[_6067 + 32] = stor1[_6066]
                                    mem[_6067 + 64] = stor2[_6066]
                                    mem[_6067 + 96] = stor3[_6066]
                                    mem[_6067 + 128] = stor4[_6066]
                                    mem[_6067 + 160] = stor5[_6066]
                                    mem[_6067 + 192] = stor6[_6066]
                                    mem[_6067 + 224] = stor7[_6066].field_0
                                    mem[_6067 + 256] = bool(stor7[_6066].field_160)
                                    mem[_6067 + 288] = stor8[_6066]
                                    if idx >= mem[(32 * stor13[address(arg5)].field_0) + 128]:
                                        revert with 0, 50
                                    mem[(32 * idx) + (32 * stor13[address(arg5)].field_0) + 160] = _6067
                                    if idx == -1:
                                        revert with 0, 17
                                    idx = idx + 1
                                    continue 
                                if arg1 < arg2:
                                    _5831 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_5831] = 4
                                    mem[_5831 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                                    _5903 = mem[64]
                                    mem[mem[64]] = 96
                                    _6063 = mem[(32 * stor13[address(arg5)].field_0) + 128]
                                    mem[mem[64] + 96] = mem[(32 * stor13[address(arg5)].field_0) + 128]
                                    idx = 0
                                    s = (32 * stor13[address(arg5)].field_0) + 160
                                    t = mem[64] + 128
                                    while idx < _6063:
                                        _11456 = mem[s]
                                        mem[t] = mem[mem[s]]
                                        mem[t + 32] = mem[_11456 + 32]
                                        mem[t + 64] = mem[_11456 + 64]
                                        mem[t + 96] = mem[_11456 + 96]
                                        mem[t + 128] = mem[_11456 + 128]
                                        mem[t + 160] = mem[_11456 + 172 len 20]
                                        mem[t + 192] = mem[_11456 + 192]
                                        mem[t + 224] = mem[_11456 + 236 len 20]
                                        mem[t + 256] = bool(mem[_11456 + 256])
                                        mem[t + 288] = mem[_11456 + 288]
                                        idx = idx + 1
                                        s = s + 32
                                        t = t + 320
                                        continue 
                                    mem[_5903 + 32] = 0
                                    mem[_5903 + 64] = (320 * _6063) + 128
                                    _12171 = mem[_5831]
                                    mem[_5903 + (320 * _6063) + 128] = mem[_5831]
                                    mem[_5903 + (320 * _6063) + 160 len ceil32(_12171)] = mem[_5831 + 32 len ceil32(_12171)]
                                    if ceil32(_12171) > _12171:
                                        mem[_5903 + (320 * _6063) + _12171 + 160] = 0
                                    return memory
                                      from mem[64]
                                       len ceil32(_12171) + _5903 + (320 * _6063) + -mem[64] + 160
                                _6064 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_6064] = 7
                                mem[_6064 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                                _6424 = mem[64]
                                mem[mem[64]] = 96
                                _6680 = mem[(32 * stor13[address(arg5)].field_0) + 128]
                                mem[mem[64] + 96] = mem[(32 * stor13[address(arg5)].field_0) + 128]
                                idx = 0
                                s = (32 * stor13[address(arg5)].field_0) + 160
                                t = mem[64] + 128
                                while idx < _6680:
                                    _11463 = mem[s]
                                    mem[t] = mem[mem[s]]
                                    mem[t + 32] = mem[_11463 + 32]
                                    mem[t + 64] = mem[_11463 + 64]
                                    mem[t + 96] = mem[_11463 + 96]
                                    mem[t + 128] = mem[_11463 + 128]
                                    mem[t + 160] = mem[_11463 + 172 len 20]
                                    mem[t + 192] = mem[_11463 + 192]
                                    mem[t + 224] = mem[_11463 + 236 len 20]
                                    mem[t + 256] = bool(mem[_11463 + 256])
                                    mem[t + 288] = mem[_11463 + 288]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 320
                                    continue 
                                mem[_6424 + 32] = arg1 - arg2
                                mem[_6424 + 64] = (320 * _6680) + 128
                                _12172 = mem[_6064]
                                mem[_6424 + (320 * _6680) + 128] = mem[_6064]
                                mem[_6424 + (320 * _6680) + 160 len ceil32(_12172)] = mem[_6064 + 32 len ceil32(_12172)]
                                if ceil32(_12172) > _12172:
                                    mem[_6424 + (320 * _6680) + _12172 + 160] = 0
                                return memory
                                  from mem[64]
                                   len ceil32(_12172) + _6424 + (320 * _6680) + -mem[64] + 160
                            mem[64] = (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 480
                            mem[(32 * stor13[address(arg5)].field_0) + (32 * arg2) + 160] = 0
                            mem[(32 * stor13[address(arg5)].field_0) + (32 * arg2) + 192] = 0
                            mem[(32 * stor13[address(arg5)].field_0) + (32 * arg2) + 224] = 0
                            mem[(32 * stor13[address(arg5)].field_0) + (32 * arg2) + 256] = 0
                            mem[(32 * stor13[address(arg5)].field_0) + (32 * arg2) + 288] = 0
                            mem[(32 * stor13[address(arg5)].field_0) + (32 * arg2) + 320] = 0
                            mem[(32 * stor13[address(arg5)].field_0) + (32 * arg2) + 352] = 0
                            mem[(32 * stor13[address(arg5)].field_0) + (32 * arg2) + 384] = 0
                            mem[(32 * stor13[address(arg5)].field_0) + (32 * arg2) + 416] = 0
                            mem[(32 * stor13[address(arg5)].field_0) + (32 * arg2) + 448] = 0
                            mem[var24001] = (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 160
                            s = var24001
                            idx = var24002
                            while idx - 1:
                                mem[64] = mem[64] + 320
                                mem[(32 * stor13[address(arg5)].field_0) + (32 * arg2) + 160] = 0
                                mem[(32 * stor13[address(arg5)].field_0) + (32 * arg2) + 192] = 0
                                mem[(32 * stor13[address(arg5)].field_0) + (32 * arg2) + 224] = 0
                                mem[(32 * stor13[address(arg5)].field_0) + (32 * arg2) + 256] = 0
                                mem[(32 * stor13[address(arg5)].field_0) + (32 * arg2) + 288] = 0
                                mem[(32 * stor13[address(arg5)].field_0) + (32 * arg2) + 320] = 0
                                mem[(32 * stor13[address(arg5)].field_0) + (32 * arg2) + 352] = 0
                                mem[(32 * stor13[address(arg5)].field_0) + (32 * arg2) + 384] = 0
                                mem[(32 * stor13[address(arg5)].field_0) + (32 * arg2) + 416] = 0
                                mem[(32 * stor13[address(arg5)].field_0) + (32 * arg2) + 448] = 0
                                mem[s + 32] = (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 160
                                s = s + 32
                                idx = idx - 1
                                continue 
                            idx = 0
                            while idx < arg2:
                                if arg1 < idx:
                                    revert with 0, 17
                                if arg1 - idx >= mem[96]:
                                    revert with 0, 50
                                mem[0] = mem[(32 * arg1 - idx) + 128]
                                mem[32] = 12
                                _25358 = sha3(mem[(32 * arg1 - idx) + 128], 12)
                                _25359 = mem[64]
                                mem[64] = mem[64] + 320
                                mem[_25359] = stor12[mem[(32 * arg1 - idx) + 128]].field_0
                                mem[_25359 + 32] = stor1[_25358]
                                mem[_25359 + 64] = stor2[_25358]
                                mem[_25359 + 96] = stor3[_25358]
                                mem[_25359 + 128] = stor4[_25358]
                                mem[_25359 + 160] = stor5[_25358]
                                mem[_25359 + 192] = stor6[_25358]
                                mem[_25359 + 224] = stor7[_25358].field_0
                                mem[_25359 + 256] = bool(stor7[_25358].field_160)
                                mem[_25359 + 288] = stor8[_25358]
                                if idx >= mem[(32 * stor13[address(arg5)].field_0) + 128]:
                                    revert with 0, 50
                                mem[(32 * idx) + (32 * stor13[address(arg5)].field_0) + 160] = _25359
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                continue 
                            if arg1 < arg2:
                                _24717 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_24717] = 4
                                mem[_24717 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                                _24891 = mem[64]
                                mem[mem[64]] = 96
                                _25355 = mem[(32 * stor13[address(arg5)].field_0) + 128]
                                mem[mem[64] + 96] = mem[(32 * stor13[address(arg5)].field_0) + 128]
                                idx = 0
                                s = (32 * stor13[address(arg5)].field_0) + 160
                                t = mem[64] + 128
                                while idx < _25355:
                                    _36033 = mem[s]
                                    mem[t] = mem[mem[s]]
                                    mem[t + 32] = mem[_36033 + 32]
                                    mem[t + 64] = mem[_36033 + 64]
                                    mem[t + 96] = mem[_36033 + 96]
                                    mem[t + 128] = mem[_36033 + 128]
                                    mem[t + 160] = mem[_36033 + 172 len 20]
                                    mem[t + 192] = mem[_36033 + 192]
                                    mem[t + 224] = mem[_36033 + 236 len 20]
                                    mem[t + 256] = bool(mem[_36033 + 256])
                                    mem[t + 288] = mem[_36033 + 288]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 320
                                    continue 
                                mem[_24891 + 32] = 0
                                mem[_24891 + 64] = (320 * _25355) + 128
                                _38000 = mem[_24717]
                                mem[_24891 + (320 * _25355) + 128] = mem[_24717]
                                mem[_24891 + (320 * _25355) + 160 len ceil32(_38000)] = mem[_24717 + 32 len ceil32(_38000)]
                                if ceil32(_38000) > _38000:
                                    mem[_24891 + (320 * _25355) + _38000 + 160] = 0
                                return memory
                                  from mem[64]
                                   len ceil32(_38000) + _24891 + (320 * _25355) + -mem[64] + 160
                            _25356 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_25356] = 7
                            mem[_25356 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                            _26297 = mem[64]
                            mem[mem[64]] = 96
                            _26950 = mem[(32 * stor13[address(arg5)].field_0) + 128]
                            mem[mem[64] + 96] = mem[(32 * stor13[address(arg5)].field_0) + 128]
                            idx = 0
                            s = (32 * stor13[address(arg5)].field_0) + 160
                            t = mem[64] + 128
                            while idx < _26950:
                                _36040 = mem[s]
                                mem[t] = mem[mem[s]]
                                mem[t + 32] = mem[_36040 + 32]
                                mem[t + 64] = mem[_36040 + 64]
                                mem[t + 96] = mem[_36040 + 96]
                                mem[t + 128] = mem[_36040 + 128]
                                mem[t + 160] = mem[_36040 + 172 len 20]
                                mem[t + 192] = mem[_36040 + 192]
                                mem[t + 224] = mem[_36040 + 236 len 20]
                                mem[t + 256] = bool(mem[_36040 + 256])
                                mem[t + 288] = mem[_36040 + 288]
                                idx = idx + 1
                                s = s + 32
                                t = t + 320
                                continue 
                            mem[_26297 + 32] = arg1 - arg2
                            mem[_26297 + 64] = (320 * _26950) + 128
                            _38001 = mem[_25356]
                            mem[_26297 + (320 * _26950) + 128] = mem[_25356]
                            mem[_26297 + (320 * _26950) + 160 len ceil32(_38001)] = mem[_25356 + 32 len ceil32(_38001)]
                            if ceil32(_38001) > _38001:
                                mem[_26297 + (320 * _26950) + _38001 + 160] = 0
                            return memory
                              from mem[64]
                               len ceil32(_38001) + _26297 + (320 * _26950) + -mem[64] + 160
                        if 1 > !arg1:
                            revert with 0, 17
                        if arg1 + 1 > test266151307():
                            revert with 0, 65
                        mem[(32 * stor13[address(arg5)].field_0) + 128] = arg1 + 1
                        mem[64] = (32 * stor13[address(arg5)].field_0) + (32 * arg1 + 1) + 160
                        if not arg1 + 1:
                            idx = 0
                            while idx < arg1 + 1:
                                if arg1 < idx:
                                    revert with 0, 17
                                if arg1 - idx >= mem[96]:
                                    revert with 0, 50
                                mem[0] = mem[(32 * arg1 - idx) + 128]
                                mem[32] = 12
                                _6072 = sha3(mem[(32 * arg1 - idx) + 128], 12)
                                _6073 = mem[64]
                                mem[64] = mem[64] + 320
                                mem[_6073] = stor12[mem[(32 * arg1 - idx) + 128]].field_0
                                mem[_6073 + 32] = stor1[_6072]
                                mem[_6073 + 64] = stor2[_6072]
                                mem[_6073 + 96] = stor3[_6072]
                                mem[_6073 + 128] = stor4[_6072]
                                mem[_6073 + 160] = stor5[_6072]
                                mem[_6073 + 192] = stor6[_6072]
                                mem[_6073 + 224] = stor7[_6072].field_0
                                mem[_6073 + 256] = bool(stor7[_6072].field_160)
                                mem[_6073 + 288] = stor8[_6072]
                                if idx >= mem[(32 * stor13[address(arg5)].field_0) + 128]:
                                    revert with 0, 50
                                mem[(32 * idx) + (32 * stor13[address(arg5)].field_0) + 160] = _6073
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                continue 
                            if arg1 < arg1 + 1:
                                _5832 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_5832] = 4
                                mem[_5832 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                                _5905 = mem[64]
                                mem[mem[64]] = 96
                                _6069 = mem[(32 * stor13[address(arg5)].field_0) + 128]
                                mem[mem[64] + 96] = mem[(32 * stor13[address(arg5)].field_0) + 128]
                                idx = 0
                                s = (32 * stor13[address(arg5)].field_0) + 160
                                t = mem[64] + 128
                                while idx < _6069:
                                    _11470 = mem[s]
                                    mem[t] = mem[mem[s]]
                                    mem[t + 32] = mem[_11470 + 32]
                                    mem[t + 64] = mem[_11470 + 64]
                                    mem[t + 96] = mem[_11470 + 96]
                                    mem[t + 128] = mem[_11470 + 128]
                                    mem[t + 160] = mem[_11470 + 172 len 20]
                                    mem[t + 192] = mem[_11470 + 192]
                                    mem[t + 224] = mem[_11470 + 236 len 20]
                                    mem[t + 256] = bool(mem[_11470 + 256])
                                    mem[t + 288] = mem[_11470 + 288]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 320
                                    continue 
                                mem[_5905 + 32] = 0
                                mem[_5905 + 64] = (320 * _6069) + 128
                                _12173 = mem[_5832]
                                mem[_5905 + (320 * _6069) + 128] = mem[_5832]
                                mem[_5905 + (320 * _6069) + 160 len ceil32(_12173)] = mem[_5832 + 32 len ceil32(_12173)]
                                if ceil32(_12173) > _12173:
                                    mem[_5905 + (320 * _6069) + _12173 + 160] = 0
                                return memory
                                  from mem[64]
                                   len ceil32(_12173) + _5905 + (320 * _6069) + -mem[64] + 160
                            _6070 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_6070] = 7
                            mem[_6070 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                            _6433 = mem[64]
                            mem[mem[64]] = 96
                            _6682 = mem[(32 * stor13[address(arg5)].field_0) + 128]
                            mem[mem[64] + 96] = mem[(32 * stor13[address(arg5)].field_0) + 128]
                            idx = 0
                            s = (32 * stor13[address(arg5)].field_0) + 160
                            t = mem[64] + 128
                            while idx < _6682:
                                _11477 = mem[s]
                                mem[t] = mem[mem[s]]
                                mem[t + 32] = mem[_11477 + 32]
                                mem[t + 64] = mem[_11477 + 64]
                                mem[t + 96] = mem[_11477 + 96]
                                mem[t + 128] = mem[_11477 + 128]
                                mem[t + 160] = mem[_11477 + 172 len 20]
                                mem[t + 192] = mem[_11477 + 192]
                                mem[t + 224] = mem[_11477 + 236 len 20]
                                mem[t + 256] = bool(mem[_11477 + 256])
                                mem[t + 288] = mem[_11477 + 288]
                                idx = idx + 1
                                s = s + 32
                                t = t + 320
                                continue 
                            mem[_6433 + 32] = -1
                            mem[_6433 + 64] = (320 * _6682) + 128
                            _12174 = mem[_6070]
                            mem[_6433 + (320 * _6682) + 128] = mem[_6070]
                            mem[_6433 + (320 * _6682) + 160 len ceil32(_12174)] = mem[_6070 + 32 len ceil32(_12174)]
                            if ceil32(_12174) > _12174:
                                mem[_6433 + (320 * _6682) + _12174 + 160] = 0
                            return memory
                              from mem[64]
                               len ceil32(_12174) + _6433 + (320 * _6682) + -mem[64] + 160
                        mem[64] = (32 * stor13[address(arg5)].field_0) + (32 * arg1 + 1) + 480
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * arg1 + 1) + 160] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * arg1 + 1) + 192] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * arg1 + 1) + 224] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * arg1 + 1) + 256] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * arg1 + 1) + 288] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * arg1 + 1) + 320] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * arg1 + 1) + 352] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * arg1 + 1) + 384] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * arg1 + 1) + 416] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * arg1 + 1) + 448] = 0
                        mem[var28001] = (32 * stor13[address(arg5)].field_0) + (32 * arg1 + 1) + 160
                        s = var28001
                        idx = var28002
                        while idx - 1:
                            mem[64] = mem[64] + 320
                            mem[(32 * stor13[address(arg5)].field_0) + (32 * arg1 + 1) + 160] = 0
                            mem[(32 * stor13[address(arg5)].field_0) + (32 * arg1 + 1) + 192] = 0
                            mem[(32 * stor13[address(arg5)].field_0) + (32 * arg1 + 1) + 224] = 0
                            mem[(32 * stor13[address(arg5)].field_0) + (32 * arg1 + 1) + 256] = 0
                            mem[(32 * stor13[address(arg5)].field_0) + (32 * arg1 + 1) + 288] = 0
                            mem[(32 * stor13[address(arg5)].field_0) + (32 * arg1 + 1) + 320] = 0
                            mem[(32 * stor13[address(arg5)].field_0) + (32 * arg1 + 1) + 352] = 0
                            mem[(32 * stor13[address(arg5)].field_0) + (32 * arg1 + 1) + 384] = 0
                            mem[(32 * stor13[address(arg5)].field_0) + (32 * arg1 + 1) + 416] = 0
                            mem[(32 * stor13[address(arg5)].field_0) + (32 * arg1 + 1) + 448] = 0
                            mem[s + 32] = (32 * stor13[address(arg5)].field_0) + (32 * arg1 + 1) + 160
                            s = s + 32
                            idx = idx - 1
                            continue 
                        idx = 0
                        while idx < arg1 + 1:
                            if arg1 < idx:
                                revert with 0, 17
                            if arg1 - idx >= mem[96]:
                                revert with 0, 50
                            mem[0] = mem[(32 * arg1 - idx) + 128]
                            mem[32] = 12
                            _25366 = sha3(mem[(32 * arg1 - idx) + 128], 12)
                            _25367 = mem[64]
                            mem[64] = mem[64] + 320
                            mem[_25367] = stor12[mem[(32 * arg1 - idx) + 128]].field_0
                            mem[_25367 + 32] = stor1[_25366]
                            mem[_25367 + 64] = stor2[_25366]
                            mem[_25367 + 96] = stor3[_25366]
                            mem[_25367 + 128] = stor4[_25366]
                            mem[_25367 + 160] = stor5[_25366]
                            mem[_25367 + 192] = stor6[_25366]
                            mem[_25367 + 224] = stor7[_25366].field_0
                            mem[_25367 + 256] = bool(stor7[_25366].field_160)
                            mem[_25367 + 288] = stor8[_25366]
                            if idx >= mem[(32 * stor13[address(arg5)].field_0) + 128]:
                                revert with 0, 50
                            mem[(32 * idx) + (32 * stor13[address(arg5)].field_0) + 160] = _25367
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            continue 
                        if arg1 < arg1 + 1:
                            _24718 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_24718] = 4
                            mem[_24718 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                            _24895 = mem[64]
                            mem[mem[64]] = 96
                            _25363 = mem[(32 * stor13[address(arg5)].field_0) + 128]
                            mem[mem[64] + 96] = mem[(32 * stor13[address(arg5)].field_0) + 128]
                            idx = 0
                            s = (32 * stor13[address(arg5)].field_0) + 160
                            t = mem[64] + 128
                            while idx < _25363:
                                _36047 = mem[s]
                                mem[t] = mem[mem[s]]
                                mem[t + 32] = mem[_36047 + 32]
                                mem[t + 64] = mem[_36047 + 64]
                                mem[t + 96] = mem[_36047 + 96]
                                mem[t + 128] = mem[_36047 + 128]
                                mem[t + 160] = mem[_36047 + 172 len 20]
                                mem[t + 192] = mem[_36047 + 192]
                                mem[t + 224] = mem[_36047 + 236 len 20]
                                mem[t + 256] = bool(mem[_36047 + 256])
                                mem[t + 288] = mem[_36047 + 288]
                                idx = idx + 1
                                s = s + 32
                                t = t + 320
                                continue 
                            mem[_24895 + 32] = 0
                            mem[_24895 + 64] = (320 * _25363) + 128
                            _38002 = mem[_24718]
                            mem[_24895 + (320 * _25363) + 128] = mem[_24718]
                            mem[_24895 + (320 * _25363) + 160 len ceil32(_38002)] = mem[_24718 + 32 len ceil32(_38002)]
                            if ceil32(_38002) > _38002:
                                mem[_24895 + (320 * _25363) + _38002 + 160] = 0
                            return memory
                              from mem[64]
                               len ceil32(_38002) + _24895 + (320 * _25363) + -mem[64] + 160
                        _25364 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_25364] = 7
                        mem[_25364 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                        _26305 = mem[64]
                        mem[mem[64]] = 96
                        _26952 = mem[(32 * stor13[address(arg5)].field_0) + 128]
                        mem[mem[64] + 96] = mem[(32 * stor13[address(arg5)].field_0) + 128]
                        idx = 0
                        s = (32 * stor13[address(arg5)].field_0) + 160
                        t = mem[64] + 128
                        while idx < _26952:
                            _36054 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_36054 + 32]
                            mem[t + 64] = mem[_36054 + 64]
                            mem[t + 96] = mem[_36054 + 96]
                            mem[t + 128] = mem[_36054 + 128]
                            mem[t + 160] = mem[_36054 + 172 len 20]
                            mem[t + 192] = mem[_36054 + 192]
                            mem[t + 224] = mem[_36054 + 236 len 20]
                            mem[t + 256] = bool(mem[_36054 + 256])
                            mem[t + 288] = mem[_36054 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_26305 + 32] = -1
                        mem[_26305 + 64] = (320 * _26952) + 128
                        _38003 = mem[_25364]
                        mem[_26305 + (320 * _26952) + 128] = mem[_25364]
                        mem[_26305 + (320 * _26952) + 160 len ceil32(_38003)] = mem[_25364 + 32 len ceil32(_38003)]
                        if ceil32(_38003) > _38003:
                            mem[_26305 + (320 * _26952) + _38003 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_38003) + _26305 + (320 * _26952) + -mem[64] + 160
                    if stor13[address(arg5)].field_0 < arg1:
                        revert with 0, 17
                    if arg2 <= stor13[address(arg5)].field_0 - arg1:
                        if arg2 > test266151307():
                            revert with 0, 65
                        mem[(32 * stor13[address(arg5)].field_0) + 128] = arg2
                        mem[64] = (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 160
                        if not arg2:
                            idx = 0
                            while idx < arg2:
                                if arg1 > !idx:
                                    revert with 0, 17
                                if arg1 + idx >= mem[96]:
                                    revert with 0, 50
                                mem[0] = mem[(32 * arg1 + idx) + 128]
                                mem[32] = 12
                                _6076 = sha3(mem[(32 * arg1 + idx) + 128], 12)
                                _6077 = mem[64]
                                mem[64] = mem[64] + 320
                                mem[_6077] = stor12[mem[(32 * arg1 + idx) + 128]].field_0
                                mem[_6077 + 32] = stor1[_6076]
                                mem[_6077 + 64] = stor2[_6076]
                                mem[_6077 + 96] = stor3[_6076]
                                mem[_6077 + 128] = stor4[_6076]
                                mem[_6077 + 160] = stor5[_6076]
                                mem[_6077 + 192] = stor6[_6076]
                                mem[_6077 + 224] = stor7[_6076].field_0
                                mem[_6077 + 256] = bool(stor7[_6076].field_160)
                                mem[_6077 + 288] = stor8[_6076]
                                if idx >= mem[(32 * stor13[address(arg5)].field_0) + 128]:
                                    revert with 0, 50
                                mem[(32 * idx) + (32 * stor13[address(arg5)].field_0) + 160] = _6077
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                continue 
                            if arg1 > !arg2:
                                revert with 0, 17
                            if arg1 > !arg2:
                                revert with 0, 17
                            if arg1 + arg2 < mem[96]:
                                _6683 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_6683] = 7
                                mem[_6683 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                                _7129 = mem[64]
                                mem[mem[64]] = 96
                                _7617 = mem[(32 * stor13[address(arg5)].field_0) + 128]
                                mem[mem[64] + 96] = mem[(32 * stor13[address(arg5)].field_0) + 128]
                                idx = 0
                                s = (32 * stor13[address(arg5)].field_0) + 160
                                t = mem[64] + 128
                                while idx < _7617:
                                    _11484 = mem[s]
                                    mem[t] = mem[mem[s]]
                                    mem[t + 32] = mem[_11484 + 32]
                                    mem[t + 64] = mem[_11484 + 64]
                                    mem[t + 96] = mem[_11484 + 96]
                                    mem[t + 128] = mem[_11484 + 128]
                                    mem[t + 160] = mem[_11484 + 172 len 20]
                                    mem[t + 192] = mem[_11484 + 192]
                                    mem[t + 224] = mem[_11484 + 236 len 20]
                                    mem[t + 256] = bool(mem[_11484 + 256])
                                    mem[t + 288] = mem[_11484 + 288]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 320
                                    continue 
                                mem[_7129 + 32] = arg1 + arg2
                                mem[_7129 + 64] = (320 * _7617) + 128
                                _12175 = mem[_6683]
                                mem[_7129 + (320 * _7617) + 128] = mem[_6683]
                                mem[_7129 + (320 * _7617) + 160 len ceil32(_12175)] = mem[_6683 + 32 len ceil32(_12175)]
                                if ceil32(_12175) > _12175:
                                    mem[_7129 + (320 * _7617) + _12175 + 160] = 0
                                return memory
                                  from mem[64]
                                   len ceil32(_12175) + _7129 + (320 * _7617) + -mem[64] + 160
                            _6684 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_6684] = 4
                            mem[_6684 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                            _7130 = mem[64]
                            mem[mem[64]] = 96
                            _7618 = mem[(32 * stor13[address(arg5)].field_0) + 128]
                            mem[mem[64] + 96] = mem[(32 * stor13[address(arg5)].field_0) + 128]
                            idx = 0
                            s = (32 * stor13[address(arg5)].field_0) + 160
                            t = mem[64] + 128
                            while idx < _7618:
                                _11491 = mem[s]
                                mem[t] = mem[mem[s]]
                                mem[t + 32] = mem[_11491 + 32]
                                mem[t + 64] = mem[_11491 + 64]
                                mem[t + 96] = mem[_11491 + 96]
                                mem[t + 128] = mem[_11491 + 128]
                                mem[t + 160] = mem[_11491 + 172 len 20]
                                mem[t + 192] = mem[_11491 + 192]
                                mem[t + 224] = mem[_11491 + 236 len 20]
                                mem[t + 256] = bool(mem[_11491 + 256])
                                mem[t + 288] = mem[_11491 + 288]
                                idx = idx + 1
                                s = s + 32
                                t = t + 320
                                continue 
                            mem[_7130 + 32] = arg1 + arg2
                            mem[_7130 + 64] = (320 * _7618) + 128
                            _12176 = mem[_6684]
                            mem[_7130 + (320 * _7618) + 128] = mem[_6684]
                            mem[_7130 + (320 * _7618) + 160 len ceil32(_12176)] = mem[_6684 + 32 len ceil32(_12176)]
                            if ceil32(_12176) > _12176:
                                mem[_7130 + (320 * _7618) + _12176 + 160] = 0
                            return memory
                              from mem[64]
                               len ceil32(_12176) + _7130 + (320 * _7618) + -mem[64] + 160
                        mem[64] = (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 480
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * arg2) + 160] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * arg2) + 192] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * arg2) + 224] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * arg2) + 256] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * arg2) + 288] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * arg2) + 320] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * arg2) + 352] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * arg2) + 384] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * arg2) + 416] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * arg2) + 448] = 0
                        mem[var27001] = (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 160
                        s = var27001
                        idx = var27002
                        while idx - 1:
                            mem[64] = mem[64] + 320
                            mem[(32 * stor13[address(arg5)].field_0) + (32 * arg2) + 160] = 0
                            mem[(32 * stor13[address(arg5)].field_0) + (32 * arg2) + 192] = 0
                            mem[(32 * stor13[address(arg5)].field_0) + (32 * arg2) + 224] = 0
                            mem[(32 * stor13[address(arg5)].field_0) + (32 * arg2) + 256] = 0
                            mem[(32 * stor13[address(arg5)].field_0) + (32 * arg2) + 288] = 0
                            mem[(32 * stor13[address(arg5)].field_0) + (32 * arg2) + 320] = 0
                            mem[(32 * stor13[address(arg5)].field_0) + (32 * arg2) + 352] = 0
                            mem[(32 * stor13[address(arg5)].field_0) + (32 * arg2) + 384] = 0
                            mem[(32 * stor13[address(arg5)].field_0) + (32 * arg2) + 416] = 0
                            mem[(32 * stor13[address(arg5)].field_0) + (32 * arg2) + 448] = 0
                            mem[s + 32] = (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 160
                            s = s + 32
                            idx = idx - 1
                            continue 
                        idx = 0
                        while idx < arg2:
                            if arg1 > !idx:
                                revert with 0, 17
                            if arg1 + idx >= mem[96]:
                                revert with 0, 50
                            mem[0] = mem[(32 * arg1 + idx) + 128]
                            mem[32] = 12
                            _25372 = sha3(mem[(32 * arg1 + idx) + 128], 12)
                            _25373 = mem[64]
                            mem[64] = mem[64] + 320
                            mem[_25373] = stor12[mem[(32 * arg1 + idx) + 128]].field_0
                            mem[_25373 + 32] = stor1[_25372]
                            mem[_25373 + 64] = stor2[_25372]
                            mem[_25373 + 96] = stor3[_25372]
                            mem[_25373 + 128] = stor4[_25372]
                            mem[_25373 + 160] = stor5[_25372]
                            mem[_25373 + 192] = stor6[_25372]
                            mem[_25373 + 224] = stor7[_25372].field_0
                            mem[_25373 + 256] = bool(stor7[_25372].field_160)
                            mem[_25373 + 288] = stor8[_25372]
                            if idx >= mem[(32 * stor13[address(arg5)].field_0) + 128]:
                                revert with 0, 50
                            mem[(32 * idx) + (32 * stor13[address(arg5)].field_0) + 160] = _25373
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            continue 
                        if arg1 > !arg2:
                            revert with 0, 17
                        if arg1 > !arg2:
                            revert with 0, 17
                        if arg1 + arg2 < mem[96]:
                            _26953 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_26953] = 7
                            mem[_26953 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                            _27712 = mem[64]
                            mem[mem[64]] = 96
                            _28868 = mem[(32 * stor13[address(arg5)].field_0) + 128]
                            mem[mem[64] + 96] = mem[(32 * stor13[address(arg5)].field_0) + 128]
                            idx = 0
                            s = (32 * stor13[address(arg5)].field_0) + 160
                            t = mem[64] + 128
                            while idx < _28868:
                                _36061 = mem[s]
                                mem[t] = mem[mem[s]]
                                mem[t + 32] = mem[_36061 + 32]
                                mem[t + 64] = mem[_36061 + 64]
                                mem[t + 96] = mem[_36061 + 96]
                                mem[t + 128] = mem[_36061 + 128]
                                mem[t + 160] = mem[_36061 + 172 len 20]
                                mem[t + 192] = mem[_36061 + 192]
                                mem[t + 224] = mem[_36061 + 236 len 20]
                                mem[t + 256] = bool(mem[_36061 + 256])
                                mem[t + 288] = mem[_36061 + 288]
                                idx = idx + 1
                                s = s + 32
                                t = t + 320
                                continue 
                            mem[_27712 + 32] = arg1 + arg2
                            mem[_27712 + 64] = (320 * _28868) + 128
                            _38004 = mem[_26953]
                            mem[_27712 + (320 * _28868) + 128] = mem[_26953]
                            mem[_27712 + (320 * _28868) + 160 len ceil32(_38004)] = mem[_26953 + 32 len ceil32(_38004)]
                            if ceil32(_38004) > _38004:
                                mem[_27712 + (320 * _28868) + _38004 + 160] = 0
                            return memory
                              from mem[64]
                               len ceil32(_38004) + _27712 + (320 * _28868) + -mem[64] + 160
                        _26954 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_26954] = 4
                        mem[_26954 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                        _27713 = mem[64]
                        mem[mem[64]] = 96
                        _28869 = mem[(32 * stor13[address(arg5)].field_0) + 128]
                        mem[mem[64] + 96] = mem[(32 * stor13[address(arg5)].field_0) + 128]
                        idx = 0
                        s = (32 * stor13[address(arg5)].field_0) + 160
                        t = mem[64] + 128
                        while idx < _28869:
                            _36068 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_36068 + 32]
                            mem[t + 64] = mem[_36068 + 64]
                            mem[t + 96] = mem[_36068 + 96]
                            mem[t + 128] = mem[_36068 + 128]
                            mem[t + 160] = mem[_36068 + 172 len 20]
                            mem[t + 192] = mem[_36068 + 192]
                            mem[t + 224] = mem[_36068 + 236 len 20]
                            mem[t + 256] = bool(mem[_36068 + 256])
                            mem[t + 288] = mem[_36068 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_27713 + 32] = arg1 + arg2
                        mem[_27713 + 64] = (320 * _28869) + 128
                        _38005 = mem[_26954]
                        mem[_27713 + (320 * _28869) + 128] = mem[_26954]
                        mem[_27713 + (320 * _28869) + 160 len ceil32(_38005)] = mem[_26954 + 32 len ceil32(_38005)]
                        if ceil32(_38005) > _38005:
                            mem[_27713 + (320 * _28869) + _38005 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_38005) + _27713 + (320 * _28869) + -mem[64] + 160
                    if stor13[address(arg5)].field_0 < arg1:
                        revert with 0, 17
                    if stor13[address(arg5)].field_0 - arg1 > test266151307():
                        revert with 0, 65
                    mem[(32 * stor13[address(arg5)].field_0) + 128] = stor13[address(arg5)].field_0 - arg1
                    mem[64] = (32 * stor13[address(arg5)].field_0) + (32 * stor13[address(arg5)].field_0 - arg1) + 160
                    if not stor13[address(arg5)].field_0 - arg1:
                        idx = 0
                        while idx < stor13[address(arg5)].field_0 - arg1:
                            if arg1 > !idx:
                                revert with 0, 17
                            if arg1 + idx >= mem[96]:
                                revert with 0, 50
                            mem[0] = mem[(32 * arg1 + idx) + 128]
                            mem[32] = 12
                            _6080 = sha3(mem[(32 * arg1 + idx) + 128], 12)
                            _6081 = mem[64]
                            mem[64] = mem[64] + 320
                            mem[_6081] = stor12[mem[(32 * arg1 + idx) + 128]].field_0
                            mem[_6081 + 32] = stor1[_6080]
                            mem[_6081 + 64] = stor2[_6080]
                            mem[_6081 + 96] = stor3[_6080]
                            mem[_6081 + 128] = stor4[_6080]
                            mem[_6081 + 160] = stor5[_6080]
                            mem[_6081 + 192] = stor6[_6080]
                            mem[_6081 + 224] = stor7[_6080].field_0
                            mem[_6081 + 256] = bool(stor7[_6080].field_160)
                            mem[_6081 + 288] = stor8[_6080]
                            if idx >= mem[(32 * stor13[address(arg5)].field_0) + 128]:
                                revert with 0, 50
                            mem[(32 * idx) + (32 * stor13[address(arg5)].field_0) + 160] = _6081
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            continue 
                        if arg1 > !(stor13[address(arg5)].field_0 - arg1):
                            revert with 0, 17
                        if arg1 > !(stor13[address(arg5)].field_0 - arg1):
                            revert with 0, 17
                        if stor13[address(arg5)].field_0 < mem[96]:
                            _6685 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_6685] = 7
                            mem[_6685 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                            _7135 = mem[64]
                            mem[mem[64]] = 96
                            _7619 = mem[(32 * stor13[address(arg5)].field_0) + 128]
                            mem[mem[64] + 96] = mem[(32 * stor13[address(arg5)].field_0) + 128]
                            idx = 0
                            s = (32 * stor13[address(arg5)].field_0) + 160
                            t = mem[64] + 128
                            while idx < _7619:
                                _11498 = mem[s]
                                mem[t] = mem[mem[s]]
                                mem[t + 32] = mem[_11498 + 32]
                                mem[t + 64] = mem[_11498 + 64]
                                mem[t + 96] = mem[_11498 + 96]
                                mem[t + 128] = mem[_11498 + 128]
                                mem[t + 160] = mem[_11498 + 172 len 20]
                                mem[t + 192] = mem[_11498 + 192]
                                mem[t + 224] = mem[_11498 + 236 len 20]
                                mem[t + 256] = bool(mem[_11498 + 256])
                                mem[t + 288] = mem[_11498 + 288]
                                idx = idx + 1
                                s = s + 32
                                t = t + 320
                                continue 
                            mem[_7135 + 32] = stor13[address(arg5)].field_0
                            mem[_7135 + 64] = (320 * _7619) + 128
                            _12177 = mem[_6685]
                            mem[_7135 + (320 * _7619) + 128] = mem[_6685]
                            mem[_7135 + (320 * _7619) + 160 len ceil32(_12177)] = mem[_6685 + 32 len ceil32(_12177)]
                            if ceil32(_12177) > _12177:
                                mem[_7135 + (320 * _7619) + _12177 + 160] = 0
                            return memory
                              from mem[64]
                               len ceil32(_12177) + _7135 + (320 * _7619) + -mem[64] + 160
                        _6686 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_6686] = 4
                        mem[_6686 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                        _7136 = mem[64]
                        mem[mem[64]] = 96
                        _7620 = mem[(32 * stor13[address(arg5)].field_0) + 128]
                        mem[mem[64] + 96] = mem[(32 * stor13[address(arg5)].field_0) + 128]
                        idx = 0
                        s = (32 * stor13[address(arg5)].field_0) + 160
                        t = mem[64] + 128
                        while idx < _7620:
                            _11505 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_11505 + 32]
                            mem[t + 64] = mem[_11505 + 64]
                            mem[t + 96] = mem[_11505 + 96]
                            mem[t + 128] = mem[_11505 + 128]
                            mem[t + 160] = mem[_11505 + 172 len 20]
                            mem[t + 192] = mem[_11505 + 192]
                            mem[t + 224] = mem[_11505 + 236 len 20]
                            mem[t + 256] = bool(mem[_11505 + 256])
                            mem[t + 288] = mem[_11505 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_7136 + 32] = stor13[address(arg5)].field_0
                        mem[_7136 + 64] = (320 * _7620) + 128
                        _12178 = mem[_6686]
                        mem[_7136 + (320 * _7620) + 128] = mem[_6686]
                        mem[_7136 + (320 * _7620) + 160 len ceil32(_12178)] = mem[_6686 + 32 len ceil32(_12178)]
                        if ceil32(_12178) > _12178:
                            mem[_7136 + (320 * _7620) + _12178 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_12178) + _7136 + (320 * _7620) + -mem[64] + 160
                    mem[64] = (32 * stor13[address(arg5)].field_0) + (32 * stor13[address(arg5)].field_0 - arg1) + 480
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor13[address(arg5)].field_0 - arg1) + 160] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor13[address(arg5)].field_0 - arg1) + 192] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor13[address(arg5)].field_0 - arg1) + 224] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor13[address(arg5)].field_0 - arg1) + 256] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor13[address(arg5)].field_0 - arg1) + 288] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor13[address(arg5)].field_0 - arg1) + 320] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor13[address(arg5)].field_0 - arg1) + 352] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor13[address(arg5)].field_0 - arg1) + 384] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor13[address(arg5)].field_0 - arg1) + 416] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor13[address(arg5)].field_0 - arg1) + 448] = 0
                    mem[var31001] = (32 * stor13[address(arg5)].field_0) + (32 * stor13[address(arg5)].field_0 - arg1) + 160
                    s = var31001
                    idx = var31002
                    while idx - 1:
                        mem[64] = mem[64] + 320
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * stor13[address(arg5)].field_0 - arg1) + 160] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * stor13[address(arg5)].field_0 - arg1) + 192] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * stor13[address(arg5)].field_0 - arg1) + 224] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * stor13[address(arg5)].field_0 - arg1) + 256] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * stor13[address(arg5)].field_0 - arg1) + 288] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * stor13[address(arg5)].field_0 - arg1) + 320] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * stor13[address(arg5)].field_0 - arg1) + 352] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * stor13[address(arg5)].field_0 - arg1) + 384] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * stor13[address(arg5)].field_0 - arg1) + 416] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * stor13[address(arg5)].field_0 - arg1) + 448] = 0
                        mem[s + 32] = (32 * stor13[address(arg5)].field_0) + (32 * stor13[address(arg5)].field_0 - arg1) + 160
                        s = s + 32
                        idx = idx - 1
                        continue 
                    idx = 0
                    while idx < stor13[address(arg5)].field_0 - arg1:
                        if arg1 > !idx:
                            revert with 0, 17
                        if arg1 + idx >= mem[96]:
                            revert with 0, 50
                        mem[0] = mem[(32 * arg1 + idx) + 128]
                        mem[32] = 12
                        _25378 = sha3(mem[(32 * arg1 + idx) + 128], 12)
                        _25379 = mem[64]
                        mem[64] = mem[64] + 320
                        mem[_25379] = stor12[mem[(32 * arg1 + idx) + 128]].field_0
                        mem[_25379 + 32] = stor1[_25378]
                        mem[_25379 + 64] = stor2[_25378]
                        mem[_25379 + 96] = stor3[_25378]
                        mem[_25379 + 128] = stor4[_25378]
                        mem[_25379 + 160] = stor5[_25378]
                        mem[_25379 + 192] = stor6[_25378]
                        mem[_25379 + 224] = stor7[_25378].field_0
                        mem[_25379 + 256] = bool(stor7[_25378].field_160)
                        mem[_25379 + 288] = stor8[_25378]
                        if idx >= mem[(32 * stor13[address(arg5)].field_0) + 128]:
                            revert with 0, 50
                        mem[(32 * idx) + (32 * stor13[address(arg5)].field_0) + 160] = _25379
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if arg1 > !(stor13[address(arg5)].field_0 - arg1):
                        revert with 0, 17
                    if arg1 > !(stor13[address(arg5)].field_0 - arg1):
                        revert with 0, 17
                    if stor13[address(arg5)].field_0 < mem[96]:
                        _26955 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_26955] = 7
                        mem[_26955 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                        _27714 = mem[64]
                        mem[mem[64]] = 96
                        _28870 = mem[(32 * stor13[address(arg5)].field_0) + 128]
                        mem[mem[64] + 96] = mem[(32 * stor13[address(arg5)].field_0) + 128]
                        idx = 0
                        s = (32 * stor13[address(arg5)].field_0) + 160
                        t = mem[64] + 128
                        while idx < _28870:
                            _36075 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_36075 + 32]
                            mem[t + 64] = mem[_36075 + 64]
                            mem[t + 96] = mem[_36075 + 96]
                            mem[t + 128] = mem[_36075 + 128]
                            mem[t + 160] = mem[_36075 + 172 len 20]
                            mem[t + 192] = mem[_36075 + 192]
                            mem[t + 224] = mem[_36075 + 236 len 20]
                            mem[t + 256] = bool(mem[_36075 + 256])
                            mem[t + 288] = mem[_36075 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_27714 + 32] = stor13[address(arg5)].field_0
                        mem[_27714 + 64] = (320 * _28870) + 128
                        _38006 = mem[_26955]
                        mem[_27714 + (320 * _28870) + 128] = mem[_26955]
                        mem[_27714 + (320 * _28870) + 160 len ceil32(_38006)] = mem[_26955 + 32 len ceil32(_38006)]
                        if ceil32(_38006) > _38006:
                            mem[_27714 + (320 * _28870) + _38006 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_38006) + _27714 + (320 * _28870) + -mem[64] + 160
                    _26956 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_26956] = 4
                    mem[_26956 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                    _27715 = mem[64]
                    mem[mem[64]] = 96
                    _28871 = mem[(32 * stor13[address(arg5)].field_0) + 128]
                    mem[mem[64] + 96] = mem[(32 * stor13[address(arg5)].field_0) + 128]
                    idx = 0
                    s = (32 * stor13[address(arg5)].field_0) + 160
                    t = mem[64] + 128
                    while idx < _28871:
                        _36082 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_36082 + 32]
                        mem[t + 64] = mem[_36082 + 64]
                        mem[t + 96] = mem[_36082 + 96]
                        mem[t + 128] = mem[_36082 + 128]
                        mem[t + 160] = mem[_36082 + 172 len 20]
                        mem[t + 192] = mem[_36082 + 192]
                        mem[t + 224] = mem[_36082 + 236 len 20]
                        mem[t + 256] = bool(mem[_36082 + 256])
                        mem[t + 288] = mem[_36082 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_27715 + 32] = stor13[address(arg5)].field_0
                    mem[_27715 + 64] = (320 * _28871) + 128
                    _38007 = mem[_26956]
                    mem[_27715 + (320 * _28871) + 128] = mem[_26956]
                    mem[_27715 + (320 * _28871) + 160 len ceil32(_38007)] = mem[_26956 + 32 len ceil32(_38007)]
                    if ceil32(_38007) > _38007:
                        mem[_27715 + (320 * _28871) + _38007 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_38007) + _27715 + (320 * _28871) + -mem[64] + 160
                if stor13[address(arg5)].field_0 < 1:
                    revert with 0, 17
                if arg3:
                    if arg2 <= stor13[address(arg5)].field_0 - 1:
                        if arg2 > test266151307():
                            revert with 0, 65
                        mem[(32 * stor13[address(arg5)].field_0) + 128] = arg2
                        mem[64] = (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 160
                        if not arg2:
                            idx = 0
                            while idx < arg2:
                                if stor13[address(arg5)].field_0 - 1 < idx:
                                    revert with 0, 17
                                if stor13[address(arg5)].field_0 + -idx - 1 >= mem[96]:
                                    revert with 0, 50
                                mem[0] = mem[(32 * stor13[address(arg5)].field_0 + -idx - 1) + 128]
                                mem[32] = 12
                                _6086 = sha3(mem[(32 * stor13[address(arg5)].field_0 + -idx - 1) + 128], 12)
                                _6087 = mem[64]
                                mem[64] = mem[64] + 320
                                mem[_6087] = stor12[mem[(32 * stor13[address(arg5)].field_0 + -idx - 1) + 128]].field_0
                                mem[_6087 + 32] = stor1[_6086]
                                mem[_6087 + 64] = stor2[_6086]
                                mem[_6087 + 96] = stor3[_6086]
                                mem[_6087 + 128] = stor4[_6086]
                                mem[_6087 + 160] = stor5[_6086]
                                mem[_6087 + 192] = stor6[_6086]
                                mem[_6087 + 224] = stor7[_6086].field_0
                                mem[_6087 + 256] = bool(stor7[_6086].field_160)
                                mem[_6087 + 288] = stor8[_6086]
                                if idx >= mem[(32 * stor13[address(arg5)].field_0) + 128]:
                                    revert with 0, 50
                                mem[(32 * idx) + (32 * stor13[address(arg5)].field_0) + 160] = _6087
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                continue 
                            if stor13[address(arg5)].field_0 - 1 < arg2:
                                _5833 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_5833] = 4
                                mem[_5833 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                                _5909 = mem[64]
                                mem[mem[64]] = 96
                                _6083 = mem[(32 * stor13[address(arg5)].field_0) + 128]
                                mem[mem[64] + 96] = mem[(32 * stor13[address(arg5)].field_0) + 128]
                                idx = 0
                                s = (32 * stor13[address(arg5)].field_0) + 160
                                t = mem[64] + 128
                                while idx < _6083:
                                    _11512 = mem[s]
                                    mem[t] = mem[mem[s]]
                                    mem[t + 32] = mem[_11512 + 32]
                                    mem[t + 64] = mem[_11512 + 64]
                                    mem[t + 96] = mem[_11512 + 96]
                                    mem[t + 128] = mem[_11512 + 128]
                                    mem[t + 160] = mem[_11512 + 172 len 20]
                                    mem[t + 192] = mem[_11512 + 192]
                                    mem[t + 224] = mem[_11512 + 236 len 20]
                                    mem[t + 256] = bool(mem[_11512 + 256])
                                    mem[t + 288] = mem[_11512 + 288]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 320
                                    continue 
                                mem[_5909 + 32] = 0
                                mem[_5909 + 64] = (320 * _6083) + 128
                                _12179 = mem[_5833]
                                mem[_5909 + (320 * _6083) + 128] = mem[_5833]
                                mem[_5909 + (320 * _6083) + 160 len ceil32(_12179)] = mem[_5833 + 32 len ceil32(_12179)]
                                if ceil32(_12179) > _12179:
                                    mem[_5909 + (320 * _6083) + _12179 + 160] = 0
                                return memory
                                  from mem[64]
                                   len ceil32(_12179) + _5909 + (320 * _6083) + -mem[64] + 160
                            _6084 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_6084] = 7
                            mem[_6084 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                            _6442 = mem[64]
                            mem[mem[64]] = 96
                            _6688 = mem[(32 * stor13[address(arg5)].field_0) + 128]
                            mem[mem[64] + 96] = mem[(32 * stor13[address(arg5)].field_0) + 128]
                            idx = 0
                            s = (32 * stor13[address(arg5)].field_0) + 160
                            t = mem[64] + 128
                            while idx < _6688:
                                _11519 = mem[s]
                                mem[t] = mem[mem[s]]
                                mem[t + 32] = mem[_11519 + 32]
                                mem[t + 64] = mem[_11519 + 64]
                                mem[t + 96] = mem[_11519 + 96]
                                mem[t + 128] = mem[_11519 + 128]
                                mem[t + 160] = mem[_11519 + 172 len 20]
                                mem[t + 192] = mem[_11519 + 192]
                                mem[t + 224] = mem[_11519 + 236 len 20]
                                mem[t + 256] = bool(mem[_11519 + 256])
                                mem[t + 288] = mem[_11519 + 288]
                                idx = idx + 1
                                s = s + 32
                                t = t + 320
                                continue 
                            mem[_6442 + 32] = stor13[address(arg5)].field_0 + -arg2 - 1
                            mem[_6442 + 64] = (320 * _6688) + 128
                            _12180 = mem[_6084]
                            mem[_6442 + (320 * _6688) + 128] = mem[_6084]
                            mem[_6442 + (320 * _6688) + 160 len ceil32(_12180)] = mem[_6084 + 32 len ceil32(_12180)]
                            if ceil32(_12180) > _12180:
                                mem[_6442 + (320 * _6688) + _12180 + 160] = 0
                            return memory
                              from mem[64]
                               len ceil32(_12180) + _6442 + (320 * _6688) + -mem[64] + 160
                        mem[64] = (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 480
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * arg2) + 160] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * arg2) + 192] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * arg2) + 224] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * arg2) + 256] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * arg2) + 288] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * arg2) + 320] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * arg2) + 352] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * arg2) + 384] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * arg2) + 416] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * arg2) + 448] = 0
                        mem[var28001] = (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 160
                        s = var28001
                        idx = var28002
                        while idx - 1:
                            mem[64] = mem[64] + 320
                            mem[(32 * stor13[address(arg5)].field_0) + (32 * arg2) + 160] = 0
                            mem[(32 * stor13[address(arg5)].field_0) + (32 * arg2) + 192] = 0
                            mem[(32 * stor13[address(arg5)].field_0) + (32 * arg2) + 224] = 0
                            mem[(32 * stor13[address(arg5)].field_0) + (32 * arg2) + 256] = 0
                            mem[(32 * stor13[address(arg5)].field_0) + (32 * arg2) + 288] = 0
                            mem[(32 * stor13[address(arg5)].field_0) + (32 * arg2) + 320] = 0
                            mem[(32 * stor13[address(arg5)].field_0) + (32 * arg2) + 352] = 0
                            mem[(32 * stor13[address(arg5)].field_0) + (32 * arg2) + 384] = 0
                            mem[(32 * stor13[address(arg5)].field_0) + (32 * arg2) + 416] = 0
                            mem[(32 * stor13[address(arg5)].field_0) + (32 * arg2) + 448] = 0
                            mem[s + 32] = (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 160
                            s = s + 32
                            idx = idx - 1
                            continue 
                        idx = 0
                        while idx < arg2:
                            if stor13[address(arg5)].field_0 - 1 < idx:
                                revert with 0, 17
                            if stor13[address(arg5)].field_0 + -idx - 1 >= mem[96]:
                                revert with 0, 50
                            mem[0] = mem[(32 * stor13[address(arg5)].field_0 + -idx - 1) + 128]
                            mem[32] = 12
                            _25386 = sha3(mem[(32 * stor13[address(arg5)].field_0 + -idx - 1) + 128], 12)
                            _25387 = mem[64]
                            mem[64] = mem[64] + 320
                            mem[_25387] = stor12[mem[(32 * stor13[address(arg5)].field_0 + -idx - 1) + 128]].field_0
                            mem[_25387 + 32] = stor1[_25386]
                            mem[_25387 + 64] = stor2[_25386]
                            mem[_25387 + 96] = stor3[_25386]
                            mem[_25387 + 128] = stor4[_25386]
                            mem[_25387 + 160] = stor5[_25386]
                            mem[_25387 + 192] = stor6[_25386]
                            mem[_25387 + 224] = stor7[_25386].field_0
                            mem[_25387 + 256] = bool(stor7[_25386].field_160)
                            mem[_25387 + 288] = stor8[_25386]
                            if idx >= mem[(32 * stor13[address(arg5)].field_0) + 128]:
                                revert with 0, 50
                            mem[(32 * idx) + (32 * stor13[address(arg5)].field_0) + 160] = _25387
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            continue 
                        if stor13[address(arg5)].field_0 - 1 < arg2:
                            _24719 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_24719] = 4
                            mem[_24719 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                            _24905 = mem[64]
                            mem[mem[64]] = 96
                            _25383 = mem[(32 * stor13[address(arg5)].field_0) + 128]
                            mem[mem[64] + 96] = mem[(32 * stor13[address(arg5)].field_0) + 128]
                            idx = 0
                            s = (32 * stor13[address(arg5)].field_0) + 160
                            t = mem[64] + 128
                            while idx < _25383:
                                _36089 = mem[s]
                                mem[t] = mem[mem[s]]
                                mem[t + 32] = mem[_36089 + 32]
                                mem[t + 64] = mem[_36089 + 64]
                                mem[t + 96] = mem[_36089 + 96]
                                mem[t + 128] = mem[_36089 + 128]
                                mem[t + 160] = mem[_36089 + 172 len 20]
                                mem[t + 192] = mem[_36089 + 192]
                                mem[t + 224] = mem[_36089 + 236 len 20]
                                mem[t + 256] = bool(mem[_36089 + 256])
                                mem[t + 288] = mem[_36089 + 288]
                                idx = idx + 1
                                s = s + 32
                                t = t + 320
                                continue 
                            mem[_24905 + 32] = 0
                            mem[_24905 + 64] = (320 * _25383) + 128
                            _38008 = mem[_24719]
                            mem[_24905 + (320 * _25383) + 128] = mem[_24719]
                            mem[_24905 + (320 * _25383) + 160 len ceil32(_38008)] = mem[_24719 + 32 len ceil32(_38008)]
                            if ceil32(_38008) > _38008:
                                mem[_24905 + (320 * _25383) + _38008 + 160] = 0
                            return memory
                              from mem[64]
                               len ceil32(_38008) + _24905 + (320 * _25383) + -mem[64] + 160
                        _25384 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_25384] = 7
                        mem[_25384 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                        _26313 = mem[64]
                        mem[mem[64]] = 96
                        _26958 = mem[(32 * stor13[address(arg5)].field_0) + 128]
                        mem[mem[64] + 96] = mem[(32 * stor13[address(arg5)].field_0) + 128]
                        idx = 0
                        s = (32 * stor13[address(arg5)].field_0) + 160
                        t = mem[64] + 128
                        while idx < _26958:
                            _36096 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_36096 + 32]
                            mem[t + 64] = mem[_36096 + 64]
                            mem[t + 96] = mem[_36096 + 96]
                            mem[t + 128] = mem[_36096 + 128]
                            mem[t + 160] = mem[_36096 + 172 len 20]
                            mem[t + 192] = mem[_36096 + 192]
                            mem[t + 224] = mem[_36096 + 236 len 20]
                            mem[t + 256] = bool(mem[_36096 + 256])
                            mem[t + 288] = mem[_36096 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_26313 + 32] = stor13[address(arg5)].field_0 + -arg2 - 1
                        mem[_26313 + 64] = (320 * _26958) + 128
                        _38009 = mem[_25384]
                        mem[_26313 + (320 * _26958) + 128] = mem[_25384]
                        mem[_26313 + (320 * _26958) + 160 len ceil32(_38009)] = mem[_25384 + 32 len ceil32(_38009)]
                        if ceil32(_38009) > _38009:
                            mem[_26313 + (320 * _26958) + _38009 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_38009) + _26313 + (320 * _26958) + -mem[64] + 160
                    if 1 > !(stor13[address(arg5)].field_0 - 1):
                        revert with 0, 17
                    if stor13[address(arg5)].field_0 > test266151307():
                        revert with 0, 65
                    mem[(32 * stor13[address(arg5)].field_0) + 128] = stor13[address(arg5)].field_0
                    mem[64] = (64 * stor13[address(arg5)].field_0) + 160
                    if not stor13[address(arg5)].field_0:
                        idx = 0
                        while idx < stor13[address(arg5)].field_0:
                            if stor13[address(arg5)].field_0 - 1 < idx:
                                revert with 0, 17
                            if stor13[address(arg5)].field_0 + -idx - 1 >= mem[96]:
                                revert with 0, 50
                            mem[0] = mem[(32 * stor13[address(arg5)].field_0 + -idx - 1) + 128]
                            mem[32] = 12
                            _6092 = sha3(mem[(32 * stor13[address(arg5)].field_0 + -idx - 1) + 128], 12)
                            _6093 = mem[64]
                            mem[64] = mem[64] + 320
                            mem[_6093] = stor12[mem[(32 * stor13[address(arg5)].field_0 + -idx - 1) + 128]].field_0
                            mem[_6093 + 32] = stor1[_6092]
                            mem[_6093 + 64] = stor2[_6092]
                            mem[_6093 + 96] = stor3[_6092]
                            mem[_6093 + 128] = stor4[_6092]
                            mem[_6093 + 160] = stor5[_6092]
                            mem[_6093 + 192] = stor6[_6092]
                            mem[_6093 + 224] = stor7[_6092].field_0
                            mem[_6093 + 256] = bool(stor7[_6092].field_160)
                            mem[_6093 + 288] = stor8[_6092]
                            if idx >= mem[(32 * stor13[address(arg5)].field_0) + 128]:
                                revert with 0, 50
                            mem[(32 * idx) + (32 * stor13[address(arg5)].field_0) + 160] = _6093
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            continue 
                        if stor13[address(arg5)].field_0 - 1 < stor13[address(arg5)].field_0:
                            _5834 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_5834] = 4
                            mem[_5834 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                            _5911 = mem[64]
                            mem[mem[64]] = 96
                            _6089 = mem[(32 * stor13[address(arg5)].field_0) + 128]
                            mem[mem[64] + 96] = mem[(32 * stor13[address(arg5)].field_0) + 128]
                            idx = 0
                            s = (32 * stor13[address(arg5)].field_0) + 160
                            t = mem[64] + 128
                            while idx < _6089:
                                _11526 = mem[s]
                                mem[t] = mem[mem[s]]
                                mem[t + 32] = mem[_11526 + 32]
                                mem[t + 64] = mem[_11526 + 64]
                                mem[t + 96] = mem[_11526 + 96]
                                mem[t + 128] = mem[_11526 + 128]
                                mem[t + 160] = mem[_11526 + 172 len 20]
                                mem[t + 192] = mem[_11526 + 192]
                                mem[t + 224] = mem[_11526 + 236 len 20]
                                mem[t + 256] = bool(mem[_11526 + 256])
                                mem[t + 288] = mem[_11526 + 288]
                                idx = idx + 1
                                s = s + 32
                                t = t + 320
                                continue 
                            mem[_5911 + 32] = 0
                            mem[_5911 + 64] = (320 * _6089) + 128
                            _12181 = mem[_5834]
                            mem[_5911 + (320 * _6089) + 128] = mem[_5834]
                            mem[_5911 + (320 * _6089) + 160 len ceil32(_12181)] = mem[_5834 + 32 len ceil32(_12181)]
                            if ceil32(_12181) > _12181:
                                mem[_5911 + (320 * _6089) + _12181 + 160] = 0
                            return memory
                              from mem[64]
                               len ceil32(_12181) + _5911 + (320 * _6089) + -mem[64] + 160
                        _6090 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_6090] = 7
                        mem[_6090 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                        _6451 = mem[64]
                        mem[mem[64]] = 96
                        _6690 = mem[(32 * stor13[address(arg5)].field_0) + 128]
                        mem[mem[64] + 96] = mem[(32 * stor13[address(arg5)].field_0) + 128]
                        idx = 0
                        s = (32 * stor13[address(arg5)].field_0) + 160
                        t = mem[64] + 128
                        while idx < _6690:
                            _11533 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_11533 + 32]
                            mem[t + 64] = mem[_11533 + 64]
                            mem[t + 96] = mem[_11533 + 96]
                            mem[t + 128] = mem[_11533 + 128]
                            mem[t + 160] = mem[_11533 + 172 len 20]
                            mem[t + 192] = mem[_11533 + 192]
                            mem[t + 224] = mem[_11533 + 236 len 20]
                            mem[t + 256] = bool(mem[_11533 + 256])
                            mem[t + 288] = mem[_11533 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_6451 + 32] = -1
                        mem[_6451 + 64] = (320 * _6690) + 128
                        _12182 = mem[_6090]
                        mem[_6451 + (320 * _6690) + 128] = mem[_6090]
                        mem[_6451 + (320 * _6690) + 160 len ceil32(_12182)] = mem[_6090 + 32 len ceil32(_12182)]
                        if ceil32(_12182) > _12182:
                            mem[_6451 + (320 * _6690) + _12182 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_12182) + _6451 + (320 * _6690) + -mem[64] + 160
                    mem[64] = (64 * stor13[address(arg5)].field_0) + 480
                    mem[(64 * stor13[address(arg5)].field_0) + 160] = 0
                    mem[(64 * stor13[address(arg5)].field_0) + 192] = 0
                    mem[(64 * stor13[address(arg5)].field_0) + 224] = 0
                    mem[(64 * stor13[address(arg5)].field_0) + 256] = 0
                    mem[(64 * stor13[address(arg5)].field_0) + 288] = 0
                    mem[(64 * stor13[address(arg5)].field_0) + 320] = 0
                    mem[(64 * stor13[address(arg5)].field_0) + 352] = 0
                    mem[(64 * stor13[address(arg5)].field_0) + 384] = 0
                    mem[(64 * stor13[address(arg5)].field_0) + 416] = 0
                    mem[(64 * stor13[address(arg5)].field_0) + 448] = 0
                    mem[var32001] = (64 * stor13[address(arg5)].field_0) + 160
                    s = var32001
                    idx = var32002
                    while idx - 1:
                        mem[64] = mem[64] + 320
                        mem[(64 * stor13[address(arg5)].field_0) + 160] = 0
                        mem[(64 * stor13[address(arg5)].field_0) + 192] = 0
                        mem[(64 * stor13[address(arg5)].field_0) + 224] = 0
                        mem[(64 * stor13[address(arg5)].field_0) + 256] = 0
                        mem[(64 * stor13[address(arg5)].field_0) + 288] = 0
                        mem[(64 * stor13[address(arg5)].field_0) + 320] = 0
                        mem[(64 * stor13[address(arg5)].field_0) + 352] = 0
                        mem[(64 * stor13[address(arg5)].field_0) + 384] = 0
                        mem[(64 * stor13[address(arg5)].field_0) + 416] = 0
                        mem[(64 * stor13[address(arg5)].field_0) + 448] = 0
                        mem[s + 32] = (64 * stor13[address(arg5)].field_0) + 160
                        s = s + 32
                        idx = idx - 1
                        continue 
                    idx = 0
                    while idx < stor13[address(arg5)].field_0:
                        if stor13[address(arg5)].field_0 - 1 < idx:
                            revert with 0, 17
                        if stor13[address(arg5)].field_0 + -idx - 1 >= mem[96]:
                            revert with 0, 50
                        mem[0] = mem[(32 * stor13[address(arg5)].field_0 + -idx - 1) + 128]
                        mem[32] = 12
                        _25394 = sha3(mem[(32 * stor13[address(arg5)].field_0 + -idx - 1) + 128], 12)
                        _25395 = mem[64]
                        mem[64] = mem[64] + 320
                        mem[_25395] = stor12[mem[(32 * stor13[address(arg5)].field_0 + -idx - 1) + 128]].field_0
                        mem[_25395 + 32] = stor1[_25394]
                        mem[_25395 + 64] = stor2[_25394]
                        mem[_25395 + 96] = stor3[_25394]
                        mem[_25395 + 128] = stor4[_25394]
                        mem[_25395 + 160] = stor5[_25394]
                        mem[_25395 + 192] = stor6[_25394]
                        mem[_25395 + 224] = stor7[_25394].field_0
                        mem[_25395 + 256] = bool(stor7[_25394].field_160)
                        mem[_25395 + 288] = stor8[_25394]
                        if idx >= mem[(32 * stor13[address(arg5)].field_0) + 128]:
                            revert with 0, 50
                        mem[(32 * idx) + (32 * stor13[address(arg5)].field_0) + 160] = _25395
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if stor13[address(arg5)].field_0 - 1 < stor13[address(arg5)].field_0:
                        _24720 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_24720] = 4
                        mem[_24720 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                        _24909 = mem[64]
                        mem[mem[64]] = 96
                        _25391 = mem[(32 * stor13[address(arg5)].field_0) + 128]
                        mem[mem[64] + 96] = mem[(32 * stor13[address(arg5)].field_0) + 128]
                        idx = 0
                        s = (32 * stor13[address(arg5)].field_0) + 160
                        t = mem[64] + 128
                        while idx < _25391:
                            _36103 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_36103 + 32]
                            mem[t + 64] = mem[_36103 + 64]
                            mem[t + 96] = mem[_36103 + 96]
                            mem[t + 128] = mem[_36103 + 128]
                            mem[t + 160] = mem[_36103 + 172 len 20]
                            mem[t + 192] = mem[_36103 + 192]
                            mem[t + 224] = mem[_36103 + 236 len 20]
                            mem[t + 256] = bool(mem[_36103 + 256])
                            mem[t + 288] = mem[_36103 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_24909 + 32] = 0
                        mem[_24909 + 64] = (320 * _25391) + 128
                        _38010 = mem[_24720]
                        mem[_24909 + (320 * _25391) + 128] = mem[_24720]
                        mem[_24909 + (320 * _25391) + 160 len ceil32(_38010)] = mem[_24720 + 32 len ceil32(_38010)]
                        if ceil32(_38010) > _38010:
                            mem[_24909 + (320 * _25391) + _38010 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_38010) + _24909 + (320 * _25391) + -mem[64] + 160
                    _25392 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_25392] = 7
                    mem[_25392 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                    _26321 = mem[64]
                    mem[mem[64]] = 96
                    _26960 = mem[(32 * stor13[address(arg5)].field_0) + 128]
                    mem[mem[64] + 96] = mem[(32 * stor13[address(arg5)].field_0) + 128]
                    idx = 0
                    s = (32 * stor13[address(arg5)].field_0) + 160
                    t = mem[64] + 128
                    while idx < _26960:
                        _36110 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_36110 + 32]
                        mem[t + 64] = mem[_36110 + 64]
                        mem[t + 96] = mem[_36110 + 96]
                        mem[t + 128] = mem[_36110 + 128]
                        mem[t + 160] = mem[_36110 + 172 len 20]
                        mem[t + 192] = mem[_36110 + 192]
                        mem[t + 224] = mem[_36110 + 236 len 20]
                        mem[t + 256] = bool(mem[_36110 + 256])
                        mem[t + 288] = mem[_36110 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_26321 + 32] = -1
                    mem[_26321 + 64] = (320 * _26960) + 128
                    _38011 = mem[_25392]
                    mem[_26321 + (320 * _26960) + 128] = mem[_25392]
                    mem[_26321 + (320 * _26960) + 160 len ceil32(_38011)] = mem[_25392 + 32 len ceil32(_38011)]
                    if ceil32(_38011) > _38011:
                        mem[_26321 + (320 * _26960) + _38011 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_38011) + _26321 + (320 * _26960) + -mem[64] + 160
                if stor13[address(arg5)].field_0 < stor13[address(arg5)].field_0 - 1:
                    revert with 0, 17
                if arg2 > 1:
                    if stor13[address(arg5)].field_0 < stor13[address(arg5)].field_0 - 1:
                        revert with 0, 17
                    mem[(32 * stor13[address(arg5)].field_0) + 128] = 1
                    mem[64] = (32 * stor13[address(arg5)].field_0) + 512
                    mem[(32 * stor13[address(arg5)].field_0) + 192] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + 224] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + 256] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + 288] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + 320] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + 352] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + 384] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + 416] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + 448] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + 480] = 0
                    mem[var35001] = (32 * stor13[address(arg5)].field_0) + 192
                    s = var35001
                    idx = var35002
                    while idx - 1:
                        mem[64] = mem[64] + 320
                        mem[(32 * stor13[address(arg5)].field_0) + 192] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + 224] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + 256] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + 288] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + 320] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + 352] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + 384] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + 416] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + 448] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + 480] = 0
                        mem[s + 32] = (32 * stor13[address(arg5)].field_0) + 192
                        s = s + 32
                        idx = idx - 1
                        continue 
                    idx = 0
                    while idx < 1:
                        if stor13[address(arg5)].field_0 - 1 > !idx:
                            revert with 0, 17
                        if stor13[address(arg5)].field_0 + idx - 1 >= mem[96]:
                            revert with 0, 50
                        mem[0] = mem[(32 * stor13[address(arg5)].field_0 + idx - 1) + 128]
                        mem[32] = 12
                        _25406 = sha3(mem[(32 * stor13[address(arg5)].field_0 + idx - 1) + 128], 12)
                        _25407 = mem[64]
                        mem[64] = mem[64] + 320
                        mem[_25407] = stor12[mem[(32 * stor13[address(arg5)].field_0 + idx - 1) + 128]].field_0
                        mem[_25407 + 32] = stor1[_25406]
                        mem[_25407 + 64] = stor2[_25406]
                        mem[_25407 + 96] = stor3[_25406]
                        mem[_25407 + 128] = stor4[_25406]
                        mem[_25407 + 160] = stor5[_25406]
                        mem[_25407 + 192] = stor6[_25406]
                        mem[_25407 + 224] = stor7[_25406].field_0
                        mem[_25407 + 256] = bool(stor7[_25406].field_160)
                        mem[_25407 + 288] = stor8[_25406]
                        if idx >= mem[(32 * stor13[address(arg5)].field_0) + 128]:
                            revert with 0, 50
                        mem[(32 * idx) + (32 * stor13[address(arg5)].field_0) + 160] = _25407
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if stor13[address(arg5)].field_0 - 1 > !1:
                        revert with 0, 17
                    if stor13[address(arg5)].field_0 - 1 > !1:
                        revert with 0, 17
                    if stor13[address(arg5)].field_0 < mem[96]:
                        _26963 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_26963] = 7
                        mem[_26963 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                        _27734 = mem[64]
                        mem[mem[64]] = 96
                        _28878 = mem[(32 * stor13[address(arg5)].field_0) + 128]
                        mem[mem[64] + 96] = mem[(32 * stor13[address(arg5)].field_0) + 128]
                        idx = 0
                        s = (32 * stor13[address(arg5)].field_0) + 160
                        t = mem[64] + 128
                        while idx < _28878:
                            _36131 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_36131 + 32]
                            mem[t + 64] = mem[_36131 + 64]
                            mem[t + 96] = mem[_36131 + 96]
                            mem[t + 128] = mem[_36131 + 128]
                            mem[t + 160] = mem[_36131 + 172 len 20]
                            mem[t + 192] = mem[_36131 + 192]
                            mem[t + 224] = mem[_36131 + 236 len 20]
                            mem[t + 256] = bool(mem[_36131 + 256])
                            mem[t + 288] = mem[_36131 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_27734 + 32] = stor13[address(arg5)].field_0
                        mem[_27734 + 64] = (320 * _28878) + 128
                        _38014 = mem[_26963]
                        mem[_27734 + (320 * _28878) + 128] = mem[_26963]
                        mem[_27734 + (320 * _28878) + 160 len ceil32(_38014)] = mem[_26963 + 32 len ceil32(_38014)]
                        if ceil32(_38014) > _38014:
                            mem[_27734 + (320 * _28878) + _38014 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_38014) + _27734 + (320 * _28878) + -mem[64] + 160
                    _26964 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_26964] = 4
                    mem[_26964 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                    _27735 = mem[64]
                    mem[mem[64]] = 96
                    _28879 = mem[(32 * stor13[address(arg5)].field_0) + 128]
                    mem[mem[64] + 96] = mem[(32 * stor13[address(arg5)].field_0) + 128]
                    idx = 0
                    s = (32 * stor13[address(arg5)].field_0) + 160
                    t = mem[64] + 128
                    while idx < _28879:
                        _36138 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_36138 + 32]
                        mem[t + 64] = mem[_36138 + 64]
                        mem[t + 96] = mem[_36138 + 96]
                        mem[t + 128] = mem[_36138 + 128]
                        mem[t + 160] = mem[_36138 + 172 len 20]
                        mem[t + 192] = mem[_36138 + 192]
                        mem[t + 224] = mem[_36138 + 236 len 20]
                        mem[t + 256] = bool(mem[_36138 + 256])
                        mem[t + 288] = mem[_36138 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_27735 + 32] = stor13[address(arg5)].field_0
                    mem[_27735 + 64] = (320 * _28879) + 128
                    _38015 = mem[_26964]
                    mem[_27735 + (320 * _28879) + 128] = mem[_26964]
                    mem[_27735 + (320 * _28879) + 160 len ceil32(_38015)] = mem[_26964 + 32 len ceil32(_38015)]
                    if ceil32(_38015) > _38015:
                        mem[_27735 + (320 * _28879) + _38015 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_38015) + _27735 + (320 * _28879) + -mem[64] + 160
                if arg2 > test266151307():
                    revert with 0, 65
                mem[(32 * stor13[address(arg5)].field_0) + 128] = arg2
                mem[64] = (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 160
                if not arg2:
                    idx = 0
                    while idx < arg2:
                        if stor13[address(arg5)].field_0 - 1 > !idx:
                            revert with 0, 17
                        if stor13[address(arg5)].field_0 + idx - 1 >= mem[96]:
                            revert with 0, 50
                        mem[0] = mem[(32 * stor13[address(arg5)].field_0 + idx - 1) + 128]
                        mem[32] = 12
                        _6096 = sha3(mem[(32 * stor13[address(arg5)].field_0 + idx - 1) + 128], 12)
                        _6097 = mem[64]
                        mem[64] = mem[64] + 320
                        mem[_6097] = stor12[mem[(32 * stor13[address(arg5)].field_0 + idx - 1) + 128]].field_0
                        mem[_6097 + 32] = stor1[_6096]
                        mem[_6097 + 64] = stor2[_6096]
                        mem[_6097 + 96] = stor3[_6096]
                        mem[_6097 + 128] = stor4[_6096]
                        mem[_6097 + 160] = stor5[_6096]
                        mem[_6097 + 192] = stor6[_6096]
                        mem[_6097 + 224] = stor7[_6096].field_0
                        mem[_6097 + 256] = bool(stor7[_6096].field_160)
                        mem[_6097 + 288] = stor8[_6096]
                        if idx >= mem[(32 * stor13[address(arg5)].field_0) + 128]:
                            revert with 0, 50
                        mem[(32 * idx) + (32 * stor13[address(arg5)].field_0) + 160] = _6097
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if stor13[address(arg5)].field_0 - 1 > !arg2:
                        revert with 0, 17
                    if stor13[address(arg5)].field_0 - 1 > !arg2:
                        revert with 0, 17
                    if stor13[address(arg5)].field_0 + arg2 - 1 < mem[96]:
                        _6691 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_6691] = 7
                        mem[_6691 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                        _7169 = mem[64]
                        mem[mem[64]] = 96
                        _7625 = mem[(32 * stor13[address(arg5)].field_0) + 128]
                        mem[mem[64] + 96] = mem[(32 * stor13[address(arg5)].field_0) + 128]
                        idx = 0
                        s = (32 * stor13[address(arg5)].field_0) + 160
                        t = mem[64] + 128
                        while idx < _7625:
                            _11540 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_11540 + 32]
                            mem[t + 64] = mem[_11540 + 64]
                            mem[t + 96] = mem[_11540 + 96]
                            mem[t + 128] = mem[_11540 + 128]
                            mem[t + 160] = mem[_11540 + 172 len 20]
                            mem[t + 192] = mem[_11540 + 192]
                            mem[t + 224] = mem[_11540 + 236 len 20]
                            mem[t + 256] = bool(mem[_11540 + 256])
                            mem[t + 288] = mem[_11540 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_7169 + 32] = stor13[address(arg5)].field_0 + arg2 - 1
                        mem[_7169 + 64] = (320 * _7625) + 128
                        _12183 = mem[_6691]
                        mem[_7169 + (320 * _7625) + 128] = mem[_6691]
                        mem[_7169 + (320 * _7625) + 160 len ceil32(_12183)] = mem[_6691 + 32 len ceil32(_12183)]
                        if ceil32(_12183) > _12183:
                            mem[_7169 + (320 * _7625) + _12183 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_12183) + _7169 + (320 * _7625) + -mem[64] + 160
                    _6692 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_6692] = 4
                    mem[_6692 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                    _7170 = mem[64]
                    mem[mem[64]] = 96
                    _7626 = mem[(32 * stor13[address(arg5)].field_0) + 128]
                    mem[mem[64] + 96] = mem[(32 * stor13[address(arg5)].field_0) + 128]
                    idx = 0
                    s = (32 * stor13[address(arg5)].field_0) + 160
                    t = mem[64] + 128
                    while idx < _7626:
                        _11547 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_11547 + 32]
                        mem[t + 64] = mem[_11547 + 64]
                        mem[t + 96] = mem[_11547 + 96]
                        mem[t + 128] = mem[_11547 + 128]
                        mem[t + 160] = mem[_11547 + 172 len 20]
                        mem[t + 192] = mem[_11547 + 192]
                        mem[t + 224] = mem[_11547 + 236 len 20]
                        mem[t + 256] = bool(mem[_11547 + 256])
                        mem[t + 288] = mem[_11547 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_7170 + 32] = stor13[address(arg5)].field_0 + arg2 - 1
                    mem[_7170 + 64] = (320 * _7626) + 128
                    _12184 = mem[_6692]
                    mem[_7170 + (320 * _7626) + 128] = mem[_6692]
                    mem[_7170 + (320 * _7626) + 160 len ceil32(_12184)] = mem[_6692 + 32 len ceil32(_12184)]
                    if ceil32(_12184) > _12184:
                        mem[_7170 + (320 * _7626) + _12184 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_12184) + _7170 + (320 * _7626) + -mem[64] + 160
                mem[64] = (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 480
                mem[(32 * stor13[address(arg5)].field_0) + (32 * arg2) + 160] = 0
                mem[(32 * stor13[address(arg5)].field_0) + (32 * arg2) + 192] = 0
                mem[(32 * stor13[address(arg5)].field_0) + (32 * arg2) + 224] = 0
                mem[(32 * stor13[address(arg5)].field_0) + (32 * arg2) + 256] = 0
                mem[(32 * stor13[address(arg5)].field_0) + (32 * arg2) + 288] = 0
                mem[(32 * stor13[address(arg5)].field_0) + (32 * arg2) + 320] = 0
                mem[(32 * stor13[address(arg5)].field_0) + (32 * arg2) + 352] = 0
                mem[(32 * stor13[address(arg5)].field_0) + (32 * arg2) + 384] = 0
                mem[(32 * stor13[address(arg5)].field_0) + (32 * arg2) + 416] = 0
                mem[(32 * stor13[address(arg5)].field_0) + (32 * arg2) + 448] = 0
                mem[var31001] = (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 160
                s = var31001
                idx = var31002
                while idx - 1:
                    mem[64] = mem[64] + 320
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * arg2) + 160] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * arg2) + 192] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * arg2) + 224] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * arg2) + 256] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * arg2) + 288] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * arg2) + 320] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * arg2) + 352] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * arg2) + 384] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * arg2) + 416] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * arg2) + 448] = 0
                    mem[s + 32] = (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 160
                    s = s + 32
                    idx = idx - 1
                    continue 
                idx = 0
                while idx < arg2:
                    if stor13[address(arg5)].field_0 - 1 > !idx:
                        revert with 0, 17
                    if stor13[address(arg5)].field_0 + idx - 1 >= mem[96]:
                        revert with 0, 50
                    mem[0] = mem[(32 * stor13[address(arg5)].field_0 + idx - 1) + 128]
                    mem[32] = 12
                    _25400 = sha3(mem[(32 * stor13[address(arg5)].field_0 + idx - 1) + 128], 12)
                    _25401 = mem[64]
                    mem[64] = mem[64] + 320
                    mem[_25401] = stor12[mem[(32 * stor13[address(arg5)].field_0 + idx - 1) + 128]].field_0
                    mem[_25401 + 32] = stor1[_25400]
                    mem[_25401 + 64] = stor2[_25400]
                    mem[_25401 + 96] = stor3[_25400]
                    mem[_25401 + 128] = stor4[_25400]
                    mem[_25401 + 160] = stor5[_25400]
                    mem[_25401 + 192] = stor6[_25400]
                    mem[_25401 + 224] = stor7[_25400].field_0
                    mem[_25401 + 256] = bool(stor7[_25400].field_160)
                    mem[_25401 + 288] = stor8[_25400]
                    if idx >= mem[(32 * stor13[address(arg5)].field_0) + 128]:
                        revert with 0, 50
                    mem[(32 * idx) + (32 * stor13[address(arg5)].field_0) + 160] = _25401
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
                if stor13[address(arg5)].field_0 - 1 > !arg2:
                    revert with 0, 17
                if stor13[address(arg5)].field_0 - 1 > !arg2:
                    revert with 0, 17
                if stor13[address(arg5)].field_0 + arg2 - 1 < mem[96]:
                    _26961 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_26961] = 7
                    mem[_26961 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                    _27732 = mem[64]
                    mem[mem[64]] = 96
                    _28876 = mem[(32 * stor13[address(arg5)].field_0) + 128]
                    mem[mem[64] + 96] = mem[(32 * stor13[address(arg5)].field_0) + 128]
                    idx = 0
                    s = (32 * stor13[address(arg5)].field_0) + 160
                    t = mem[64] + 128
                    while idx < _28876:
                        _36117 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_36117 + 32]
                        mem[t + 64] = mem[_36117 + 64]
                        mem[t + 96] = mem[_36117 + 96]
                        mem[t + 128] = mem[_36117 + 128]
                        mem[t + 160] = mem[_36117 + 172 len 20]
                        mem[t + 192] = mem[_36117 + 192]
                        mem[t + 224] = mem[_36117 + 236 len 20]
                        mem[t + 256] = bool(mem[_36117 + 256])
                        mem[t + 288] = mem[_36117 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_27732 + 32] = stor13[address(arg5)].field_0 + arg2 - 1
                    mem[_27732 + 64] = (320 * _28876) + 128
                    _38012 = mem[_26961]
                    mem[_27732 + (320 * _28876) + 128] = mem[_26961]
                    mem[_27732 + (320 * _28876) + 160 len ceil32(_38012)] = mem[_26961 + 32 len ceil32(_38012)]
                    if ceil32(_38012) > _38012:
                        mem[_27732 + (320 * _28876) + _38012 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_38012) + _27732 + (320 * _28876) + -mem[64] + 160
                _26962 = mem[64]
                mem[64] = mem[64] + 64
                mem[_26962] = 4
                mem[_26962 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                _27733 = mem[64]
                mem[mem[64]] = 96
                _28877 = mem[(32 * stor13[address(arg5)].field_0) + 128]
                mem[mem[64] + 96] = mem[(32 * stor13[address(arg5)].field_0) + 128]
                idx = 0
                s = (32 * stor13[address(arg5)].field_0) + 160
                t = mem[64] + 128
                while idx < _28877:
                    _36124 = mem[s]
                    mem[t] = mem[mem[s]]
                    mem[t + 32] = mem[_36124 + 32]
                    mem[t + 64] = mem[_36124 + 64]
                    mem[t + 96] = mem[_36124 + 96]
                    mem[t + 128] = mem[_36124 + 128]
                    mem[t + 160] = mem[_36124 + 172 len 20]
                    mem[t + 192] = mem[_36124 + 192]
                    mem[t + 224] = mem[_36124 + 236 len 20]
                    mem[t + 256] = bool(mem[_36124 + 256])
                    mem[t + 288] = mem[_36124 + 288]
                    idx = idx + 1
                    s = s + 32
                    t = t + 320
                    continue 
                mem[_27733 + 32] = stor13[address(arg5)].field_0 + arg2 - 1
                mem[_27733 + 64] = (320 * _28877) + 128
                _38013 = mem[_26962]
                mem[_27733 + (320 * _28877) + 128] = mem[_26962]
                mem[_27733 + (320 * _28877) + 160 len ceil32(_38013)] = mem[_26962 + 32 len ceil32(_38013)]
                if ceil32(_38013) > _38013:
                    mem[_27733 + (320 * _28877) + _38013 + 160] = 0
                return memory
                  from mem[64]
                   len ceil32(_38013) + _27733 + (320 * _28877) + -mem[64] + 160
            mem[0] = address(arg5)
            mem[32] = 15
            mem[(32 * stor13[address(arg5)].field_0) + 128] = stor15[address(arg5)].field_0
            if not stor15[address(arg5)].field_0:
                if not stor15[address(arg5)].field_0:
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160] = 0
                    mem[64] = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 256
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192] = 4
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 256] = 96
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 352] = 0
                    idx = 0
                    s = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192
                    t = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 384
                    while idx < mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]:
                        _5738 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_5738 + 32]
                        mem[t + 64] = mem[_5738 + 64]
                        mem[t + 96] = mem[_5738 + 96]
                        mem[t + 128] = mem[_5738 + 128]
                        mem[t + 160] = mem[_5738 + 172 len 20]
                        mem[t + 192] = mem[_5738 + 192]
                        mem[t + 224] = mem[_5738 + 236 len 20]
                        mem[t + 256] = bool(mem[_5738 + 256])
                        mem[t + 288] = mem[_5738 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 288] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 320] = 128
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 384] = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 416 len ceil32(mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192])] = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224 len ceil32(mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192])]
                    if ceil32(mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]) > mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]:
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192] + 416] = 0
                    return memory
                      from mem[64]
                       len ceil32(mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + -mem[64] + 416
                if arg1 < stor15[address(arg5)].field_0:
                    if arg3:
                        if arg2 <= arg1:
                            if arg2 > test266151307():
                                revert with 0, 65
                            mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160] = arg2
                            mem[64] = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 192
                            if not arg2:
                                idx = 0
                                while idx < arg2:
                                    if arg1 < idx:
                                        revert with 0, 17
                                    if arg1 - idx >= mem[(32 * stor13[address(arg5)].field_0) + 128]:
                                        revert with 0, 50
                                    mem[0] = mem[(32 * arg1 - idx) + (32 * stor13[address(arg5)].field_0) + 160]
                                    mem[32] = 12
                                    _6107 = sha3(mem[(32 * arg1 - idx) + (32 * stor13[address(arg5)].field_0) + 160], 12)
                                    _6108 = mem[64]
                                    mem[64] = mem[64] + 320
                                    mem[_6108] = stor12[mem[(32 * arg1 - idx) + (32 * stor13[address(arg5)].field_0) + 160]].field_0
                                    mem[_6108 + 32] = stor1[_6107]
                                    mem[_6108 + 64] = stor2[_6107]
                                    mem[_6108 + 96] = stor3[_6107]
                                    mem[_6108 + 128] = stor4[_6107]
                                    mem[_6108 + 160] = stor5[_6107]
                                    mem[_6108 + 192] = stor6[_6107]
                                    mem[_6108 + 224] = stor7[_6107].field_0
                                    mem[_6108 + 256] = bool(stor7[_6107].field_160)
                                    mem[_6108 + 288] = stor8[_6107]
                                    if idx >= mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]:
                                        revert with 0, 50
                                    mem[(32 * idx) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192] = _6108
                                    if idx == -1:
                                        revert with 0, 17
                                    idx = idx + 1
                                    continue 
                                if arg1 < arg2:
                                    _5836 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_5836] = 4
                                    mem[_5836 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                                    _5916 = mem[64]
                                    mem[mem[64]] = 96
                                    _6104 = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                                    mem[mem[64] + 96] = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                                    idx = 0
                                    s = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192
                                    t = mem[64] + 128
                                    while idx < _6104:
                                        _11569 = mem[s]
                                        mem[t] = mem[mem[s]]
                                        mem[t + 32] = mem[_11569 + 32]
                                        mem[t + 64] = mem[_11569 + 64]
                                        mem[t + 96] = mem[_11569 + 96]
                                        mem[t + 128] = mem[_11569 + 128]
                                        mem[t + 160] = mem[_11569 + 172 len 20]
                                        mem[t + 192] = mem[_11569 + 192]
                                        mem[t + 224] = mem[_11569 + 236 len 20]
                                        mem[t + 256] = bool(mem[_11569 + 256])
                                        mem[t + 288] = mem[_11569 + 288]
                                        idx = idx + 1
                                        s = s + 32
                                        t = t + 320
                                        continue 
                                    mem[_5916 + 32] = 0
                                    mem[_5916 + 64] = (320 * _6104) + 128
                                    _12187 = mem[_5836]
                                    mem[_5916 + (320 * _6104) + 128] = mem[_5836]
                                    mem[_5916 + (320 * _6104) + 160 len ceil32(_12187)] = mem[_5836 + 32 len ceil32(_12187)]
                                    if ceil32(_12187) > _12187:
                                        mem[_5916 + (320 * _6104) + _12187 + 160] = 0
                                    return memory
                                      from mem[64]
                                       len ceil32(_12187) + _5916 + (320 * _6104) + -mem[64] + 160
                                _6105 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_6105] = 7
                                mem[_6105 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                                _6462 = mem[64]
                                mem[mem[64]] = 96
                                _6697 = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                                mem[mem[64] + 96] = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                                idx = 0
                                s = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192
                                t = mem[64] + 128
                                while idx < _6697:
                                    _11576 = mem[s]
                                    mem[t] = mem[mem[s]]
                                    mem[t + 32] = mem[_11576 + 32]
                                    mem[t + 64] = mem[_11576 + 64]
                                    mem[t + 96] = mem[_11576 + 96]
                                    mem[t + 128] = mem[_11576 + 128]
                                    mem[t + 160] = mem[_11576 + 172 len 20]
                                    mem[t + 192] = mem[_11576 + 192]
                                    mem[t + 224] = mem[_11576 + 236 len 20]
                                    mem[t + 256] = bool(mem[_11576 + 256])
                                    mem[t + 288] = mem[_11576 + 288]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 320
                                    continue 
                                mem[_6462 + 32] = arg1 - arg2
                                mem[_6462 + 64] = (320 * _6697) + 128
                                _12188 = mem[_6105]
                                mem[_6462 + (320 * _6697) + 128] = mem[_6105]
                                mem[_6462 + (320 * _6697) + 160 len ceil32(_12188)] = mem[_6105 + 32 len ceil32(_12188)]
                                if ceil32(_12188) > _12188:
                                    mem[_6462 + (320 * _6697) + _12188 + 160] = 0
                                return memory
                                  from mem[64]
                                   len ceil32(_12188) + _6462 + (320 * _6697) + -mem[64] + 160
                            mem[64] = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 512
                            mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 192] = 0
                            mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224] = 0
                            mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 256] = 0
                            mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 288] = 0
                            mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 320] = 0
                            mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 352] = 0
                            mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 384] = 0
                            mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 416] = 0
                            mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 448] = 0
                            mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 480] = 0
                            mem[var26001] = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 192
                            s = var26001
                            idx = var26002
                            while idx - 1:
                                mem[64] = mem[64] + 320
                                mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 192] = 0
                                mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224] = 0
                                mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 256] = 0
                                mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 288] = 0
                                mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 320] = 0
                                mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 352] = 0
                                mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 384] = 0
                                mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 416] = 0
                                mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 448] = 0
                                mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 480] = 0
                                mem[s + 32] = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 192
                                s = s + 32
                                idx = idx - 1
                                continue 
                            idx = 0
                            while idx < arg2:
                                if arg1 < idx:
                                    revert with 0, 17
                                if arg1 - idx >= mem[(32 * stor13[address(arg5)].field_0) + 128]:
                                    revert with 0, 50
                                mem[0] = mem[(32 * arg1 - idx) + (32 * stor13[address(arg5)].field_0) + 160]
                                mem[32] = 12
                                _25414 = sha3(mem[(32 * arg1 - idx) + (32 * stor13[address(arg5)].field_0) + 160], 12)
                                _25415 = mem[64]
                                mem[64] = mem[64] + 320
                                mem[_25415] = stor12[mem[(32 * arg1 - idx) + (32 * stor13[address(arg5)].field_0) + 160]].field_0
                                mem[_25415 + 32] = stor1[_25414]
                                mem[_25415 + 64] = stor2[_25414]
                                mem[_25415 + 96] = stor3[_25414]
                                mem[_25415 + 128] = stor4[_25414]
                                mem[_25415 + 160] = stor5[_25414]
                                mem[_25415 + 192] = stor6[_25414]
                                mem[_25415 + 224] = stor7[_25414].field_0
                                mem[_25415 + 256] = bool(stor7[_25414].field_160)
                                mem[_25415 + 288] = stor8[_25414]
                                if idx >= mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]:
                                    revert with 0, 50
                                mem[(32 * idx) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192] = _25415
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                continue 
                            if arg1 < arg2:
                                _24721 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_24721] = 4
                                mem[_24721 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                                _24919 = mem[64]
                                mem[mem[64]] = 96
                                _25411 = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                                mem[mem[64] + 96] = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                                idx = 0
                                s = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192
                                t = mem[64] + 128
                                while idx < _25411:
                                    _36145 = mem[s]
                                    mem[t] = mem[mem[s]]
                                    mem[t + 32] = mem[_36145 + 32]
                                    mem[t + 64] = mem[_36145 + 64]
                                    mem[t + 96] = mem[_36145 + 96]
                                    mem[t + 128] = mem[_36145 + 128]
                                    mem[t + 160] = mem[_36145 + 172 len 20]
                                    mem[t + 192] = mem[_36145 + 192]
                                    mem[t + 224] = mem[_36145 + 236 len 20]
                                    mem[t + 256] = bool(mem[_36145 + 256])
                                    mem[t + 288] = mem[_36145 + 288]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 320
                                    continue 
                                mem[_24919 + 32] = 0
                                mem[_24919 + 64] = (320 * _25411) + 128
                                _38016 = mem[_24721]
                                mem[_24919 + (320 * _25411) + 128] = mem[_24721]
                                mem[_24919 + (320 * _25411) + 160 len ceil32(_38016)] = mem[_24721 + 32 len ceil32(_38016)]
                                if ceil32(_38016) > _38016:
                                    mem[_24919 + (320 * _25411) + _38016 + 160] = 0
                                return memory
                                  from mem[64]
                                   len ceil32(_38016) + _24919 + (320 * _25411) + -mem[64] + 160
                            _25412 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_25412] = 7
                            mem[_25412 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                            _26329 = mem[64]
                            mem[mem[64]] = 96
                            _26966 = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                            mem[mem[64] + 96] = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                            idx = 0
                            s = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192
                            t = mem[64] + 128
                            while idx < _26966:
                                _36152 = mem[s]
                                mem[t] = mem[mem[s]]
                                mem[t + 32] = mem[_36152 + 32]
                                mem[t + 64] = mem[_36152 + 64]
                                mem[t + 96] = mem[_36152 + 96]
                                mem[t + 128] = mem[_36152 + 128]
                                mem[t + 160] = mem[_36152 + 172 len 20]
                                mem[t + 192] = mem[_36152 + 192]
                                mem[t + 224] = mem[_36152 + 236 len 20]
                                mem[t + 256] = bool(mem[_36152 + 256])
                                mem[t + 288] = mem[_36152 + 288]
                                idx = idx + 1
                                s = s + 32
                                t = t + 320
                                continue 
                            mem[_26329 + 32] = arg1 - arg2
                            mem[_26329 + 64] = (320 * _26966) + 128
                            _38017 = mem[_25412]
                            mem[_26329 + (320 * _26966) + 128] = mem[_25412]
                            mem[_26329 + (320 * _26966) + 160 len ceil32(_38017)] = mem[_25412 + 32 len ceil32(_38017)]
                            if ceil32(_38017) > _38017:
                                mem[_26329 + (320 * _26966) + _38017 + 160] = 0
                            return memory
                              from mem[64]
                               len ceil32(_38017) + _26329 + (320 * _26966) + -mem[64] + 160
                        if 1 > !arg1:
                            revert with 0, 17
                        if arg1 + 1 > test266151307():
                            revert with 0, 65
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160] = arg1 + 1
                        mem[64] = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 192
                        if not arg1 + 1:
                            idx = 0
                            while idx < arg1 + 1:
                                if arg1 < idx:
                                    revert with 0, 17
                                if arg1 - idx >= mem[(32 * stor13[address(arg5)].field_0) + 128]:
                                    revert with 0, 50
                                mem[0] = mem[(32 * arg1 - idx) + (32 * stor13[address(arg5)].field_0) + 160]
                                mem[32] = 12
                                _6113 = sha3(mem[(32 * arg1 - idx) + (32 * stor13[address(arg5)].field_0) + 160], 12)
                                _6114 = mem[64]
                                mem[64] = mem[64] + 320
                                mem[_6114] = stor12[mem[(32 * arg1 - idx) + (32 * stor13[address(arg5)].field_0) + 160]].field_0
                                mem[_6114 + 32] = stor1[_6113]
                                mem[_6114 + 64] = stor2[_6113]
                                mem[_6114 + 96] = stor3[_6113]
                                mem[_6114 + 128] = stor4[_6113]
                                mem[_6114 + 160] = stor5[_6113]
                                mem[_6114 + 192] = stor6[_6113]
                                mem[_6114 + 224] = stor7[_6113].field_0
                                mem[_6114 + 256] = bool(stor7[_6113].field_160)
                                mem[_6114 + 288] = stor8[_6113]
                                if idx >= mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]:
                                    revert with 0, 50
                                mem[(32 * idx) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192] = _6114
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                continue 
                            if arg1 < arg1 + 1:
                                _5837 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_5837] = 4
                                mem[_5837 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                                _5918 = mem[64]
                                mem[mem[64]] = 96
                                _6110 = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                                mem[mem[64] + 96] = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                                idx = 0
                                s = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192
                                t = mem[64] + 128
                                while idx < _6110:
                                    _11583 = mem[s]
                                    mem[t] = mem[mem[s]]
                                    mem[t + 32] = mem[_11583 + 32]
                                    mem[t + 64] = mem[_11583 + 64]
                                    mem[t + 96] = mem[_11583 + 96]
                                    mem[t + 128] = mem[_11583 + 128]
                                    mem[t + 160] = mem[_11583 + 172 len 20]
                                    mem[t + 192] = mem[_11583 + 192]
                                    mem[t + 224] = mem[_11583 + 236 len 20]
                                    mem[t + 256] = bool(mem[_11583 + 256])
                                    mem[t + 288] = mem[_11583 + 288]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 320
                                    continue 
                                mem[_5918 + 32] = 0
                                mem[_5918 + 64] = (320 * _6110) + 128
                                _12189 = mem[_5837]
                                mem[_5918 + (320 * _6110) + 128] = mem[_5837]
                                mem[_5918 + (320 * _6110) + 160 len ceil32(_12189)] = mem[_5837 + 32 len ceil32(_12189)]
                                if ceil32(_12189) > _12189:
                                    mem[_5918 + (320 * _6110) + _12189 + 160] = 0
                                return memory
                                  from mem[64]
                                   len ceil32(_12189) + _5918 + (320 * _6110) + -mem[64] + 160
                            _6111 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_6111] = 7
                            mem[_6111 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                            _6471 = mem[64]
                            mem[mem[64]] = 96
                            _6699 = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                            mem[mem[64] + 96] = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                            idx = 0
                            s = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192
                            t = mem[64] + 128
                            while idx < _6699:
                                _11590 = mem[s]
                                mem[t] = mem[mem[s]]
                                mem[t + 32] = mem[_11590 + 32]
                                mem[t + 64] = mem[_11590 + 64]
                                mem[t + 96] = mem[_11590 + 96]
                                mem[t + 128] = mem[_11590 + 128]
                                mem[t + 160] = mem[_11590 + 172 len 20]
                                mem[t + 192] = mem[_11590 + 192]
                                mem[t + 224] = mem[_11590 + 236 len 20]
                                mem[t + 256] = bool(mem[_11590 + 256])
                                mem[t + 288] = mem[_11590 + 288]
                                idx = idx + 1
                                s = s + 32
                                t = t + 320
                                continue 
                            mem[_6471 + 32] = -1
                            mem[_6471 + 64] = (320 * _6699) + 128
                            _12190 = mem[_6111]
                            mem[_6471 + (320 * _6699) + 128] = mem[_6111]
                            mem[_6471 + (320 * _6699) + 160 len ceil32(_12190)] = mem[_6111 + 32 len ceil32(_12190)]
                            if ceil32(_12190) > _12190:
                                mem[_6471 + (320 * _6699) + _12190 + 160] = 0
                            return memory
                              from mem[64]
                               len ceil32(_12190) + _6471 + (320 * _6699) + -mem[64] + 160
                        mem[64] = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 512
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 192] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 224] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 256] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 288] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 320] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 352] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 384] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 416] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 448] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 480] = 0
                        mem[var30001] = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 192
                        s = var30001
                        idx = var30002
                        while idx - 1:
                            mem[64] = mem[64] + 320
                            mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 192] = 0
                            mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 224] = 0
                            mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 256] = 0
                            mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 288] = 0
                            mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 320] = 0
                            mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 352] = 0
                            mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 384] = 0
                            mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 416] = 0
                            mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 448] = 0
                            mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 480] = 0
                            mem[s + 32] = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 192
                            s = s + 32
                            idx = idx - 1
                            continue 
                        idx = 0
                        while idx < arg1 + 1:
                            if arg1 < idx:
                                revert with 0, 17
                            if arg1 - idx >= mem[(32 * stor13[address(arg5)].field_0) + 128]:
                                revert with 0, 50
                            mem[0] = mem[(32 * arg1 - idx) + (32 * stor13[address(arg5)].field_0) + 160]
                            mem[32] = 12
                            _25422 = sha3(mem[(32 * arg1 - idx) + (32 * stor13[address(arg5)].field_0) + 160], 12)
                            _25423 = mem[64]
                            mem[64] = mem[64] + 320
                            mem[_25423] = stor12[mem[(32 * arg1 - idx) + (32 * stor13[address(arg5)].field_0) + 160]].field_0
                            mem[_25423 + 32] = stor1[_25422]
                            mem[_25423 + 64] = stor2[_25422]
                            mem[_25423 + 96] = stor3[_25422]
                            mem[_25423 + 128] = stor4[_25422]
                            mem[_25423 + 160] = stor5[_25422]
                            mem[_25423 + 192] = stor6[_25422]
                            mem[_25423 + 224] = stor7[_25422].field_0
                            mem[_25423 + 256] = bool(stor7[_25422].field_160)
                            mem[_25423 + 288] = stor8[_25422]
                            if idx >= mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]:
                                revert with 0, 50
                            mem[(32 * idx) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192] = _25423
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            continue 
                        if arg1 < arg1 + 1:
                            _24722 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_24722] = 4
                            mem[_24722 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                            _24923 = mem[64]
                            mem[mem[64]] = 96
                            _25419 = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                            mem[mem[64] + 96] = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                            idx = 0
                            s = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192
                            t = mem[64] + 128
                            while idx < _25419:
                                _36159 = mem[s]
                                mem[t] = mem[mem[s]]
                                mem[t + 32] = mem[_36159 + 32]
                                mem[t + 64] = mem[_36159 + 64]
                                mem[t + 96] = mem[_36159 + 96]
                                mem[t + 128] = mem[_36159 + 128]
                                mem[t + 160] = mem[_36159 + 172 len 20]
                                mem[t + 192] = mem[_36159 + 192]
                                mem[t + 224] = mem[_36159 + 236 len 20]
                                mem[t + 256] = bool(mem[_36159 + 256])
                                mem[t + 288] = mem[_36159 + 288]
                                idx = idx + 1
                                s = s + 32
                                t = t + 320
                                continue 
                            mem[_24923 + 32] = 0
                            mem[_24923 + 64] = (320 * _25419) + 128
                            _38018 = mem[_24722]
                            mem[_24923 + (320 * _25419) + 128] = mem[_24722]
                            mem[_24923 + (320 * _25419) + 160 len ceil32(_38018)] = mem[_24722 + 32 len ceil32(_38018)]
                            if ceil32(_38018) > _38018:
                                mem[_24923 + (320 * _25419) + _38018 + 160] = 0
                            return memory
                              from mem[64]
                               len ceil32(_38018) + _24923 + (320 * _25419) + -mem[64] + 160
                        _25420 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_25420] = 7
                        mem[_25420 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                        _26337 = mem[64]
                        mem[mem[64]] = 96
                        _26968 = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                        mem[mem[64] + 96] = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                        idx = 0
                        s = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192
                        t = mem[64] + 128
                        while idx < _26968:
                            _36166 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_36166 + 32]
                            mem[t + 64] = mem[_36166 + 64]
                            mem[t + 96] = mem[_36166 + 96]
                            mem[t + 128] = mem[_36166 + 128]
                            mem[t + 160] = mem[_36166 + 172 len 20]
                            mem[t + 192] = mem[_36166 + 192]
                            mem[t + 224] = mem[_36166 + 236 len 20]
                            mem[t + 256] = bool(mem[_36166 + 256])
                            mem[t + 288] = mem[_36166 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_26337 + 32] = -1
                        mem[_26337 + 64] = (320 * _26968) + 128
                        _38019 = mem[_25420]
                        mem[_26337 + (320 * _26968) + 128] = mem[_25420]
                        mem[_26337 + (320 * _26968) + 160 len ceil32(_38019)] = mem[_25420 + 32 len ceil32(_38019)]
                        if ceil32(_38019) > _38019:
                            mem[_26337 + (320 * _26968) + _38019 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_38019) + _26337 + (320 * _26968) + -mem[64] + 160
                    if stor15[address(arg5)].field_0 < arg1:
                        revert with 0, 17
                    if arg2 <= stor15[address(arg5)].field_0 - arg1:
                        if arg2 > test266151307():
                            revert with 0, 65
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160] = arg2
                        mem[64] = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 192
                        if not arg2:
                            idx = 0
                            while idx < arg2:
                                if arg1 > !idx:
                                    revert with 0, 17
                                if arg1 + idx >= mem[(32 * stor13[address(arg5)].field_0) + 128]:
                                    revert with 0, 50
                                mem[0] = mem[(32 * arg1 + idx) + (32 * stor13[address(arg5)].field_0) + 160]
                                mem[32] = 12
                                _6117 = sha3(mem[(32 * arg1 + idx) + (32 * stor13[address(arg5)].field_0) + 160], 12)
                                _6118 = mem[64]
                                mem[64] = mem[64] + 320
                                mem[_6118] = stor12[mem[(32 * arg1 + idx) + (32 * stor13[address(arg5)].field_0) + 160]].field_0
                                mem[_6118 + 32] = stor1[_6117]
                                mem[_6118 + 64] = stor2[_6117]
                                mem[_6118 + 96] = stor3[_6117]
                                mem[_6118 + 128] = stor4[_6117]
                                mem[_6118 + 160] = stor5[_6117]
                                mem[_6118 + 192] = stor6[_6117]
                                mem[_6118 + 224] = stor7[_6117].field_0
                                mem[_6118 + 256] = bool(stor7[_6117].field_160)
                                mem[_6118 + 288] = stor8[_6117]
                                if idx >= mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]:
                                    revert with 0, 50
                                mem[(32 * idx) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192] = _6118
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                continue 
                            if arg1 > !arg2:
                                revert with 0, 17
                            if arg1 > !arg2:
                                revert with 0, 17
                            if arg1 + arg2 < mem[(32 * stor13[address(arg5)].field_0) + 128]:
                                _6700 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_6700] = 7
                                mem[_6700 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                                _7209 = mem[64]
                                mem[mem[64]] = 96
                                _7633 = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                                mem[mem[64] + 96] = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                                idx = 0
                                s = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192
                                t = mem[64] + 128
                                while idx < _7633:
                                    _11597 = mem[s]
                                    mem[t] = mem[mem[s]]
                                    mem[t + 32] = mem[_11597 + 32]
                                    mem[t + 64] = mem[_11597 + 64]
                                    mem[t + 96] = mem[_11597 + 96]
                                    mem[t + 128] = mem[_11597 + 128]
                                    mem[t + 160] = mem[_11597 + 172 len 20]
                                    mem[t + 192] = mem[_11597 + 192]
                                    mem[t + 224] = mem[_11597 + 236 len 20]
                                    mem[t + 256] = bool(mem[_11597 + 256])
                                    mem[t + 288] = mem[_11597 + 288]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 320
                                    continue 
                                mem[_7209 + 32] = arg1 + arg2
                                mem[_7209 + 64] = (320 * _7633) + 128
                                _12191 = mem[_6700]
                                mem[_7209 + (320 * _7633) + 128] = mem[_6700]
                                mem[_7209 + (320 * _7633) + 160 len ceil32(_12191)] = mem[_6700 + 32 len ceil32(_12191)]
                                if ceil32(_12191) > _12191:
                                    mem[_7209 + (320 * _7633) + _12191 + 160] = 0
                                return memory
                                  from mem[64]
                                   len ceil32(_12191) + _7209 + (320 * _7633) + -mem[64] + 160
                            _6701 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_6701] = 4
                            mem[_6701 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                            _7210 = mem[64]
                            mem[mem[64]] = 96
                            _7634 = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                            mem[mem[64] + 96] = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                            idx = 0
                            s = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192
                            t = mem[64] + 128
                            while idx < _7634:
                                _11604 = mem[s]
                                mem[t] = mem[mem[s]]
                                mem[t + 32] = mem[_11604 + 32]
                                mem[t + 64] = mem[_11604 + 64]
                                mem[t + 96] = mem[_11604 + 96]
                                mem[t + 128] = mem[_11604 + 128]
                                mem[t + 160] = mem[_11604 + 172 len 20]
                                mem[t + 192] = mem[_11604 + 192]
                                mem[t + 224] = mem[_11604 + 236 len 20]
                                mem[t + 256] = bool(mem[_11604 + 256])
                                mem[t + 288] = mem[_11604 + 288]
                                idx = idx + 1
                                s = s + 32
                                t = t + 320
                                continue 
                            mem[_7210 + 32] = arg1 + arg2
                            mem[_7210 + 64] = (320 * _7634) + 128
                            _12192 = mem[_6701]
                            mem[_7210 + (320 * _7634) + 128] = mem[_6701]
                            mem[_7210 + (320 * _7634) + 160 len ceil32(_12192)] = mem[_6701 + 32 len ceil32(_12192)]
                            if ceil32(_12192) > _12192:
                                mem[_7210 + (320 * _7634) + _12192 + 160] = 0
                            return memory
                              from mem[64]
                               len ceil32(_12192) + _7210 + (320 * _7634) + -mem[64] + 160
                        mem[64] = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 512
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 192] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 256] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 288] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 320] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 352] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 384] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 416] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 448] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 480] = 0
                        mem[var29001] = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 192
                        s = var29001
                        idx = var29002
                        while idx - 1:
                            mem[64] = mem[64] + 320
                            mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 192] = 0
                            mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224] = 0
                            mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 256] = 0
                            mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 288] = 0
                            mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 320] = 0
                            mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 352] = 0
                            mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 384] = 0
                            mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 416] = 0
                            mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 448] = 0
                            mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 480] = 0
                            mem[s + 32] = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 192
                            s = s + 32
                            idx = idx - 1
                            continue 
                        idx = 0
                        while idx < arg2:
                            if arg1 > !idx:
                                revert with 0, 17
                            if arg1 + idx >= mem[(32 * stor13[address(arg5)].field_0) + 128]:
                                revert with 0, 50
                            mem[0] = mem[(32 * arg1 + idx) + (32 * stor13[address(arg5)].field_0) + 160]
                            mem[32] = 12
                            _25428 = sha3(mem[(32 * arg1 + idx) + (32 * stor13[address(arg5)].field_0) + 160], 12)
                            _25429 = mem[64]
                            mem[64] = mem[64] + 320
                            mem[_25429] = stor12[mem[(32 * arg1 + idx) + (32 * stor13[address(arg5)].field_0) + 160]].field_0
                            mem[_25429 + 32] = stor1[_25428]
                            mem[_25429 + 64] = stor2[_25428]
                            mem[_25429 + 96] = stor3[_25428]
                            mem[_25429 + 128] = stor4[_25428]
                            mem[_25429 + 160] = stor5[_25428]
                            mem[_25429 + 192] = stor6[_25428]
                            mem[_25429 + 224] = stor7[_25428].field_0
                            mem[_25429 + 256] = bool(stor7[_25428].field_160)
                            mem[_25429 + 288] = stor8[_25428]
                            if idx >= mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]:
                                revert with 0, 50
                            mem[(32 * idx) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192] = _25429
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            continue 
                        if arg1 > !arg2:
                            revert with 0, 17
                        if arg1 > !arg2:
                            revert with 0, 17
                        if arg1 + arg2 < mem[(32 * stor13[address(arg5)].field_0) + 128]:
                            _26969 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_26969] = 7
                            mem[_26969 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                            _27752 = mem[64]
                            mem[mem[64]] = 96
                            _28884 = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                            mem[mem[64] + 96] = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                            idx = 0
                            s = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192
                            t = mem[64] + 128
                            while idx < _28884:
                                _36173 = mem[s]
                                mem[t] = mem[mem[s]]
                                mem[t + 32] = mem[_36173 + 32]
                                mem[t + 64] = mem[_36173 + 64]
                                mem[t + 96] = mem[_36173 + 96]
                                mem[t + 128] = mem[_36173 + 128]
                                mem[t + 160] = mem[_36173 + 172 len 20]
                                mem[t + 192] = mem[_36173 + 192]
                                mem[t + 224] = mem[_36173 + 236 len 20]
                                mem[t + 256] = bool(mem[_36173 + 256])
                                mem[t + 288] = mem[_36173 + 288]
                                idx = idx + 1
                                s = s + 32
                                t = t + 320
                                continue 
                            mem[_27752 + 32] = arg1 + arg2
                            mem[_27752 + 64] = (320 * _28884) + 128
                            _38020 = mem[_26969]
                            mem[_27752 + (320 * _28884) + 128] = mem[_26969]
                            mem[_27752 + (320 * _28884) + 160 len ceil32(_38020)] = mem[_26969 + 32 len ceil32(_38020)]
                            if ceil32(_38020) > _38020:
                                mem[_27752 + (320 * _28884) + _38020 + 160] = 0
                            return memory
                              from mem[64]
                               len ceil32(_38020) + _27752 + (320 * _28884) + -mem[64] + 160
                        _26970 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_26970] = 4
                        mem[_26970 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                        _27753 = mem[64]
                        mem[mem[64]] = 96
                        _28885 = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                        mem[mem[64] + 96] = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                        idx = 0
                        s = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192
                        t = mem[64] + 128
                        while idx < _28885:
                            _36180 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_36180 + 32]
                            mem[t + 64] = mem[_36180 + 64]
                            mem[t + 96] = mem[_36180 + 96]
                            mem[t + 128] = mem[_36180 + 128]
                            mem[t + 160] = mem[_36180 + 172 len 20]
                            mem[t + 192] = mem[_36180 + 192]
                            mem[t + 224] = mem[_36180 + 236 len 20]
                            mem[t + 256] = bool(mem[_36180 + 256])
                            mem[t + 288] = mem[_36180 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_27753 + 32] = arg1 + arg2
                        mem[_27753 + 64] = (320 * _28885) + 128
                        _38021 = mem[_26970]
                        mem[_27753 + (320 * _28885) + 128] = mem[_26970]
                        mem[_27753 + (320 * _28885) + 160 len ceil32(_38021)] = mem[_26970 + 32 len ceil32(_38021)]
                        if ceil32(_38021) > _38021:
                            mem[_27753 + (320 * _28885) + _38021 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_38021) + _27753 + (320 * _28885) + -mem[64] + 160
                    if stor15[address(arg5)].field_0 < arg1:
                        revert with 0, 17
                    if stor15[address(arg5)].field_0 - arg1 > test266151307():
                        revert with 0, 65
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160] = stor15[address(arg5)].field_0 - arg1
                    mem[64] = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 192
                    if not stor15[address(arg5)].field_0 - arg1:
                        idx = 0
                        while idx < stor15[address(arg5)].field_0 - arg1:
                            if arg1 > !idx:
                                revert with 0, 17
                            if arg1 + idx >= mem[(32 * stor13[address(arg5)].field_0) + 128]:
                                revert with 0, 50
                            mem[0] = mem[(32 * arg1 + idx) + (32 * stor13[address(arg5)].field_0) + 160]
                            mem[32] = 12
                            _6121 = sha3(mem[(32 * arg1 + idx) + (32 * stor13[address(arg5)].field_0) + 160], 12)
                            _6122 = mem[64]
                            mem[64] = mem[64] + 320
                            mem[_6122] = stor12[mem[(32 * arg1 + idx) + (32 * stor13[address(arg5)].field_0) + 160]].field_0
                            mem[_6122 + 32] = stor1[_6121]
                            mem[_6122 + 64] = stor2[_6121]
                            mem[_6122 + 96] = stor3[_6121]
                            mem[_6122 + 128] = stor4[_6121]
                            mem[_6122 + 160] = stor5[_6121]
                            mem[_6122 + 192] = stor6[_6121]
                            mem[_6122 + 224] = stor7[_6121].field_0
                            mem[_6122 + 256] = bool(stor7[_6121].field_160)
                            mem[_6122 + 288] = stor8[_6121]
                            if idx >= mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]:
                                revert with 0, 50
                            mem[(32 * idx) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192] = _6122
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            continue 
                        if arg1 > !(stor15[address(arg5)].field_0 - arg1):
                            revert with 0, 17
                        if arg1 > !(stor15[address(arg5)].field_0 - arg1):
                            revert with 0, 17
                        if stor15[address(arg5)].field_0 < mem[(32 * stor13[address(arg5)].field_0) + 128]:
                            _6702 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_6702] = 7
                            mem[_6702 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                            _7215 = mem[64]
                            mem[mem[64]] = 96
                            _7635 = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                            mem[mem[64] + 96] = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                            idx = 0
                            s = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192
                            t = mem[64] + 128
                            while idx < _7635:
                                _11611 = mem[s]
                                mem[t] = mem[mem[s]]
                                mem[t + 32] = mem[_11611 + 32]
                                mem[t + 64] = mem[_11611 + 64]
                                mem[t + 96] = mem[_11611 + 96]
                                mem[t + 128] = mem[_11611 + 128]
                                mem[t + 160] = mem[_11611 + 172 len 20]
                                mem[t + 192] = mem[_11611 + 192]
                                mem[t + 224] = mem[_11611 + 236 len 20]
                                mem[t + 256] = bool(mem[_11611 + 256])
                                mem[t + 288] = mem[_11611 + 288]
                                idx = idx + 1
                                s = s + 32
                                t = t + 320
                                continue 
                            mem[_7215 + 32] = stor15[address(arg5)].field_0
                            mem[_7215 + 64] = (320 * _7635) + 128
                            _12193 = mem[_6702]
                            mem[_7215 + (320 * _7635) + 128] = mem[_6702]
                            mem[_7215 + (320 * _7635) + 160 len ceil32(_12193)] = mem[_6702 + 32 len ceil32(_12193)]
                            if ceil32(_12193) > _12193:
                                mem[_7215 + (320 * _7635) + _12193 + 160] = 0
                            return memory
                              from mem[64]
                               len ceil32(_12193) + _7215 + (320 * _7635) + -mem[64] + 160
                        _6703 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_6703] = 4
                        mem[_6703 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                        _7216 = mem[64]
                        mem[mem[64]] = 96
                        _7636 = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                        mem[mem[64] + 96] = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                        idx = 0
                        s = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192
                        t = mem[64] + 128
                        while idx < _7636:
                            _11618 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_11618 + 32]
                            mem[t + 64] = mem[_11618 + 64]
                            mem[t + 96] = mem[_11618 + 96]
                            mem[t + 128] = mem[_11618 + 128]
                            mem[t + 160] = mem[_11618 + 172 len 20]
                            mem[t + 192] = mem[_11618 + 192]
                            mem[t + 224] = mem[_11618 + 236 len 20]
                            mem[t + 256] = bool(mem[_11618 + 256])
                            mem[t + 288] = mem[_11618 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_7216 + 32] = stor15[address(arg5)].field_0
                        mem[_7216 + 64] = (320 * _7636) + 128
                        _12194 = mem[_6703]
                        mem[_7216 + (320 * _7636) + 128] = mem[_6703]
                        mem[_7216 + (320 * _7636) + 160 len ceil32(_12194)] = mem[_6703 + 32 len ceil32(_12194)]
                        if ceil32(_12194) > _12194:
                            mem[_7216 + (320 * _7636) + _12194 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_12194) + _7216 + (320 * _7636) + -mem[64] + 160
                    mem[64] = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 512
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 192] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 224] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 256] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 288] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 320] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 352] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 384] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 416] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 448] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 480] = 0
                    mem[var33001] = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 192
                    s = var33001
                    idx = var33002
                    while idx - 1:
                        mem[64] = mem[64] + 320
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 192] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 224] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 256] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 288] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 320] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 352] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 384] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 416] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 448] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 480] = 0
                        mem[s + 32] = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 192
                        s = s + 32
                        idx = idx - 1
                        continue 
                    idx = 0
                    while idx < stor15[address(arg5)].field_0 - arg1:
                        if arg1 > !idx:
                            revert with 0, 17
                        if arg1 + idx >= mem[(32 * stor13[address(arg5)].field_0) + 128]:
                            revert with 0, 50
                        mem[0] = mem[(32 * arg1 + idx) + (32 * stor13[address(arg5)].field_0) + 160]
                        mem[32] = 12
                        _25434 = sha3(mem[(32 * arg1 + idx) + (32 * stor13[address(arg5)].field_0) + 160], 12)
                        _25435 = mem[64]
                        mem[64] = mem[64] + 320
                        mem[_25435] = stor12[mem[(32 * arg1 + idx) + (32 * stor13[address(arg5)].field_0) + 160]].field_0
                        mem[_25435 + 32] = stor1[_25434]
                        mem[_25435 + 64] = stor2[_25434]
                        mem[_25435 + 96] = stor3[_25434]
                        mem[_25435 + 128] = stor4[_25434]
                        mem[_25435 + 160] = stor5[_25434]
                        mem[_25435 + 192] = stor6[_25434]
                        mem[_25435 + 224] = stor7[_25434].field_0
                        mem[_25435 + 256] = bool(stor7[_25434].field_160)
                        mem[_25435 + 288] = stor8[_25434]
                        if idx >= mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]:
                            revert with 0, 50
                        mem[(32 * idx) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192] = _25435
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if arg1 > !(stor15[address(arg5)].field_0 - arg1):
                        revert with 0, 17
                    if arg1 > !(stor15[address(arg5)].field_0 - arg1):
                        revert with 0, 17
                    if stor15[address(arg5)].field_0 < mem[(32 * stor13[address(arg5)].field_0) + 128]:
                        _26971 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_26971] = 7
                        mem[_26971 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                        _27754 = mem[64]
                        mem[mem[64]] = 96
                        _28886 = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                        mem[mem[64] + 96] = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                        idx = 0
                        s = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192
                        t = mem[64] + 128
                        while idx < _28886:
                            _36187 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_36187 + 32]
                            mem[t + 64] = mem[_36187 + 64]
                            mem[t + 96] = mem[_36187 + 96]
                            mem[t + 128] = mem[_36187 + 128]
                            mem[t + 160] = mem[_36187 + 172 len 20]
                            mem[t + 192] = mem[_36187 + 192]
                            mem[t + 224] = mem[_36187 + 236 len 20]
                            mem[t + 256] = bool(mem[_36187 + 256])
                            mem[t + 288] = mem[_36187 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_27754 + 32] = stor15[address(arg5)].field_0
                        mem[_27754 + 64] = (320 * _28886) + 128
                        _38022 = mem[_26971]
                        mem[_27754 + (320 * _28886) + 128] = mem[_26971]
                        mem[_27754 + (320 * _28886) + 160 len ceil32(_38022)] = mem[_26971 + 32 len ceil32(_38022)]
                        if ceil32(_38022) > _38022:
                            mem[_27754 + (320 * _28886) + _38022 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_38022) + _27754 + (320 * _28886) + -mem[64] + 160
                    _26972 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_26972] = 4
                    mem[_26972 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                    _27755 = mem[64]
                    mem[mem[64]] = 96
                    _28887 = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                    mem[mem[64] + 96] = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                    idx = 0
                    s = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192
                    t = mem[64] + 128
                    while idx < _28887:
                        _36194 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_36194 + 32]
                        mem[t + 64] = mem[_36194 + 64]
                        mem[t + 96] = mem[_36194 + 96]
                        mem[t + 128] = mem[_36194 + 128]
                        mem[t + 160] = mem[_36194 + 172 len 20]
                        mem[t + 192] = mem[_36194 + 192]
                        mem[t + 224] = mem[_36194 + 236 len 20]
                        mem[t + 256] = bool(mem[_36194 + 256])
                        mem[t + 288] = mem[_36194 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_27755 + 32] = stor15[address(arg5)].field_0
                    mem[_27755 + 64] = (320 * _28887) + 128
                    _38023 = mem[_26972]
                    mem[_27755 + (320 * _28887) + 128] = mem[_26972]
                    mem[_27755 + (320 * _28887) + 160 len ceil32(_38023)] = mem[_26972 + 32 len ceil32(_38023)]
                    if ceil32(_38023) > _38023:
                        mem[_27755 + (320 * _28887) + _38023 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_38023) + _27755 + (320 * _28887) + -mem[64] + 160
                if stor15[address(arg5)].field_0 < 1:
                    revert with 0, 17
                if arg3:
                    if arg2 <= stor15[address(arg5)].field_0 - 1:
                        if arg2 > test266151307():
                            revert with 0, 65
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160] = arg2
                        mem[64] = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 192
                        if not arg2:
                            idx = 0
                            while idx < arg2:
                                if stor15[address(arg5)].field_0 - 1 < idx:
                                    revert with 0, 17
                                if stor15[address(arg5)].field_0 + -idx - 1 >= mem[(32 * stor13[address(arg5)].field_0) + 128]:
                                    revert with 0, 50
                                mem[0] = mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor13[address(arg5)].field_0) + 160]
                                mem[32] = 12
                                _6127 = sha3(mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor13[address(arg5)].field_0) + 160], 12)
                                _6128 = mem[64]
                                mem[64] = mem[64] + 320
                                mem[_6128] = stor12[mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor13[address(arg5)].field_0) + 160]].field_0
                                mem[_6128 + 32] = stor1[_6127]
                                mem[_6128 + 64] = stor2[_6127]
                                mem[_6128 + 96] = stor3[_6127]
                                mem[_6128 + 128] = stor4[_6127]
                                mem[_6128 + 160] = stor5[_6127]
                                mem[_6128 + 192] = stor6[_6127]
                                mem[_6128 + 224] = stor7[_6127].field_0
                                mem[_6128 + 256] = bool(stor7[_6127].field_160)
                                mem[_6128 + 288] = stor8[_6127]
                                if idx >= mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]:
                                    revert with 0, 50
                                mem[(32 * idx) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192] = _6128
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                continue 
                            if stor15[address(arg5)].field_0 - 1 < arg2:
                                _5838 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_5838] = 4
                                mem[_5838 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                                _5922 = mem[64]
                                mem[mem[64]] = 96
                                _6124 = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                                mem[mem[64] + 96] = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                                idx = 0
                                s = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192
                                t = mem[64] + 128
                                while idx < _6124:
                                    _11625 = mem[s]
                                    mem[t] = mem[mem[s]]
                                    mem[t + 32] = mem[_11625 + 32]
                                    mem[t + 64] = mem[_11625 + 64]
                                    mem[t + 96] = mem[_11625 + 96]
                                    mem[t + 128] = mem[_11625 + 128]
                                    mem[t + 160] = mem[_11625 + 172 len 20]
                                    mem[t + 192] = mem[_11625 + 192]
                                    mem[t + 224] = mem[_11625 + 236 len 20]
                                    mem[t + 256] = bool(mem[_11625 + 256])
                                    mem[t + 288] = mem[_11625 + 288]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 320
                                    continue 
                                mem[_5922 + 32] = 0
                                mem[_5922 + 64] = (320 * _6124) + 128
                                _12195 = mem[_5838]
                                mem[_5922 + (320 * _6124) + 128] = mem[_5838]
                                mem[_5922 + (320 * _6124) + 160 len ceil32(_12195)] = mem[_5838 + 32 len ceil32(_12195)]
                                if ceil32(_12195) > _12195:
                                    mem[_5922 + (320 * _6124) + _12195 + 160] = 0
                                return memory
                                  from mem[64]
                                   len ceil32(_12195) + _5922 + (320 * _6124) + -mem[64] + 160
                            _6125 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_6125] = 7
                            mem[_6125 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                            _6480 = mem[64]
                            mem[mem[64]] = 96
                            _6705 = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                            mem[mem[64] + 96] = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                            idx = 0
                            s = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192
                            t = mem[64] + 128
                            while idx < _6705:
                                _11632 = mem[s]
                                mem[t] = mem[mem[s]]
                                mem[t + 32] = mem[_11632 + 32]
                                mem[t + 64] = mem[_11632 + 64]
                                mem[t + 96] = mem[_11632 + 96]
                                mem[t + 128] = mem[_11632 + 128]
                                mem[t + 160] = mem[_11632 + 172 len 20]
                                mem[t + 192] = mem[_11632 + 192]
                                mem[t + 224] = mem[_11632 + 236 len 20]
                                mem[t + 256] = bool(mem[_11632 + 256])
                                mem[t + 288] = mem[_11632 + 288]
                                idx = idx + 1
                                s = s + 32
                                t = t + 320
                                continue 
                            mem[_6480 + 32] = stor15[address(arg5)].field_0 + -arg2 - 1
                            mem[_6480 + 64] = (320 * _6705) + 128
                            _12196 = mem[_6125]
                            mem[_6480 + (320 * _6705) + 128] = mem[_6125]
                            mem[_6480 + (320 * _6705) + 160 len ceil32(_12196)] = mem[_6125 + 32 len ceil32(_12196)]
                            if ceil32(_12196) > _12196:
                                mem[_6480 + (320 * _6705) + _12196 + 160] = 0
                            return memory
                              from mem[64]
                               len ceil32(_12196) + _6480 + (320 * _6705) + -mem[64] + 160
                        mem[64] = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 512
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 192] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 256] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 288] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 320] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 352] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 384] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 416] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 448] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 480] = 0
                        mem[var30001] = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 192
                        s = var30001
                        idx = var30002
                        while idx - 1:
                            mem[64] = mem[64] + 320
                            mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 192] = 0
                            mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224] = 0
                            mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 256] = 0
                            mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 288] = 0
                            mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 320] = 0
                            mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 352] = 0
                            mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 384] = 0
                            mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 416] = 0
                            mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 448] = 0
                            mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 480] = 0
                            mem[s + 32] = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 192
                            s = s + 32
                            idx = idx - 1
                            continue 
                        idx = 0
                        while idx < arg2:
                            if stor15[address(arg5)].field_0 - 1 < idx:
                                revert with 0, 17
                            if stor15[address(arg5)].field_0 + -idx - 1 >= mem[(32 * stor13[address(arg5)].field_0) + 128]:
                                revert with 0, 50
                            mem[0] = mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor13[address(arg5)].field_0) + 160]
                            mem[32] = 12
                            _25442 = sha3(mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor13[address(arg5)].field_0) + 160], 12)
                            _25443 = mem[64]
                            mem[64] = mem[64] + 320
                            mem[_25443] = stor12[mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor13[address(arg5)].field_0) + 160]].field_0
                            mem[_25443 + 32] = stor1[_25442]
                            mem[_25443 + 64] = stor2[_25442]
                            mem[_25443 + 96] = stor3[_25442]
                            mem[_25443 + 128] = stor4[_25442]
                            mem[_25443 + 160] = stor5[_25442]
                            mem[_25443 + 192] = stor6[_25442]
                            mem[_25443 + 224] = stor7[_25442].field_0
                            mem[_25443 + 256] = bool(stor7[_25442].field_160)
                            mem[_25443 + 288] = stor8[_25442]
                            if idx >= mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]:
                                revert with 0, 50
                            mem[(32 * idx) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192] = _25443
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            continue 
                        if stor15[address(arg5)].field_0 - 1 < arg2:
                            _24723 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_24723] = 4
                            mem[_24723 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                            _24933 = mem[64]
                            mem[mem[64]] = 96
                            _25439 = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                            mem[mem[64] + 96] = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                            idx = 0
                            s = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192
                            t = mem[64] + 128
                            while idx < _25439:
                                _36201 = mem[s]
                                mem[t] = mem[mem[s]]
                                mem[t + 32] = mem[_36201 + 32]
                                mem[t + 64] = mem[_36201 + 64]
                                mem[t + 96] = mem[_36201 + 96]
                                mem[t + 128] = mem[_36201 + 128]
                                mem[t + 160] = mem[_36201 + 172 len 20]
                                mem[t + 192] = mem[_36201 + 192]
                                mem[t + 224] = mem[_36201 + 236 len 20]
                                mem[t + 256] = bool(mem[_36201 + 256])
                                mem[t + 288] = mem[_36201 + 288]
                                idx = idx + 1
                                s = s + 32
                                t = t + 320
                                continue 
                            mem[_24933 + 32] = 0
                            mem[_24933 + 64] = (320 * _25439) + 128
                            _38024 = mem[_24723]
                            mem[_24933 + (320 * _25439) + 128] = mem[_24723]
                            mem[_24933 + (320 * _25439) + 160 len ceil32(_38024)] = mem[_24723 + 32 len ceil32(_38024)]
                            if ceil32(_38024) > _38024:
                                mem[_24933 + (320 * _25439) + _38024 + 160] = 0
                            return memory
                              from mem[64]
                               len ceil32(_38024) + _24933 + (320 * _25439) + -mem[64] + 160
                        _25440 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_25440] = 7
                        mem[_25440 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                        _26345 = mem[64]
                        mem[mem[64]] = 96
                        _26974 = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                        mem[mem[64] + 96] = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                        idx = 0
                        s = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192
                        t = mem[64] + 128
                        while idx < _26974:
                            _36208 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_36208 + 32]
                            mem[t + 64] = mem[_36208 + 64]
                            mem[t + 96] = mem[_36208 + 96]
                            mem[t + 128] = mem[_36208 + 128]
                            mem[t + 160] = mem[_36208 + 172 len 20]
                            mem[t + 192] = mem[_36208 + 192]
                            mem[t + 224] = mem[_36208 + 236 len 20]
                            mem[t + 256] = bool(mem[_36208 + 256])
                            mem[t + 288] = mem[_36208 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_26345 + 32] = stor15[address(arg5)].field_0 + -arg2 - 1
                        mem[_26345 + 64] = (320 * _26974) + 128
                        _38025 = mem[_25440]
                        mem[_26345 + (320 * _26974) + 128] = mem[_25440]
                        mem[_26345 + (320 * _26974) + 160 len ceil32(_38025)] = mem[_25440 + 32 len ceil32(_38025)]
                        if ceil32(_38025) > _38025:
                            mem[_26345 + (320 * _26974) + _38025 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_38025) + _26345 + (320 * _26974) + -mem[64] + 160
                    if 1 > !(stor15[address(arg5)].field_0 - 1):
                        revert with 0, 17
                    if stor15[address(arg5)].field_0 > test266151307():
                        revert with 0, 65
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160] = stor15[address(arg5)].field_0
                    mem[64] = (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 192
                    if not stor15[address(arg5)].field_0:
                        idx = 0
                        while idx < stor15[address(arg5)].field_0:
                            if stor15[address(arg5)].field_0 - 1 < idx:
                                revert with 0, 17
                            if stor15[address(arg5)].field_0 + -idx - 1 >= mem[(32 * stor13[address(arg5)].field_0) + 128]:
                                revert with 0, 50
                            mem[0] = mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor13[address(arg5)].field_0) + 160]
                            mem[32] = 12
                            _6133 = sha3(mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor13[address(arg5)].field_0) + 160], 12)
                            _6134 = mem[64]
                            mem[64] = mem[64] + 320
                            mem[_6134] = stor12[mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor13[address(arg5)].field_0) + 160]].field_0
                            mem[_6134 + 32] = stor1[_6133]
                            mem[_6134 + 64] = stor2[_6133]
                            mem[_6134 + 96] = stor3[_6133]
                            mem[_6134 + 128] = stor4[_6133]
                            mem[_6134 + 160] = stor5[_6133]
                            mem[_6134 + 192] = stor6[_6133]
                            mem[_6134 + 224] = stor7[_6133].field_0
                            mem[_6134 + 256] = bool(stor7[_6133].field_160)
                            mem[_6134 + 288] = stor8[_6133]
                            if idx >= mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]:
                                revert with 0, 50
                            mem[(32 * idx) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192] = _6134
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            continue 
                        if stor15[address(arg5)].field_0 - 1 < stor15[address(arg5)].field_0:
                            _5839 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_5839] = 4
                            mem[_5839 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                            _5924 = mem[64]
                            mem[mem[64]] = 96
                            _6130 = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                            mem[mem[64] + 96] = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                            idx = 0
                            s = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192
                            t = mem[64] + 128
                            while idx < _6130:
                                _11639 = mem[s]
                                mem[t] = mem[mem[s]]
                                mem[t + 32] = mem[_11639 + 32]
                                mem[t + 64] = mem[_11639 + 64]
                                mem[t + 96] = mem[_11639 + 96]
                                mem[t + 128] = mem[_11639 + 128]
                                mem[t + 160] = mem[_11639 + 172 len 20]
                                mem[t + 192] = mem[_11639 + 192]
                                mem[t + 224] = mem[_11639 + 236 len 20]
                                mem[t + 256] = bool(mem[_11639 + 256])
                                mem[t + 288] = mem[_11639 + 288]
                                idx = idx + 1
                                s = s + 32
                                t = t + 320
                                continue 
                            mem[_5924 + 32] = 0
                            mem[_5924 + 64] = (320 * _6130) + 128
                            _12197 = mem[_5839]
                            mem[_5924 + (320 * _6130) + 128] = mem[_5839]
                            mem[_5924 + (320 * _6130) + 160 len ceil32(_12197)] = mem[_5839 + 32 len ceil32(_12197)]
                            if ceil32(_12197) > _12197:
                                mem[_5924 + (320 * _6130) + _12197 + 160] = 0
                            return memory
                              from mem[64]
                               len ceil32(_12197) + _5924 + (320 * _6130) + -mem[64] + 160
                        _6131 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_6131] = 7
                        mem[_6131 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                        _6489 = mem[64]
                        mem[mem[64]] = 96
                        _6707 = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                        mem[mem[64] + 96] = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                        idx = 0
                        s = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192
                        t = mem[64] + 128
                        while idx < _6707:
                            _11646 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_11646 + 32]
                            mem[t + 64] = mem[_11646 + 64]
                            mem[t + 96] = mem[_11646 + 96]
                            mem[t + 128] = mem[_11646 + 128]
                            mem[t + 160] = mem[_11646 + 172 len 20]
                            mem[t + 192] = mem[_11646 + 192]
                            mem[t + 224] = mem[_11646 + 236 len 20]
                            mem[t + 256] = bool(mem[_11646 + 256])
                            mem[t + 288] = mem[_11646 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_6489 + 32] = -1
                        mem[_6489 + 64] = (320 * _6707) + 128
                        _12198 = mem[_6131]
                        mem[_6489 + (320 * _6707) + 128] = mem[_6131]
                        mem[_6489 + (320 * _6707) + 160 len ceil32(_12198)] = mem[_6131 + 32 len ceil32(_12198)]
                        if ceil32(_12198) > _12198:
                            mem[_6489 + (320 * _6707) + _12198 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_12198) + _6489 + (320 * _6707) + -mem[64] + 160
                    mem[64] = (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 512
                    mem[(32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 192] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 224] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 256] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 288] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 320] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 352] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 384] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 416] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 448] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 480] = 0
                    mem[var34001] = (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 192
                    s = var34001
                    idx = var34002
                    while idx - 1:
                        mem[64] = mem[64] + 320
                        mem[(32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 192] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 224] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 256] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 288] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 320] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 352] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 384] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 416] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 448] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 480] = 0
                        mem[s + 32] = (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 192
                        s = s + 32
                        idx = idx - 1
                        continue 
                    idx = 0
                    while idx < stor15[address(arg5)].field_0:
                        if stor15[address(arg5)].field_0 - 1 < idx:
                            revert with 0, 17
                        if stor15[address(arg5)].field_0 + -idx - 1 >= mem[(32 * stor13[address(arg5)].field_0) + 128]:
                            revert with 0, 50
                        mem[0] = mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor13[address(arg5)].field_0) + 160]
                        mem[32] = 12
                        _25450 = sha3(mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor13[address(arg5)].field_0) + 160], 12)
                        _25451 = mem[64]
                        mem[64] = mem[64] + 320
                        mem[_25451] = stor12[mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor13[address(arg5)].field_0) + 160]].field_0
                        mem[_25451 + 32] = stor1[_25450]
                        mem[_25451 + 64] = stor2[_25450]
                        mem[_25451 + 96] = stor3[_25450]
                        mem[_25451 + 128] = stor4[_25450]
                        mem[_25451 + 160] = stor5[_25450]
                        mem[_25451 + 192] = stor6[_25450]
                        mem[_25451 + 224] = stor7[_25450].field_0
                        mem[_25451 + 256] = bool(stor7[_25450].field_160)
                        mem[_25451 + 288] = stor8[_25450]
                        if idx >= mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]:
                            revert with 0, 50
                        mem[(32 * idx) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192] = _25451
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if stor15[address(arg5)].field_0 - 1 < stor15[address(arg5)].field_0:
                        _24724 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_24724] = 4
                        mem[_24724 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                        _24937 = mem[64]
                        mem[mem[64]] = 96
                        _25447 = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                        mem[mem[64] + 96] = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                        idx = 0
                        s = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192
                        t = mem[64] + 128
                        while idx < _25447:
                            _36215 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_36215 + 32]
                            mem[t + 64] = mem[_36215 + 64]
                            mem[t + 96] = mem[_36215 + 96]
                            mem[t + 128] = mem[_36215 + 128]
                            mem[t + 160] = mem[_36215 + 172 len 20]
                            mem[t + 192] = mem[_36215 + 192]
                            mem[t + 224] = mem[_36215 + 236 len 20]
                            mem[t + 256] = bool(mem[_36215 + 256])
                            mem[t + 288] = mem[_36215 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_24937 + 32] = 0
                        mem[_24937 + 64] = (320 * _25447) + 128
                        _38026 = mem[_24724]
                        mem[_24937 + (320 * _25447) + 128] = mem[_24724]
                        mem[_24937 + (320 * _25447) + 160 len ceil32(_38026)] = mem[_24724 + 32 len ceil32(_38026)]
                        if ceil32(_38026) > _38026:
                            mem[_24937 + (320 * _25447) + _38026 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_38026) + _24937 + (320 * _25447) + -mem[64] + 160
                    _25448 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_25448] = 7
                    mem[_25448 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                    _26353 = mem[64]
                    mem[mem[64]] = 96
                    _26976 = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                    mem[mem[64] + 96] = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                    idx = 0
                    s = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192
                    t = mem[64] + 128
                    while idx < _26976:
                        _36222 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_36222 + 32]
                        mem[t + 64] = mem[_36222 + 64]
                        mem[t + 96] = mem[_36222 + 96]
                        mem[t + 128] = mem[_36222 + 128]
                        mem[t + 160] = mem[_36222 + 172 len 20]
                        mem[t + 192] = mem[_36222 + 192]
                        mem[t + 224] = mem[_36222 + 236 len 20]
                        mem[t + 256] = bool(mem[_36222 + 256])
                        mem[t + 288] = mem[_36222 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_26353 + 32] = -1
                    mem[_26353 + 64] = (320 * _26976) + 128
                    _38027 = mem[_25448]
                    mem[_26353 + (320 * _26976) + 128] = mem[_25448]
                    mem[_26353 + (320 * _26976) + 160 len ceil32(_38027)] = mem[_25448 + 32 len ceil32(_38027)]
                    if ceil32(_38027) > _38027:
                        mem[_26353 + (320 * _26976) + _38027 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_38027) + _26353 + (320 * _26976) + -mem[64] + 160
                if stor15[address(arg5)].field_0 < stor15[address(arg5)].field_0 - 1:
                    revert with 0, 17
                if arg2 > 1:
                    if stor15[address(arg5)].field_0 < stor15[address(arg5)].field_0 - 1:
                        revert with 0, 17
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160] = 1
                    mem[64] = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 544
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 256] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 288] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 320] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 352] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 384] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 416] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 448] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 480] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 512] = 0
                    mem[var37001] = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                    s = var37001
                    idx = var37002
                    while idx - 1:
                        mem[64] = mem[64] + 320
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 256] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 288] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 320] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 352] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 384] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 416] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 448] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 480] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 512] = 0
                        mem[s + 32] = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                        s = s + 32
                        idx = idx - 1
                        continue 
                    idx = 0
                    while idx < 1:
                        if stor15[address(arg5)].field_0 - 1 > !idx:
                            revert with 0, 17
                        if stor15[address(arg5)].field_0 + idx - 1 >= mem[(32 * stor13[address(arg5)].field_0) + 128]:
                            revert with 0, 50
                        mem[0] = mem[(32 * stor15[address(arg5)].field_0 + idx - 1) + (32 * stor13[address(arg5)].field_0) + 160]
                        mem[32] = 12
                        _25462 = sha3(mem[(32 * stor15[address(arg5)].field_0 + idx - 1) + (32 * stor13[address(arg5)].field_0) + 160], 12)
                        _25463 = mem[64]
                        mem[64] = mem[64] + 320
                        mem[_25463] = stor12[mem[(32 * stor15[address(arg5)].field_0 + idx - 1) + (32 * stor13[address(arg5)].field_0) + 160]].field_0
                        mem[_25463 + 32] = stor1[_25462]
                        mem[_25463 + 64] = stor2[_25462]
                        mem[_25463 + 96] = stor3[_25462]
                        mem[_25463 + 128] = stor4[_25462]
                        mem[_25463 + 160] = stor5[_25462]
                        mem[_25463 + 192] = stor6[_25462]
                        mem[_25463 + 224] = stor7[_25462].field_0
                        mem[_25463 + 256] = bool(stor7[_25462].field_160)
                        mem[_25463 + 288] = stor8[_25462]
                        if idx >= mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]:
                            revert with 0, 50
                        mem[(32 * idx) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192] = _25463
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if stor15[address(arg5)].field_0 - 1 > !1:
                        revert with 0, 17
                    if stor15[address(arg5)].field_0 - 1 > !1:
                        revert with 0, 17
                    if stor15[address(arg5)].field_0 < mem[(32 * stor13[address(arg5)].field_0) + 128]:
                        _26979 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_26979] = 7
                        mem[_26979 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                        _27774 = mem[64]
                        mem[mem[64]] = 96
                        _28894 = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                        mem[mem[64] + 96] = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                        idx = 0
                        s = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192
                        t = mem[64] + 128
                        while idx < _28894:
                            _36243 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_36243 + 32]
                            mem[t + 64] = mem[_36243 + 64]
                            mem[t + 96] = mem[_36243 + 96]
                            mem[t + 128] = mem[_36243 + 128]
                            mem[t + 160] = mem[_36243 + 172 len 20]
                            mem[t + 192] = mem[_36243 + 192]
                            mem[t + 224] = mem[_36243 + 236 len 20]
                            mem[t + 256] = bool(mem[_36243 + 256])
                            mem[t + 288] = mem[_36243 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_27774 + 32] = stor15[address(arg5)].field_0
                        mem[_27774 + 64] = (320 * _28894) + 128
                        _38030 = mem[_26979]
                        mem[_27774 + (320 * _28894) + 128] = mem[_26979]
                        mem[_27774 + (320 * _28894) + 160 len ceil32(_38030)] = mem[_26979 + 32 len ceil32(_38030)]
                        if ceil32(_38030) > _38030:
                            mem[_27774 + (320 * _28894) + _38030 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_38030) + _27774 + (320 * _28894) + -mem[64] + 160
                    _26980 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_26980] = 4
                    mem[_26980 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                    _27775 = mem[64]
                    mem[mem[64]] = 96
                    _28895 = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                    mem[mem[64] + 96] = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                    idx = 0
                    s = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192
                    t = mem[64] + 128
                    while idx < _28895:
                        _36250 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_36250 + 32]
                        mem[t + 64] = mem[_36250 + 64]
                        mem[t + 96] = mem[_36250 + 96]
                        mem[t + 128] = mem[_36250 + 128]
                        mem[t + 160] = mem[_36250 + 172 len 20]
                        mem[t + 192] = mem[_36250 + 192]
                        mem[t + 224] = mem[_36250 + 236 len 20]
                        mem[t + 256] = bool(mem[_36250 + 256])
                        mem[t + 288] = mem[_36250 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_27775 + 32] = stor15[address(arg5)].field_0
                    mem[_27775 + 64] = (320 * _28895) + 128
                    _38031 = mem[_26980]
                    mem[_27775 + (320 * _28895) + 128] = mem[_26980]
                    mem[_27775 + (320 * _28895) + 160 len ceil32(_38031)] = mem[_26980 + 32 len ceil32(_38031)]
                    if ceil32(_38031) > _38031:
                        mem[_27775 + (320 * _28895) + _38031 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_38031) + _27775 + (320 * _28895) + -mem[64] + 160
                if arg2 > test266151307():
                    revert with 0, 65
                mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160] = arg2
                mem[64] = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 192
                if not arg2:
                    idx = 0
                    while idx < arg2:
                        if stor15[address(arg5)].field_0 - 1 > !idx:
                            revert with 0, 17
                        if stor15[address(arg5)].field_0 + idx - 1 >= mem[(32 * stor13[address(arg5)].field_0) + 128]:
                            revert with 0, 50
                        mem[0] = mem[(32 * stor15[address(arg5)].field_0 + idx - 1) + (32 * stor13[address(arg5)].field_0) + 160]
                        mem[32] = 12
                        _6137 = sha3(mem[(32 * stor15[address(arg5)].field_0 + idx - 1) + (32 * stor13[address(arg5)].field_0) + 160], 12)
                        _6138 = mem[64]
                        mem[64] = mem[64] + 320
                        mem[_6138] = stor12[mem[(32 * stor15[address(arg5)].field_0 + idx - 1) + (32 * stor13[address(arg5)].field_0) + 160]].field_0
                        mem[_6138 + 32] = stor1[_6137]
                        mem[_6138 + 64] = stor2[_6137]
                        mem[_6138 + 96] = stor3[_6137]
                        mem[_6138 + 128] = stor4[_6137]
                        mem[_6138 + 160] = stor5[_6137]
                        mem[_6138 + 192] = stor6[_6137]
                        mem[_6138 + 224] = stor7[_6137].field_0
                        mem[_6138 + 256] = bool(stor7[_6137].field_160)
                        mem[_6138 + 288] = stor8[_6137]
                        if idx >= mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]:
                            revert with 0, 50
                        mem[(32 * idx) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192] = _6138
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if stor15[address(arg5)].field_0 - 1 > !arg2:
                        revert with 0, 17
                    if stor15[address(arg5)].field_0 - 1 > !arg2:
                        revert with 0, 17
                    if stor15[address(arg5)].field_0 + arg2 - 1 < mem[(32 * stor13[address(arg5)].field_0) + 128]:
                        _6708 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_6708] = 7
                        mem[_6708 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                        _7249 = mem[64]
                        mem[mem[64]] = 96
                        _7641 = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                        mem[mem[64] + 96] = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                        idx = 0
                        s = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192
                        t = mem[64] + 128
                        while idx < _7641:
                            _11653 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_11653 + 32]
                            mem[t + 64] = mem[_11653 + 64]
                            mem[t + 96] = mem[_11653 + 96]
                            mem[t + 128] = mem[_11653 + 128]
                            mem[t + 160] = mem[_11653 + 172 len 20]
                            mem[t + 192] = mem[_11653 + 192]
                            mem[t + 224] = mem[_11653 + 236 len 20]
                            mem[t + 256] = bool(mem[_11653 + 256])
                            mem[t + 288] = mem[_11653 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_7249 + 32] = stor15[address(arg5)].field_0 + arg2 - 1
                        mem[_7249 + 64] = (320 * _7641) + 128
                        _12199 = mem[_6708]
                        mem[_7249 + (320 * _7641) + 128] = mem[_6708]
                        mem[_7249 + (320 * _7641) + 160 len ceil32(_12199)] = mem[_6708 + 32 len ceil32(_12199)]
                        if ceil32(_12199) > _12199:
                            mem[_7249 + (320 * _7641) + _12199 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_12199) + _7249 + (320 * _7641) + -mem[64] + 160
                    _6709 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_6709] = 4
                    mem[_6709 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                    _7250 = mem[64]
                    mem[mem[64]] = 96
                    _7642 = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                    mem[mem[64] + 96] = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                    idx = 0
                    s = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192
                    t = mem[64] + 128
                    while idx < _7642:
                        _11660 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_11660 + 32]
                        mem[t + 64] = mem[_11660 + 64]
                        mem[t + 96] = mem[_11660 + 96]
                        mem[t + 128] = mem[_11660 + 128]
                        mem[t + 160] = mem[_11660 + 172 len 20]
                        mem[t + 192] = mem[_11660 + 192]
                        mem[t + 224] = mem[_11660 + 236 len 20]
                        mem[t + 256] = bool(mem[_11660 + 256])
                        mem[t + 288] = mem[_11660 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_7250 + 32] = stor15[address(arg5)].field_0 + arg2 - 1
                    mem[_7250 + 64] = (320 * _7642) + 128
                    _12200 = mem[_6709]
                    mem[_7250 + (320 * _7642) + 128] = mem[_6709]
                    mem[_7250 + (320 * _7642) + 160 len ceil32(_12200)] = mem[_6709 + 32 len ceil32(_12200)]
                    if ceil32(_12200) > _12200:
                        mem[_7250 + (320 * _7642) + _12200 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_12200) + _7250 + (320 * _7642) + -mem[64] + 160
                mem[64] = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 512
                mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 192] = 0
                mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224] = 0
                mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 256] = 0
                mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 288] = 0
                mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 320] = 0
                mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 352] = 0
                mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 384] = 0
                mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 416] = 0
                mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 448] = 0
                mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 480] = 0
                mem[var33001] = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 192
                s = var33001
                idx = var33002
                while idx - 1:
                    mem[64] = mem[64] + 320
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 192] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 256] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 288] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 320] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 352] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 384] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 416] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 448] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 480] = 0
                    mem[s + 32] = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 192
                    s = s + 32
                    idx = idx - 1
                    continue 
                idx = 0
                while idx < arg2:
                    if stor15[address(arg5)].field_0 - 1 > !idx:
                        revert with 0, 17
                    if stor15[address(arg5)].field_0 + idx - 1 >= mem[(32 * stor13[address(arg5)].field_0) + 128]:
                        revert with 0, 50
                    mem[0] = mem[(32 * stor15[address(arg5)].field_0 + idx - 1) + (32 * stor13[address(arg5)].field_0) + 160]
                    mem[32] = 12
                    _25456 = sha3(mem[(32 * stor15[address(arg5)].field_0 + idx - 1) + (32 * stor13[address(arg5)].field_0) + 160], 12)
                    _25457 = mem[64]
                    mem[64] = mem[64] + 320
                    mem[_25457] = stor12[mem[(32 * stor15[address(arg5)].field_0 + idx - 1) + (32 * stor13[address(arg5)].field_0) + 160]].field_0
                    mem[_25457 + 32] = stor1[_25456]
                    mem[_25457 + 64] = stor2[_25456]
                    mem[_25457 + 96] = stor3[_25456]
                    mem[_25457 + 128] = stor4[_25456]
                    mem[_25457 + 160] = stor5[_25456]
                    mem[_25457 + 192] = stor6[_25456]
                    mem[_25457 + 224] = stor7[_25456].field_0
                    mem[_25457 + 256] = bool(stor7[_25456].field_160)
                    mem[_25457 + 288] = stor8[_25456]
                    if idx >= mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]:
                        revert with 0, 50
                    mem[(32 * idx) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192] = _25457
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
                if stor15[address(arg5)].field_0 - 1 > !arg2:
                    revert with 0, 17
                if stor15[address(arg5)].field_0 - 1 > !arg2:
                    revert with 0, 17
                if stor15[address(arg5)].field_0 + arg2 - 1 < mem[(32 * stor13[address(arg5)].field_0) + 128]:
                    _26977 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_26977] = 7
                    mem[_26977 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                    _27772 = mem[64]
                    mem[mem[64]] = 96
                    _28892 = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                    mem[mem[64] + 96] = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                    idx = 0
                    s = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192
                    t = mem[64] + 128
                    while idx < _28892:
                        _36229 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_36229 + 32]
                        mem[t + 64] = mem[_36229 + 64]
                        mem[t + 96] = mem[_36229 + 96]
                        mem[t + 128] = mem[_36229 + 128]
                        mem[t + 160] = mem[_36229 + 172 len 20]
                        mem[t + 192] = mem[_36229 + 192]
                        mem[t + 224] = mem[_36229 + 236 len 20]
                        mem[t + 256] = bool(mem[_36229 + 256])
                        mem[t + 288] = mem[_36229 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_27772 + 32] = stor15[address(arg5)].field_0 + arg2 - 1
                    mem[_27772 + 64] = (320 * _28892) + 128
                    _38028 = mem[_26977]
                    mem[_27772 + (320 * _28892) + 128] = mem[_26977]
                    mem[_27772 + (320 * _28892) + 160 len ceil32(_38028)] = mem[_26977 + 32 len ceil32(_38028)]
                    if ceil32(_38028) > _38028:
                        mem[_27772 + (320 * _28892) + _38028 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_38028) + _27772 + (320 * _28892) + -mem[64] + 160
                _26978 = mem[64]
                mem[64] = mem[64] + 64
                mem[_26978] = 4
                mem[_26978 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                _27773 = mem[64]
                mem[mem[64]] = 96
                _28893 = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                mem[mem[64] + 96] = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                idx = 0
                s = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192
                t = mem[64] + 128
                while idx < _28893:
                    _36236 = mem[s]
                    mem[t] = mem[mem[s]]
                    mem[t + 32] = mem[_36236 + 32]
                    mem[t + 64] = mem[_36236 + 64]
                    mem[t + 96] = mem[_36236 + 96]
                    mem[t + 128] = mem[_36236 + 128]
                    mem[t + 160] = mem[_36236 + 172 len 20]
                    mem[t + 192] = mem[_36236 + 192]
                    mem[t + 224] = mem[_36236 + 236 len 20]
                    mem[t + 256] = bool(mem[_36236 + 256])
                    mem[t + 288] = mem[_36236 + 288]
                    idx = idx + 1
                    s = s + 32
                    t = t + 320
                    continue 
                mem[_27773 + 32] = stor15[address(arg5)].field_0 + arg2 - 1
                mem[_27773 + 64] = (320 * _28893) + 128
                _38029 = mem[_26978]
                mem[_27773 + (320 * _28893) + 128] = mem[_26978]
                mem[_27773 + (320 * _28893) + 160 len ceil32(_38029)] = mem[_26978 + 32 len ceil32(_38029)]
                if ceil32(_38029) > _38029:
                    mem[_27773 + (320 * _28893) + _38029 + 160] = 0
                return memory
                  from mem[64]
                   len ceil32(_38029) + _27773 + (320 * _28893) + -mem[64] + 160
            mem[0] = sha3(address(arg5), 15)
            mem[(32 * stor13[address(arg5)].field_0) + 160] = stor15[address(arg5)].field_0
            idx = (32 * stor13[address(arg5)].field_0) + 160
            s = 0
            while (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 128 > idx:
                mem[idx + 32] = stor15[address(arg5)][s].field_256
                idx = idx + 32
                s = s + 1
                continue 
            if not stor15[address(arg5)].field_0:
                mem[64] = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 256
                mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192] = 4
                mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 256] = 96
                _12907 = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 352] = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                idx = 0
                s = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192
                t = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 384
                while idx < mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]:
                    _24427 = mem[s]
                    mem[t] = mem[mem[s]]
                    mem[t + 32] = mem[_24427 + 32]
                    mem[t + 64] = mem[_24427 + 64]
                    mem[t + 96] = mem[_24427 + 96]
                    mem[t + 128] = mem[_24427 + 128]
                    mem[t + 160] = mem[_24427 + 172 len 20]
                    mem[t + 192] = mem[_24427 + 192]
                    mem[t + 224] = mem[_24427 + 236 len 20]
                    mem[t + 256] = bool(mem[_24427 + 256])
                    mem[t + 288] = mem[_24427 + 288]
                    idx = idx + 1
                    s = s + 32
                    t = t + 320
                    continue 
                mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 288] = 0
                mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 320] = (320 * _12907) + 128
                mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (320 * _12907) + 384] = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (320 * _12907) + 416 len ceil32(mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192])] = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224 len ceil32(mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192])]
                if ceil32(mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]) > mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]:
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (320 * _12907) + mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192] + 416] = 0
                return memory
                  from mem[64]
                   len ceil32(mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (320 * _12907) + -mem[64] + 416
            if arg1 < stor15[address(arg5)].field_0:
                if arg3:
                    if arg2 <= arg1:
                        if arg2 > test266151307():
                            revert with 0, 65
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160] = arg2
                        mem[64] = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 192
                        if not arg2:
                            idx = 0
                            while idx < arg2:
                                if arg1 < idx:
                                    revert with 0, 17
                                if arg1 - idx >= mem[(32 * stor13[address(arg5)].field_0) + 128]:
                                    revert with 0, 50
                                mem[0] = mem[(32 * arg1 - idx) + (32 * stor13[address(arg5)].field_0) + 160]
                                mem[32] = 12
                                _25468 = sha3(mem[(32 * arg1 - idx) + (32 * stor13[address(arg5)].field_0) + 160], 12)
                                _25469 = mem[64]
                                mem[64] = mem[64] + 320
                                mem[_25469] = stor12[mem[(32 * arg1 - idx) + (32 * stor13[address(arg5)].field_0) + 160]].field_0
                                mem[_25469 + 32] = stor1[_25468]
                                mem[_25469 + 64] = stor2[_25468]
                                mem[_25469 + 96] = stor3[_25468]
                                mem[_25469 + 128] = stor4[_25468]
                                mem[_25469 + 160] = stor5[_25468]
                                mem[_25469 + 192] = stor6[_25468]
                                mem[_25469 + 224] = stor7[_25468].field_0
                                mem[_25469 + 256] = bool(stor7[_25468].field_160)
                                mem[_25469 + 288] = stor8[_25468]
                                if idx >= mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]:
                                    revert with 0, 50
                                mem[(32 * idx) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192] = _25469
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                continue 
                            if arg1 >= arg2:
                                _25466 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_25466] = 7
                                mem[_25466 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                                _26361 = mem[64]
                                mem[mem[64]] = 96
                                _26982 = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                                mem[mem[64] + 96] = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                                idx = 0
                                s = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192
                                t = mem[64] + 128
                                while idx < _26982:
                                    _36264 = mem[s]
                                    mem[t] = mem[mem[s]]
                                    mem[t + 32] = mem[_36264 + 32]
                                    mem[t + 64] = mem[_36264 + 64]
                                    mem[t + 96] = mem[_36264 + 96]
                                    mem[t + 128] = mem[_36264 + 128]
                                    mem[t + 160] = mem[_36264 + 172 len 20]
                                    mem[t + 192] = mem[_36264 + 192]
                                    mem[t + 224] = mem[_36264 + 236 len 20]
                                    mem[t + 256] = bool(mem[_36264 + 256])
                                    mem[t + 288] = mem[_36264 + 288]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 320
                                    continue 
                                mem[_26361 + 32] = arg1 - arg2
                                mem[_26361 + 64] = (320 * _26982) + 128
                                _38033 = mem[_25466]
                                mem[_26361 + (320 * _26982) + 128] = mem[_25466]
                                mem[_26361 + (320 * _26982) + 160 len ceil32(_38033)] = mem[_25466 + 32 len ceil32(_38033)]
                                if ceil32(_38033) > _38033:
                                    mem[_26361 + (320 * _26982) + _38033 + 160] = 0
                                return memory
                                  from mem[64]
                                   len ceil32(_38033) + _26361 + (320 * _26982) + -mem[64] + 160
                            _24725 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_24725] = 4
                            mem[_24725 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                            _24945 = mem[64]
                            mem[mem[64]] = 96
                            _25465 = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                            mem[mem[64] + 96] = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                            idx = 0
                            s = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192
                            t = mem[64] + 128
                            while idx < _25465:
                                _36257 = mem[s]
                                mem[t] = mem[mem[s]]
                                mem[t + 32] = mem[_36257 + 32]
                                mem[t + 64] = mem[_36257 + 64]
                                mem[t + 96] = mem[_36257 + 96]
                                mem[t + 128] = mem[_36257 + 128]
                                mem[t + 160] = mem[_36257 + 172 len 20]
                                mem[t + 192] = mem[_36257 + 192]
                                mem[t + 224] = mem[_36257 + 236 len 20]
                                mem[t + 256] = bool(mem[_36257 + 256])
                                mem[t + 288] = mem[_36257 + 288]
                                idx = idx + 1
                                s = s + 32
                                t = t + 320
                                continue 
                            mem[_24945 + 32] = 0
                            mem[_24945 + 64] = (320 * _25465) + 128
                            _38032 = mem[_24725]
                            mem[_24945 + (320 * _25465) + 128] = mem[_24725]
                            mem[_24945 + (320 * _25465) + 160 len ceil32(_38032)] = mem[_24725 + 32 len ceil32(_38032)]
                            var40001 = ceil32(_38032)
                            if ceil32(_38032) > _38032:
                                mem[_24945 + (320 * _25465) + _38032 + 160] = 0
                            return memory
                              from mem[64]
                               len ceil32(_38032) + _24945 + (320 * _25465) + -mem[64] + 160
                        mem[64] = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 512
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 192] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 256] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 288] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 320] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 352] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 384] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 416] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 448] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 480] = 0
                        mem[var30001] = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 192
                        s = var30001
                        idx = var30002
                        while idx - 1:
                            mem[64] = mem[64] + 320
                            mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 192] = 0
                            mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224] = 0
                            mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 256] = 0
                            mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 288] = 0
                            mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 320] = 0
                            mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 352] = 0
                            mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 384] = 0
                            mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 416] = 0
                            mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 448] = 0
                            mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 480] = 0
                            mem[s + 32] = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 192
                            s = s + 32
                            idx = idx - 1
                            continue 
                        idx = 0
                        while idx < arg2:
                            if arg1 < idx:
                                revert with 0, 17
                            if arg1 - idx >= mem[(32 * stor13[address(arg5)].field_0) + 128]:
                                revert with 0, 50
                            mem[0] = mem[(32 * arg1 - idx) + (32 * stor13[address(arg5)].field_0) + 160]
                            mem[32] = 12
                            _49994 = sha3(mem[(32 * arg1 - idx) + (32 * stor13[address(arg5)].field_0) + 160], 12)
                            _49995 = mem[64]
                            mem[64] = mem[64] + 320
                            mem[_49995] = stor12[mem[(32 * arg1 - idx) + (32 * stor13[address(arg5)].field_0) + 160]].field_0
                            mem[_49995 + 32] = stor1[_49994]
                            mem[_49995 + 64] = stor2[_49994]
                            mem[_49995 + 96] = stor3[_49994]
                            mem[_49995 + 128] = stor4[_49994]
                            mem[_49995 + 160] = stor5[_49994]
                            mem[_49995 + 192] = stor6[_49994]
                            mem[_49995 + 224] = stor7[_49994].field_0
                            mem[_49995 + 256] = bool(stor7[_49994].field_160)
                            mem[_49995 + 288] = stor8[_49994]
                            if idx >= mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]:
                                revert with 0, 50
                            mem[(32 * idx) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192] = _49995
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            continue 
                        if arg1 < arg2:
                            _49241 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_49241] = 4
                            mem[_49241 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                            _49421 = mem[64]
                            mem[mem[64]] = 96
                            _49991 = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                            mem[mem[64] + 96] = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                            idx = 0
                            s = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192
                            t = mem[64] + 128
                            while idx < _49991:
                                _57981 = mem[s]
                                mem[t] = mem[mem[s]]
                                mem[t + 32] = mem[_57981 + 32]
                                mem[t + 64] = mem[_57981 + 64]
                                mem[t + 96] = mem[_57981 + 96]
                                mem[t + 128] = mem[_57981 + 128]
                                mem[t + 160] = mem[_57981 + 172 len 20]
                                mem[t + 192] = mem[_57981 + 192]
                                mem[t + 224] = mem[_57981 + 236 len 20]
                                mem[t + 256] = bool(mem[_57981 + 256])
                                mem[t + 288] = mem[_57981 + 288]
                                idx = idx + 1
                                s = s + 32
                                t = t + 320
                                continue 
                            mem[_49421 + 32] = 0
                            mem[_49421 + 64] = (320 * _49991) + 128
                            _59908 = mem[_49241]
                            mem[_49421 + (320 * _49991) + 128] = mem[_49241]
                            mem[_49421 + (320 * _49991) + 160 len ceil32(_59908)] = mem[_49241 + 32 len ceil32(_59908)]
                            var47001 = ceil32(_59908)
                            if ceil32(_59908) > _59908:
                                mem[_49421 + (320 * _49991) + _59908 + 160] = 0
                            return memory
                              from mem[64]
                               len ceil32(_59908) + _49421 + (320 * _49991) + -mem[64] + 160
                        _49992 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_49992] = 7
                        mem[_49992 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                        _50978 = mem[64]
                        mem[mem[64]] = 96
                        _51568 = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                        mem[mem[64] + 96] = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                        idx = 0
                        s = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192
                        t = mem[64] + 128
                        while idx < _51568:
                            _57988 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_57988 + 32]
                            mem[t + 64] = mem[_57988 + 64]
                            mem[t + 96] = mem[_57988 + 96]
                            mem[t + 128] = mem[_57988 + 128]
                            mem[t + 160] = mem[_57988 + 172 len 20]
                            mem[t + 192] = mem[_57988 + 192]
                            mem[t + 224] = mem[_57988 + 236 len 20]
                            mem[t + 256] = bool(mem[_57988 + 256])
                            mem[t + 288] = mem[_57988 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_50978 + 32] = arg1 - arg2
                        mem[_50978 + 64] = (320 * _51568) + 128
                        _59909 = mem[_49992]
                        mem[_50978 + (320 * _51568) + 128] = mem[_49992]
                        mem[_50978 + (320 * _51568) + 160 len ceil32(_59909)] = mem[_49992 + 32 len ceil32(_59909)]
                        var50001 = ceil32(_59909)
                        if ceil32(_59909) > _59909:
                            mem[_50978 + (320 * _51568) + _59909 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_59909) + _50978 + (320 * _51568) + -mem[64] + 160
                    if 1 > !arg1:
                        revert with 0, 17
                    if arg1 + 1 > test266151307():
                        revert with 0, 65
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160] = arg1 + 1
                    mem[64] = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 192
                    if not arg1 + 1:
                        idx = 0
                        while idx < arg1 + 1:
                            if arg1 < idx:
                                revert with 0, 17
                            if arg1 - idx >= mem[(32 * stor13[address(arg5)].field_0) + 128]:
                                revert with 0, 50
                            mem[0] = mem[(32 * arg1 - idx) + (32 * stor13[address(arg5)].field_0) + 160]
                            mem[32] = 12
                            _25474 = sha3(mem[(32 * arg1 - idx) + (32 * stor13[address(arg5)].field_0) + 160], 12)
                            _25475 = mem[64]
                            mem[64] = mem[64] + 320
                            mem[_25475] = stor12[mem[(32 * arg1 - idx) + (32 * stor13[address(arg5)].field_0) + 160]].field_0
                            mem[_25475 + 32] = stor1[_25474]
                            mem[_25475 + 64] = stor2[_25474]
                            mem[_25475 + 96] = stor3[_25474]
                            mem[_25475 + 128] = stor4[_25474]
                            mem[_25475 + 160] = stor5[_25474]
                            mem[_25475 + 192] = stor6[_25474]
                            mem[_25475 + 224] = stor7[_25474].field_0
                            mem[_25475 + 256] = bool(stor7[_25474].field_160)
                            mem[_25475 + 288] = stor8[_25474]
                            if idx >= mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]:
                                revert with 0, 50
                            mem[(32 * idx) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192] = _25475
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            continue 
                        if arg1 < arg1 + 1:
                            _24726 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_24726] = 4
                            mem[_24726 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                            _24947 = mem[64]
                            mem[mem[64]] = 96
                            _25471 = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                            mem[mem[64] + 96] = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                            idx = 0
                            s = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192
                            t = mem[64] + 128
                            while idx < _25471:
                                _36271 = mem[s]
                                mem[t] = mem[mem[s]]
                                mem[t + 32] = mem[_36271 + 32]
                                mem[t + 64] = mem[_36271 + 64]
                                mem[t + 96] = mem[_36271 + 96]
                                mem[t + 128] = mem[_36271 + 128]
                                mem[t + 160] = mem[_36271 + 172 len 20]
                                mem[t + 192] = mem[_36271 + 192]
                                mem[t + 224] = mem[_36271 + 236 len 20]
                                mem[t + 256] = bool(mem[_36271 + 256])
                                mem[t + 288] = mem[_36271 + 288]
                                idx = idx + 1
                                s = s + 32
                                t = t + 320
                                continue 
                            mem[_24947 + 32] = 0
                            mem[_24947 + 64] = (320 * _25471) + 128
                            _38034 = mem[_24726]
                            mem[_24947 + (320 * _25471) + 128] = mem[_24726]
                            mem[_24947 + (320 * _25471) + 160 len ceil32(_38034)] = mem[_24726 + 32 len ceil32(_38034)]
                            var44001 = ceil32(_38034)
                            if ceil32(_38034) > _38034:
                                mem[_24947 + (320 * _25471) + _38034 + 160] = 0
                            return memory
                              from mem[64]
                               len ceil32(_38034) + _24947 + (320 * _25471) + -mem[64] + 160
                        _25472 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_25472] = 7
                        mem[_25472 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                        _26370 = mem[64]
                        mem[mem[64]] = 96
                        _26984 = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                        mem[mem[64] + 96] = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                        idx = 0
                        s = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192
                        t = mem[64] + 128
                        while idx < _26984:
                            _36278 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_36278 + 32]
                            mem[t + 64] = mem[_36278 + 64]
                            mem[t + 96] = mem[_36278 + 96]
                            mem[t + 128] = mem[_36278 + 128]
                            mem[t + 160] = mem[_36278 + 172 len 20]
                            mem[t + 192] = mem[_36278 + 192]
                            mem[t + 224] = mem[_36278 + 236 len 20]
                            mem[t + 256] = bool(mem[_36278 + 256])
                            mem[t + 288] = mem[_36278 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_26370 + 32] = -1
                        mem[_26370 + 64] = (320 * _26984) + 128
                        _38035 = mem[_25472]
                        mem[_26370 + (320 * _26984) + 128] = mem[_25472]
                        mem[_26370 + (320 * _26984) + 160 len ceil32(_38035)] = mem[_25472 + 32 len ceil32(_38035)]
                        var47001 = ceil32(_38035)
                        if ceil32(_38035) > _38035:
                            mem[_26370 + (320 * _26984) + _38035 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_38035) + _26370 + (320 * _26984) + -mem[64] + 160
                    mem[64] = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 512
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 192] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 224] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 256] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 288] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 320] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 352] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 384] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 416] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 448] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 480] = 0
                    mem[var34001] = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 192
                    s = var34001
                    idx = var34002
                    while idx - 1:
                        mem[64] = mem[64] + 320
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 192] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 224] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 256] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 288] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 320] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 352] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 384] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 416] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 448] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 480] = 0
                        mem[s + 32] = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 192
                        s = s + 32
                        idx = idx - 1
                        continue 
                    idx = 0
                    while idx < arg1 + 1:
                        if arg1 < idx:
                            revert with 0, 17
                        if arg1 - idx >= mem[(32 * stor13[address(arg5)].field_0) + 128]:
                            revert with 0, 50
                        mem[0] = mem[(32 * arg1 - idx) + (32 * stor13[address(arg5)].field_0) + 160]
                        mem[32] = 12
                        _50002 = sha3(mem[(32 * arg1 - idx) + (32 * stor13[address(arg5)].field_0) + 160], 12)
                        _50003 = mem[64]
                        mem[64] = mem[64] + 320
                        mem[_50003] = stor12[mem[(32 * arg1 - idx) + (32 * stor13[address(arg5)].field_0) + 160]].field_0
                        mem[_50003 + 32] = stor1[_50002]
                        mem[_50003 + 64] = stor2[_50002]
                        mem[_50003 + 96] = stor3[_50002]
                        mem[_50003 + 128] = stor4[_50002]
                        mem[_50003 + 160] = stor5[_50002]
                        mem[_50003 + 192] = stor6[_50002]
                        mem[_50003 + 224] = stor7[_50002].field_0
                        mem[_50003 + 256] = bool(stor7[_50002].field_160)
                        mem[_50003 + 288] = stor8[_50002]
                        if idx >= mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]:
                            revert with 0, 50
                        mem[(32 * idx) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192] = _50003
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if arg1 >= arg1 + 1:
                        _50000 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_50000] = 7
                        mem[_50000 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                        _50986 = mem[64]
                        mem[mem[64]] = 96
                        _51570 = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                        mem[mem[64] + 96] = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                        idx = 0
                        s = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192
                        t = mem[64] + 128
                        while idx < _51570:
                            _58002 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_58002 + 32]
                            mem[t + 64] = mem[_58002 + 64]
                            mem[t + 96] = mem[_58002 + 96]
                            mem[t + 128] = mem[_58002 + 128]
                            mem[t + 160] = mem[_58002 + 172 len 20]
                            mem[t + 192] = mem[_58002 + 192]
                            mem[t + 224] = mem[_58002 + 236 len 20]
                            mem[t + 256] = bool(mem[_58002 + 256])
                            mem[t + 288] = mem[_58002 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_50986 + 32] = -1
                        mem[_50986 + 64] = (320 * _51570) + 128
                        _59911 = mem[_50000]
                        mem[_50986 + (320 * _51570) + 128] = mem[_50000]
                        mem[_50986 + (320 * _51570) + 160 len ceil32(_59911)] = mem[_50000 + 32 len ceil32(_59911)]
                        if ceil32(_59911) > _59911:
                            mem[_50986 + (320 * _51570) + _59911 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_59911) + _50986 + (320 * _51570) + -mem[64] + 160
                    _49242 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_49242] = 4
                    mem[_49242 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                    _49425 = mem[64]
                    mem[mem[64]] = 96
                    _49999 = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                    mem[mem[64] + 96] = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                    idx = 0
                    s = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192
                    t = mem[64] + 128
                    while idx < _49999:
                        _57995 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_57995 + 32]
                        mem[t + 64] = mem[_57995 + 64]
                        mem[t + 96] = mem[_57995 + 96]
                        mem[t + 128] = mem[_57995 + 128]
                        mem[t + 160] = mem[_57995 + 172 len 20]
                        mem[t + 192] = mem[_57995 + 192]
                        mem[t + 224] = mem[_57995 + 236 len 20]
                        mem[t + 256] = bool(mem[_57995 + 256])
                        mem[t + 288] = mem[_57995 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_49425 + 32] = 0
                    mem[_49425 + 64] = (320 * _49999) + 128
                    _59910 = mem[_49242]
                    mem[_49425 + (320 * _49999) + 128] = mem[_49242]
                    mem[_49425 + (320 * _49999) + 160 len ceil32(_59910)] = mem[_49242 + 32 len ceil32(_59910)]
                    var51001 = ceil32(_59910)
                    if ceil32(_59910) > _59910:
                        mem[_49425 + (320 * _49999) + _59910 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_59910) + _49425 + (320 * _49999) + -mem[64] + 160
                if stor15[address(arg5)].field_0 < arg1:
                    revert with 0, 17
                if arg2 <= stor15[address(arg5)].field_0 - arg1:
                    if arg2 > test266151307():
                        revert with 0, 65
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160] = arg2
                    mem[64] = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 192
                    if not arg2:
                        idx = 0
                        while idx < arg2:
                            if arg1 > !idx:
                                revert with 0, 17
                            if arg1 + idx >= mem[(32 * stor13[address(arg5)].field_0) + 128]:
                                revert with 0, 50
                            mem[0] = mem[(32 * arg1 + idx) + (32 * stor13[address(arg5)].field_0) + 160]
                            mem[32] = 12
                            _25478 = sha3(mem[(32 * arg1 + idx) + (32 * stor13[address(arg5)].field_0) + 160], 12)
                            _25479 = mem[64]
                            mem[64] = mem[64] + 320
                            mem[_25479] = stor12[mem[(32 * arg1 + idx) + (32 * stor13[address(arg5)].field_0) + 160]].field_0
                            mem[_25479 + 32] = stor1[_25478]
                            mem[_25479 + 64] = stor2[_25478]
                            mem[_25479 + 96] = stor3[_25478]
                            mem[_25479 + 128] = stor4[_25478]
                            mem[_25479 + 160] = stor5[_25478]
                            mem[_25479 + 192] = stor6[_25478]
                            mem[_25479 + 224] = stor7[_25478].field_0
                            mem[_25479 + 256] = bool(stor7[_25478].field_160)
                            mem[_25479 + 288] = stor8[_25478]
                            if idx >= mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]:
                                revert with 0, 50
                            mem[(32 * idx) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192] = _25479
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            continue 
                        if arg1 > !arg2:
                            revert with 0, 17
                        if arg1 > !arg2:
                            revert with 0, 17
                        if arg1 + arg2 < mem[(32 * stor13[address(arg5)].field_0) + 128]:
                            _26985 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_26985] = 7
                            mem[_26985 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                            _27804 = mem[64]
                            mem[mem[64]] = 96
                            _28900 = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                            mem[mem[64] + 96] = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                            idx = 0
                            s = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192
                            t = mem[64] + 128
                            while idx < _28900:
                                _36285 = mem[s]
                                mem[t] = mem[mem[s]]
                                mem[t + 32] = mem[_36285 + 32]
                                mem[t + 64] = mem[_36285 + 64]
                                mem[t + 96] = mem[_36285 + 96]
                                mem[t + 128] = mem[_36285 + 128]
                                mem[t + 160] = mem[_36285 + 172 len 20]
                                mem[t + 192] = mem[_36285 + 192]
                                mem[t + 224] = mem[_36285 + 236 len 20]
                                mem[t + 256] = bool(mem[_36285 + 256])
                                mem[t + 288] = mem[_36285 + 288]
                                idx = idx + 1
                                s = s + 32
                                t = t + 320
                                continue 
                            mem[_27804 + 32] = arg1 + arg2
                            mem[_27804 + 64] = (320 * _28900) + 128
                            _38036 = mem[_26985]
                            mem[_27804 + (320 * _28900) + 128] = mem[_26985]
                            mem[_27804 + (320 * _28900) + 160 len ceil32(_38036)] = mem[_26985 + 32 len ceil32(_38036)]
                            var49001 = ceil32(_38036)
                            if ceil32(_38036) > _38036:
                                mem[_27804 + (320 * _28900) + _38036 + 160] = 0
                            return memory
                              from mem[64]
                               len ceil32(_38036) + _27804 + (320 * _28900) + -mem[64] + 160
                        _26986 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_26986] = 4
                        mem[_26986 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                        _27805 = mem[64]
                        mem[mem[64]] = 96
                        _28901 = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                        mem[mem[64] + 96] = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                        idx = 0
                        s = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192
                        t = mem[64] + 128
                        while idx < _28901:
                            _36292 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_36292 + 32]
                            mem[t + 64] = mem[_36292 + 64]
                            mem[t + 96] = mem[_36292 + 96]
                            mem[t + 128] = mem[_36292 + 128]
                            mem[t + 160] = mem[_36292 + 172 len 20]
                            mem[t + 192] = mem[_36292 + 192]
                            mem[t + 224] = mem[_36292 + 236 len 20]
                            mem[t + 256] = bool(mem[_36292 + 256])
                            mem[t + 288] = mem[_36292 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_27805 + 32] = arg1 + arg2
                        mem[_27805 + 64] = (320 * _28901) + 128
                        _38037 = mem[_26986]
                        mem[_27805 + (320 * _28901) + 128] = mem[_26986]
                        mem[_27805 + (320 * _28901) + 160 len ceil32(_38037)] = mem[_26986 + 32 len ceil32(_38037)]
                        var49001 = ceil32(_38037)
                        if ceil32(_38037) > _38037:
                            mem[_27805 + (320 * _28901) + _38037 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_38037) + _27805 + (320 * _28901) + -mem[64] + 160
                    mem[64] = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 512
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 192] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 256] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 288] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 320] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 352] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 384] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 416] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 448] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 480] = 0
                    mem[var33001] = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 192
                    s = var33001
                    idx = var33002
                    while idx - 1:
                        mem[64] = mem[64] + 320
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 192] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 256] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 288] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 320] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 352] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 384] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 416] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 448] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 480] = 0
                        mem[s + 32] = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 192
                        s = s + 32
                        idx = idx - 1
                        continue 
                    idx = 0
                    while idx < arg2:
                        if arg1 > !idx:
                            revert with 0, 17
                        if arg1 + idx >= mem[(32 * stor13[address(arg5)].field_0) + 128]:
                            revert with 0, 50
                        mem[0] = mem[(32 * arg1 + idx) + (32 * stor13[address(arg5)].field_0) + 160]
                        mem[32] = 12
                        _50008 = sha3(mem[(32 * arg1 + idx) + (32 * stor13[address(arg5)].field_0) + 160], 12)
                        _50009 = mem[64]
                        mem[64] = mem[64] + 320
                        mem[_50009] = stor12[mem[(32 * arg1 + idx) + (32 * stor13[address(arg5)].field_0) + 160]].field_0
                        mem[_50009 + 32] = stor1[_50008]
                        mem[_50009 + 64] = stor2[_50008]
                        mem[_50009 + 96] = stor3[_50008]
                        mem[_50009 + 128] = stor4[_50008]
                        mem[_50009 + 160] = stor5[_50008]
                        mem[_50009 + 192] = stor6[_50008]
                        mem[_50009 + 224] = stor7[_50008].field_0
                        mem[_50009 + 256] = bool(stor7[_50008].field_160)
                        mem[_50009 + 288] = stor8[_50008]
                        if idx >= mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]:
                            revert with 0, 50
                        mem[(32 * idx) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192] = _50009
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if arg1 > !arg2:
                        revert with 0, 17
                    if arg1 > !arg2:
                        revert with 0, 17
                    if arg1 + arg2 < mem[(32 * stor13[address(arg5)].field_0) + 128]:
                        _51571 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_51571] = 7
                        mem[_51571 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                        _52117 = mem[64]
                        mem[mem[64]] = 96
                        _53041 = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                        mem[mem[64] + 96] = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                        idx = 0
                        s = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192
                        t = mem[64] + 128
                        while idx < _53041:
                            _58009 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_58009 + 32]
                            mem[t + 64] = mem[_58009 + 64]
                            mem[t + 96] = mem[_58009 + 96]
                            mem[t + 128] = mem[_58009 + 128]
                            mem[t + 160] = mem[_58009 + 172 len 20]
                            mem[t + 192] = mem[_58009 + 192]
                            mem[t + 224] = mem[_58009 + 236 len 20]
                            mem[t + 256] = bool(mem[_58009 + 256])
                            mem[t + 288] = mem[_58009 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_52117 + 32] = arg1 + arg2
                        mem[_52117 + 64] = (320 * _53041) + 128
                        _59912 = mem[_51571]
                        mem[_52117 + (320 * _53041) + 128] = mem[_51571]
                        mem[_52117 + (320 * _53041) + 160 len ceil32(_59912)] = mem[_51571 + 32 len ceil32(_59912)]
                        var56001 = ceil32(_59912)
                        if ceil32(_59912) > _59912:
                            mem[_52117 + (320 * _53041) + _59912 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_59912) + _52117 + (320 * _53041) + -mem[64] + 160
                    _51572 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_51572] = 4
                    mem[_51572 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                    _52118 = mem[64]
                    mem[mem[64]] = 96
                    _53042 = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                    mem[mem[64] + 96] = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                    idx = 0
                    s = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192
                    t = mem[64] + 128
                    while idx < _53042:
                        _58016 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_58016 + 32]
                        mem[t + 64] = mem[_58016 + 64]
                        mem[t + 96] = mem[_58016 + 96]
                        mem[t + 128] = mem[_58016 + 128]
                        mem[t + 160] = mem[_58016 + 172 len 20]
                        mem[t + 192] = mem[_58016 + 192]
                        mem[t + 224] = mem[_58016 + 236 len 20]
                        mem[t + 256] = bool(mem[_58016 + 256])
                        mem[t + 288] = mem[_58016 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_52118 + 32] = arg1 + arg2
                    mem[_52118 + 64] = (320 * _53042) + 128
                    _59913 = mem[_51572]
                    mem[_52118 + (320 * _53042) + 128] = mem[_51572]
                    mem[_52118 + (320 * _53042) + 160 len ceil32(_59913)] = mem[_51572 + 32 len ceil32(_59913)]
                    var56001 = ceil32(_59913)
                    if ceil32(_59913) > _59913:
                        mem[_52118 + (320 * _53042) + _59913 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_59913) + _52118 + (320 * _53042) + -mem[64] + 160
                if stor15[address(arg5)].field_0 < arg1:
                    revert with 0, 17
                if stor15[address(arg5)].field_0 - arg1 > test266151307():
                    revert with 0, 65
                mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160] = stor15[address(arg5)].field_0 - arg1
                mem[64] = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 192
                if not stor15[address(arg5)].field_0 - arg1:
                    idx = 0
                    while idx < stor15[address(arg5)].field_0 - arg1:
                        if arg1 > !idx:
                            revert with 0, 17
                        if arg1 + idx >= mem[(32 * stor13[address(arg5)].field_0) + 128]:
                            revert with 0, 50
                        mem[0] = mem[(32 * arg1 + idx) + (32 * stor13[address(arg5)].field_0) + 160]
                        mem[32] = 12
                        _25482 = sha3(mem[(32 * arg1 + idx) + (32 * stor13[address(arg5)].field_0) + 160], 12)
                        _25483 = mem[64]
                        mem[64] = mem[64] + 320
                        mem[_25483] = stor12[mem[(32 * arg1 + idx) + (32 * stor13[address(arg5)].field_0) + 160]].field_0
                        mem[_25483 + 32] = stor1[_25482]
                        mem[_25483 + 64] = stor2[_25482]
                        mem[_25483 + 96] = stor3[_25482]
                        mem[_25483 + 128] = stor4[_25482]
                        mem[_25483 + 160] = stor5[_25482]
                        mem[_25483 + 192] = stor6[_25482]
                        mem[_25483 + 224] = stor7[_25482].field_0
                        mem[_25483 + 256] = bool(stor7[_25482].field_160)
                        mem[_25483 + 288] = stor8[_25482]
                        if idx >= mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]:
                            revert with 0, 50
                        mem[(32 * idx) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192] = _25483
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if arg1 > !(stor15[address(arg5)].field_0 - arg1):
                        revert with 0, 17
                    if arg1 > !(stor15[address(arg5)].field_0 - arg1):
                        revert with 0, 17
                    if stor15[address(arg5)].field_0 < mem[(32 * stor13[address(arg5)].field_0) + 128]:
                        _26987 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_26987] = 7
                        mem[_26987 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                        _27810 = mem[64]
                        mem[mem[64]] = 96
                        _28902 = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                        mem[mem[64] + 96] = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                        idx = 0
                        s = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192
                        t = mem[64] + 128
                        while idx < _28902:
                            _36299 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_36299 + 32]
                            mem[t + 64] = mem[_36299 + 64]
                            mem[t + 96] = mem[_36299 + 96]
                            mem[t + 128] = mem[_36299 + 128]
                            mem[t + 160] = mem[_36299 + 172 len 20]
                            mem[t + 192] = mem[_36299 + 192]
                            mem[t + 224] = mem[_36299 + 236 len 20]
                            mem[t + 256] = bool(mem[_36299 + 256])
                            mem[t + 288] = mem[_36299 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_27810 + 32] = stor15[address(arg5)].field_0
                        mem[_27810 + 64] = (320 * _28902) + 128
                        _38038 = mem[_26987]
                        mem[_27810 + (320 * _28902) + 128] = mem[_26987]
                        mem[_27810 + (320 * _28902) + 160 len ceil32(_38038)] = mem[_26987 + 32 len ceil32(_38038)]
                        var53001 = ceil32(_38038)
                        if ceil32(_38038) > _38038:
                            mem[_27810 + (320 * _28902) + _38038 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_38038) + _27810 + (320 * _28902) + -mem[64] + 160
                    _26988 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_26988] = 4
                    mem[_26988 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                    _27811 = mem[64]
                    mem[mem[64]] = 96
                    _28903 = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                    mem[mem[64] + 96] = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                    idx = 0
                    s = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192
                    t = mem[64] + 128
                    while idx < _28903:
                        _36306 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_36306 + 32]
                        mem[t + 64] = mem[_36306 + 64]
                        mem[t + 96] = mem[_36306 + 96]
                        mem[t + 128] = mem[_36306 + 128]
                        mem[t + 160] = mem[_36306 + 172 len 20]
                        mem[t + 192] = mem[_36306 + 192]
                        mem[t + 224] = mem[_36306 + 236 len 20]
                        mem[t + 256] = bool(mem[_36306 + 256])
                        mem[t + 288] = mem[_36306 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_27811 + 32] = stor15[address(arg5)].field_0
                    mem[_27811 + 64] = (320 * _28903) + 128
                    _38039 = mem[_26988]
                    mem[_27811 + (320 * _28903) + 128] = mem[_26988]
                    mem[_27811 + (320 * _28903) + 160 len ceil32(_38039)] = mem[_26988 + 32 len ceil32(_38039)]
                    var53001 = ceil32(_38039)
                    if ceil32(_38039) > _38039:
                        mem[_27811 + (320 * _28903) + _38039 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_38039) + _27811 + (320 * _28903) + -mem[64] + 160
                mem[64] = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 512
                mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 192] = 0
                mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 224] = 0
                mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 256] = 0
                mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 288] = 0
                mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 320] = 0
                mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 352] = 0
                mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 384] = 0
                mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 416] = 0
                mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 448] = 0
                mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 480] = 0
                mem[var37001] = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 192
                s = var37001
                idx = var37002
                while idx - 1:
                    mem[64] = mem[64] + 320
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 192] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 224] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 256] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 288] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 320] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 352] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 384] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 416] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 448] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 480] = 0
                    mem[s + 32] = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 192
                    s = s + 32
                    idx = idx - 1
                    continue 
                idx = 0
                while idx < stor15[address(arg5)].field_0 - arg1:
                    if arg1 > !idx:
                        revert with 0, 17
                    if arg1 + idx >= mem[(32 * stor13[address(arg5)].field_0) + 128]:
                        revert with 0, 50
                    mem[0] = mem[(32 * arg1 + idx) + (32 * stor13[address(arg5)].field_0) + 160]
                    mem[32] = 12
                    _50014 = sha3(mem[(32 * arg1 + idx) + (32 * stor13[address(arg5)].field_0) + 160], 12)
                    _50015 = mem[64]
                    mem[64] = mem[64] + 320
                    mem[_50015] = stor12[mem[(32 * arg1 + idx) + (32 * stor13[address(arg5)].field_0) + 160]].field_0
                    mem[_50015 + 32] = stor1[_50014]
                    mem[_50015 + 64] = stor2[_50014]
                    mem[_50015 + 96] = stor3[_50014]
                    mem[_50015 + 128] = stor4[_50014]
                    mem[_50015 + 160] = stor5[_50014]
                    mem[_50015 + 192] = stor6[_50014]
                    mem[_50015 + 224] = stor7[_50014].field_0
                    mem[_50015 + 256] = bool(stor7[_50014].field_160)
                    mem[_50015 + 288] = stor8[_50014]
                    if idx >= mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]:
                        revert with 0, 50
                    mem[(32 * idx) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192] = _50015
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
                if arg1 > !(stor15[address(arg5)].field_0 - arg1):
                    revert with 0, 17
                if arg1 > !(stor15[address(arg5)].field_0 - arg1):
                    revert with 0, 17
                if stor15[address(arg5)].field_0 < mem[(32 * stor13[address(arg5)].field_0) + 128]:
                    _51573 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_51573] = 7
                    mem[_51573 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                    _52119 = mem[64]
                    mem[mem[64]] = 96
                    _53043 = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                    mem[mem[64] + 96] = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                    idx = 0
                    s = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192
                    t = mem[64] + 128
                    while idx < _53043:
                        _58023 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_58023 + 32]
                        mem[t + 64] = mem[_58023 + 64]
                        mem[t + 96] = mem[_58023 + 96]
                        mem[t + 128] = mem[_58023 + 128]
                        mem[t + 160] = mem[_58023 + 172 len 20]
                        mem[t + 192] = mem[_58023 + 192]
                        mem[t + 224] = mem[_58023 + 236 len 20]
                        mem[t + 256] = bool(mem[_58023 + 256])
                        mem[t + 288] = mem[_58023 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_52119 + 32] = stor15[address(arg5)].field_0
                    mem[_52119 + 64] = (320 * _53043) + 128
                    _59914 = mem[_51573]
                    mem[_52119 + (320 * _53043) + 128] = mem[_51573]
                    mem[_52119 + (320 * _53043) + 160 len ceil32(_59914)] = mem[_51573 + 32 len ceil32(_59914)]
                    var60001 = ceil32(_59914)
                    if ceil32(_59914) > _59914:
                        mem[_52119 + (320 * _53043) + _59914 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_59914) + _52119 + (320 * _53043) + -mem[64] + 160
                _51574 = mem[64]
                mem[64] = mem[64] + 64
                mem[_51574] = 4
                mem[_51574 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                _52120 = mem[64]
                mem[mem[64]] = 96
                _53044 = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                mem[mem[64] + 96] = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                idx = 0
                s = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192
                t = mem[64] + 128
                while idx < _53044:
                    _58030 = mem[s]
                    mem[t] = mem[mem[s]]
                    mem[t + 32] = mem[_58030 + 32]
                    mem[t + 64] = mem[_58030 + 64]
                    mem[t + 96] = mem[_58030 + 96]
                    mem[t + 128] = mem[_58030 + 128]
                    mem[t + 160] = mem[_58030 + 172 len 20]
                    mem[t + 192] = mem[_58030 + 192]
                    mem[t + 224] = mem[_58030 + 236 len 20]
                    mem[t + 256] = bool(mem[_58030 + 256])
                    mem[t + 288] = mem[_58030 + 288]
                    idx = idx + 1
                    s = s + 32
                    t = t + 320
                    continue 
                mem[_52120 + 32] = stor15[address(arg5)].field_0
                mem[_52120 + 64] = (320 * _53044) + 128
                _59915 = mem[_51574]
                mem[_52120 + (320 * _53044) + 128] = mem[_51574]
                mem[_52120 + (320 * _53044) + 160 len ceil32(_59915)] = mem[_51574 + 32 len ceil32(_59915)]
                var60001 = ceil32(_59915)
                if ceil32(_59915) > _59915:
                    mem[_52120 + (320 * _53044) + _59915 + 160] = 0
                return memory
                  from mem[64]
                   len ceil32(_59915) + _52120 + (320 * _53044) + -mem[64] + 160
            if stor15[address(arg5)].field_0 < 1:
                revert with 0, 17
            if arg3:
                if arg2 <= stor15[address(arg5)].field_0 - 1:
                    if arg2 > test266151307():
                        revert with 0, 65
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160] = arg2
                    mem[64] = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 192
                    if not arg2:
                        idx = 0
                        while idx < arg2:
                            if stor15[address(arg5)].field_0 - 1 < idx:
                                revert with 0, 17
                            if stor15[address(arg5)].field_0 + -idx - 1 >= mem[(32 * stor13[address(arg5)].field_0) + 128]:
                                revert with 0, 50
                            mem[0] = mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor13[address(arg5)].field_0) + 160]
                            mem[32] = 12
                            _25488 = sha3(mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor13[address(arg5)].field_0) + 160], 12)
                            _25489 = mem[64]
                            mem[64] = mem[64] + 320
                            mem[_25489] = stor12[mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor13[address(arg5)].field_0) + 160]].field_0
                            mem[_25489 + 32] = stor1[_25488]
                            mem[_25489 + 64] = stor2[_25488]
                            mem[_25489 + 96] = stor3[_25488]
                            mem[_25489 + 128] = stor4[_25488]
                            mem[_25489 + 160] = stor5[_25488]
                            mem[_25489 + 192] = stor6[_25488]
                            mem[_25489 + 224] = stor7[_25488].field_0
                            mem[_25489 + 256] = bool(stor7[_25488].field_160)
                            mem[_25489 + 288] = stor8[_25488]
                            if idx >= mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]:
                                revert with 0, 50
                            mem[(32 * idx) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192] = _25489
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            continue 
                        if stor15[address(arg5)].field_0 - 1 < arg2:
                            _24727 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_24727] = 4
                            mem[_24727 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                            _24951 = mem[64]
                            mem[mem[64]] = 96
                            _25485 = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                            mem[mem[64] + 96] = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                            idx = 0
                            s = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192
                            t = mem[64] + 128
                            while idx < _25485:
                                _36313 = mem[s]
                                mem[t] = mem[mem[s]]
                                mem[t + 32] = mem[_36313 + 32]
                                mem[t + 64] = mem[_36313 + 64]
                                mem[t + 96] = mem[_36313 + 96]
                                mem[t + 128] = mem[_36313 + 128]
                                mem[t + 160] = mem[_36313 + 172 len 20]
                                mem[t + 192] = mem[_36313 + 192]
                                mem[t + 224] = mem[_36313 + 236 len 20]
                                mem[t + 256] = bool(mem[_36313 + 256])
                                mem[t + 288] = mem[_36313 + 288]
                                idx = idx + 1
                                s = s + 32
                                t = t + 320
                                continue 
                            mem[_24951 + 32] = 0
                            mem[_24951 + 64] = (320 * _25485) + 128
                            _38040 = mem[_24727]
                            mem[_24951 + (320 * _25485) + 128] = mem[_24727]
                            mem[_24951 + (320 * _25485) + 160 len ceil32(_38040)] = mem[_24727 + 32 len ceil32(_38040)]
                            var44001 = ceil32(_38040)
                            if ceil32(_38040) > _38040:
                                mem[_24951 + (320 * _25485) + _38040 + 160] = 0
                            return memory
                              from mem[64]
                               len ceil32(_38040) + _24951 + (320 * _25485) + -mem[64] + 160
                        _25486 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_25486] = 7
                        mem[_25486 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                        _26379 = mem[64]
                        mem[mem[64]] = 96
                        _26990 = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                        mem[mem[64] + 96] = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                        idx = 0
                        s = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192
                        t = mem[64] + 128
                        while idx < _26990:
                            _36320 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_36320 + 32]
                            mem[t + 64] = mem[_36320 + 64]
                            mem[t + 96] = mem[_36320 + 96]
                            mem[t + 128] = mem[_36320 + 128]
                            mem[t + 160] = mem[_36320 + 172 len 20]
                            mem[t + 192] = mem[_36320 + 192]
                            mem[t + 224] = mem[_36320 + 236 len 20]
                            mem[t + 256] = bool(mem[_36320 + 256])
                            mem[t + 288] = mem[_36320 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_26379 + 32] = stor15[address(arg5)].field_0 + -arg2 - 1
                        mem[_26379 + 64] = (320 * _26990) + 128
                        _38041 = mem[_25486]
                        mem[_26379 + (320 * _26990) + 128] = mem[_25486]
                        mem[_26379 + (320 * _26990) + 160 len ceil32(_38041)] = mem[_25486 + 32 len ceil32(_38041)]
                        var47001 = ceil32(_38041)
                        if ceil32(_38041) > _38041:
                            mem[_26379 + (320 * _26990) + _38041 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_38041) + _26379 + (320 * _26990) + -mem[64] + 160
                    mem[64] = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 512
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 192] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 256] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 288] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 320] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 352] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 384] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 416] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 448] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 480] = 0
                    mem[var34001] = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 192
                    s = var34001
                    idx = var34002
                    while idx - 1:
                        mem[64] = mem[64] + 320
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 192] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 256] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 288] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 320] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 352] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 384] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 416] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 448] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 480] = 0
                        mem[s + 32] = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 192
                        s = s + 32
                        idx = idx - 1
                        continue 
                    idx = 0
                    while idx < arg2:
                        if stor15[address(arg5)].field_0 - 1 < idx:
                            revert with 0, 17
                        if stor15[address(arg5)].field_0 + -idx - 1 >= mem[(32 * stor13[address(arg5)].field_0) + 128]:
                            revert with 0, 50
                        mem[0] = mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor13[address(arg5)].field_0) + 160]
                        mem[32] = 12
                        _50022 = sha3(mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor13[address(arg5)].field_0) + 160], 12)
                        _50023 = mem[64]
                        mem[64] = mem[64] + 320
                        mem[_50023] = stor12[mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor13[address(arg5)].field_0) + 160]].field_0
                        mem[_50023 + 32] = stor1[_50022]
                        mem[_50023 + 64] = stor2[_50022]
                        mem[_50023 + 96] = stor3[_50022]
                        mem[_50023 + 128] = stor4[_50022]
                        mem[_50023 + 160] = stor5[_50022]
                        mem[_50023 + 192] = stor6[_50022]
                        mem[_50023 + 224] = stor7[_50022].field_0
                        mem[_50023 + 256] = bool(stor7[_50022].field_160)
                        mem[_50023 + 288] = stor8[_50022]
                        if idx >= mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]:
                            revert with 0, 50
                        mem[(32 * idx) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192] = _50023
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if stor15[address(arg5)].field_0 - 1 >= arg2:
                        _50020 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_50020] = 7
                        mem[_50020 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                        _50994 = mem[64]
                        mem[mem[64]] = 96
                        _51576 = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                        mem[mem[64] + 96] = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                        idx = 0
                        s = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192
                        t = mem[64] + 128
                        while idx < _51576:
                            _58044 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_58044 + 32]
                            mem[t + 64] = mem[_58044 + 64]
                            mem[t + 96] = mem[_58044 + 96]
                            mem[t + 128] = mem[_58044 + 128]
                            mem[t + 160] = mem[_58044 + 172 len 20]
                            mem[t + 192] = mem[_58044 + 192]
                            mem[t + 224] = mem[_58044 + 236 len 20]
                            mem[t + 256] = bool(mem[_58044 + 256])
                            mem[t + 288] = mem[_58044 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_50994 + 32] = stor15[address(arg5)].field_0 + -arg2 - 1
                        mem[_50994 + 64] = (320 * _51576) + 128
                        _59917 = mem[_50020]
                        mem[_50994 + (320 * _51576) + 128] = mem[_50020]
                        mem[_50994 + (320 * _51576) + 160 len ceil32(_59917)] = mem[_50020 + 32 len ceil32(_59917)]
                        if ceil32(_59917) > _59917:
                            mem[_50994 + (320 * _51576) + _59917 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_59917) + _50994 + (320 * _51576) + -mem[64] + 160
                    _49243 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_49243] = 4
                    mem[_49243 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                    _49435 = mem[64]
                    mem[mem[64]] = 96
                    _50019 = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                    mem[mem[64] + 96] = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                    idx = 0
                    s = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192
                    t = mem[64] + 128
                    while idx < _50019:
                        _58037 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_58037 + 32]
                        mem[t + 64] = mem[_58037 + 64]
                        mem[t + 96] = mem[_58037 + 96]
                        mem[t + 128] = mem[_58037 + 128]
                        mem[t + 160] = mem[_58037 + 172 len 20]
                        mem[t + 192] = mem[_58037 + 192]
                        mem[t + 224] = mem[_58037 + 236 len 20]
                        mem[t + 256] = bool(mem[_58037 + 256])
                        mem[t + 288] = mem[_58037 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_49435 + 32] = 0
                    mem[_49435 + 64] = (320 * _50019) + 128
                    _59916 = mem[_49243]
                    mem[_49435 + (320 * _50019) + 128] = mem[_49243]
                    mem[_49435 + (320 * _50019) + 160 len ceil32(_59916)] = mem[_49243 + 32 len ceil32(_59916)]
                    var51001 = ceil32(_59916)
                    if ceil32(_59916) > _59916:
                        mem[_49435 + (320 * _50019) + _59916 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_59916) + _49435 + (320 * _50019) + -mem[64] + 160
                if 1 > !(stor15[address(arg5)].field_0 - 1):
                    revert with 0, 17
                if stor15[address(arg5)].field_0 > test266151307():
                    revert with 0, 65
                mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160] = stor15[address(arg5)].field_0
                mem[64] = (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 192
                if not stor15[address(arg5)].field_0:
                    idx = 0
                    while idx < stor15[address(arg5)].field_0:
                        if stor15[address(arg5)].field_0 - 1 < idx:
                            revert with 0, 17
                        if stor15[address(arg5)].field_0 + -idx - 1 >= mem[(32 * stor13[address(arg5)].field_0) + 128]:
                            revert with 0, 50
                        mem[0] = mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor13[address(arg5)].field_0) + 160]
                        mem[32] = 12
                        _25494 = sha3(mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor13[address(arg5)].field_0) + 160], 12)
                        _25495 = mem[64]
                        mem[64] = mem[64] + 320
                        mem[_25495] = stor12[mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor13[address(arg5)].field_0) + 160]].field_0
                        mem[_25495 + 32] = stor1[_25494]
                        mem[_25495 + 64] = stor2[_25494]
                        mem[_25495 + 96] = stor3[_25494]
                        mem[_25495 + 128] = stor4[_25494]
                        mem[_25495 + 160] = stor5[_25494]
                        mem[_25495 + 192] = stor6[_25494]
                        mem[_25495 + 224] = stor7[_25494].field_0
                        mem[_25495 + 256] = bool(stor7[_25494].field_160)
                        mem[_25495 + 288] = stor8[_25494]
                        if idx >= mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]:
                            revert with 0, 50
                        mem[(32 * idx) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192] = _25495
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if stor15[address(arg5)].field_0 - 1 < stor15[address(arg5)].field_0:
                        _24728 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_24728] = 4
                        mem[_24728 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                        _24953 = mem[64]
                        mem[mem[64]] = 96
                        _25491 = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                        mem[mem[64] + 96] = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                        idx = 0
                        s = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192
                        t = mem[64] + 128
                        while idx < _25491:
                            _36327 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_36327 + 32]
                            mem[t + 64] = mem[_36327 + 64]
                            mem[t + 96] = mem[_36327 + 96]
                            mem[t + 128] = mem[_36327 + 128]
                            mem[t + 160] = mem[_36327 + 172 len 20]
                            mem[t + 192] = mem[_36327 + 192]
                            mem[t + 224] = mem[_36327 + 236 len 20]
                            mem[t + 256] = bool(mem[_36327 + 256])
                            mem[t + 288] = mem[_36327 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_24953 + 32] = 0
                        mem[_24953 + 64] = (320 * _25491) + 128
                        _38042 = mem[_24728]
                        mem[_24953 + (320 * _25491) + 128] = mem[_24728]
                        mem[_24953 + (320 * _25491) + 160 len ceil32(_38042)] = mem[_24728 + 32 len ceil32(_38042)]
                        var48001 = ceil32(_38042)
                        if ceil32(_38042) > _38042:
                            mem[_24953 + (320 * _25491) + _38042 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_38042) + _24953 + (320 * _25491) + -mem[64] + 160
                    _25492 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_25492] = 7
                    mem[_25492 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                    _26388 = mem[64]
                    mem[mem[64]] = 96
                    _26992 = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                    mem[mem[64] + 96] = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                    idx = 0
                    s = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192
                    t = mem[64] + 128
                    while idx < _26992:
                        _36334 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_36334 + 32]
                        mem[t + 64] = mem[_36334 + 64]
                        mem[t + 96] = mem[_36334 + 96]
                        mem[t + 128] = mem[_36334 + 128]
                        mem[t + 160] = mem[_36334 + 172 len 20]
                        mem[t + 192] = mem[_36334 + 192]
                        mem[t + 224] = mem[_36334 + 236 len 20]
                        mem[t + 256] = bool(mem[_36334 + 256])
                        mem[t + 288] = mem[_36334 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_26388 + 32] = -1
                    mem[_26388 + 64] = (320 * _26992) + 128
                    _38043 = mem[_25492]
                    mem[_26388 + (320 * _26992) + 128] = mem[_25492]
                    mem[_26388 + (320 * _26992) + 160 len ceil32(_38043)] = mem[_25492 + 32 len ceil32(_38043)]
                    var51001 = ceil32(_38043)
                    if ceil32(_38043) > _38043:
                        mem[_26388 + (320 * _26992) + _38043 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_38043) + _26388 + (320 * _26992) + -mem[64] + 160
                mem[64] = (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 512
                mem[(32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 192] = 0
                mem[(32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 224] = 0
                mem[(32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 256] = 0
                mem[(32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 288] = 0
                mem[(32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 320] = 0
                mem[(32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 352] = 0
                mem[(32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 384] = 0
                mem[(32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 416] = 0
                mem[(32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 448] = 0
                mem[(32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 480] = 0
                mem[var38001] = (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 192
                s = var38001
                idx = var38002
                while idx - 1:
                    mem[64] = mem[64] + 320
                    mem[(32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 192] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 224] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 256] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 288] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 320] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 352] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 384] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 416] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 448] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 480] = 0
                    mem[s + 32] = (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 192
                    s = s + 32
                    idx = idx - 1
                    continue 
                idx = 0
                while idx < stor15[address(arg5)].field_0:
                    if stor15[address(arg5)].field_0 - 1 < idx:
                        revert with 0, 17
                    if stor15[address(arg5)].field_0 + -idx - 1 >= mem[(32 * stor13[address(arg5)].field_0) + 128]:
                        revert with 0, 50
                    mem[0] = mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor13[address(arg5)].field_0) + 160]
                    mem[32] = 12
                    _50030 = sha3(mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor13[address(arg5)].field_0) + 160], 12)
                    _50031 = mem[64]
                    mem[64] = mem[64] + 320
                    mem[_50031] = stor12[mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor13[address(arg5)].field_0) + 160]].field_0
                    mem[_50031 + 32] = stor1[_50030]
                    mem[_50031 + 64] = stor2[_50030]
                    mem[_50031 + 96] = stor3[_50030]
                    mem[_50031 + 128] = stor4[_50030]
                    mem[_50031 + 160] = stor5[_50030]
                    mem[_50031 + 192] = stor6[_50030]
                    mem[_50031 + 224] = stor7[_50030].field_0
                    mem[_50031 + 256] = bool(stor7[_50030].field_160)
                    mem[_50031 + 288] = stor8[_50030]
                    if idx >= mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]:
                        revert with 0, 50
                    mem[(32 * idx) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192] = _50031
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
                if stor15[address(arg5)].field_0 - 1 < stor15[address(arg5)].field_0:
                    _49244 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_49244] = 4
                    mem[_49244 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                    _49439 = mem[64]
                    mem[mem[64]] = 96
                    _50027 = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                    mem[mem[64] + 96] = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                    idx = 0
                    s = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192
                    t = mem[64] + 128
                    while idx < _50027:
                        _58051 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_58051 + 32]
                        mem[t + 64] = mem[_58051 + 64]
                        mem[t + 96] = mem[_58051 + 96]
                        mem[t + 128] = mem[_58051 + 128]
                        mem[t + 160] = mem[_58051 + 172 len 20]
                        mem[t + 192] = mem[_58051 + 192]
                        mem[t + 224] = mem[_58051 + 236 len 20]
                        mem[t + 256] = bool(mem[_58051 + 256])
                        mem[t + 288] = mem[_58051 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_49439 + 32] = 0
                    mem[_49439 + 64] = (320 * _50027) + 128
                    _59918 = mem[_49244]
                    mem[_49439 + (320 * _50027) + 128] = mem[_49244]
                    mem[_49439 + (320 * _50027) + 160 len ceil32(_59918)] = mem[_49244 + 32 len ceil32(_59918)]
                    var55001 = ceil32(_59918)
                    if ceil32(_59918) > _59918:
                        mem[_49439 + (320 * _50027) + _59918 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_59918) + _49439 + (320 * _50027) + -mem[64] + 160
                _50028 = mem[64]
                mem[64] = mem[64] + 64
                mem[_50028] = 7
                mem[_50028 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                _51002 = mem[64]
                mem[mem[64]] = 96
                _51578 = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                mem[mem[64] + 96] = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                idx = 0
                s = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192
                t = mem[64] + 128
                while idx < _51578:
                    _58058 = mem[s]
                    mem[t] = mem[mem[s]]
                    mem[t + 32] = mem[_58058 + 32]
                    mem[t + 64] = mem[_58058 + 64]
                    mem[t + 96] = mem[_58058 + 96]
                    mem[t + 128] = mem[_58058 + 128]
                    mem[t + 160] = mem[_58058 + 172 len 20]
                    mem[t + 192] = mem[_58058 + 192]
                    mem[t + 224] = mem[_58058 + 236 len 20]
                    mem[t + 256] = bool(mem[_58058 + 256])
                    mem[t + 288] = mem[_58058 + 288]
                    idx = idx + 1
                    s = s + 32
                    t = t + 320
                    continue 
                mem[_51002 + 32] = -1
                mem[_51002 + 64] = (320 * _51578) + 128
                _59919 = mem[_50028]
                mem[_51002 + (320 * _51578) + 128] = mem[_50028]
                mem[_51002 + (320 * _51578) + 160 len ceil32(_59919)] = mem[_50028 + 32 len ceil32(_59919)]
                var58001 = ceil32(_59919)
                if ceil32(_59919) > _59919:
                    mem[_51002 + (320 * _51578) + _59919 + 160] = 0
                return memory
                  from mem[64]
                   len ceil32(_59919) + _51002 + (320 * _51578) + -mem[64] + 160
            if stor15[address(arg5)].field_0 < stor15[address(arg5)].field_0 - 1:
                revert with 0, 17
            if arg2 > 1:
                if stor15[address(arg5)].field_0 < stor15[address(arg5)].field_0 - 1:
                    revert with 0, 17
                mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160] = 1
                mem[64] = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 544
                mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224] = 0
                mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 256] = 0
                mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 288] = 0
                mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 320] = 0
                mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 352] = 0
                mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 384] = 0
                mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 416] = 0
                mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 448] = 0
                mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 480] = 0
                mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 512] = 0
                mem[var41001] = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                s = var41001
                idx = var41002
                while idx - 1:
                    mem[64] = mem[64] + 320
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 256] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 288] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 320] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 352] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 384] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 416] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 448] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 480] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 512] = 0
                    mem[s + 32] = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                    s = s + 32
                    idx = idx - 1
                    continue 
                idx = 0
                while idx < 1:
                    if stor15[address(arg5)].field_0 - 1 > !idx:
                        revert with 0, 17
                    if stor15[address(arg5)].field_0 + idx - 1 >= mem[(32 * stor13[address(arg5)].field_0) + 128]:
                        revert with 0, 50
                    mem[0] = mem[(32 * stor15[address(arg5)].field_0 + idx - 1) + (32 * stor13[address(arg5)].field_0) + 160]
                    mem[32] = 12
                    _50042 = sha3(mem[(32 * stor15[address(arg5)].field_0 + idx - 1) + (32 * stor13[address(arg5)].field_0) + 160], 12)
                    _50043 = mem[64]
                    mem[64] = mem[64] + 320
                    mem[_50043] = stor12[mem[(32 * stor15[address(arg5)].field_0 + idx - 1) + (32 * stor13[address(arg5)].field_0) + 160]].field_0
                    mem[_50043 + 32] = stor1[_50042]
                    mem[_50043 + 64] = stor2[_50042]
                    mem[_50043 + 96] = stor3[_50042]
                    mem[_50043 + 128] = stor4[_50042]
                    mem[_50043 + 160] = stor5[_50042]
                    mem[_50043 + 192] = stor6[_50042]
                    mem[_50043 + 224] = stor7[_50042].field_0
                    mem[_50043 + 256] = bool(stor7[_50042].field_160)
                    mem[_50043 + 288] = stor8[_50042]
                    if idx >= mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]:
                        revert with 0, 50
                    mem[(32 * idx) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192] = _50043
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
                if stor15[address(arg5)].field_0 - 1 > !1:
                    revert with 0, 17
                if stor15[address(arg5)].field_0 - 1 > !1:
                    revert with 0, 17
                if stor15[address(arg5)].field_0 < mem[(32 * stor13[address(arg5)].field_0) + 128]:
                    _51581 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_51581] = 7
                    mem[_51581 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                    _52139 = mem[64]
                    mem[mem[64]] = 96
                    _53051 = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                    mem[mem[64] + 96] = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                    idx = 0
                    s = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192
                    t = mem[64] + 128
                    while idx < _53051:
                        _58079 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_58079 + 32]
                        mem[t + 64] = mem[_58079 + 64]
                        mem[t + 96] = mem[_58079 + 96]
                        mem[t + 128] = mem[_58079 + 128]
                        mem[t + 160] = mem[_58079 + 172 len 20]
                        mem[t + 192] = mem[_58079 + 192]
                        mem[t + 224] = mem[_58079 + 236 len 20]
                        mem[t + 256] = bool(mem[_58079 + 256])
                        mem[t + 288] = mem[_58079 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_52139 + 32] = stor15[address(arg5)].field_0
                    mem[_52139 + 64] = (320 * _53051) + 128
                    _59922 = mem[_51581]
                    mem[_52139 + (320 * _53051) + 128] = mem[_51581]
                    mem[_52139 + (320 * _53051) + 160 len ceil32(_59922)] = mem[_51581 + 32 len ceil32(_59922)]
                    if ceil32(_59922) > _59922:
                        mem[_52139 + (320 * _53051) + _59922 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_59922) + _52139 + (320 * _53051) + -mem[64] + 160
                _51582 = mem[64]
                mem[64] = mem[64] + 64
                mem[_51582] = 4
                mem[_51582 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                _52140 = mem[64]
                mem[mem[64]] = 96
                _53052 = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                mem[mem[64] + 96] = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                idx = 0
                s = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192
                t = mem[64] + 128
                while idx < _53052:
                    _58086 = mem[s]
                    mem[t] = mem[mem[s]]
                    mem[t + 32] = mem[_58086 + 32]
                    mem[t + 64] = mem[_58086 + 64]
                    mem[t + 96] = mem[_58086 + 96]
                    mem[t + 128] = mem[_58086 + 128]
                    mem[t + 160] = mem[_58086 + 172 len 20]
                    mem[t + 192] = mem[_58086 + 192]
                    mem[t + 224] = mem[_58086 + 236 len 20]
                    mem[t + 256] = bool(mem[_58086 + 256])
                    mem[t + 288] = mem[_58086 + 288]
                    idx = idx + 1
                    s = s + 32
                    t = t + 320
                    continue 
                mem[_52140 + 32] = stor15[address(arg5)].field_0
                mem[_52140 + 64] = (320 * _53052) + 128
                _59923 = mem[_51582]
                mem[_52140 + (320 * _53052) + 128] = mem[_51582]
                mem[_52140 + (320 * _53052) + 160 len ceil32(_59923)] = mem[_51582 + 32 len ceil32(_59923)]
                if ceil32(_59923) > _59923:
                    mem[_52140 + (320 * _53052) + _59923 + 160] = 0
                return memory
                  from mem[64]
                   len ceil32(_59923) + _52140 + (320 * _53052) + -mem[64] + 160
            if arg2 > test266151307():
                revert with 0, 65
            mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160] = arg2
            mem[64] = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 192
            if not arg2:
                idx = 0
                while idx < arg2:
                    if stor15[address(arg5)].field_0 - 1 > !idx:
                        revert with 0, 17
                    if stor15[address(arg5)].field_0 + idx - 1 >= mem[(32 * stor13[address(arg5)].field_0) + 128]:
                        revert with 0, 50
                    mem[0] = mem[(32 * stor15[address(arg5)].field_0 + idx - 1) + (32 * stor13[address(arg5)].field_0) + 160]
                    mem[32] = 12
                    _25498 = sha3(mem[(32 * stor15[address(arg5)].field_0 + idx - 1) + (32 * stor13[address(arg5)].field_0) + 160], 12)
                    _25499 = mem[64]
                    mem[64] = mem[64] + 320
                    mem[_25499] = stor12[mem[(32 * stor15[address(arg5)].field_0 + idx - 1) + (32 * stor13[address(arg5)].field_0) + 160]].field_0
                    mem[_25499 + 32] = stor1[_25498]
                    mem[_25499 + 64] = stor2[_25498]
                    mem[_25499 + 96] = stor3[_25498]
                    mem[_25499 + 128] = stor4[_25498]
                    mem[_25499 + 160] = stor5[_25498]
                    mem[_25499 + 192] = stor6[_25498]
                    mem[_25499 + 224] = stor7[_25498].field_0
                    mem[_25499 + 256] = bool(stor7[_25498].field_160)
                    mem[_25499 + 288] = stor8[_25498]
                    if idx >= mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]:
                        revert with 0, 50
                    mem[(32 * idx) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192] = _25499
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
                if stor15[address(arg5)].field_0 - 1 > !arg2:
                    revert with 0, 17
                if stor15[address(arg5)].field_0 - 1 > !arg2:
                    revert with 0, 17
                if stor15[address(arg5)].field_0 + arg2 - 1 < mem[(32 * stor13[address(arg5)].field_0) + 128]:
                    _26993 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_26993] = 7
                    mem[_26993 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                    _27844 = mem[64]
                    mem[mem[64]] = 96
                    _28908 = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                    mem[mem[64] + 96] = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                    idx = 0
                    s = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192
                    t = mem[64] + 128
                    while idx < _28908:
                        _36341 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_36341 + 32]
                        mem[t + 64] = mem[_36341 + 64]
                        mem[t + 96] = mem[_36341 + 96]
                        mem[t + 128] = mem[_36341 + 128]
                        mem[t + 160] = mem[_36341 + 172 len 20]
                        mem[t + 192] = mem[_36341 + 192]
                        mem[t + 224] = mem[_36341 + 236 len 20]
                        mem[t + 256] = bool(mem[_36341 + 256])
                        mem[t + 288] = mem[_36341 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_27844 + 32] = stor15[address(arg5)].field_0 + arg2 - 1
                    mem[_27844 + 64] = (320 * _28908) + 128
                    _38044 = mem[_26993]
                    mem[_27844 + (320 * _28908) + 128] = mem[_26993]
                    mem[_27844 + (320 * _28908) + 160 len ceil32(_38044)] = mem[_26993 + 32 len ceil32(_38044)]
                    var53001 = ceil32(_38044)
                    if ceil32(_38044) > _38044:
                        mem[_27844 + (320 * _28908) + _38044 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_38044) + _27844 + (320 * _28908) + -mem[64] + 160
                _26994 = mem[64]
                mem[64] = mem[64] + 64
                mem[_26994] = 4
                mem[_26994 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                _27845 = mem[64]
                mem[mem[64]] = 96
                _28909 = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                mem[mem[64] + 96] = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                idx = 0
                s = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192
                t = mem[64] + 128
                while idx < _28909:
                    _36348 = mem[s]
                    mem[t] = mem[mem[s]]
                    mem[t + 32] = mem[_36348 + 32]
                    mem[t + 64] = mem[_36348 + 64]
                    mem[t + 96] = mem[_36348 + 96]
                    mem[t + 128] = mem[_36348 + 128]
                    mem[t + 160] = mem[_36348 + 172 len 20]
                    mem[t + 192] = mem[_36348 + 192]
                    mem[t + 224] = mem[_36348 + 236 len 20]
                    mem[t + 256] = bool(mem[_36348 + 256])
                    mem[t + 288] = mem[_36348 + 288]
                    idx = idx + 1
                    s = s + 32
                    t = t + 320
                    continue 
                mem[_27845 + 32] = stor15[address(arg5)].field_0 + arg2 - 1
                mem[_27845 + 64] = (320 * _28909) + 128
                _38045 = mem[_26994]
                mem[_27845 + (320 * _28909) + 128] = mem[_26994]
                mem[_27845 + (320 * _28909) + 160 len ceil32(_38045)] = mem[_26994 + 32 len ceil32(_38045)]
                var53001 = ceil32(_38045)
                if ceil32(_38045) > _38045:
                    mem[_27845 + (320 * _28909) + _38045 + 160] = 0
                return memory
                  from mem[64]
                   len ceil32(_38045) + _27845 + (320 * _28909) + -mem[64] + 160
            mem[64] = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 512
            mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 192] = 0
            mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224] = 0
            mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 256] = 0
            mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 288] = 0
            mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 320] = 0
            mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 352] = 0
            mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 384] = 0
            mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 416] = 0
            mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 448] = 0
            mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 480] = 0
            mem[var37001] = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 192
            s = var37001
            idx = var37002
            while idx - 1:
                mem[64] = mem[64] + 320
                mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 192] = 0
                mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224] = 0
                mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 256] = 0
                mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 288] = 0
                mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 320] = 0
                mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 352] = 0
                mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 384] = 0
                mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 416] = 0
                mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 448] = 0
                mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 480] = 0
                mem[s + 32] = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 192
                s = s + 32
                idx = idx - 1
                continue 
            idx = 0
            while idx < arg2:
                if stor15[address(arg5)].field_0 - 1 > !idx:
                    revert with 0, 17
                if stor15[address(arg5)].field_0 + idx - 1 >= mem[(32 * stor13[address(arg5)].field_0) + 128]:
                    revert with 0, 50
                mem[0] = mem[(32 * stor15[address(arg5)].field_0 + idx - 1) + (32 * stor13[address(arg5)].field_0) + 160]
                mem[32] = 12
                _50036 = sha3(mem[(32 * stor15[address(arg5)].field_0 + idx - 1) + (32 * stor13[address(arg5)].field_0) + 160], 12)
                _50037 = mem[64]
                mem[64] = mem[64] + 320
                mem[_50037] = stor12[mem[(32 * stor15[address(arg5)].field_0 + idx - 1) + (32 * stor13[address(arg5)].field_0) + 160]].field_0
                mem[_50037 + 32] = stor1[_50036]
                mem[_50037 + 64] = stor2[_50036]
                mem[_50037 + 96] = stor3[_50036]
                mem[_50037 + 128] = stor4[_50036]
                mem[_50037 + 160] = stor5[_50036]
                mem[_50037 + 192] = stor6[_50036]
                mem[_50037 + 224] = stor7[_50036].field_0
                mem[_50037 + 256] = bool(stor7[_50036].field_160)
                mem[_50037 + 288] = stor8[_50036]
                if idx >= mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]:
                    revert with 0, 50
                mem[(32 * idx) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192] = _50037
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
            if stor15[address(arg5)].field_0 - 1 > !arg2:
                revert with 0, 17
            if stor15[address(arg5)].field_0 - 1 > !arg2:
                revert with 0, 17
            if stor15[address(arg5)].field_0 + arg2 - 1 < mem[(32 * stor13[address(arg5)].field_0) + 128]:
                _51579 = mem[64]
                mem[64] = mem[64] + 64
                mem[_51579] = 7
                mem[_51579 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                _52137 = mem[64]
                mem[mem[64]] = 96
                _53049 = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                mem[mem[64] + 96] = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                idx = 0
                s = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192
                t = mem[64] + 128
                while idx < _53049:
                    _58065 = mem[s]
                    mem[t] = mem[mem[s]]
                    mem[t + 32] = mem[_58065 + 32]
                    mem[t + 64] = mem[_58065 + 64]
                    mem[t + 96] = mem[_58065 + 96]
                    mem[t + 128] = mem[_58065 + 128]
                    mem[t + 160] = mem[_58065 + 172 len 20]
                    mem[t + 192] = mem[_58065 + 192]
                    mem[t + 224] = mem[_58065 + 236 len 20]
                    mem[t + 256] = bool(mem[_58065 + 256])
                    mem[t + 288] = mem[_58065 + 288]
                    idx = idx + 1
                    s = s + 32
                    t = t + 320
                    continue 
                mem[_52137 + 32] = stor15[address(arg5)].field_0 + arg2 - 1
                mem[_52137 + 64] = (320 * _53049) + 128
                _59920 = mem[_51579]
                mem[_52137 + (320 * _53049) + 128] = mem[_51579]
                mem[_52137 + (320 * _53049) + 160 len ceil32(_59920)] = mem[_51579 + 32 len ceil32(_59920)]
                var60001 = ceil32(_59920)
                if ceil32(_59920) > _59920:
                    mem[_52137 + (320 * _53049) + _59920 + 160] = 0
                return memory
                  from mem[64]
                   len ceil32(_59920) + _52137 + (320 * _53049) + -mem[64] + 160
            _51580 = mem[64]
            mem[64] = mem[64] + 64
            mem[_51580] = 4
            mem[_51580 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
            _52138 = mem[64]
            mem[mem[64]] = 96
            _53050 = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
            mem[mem[64] + 96] = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
            idx = 0
            s = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192
            t = mem[64] + 128
            while idx < _53050:
                _58072 = mem[s]
                mem[t] = mem[mem[s]]
                mem[t + 32] = mem[_58072 + 32]
                mem[t + 64] = mem[_58072 + 64]
                mem[t + 96] = mem[_58072 + 96]
                mem[t + 128] = mem[_58072 + 128]
                mem[t + 160] = mem[_58072 + 172 len 20]
                mem[t + 192] = mem[_58072 + 192]
                mem[t + 224] = mem[_58072 + 236 len 20]
                mem[t + 256] = bool(mem[_58072 + 256])
                mem[t + 288] = mem[_58072 + 288]
                idx = idx + 1
                s = s + 32
                t = t + 320
                continue 
            mem[_52138 + 32] = stor15[address(arg5)].field_0 + arg2 - 1
            mem[_52138 + 64] = (320 * _53050) + 128
            _59921 = mem[_51580]
            mem[_52138 + (320 * _53050) + 128] = mem[_51580]
            mem[_52138 + (320 * _53050) + 160 len ceil32(_59921)] = mem[_51580 + 32 len ceil32(_59921)]
            var60001 = ceil32(_59921)
            if ceil32(_59921) > _59921:
                mem[_52138 + (320 * _53050) + _59921 + 160] = 0
            return memory
              from mem[64]
               len ceil32(_59921) + _52138 + (320 * _53050) + -mem[64] + 160
        mem[0] = sha3(address(arg5), 13)
        mem[128] = stor13[address(arg5)].field_0
        idx = 128
        s = 0
        while (32 * stor13[address(arg5)].field_0) + 96 > idx:
            mem[idx + 32] = stor13[address(arg5)][s].field_256
            idx = idx + 32
            s = s + 1
            continue 
        if arg4 != 2:
            if not stor13[address(arg5)].field_0:
                mem[64] = (32 * stor13[address(arg5)].field_0) + 224
                mem[(32 * stor13[address(arg5)].field_0) + 160] = 4
                mem[(32 * stor13[address(arg5)].field_0) + 192] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                mem[(32 * stor13[address(arg5)].field_0) + 224] = 96
                _13069 = mem[(32 * stor13[address(arg5)].field_0) + 128]
                mem[(32 * stor13[address(arg5)].field_0) + 320] = mem[(32 * stor13[address(arg5)].field_0) + 128]
                idx = 0
                s = (32 * stor13[address(arg5)].field_0) + 160
                t = (32 * stor13[address(arg5)].field_0) + 352
                while idx < mem[(32 * stor13[address(arg5)].field_0) + 128]:
                    _24446 = mem[s]
                    mem[t] = mem[mem[s]]
                    mem[t + 32] = mem[_24446 + 32]
                    mem[t + 64] = mem[_24446 + 64]
                    mem[t + 96] = mem[_24446 + 96]
                    mem[t + 128] = mem[_24446 + 128]
                    mem[t + 160] = mem[_24446 + 172 len 20]
                    mem[t + 192] = mem[_24446 + 192]
                    mem[t + 224] = mem[_24446 + 236 len 20]
                    mem[t + 256] = bool(mem[_24446 + 256])
                    mem[t + 288] = mem[_24446 + 288]
                    idx = idx + 1
                    s = s + 32
                    t = t + 320
                    continue 
                mem[(32 * stor13[address(arg5)].field_0) + 256] = 0
                mem[(32 * stor13[address(arg5)].field_0) + 288] = (320 * _13069) + 128
                mem[(32 * stor13[address(arg5)].field_0) + (320 * _13069) + 352] = mem[(32 * stor13[address(arg5)].field_0) + 160]
                mem[(32 * stor13[address(arg5)].field_0) + (320 * _13069) + 384 len ceil32(mem[(32 * stor13[address(arg5)].field_0) + 160])] = mem[(32 * stor13[address(arg5)].field_0) + 192 len ceil32(mem[(32 * stor13[address(arg5)].field_0) + 160])]
                var30001 = ceil32(mem[(32 * stor13[address(arg5)].field_0) + 160])
                if ceil32(mem[(32 * stor13[address(arg5)].field_0) + 160]) > mem[(32 * stor13[address(arg5)].field_0) + 160]:
                    mem[(32 * stor13[address(arg5)].field_0) + (320 * _13069) + mem[(32 * stor13[address(arg5)].field_0) + 160] + 384] = 0
                return memory
                  from mem[64]
                   len ceil32(mem[(32 * stor13[address(arg5)].field_0) + 160]) + (32 * stor13[address(arg5)].field_0) + (320 * _13069) + -mem[64] + 384
            if arg1 < stor13[address(arg5)].field_0:
                if arg3:
                    if arg2 <= arg1:
                        if arg2 > test266151307():
                            revert with 0, 65
                        mem[(32 * stor13[address(arg5)].field_0) + 128] = arg2
                        mem[64] = (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 160
                        if not arg2:
                            idx = 0
                            while idx < arg2:
                                if arg1 < idx:
                                    revert with 0, 17
                                if arg1 - idx >= mem[96]:
                                    revert with 0, 50
                                mem[0] = mem[(32 * arg1 - idx) + 128]
                                mem[32] = 12
                                _25509 = sha3(mem[(32 * arg1 - idx) + 128], 12)
                                _25510 = mem[64]
                                mem[64] = mem[64] + 320
                                mem[_25510] = stor12[mem[(32 * arg1 - idx) + 128]].field_0
                                mem[_25510 + 32] = stor1[_25509]
                                mem[_25510 + 64] = stor2[_25509]
                                mem[_25510 + 96] = stor3[_25509]
                                mem[_25510 + 128] = stor4[_25509]
                                mem[_25510 + 160] = stor5[_25509]
                                mem[_25510 + 192] = stor6[_25509]
                                mem[_25510 + 224] = stor7[_25509].field_0
                                mem[_25510 + 256] = bool(stor7[_25509].field_160)
                                mem[_25510 + 288] = stor8[_25509]
                                if idx >= mem[(32 * stor13[address(arg5)].field_0) + 128]:
                                    revert with 0, 50
                                mem[(32 * idx) + (32 * stor13[address(arg5)].field_0) + 160] = _25510
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                continue 
                            if arg1 < arg2:
                                _24730 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_24730] = 4
                                mem[_24730 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                                _24958 = mem[64]
                                mem[mem[64]] = 96
                                _25506 = mem[(32 * stor13[address(arg5)].field_0) + 128]
                                mem[mem[64] + 96] = mem[(32 * stor13[address(arg5)].field_0) + 128]
                                idx = 0
                                s = (32 * stor13[address(arg5)].field_0) + 160
                                t = mem[64] + 128
                                while idx < _25506:
                                    _36370 = mem[s]
                                    mem[t] = mem[mem[s]]
                                    mem[t + 32] = mem[_36370 + 32]
                                    mem[t + 64] = mem[_36370 + 64]
                                    mem[t + 96] = mem[_36370 + 96]
                                    mem[t + 128] = mem[_36370 + 128]
                                    mem[t + 160] = mem[_36370 + 172 len 20]
                                    mem[t + 192] = mem[_36370 + 192]
                                    mem[t + 224] = mem[_36370 + 236 len 20]
                                    mem[t + 256] = bool(mem[_36370 + 256])
                                    mem[t + 288] = mem[_36370 + 288]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 320
                                    continue 
                                mem[_24958 + 32] = 0
                                mem[_24958 + 64] = (320 * _25506) + 128
                                _38048 = mem[_24730]
                                mem[_24958 + (320 * _25506) + 128] = mem[_24730]
                                mem[_24958 + (320 * _25506) + 160 len ceil32(_38048)] = mem[_24730 + 32 len ceil32(_38048)]
                                var38001 = ceil32(_38048)
                                if ceil32(_38048) > _38048:
                                    mem[_24958 + (320 * _25506) + _38048 + 160] = 0
                                return memory
                                  from mem[64]
                                   len ceil32(_38048) + _24958 + (320 * _25506) + -mem[64] + 160
                            _25507 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_25507] = 7
                            mem[_25507 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                            _26399 = mem[64]
                            mem[mem[64]] = 96
                            _26999 = mem[(32 * stor13[address(arg5)].field_0) + 128]
                            mem[mem[64] + 96] = mem[(32 * stor13[address(arg5)].field_0) + 128]
                            idx = 0
                            s = (32 * stor13[address(arg5)].field_0) + 160
                            t = mem[64] + 128
                            while idx < _26999:
                                _36377 = mem[s]
                                mem[t] = mem[mem[s]]
                                mem[t + 32] = mem[_36377 + 32]
                                mem[t + 64] = mem[_36377 + 64]
                                mem[t + 96] = mem[_36377 + 96]
                                mem[t + 128] = mem[_36377 + 128]
                                mem[t + 160] = mem[_36377 + 172 len 20]
                                mem[t + 192] = mem[_36377 + 192]
                                mem[t + 224] = mem[_36377 + 236 len 20]
                                mem[t + 256] = bool(mem[_36377 + 256])
                                mem[t + 288] = mem[_36377 + 288]
                                idx = idx + 1
                                s = s + 32
                                t = t + 320
                                continue 
                            mem[_26399 + 32] = arg1 - arg2
                            mem[_26399 + 64] = (320 * _26999) + 128
                            _38049 = mem[_25507]
                            mem[_26399 + (320 * _26999) + 128] = mem[_25507]
                            mem[_26399 + (320 * _26999) + 160 len ceil32(_38049)] = mem[_25507 + 32 len ceil32(_38049)]
                            var41001 = ceil32(_38049)
                            if ceil32(_38049) > _38049:
                                mem[_26399 + (320 * _26999) + _38049 + 160] = 0
                            return memory
                              from mem[64]
                               len ceil32(_38049) + _26399 + (320 * _26999) + -mem[64] + 160
                        mem[64] = (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 480
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * arg2) + 160] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * arg2) + 192] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * arg2) + 224] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * arg2) + 256] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * arg2) + 288] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * arg2) + 320] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * arg2) + 352] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * arg2) + 384] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * arg2) + 416] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * arg2) + 448] = 0
                        mem[var28001] = (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 160
                        s = var28001
                        idx = var28002
                        while idx - 1:
                            mem[64] = mem[64] + 320
                            mem[(32 * stor13[address(arg5)].field_0) + (32 * arg2) + 160] = 0
                            mem[(32 * stor13[address(arg5)].field_0) + (32 * arg2) + 192] = 0
                            mem[(32 * stor13[address(arg5)].field_0) + (32 * arg2) + 224] = 0
                            mem[(32 * stor13[address(arg5)].field_0) + (32 * arg2) + 256] = 0
                            mem[(32 * stor13[address(arg5)].field_0) + (32 * arg2) + 288] = 0
                            mem[(32 * stor13[address(arg5)].field_0) + (32 * arg2) + 320] = 0
                            mem[(32 * stor13[address(arg5)].field_0) + (32 * arg2) + 352] = 0
                            mem[(32 * stor13[address(arg5)].field_0) + (32 * arg2) + 384] = 0
                            mem[(32 * stor13[address(arg5)].field_0) + (32 * arg2) + 416] = 0
                            mem[(32 * stor13[address(arg5)].field_0) + (32 * arg2) + 448] = 0
                            mem[s + 32] = (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 160
                            s = s + 32
                            idx = idx - 1
                            continue 
                        idx = 0
                        while idx < arg2:
                            if arg1 < idx:
                                revert with 0, 17
                            if arg1 - idx >= mem[96]:
                                revert with 0, 50
                            mem[0] = mem[(32 * arg1 - idx) + 128]
                            mem[32] = 12
                            _50050 = sha3(mem[(32 * arg1 - idx) + 128], 12)
                            _50051 = mem[64]
                            mem[64] = mem[64] + 320
                            mem[_50051] = stor12[mem[(32 * arg1 - idx) + 128]].field_0
                            mem[_50051 + 32] = stor1[_50050]
                            mem[_50051 + 64] = stor2[_50050]
                            mem[_50051 + 96] = stor3[_50050]
                            mem[_50051 + 128] = stor4[_50050]
                            mem[_50051 + 160] = stor5[_50050]
                            mem[_50051 + 192] = stor6[_50050]
                            mem[_50051 + 224] = stor7[_50050].field_0
                            mem[_50051 + 256] = bool(stor7[_50050].field_160)
                            mem[_50051 + 288] = stor8[_50050]
                            if idx >= mem[(32 * stor13[address(arg5)].field_0) + 128]:
                                revert with 0, 50
                            mem[(32 * idx) + (32 * stor13[address(arg5)].field_0) + 160] = _50051
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            continue 
                        if arg1 < arg2:
                            _49245 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_49245] = 4
                            mem[_49245 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                            _49449 = mem[64]
                            mem[mem[64]] = 96
                            _50047 = mem[(32 * stor13[address(arg5)].field_0) + 128]
                            mem[mem[64] + 96] = mem[(32 * stor13[address(arg5)].field_0) + 128]
                            idx = 0
                            s = (32 * stor13[address(arg5)].field_0) + 160
                            t = mem[64] + 128
                            while idx < _50047:
                                _58093 = mem[s]
                                mem[t] = mem[mem[s]]
                                mem[t + 32] = mem[_58093 + 32]
                                mem[t + 64] = mem[_58093 + 64]
                                mem[t + 96] = mem[_58093 + 96]
                                mem[t + 128] = mem[_58093 + 128]
                                mem[t + 160] = mem[_58093 + 172 len 20]
                                mem[t + 192] = mem[_58093 + 192]
                                mem[t + 224] = mem[_58093 + 236 len 20]
                                mem[t + 256] = bool(mem[_58093 + 256])
                                mem[t + 288] = mem[_58093 + 288]
                                idx = idx + 1
                                s = s + 32
                                t = t + 320
                                continue 
                            mem[_49449 + 32] = 0
                            mem[_49449 + 64] = (320 * _50047) + 128
                            _59924 = mem[_49245]
                            mem[_49449 + (320 * _50047) + 128] = mem[_49245]
                            mem[_49449 + (320 * _50047) + 160 len ceil32(_59924)] = mem[_49245 + 32 len ceil32(_59924)]
                            var45001 = ceil32(_59924)
                            if ceil32(_59924) > _59924:
                                mem[_49449 + (320 * _50047) + _59924 + 160] = 0
                            return memory
                              from mem[64]
                               len ceil32(_59924) + _49449 + (320 * _50047) + -mem[64] + 160
                        _50048 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_50048] = 7
                        mem[_50048 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                        _51010 = mem[64]
                        mem[mem[64]] = 96
                        _51584 = mem[(32 * stor13[address(arg5)].field_0) + 128]
                        mem[mem[64] + 96] = mem[(32 * stor13[address(arg5)].field_0) + 128]
                        idx = 0
                        s = (32 * stor13[address(arg5)].field_0) + 160
                        t = mem[64] + 128
                        while idx < _51584:
                            _58100 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_58100 + 32]
                            mem[t + 64] = mem[_58100 + 64]
                            mem[t + 96] = mem[_58100 + 96]
                            mem[t + 128] = mem[_58100 + 128]
                            mem[t + 160] = mem[_58100 + 172 len 20]
                            mem[t + 192] = mem[_58100 + 192]
                            mem[t + 224] = mem[_58100 + 236 len 20]
                            mem[t + 256] = bool(mem[_58100 + 256])
                            mem[t + 288] = mem[_58100 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_51010 + 32] = arg1 - arg2
                        mem[_51010 + 64] = (320 * _51584) + 128
                        _59925 = mem[_50048]
                        mem[_51010 + (320 * _51584) + 128] = mem[_50048]
                        mem[_51010 + (320 * _51584) + 160 len ceil32(_59925)] = mem[_50048 + 32 len ceil32(_59925)]
                        var48001 = ceil32(_59925)
                        if ceil32(_59925) > _59925:
                            mem[_51010 + (320 * _51584) + _59925 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_59925) + _51010 + (320 * _51584) + -mem[64] + 160
                    if 1 > !arg1:
                        revert with 0, 17
                    if arg1 + 1 > test266151307():
                        revert with 0, 65
                    mem[(32 * stor13[address(arg5)].field_0) + 128] = arg1 + 1
                    mem[64] = (32 * stor13[address(arg5)].field_0) + (32 * arg1 + 1) + 160
                    if not arg1 + 1:
                        idx = 0
                        while idx < arg1 + 1:
                            if arg1 < idx:
                                revert with 0, 17
                            if arg1 - idx >= mem[96]:
                                revert with 0, 50
                            mem[0] = mem[(32 * arg1 - idx) + 128]
                            mem[32] = 12
                            _25515 = sha3(mem[(32 * arg1 - idx) + 128], 12)
                            _25516 = mem[64]
                            mem[64] = mem[64] + 320
                            mem[_25516] = stor12[mem[(32 * arg1 - idx) + 128]].field_0
                            mem[_25516 + 32] = stor1[_25515]
                            mem[_25516 + 64] = stor2[_25515]
                            mem[_25516 + 96] = stor3[_25515]
                            mem[_25516 + 128] = stor4[_25515]
                            mem[_25516 + 160] = stor5[_25515]
                            mem[_25516 + 192] = stor6[_25515]
                            mem[_25516 + 224] = stor7[_25515].field_0
                            mem[_25516 + 256] = bool(stor7[_25515].field_160)
                            mem[_25516 + 288] = stor8[_25515]
                            if idx >= mem[(32 * stor13[address(arg5)].field_0) + 128]:
                                revert with 0, 50
                            mem[(32 * idx) + (32 * stor13[address(arg5)].field_0) + 160] = _25516
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            continue 
                        if arg1 < arg1 + 1:
                            _24731 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_24731] = 4
                            mem[_24731 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                            _24960 = mem[64]
                            mem[mem[64]] = 96
                            _25512 = mem[(32 * stor13[address(arg5)].field_0) + 128]
                            mem[mem[64] + 96] = mem[(32 * stor13[address(arg5)].field_0) + 128]
                            idx = 0
                            s = (32 * stor13[address(arg5)].field_0) + 160
                            t = mem[64] + 128
                            while idx < _25512:
                                _36384 = mem[s]
                                mem[t] = mem[mem[s]]
                                mem[t + 32] = mem[_36384 + 32]
                                mem[t + 64] = mem[_36384 + 64]
                                mem[t + 96] = mem[_36384 + 96]
                                mem[t + 128] = mem[_36384 + 128]
                                mem[t + 160] = mem[_36384 + 172 len 20]
                                mem[t + 192] = mem[_36384 + 192]
                                mem[t + 224] = mem[_36384 + 236 len 20]
                                mem[t + 256] = bool(mem[_36384 + 256])
                                mem[t + 288] = mem[_36384 + 288]
                                idx = idx + 1
                                s = s + 32
                                t = t + 320
                                continue 
                            mem[_24960 + 32] = 0
                            mem[_24960 + 64] = (320 * _25512) + 128
                            _38050 = mem[_24731]
                            mem[_24960 + (320 * _25512) + 128] = mem[_24731]
                            mem[_24960 + (320 * _25512) + 160 len ceil32(_38050)] = mem[_24731 + 32 len ceil32(_38050)]
                            var42001 = ceil32(_38050)
                            if ceil32(_38050) > _38050:
                                mem[_24960 + (320 * _25512) + _38050 + 160] = 0
                            return memory
                              from mem[64]
                               len ceil32(_38050) + _24960 + (320 * _25512) + -mem[64] + 160
                        _25513 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_25513] = 7
                        mem[_25513 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                        _26408 = mem[64]
                        mem[mem[64]] = 96
                        _27001 = mem[(32 * stor13[address(arg5)].field_0) + 128]
                        mem[mem[64] + 96] = mem[(32 * stor13[address(arg5)].field_0) + 128]
                        idx = 0
                        s = (32 * stor13[address(arg5)].field_0) + 160
                        t = mem[64] + 128
                        while idx < _27001:
                            _36391 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_36391 + 32]
                            mem[t + 64] = mem[_36391 + 64]
                            mem[t + 96] = mem[_36391 + 96]
                            mem[t + 128] = mem[_36391 + 128]
                            mem[t + 160] = mem[_36391 + 172 len 20]
                            mem[t + 192] = mem[_36391 + 192]
                            mem[t + 224] = mem[_36391 + 236 len 20]
                            mem[t + 256] = bool(mem[_36391 + 256])
                            mem[t + 288] = mem[_36391 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_26408 + 32] = -1
                        mem[_26408 + 64] = (320 * _27001) + 128
                        _38051 = mem[_25513]
                        mem[_26408 + (320 * _27001) + 128] = mem[_25513]
                        mem[_26408 + (320 * _27001) + 160 len ceil32(_38051)] = mem[_25513 + 32 len ceil32(_38051)]
                        var45001 = ceil32(_38051)
                        if ceil32(_38051) > _38051:
                            mem[_26408 + (320 * _27001) + _38051 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_38051) + _26408 + (320 * _27001) + -mem[64] + 160
                    mem[64] = (32 * stor13[address(arg5)].field_0) + (32 * arg1 + 1) + 480
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * arg1 + 1) + 160] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * arg1 + 1) + 192] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * arg1 + 1) + 224] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * arg1 + 1) + 256] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * arg1 + 1) + 288] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * arg1 + 1) + 320] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * arg1 + 1) + 352] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * arg1 + 1) + 384] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * arg1 + 1) + 416] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * arg1 + 1) + 448] = 0
                    mem[var32001] = (32 * stor13[address(arg5)].field_0) + (32 * arg1 + 1) + 160
                    s = var32001
                    idx = var32002
                    while idx - 1:
                        mem[64] = mem[64] + 320
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * arg1 + 1) + 160] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * arg1 + 1) + 192] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * arg1 + 1) + 224] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * arg1 + 1) + 256] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * arg1 + 1) + 288] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * arg1 + 1) + 320] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * arg1 + 1) + 352] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * arg1 + 1) + 384] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * arg1 + 1) + 416] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * arg1 + 1) + 448] = 0
                        mem[s + 32] = (32 * stor13[address(arg5)].field_0) + (32 * arg1 + 1) + 160
                        s = s + 32
                        idx = idx - 1
                        continue 
                    idx = 0
                    while idx < arg1 + 1:
                        if arg1 < idx:
                            revert with 0, 17
                        if arg1 - idx >= mem[96]:
                            revert with 0, 50
                        mem[0] = mem[(32 * arg1 - idx) + 128]
                        mem[32] = 12
                        _50058 = sha3(mem[(32 * arg1 - idx) + 128], 12)
                        _50059 = mem[64]
                        mem[64] = mem[64] + 320
                        mem[_50059] = stor12[mem[(32 * arg1 - idx) + 128]].field_0
                        mem[_50059 + 32] = stor1[_50058]
                        mem[_50059 + 64] = stor2[_50058]
                        mem[_50059 + 96] = stor3[_50058]
                        mem[_50059 + 128] = stor4[_50058]
                        mem[_50059 + 160] = stor5[_50058]
                        mem[_50059 + 192] = stor6[_50058]
                        mem[_50059 + 224] = stor7[_50058].field_0
                        mem[_50059 + 256] = bool(stor7[_50058].field_160)
                        mem[_50059 + 288] = stor8[_50058]
                        if idx >= mem[(32 * stor13[address(arg5)].field_0) + 128]:
                            revert with 0, 50
                        mem[(32 * idx) + (32 * stor13[address(arg5)].field_0) + 160] = _50059
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if arg1 < arg1 + 1:
                        _49246 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_49246] = 4
                        mem[_49246 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                        _49453 = mem[64]
                        mem[mem[64]] = 96
                        _50055 = mem[(32 * stor13[address(arg5)].field_0) + 128]
                        mem[mem[64] + 96] = mem[(32 * stor13[address(arg5)].field_0) + 128]
                        idx = 0
                        s = (32 * stor13[address(arg5)].field_0) + 160
                        t = mem[64] + 128
                        while idx < _50055:
                            _58107 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_58107 + 32]
                            mem[t + 64] = mem[_58107 + 64]
                            mem[t + 96] = mem[_58107 + 96]
                            mem[t + 128] = mem[_58107 + 128]
                            mem[t + 160] = mem[_58107 + 172 len 20]
                            mem[t + 192] = mem[_58107 + 192]
                            mem[t + 224] = mem[_58107 + 236 len 20]
                            mem[t + 256] = bool(mem[_58107 + 256])
                            mem[t + 288] = mem[_58107 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_49453 + 32] = 0
                        mem[_49453 + 64] = (320 * _50055) + 128
                        _59926 = mem[_49246]
                        mem[_49453 + (320 * _50055) + 128] = mem[_49246]
                        mem[_49453 + (320 * _50055) + 160 len ceil32(_59926)] = mem[_49246 + 32 len ceil32(_59926)]
                        var49001 = ceil32(_59926)
                        if ceil32(_59926) > _59926:
                            mem[_49453 + (320 * _50055) + _59926 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_59926) + _49453 + (320 * _50055) + -mem[64] + 160
                    _50056 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_50056] = 7
                    mem[_50056 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                    _51018 = mem[64]
                    mem[mem[64]] = 96
                    _51586 = mem[(32 * stor13[address(arg5)].field_0) + 128]
                    mem[mem[64] + 96] = mem[(32 * stor13[address(arg5)].field_0) + 128]
                    idx = 0
                    s = (32 * stor13[address(arg5)].field_0) + 160
                    t = mem[64] + 128
                    while idx < _51586:
                        _58114 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_58114 + 32]
                        mem[t + 64] = mem[_58114 + 64]
                        mem[t + 96] = mem[_58114 + 96]
                        mem[t + 128] = mem[_58114 + 128]
                        mem[t + 160] = mem[_58114 + 172 len 20]
                        mem[t + 192] = mem[_58114 + 192]
                        mem[t + 224] = mem[_58114 + 236 len 20]
                        mem[t + 256] = bool(mem[_58114 + 256])
                        mem[t + 288] = mem[_58114 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_51018 + 32] = -1
                    mem[_51018 + 64] = (320 * _51586) + 128
                    _59927 = mem[_50056]
                    mem[_51018 + (320 * _51586) + 128] = mem[_50056]
                    mem[_51018 + (320 * _51586) + 160 len ceil32(_59927)] = mem[_50056 + 32 len ceil32(_59927)]
                    var52001 = ceil32(_59927)
                    if ceil32(_59927) > _59927:
                        mem[_51018 + (320 * _51586) + _59927 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_59927) + _51018 + (320 * _51586) + -mem[64] + 160
                if stor13[address(arg5)].field_0 < arg1:
                    revert with 0, 17
                if arg2 <= stor13[address(arg5)].field_0 - arg1:
                    if arg2 > test266151307():
                        revert with 0, 65
                    mem[(32 * stor13[address(arg5)].field_0) + 128] = arg2
                    mem[64] = (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 160
                    if not arg2:
                        idx = 0
                        while idx < arg2:
                            if arg1 > !idx:
                                revert with 0, 17
                            if arg1 + idx >= mem[96]:
                                revert with 0, 50
                            mem[0] = mem[(32 * arg1 + idx) + 128]
                            mem[32] = 12
                            _25519 = sha3(mem[(32 * arg1 + idx) + 128], 12)
                            _25520 = mem[64]
                            mem[64] = mem[64] + 320
                            mem[_25520] = stor12[mem[(32 * arg1 + idx) + 128]].field_0
                            mem[_25520 + 32] = stor1[_25519]
                            mem[_25520 + 64] = stor2[_25519]
                            mem[_25520 + 96] = stor3[_25519]
                            mem[_25520 + 128] = stor4[_25519]
                            mem[_25520 + 160] = stor5[_25519]
                            mem[_25520 + 192] = stor6[_25519]
                            mem[_25520 + 224] = stor7[_25519].field_0
                            mem[_25520 + 256] = bool(stor7[_25519].field_160)
                            mem[_25520 + 288] = stor8[_25519]
                            if idx >= mem[(32 * stor13[address(arg5)].field_0) + 128]:
                                revert with 0, 50
                            mem[(32 * idx) + (32 * stor13[address(arg5)].field_0) + 160] = _25520
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            continue 
                        if arg1 > !arg2:
                            revert with 0, 17
                        if arg1 > !arg2:
                            revert with 0, 17
                        if arg1 + arg2 < mem[96]:
                            _27002 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_27002] = 7
                            mem[_27002 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                            _27884 = mem[64]
                            mem[mem[64]] = 96
                            _28916 = mem[(32 * stor13[address(arg5)].field_0) + 128]
                            mem[mem[64] + 96] = mem[(32 * stor13[address(arg5)].field_0) + 128]
                            idx = 0
                            s = (32 * stor13[address(arg5)].field_0) + 160
                            t = mem[64] + 128
                            while idx < _28916:
                                _36398 = mem[s]
                                mem[t] = mem[mem[s]]
                                mem[t + 32] = mem[_36398 + 32]
                                mem[t + 64] = mem[_36398 + 64]
                                mem[t + 96] = mem[_36398 + 96]
                                mem[t + 128] = mem[_36398 + 128]
                                mem[t + 160] = mem[_36398 + 172 len 20]
                                mem[t + 192] = mem[_36398 + 192]
                                mem[t + 224] = mem[_36398 + 236 len 20]
                                mem[t + 256] = bool(mem[_36398 + 256])
                                mem[t + 288] = mem[_36398 + 288]
                                idx = idx + 1
                                s = s + 32
                                t = t + 320
                                continue 
                            mem[_27884 + 32] = arg1 + arg2
                            mem[_27884 + 64] = (320 * _28916) + 128
                            _38052 = mem[_27002]
                            mem[_27884 + (320 * _28916) + 128] = mem[_27002]
                            mem[_27884 + (320 * _28916) + 160 len ceil32(_38052)] = mem[_27002 + 32 len ceil32(_38052)]
                            var47001 = ceil32(_38052)
                            if ceil32(_38052) > _38052:
                                mem[_27884 + (320 * _28916) + _38052 + 160] = 0
                            return memory
                              from mem[64]
                               len ceil32(_38052) + _27884 + (320 * _28916) + -mem[64] + 160
                        _27003 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_27003] = 4
                        mem[_27003 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                        _27885 = mem[64]
                        mem[mem[64]] = 96
                        _28917 = mem[(32 * stor13[address(arg5)].field_0) + 128]
                        mem[mem[64] + 96] = mem[(32 * stor13[address(arg5)].field_0) + 128]
                        idx = 0
                        s = (32 * stor13[address(arg5)].field_0) + 160
                        t = mem[64] + 128
                        while idx < _28917:
                            _36405 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_36405 + 32]
                            mem[t + 64] = mem[_36405 + 64]
                            mem[t + 96] = mem[_36405 + 96]
                            mem[t + 128] = mem[_36405 + 128]
                            mem[t + 160] = mem[_36405 + 172 len 20]
                            mem[t + 192] = mem[_36405 + 192]
                            mem[t + 224] = mem[_36405 + 236 len 20]
                            mem[t + 256] = bool(mem[_36405 + 256])
                            mem[t + 288] = mem[_36405 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_27885 + 32] = arg1 + arg2
                        mem[_27885 + 64] = (320 * _28917) + 128
                        _38053 = mem[_27003]
                        mem[_27885 + (320 * _28917) + 128] = mem[_27003]
                        mem[_27885 + (320 * _28917) + 160 len ceil32(_38053)] = mem[_27003 + 32 len ceil32(_38053)]
                        var47001 = ceil32(_38053)
                        if ceil32(_38053) > _38053:
                            mem[_27885 + (320 * _28917) + _38053 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_38053) + _27885 + (320 * _28917) + -mem[64] + 160
                    mem[64] = (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 480
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * arg2) + 160] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * arg2) + 192] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * arg2) + 224] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * arg2) + 256] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * arg2) + 288] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * arg2) + 320] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * arg2) + 352] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * arg2) + 384] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * arg2) + 416] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * arg2) + 448] = 0
                    mem[var31001] = (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 160
                    s = var31001
                    idx = var31002
                    while idx - 1:
                        mem[64] = mem[64] + 320
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * arg2) + 160] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * arg2) + 192] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * arg2) + 224] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * arg2) + 256] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * arg2) + 288] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * arg2) + 320] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * arg2) + 352] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * arg2) + 384] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * arg2) + 416] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * arg2) + 448] = 0
                        mem[s + 32] = (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 160
                        s = s + 32
                        idx = idx - 1
                        continue 
                    idx = 0
                    while idx < arg2:
                        if arg1 > !idx:
                            revert with 0, 17
                        if arg1 + idx >= mem[96]:
                            revert with 0, 50
                        mem[0] = mem[(32 * arg1 + idx) + 128]
                        mem[32] = 12
                        _50064 = sha3(mem[(32 * arg1 + idx) + 128], 12)
                        _50065 = mem[64]
                        mem[64] = mem[64] + 320
                        mem[_50065] = stor12[mem[(32 * arg1 + idx) + 128]].field_0
                        mem[_50065 + 32] = stor1[_50064]
                        mem[_50065 + 64] = stor2[_50064]
                        mem[_50065 + 96] = stor3[_50064]
                        mem[_50065 + 128] = stor4[_50064]
                        mem[_50065 + 160] = stor5[_50064]
                        mem[_50065 + 192] = stor6[_50064]
                        mem[_50065 + 224] = stor7[_50064].field_0
                        mem[_50065 + 256] = bool(stor7[_50064].field_160)
                        mem[_50065 + 288] = stor8[_50064]
                        if idx >= mem[(32 * stor13[address(arg5)].field_0) + 128]:
                            revert with 0, 50
                        mem[(32 * idx) + (32 * stor13[address(arg5)].field_0) + 160] = _50065
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if arg1 > !arg2:
                        revert with 0, 17
                    if arg1 > !arg2:
                        revert with 0, 17
                    if arg1 + arg2 < mem[96]:
                        _51587 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_51587] = 7
                        mem[_51587 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                        _52157 = mem[64]
                        mem[mem[64]] = 96
                        _53057 = mem[(32 * stor13[address(arg5)].field_0) + 128]
                        mem[mem[64] + 96] = mem[(32 * stor13[address(arg5)].field_0) + 128]
                        idx = 0
                        s = (32 * stor13[address(arg5)].field_0) + 160
                        t = mem[64] + 128
                        while idx < _53057:
                            _58121 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_58121 + 32]
                            mem[t + 64] = mem[_58121 + 64]
                            mem[t + 96] = mem[_58121 + 96]
                            mem[t + 128] = mem[_58121 + 128]
                            mem[t + 160] = mem[_58121 + 172 len 20]
                            mem[t + 192] = mem[_58121 + 192]
                            mem[t + 224] = mem[_58121 + 236 len 20]
                            mem[t + 256] = bool(mem[_58121 + 256])
                            mem[t + 288] = mem[_58121 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_52157 + 32] = arg1 + arg2
                        mem[_52157 + 64] = (320 * _53057) + 128
                        _59928 = mem[_51587]
                        mem[_52157 + (320 * _53057) + 128] = mem[_51587]
                        mem[_52157 + (320 * _53057) + 160 len ceil32(_59928)] = mem[_51587 + 32 len ceil32(_59928)]
                        var54001 = ceil32(_59928)
                        if ceil32(_59928) > _59928:
                            mem[_52157 + (320 * _53057) + _59928 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_59928) + _52157 + (320 * _53057) + -mem[64] + 160
                    _51588 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_51588] = 4
                    mem[_51588 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                    _52158 = mem[64]
                    mem[mem[64]] = 96
                    _53058 = mem[(32 * stor13[address(arg5)].field_0) + 128]
                    mem[mem[64] + 96] = mem[(32 * stor13[address(arg5)].field_0) + 128]
                    idx = 0
                    s = (32 * stor13[address(arg5)].field_0) + 160
                    t = mem[64] + 128
                    while idx < _53058:
                        _58128 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_58128 + 32]
                        mem[t + 64] = mem[_58128 + 64]
                        mem[t + 96] = mem[_58128 + 96]
                        mem[t + 128] = mem[_58128 + 128]
                        mem[t + 160] = mem[_58128 + 172 len 20]
                        mem[t + 192] = mem[_58128 + 192]
                        mem[t + 224] = mem[_58128 + 236 len 20]
                        mem[t + 256] = bool(mem[_58128 + 256])
                        mem[t + 288] = mem[_58128 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_52158 + 32] = arg1 + arg2
                    mem[_52158 + 64] = (320 * _53058) + 128
                    _59929 = mem[_51588]
                    mem[_52158 + (320 * _53058) + 128] = mem[_51588]
                    mem[_52158 + (320 * _53058) + 160 len ceil32(_59929)] = mem[_51588 + 32 len ceil32(_59929)]
                    var54001 = ceil32(_59929)
                    if ceil32(_59929) > _59929:
                        mem[_52158 + (320 * _53058) + _59929 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_59929) + _52158 + (320 * _53058) + -mem[64] + 160
                if stor13[address(arg5)].field_0 < arg1:
                    revert with 0, 17
                if stor13[address(arg5)].field_0 - arg1 > test266151307():
                    revert with 0, 65
                mem[(32 * stor13[address(arg5)].field_0) + 128] = stor13[address(arg5)].field_0 - arg1
                mem[64] = (32 * stor13[address(arg5)].field_0) + (32 * stor13[address(arg5)].field_0 - arg1) + 160
                if not stor13[address(arg5)].field_0 - arg1:
                    idx = 0
                    while idx < stor13[address(arg5)].field_0 - arg1:
                        if arg1 > !idx:
                            revert with 0, 17
                        if arg1 + idx >= mem[96]:
                            revert with 0, 50
                        mem[0] = mem[(32 * arg1 + idx) + 128]
                        mem[32] = 12
                        _25523 = sha3(mem[(32 * arg1 + idx) + 128], 12)
                        _25524 = mem[64]
                        mem[64] = mem[64] + 320
                        mem[_25524] = stor12[mem[(32 * arg1 + idx) + 128]].field_0
                        mem[_25524 + 32] = stor1[_25523]
                        mem[_25524 + 64] = stor2[_25523]
                        mem[_25524 + 96] = stor3[_25523]
                        mem[_25524 + 128] = stor4[_25523]
                        mem[_25524 + 160] = stor5[_25523]
                        mem[_25524 + 192] = stor6[_25523]
                        mem[_25524 + 224] = stor7[_25523].field_0
                        mem[_25524 + 256] = bool(stor7[_25523].field_160)
                        mem[_25524 + 288] = stor8[_25523]
                        if idx >= mem[(32 * stor13[address(arg5)].field_0) + 128]:
                            revert with 0, 50
                        mem[(32 * idx) + (32 * stor13[address(arg5)].field_0) + 160] = _25524
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if arg1 > !(stor13[address(arg5)].field_0 - arg1):
                        revert with 0, 17
                    if arg1 > !(stor13[address(arg5)].field_0 - arg1):
                        revert with 0, 17
                    if stor13[address(arg5)].field_0 < mem[96]:
                        _27004 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_27004] = 7
                        mem[_27004 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                        _27890 = mem[64]
                        mem[mem[64]] = 96
                        _28918 = mem[(32 * stor13[address(arg5)].field_0) + 128]
                        mem[mem[64] + 96] = mem[(32 * stor13[address(arg5)].field_0) + 128]
                        idx = 0
                        s = (32 * stor13[address(arg5)].field_0) + 160
                        t = mem[64] + 128
                        while idx < _28918:
                            _36412 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_36412 + 32]
                            mem[t + 64] = mem[_36412 + 64]
                            mem[t + 96] = mem[_36412 + 96]
                            mem[t + 128] = mem[_36412 + 128]
                            mem[t + 160] = mem[_36412 + 172 len 20]
                            mem[t + 192] = mem[_36412 + 192]
                            mem[t + 224] = mem[_36412 + 236 len 20]
                            mem[t + 256] = bool(mem[_36412 + 256])
                            mem[t + 288] = mem[_36412 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_27890 + 32] = stor13[address(arg5)].field_0
                        mem[_27890 + 64] = (320 * _28918) + 128
                        _38054 = mem[_27004]
                        mem[_27890 + (320 * _28918) + 128] = mem[_27004]
                        mem[_27890 + (320 * _28918) + 160 len ceil32(_38054)] = mem[_27004 + 32 len ceil32(_38054)]
                        var51001 = ceil32(_38054)
                        if ceil32(_38054) > _38054:
                            mem[_27890 + (320 * _28918) + _38054 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_38054) + _27890 + (320 * _28918) + -mem[64] + 160
                    _27005 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_27005] = 4
                    mem[_27005 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                    _27891 = mem[64]
                    mem[mem[64]] = 96
                    _28919 = mem[(32 * stor13[address(arg5)].field_0) + 128]
                    mem[mem[64] + 96] = mem[(32 * stor13[address(arg5)].field_0) + 128]
                    idx = 0
                    s = (32 * stor13[address(arg5)].field_0) + 160
                    t = mem[64] + 128
                    while idx < _28919:
                        _36419 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_36419 + 32]
                        mem[t + 64] = mem[_36419 + 64]
                        mem[t + 96] = mem[_36419 + 96]
                        mem[t + 128] = mem[_36419 + 128]
                        mem[t + 160] = mem[_36419 + 172 len 20]
                        mem[t + 192] = mem[_36419 + 192]
                        mem[t + 224] = mem[_36419 + 236 len 20]
                        mem[t + 256] = bool(mem[_36419 + 256])
                        mem[t + 288] = mem[_36419 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_27891 + 32] = stor13[address(arg5)].field_0
                    mem[_27891 + 64] = (320 * _28919) + 128
                    _38055 = mem[_27005]
                    mem[_27891 + (320 * _28919) + 128] = mem[_27005]
                    mem[_27891 + (320 * _28919) + 160 len ceil32(_38055)] = mem[_27005 + 32 len ceil32(_38055)]
                    var51001 = ceil32(_38055)
                    if ceil32(_38055) > _38055:
                        mem[_27891 + (320 * _28919) + _38055 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_38055) + _27891 + (320 * _28919) + -mem[64] + 160
                mem[64] = (32 * stor13[address(arg5)].field_0) + (32 * stor13[address(arg5)].field_0 - arg1) + 480
                mem[(32 * stor13[address(arg5)].field_0) + (32 * stor13[address(arg5)].field_0 - arg1) + 160] = 0
                mem[(32 * stor13[address(arg5)].field_0) + (32 * stor13[address(arg5)].field_0 - arg1) + 192] = 0
                mem[(32 * stor13[address(arg5)].field_0) + (32 * stor13[address(arg5)].field_0 - arg1) + 224] = 0
                mem[(32 * stor13[address(arg5)].field_0) + (32 * stor13[address(arg5)].field_0 - arg1) + 256] = 0
                mem[(32 * stor13[address(arg5)].field_0) + (32 * stor13[address(arg5)].field_0 - arg1) + 288] = 0
                mem[(32 * stor13[address(arg5)].field_0) + (32 * stor13[address(arg5)].field_0 - arg1) + 320] = 0
                mem[(32 * stor13[address(arg5)].field_0) + (32 * stor13[address(arg5)].field_0 - arg1) + 352] = 0
                mem[(32 * stor13[address(arg5)].field_0) + (32 * stor13[address(arg5)].field_0 - arg1) + 384] = 0
                mem[(32 * stor13[address(arg5)].field_0) + (32 * stor13[address(arg5)].field_0 - arg1) + 416] = 0
                mem[(32 * stor13[address(arg5)].field_0) + (32 * stor13[address(arg5)].field_0 - arg1) + 448] = 0
                mem[var35001] = (32 * stor13[address(arg5)].field_0) + (32 * stor13[address(arg5)].field_0 - arg1) + 160
                s = var35001
                idx = var35002
                while idx - 1:
                    mem[64] = mem[64] + 320
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor13[address(arg5)].field_0 - arg1) + 160] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor13[address(arg5)].field_0 - arg1) + 192] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor13[address(arg5)].field_0 - arg1) + 224] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor13[address(arg5)].field_0 - arg1) + 256] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor13[address(arg5)].field_0 - arg1) + 288] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor13[address(arg5)].field_0 - arg1) + 320] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor13[address(arg5)].field_0 - arg1) + 352] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor13[address(arg5)].field_0 - arg1) + 384] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor13[address(arg5)].field_0 - arg1) + 416] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor13[address(arg5)].field_0 - arg1) + 448] = 0
                    mem[s + 32] = (32 * stor13[address(arg5)].field_0) + (32 * stor13[address(arg5)].field_0 - arg1) + 160
                    s = s + 32
                    idx = idx - 1
                    continue 
                idx = 0
                while idx < stor13[address(arg5)].field_0 - arg1:
                    if arg1 > !idx:
                        revert with 0, 17
                    if arg1 + idx >= mem[96]:
                        revert with 0, 50
                    mem[0] = mem[(32 * arg1 + idx) + 128]
                    mem[32] = 12
                    _50070 = sha3(mem[(32 * arg1 + idx) + 128], 12)
                    _50071 = mem[64]
                    mem[64] = mem[64] + 320
                    mem[_50071] = stor12[mem[(32 * arg1 + idx) + 128]].field_0
                    mem[_50071 + 32] = stor1[_50070]
                    mem[_50071 + 64] = stor2[_50070]
                    mem[_50071 + 96] = stor3[_50070]
                    mem[_50071 + 128] = stor4[_50070]
                    mem[_50071 + 160] = stor5[_50070]
                    mem[_50071 + 192] = stor6[_50070]
                    mem[_50071 + 224] = stor7[_50070].field_0
                    mem[_50071 + 256] = bool(stor7[_50070].field_160)
                    mem[_50071 + 288] = stor8[_50070]
                    if idx >= mem[(32 * stor13[address(arg5)].field_0) + 128]:
                        revert with 0, 50
                    mem[(32 * idx) + (32 * stor13[address(arg5)].field_0) + 160] = _50071
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
                if arg1 > !(stor13[address(arg5)].field_0 - arg1):
                    revert with 0, 17
                if arg1 > !(stor13[address(arg5)].field_0 - arg1):
                    revert with 0, 17
                if stor13[address(arg5)].field_0 < mem[96]:
                    _51589 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_51589] = 7
                    mem[_51589 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                    _52159 = mem[64]
                    mem[mem[64]] = 96
                    _53059 = mem[(32 * stor13[address(arg5)].field_0) + 128]
                    mem[mem[64] + 96] = mem[(32 * stor13[address(arg5)].field_0) + 128]
                    idx = 0
                    s = (32 * stor13[address(arg5)].field_0) + 160
                    t = mem[64] + 128
                    while idx < _53059:
                        _58135 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_58135 + 32]
                        mem[t + 64] = mem[_58135 + 64]
                        mem[t + 96] = mem[_58135 + 96]
                        mem[t + 128] = mem[_58135 + 128]
                        mem[t + 160] = mem[_58135 + 172 len 20]
                        mem[t + 192] = mem[_58135 + 192]
                        mem[t + 224] = mem[_58135 + 236 len 20]
                        mem[t + 256] = bool(mem[_58135 + 256])
                        mem[t + 288] = mem[_58135 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_52159 + 32] = stor13[address(arg5)].field_0
                    mem[_52159 + 64] = (320 * _53059) + 128
                    _59930 = mem[_51589]
                    mem[_52159 + (320 * _53059) + 128] = mem[_51589]
                    mem[_52159 + (320 * _53059) + 160 len ceil32(_59930)] = mem[_51589 + 32 len ceil32(_59930)]
                    var58001 = ceil32(_59930)
                    if ceil32(_59930) > _59930:
                        mem[_52159 + (320 * _53059) + _59930 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_59930) + _52159 + (320 * _53059) + -mem[64] + 160
                _51590 = mem[64]
                mem[64] = mem[64] + 64
                mem[_51590] = 4
                mem[_51590 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                _52160 = mem[64]
                mem[mem[64]] = 96
                _53060 = mem[(32 * stor13[address(arg5)].field_0) + 128]
                mem[mem[64] + 96] = mem[(32 * stor13[address(arg5)].field_0) + 128]
                idx = 0
                s = (32 * stor13[address(arg5)].field_0) + 160
                t = mem[64] + 128
                while idx < _53060:
                    _58142 = mem[s]
                    mem[t] = mem[mem[s]]
                    mem[t + 32] = mem[_58142 + 32]
                    mem[t + 64] = mem[_58142 + 64]
                    mem[t + 96] = mem[_58142 + 96]
                    mem[t + 128] = mem[_58142 + 128]
                    mem[t + 160] = mem[_58142 + 172 len 20]
                    mem[t + 192] = mem[_58142 + 192]
                    mem[t + 224] = mem[_58142 + 236 len 20]
                    mem[t + 256] = bool(mem[_58142 + 256])
                    mem[t + 288] = mem[_58142 + 288]
                    idx = idx + 1
                    s = s + 32
                    t = t + 320
                    continue 
                mem[_52160 + 32] = stor13[address(arg5)].field_0
                mem[_52160 + 64] = (320 * _53060) + 128
                _59931 = mem[_51590]
                mem[_52160 + (320 * _53060) + 128] = mem[_51590]
                mem[_52160 + (320 * _53060) + 160 len ceil32(_59931)] = mem[_51590 + 32 len ceil32(_59931)]
                var58001 = ceil32(_59931)
                if ceil32(_59931) > _59931:
                    mem[_52160 + (320 * _53060) + _59931 + 160] = 0
                return memory
                  from mem[64]
                   len ceil32(_59931) + _52160 + (320 * _53060) + -mem[64] + 160
            if stor13[address(arg5)].field_0 < 1:
                revert with 0, 17
            if arg3:
                if arg2 <= stor13[address(arg5)].field_0 - 1:
                    if arg2 > test266151307():
                        revert with 0, 65
                    mem[(32 * stor13[address(arg5)].field_0) + 128] = arg2
                    mem[64] = (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 160
                    if not arg2:
                        idx = 0
                        while idx < arg2:
                            if stor13[address(arg5)].field_0 - 1 < idx:
                                revert with 0, 17
                            if stor13[address(arg5)].field_0 + -idx - 1 >= mem[96]:
                                revert with 0, 50
                            mem[0] = mem[(32 * stor13[address(arg5)].field_0 + -idx - 1) + 128]
                            mem[32] = 12
                            _25529 = sha3(mem[(32 * stor13[address(arg5)].field_0 + -idx - 1) + 128], 12)
                            _25530 = mem[64]
                            mem[64] = mem[64] + 320
                            mem[_25530] = stor12[mem[(32 * stor13[address(arg5)].field_0 + -idx - 1) + 128]].field_0
                            mem[_25530 + 32] = stor1[_25529]
                            mem[_25530 + 64] = stor2[_25529]
                            mem[_25530 + 96] = stor3[_25529]
                            mem[_25530 + 128] = stor4[_25529]
                            mem[_25530 + 160] = stor5[_25529]
                            mem[_25530 + 192] = stor6[_25529]
                            mem[_25530 + 224] = stor7[_25529].field_0
                            mem[_25530 + 256] = bool(stor7[_25529].field_160)
                            mem[_25530 + 288] = stor8[_25529]
                            if idx >= mem[(32 * stor13[address(arg5)].field_0) + 128]:
                                revert with 0, 50
                            mem[(32 * idx) + (32 * stor13[address(arg5)].field_0) + 160] = _25530
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            continue 
                        if stor13[address(arg5)].field_0 - 1 < arg2:
                            _24732 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_24732] = 4
                            mem[_24732 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                            _24964 = mem[64]
                            mem[mem[64]] = 96
                            _25526 = mem[(32 * stor13[address(arg5)].field_0) + 128]
                            mem[mem[64] + 96] = mem[(32 * stor13[address(arg5)].field_0) + 128]
                            idx = 0
                            s = (32 * stor13[address(arg5)].field_0) + 160
                            t = mem[64] + 128
                            while idx < _25526:
                                _36426 = mem[s]
                                mem[t] = mem[mem[s]]
                                mem[t + 32] = mem[_36426 + 32]
                                mem[t + 64] = mem[_36426 + 64]
                                mem[t + 96] = mem[_36426 + 96]
                                mem[t + 128] = mem[_36426 + 128]
                                mem[t + 160] = mem[_36426 + 172 len 20]
                                mem[t + 192] = mem[_36426 + 192]
                                mem[t + 224] = mem[_36426 + 236 len 20]
                                mem[t + 256] = bool(mem[_36426 + 256])
                                mem[t + 288] = mem[_36426 + 288]
                                idx = idx + 1
                                s = s + 32
                                t = t + 320
                                continue 
                            mem[_24964 + 32] = 0
                            mem[_24964 + 64] = (320 * _25526) + 128
                            _38056 = mem[_24732]
                            mem[_24964 + (320 * _25526) + 128] = mem[_24732]
                            mem[_24964 + (320 * _25526) + 160 len ceil32(_38056)] = mem[_24732 + 32 len ceil32(_38056)]
                            var42001 = ceil32(_38056)
                            if ceil32(_38056) > _38056:
                                mem[_24964 + (320 * _25526) + _38056 + 160] = 0
                            return memory
                              from mem[64]
                               len ceil32(_38056) + _24964 + (320 * _25526) + -mem[64] + 160
                        _25527 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_25527] = 7
                        mem[_25527 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                        _26417 = mem[64]
                        mem[mem[64]] = 96
                        _27007 = mem[(32 * stor13[address(arg5)].field_0) + 128]
                        mem[mem[64] + 96] = mem[(32 * stor13[address(arg5)].field_0) + 128]
                        idx = 0
                        s = (32 * stor13[address(arg5)].field_0) + 160
                        t = mem[64] + 128
                        while idx < _27007:
                            _36433 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_36433 + 32]
                            mem[t + 64] = mem[_36433 + 64]
                            mem[t + 96] = mem[_36433 + 96]
                            mem[t + 128] = mem[_36433 + 128]
                            mem[t + 160] = mem[_36433 + 172 len 20]
                            mem[t + 192] = mem[_36433 + 192]
                            mem[t + 224] = mem[_36433 + 236 len 20]
                            mem[t + 256] = bool(mem[_36433 + 256])
                            mem[t + 288] = mem[_36433 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_26417 + 32] = stor13[address(arg5)].field_0 + -arg2 - 1
                        mem[_26417 + 64] = (320 * _27007) + 128
                        _38057 = mem[_25527]
                        mem[_26417 + (320 * _27007) + 128] = mem[_25527]
                        mem[_26417 + (320 * _27007) + 160 len ceil32(_38057)] = mem[_25527 + 32 len ceil32(_38057)]
                        var45001 = ceil32(_38057)
                        if ceil32(_38057) > _38057:
                            mem[_26417 + (320 * _27007) + _38057 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_38057) + _26417 + (320 * _27007) + -mem[64] + 160
                    mem[64] = (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 480
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * arg2) + 160] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * arg2) + 192] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * arg2) + 224] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * arg2) + 256] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * arg2) + 288] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * arg2) + 320] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * arg2) + 352] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * arg2) + 384] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * arg2) + 416] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * arg2) + 448] = 0
                    mem[var32001] = (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 160
                    s = var32001
                    idx = var32002
                    while idx - 1:
                        mem[64] = mem[64] + 320
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * arg2) + 160] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * arg2) + 192] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * arg2) + 224] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * arg2) + 256] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * arg2) + 288] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * arg2) + 320] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * arg2) + 352] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * arg2) + 384] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * arg2) + 416] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * arg2) + 448] = 0
                        mem[s + 32] = (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 160
                        s = s + 32
                        idx = idx - 1
                        continue 
                    idx = 0
                    while idx < arg2:
                        if stor13[address(arg5)].field_0 - 1 < idx:
                            revert with 0, 17
                        if stor13[address(arg5)].field_0 + -idx - 1 >= mem[96]:
                            revert with 0, 50
                        mem[0] = mem[(32 * stor13[address(arg5)].field_0 + -idx - 1) + 128]
                        mem[32] = 12
                        _50078 = sha3(mem[(32 * stor13[address(arg5)].field_0 + -idx - 1) + 128], 12)
                        _50079 = mem[64]
                        mem[64] = mem[64] + 320
                        mem[_50079] = stor12[mem[(32 * stor13[address(arg5)].field_0 + -idx - 1) + 128]].field_0
                        mem[_50079 + 32] = stor1[_50078]
                        mem[_50079 + 64] = stor2[_50078]
                        mem[_50079 + 96] = stor3[_50078]
                        mem[_50079 + 128] = stor4[_50078]
                        mem[_50079 + 160] = stor5[_50078]
                        mem[_50079 + 192] = stor6[_50078]
                        mem[_50079 + 224] = stor7[_50078].field_0
                        mem[_50079 + 256] = bool(stor7[_50078].field_160)
                        mem[_50079 + 288] = stor8[_50078]
                        if idx >= mem[(32 * stor13[address(arg5)].field_0) + 128]:
                            revert with 0, 50
                        mem[(32 * idx) + (32 * stor13[address(arg5)].field_0) + 160] = _50079
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if stor13[address(arg5)].field_0 - 1 < arg2:
                        _49247 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_49247] = 4
                        mem[_49247 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                        _49463 = mem[64]
                        mem[mem[64]] = 96
                        _50075 = mem[(32 * stor13[address(arg5)].field_0) + 128]
                        mem[mem[64] + 96] = mem[(32 * stor13[address(arg5)].field_0) + 128]
                        idx = 0
                        s = (32 * stor13[address(arg5)].field_0) + 160
                        t = mem[64] + 128
                        while idx < _50075:
                            _58149 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_58149 + 32]
                            mem[t + 64] = mem[_58149 + 64]
                            mem[t + 96] = mem[_58149 + 96]
                            mem[t + 128] = mem[_58149 + 128]
                            mem[t + 160] = mem[_58149 + 172 len 20]
                            mem[t + 192] = mem[_58149 + 192]
                            mem[t + 224] = mem[_58149 + 236 len 20]
                            mem[t + 256] = bool(mem[_58149 + 256])
                            mem[t + 288] = mem[_58149 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_49463 + 32] = 0
                        mem[_49463 + 64] = (320 * _50075) + 128
                        _59932 = mem[_49247]
                        mem[_49463 + (320 * _50075) + 128] = mem[_49247]
                        mem[_49463 + (320 * _50075) + 160 len ceil32(_59932)] = mem[_49247 + 32 len ceil32(_59932)]
                        var49001 = ceil32(_59932)
                        if ceil32(_59932) > _59932:
                            mem[_49463 + (320 * _50075) + _59932 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_59932) + _49463 + (320 * _50075) + -mem[64] + 160
                    _50076 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_50076] = 7
                    mem[_50076 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                    _51026 = mem[64]
                    mem[mem[64]] = 96
                    _51592 = mem[(32 * stor13[address(arg5)].field_0) + 128]
                    mem[mem[64] + 96] = mem[(32 * stor13[address(arg5)].field_0) + 128]
                    idx = 0
                    s = (32 * stor13[address(arg5)].field_0) + 160
                    t = mem[64] + 128
                    while idx < _51592:
                        _58156 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_58156 + 32]
                        mem[t + 64] = mem[_58156 + 64]
                        mem[t + 96] = mem[_58156 + 96]
                        mem[t + 128] = mem[_58156 + 128]
                        mem[t + 160] = mem[_58156 + 172 len 20]
                        mem[t + 192] = mem[_58156 + 192]
                        mem[t + 224] = mem[_58156 + 236 len 20]
                        mem[t + 256] = bool(mem[_58156 + 256])
                        mem[t + 288] = mem[_58156 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_51026 + 32] = stor13[address(arg5)].field_0 + -arg2 - 1
                    mem[_51026 + 64] = (320 * _51592) + 128
                    _59933 = mem[_50076]
                    mem[_51026 + (320 * _51592) + 128] = mem[_50076]
                    mem[_51026 + (320 * _51592) + 160 len ceil32(_59933)] = mem[_50076 + 32 len ceil32(_59933)]
                    var52001 = ceil32(_59933)
                    if ceil32(_59933) > _59933:
                        mem[_51026 + (320 * _51592) + _59933 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_59933) + _51026 + (320 * _51592) + -mem[64] + 160
                if 1 > !(stor13[address(arg5)].field_0 - 1):
                    revert with 0, 17
                if stor13[address(arg5)].field_0 > test266151307():
                    revert with 0, 65
                mem[(32 * stor13[address(arg5)].field_0) + 128] = stor13[address(arg5)].field_0
                mem[64] = (64 * stor13[address(arg5)].field_0) + 160
                if not stor13[address(arg5)].field_0:
                    idx = 0
                    while idx < stor13[address(arg5)].field_0:
                        if stor13[address(arg5)].field_0 - 1 < idx:
                            revert with 0, 17
                        if stor13[address(arg5)].field_0 + -idx - 1 >= mem[96]:
                            revert with 0, 50
                        mem[0] = mem[(32 * stor13[address(arg5)].field_0 + -idx - 1) + 128]
                        mem[32] = 12
                        _25535 = sha3(mem[(32 * stor13[address(arg5)].field_0 + -idx - 1) + 128], 12)
                        _25536 = mem[64]
                        mem[64] = mem[64] + 320
                        mem[_25536] = stor12[mem[(32 * stor13[address(arg5)].field_0 + -idx - 1) + 128]].field_0
                        mem[_25536 + 32] = stor1[_25535]
                        mem[_25536 + 64] = stor2[_25535]
                        mem[_25536 + 96] = stor3[_25535]
                        mem[_25536 + 128] = stor4[_25535]
                        mem[_25536 + 160] = stor5[_25535]
                        mem[_25536 + 192] = stor6[_25535]
                        mem[_25536 + 224] = stor7[_25535].field_0
                        mem[_25536 + 256] = bool(stor7[_25535].field_160)
                        mem[_25536 + 288] = stor8[_25535]
                        if idx >= mem[(32 * stor13[address(arg5)].field_0) + 128]:
                            revert with 0, 50
                        mem[(32 * idx) + (32 * stor13[address(arg5)].field_0) + 160] = _25536
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if stor13[address(arg5)].field_0 - 1 < stor13[address(arg5)].field_0:
                        _24733 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_24733] = 4
                        mem[_24733 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                        _24966 = mem[64]
                        mem[mem[64]] = 96
                        _25532 = mem[(32 * stor13[address(arg5)].field_0) + 128]
                        mem[mem[64] + 96] = mem[(32 * stor13[address(arg5)].field_0) + 128]
                        idx = 0
                        s = (32 * stor13[address(arg5)].field_0) + 160
                        t = mem[64] + 128
                        while idx < _25532:
                            _36440 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_36440 + 32]
                            mem[t + 64] = mem[_36440 + 64]
                            mem[t + 96] = mem[_36440 + 96]
                            mem[t + 128] = mem[_36440 + 128]
                            mem[t + 160] = mem[_36440 + 172 len 20]
                            mem[t + 192] = mem[_36440 + 192]
                            mem[t + 224] = mem[_36440 + 236 len 20]
                            mem[t + 256] = bool(mem[_36440 + 256])
                            mem[t + 288] = mem[_36440 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_24966 + 32] = 0
                        mem[_24966 + 64] = (320 * _25532) + 128
                        _38058 = mem[_24733]
                        mem[_24966 + (320 * _25532) + 128] = mem[_24733]
                        mem[_24966 + (320 * _25532) + 160 len ceil32(_38058)] = mem[_24733 + 32 len ceil32(_38058)]
                        var46001 = ceil32(_38058)
                        if ceil32(_38058) > _38058:
                            mem[_24966 + (320 * _25532) + _38058 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_38058) + _24966 + (320 * _25532) + -mem[64] + 160
                    _25533 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_25533] = 7
                    mem[_25533 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                    _26426 = mem[64]
                    mem[mem[64]] = 96
                    _27009 = mem[(32 * stor13[address(arg5)].field_0) + 128]
                    mem[mem[64] + 96] = mem[(32 * stor13[address(arg5)].field_0) + 128]
                    idx = 0
                    s = (32 * stor13[address(arg5)].field_0) + 160
                    t = mem[64] + 128
                    while idx < _27009:
                        _36447 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_36447 + 32]
                        mem[t + 64] = mem[_36447 + 64]
                        mem[t + 96] = mem[_36447 + 96]
                        mem[t + 128] = mem[_36447 + 128]
                        mem[t + 160] = mem[_36447 + 172 len 20]
                        mem[t + 192] = mem[_36447 + 192]
                        mem[t + 224] = mem[_36447 + 236 len 20]
                        mem[t + 256] = bool(mem[_36447 + 256])
                        mem[t + 288] = mem[_36447 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_26426 + 32] = -1
                    mem[_26426 + 64] = (320 * _27009) + 128
                    _38059 = mem[_25533]
                    mem[_26426 + (320 * _27009) + 128] = mem[_25533]
                    mem[_26426 + (320 * _27009) + 160 len ceil32(_38059)] = mem[_25533 + 32 len ceil32(_38059)]
                    var49001 = ceil32(_38059)
                    if ceil32(_38059) > _38059:
                        mem[_26426 + (320 * _27009) + _38059 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_38059) + _26426 + (320 * _27009) + -mem[64] + 160
                mem[64] = (64 * stor13[address(arg5)].field_0) + 480
                mem[(64 * stor13[address(arg5)].field_0) + 160] = 0
                mem[(64 * stor13[address(arg5)].field_0) + 192] = 0
                mem[(64 * stor13[address(arg5)].field_0) + 224] = 0
                mem[(64 * stor13[address(arg5)].field_0) + 256] = 0
                mem[(64 * stor13[address(arg5)].field_0) + 288] = 0
                mem[(64 * stor13[address(arg5)].field_0) + 320] = 0
                mem[(64 * stor13[address(arg5)].field_0) + 352] = 0
                mem[(64 * stor13[address(arg5)].field_0) + 384] = 0
                mem[(64 * stor13[address(arg5)].field_0) + 416] = 0
                mem[(64 * stor13[address(arg5)].field_0) + 448] = 0
                mem[var36001] = (64 * stor13[address(arg5)].field_0) + 160
                s = var36001
                idx = var36002
                while idx - 1:
                    mem[64] = mem[64] + 320
                    mem[(64 * stor13[address(arg5)].field_0) + 160] = 0
                    mem[(64 * stor13[address(arg5)].field_0) + 192] = 0
                    mem[(64 * stor13[address(arg5)].field_0) + 224] = 0
                    mem[(64 * stor13[address(arg5)].field_0) + 256] = 0
                    mem[(64 * stor13[address(arg5)].field_0) + 288] = 0
                    mem[(64 * stor13[address(arg5)].field_0) + 320] = 0
                    mem[(64 * stor13[address(arg5)].field_0) + 352] = 0
                    mem[(64 * stor13[address(arg5)].field_0) + 384] = 0
                    mem[(64 * stor13[address(arg5)].field_0) + 416] = 0
                    mem[(64 * stor13[address(arg5)].field_0) + 448] = 0
                    mem[s + 32] = (64 * stor13[address(arg5)].field_0) + 160
                    s = s + 32
                    idx = idx - 1
                    continue 
                idx = 0
                while idx < stor13[address(arg5)].field_0:
                    if stor13[address(arg5)].field_0 - 1 < idx:
                        revert with 0, 17
                    if stor13[address(arg5)].field_0 + -idx - 1 >= mem[96]:
                        revert with 0, 50
                    mem[0] = mem[(32 * stor13[address(arg5)].field_0 + -idx - 1) + 128]
                    mem[32] = 12
                    _50086 = sha3(mem[(32 * stor13[address(arg5)].field_0 + -idx - 1) + 128], 12)
                    _50087 = mem[64]
                    mem[64] = mem[64] + 320
                    mem[_50087] = stor12[mem[(32 * stor13[address(arg5)].field_0 + -idx - 1) + 128]].field_0
                    mem[_50087 + 32] = stor1[_50086]
                    mem[_50087 + 64] = stor2[_50086]
                    mem[_50087 + 96] = stor3[_50086]
                    mem[_50087 + 128] = stor4[_50086]
                    mem[_50087 + 160] = stor5[_50086]
                    mem[_50087 + 192] = stor6[_50086]
                    mem[_50087 + 224] = stor7[_50086].field_0
                    mem[_50087 + 256] = bool(stor7[_50086].field_160)
                    mem[_50087 + 288] = stor8[_50086]
                    if idx >= mem[(32 * stor13[address(arg5)].field_0) + 128]:
                        revert with 0, 50
                    mem[(32 * idx) + (32 * stor13[address(arg5)].field_0) + 160] = _50087
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
                if stor13[address(arg5)].field_0 - 1 < stor13[address(arg5)].field_0:
                    _49248 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_49248] = 4
                    mem[_49248 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                    _49467 = mem[64]
                    mem[mem[64]] = 96
                    _50083 = mem[(32 * stor13[address(arg5)].field_0) + 128]
                    mem[mem[64] + 96] = mem[(32 * stor13[address(arg5)].field_0) + 128]
                    idx = 0
                    s = (32 * stor13[address(arg5)].field_0) + 160
                    t = mem[64] + 128
                    while idx < _50083:
                        _58163 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_58163 + 32]
                        mem[t + 64] = mem[_58163 + 64]
                        mem[t + 96] = mem[_58163 + 96]
                        mem[t + 128] = mem[_58163 + 128]
                        mem[t + 160] = mem[_58163 + 172 len 20]
                        mem[t + 192] = mem[_58163 + 192]
                        mem[t + 224] = mem[_58163 + 236 len 20]
                        mem[t + 256] = bool(mem[_58163 + 256])
                        mem[t + 288] = mem[_58163 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_49467 + 32] = 0
                    mem[_49467 + 64] = (320 * _50083) + 128
                    _59934 = mem[_49248]
                    mem[_49467 + (320 * _50083) + 128] = mem[_49248]
                    mem[_49467 + (320 * _50083) + 160 len ceil32(_59934)] = mem[_49248 + 32 len ceil32(_59934)]
                    var53001 = ceil32(_59934)
                    if ceil32(_59934) > _59934:
                        mem[_49467 + (320 * _50083) + _59934 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_59934) + _49467 + (320 * _50083) + -mem[64] + 160
                _50084 = mem[64]
                mem[64] = mem[64] + 64
                mem[_50084] = 7
                mem[_50084 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                _51034 = mem[64]
                mem[mem[64]] = 96
                _51594 = mem[(32 * stor13[address(arg5)].field_0) + 128]
                mem[mem[64] + 96] = mem[(32 * stor13[address(arg5)].field_0) + 128]
                idx = 0
                s = (32 * stor13[address(arg5)].field_0) + 160
                t = mem[64] + 128
                while idx < _51594:
                    _58170 = mem[s]
                    mem[t] = mem[mem[s]]
                    mem[t + 32] = mem[_58170 + 32]
                    mem[t + 64] = mem[_58170 + 64]
                    mem[t + 96] = mem[_58170 + 96]
                    mem[t + 128] = mem[_58170 + 128]
                    mem[t + 160] = mem[_58170 + 172 len 20]
                    mem[t + 192] = mem[_58170 + 192]
                    mem[t + 224] = mem[_58170 + 236 len 20]
                    mem[t + 256] = bool(mem[_58170 + 256])
                    mem[t + 288] = mem[_58170 + 288]
                    idx = idx + 1
                    s = s + 32
                    t = t + 320
                    continue 
                mem[_51034 + 32] = -1
                mem[_51034 + 64] = (320 * _51594) + 128
                _59935 = mem[_50084]
                mem[_51034 + (320 * _51594) + 128] = mem[_50084]
                mem[_51034 + (320 * _51594) + 160 len ceil32(_59935)] = mem[_50084 + 32 len ceil32(_59935)]
                var56001 = ceil32(_59935)
                if ceil32(_59935) > _59935:
                    mem[_51034 + (320 * _51594) + _59935 + 160] = 0
                return memory
                  from mem[64]
                   len ceil32(_59935) + _51034 + (320 * _51594) + -mem[64] + 160
            if stor13[address(arg5)].field_0 < stor13[address(arg5)].field_0 - 1:
                revert with 0, 17
            if arg2 > 1:
                if stor13[address(arg5)].field_0 < stor13[address(arg5)].field_0 - 1:
                    revert with 0, 17
                mem[(32 * stor13[address(arg5)].field_0) + 128] = 1
                mem[64] = (32 * stor13[address(arg5)].field_0) + 512
                mem[(32 * stor13[address(arg5)].field_0) + 192] = 0
                mem[(32 * stor13[address(arg5)].field_0) + 224] = 0
                mem[(32 * stor13[address(arg5)].field_0) + 256] = 0
                mem[(32 * stor13[address(arg5)].field_0) + 288] = 0
                mem[(32 * stor13[address(arg5)].field_0) + 320] = 0
                mem[(32 * stor13[address(arg5)].field_0) + 352] = 0
                mem[(32 * stor13[address(arg5)].field_0) + 384] = 0
                mem[(32 * stor13[address(arg5)].field_0) + 416] = 0
                mem[(32 * stor13[address(arg5)].field_0) + 448] = 0
                mem[(32 * stor13[address(arg5)].field_0) + 480] = 0
                mem[var39001] = (32 * stor13[address(arg5)].field_0) + 192
                s = var39001
                idx = var39002
                while idx - 1:
                    mem[64] = mem[64] + 320
                    mem[(32 * stor13[address(arg5)].field_0) + 192] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + 224] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + 256] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + 288] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + 320] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + 352] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + 384] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + 416] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + 448] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + 480] = 0
                    mem[s + 32] = (32 * stor13[address(arg5)].field_0) + 192
                    s = s + 32
                    idx = idx - 1
                    continue 
                idx = 0
                while idx < 1:
                    if stor13[address(arg5)].field_0 - 1 > !idx:
                        revert with 0, 17
                    if stor13[address(arg5)].field_0 + idx - 1 >= mem[96]:
                        revert with 0, 50
                    mem[0] = mem[(32 * stor13[address(arg5)].field_0 + idx - 1) + 128]
                    mem[32] = 12
                    _50098 = sha3(mem[(32 * stor13[address(arg5)].field_0 + idx - 1) + 128], 12)
                    _50099 = mem[64]
                    mem[64] = mem[64] + 320
                    mem[_50099] = stor12[mem[(32 * stor13[address(arg5)].field_0 + idx - 1) + 128]].field_0
                    mem[_50099 + 32] = stor1[_50098]
                    mem[_50099 + 64] = stor2[_50098]
                    mem[_50099 + 96] = stor3[_50098]
                    mem[_50099 + 128] = stor4[_50098]
                    mem[_50099 + 160] = stor5[_50098]
                    mem[_50099 + 192] = stor6[_50098]
                    mem[_50099 + 224] = stor7[_50098].field_0
                    mem[_50099 + 256] = bool(stor7[_50098].field_160)
                    mem[_50099 + 288] = stor8[_50098]
                    if idx >= mem[(32 * stor13[address(arg5)].field_0) + 128]:
                        revert with 0, 50
                    mem[(32 * idx) + (32 * stor13[address(arg5)].field_0) + 160] = _50099
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
                if stor13[address(arg5)].field_0 - 1 > !1:
                    revert with 0, 17
                if stor13[address(arg5)].field_0 - 1 > !1:
                    revert with 0, 17
                if stor13[address(arg5)].field_0 < mem[96]:
                    _51597 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_51597] = 7
                    mem[_51597 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                    _52179 = mem[64]
                    mem[mem[64]] = 96
                    _53067 = mem[(32 * stor13[address(arg5)].field_0) + 128]
                    mem[mem[64] + 96] = mem[(32 * stor13[address(arg5)].field_0) + 128]
                    idx = 0
                    s = (32 * stor13[address(arg5)].field_0) + 160
                    t = mem[64] + 128
                    while idx < _53067:
                        _58191 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_58191 + 32]
                        mem[t + 64] = mem[_58191 + 64]
                        mem[t + 96] = mem[_58191 + 96]
                        mem[t + 128] = mem[_58191 + 128]
                        mem[t + 160] = mem[_58191 + 172 len 20]
                        mem[t + 192] = mem[_58191 + 192]
                        mem[t + 224] = mem[_58191 + 236 len 20]
                        mem[t + 256] = bool(mem[_58191 + 256])
                        mem[t + 288] = mem[_58191 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_52179 + 32] = stor13[address(arg5)].field_0
                    mem[_52179 + 64] = (320 * _53067) + 128
                    _59938 = mem[_51597]
                    mem[_52179 + (320 * _53067) + 128] = mem[_51597]
                    mem[_52179 + (320 * _53067) + 160 len ceil32(_59938)] = mem[_51597 + 32 len ceil32(_59938)]
                    var62001 = ceil32(_59938)
                    if ceil32(_59938) > _59938:
                        mem[_52179 + (320 * _53067) + _59938 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_59938) + _52179 + (320 * _53067) + -mem[64] + 160
                _51598 = mem[64]
                mem[64] = mem[64] + 64
                mem[_51598] = 4
                mem[_51598 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                _52180 = mem[64]
                mem[mem[64]] = 96
                _53068 = mem[(32 * stor13[address(arg5)].field_0) + 128]
                mem[mem[64] + 96] = mem[(32 * stor13[address(arg5)].field_0) + 128]
                idx = 0
                s = (32 * stor13[address(arg5)].field_0) + 160
                t = mem[64] + 128
                while idx < _53068:
                    _58198 = mem[s]
                    mem[t] = mem[mem[s]]
                    mem[t + 32] = mem[_58198 + 32]
                    mem[t + 64] = mem[_58198 + 64]
                    mem[t + 96] = mem[_58198 + 96]
                    mem[t + 128] = mem[_58198 + 128]
                    mem[t + 160] = mem[_58198 + 172 len 20]
                    mem[t + 192] = mem[_58198 + 192]
                    mem[t + 224] = mem[_58198 + 236 len 20]
                    mem[t + 256] = bool(mem[_58198 + 256])
                    mem[t + 288] = mem[_58198 + 288]
                    idx = idx + 1
                    s = s + 32
                    t = t + 320
                    continue 
                mem[_52180 + 32] = stor13[address(arg5)].field_0
                mem[_52180 + 64] = (320 * _53068) + 128
                _59939 = mem[_51598]
                mem[_52180 + (320 * _53068) + 128] = mem[_51598]
                mem[_52180 + (320 * _53068) + 160 len ceil32(_59939)] = mem[_51598 + 32 len ceil32(_59939)]
                var62001 = ceil32(_59939)
                if ceil32(_59939) > _59939:
                    mem[_52180 + (320 * _53068) + _59939 + 160] = 0
                return memory
                  from mem[64]
                   len ceil32(_59939) + _52180 + (320 * _53068) + -mem[64] + 160
            if arg2 > test266151307():
                revert with 0, 65
            mem[(32 * stor13[address(arg5)].field_0) + 128] = arg2
            mem[64] = (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 160
            if not arg2:
                idx = 0
                while idx < arg2:
                    if stor13[address(arg5)].field_0 - 1 > !idx:
                        revert with 0, 17
                    if stor13[address(arg5)].field_0 + idx - 1 >= mem[96]:
                        revert with 0, 50
                    mem[0] = mem[(32 * stor13[address(arg5)].field_0 + idx - 1) + 128]
                    mem[32] = 12
                    _25539 = sha3(mem[(32 * stor13[address(arg5)].field_0 + idx - 1) + 128], 12)
                    _25540 = mem[64]
                    mem[64] = mem[64] + 320
                    mem[_25540] = stor12[mem[(32 * stor13[address(arg5)].field_0 + idx - 1) + 128]].field_0
                    mem[_25540 + 32] = stor1[_25539]
                    mem[_25540 + 64] = stor2[_25539]
                    mem[_25540 + 96] = stor3[_25539]
                    mem[_25540 + 128] = stor4[_25539]
                    mem[_25540 + 160] = stor5[_25539]
                    mem[_25540 + 192] = stor6[_25539]
                    mem[_25540 + 224] = stor7[_25539].field_0
                    mem[_25540 + 256] = bool(stor7[_25539].field_160)
                    mem[_25540 + 288] = stor8[_25539]
                    if idx >= mem[(32 * stor13[address(arg5)].field_0) + 128]:
                        revert with 0, 50
                    mem[(32 * idx) + (32 * stor13[address(arg5)].field_0) + 160] = _25540
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
                if stor13[address(arg5)].field_0 - 1 > !arg2:
                    revert with 0, 17
                if stor13[address(arg5)].field_0 - 1 > !arg2:
                    revert with 0, 17
                if stor13[address(arg5)].field_0 + arg2 - 1 < mem[96]:
                    _27010 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_27010] = 7
                    mem[_27010 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                    _27924 = mem[64]
                    mem[mem[64]] = 96
                    _28924 = mem[(32 * stor13[address(arg5)].field_0) + 128]
                    mem[mem[64] + 96] = mem[(32 * stor13[address(arg5)].field_0) + 128]
                    idx = 0
                    s = (32 * stor13[address(arg5)].field_0) + 160
                    t = mem[64] + 128
                    while idx < _28924:
                        _36454 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_36454 + 32]
                        mem[t + 64] = mem[_36454 + 64]
                        mem[t + 96] = mem[_36454 + 96]
                        mem[t + 128] = mem[_36454 + 128]
                        mem[t + 160] = mem[_36454 + 172 len 20]
                        mem[t + 192] = mem[_36454 + 192]
                        mem[t + 224] = mem[_36454 + 236 len 20]
                        mem[t + 256] = bool(mem[_36454 + 256])
                        mem[t + 288] = mem[_36454 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_27924 + 32] = stor13[address(arg5)].field_0 + arg2 - 1
                    mem[_27924 + 64] = (320 * _28924) + 128
                    _38060 = mem[_27010]
                    mem[_27924 + (320 * _28924) + 128] = mem[_27010]
                    mem[_27924 + (320 * _28924) + 160 len ceil32(_38060)] = mem[_27010 + 32 len ceil32(_38060)]
                    var51001 = ceil32(_38060)
                    if ceil32(_38060) > _38060:
                        mem[_27924 + (320 * _28924) + _38060 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_38060) + _27924 + (320 * _28924) + -mem[64] + 160
                _27011 = mem[64]
                mem[64] = mem[64] + 64
                mem[_27011] = 4
                mem[_27011 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                _27925 = mem[64]
                mem[mem[64]] = 96
                _28925 = mem[(32 * stor13[address(arg5)].field_0) + 128]
                mem[mem[64] + 96] = mem[(32 * stor13[address(arg5)].field_0) + 128]
                idx = 0
                s = (32 * stor13[address(arg5)].field_0) + 160
                t = mem[64] + 128
                while idx < _28925:
                    _36461 = mem[s]
                    mem[t] = mem[mem[s]]
                    mem[t + 32] = mem[_36461 + 32]
                    mem[t + 64] = mem[_36461 + 64]
                    mem[t + 96] = mem[_36461 + 96]
                    mem[t + 128] = mem[_36461 + 128]
                    mem[t + 160] = mem[_36461 + 172 len 20]
                    mem[t + 192] = mem[_36461 + 192]
                    mem[t + 224] = mem[_36461 + 236 len 20]
                    mem[t + 256] = bool(mem[_36461 + 256])
                    mem[t + 288] = mem[_36461 + 288]
                    idx = idx + 1
                    s = s + 32
                    t = t + 320
                    continue 
                mem[_27925 + 32] = stor13[address(arg5)].field_0 + arg2 - 1
                mem[_27925 + 64] = (320 * _28925) + 128
                _38061 = mem[_27011]
                mem[_27925 + (320 * _28925) + 128] = mem[_27011]
                mem[_27925 + (320 * _28925) + 160 len ceil32(_38061)] = mem[_27011 + 32 len ceil32(_38061)]
                var51001 = ceil32(_38061)
                if ceil32(_38061) > _38061:
                    mem[_27925 + (320 * _28925) + _38061 + 160] = 0
                return memory
                  from mem[64]
                   len ceil32(_38061) + _27925 + (320 * _28925) + -mem[64] + 160
            mem[64] = (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 480
            mem[(32 * stor13[address(arg5)].field_0) + (32 * arg2) + 160] = 0
            mem[(32 * stor13[address(arg5)].field_0) + (32 * arg2) + 192] = 0
            mem[(32 * stor13[address(arg5)].field_0) + (32 * arg2) + 224] = 0
            mem[(32 * stor13[address(arg5)].field_0) + (32 * arg2) + 256] = 0
            mem[(32 * stor13[address(arg5)].field_0) + (32 * arg2) + 288] = 0
            mem[(32 * stor13[address(arg5)].field_0) + (32 * arg2) + 320] = 0
            mem[(32 * stor13[address(arg5)].field_0) + (32 * arg2) + 352] = 0
            mem[(32 * stor13[address(arg5)].field_0) + (32 * arg2) + 384] = 0
            mem[(32 * stor13[address(arg5)].field_0) + (32 * arg2) + 416] = 0
            mem[(32 * stor13[address(arg5)].field_0) + (32 * arg2) + 448] = 0
            mem[var35001] = (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 160
            s = var35001
            idx = var35002
            while idx - 1:
                mem[64] = mem[64] + 320
                mem[(32 * stor13[address(arg5)].field_0) + (32 * arg2) + 160] = 0
                mem[(32 * stor13[address(arg5)].field_0) + (32 * arg2) + 192] = 0
                mem[(32 * stor13[address(arg5)].field_0) + (32 * arg2) + 224] = 0
                mem[(32 * stor13[address(arg5)].field_0) + (32 * arg2) + 256] = 0
                mem[(32 * stor13[address(arg5)].field_0) + (32 * arg2) + 288] = 0
                mem[(32 * stor13[address(arg5)].field_0) + (32 * arg2) + 320] = 0
                mem[(32 * stor13[address(arg5)].field_0) + (32 * arg2) + 352] = 0
                mem[(32 * stor13[address(arg5)].field_0) + (32 * arg2) + 384] = 0
                mem[(32 * stor13[address(arg5)].field_0) + (32 * arg2) + 416] = 0
                mem[(32 * stor13[address(arg5)].field_0) + (32 * arg2) + 448] = 0
                mem[s + 32] = (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 160
                s = s + 32
                idx = idx - 1
                continue 
            idx = 0
            while idx < arg2:
                if stor13[address(arg5)].field_0 - 1 > !idx:
                    revert with 0, 17
                if stor13[address(arg5)].field_0 + idx - 1 >= mem[96]:
                    revert with 0, 50
                mem[0] = mem[(32 * stor13[address(arg5)].field_0 + idx - 1) + 128]
                mem[32] = 12
                _50092 = sha3(mem[(32 * stor13[address(arg5)].field_0 + idx - 1) + 128], 12)
                _50093 = mem[64]
                mem[64] = mem[64] + 320
                mem[_50093] = stor12[mem[(32 * stor13[address(arg5)].field_0 + idx - 1) + 128]].field_0
                mem[_50093 + 32] = stor1[_50092]
                mem[_50093 + 64] = stor2[_50092]
                mem[_50093 + 96] = stor3[_50092]
                mem[_50093 + 128] = stor4[_50092]
                mem[_50093 + 160] = stor5[_50092]
                mem[_50093 + 192] = stor6[_50092]
                mem[_50093 + 224] = stor7[_50092].field_0
                mem[_50093 + 256] = bool(stor7[_50092].field_160)
                mem[_50093 + 288] = stor8[_50092]
                if idx >= mem[(32 * stor13[address(arg5)].field_0) + 128]:
                    revert with 0, 50
                mem[(32 * idx) + (32 * stor13[address(arg5)].field_0) + 160] = _50093
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
            if stor13[address(arg5)].field_0 - 1 > !arg2:
                revert with 0, 17
            if stor13[address(arg5)].field_0 - 1 > !arg2:
                revert with 0, 17
            if stor13[address(arg5)].field_0 + arg2 - 1 < mem[96]:
                _51595 = mem[64]
                mem[64] = mem[64] + 64
                mem[_51595] = 7
                mem[_51595 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                _52177 = mem[64]
                mem[mem[64]] = 96
                _53065 = mem[(32 * stor13[address(arg5)].field_0) + 128]
                mem[mem[64] + 96] = mem[(32 * stor13[address(arg5)].field_0) + 128]
                idx = 0
                s = (32 * stor13[address(arg5)].field_0) + 160
                t = mem[64] + 128
                while idx < _53065:
                    _58177 = mem[s]
                    mem[t] = mem[mem[s]]
                    mem[t + 32] = mem[_58177 + 32]
                    mem[t + 64] = mem[_58177 + 64]
                    mem[t + 96] = mem[_58177 + 96]
                    mem[t + 128] = mem[_58177 + 128]
                    mem[t + 160] = mem[_58177 + 172 len 20]
                    mem[t + 192] = mem[_58177 + 192]
                    mem[t + 224] = mem[_58177 + 236 len 20]
                    mem[t + 256] = bool(mem[_58177 + 256])
                    mem[t + 288] = mem[_58177 + 288]
                    idx = idx + 1
                    s = s + 32
                    t = t + 320
                    continue 
                mem[_52177 + 32] = stor13[address(arg5)].field_0 + arg2 - 1
                mem[_52177 + 64] = (320 * _53065) + 128
                _59936 = mem[_51595]
                mem[_52177 + (320 * _53065) + 128] = mem[_51595]
                mem[_52177 + (320 * _53065) + 160 len ceil32(_59936)] = mem[_51595 + 32 len ceil32(_59936)]
                var58001 = ceil32(_59936)
                if ceil32(_59936) > _59936:
                    mem[_52177 + (320 * _53065) + _59936 + 160] = 0
                return memory
                  from mem[64]
                   len ceil32(_59936) + _52177 + (320 * _53065) + -mem[64] + 160
            _51596 = mem[64]
            mem[64] = mem[64] + 64
            mem[_51596] = 4
            mem[_51596 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
            _52178 = mem[64]
            mem[mem[64]] = 96
            _53066 = mem[(32 * stor13[address(arg5)].field_0) + 128]
            mem[mem[64] + 96] = mem[(32 * stor13[address(arg5)].field_0) + 128]
            idx = 0
            s = (32 * stor13[address(arg5)].field_0) + 160
            t = mem[64] + 128
            while idx < _53066:
                _58184 = mem[s]
                mem[t] = mem[mem[s]]
                mem[t + 32] = mem[_58184 + 32]
                mem[t + 64] = mem[_58184 + 64]
                mem[t + 96] = mem[_58184 + 96]
                mem[t + 128] = mem[_58184 + 128]
                mem[t + 160] = mem[_58184 + 172 len 20]
                mem[t + 192] = mem[_58184 + 192]
                mem[t + 224] = mem[_58184 + 236 len 20]
                mem[t + 256] = bool(mem[_58184 + 256])
                mem[t + 288] = mem[_58184 + 288]
                idx = idx + 1
                s = s + 32
                t = t + 320
                continue 
            mem[_52178 + 32] = stor13[address(arg5)].field_0 + arg2 - 1
            mem[_52178 + 64] = (320 * _53066) + 128
            _59937 = mem[_51596]
            mem[_52178 + (320 * _53066) + 128] = mem[_51596]
            mem[_52178 + (320 * _53066) + 160 len ceil32(_59937)] = mem[_51596 + 32 len ceil32(_59937)]
            var58001 = ceil32(_59937)
            if ceil32(_59937) > _59937:
                mem[_52178 + (320 * _53066) + _59937 + 160] = 0
            return memory
              from mem[64]
               len ceil32(_59937) + _52178 + (320 * _53066) + -mem[64] + 160
        mem[0] = address(arg5)
        mem[32] = 15
        mem[(32 * stor13[address(arg5)].field_0) + 128] = stor15[address(arg5)].field_0
        if not stor15[address(arg5)].field_0:
            if not stor15[address(arg5)].field_0:
                mem[64] = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 256
                mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192] = 4
                mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 256] = 96
                _13652 = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 352] = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                idx = 0
                s = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192
                t = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 384
                while idx < mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]:
                    _24465 = mem[s]
                    mem[t] = mem[mem[s]]
                    mem[t + 32] = mem[_24465 + 32]
                    mem[t + 64] = mem[_24465 + 64]
                    mem[t + 96] = mem[_24465 + 96]
                    mem[t + 128] = mem[_24465 + 128]
                    mem[t + 160] = mem[_24465 + 172 len 20]
                    mem[t + 192] = mem[_24465 + 192]
                    mem[t + 224] = mem[_24465 + 236 len 20]
                    mem[t + 256] = bool(mem[_24465 + 256])
                    mem[t + 288] = mem[_24465 + 288]
                    idx = idx + 1
                    s = s + 32
                    t = t + 320
                    continue 
                mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 288] = 0
                mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 320] = (320 * _13652) + 128
                mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (320 * _13652) + 384] = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (320 * _13652) + 416 len ceil32(mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192])] = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224 len ceil32(mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192])]
                var32001 = ceil32(mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192])
                if ceil32(mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]) > mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]:
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (320 * _13652) + mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192] + 416] = 0
                return memory
                  from mem[64]
                   len ceil32(mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (320 * _13652) + -mem[64] + 416
            if arg1 < stor15[address(arg5)].field_0:
                if arg3:
                    if arg2 <= arg1:
                        if arg2 > test266151307():
                            revert with 0, 65
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160] = arg2
                        mem[64] = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 192
                        if not arg2:
                            idx = 0
                            while idx < arg2:
                                if arg1 < idx:
                                    revert with 0, 17
                                if arg1 - idx >= mem[(32 * stor13[address(arg5)].field_0) + 128]:
                                    revert with 0, 50
                                mem[0] = mem[(32 * arg1 - idx) + (32 * stor13[address(arg5)].field_0) + 160]
                                mem[32] = 12
                                _25550 = sha3(mem[(32 * arg1 - idx) + (32 * stor13[address(arg5)].field_0) + 160], 12)
                                _25551 = mem[64]
                                mem[64] = mem[64] + 320
                                mem[_25551] = stor12[mem[(32 * arg1 - idx) + (32 * stor13[address(arg5)].field_0) + 160]].field_0
                                mem[_25551 + 32] = stor1[_25550]
                                mem[_25551 + 64] = stor2[_25550]
                                mem[_25551 + 96] = stor3[_25550]
                                mem[_25551 + 128] = stor4[_25550]
                                mem[_25551 + 160] = stor5[_25550]
                                mem[_25551 + 192] = stor6[_25550]
                                mem[_25551 + 224] = stor7[_25550].field_0
                                mem[_25551 + 256] = bool(stor7[_25550].field_160)
                                mem[_25551 + 288] = stor8[_25550]
                                if idx >= mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]:
                                    revert with 0, 50
                                mem[(32 * idx) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192] = _25551
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                continue 
                            if arg1 < arg2:
                                _24735 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_24735] = 4
                                mem[_24735 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                                _24971 = mem[64]
                                mem[mem[64]] = 96
                                _25547 = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                                mem[mem[64] + 96] = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                                idx = 0
                                s = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192
                                t = mem[64] + 128
                                while idx < _25547:
                                    _36483 = mem[s]
                                    mem[t] = mem[mem[s]]
                                    mem[t + 32] = mem[_36483 + 32]
                                    mem[t + 64] = mem[_36483 + 64]
                                    mem[t + 96] = mem[_36483 + 96]
                                    mem[t + 128] = mem[_36483 + 128]
                                    mem[t + 160] = mem[_36483 + 172 len 20]
                                    mem[t + 192] = mem[_36483 + 192]
                                    mem[t + 224] = mem[_36483 + 236 len 20]
                                    mem[t + 256] = bool(mem[_36483 + 256])
                                    mem[t + 288] = mem[_36483 + 288]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 320
                                    continue 
                                mem[_24971 + 32] = 0
                                mem[_24971 + 64] = (320 * _25547) + 128
                                _38064 = mem[_24735]
                                mem[_24971 + (320 * _25547) + 128] = mem[_24735]
                                mem[_24971 + (320 * _25547) + 160 len ceil32(_38064)] = mem[_24735 + 32 len ceil32(_38064)]
                                var40001 = ceil32(_38064)
                                if ceil32(_38064) > _38064:
                                    mem[_24971 + (320 * _25547) + _38064 + 160] = 0
                                return memory
                                  from mem[64]
                                   len ceil32(_38064) + _24971 + (320 * _25547) + -mem[64] + 160
                            _25548 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_25548] = 7
                            mem[_25548 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                            _26437 = mem[64]
                            mem[mem[64]] = 96
                            _27016 = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                            mem[mem[64] + 96] = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                            idx = 0
                            s = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192
                            t = mem[64] + 128
                            while idx < _27016:
                                _36490 = mem[s]
                                mem[t] = mem[mem[s]]
                                mem[t + 32] = mem[_36490 + 32]
                                mem[t + 64] = mem[_36490 + 64]
                                mem[t + 96] = mem[_36490 + 96]
                                mem[t + 128] = mem[_36490 + 128]
                                mem[t + 160] = mem[_36490 + 172 len 20]
                                mem[t + 192] = mem[_36490 + 192]
                                mem[t + 224] = mem[_36490 + 236 len 20]
                                mem[t + 256] = bool(mem[_36490 + 256])
                                mem[t + 288] = mem[_36490 + 288]
                                idx = idx + 1
                                s = s + 32
                                t = t + 320
                                continue 
                            mem[_26437 + 32] = arg1 - arg2
                            mem[_26437 + 64] = (320 * _27016) + 128
                            _38065 = mem[_25548]
                            mem[_26437 + (320 * _27016) + 128] = mem[_25548]
                            mem[_26437 + (320 * _27016) + 160 len ceil32(_38065)] = mem[_25548 + 32 len ceil32(_38065)]
                            var43001 = ceil32(_38065)
                            if ceil32(_38065) > _38065:
                                mem[_26437 + (320 * _27016) + _38065 + 160] = 0
                            return memory
                              from mem[64]
                               len ceil32(_38065) + _26437 + (320 * _27016) + -mem[64] + 160
                        mem[64] = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 512
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 192] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 256] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 288] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 320] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 352] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 384] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 416] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 448] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 480] = 0
                        mem[var30001] = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 192
                        s = var30001
                        idx = var30002
                        while idx - 1:
                            mem[64] = mem[64] + 320
                            mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 192] = 0
                            mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224] = 0
                            mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 256] = 0
                            mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 288] = 0
                            mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 320] = 0
                            mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 352] = 0
                            mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 384] = 0
                            mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 416] = 0
                            mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 448] = 0
                            mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 480] = 0
                            mem[s + 32] = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 192
                            s = s + 32
                            idx = idx - 1
                            continue 
                        idx = 0
                        while idx < arg2:
                            if arg1 < idx:
                                revert with 0, 17
                            if arg1 - idx >= mem[(32 * stor13[address(arg5)].field_0) + 128]:
                                revert with 0, 50
                            mem[0] = mem[(32 * arg1 - idx) + (32 * stor13[address(arg5)].field_0) + 160]
                            mem[32] = 12
                            _50106 = sha3(mem[(32 * arg1 - idx) + (32 * stor13[address(arg5)].field_0) + 160], 12)
                            _50107 = mem[64]
                            mem[64] = mem[64] + 320
                            mem[_50107] = stor12[mem[(32 * arg1 - idx) + (32 * stor13[address(arg5)].field_0) + 160]].field_0
                            mem[_50107 + 32] = stor1[_50106]
                            mem[_50107 + 64] = stor2[_50106]
                            mem[_50107 + 96] = stor3[_50106]
                            mem[_50107 + 128] = stor4[_50106]
                            mem[_50107 + 160] = stor5[_50106]
                            mem[_50107 + 192] = stor6[_50106]
                            mem[_50107 + 224] = stor7[_50106].field_0
                            mem[_50107 + 256] = bool(stor7[_50106].field_160)
                            mem[_50107 + 288] = stor8[_50106]
                            if idx >= mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]:
                                revert with 0, 50
                            mem[(32 * idx) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192] = _50107
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            continue 
                        if arg1 < arg2:
                            _49249 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_49249] = 4
                            mem[_49249 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                            _49477 = mem[64]
                            mem[mem[64]] = 96
                            _50103 = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                            mem[mem[64] + 96] = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                            idx = 0
                            s = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192
                            t = mem[64] + 128
                            while idx < _50103:
                                _58205 = mem[s]
                                mem[t] = mem[mem[s]]
                                mem[t + 32] = mem[_58205 + 32]
                                mem[t + 64] = mem[_58205 + 64]
                                mem[t + 96] = mem[_58205 + 96]
                                mem[t + 128] = mem[_58205 + 128]
                                mem[t + 160] = mem[_58205 + 172 len 20]
                                mem[t + 192] = mem[_58205 + 192]
                                mem[t + 224] = mem[_58205 + 236 len 20]
                                mem[t + 256] = bool(mem[_58205 + 256])
                                mem[t + 288] = mem[_58205 + 288]
                                idx = idx + 1
                                s = s + 32
                                t = t + 320
                                continue 
                            mem[_49477 + 32] = 0
                            mem[_49477 + 64] = (320 * _50103) + 128
                            _59940 = mem[_49249]
                            mem[_49477 + (320 * _50103) + 128] = mem[_49249]
                            mem[_49477 + (320 * _50103) + 160 len ceil32(_59940)] = mem[_49249 + 32 len ceil32(_59940)]
                            var47001 = ceil32(_59940)
                            if ceil32(_59940) > _59940:
                                mem[_49477 + (320 * _50103) + _59940 + 160] = 0
                            return memory
                              from mem[64]
                               len ceil32(_59940) + _49477 + (320 * _50103) + -mem[64] + 160
                        _50104 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_50104] = 7
                        mem[_50104 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                        _51042 = mem[64]
                        mem[mem[64]] = 96
                        _51600 = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                        mem[mem[64] + 96] = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                        idx = 0
                        s = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192
                        t = mem[64] + 128
                        while idx < _51600:
                            _58212 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_58212 + 32]
                            mem[t + 64] = mem[_58212 + 64]
                            mem[t + 96] = mem[_58212 + 96]
                            mem[t + 128] = mem[_58212 + 128]
                            mem[t + 160] = mem[_58212 + 172 len 20]
                            mem[t + 192] = mem[_58212 + 192]
                            mem[t + 224] = mem[_58212 + 236 len 20]
                            mem[t + 256] = bool(mem[_58212 + 256])
                            mem[t + 288] = mem[_58212 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_51042 + 32] = arg1 - arg2
                        mem[_51042 + 64] = (320 * _51600) + 128
                        _59941 = mem[_50104]
                        mem[_51042 + (320 * _51600) + 128] = mem[_50104]
                        mem[_51042 + (320 * _51600) + 160 len ceil32(_59941)] = mem[_50104 + 32 len ceil32(_59941)]
                        var50001 = ceil32(_59941)
                        if ceil32(_59941) > _59941:
                            mem[_51042 + (320 * _51600) + _59941 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_59941) + _51042 + (320 * _51600) + -mem[64] + 160
                    if 1 > !arg1:
                        revert with 0, 17
                    if arg1 + 1 > test266151307():
                        revert with 0, 65
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160] = arg1 + 1
                    mem[64] = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 192
                    if not arg1 + 1:
                        idx = 0
                        while idx < arg1 + 1:
                            if arg1 < idx:
                                revert with 0, 17
                            if arg1 - idx >= mem[(32 * stor13[address(arg5)].field_0) + 128]:
                                revert with 0, 50
                            mem[0] = mem[(32 * arg1 - idx) + (32 * stor13[address(arg5)].field_0) + 160]
                            mem[32] = 12
                            _25556 = sha3(mem[(32 * arg1 - idx) + (32 * stor13[address(arg5)].field_0) + 160], 12)
                            _25557 = mem[64]
                            mem[64] = mem[64] + 320
                            mem[_25557] = stor12[mem[(32 * arg1 - idx) + (32 * stor13[address(arg5)].field_0) + 160]].field_0
                            mem[_25557 + 32] = stor1[_25556]
                            mem[_25557 + 64] = stor2[_25556]
                            mem[_25557 + 96] = stor3[_25556]
                            mem[_25557 + 128] = stor4[_25556]
                            mem[_25557 + 160] = stor5[_25556]
                            mem[_25557 + 192] = stor6[_25556]
                            mem[_25557 + 224] = stor7[_25556].field_0
                            mem[_25557 + 256] = bool(stor7[_25556].field_160)
                            mem[_25557 + 288] = stor8[_25556]
                            if idx >= mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]:
                                revert with 0, 50
                            mem[(32 * idx) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192] = _25557
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            continue 
                        if arg1 < arg1 + 1:
                            _24736 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_24736] = 4
                            mem[_24736 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                            _24973 = mem[64]
                            mem[mem[64]] = 96
                            _25553 = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                            mem[mem[64] + 96] = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                            idx = 0
                            s = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192
                            t = mem[64] + 128
                            while idx < _25553:
                                _36497 = mem[s]
                                mem[t] = mem[mem[s]]
                                mem[t + 32] = mem[_36497 + 32]
                                mem[t + 64] = mem[_36497 + 64]
                                mem[t + 96] = mem[_36497 + 96]
                                mem[t + 128] = mem[_36497 + 128]
                                mem[t + 160] = mem[_36497 + 172 len 20]
                                mem[t + 192] = mem[_36497 + 192]
                                mem[t + 224] = mem[_36497 + 236 len 20]
                                mem[t + 256] = bool(mem[_36497 + 256])
                                mem[t + 288] = mem[_36497 + 288]
                                idx = idx + 1
                                s = s + 32
                                t = t + 320
                                continue 
                            mem[_24973 + 32] = 0
                            mem[_24973 + 64] = (320 * _25553) + 128
                            _38066 = mem[_24736]
                            mem[_24973 + (320 * _25553) + 128] = mem[_24736]
                            mem[_24973 + (320 * _25553) + 160 len ceil32(_38066)] = mem[_24736 + 32 len ceil32(_38066)]
                            var44001 = ceil32(_38066)
                            if ceil32(_38066) > _38066:
                                mem[_24973 + (320 * _25553) + _38066 + 160] = 0
                            return memory
                              from mem[64]
                               len ceil32(_38066) + _24973 + (320 * _25553) + -mem[64] + 160
                        _25554 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_25554] = 7
                        mem[_25554 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                        _26446 = mem[64]
                        mem[mem[64]] = 96
                        _27018 = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                        mem[mem[64] + 96] = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                        idx = 0
                        s = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192
                        t = mem[64] + 128
                        while idx < _27018:
                            _36504 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_36504 + 32]
                            mem[t + 64] = mem[_36504 + 64]
                            mem[t + 96] = mem[_36504 + 96]
                            mem[t + 128] = mem[_36504 + 128]
                            mem[t + 160] = mem[_36504 + 172 len 20]
                            mem[t + 192] = mem[_36504 + 192]
                            mem[t + 224] = mem[_36504 + 236 len 20]
                            mem[t + 256] = bool(mem[_36504 + 256])
                            mem[t + 288] = mem[_36504 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_26446 + 32] = -1
                        mem[_26446 + 64] = (320 * _27018) + 128
                        _38067 = mem[_25554]
                        mem[_26446 + (320 * _27018) + 128] = mem[_25554]
                        mem[_26446 + (320 * _27018) + 160 len ceil32(_38067)] = mem[_25554 + 32 len ceil32(_38067)]
                        var47001 = ceil32(_38067)
                        if ceil32(_38067) > _38067:
                            mem[_26446 + (320 * _27018) + _38067 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_38067) + _26446 + (320 * _27018) + -mem[64] + 160
                    mem[64] = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 512
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 192] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 224] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 256] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 288] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 320] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 352] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 384] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 416] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 448] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 480] = 0
                    mem[var34001] = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 192
                    s = var34001
                    idx = var34002
                    while idx - 1:
                        mem[64] = mem[64] + 320
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 192] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 224] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 256] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 288] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 320] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 352] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 384] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 416] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 448] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 480] = 0
                        mem[s + 32] = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 192
                        s = s + 32
                        idx = idx - 1
                        continue 
                    idx = 0
                    while idx < arg1 + 1:
                        if arg1 < idx:
                            revert with 0, 17
                        if arg1 - idx >= mem[(32 * stor13[address(arg5)].field_0) + 128]:
                            revert with 0, 50
                        mem[0] = mem[(32 * arg1 - idx) + (32 * stor13[address(arg5)].field_0) + 160]
                        mem[32] = 12
                        _50114 = sha3(mem[(32 * arg1 - idx) + (32 * stor13[address(arg5)].field_0) + 160], 12)
                        _50115 = mem[64]
                        mem[64] = mem[64] + 320
                        mem[_50115] = stor12[mem[(32 * arg1 - idx) + (32 * stor13[address(arg5)].field_0) + 160]].field_0
                        mem[_50115 + 32] = stor1[_50114]
                        mem[_50115 + 64] = stor2[_50114]
                        mem[_50115 + 96] = stor3[_50114]
                        mem[_50115 + 128] = stor4[_50114]
                        mem[_50115 + 160] = stor5[_50114]
                        mem[_50115 + 192] = stor6[_50114]
                        mem[_50115 + 224] = stor7[_50114].field_0
                        mem[_50115 + 256] = bool(stor7[_50114].field_160)
                        mem[_50115 + 288] = stor8[_50114]
                        if idx >= mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]:
                            revert with 0, 50
                        mem[(32 * idx) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192] = _50115
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if arg1 < arg1 + 1:
                        _49250 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_49250] = 4
                        mem[_49250 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                        _49481 = mem[64]
                        mem[mem[64]] = 96
                        _50111 = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                        mem[mem[64] + 96] = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                        idx = 0
                        s = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192
                        t = mem[64] + 128
                        while idx < _50111:
                            _58219 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_58219 + 32]
                            mem[t + 64] = mem[_58219 + 64]
                            mem[t + 96] = mem[_58219 + 96]
                            mem[t + 128] = mem[_58219 + 128]
                            mem[t + 160] = mem[_58219 + 172 len 20]
                            mem[t + 192] = mem[_58219 + 192]
                            mem[t + 224] = mem[_58219 + 236 len 20]
                            mem[t + 256] = bool(mem[_58219 + 256])
                            mem[t + 288] = mem[_58219 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_49481 + 32] = 0
                        mem[_49481 + 64] = (320 * _50111) + 128
                        _59942 = mem[_49250]
                        mem[_49481 + (320 * _50111) + 128] = mem[_49250]
                        mem[_49481 + (320 * _50111) + 160 len ceil32(_59942)] = mem[_49250 + 32 len ceil32(_59942)]
                        var51001 = ceil32(_59942)
                        if ceil32(_59942) > _59942:
                            mem[_49481 + (320 * _50111) + _59942 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_59942) + _49481 + (320 * _50111) + -mem[64] + 160
                    _50112 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_50112] = 7
                    mem[_50112 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                    _51050 = mem[64]
                    mem[mem[64]] = 96
                    _51602 = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                    mem[mem[64] + 96] = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                    idx = 0
                    s = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192
                    t = mem[64] + 128
                    while idx < _51602:
                        _58226 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_58226 + 32]
                        mem[t + 64] = mem[_58226 + 64]
                        mem[t + 96] = mem[_58226 + 96]
                        mem[t + 128] = mem[_58226 + 128]
                        mem[t + 160] = mem[_58226 + 172 len 20]
                        mem[t + 192] = mem[_58226 + 192]
                        mem[t + 224] = mem[_58226 + 236 len 20]
                        mem[t + 256] = bool(mem[_58226 + 256])
                        mem[t + 288] = mem[_58226 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_51050 + 32] = -1
                    mem[_51050 + 64] = (320 * _51602) + 128
                    _59943 = mem[_50112]
                    mem[_51050 + (320 * _51602) + 128] = mem[_50112]
                    mem[_51050 + (320 * _51602) + 160 len ceil32(_59943)] = mem[_50112 + 32 len ceil32(_59943)]
                    var54001 = ceil32(_59943)
                    if ceil32(_59943) > _59943:
                        mem[_51050 + (320 * _51602) + _59943 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_59943) + _51050 + (320 * _51602) + -mem[64] + 160
                if stor15[address(arg5)].field_0 < arg1:
                    revert with 0, 17
                if arg2 <= stor15[address(arg5)].field_0 - arg1:
                    if arg2 > test266151307():
                        revert with 0, 65
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160] = arg2
                    mem[64] = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 192
                    if not arg2:
                        idx = 0
                        while idx < arg2:
                            if arg1 > !idx:
                                revert with 0, 17
                            if arg1 + idx >= mem[(32 * stor13[address(arg5)].field_0) + 128]:
                                revert with 0, 50
                            mem[0] = mem[(32 * arg1 + idx) + (32 * stor13[address(arg5)].field_0) + 160]
                            mem[32] = 12
                            _25560 = sha3(mem[(32 * arg1 + idx) + (32 * stor13[address(arg5)].field_0) + 160], 12)
                            _25561 = mem[64]
                            mem[64] = mem[64] + 320
                            mem[_25561] = stor12[mem[(32 * arg1 + idx) + (32 * stor13[address(arg5)].field_0) + 160]].field_0
                            mem[_25561 + 32] = stor1[_25560]
                            mem[_25561 + 64] = stor2[_25560]
                            mem[_25561 + 96] = stor3[_25560]
                            mem[_25561 + 128] = stor4[_25560]
                            mem[_25561 + 160] = stor5[_25560]
                            mem[_25561 + 192] = stor6[_25560]
                            mem[_25561 + 224] = stor7[_25560].field_0
                            mem[_25561 + 256] = bool(stor7[_25560].field_160)
                            mem[_25561 + 288] = stor8[_25560]
                            if idx >= mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]:
                                revert with 0, 50
                            mem[(32 * idx) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192] = _25561
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            continue 
                        if arg1 > !arg2:
                            revert with 0, 17
                        if arg1 > !arg2:
                            revert with 0, 17
                        if arg1 + arg2 < mem[(32 * stor13[address(arg5)].field_0) + 128]:
                            _27019 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_27019] = 7
                            mem[_27019 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                            _27964 = mem[64]
                            mem[mem[64]] = 96
                            _28932 = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                            mem[mem[64] + 96] = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                            idx = 0
                            s = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192
                            t = mem[64] + 128
                            while idx < _28932:
                                _36511 = mem[s]
                                mem[t] = mem[mem[s]]
                                mem[t + 32] = mem[_36511 + 32]
                                mem[t + 64] = mem[_36511 + 64]
                                mem[t + 96] = mem[_36511 + 96]
                                mem[t + 128] = mem[_36511 + 128]
                                mem[t + 160] = mem[_36511 + 172 len 20]
                                mem[t + 192] = mem[_36511 + 192]
                                mem[t + 224] = mem[_36511 + 236 len 20]
                                mem[t + 256] = bool(mem[_36511 + 256])
                                mem[t + 288] = mem[_36511 + 288]
                                idx = idx + 1
                                s = s + 32
                                t = t + 320
                                continue 
                            mem[_27964 + 32] = arg1 + arg2
                            mem[_27964 + 64] = (320 * _28932) + 128
                            _38068 = mem[_27019]
                            mem[_27964 + (320 * _28932) + 128] = mem[_27019]
                            mem[_27964 + (320 * _28932) + 160 len ceil32(_38068)] = mem[_27019 + 32 len ceil32(_38068)]
                            var49001 = ceil32(_38068)
                            if ceil32(_38068) > _38068:
                                mem[_27964 + (320 * _28932) + _38068 + 160] = 0
                            return memory
                              from mem[64]
                               len ceil32(_38068) + _27964 + (320 * _28932) + -mem[64] + 160
                        _27020 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_27020] = 4
                        mem[_27020 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                        _27965 = mem[64]
                        mem[mem[64]] = 96
                        _28933 = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                        mem[mem[64] + 96] = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                        idx = 0
                        s = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192
                        t = mem[64] + 128
                        while idx < _28933:
                            _36518 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_36518 + 32]
                            mem[t + 64] = mem[_36518 + 64]
                            mem[t + 96] = mem[_36518 + 96]
                            mem[t + 128] = mem[_36518 + 128]
                            mem[t + 160] = mem[_36518 + 172 len 20]
                            mem[t + 192] = mem[_36518 + 192]
                            mem[t + 224] = mem[_36518 + 236 len 20]
                            mem[t + 256] = bool(mem[_36518 + 256])
                            mem[t + 288] = mem[_36518 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_27965 + 32] = arg1 + arg2
                        mem[_27965 + 64] = (320 * _28933) + 128
                        _38069 = mem[_27020]
                        mem[_27965 + (320 * _28933) + 128] = mem[_27020]
                        mem[_27965 + (320 * _28933) + 160 len ceil32(_38069)] = mem[_27020 + 32 len ceil32(_38069)]
                        var49001 = ceil32(_38069)
                        if ceil32(_38069) > _38069:
                            mem[_27965 + (320 * _28933) + _38069 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_38069) + _27965 + (320 * _28933) + -mem[64] + 160
                    mem[64] = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 512
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 192] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 256] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 288] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 320] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 352] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 384] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 416] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 448] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 480] = 0
                    mem[var33001] = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 192
                    s = var33001
                    idx = var33002
                    while idx - 1:
                        mem[64] = mem[64] + 320
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 192] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 256] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 288] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 320] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 352] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 384] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 416] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 448] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 480] = 0
                        mem[s + 32] = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 192
                        s = s + 32
                        idx = idx - 1
                        continue 
                    idx = 0
                    while idx < arg2:
                        if arg1 > !idx:
                            revert with 0, 17
                        if arg1 + idx >= mem[(32 * stor13[address(arg5)].field_0) + 128]:
                            revert with 0, 50
                        mem[0] = mem[(32 * arg1 + idx) + (32 * stor13[address(arg5)].field_0) + 160]
                        mem[32] = 12
                        _50120 = sha3(mem[(32 * arg1 + idx) + (32 * stor13[address(arg5)].field_0) + 160], 12)
                        _50121 = mem[64]
                        mem[64] = mem[64] + 320
                        mem[_50121] = stor12[mem[(32 * arg1 + idx) + (32 * stor13[address(arg5)].field_0) + 160]].field_0
                        mem[_50121 + 32] = stor1[_50120]
                        mem[_50121 + 64] = stor2[_50120]
                        mem[_50121 + 96] = stor3[_50120]
                        mem[_50121 + 128] = stor4[_50120]
                        mem[_50121 + 160] = stor5[_50120]
                        mem[_50121 + 192] = stor6[_50120]
                        mem[_50121 + 224] = stor7[_50120].field_0
                        mem[_50121 + 256] = bool(stor7[_50120].field_160)
                        mem[_50121 + 288] = stor8[_50120]
                        if idx >= mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]:
                            revert with 0, 50
                        mem[(32 * idx) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192] = _50121
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if arg1 > !arg2:
                        revert with 0, 17
                    if arg1 > !arg2:
                        revert with 0, 17
                    if arg1 + arg2 < mem[(32 * stor13[address(arg5)].field_0) + 128]:
                        _51603 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_51603] = 7
                        mem[_51603 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                        _52197 = mem[64]
                        mem[mem[64]] = 96
                        _53073 = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                        mem[mem[64] + 96] = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                        idx = 0
                        s = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192
                        t = mem[64] + 128
                        while idx < _53073:
                            _58233 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_58233 + 32]
                            mem[t + 64] = mem[_58233 + 64]
                            mem[t + 96] = mem[_58233 + 96]
                            mem[t + 128] = mem[_58233 + 128]
                            mem[t + 160] = mem[_58233 + 172 len 20]
                            mem[t + 192] = mem[_58233 + 192]
                            mem[t + 224] = mem[_58233 + 236 len 20]
                            mem[t + 256] = bool(mem[_58233 + 256])
                            mem[t + 288] = mem[_58233 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_52197 + 32] = arg1 + arg2
                        mem[_52197 + 64] = (320 * _53073) + 128
                        _59944 = mem[_51603]
                        mem[_52197 + (320 * _53073) + 128] = mem[_51603]
                        mem[_52197 + (320 * _53073) + 160 len ceil32(_59944)] = mem[_51603 + 32 len ceil32(_59944)]
                        var56001 = ceil32(_59944)
                        if ceil32(_59944) > _59944:
                            mem[_52197 + (320 * _53073) + _59944 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_59944) + _52197 + (320 * _53073) + -mem[64] + 160
                    _51604 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_51604] = 4
                    mem[_51604 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                    _52198 = mem[64]
                    mem[mem[64]] = 96
                    _53074 = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                    mem[mem[64] + 96] = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                    idx = 0
                    s = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192
                    t = mem[64] + 128
                    while idx < _53074:
                        _58240 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_58240 + 32]
                        mem[t + 64] = mem[_58240 + 64]
                        mem[t + 96] = mem[_58240 + 96]
                        mem[t + 128] = mem[_58240 + 128]
                        mem[t + 160] = mem[_58240 + 172 len 20]
                        mem[t + 192] = mem[_58240 + 192]
                        mem[t + 224] = mem[_58240 + 236 len 20]
                        mem[t + 256] = bool(mem[_58240 + 256])
                        mem[t + 288] = mem[_58240 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_52198 + 32] = arg1 + arg2
                    mem[_52198 + 64] = (320 * _53074) + 128
                    _59945 = mem[_51604]
                    mem[_52198 + (320 * _53074) + 128] = mem[_51604]
                    mem[_52198 + (320 * _53074) + 160 len ceil32(_59945)] = mem[_51604 + 32 len ceil32(_59945)]
                    var56001 = ceil32(_59945)
                    if ceil32(_59945) > _59945:
                        mem[_52198 + (320 * _53074) + _59945 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_59945) + _52198 + (320 * _53074) + -mem[64] + 160
                if stor15[address(arg5)].field_0 < arg1:
                    revert with 0, 17
                if stor15[address(arg5)].field_0 - arg1 > test266151307():
                    revert with 0, 65
                mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160] = stor15[address(arg5)].field_0 - arg1
                mem[64] = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 192
                if not stor15[address(arg5)].field_0 - arg1:
                    idx = 0
                    while idx < stor15[address(arg5)].field_0 - arg1:
                        if arg1 > !idx:
                            revert with 0, 17
                        if arg1 + idx >= mem[(32 * stor13[address(arg5)].field_0) + 128]:
                            revert with 0, 50
                        mem[0] = mem[(32 * arg1 + idx) + (32 * stor13[address(arg5)].field_0) + 160]
                        mem[32] = 12
                        _25564 = sha3(mem[(32 * arg1 + idx) + (32 * stor13[address(arg5)].field_0) + 160], 12)
                        _25565 = mem[64]
                        mem[64] = mem[64] + 320
                        mem[_25565] = stor12[mem[(32 * arg1 + idx) + (32 * stor13[address(arg5)].field_0) + 160]].field_0
                        mem[_25565 + 32] = stor1[_25564]
                        mem[_25565 + 64] = stor2[_25564]
                        mem[_25565 + 96] = stor3[_25564]
                        mem[_25565 + 128] = stor4[_25564]
                        mem[_25565 + 160] = stor5[_25564]
                        mem[_25565 + 192] = stor6[_25564]
                        mem[_25565 + 224] = stor7[_25564].field_0
                        mem[_25565 + 256] = bool(stor7[_25564].field_160)
                        mem[_25565 + 288] = stor8[_25564]
                        if idx >= mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]:
                            revert with 0, 50
                        mem[(32 * idx) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192] = _25565
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if arg1 > !(stor15[address(arg5)].field_0 - arg1):
                        revert with 0, 17
                    if arg1 > !(stor15[address(arg5)].field_0 - arg1):
                        revert with 0, 17
                    if stor15[address(arg5)].field_0 < mem[(32 * stor13[address(arg5)].field_0) + 128]:
                        _27021 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_27021] = 7
                        mem[_27021 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                        _27970 = mem[64]
                        mem[mem[64]] = 96
                        _28934 = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                        mem[mem[64] + 96] = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                        idx = 0
                        s = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192
                        t = mem[64] + 128
                        while idx < _28934:
                            _36525 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_36525 + 32]
                            mem[t + 64] = mem[_36525 + 64]
                            mem[t + 96] = mem[_36525 + 96]
                            mem[t + 128] = mem[_36525 + 128]
                            mem[t + 160] = mem[_36525 + 172 len 20]
                            mem[t + 192] = mem[_36525 + 192]
                            mem[t + 224] = mem[_36525 + 236 len 20]
                            mem[t + 256] = bool(mem[_36525 + 256])
                            mem[t + 288] = mem[_36525 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_27970 + 32] = stor15[address(arg5)].field_0
                        mem[_27970 + 64] = (320 * _28934) + 128
                        _38070 = mem[_27021]
                        mem[_27970 + (320 * _28934) + 128] = mem[_27021]
                        mem[_27970 + (320 * _28934) + 160 len ceil32(_38070)] = mem[_27021 + 32 len ceil32(_38070)]
                        var53001 = ceil32(_38070)
                        if ceil32(_38070) > _38070:
                            mem[_27970 + (320 * _28934) + _38070 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_38070) + _27970 + (320 * _28934) + -mem[64] + 160
                    _27022 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_27022] = 4
                    mem[_27022 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                    _27971 = mem[64]
                    mem[mem[64]] = 96
                    _28935 = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                    mem[mem[64] + 96] = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                    idx = 0
                    s = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192
                    t = mem[64] + 128
                    while idx < _28935:
                        _36532 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_36532 + 32]
                        mem[t + 64] = mem[_36532 + 64]
                        mem[t + 96] = mem[_36532 + 96]
                        mem[t + 128] = mem[_36532 + 128]
                        mem[t + 160] = mem[_36532 + 172 len 20]
                        mem[t + 192] = mem[_36532 + 192]
                        mem[t + 224] = mem[_36532 + 236 len 20]
                        mem[t + 256] = bool(mem[_36532 + 256])
                        mem[t + 288] = mem[_36532 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_27971 + 32] = stor15[address(arg5)].field_0
                    mem[_27971 + 64] = (320 * _28935) + 128
                    _38071 = mem[_27022]
                    mem[_27971 + (320 * _28935) + 128] = mem[_27022]
                    mem[_27971 + (320 * _28935) + 160 len ceil32(_38071)] = mem[_27022 + 32 len ceil32(_38071)]
                    var53001 = ceil32(_38071)
                    if ceil32(_38071) > _38071:
                        mem[_27971 + (320 * _28935) + _38071 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_38071) + _27971 + (320 * _28935) + -mem[64] + 160
                mem[64] = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 512
                mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 192] = 0
                mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 224] = 0
                mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 256] = 0
                mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 288] = 0
                mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 320] = 0
                mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 352] = 0
                mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 384] = 0
                mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 416] = 0
                mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 448] = 0
                mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 480] = 0
                mem[var37001] = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 192
                s = var37001
                idx = var37002
                while idx - 1:
                    mem[64] = mem[64] + 320
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 192] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 224] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 256] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 288] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 320] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 352] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 384] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 416] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 448] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 480] = 0
                    mem[s + 32] = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 192
                    s = s + 32
                    idx = idx - 1
                    continue 
                idx = 0
                while idx < stor15[address(arg5)].field_0 - arg1:
                    if arg1 > !idx:
                        revert with 0, 17
                    if arg1 + idx >= mem[(32 * stor13[address(arg5)].field_0) + 128]:
                        revert with 0, 50
                    mem[0] = mem[(32 * arg1 + idx) + (32 * stor13[address(arg5)].field_0) + 160]
                    mem[32] = 12
                    _50126 = sha3(mem[(32 * arg1 + idx) + (32 * stor13[address(arg5)].field_0) + 160], 12)
                    _50127 = mem[64]
                    mem[64] = mem[64] + 320
                    mem[_50127] = stor12[mem[(32 * arg1 + idx) + (32 * stor13[address(arg5)].field_0) + 160]].field_0
                    mem[_50127 + 32] = stor1[_50126]
                    mem[_50127 + 64] = stor2[_50126]
                    mem[_50127 + 96] = stor3[_50126]
                    mem[_50127 + 128] = stor4[_50126]
                    mem[_50127 + 160] = stor5[_50126]
                    mem[_50127 + 192] = stor6[_50126]
                    mem[_50127 + 224] = stor7[_50126].field_0
                    mem[_50127 + 256] = bool(stor7[_50126].field_160)
                    mem[_50127 + 288] = stor8[_50126]
                    if idx >= mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]:
                        revert with 0, 50
                    mem[(32 * idx) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192] = _50127
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
                if arg1 > !(stor15[address(arg5)].field_0 - arg1):
                    revert with 0, 17
                if arg1 > !(stor15[address(arg5)].field_0 - arg1):
                    revert with 0, 17
                if stor15[address(arg5)].field_0 < mem[(32 * stor13[address(arg5)].field_0) + 128]:
                    _51605 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_51605] = 7
                    mem[_51605 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                    _52199 = mem[64]
                    mem[mem[64]] = 96
                    _53075 = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                    mem[mem[64] + 96] = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                    idx = 0
                    s = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192
                    t = mem[64] + 128
                    while idx < _53075:
                        _58247 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_58247 + 32]
                        mem[t + 64] = mem[_58247 + 64]
                        mem[t + 96] = mem[_58247 + 96]
                        mem[t + 128] = mem[_58247 + 128]
                        mem[t + 160] = mem[_58247 + 172 len 20]
                        mem[t + 192] = mem[_58247 + 192]
                        mem[t + 224] = mem[_58247 + 236 len 20]
                        mem[t + 256] = bool(mem[_58247 + 256])
                        mem[t + 288] = mem[_58247 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_52199 + 32] = stor15[address(arg5)].field_0
                    mem[_52199 + 64] = (320 * _53075) + 128
                    _59946 = mem[_51605]
                    mem[_52199 + (320 * _53075) + 128] = mem[_51605]
                    mem[_52199 + (320 * _53075) + 160 len ceil32(_59946)] = mem[_51605 + 32 len ceil32(_59946)]
                    var60001 = ceil32(_59946)
                    if ceil32(_59946) > _59946:
                        mem[_52199 + (320 * _53075) + _59946 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_59946) + _52199 + (320 * _53075) + -mem[64] + 160
                _51606 = mem[64]
                mem[64] = mem[64] + 64
                mem[_51606] = 4
                mem[_51606 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                _52200 = mem[64]
                mem[mem[64]] = 96
                _53076 = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                mem[mem[64] + 96] = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                idx = 0
                s = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192
                t = mem[64] + 128
                while idx < _53076:
                    _58254 = mem[s]
                    mem[t] = mem[mem[s]]
                    mem[t + 32] = mem[_58254 + 32]
                    mem[t + 64] = mem[_58254 + 64]
                    mem[t + 96] = mem[_58254 + 96]
                    mem[t + 128] = mem[_58254 + 128]
                    mem[t + 160] = mem[_58254 + 172 len 20]
                    mem[t + 192] = mem[_58254 + 192]
                    mem[t + 224] = mem[_58254 + 236 len 20]
                    mem[t + 256] = bool(mem[_58254 + 256])
                    mem[t + 288] = mem[_58254 + 288]
                    idx = idx + 1
                    s = s + 32
                    t = t + 320
                    continue 
                mem[_52200 + 32] = stor15[address(arg5)].field_0
                mem[_52200 + 64] = (320 * _53076) + 128
                _59947 = mem[_51606]
                mem[_52200 + (320 * _53076) + 128] = mem[_51606]
                mem[_52200 + (320 * _53076) + 160 len ceil32(_59947)] = mem[_51606 + 32 len ceil32(_59947)]
                var60001 = ceil32(_59947)
                if ceil32(_59947) > _59947:
                    mem[_52200 + (320 * _53076) + _59947 + 160] = 0
                return memory
                  from mem[64]
                   len ceil32(_59947) + _52200 + (320 * _53076) + -mem[64] + 160
            if stor15[address(arg5)].field_0 < 1:
                revert with 0, 17
            if arg3:
                if arg2 <= stor15[address(arg5)].field_0 - 1:
                    if arg2 > test266151307():
                        revert with 0, 65
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160] = arg2
                    mem[64] = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 192
                    if not arg2:
                        idx = 0
                        while idx < arg2:
                            if stor15[address(arg5)].field_0 - 1 < idx:
                                revert with 0, 17
                            if stor15[address(arg5)].field_0 + -idx - 1 >= mem[(32 * stor13[address(arg5)].field_0) + 128]:
                                revert with 0, 50
                            mem[0] = mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor13[address(arg5)].field_0) + 160]
                            mem[32] = 12
                            _25570 = sha3(mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor13[address(arg5)].field_0) + 160], 12)
                            _25571 = mem[64]
                            mem[64] = mem[64] + 320
                            mem[_25571] = stor12[mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor13[address(arg5)].field_0) + 160]].field_0
                            mem[_25571 + 32] = stor1[_25570]
                            mem[_25571 + 64] = stor2[_25570]
                            mem[_25571 + 96] = stor3[_25570]
                            mem[_25571 + 128] = stor4[_25570]
                            mem[_25571 + 160] = stor5[_25570]
                            mem[_25571 + 192] = stor6[_25570]
                            mem[_25571 + 224] = stor7[_25570].field_0
                            mem[_25571 + 256] = bool(stor7[_25570].field_160)
                            mem[_25571 + 288] = stor8[_25570]
                            if idx >= mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]:
                                revert with 0, 50
                            mem[(32 * idx) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192] = _25571
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            continue 
                        if stor15[address(arg5)].field_0 - 1 < arg2:
                            _24737 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_24737] = 4
                            mem[_24737 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                            _24977 = mem[64]
                            mem[mem[64]] = 96
                            _25567 = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                            mem[mem[64] + 96] = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                            idx = 0
                            s = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192
                            t = mem[64] + 128
                            while idx < _25567:
                                _36539 = mem[s]
                                mem[t] = mem[mem[s]]
                                mem[t + 32] = mem[_36539 + 32]
                                mem[t + 64] = mem[_36539 + 64]
                                mem[t + 96] = mem[_36539 + 96]
                                mem[t + 128] = mem[_36539 + 128]
                                mem[t + 160] = mem[_36539 + 172 len 20]
                                mem[t + 192] = mem[_36539 + 192]
                                mem[t + 224] = mem[_36539 + 236 len 20]
                                mem[t + 256] = bool(mem[_36539 + 256])
                                mem[t + 288] = mem[_36539 + 288]
                                idx = idx + 1
                                s = s + 32
                                t = t + 320
                                continue 
                            mem[_24977 + 32] = 0
                            mem[_24977 + 64] = (320 * _25567) + 128
                            _38072 = mem[_24737]
                            mem[_24977 + (320 * _25567) + 128] = mem[_24737]
                            mem[_24977 + (320 * _25567) + 160 len ceil32(_38072)] = mem[_24737 + 32 len ceil32(_38072)]
                            var44001 = ceil32(_38072)
                            if ceil32(_38072) > _38072:
                                mem[_24977 + (320 * _25567) + _38072 + 160] = 0
                            return memory
                              from mem[64]
                               len ceil32(_38072) + _24977 + (320 * _25567) + -mem[64] + 160
                        _25568 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_25568] = 7
                        mem[_25568 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                        _26455 = mem[64]
                        mem[mem[64]] = 96
                        _27024 = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                        mem[mem[64] + 96] = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                        idx = 0
                        s = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192
                        t = mem[64] + 128
                        while idx < _27024:
                            _36546 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_36546 + 32]
                            mem[t + 64] = mem[_36546 + 64]
                            mem[t + 96] = mem[_36546 + 96]
                            mem[t + 128] = mem[_36546 + 128]
                            mem[t + 160] = mem[_36546 + 172 len 20]
                            mem[t + 192] = mem[_36546 + 192]
                            mem[t + 224] = mem[_36546 + 236 len 20]
                            mem[t + 256] = bool(mem[_36546 + 256])
                            mem[t + 288] = mem[_36546 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_26455 + 32] = stor15[address(arg5)].field_0 + -arg2 - 1
                        mem[_26455 + 64] = (320 * _27024) + 128
                        _38073 = mem[_25568]
                        mem[_26455 + (320 * _27024) + 128] = mem[_25568]
                        mem[_26455 + (320 * _27024) + 160 len ceil32(_38073)] = mem[_25568 + 32 len ceil32(_38073)]
                        var47001 = ceil32(_38073)
                        if ceil32(_38073) > _38073:
                            mem[_26455 + (320 * _27024) + _38073 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_38073) + _26455 + (320 * _27024) + -mem[64] + 160
                    mem[64] = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 512
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 192] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 256] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 288] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 320] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 352] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 384] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 416] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 448] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 480] = 0
                    mem[var34001] = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 192
                    s = var34001
                    idx = var34002
                    while idx - 1:
                        mem[64] = mem[64] + 320
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 192] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 256] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 288] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 320] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 352] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 384] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 416] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 448] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 480] = 0
                        mem[s + 32] = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 192
                        s = s + 32
                        idx = idx - 1
                        continue 
                    idx = 0
                    while idx < arg2:
                        if stor15[address(arg5)].field_0 - 1 < idx:
                            revert with 0, 17
                        if stor15[address(arg5)].field_0 + -idx - 1 >= mem[(32 * stor13[address(arg5)].field_0) + 128]:
                            revert with 0, 50
                        mem[0] = mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor13[address(arg5)].field_0) + 160]
                        mem[32] = 12
                        _50134 = sha3(mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor13[address(arg5)].field_0) + 160], 12)
                        _50135 = mem[64]
                        mem[64] = mem[64] + 320
                        mem[_50135] = stor12[mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor13[address(arg5)].field_0) + 160]].field_0
                        mem[_50135 + 32] = stor1[_50134]
                        mem[_50135 + 64] = stor2[_50134]
                        mem[_50135 + 96] = stor3[_50134]
                        mem[_50135 + 128] = stor4[_50134]
                        mem[_50135 + 160] = stor5[_50134]
                        mem[_50135 + 192] = stor6[_50134]
                        mem[_50135 + 224] = stor7[_50134].field_0
                        mem[_50135 + 256] = bool(stor7[_50134].field_160)
                        mem[_50135 + 288] = stor8[_50134]
                        if idx >= mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]:
                            revert with 0, 50
                        mem[(32 * idx) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192] = _50135
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if stor15[address(arg5)].field_0 - 1 < arg2:
                        _49251 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_49251] = 4
                        mem[_49251 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                        _49491 = mem[64]
                        mem[mem[64]] = 96
                        _50131 = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                        mem[mem[64] + 96] = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                        idx = 0
                        s = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192
                        t = mem[64] + 128
                        while idx < _50131:
                            _58261 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_58261 + 32]
                            mem[t + 64] = mem[_58261 + 64]
                            mem[t + 96] = mem[_58261 + 96]
                            mem[t + 128] = mem[_58261 + 128]
                            mem[t + 160] = mem[_58261 + 172 len 20]
                            mem[t + 192] = mem[_58261 + 192]
                            mem[t + 224] = mem[_58261 + 236 len 20]
                            mem[t + 256] = bool(mem[_58261 + 256])
                            mem[t + 288] = mem[_58261 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_49491 + 32] = 0
                        mem[_49491 + 64] = (320 * _50131) + 128
                        _59948 = mem[_49251]
                        mem[_49491 + (320 * _50131) + 128] = mem[_49251]
                        mem[_49491 + (320 * _50131) + 160 len ceil32(_59948)] = mem[_49251 + 32 len ceil32(_59948)]
                        var51001 = ceil32(_59948)
                        if ceil32(_59948) > _59948:
                            mem[_49491 + (320 * _50131) + _59948 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_59948) + _49491 + (320 * _50131) + -mem[64] + 160
                    _50132 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_50132] = 7
                    mem[_50132 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                    _51058 = mem[64]
                    mem[mem[64]] = 96
                    _51608 = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                    mem[mem[64] + 96] = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                    idx = 0
                    s = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192
                    t = mem[64] + 128
                    while idx < _51608:
                        _58268 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_58268 + 32]
                        mem[t + 64] = mem[_58268 + 64]
                        mem[t + 96] = mem[_58268 + 96]
                        mem[t + 128] = mem[_58268 + 128]
                        mem[t + 160] = mem[_58268 + 172 len 20]
                        mem[t + 192] = mem[_58268 + 192]
                        mem[t + 224] = mem[_58268 + 236 len 20]
                        mem[t + 256] = bool(mem[_58268 + 256])
                        mem[t + 288] = mem[_58268 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_51058 + 32] = stor15[address(arg5)].field_0 + -arg2 - 1
                    mem[_51058 + 64] = (320 * _51608) + 128
                    _59949 = mem[_50132]
                    mem[_51058 + (320 * _51608) + 128] = mem[_50132]
                    mem[_51058 + (320 * _51608) + 160 len ceil32(_59949)] = mem[_50132 + 32 len ceil32(_59949)]
                    var54001 = ceil32(_59949)
                    if ceil32(_59949) > _59949:
                        mem[_51058 + (320 * _51608) + _59949 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_59949) + _51058 + (320 * _51608) + -mem[64] + 160
                if 1 > !(stor15[address(arg5)].field_0 - 1):
                    revert with 0, 17
                if stor15[address(arg5)].field_0 > test266151307():
                    revert with 0, 65
                mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160] = stor15[address(arg5)].field_0
                mem[64] = (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 192
                if not stor15[address(arg5)].field_0:
                    idx = 0
                    while idx < stor15[address(arg5)].field_0:
                        if stor15[address(arg5)].field_0 - 1 < idx:
                            revert with 0, 17
                        if stor15[address(arg5)].field_0 + -idx - 1 >= mem[(32 * stor13[address(arg5)].field_0) + 128]:
                            revert with 0, 50
                        mem[0] = mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor13[address(arg5)].field_0) + 160]
                        mem[32] = 12
                        _25576 = sha3(mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor13[address(arg5)].field_0) + 160], 12)
                        _25577 = mem[64]
                        mem[64] = mem[64] + 320
                        mem[_25577] = stor12[mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor13[address(arg5)].field_0) + 160]].field_0
                        mem[_25577 + 32] = stor1[_25576]
                        mem[_25577 + 64] = stor2[_25576]
                        mem[_25577 + 96] = stor3[_25576]
                        mem[_25577 + 128] = stor4[_25576]
                        mem[_25577 + 160] = stor5[_25576]
                        mem[_25577 + 192] = stor6[_25576]
                        mem[_25577 + 224] = stor7[_25576].field_0
                        mem[_25577 + 256] = bool(stor7[_25576].field_160)
                        mem[_25577 + 288] = stor8[_25576]
                        if idx >= mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]:
                            revert with 0, 50
                        mem[(32 * idx) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192] = _25577
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if stor15[address(arg5)].field_0 - 1 < stor15[address(arg5)].field_0:
                        _24738 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_24738] = 4
                        mem[_24738 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                        _24979 = mem[64]
                        mem[mem[64]] = 96
                        _25573 = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                        mem[mem[64] + 96] = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                        idx = 0
                        s = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192
                        t = mem[64] + 128
                        while idx < _25573:
                            _36553 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_36553 + 32]
                            mem[t + 64] = mem[_36553 + 64]
                            mem[t + 96] = mem[_36553 + 96]
                            mem[t + 128] = mem[_36553 + 128]
                            mem[t + 160] = mem[_36553 + 172 len 20]
                            mem[t + 192] = mem[_36553 + 192]
                            mem[t + 224] = mem[_36553 + 236 len 20]
                            mem[t + 256] = bool(mem[_36553 + 256])
                            mem[t + 288] = mem[_36553 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_24979 + 32] = 0
                        mem[_24979 + 64] = (320 * _25573) + 128
                        _38074 = mem[_24738]
                        mem[_24979 + (320 * _25573) + 128] = mem[_24738]
                        mem[_24979 + (320 * _25573) + 160 len ceil32(_38074)] = mem[_24738 + 32 len ceil32(_38074)]
                        var48001 = ceil32(_38074)
                        if ceil32(_38074) > _38074:
                            mem[_24979 + (320 * _25573) + _38074 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_38074) + _24979 + (320 * _25573) + -mem[64] + 160
                    _25574 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_25574] = 7
                    mem[_25574 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                    _26464 = mem[64]
                    mem[mem[64]] = 96
                    _27026 = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                    mem[mem[64] + 96] = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                    idx = 0
                    s = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192
                    t = mem[64] + 128
                    while idx < _27026:
                        _36560 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_36560 + 32]
                        mem[t + 64] = mem[_36560 + 64]
                        mem[t + 96] = mem[_36560 + 96]
                        mem[t + 128] = mem[_36560 + 128]
                        mem[t + 160] = mem[_36560 + 172 len 20]
                        mem[t + 192] = mem[_36560 + 192]
                        mem[t + 224] = mem[_36560 + 236 len 20]
                        mem[t + 256] = bool(mem[_36560 + 256])
                        mem[t + 288] = mem[_36560 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_26464 + 32] = -1
                    mem[_26464 + 64] = (320 * _27026) + 128
                    _38075 = mem[_25574]
                    mem[_26464 + (320 * _27026) + 128] = mem[_25574]
                    mem[_26464 + (320 * _27026) + 160 len ceil32(_38075)] = mem[_25574 + 32 len ceil32(_38075)]
                    var51001 = ceil32(_38075)
                    if ceil32(_38075) > _38075:
                        mem[_26464 + (320 * _27026) + _38075 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_38075) + _26464 + (320 * _27026) + -mem[64] + 160
                mem[64] = (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 512
                mem[(32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 192] = 0
                mem[(32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 224] = 0
                mem[(32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 256] = 0
                mem[(32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 288] = 0
                mem[(32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 320] = 0
                mem[(32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 352] = 0
                mem[(32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 384] = 0
                mem[(32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 416] = 0
                mem[(32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 448] = 0
                mem[(32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 480] = 0
                mem[var38001] = (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 192
                s = var38001
                idx = var38002
                while idx - 1:
                    mem[64] = mem[64] + 320
                    mem[(32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 192] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 224] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 256] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 288] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 320] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 352] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 384] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 416] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 448] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 480] = 0
                    mem[s + 32] = (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 192
                    s = s + 32
                    idx = idx - 1
                    continue 
                idx = 0
                while idx < stor15[address(arg5)].field_0:
                    if stor15[address(arg5)].field_0 - 1 < idx:
                        revert with 0, 17
                    if stor15[address(arg5)].field_0 + -idx - 1 >= mem[(32 * stor13[address(arg5)].field_0) + 128]:
                        revert with 0, 50
                    mem[0] = mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor13[address(arg5)].field_0) + 160]
                    mem[32] = 12
                    _50142 = sha3(mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor13[address(arg5)].field_0) + 160], 12)
                    _50143 = mem[64]
                    mem[64] = mem[64] + 320
                    mem[_50143] = stor12[mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor13[address(arg5)].field_0) + 160]].field_0
                    mem[_50143 + 32] = stor1[_50142]
                    mem[_50143 + 64] = stor2[_50142]
                    mem[_50143 + 96] = stor3[_50142]
                    mem[_50143 + 128] = stor4[_50142]
                    mem[_50143 + 160] = stor5[_50142]
                    mem[_50143 + 192] = stor6[_50142]
                    mem[_50143 + 224] = stor7[_50142].field_0
                    mem[_50143 + 256] = bool(stor7[_50142].field_160)
                    mem[_50143 + 288] = stor8[_50142]
                    if idx >= mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]:
                        revert with 0, 50
                    mem[(32 * idx) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192] = _50143
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
                if stor15[address(arg5)].field_0 - 1 < stor15[address(arg5)].field_0:
                    _49252 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_49252] = 4
                    mem[_49252 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                    _49495 = mem[64]
                    mem[mem[64]] = 96
                    _50139 = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                    mem[mem[64] + 96] = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                    idx = 0
                    s = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192
                    t = mem[64] + 128
                    while idx < _50139:
                        _58275 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_58275 + 32]
                        mem[t + 64] = mem[_58275 + 64]
                        mem[t + 96] = mem[_58275 + 96]
                        mem[t + 128] = mem[_58275 + 128]
                        mem[t + 160] = mem[_58275 + 172 len 20]
                        mem[t + 192] = mem[_58275 + 192]
                        mem[t + 224] = mem[_58275 + 236 len 20]
                        mem[t + 256] = bool(mem[_58275 + 256])
                        mem[t + 288] = mem[_58275 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_49495 + 32] = 0
                    mem[_49495 + 64] = (320 * _50139) + 128
                    _59950 = mem[_49252]
                    mem[_49495 + (320 * _50139) + 128] = mem[_49252]
                    mem[_49495 + (320 * _50139) + 160 len ceil32(_59950)] = mem[_49252 + 32 len ceil32(_59950)]
                    var55001 = ceil32(_59950)
                    if ceil32(_59950) > _59950:
                        mem[_49495 + (320 * _50139) + _59950 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_59950) + _49495 + (320 * _50139) + -mem[64] + 160
                _50140 = mem[64]
                mem[64] = mem[64] + 64
                mem[_50140] = 7
                mem[_50140 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                _51066 = mem[64]
                mem[mem[64]] = 96
                _51610 = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                mem[mem[64] + 96] = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                idx = 0
                s = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192
                t = mem[64] + 128
                while idx < _51610:
                    _58282 = mem[s]
                    mem[t] = mem[mem[s]]
                    mem[t + 32] = mem[_58282 + 32]
                    mem[t + 64] = mem[_58282 + 64]
                    mem[t + 96] = mem[_58282 + 96]
                    mem[t + 128] = mem[_58282 + 128]
                    mem[t + 160] = mem[_58282 + 172 len 20]
                    mem[t + 192] = mem[_58282 + 192]
                    mem[t + 224] = mem[_58282 + 236 len 20]
                    mem[t + 256] = bool(mem[_58282 + 256])
                    mem[t + 288] = mem[_58282 + 288]
                    idx = idx + 1
                    s = s + 32
                    t = t + 320
                    continue 
                mem[_51066 + 32] = -1
                mem[_51066 + 64] = (320 * _51610) + 128
                _59951 = mem[_50140]
                mem[_51066 + (320 * _51610) + 128] = mem[_50140]
                mem[_51066 + (320 * _51610) + 160 len ceil32(_59951)] = mem[_50140 + 32 len ceil32(_59951)]
                var58001 = ceil32(_59951)
                if ceil32(_59951) > _59951:
                    mem[_51066 + (320 * _51610) + _59951 + 160] = 0
                return memory
                  from mem[64]
                   len ceil32(_59951) + _51066 + (320 * _51610) + -mem[64] + 160
            if stor15[address(arg5)].field_0 < stor15[address(arg5)].field_0 - 1:
                revert with 0, 17
            if arg2 > 1:
                if stor15[address(arg5)].field_0 < stor15[address(arg5)].field_0 - 1:
                    revert with 0, 17
                mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160] = 1
                mem[64] = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 544
                mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224] = 0
                mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 256] = 0
                mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 288] = 0
                mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 320] = 0
                mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 352] = 0
                mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 384] = 0
                mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 416] = 0
                mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 448] = 0
                mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 480] = 0
                mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 512] = 0
                mem[var41001] = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                s = var41001
                idx = var41002
                while idx - 1:
                    mem[64] = mem[64] + 320
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 256] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 288] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 320] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 352] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 384] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 416] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 448] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 480] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 512] = 0
                    mem[s + 32] = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                    s = s + 32
                    idx = idx - 1
                    continue 
                idx = 0
                while idx < 1:
                    if stor15[address(arg5)].field_0 - 1 > !idx:
                        revert with 0, 17
                    if stor15[address(arg5)].field_0 + idx - 1 >= mem[(32 * stor13[address(arg5)].field_0) + 128]:
                        revert with 0, 50
                    mem[0] = mem[(32 * stor15[address(arg5)].field_0 + idx - 1) + (32 * stor13[address(arg5)].field_0) + 160]
                    mem[32] = 12
                    _50154 = sha3(mem[(32 * stor15[address(arg5)].field_0 + idx - 1) + (32 * stor13[address(arg5)].field_0) + 160], 12)
                    _50155 = mem[64]
                    mem[64] = mem[64] + 320
                    mem[_50155] = stor12[mem[(32 * stor15[address(arg5)].field_0 + idx - 1) + (32 * stor13[address(arg5)].field_0) + 160]].field_0
                    mem[_50155 + 32] = stor1[_50154]
                    mem[_50155 + 64] = stor2[_50154]
                    mem[_50155 + 96] = stor3[_50154]
                    mem[_50155 + 128] = stor4[_50154]
                    mem[_50155 + 160] = stor5[_50154]
                    mem[_50155 + 192] = stor6[_50154]
                    mem[_50155 + 224] = stor7[_50154].field_0
                    mem[_50155 + 256] = bool(stor7[_50154].field_160)
                    mem[_50155 + 288] = stor8[_50154]
                    if idx >= mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]:
                        revert with 0, 50
                    mem[(32 * idx) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192] = _50155
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
                if stor15[address(arg5)].field_0 - 1 > !1:
                    revert with 0, 17
                if stor15[address(arg5)].field_0 - 1 > !1:
                    revert with 0, 17
                if stor15[address(arg5)].field_0 < mem[(32 * stor13[address(arg5)].field_0) + 128]:
                    _51613 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_51613] = 7
                    mem[_51613 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                    _52219 = mem[64]
                    mem[mem[64]] = 96
                    _53083 = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                    mem[mem[64] + 96] = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                    idx = 0
                    s = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192
                    t = mem[64] + 128
                    while idx < _53083:
                        _58303 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_58303 + 32]
                        mem[t + 64] = mem[_58303 + 64]
                        mem[t + 96] = mem[_58303 + 96]
                        mem[t + 128] = mem[_58303 + 128]
                        mem[t + 160] = mem[_58303 + 172 len 20]
                        mem[t + 192] = mem[_58303 + 192]
                        mem[t + 224] = mem[_58303 + 236 len 20]
                        mem[t + 256] = bool(mem[_58303 + 256])
                        mem[t + 288] = mem[_58303 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_52219 + 32] = stor15[address(arg5)].field_0
                    mem[_52219 + 64] = (320 * _53083) + 128
                    _59954 = mem[_51613]
                    mem[_52219 + (320 * _53083) + 128] = mem[_51613]
                    mem[_52219 + (320 * _53083) + 160 len ceil32(_59954)] = mem[_51613 + 32 len ceil32(_59954)]
                    var64001 = ceil32(_59954)
                    if ceil32(_59954) > _59954:
                        mem[_52219 + (320 * _53083) + _59954 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_59954) + _52219 + (320 * _53083) + -mem[64] + 160
                _51614 = mem[64]
                mem[64] = mem[64] + 64
                mem[_51614] = 4
                mem[_51614 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                _52220 = mem[64]
                mem[mem[64]] = 96
                _53084 = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                mem[mem[64] + 96] = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                idx = 0
                s = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192
                t = mem[64] + 128
                while idx < _53084:
                    _58310 = mem[s]
                    mem[t] = mem[mem[s]]
                    mem[t + 32] = mem[_58310 + 32]
                    mem[t + 64] = mem[_58310 + 64]
                    mem[t + 96] = mem[_58310 + 96]
                    mem[t + 128] = mem[_58310 + 128]
                    mem[t + 160] = mem[_58310 + 172 len 20]
                    mem[t + 192] = mem[_58310 + 192]
                    mem[t + 224] = mem[_58310 + 236 len 20]
                    mem[t + 256] = bool(mem[_58310 + 256])
                    mem[t + 288] = mem[_58310 + 288]
                    idx = idx + 1
                    s = s + 32
                    t = t + 320
                    continue 
                mem[_52220 + 32] = stor15[address(arg5)].field_0
                mem[_52220 + 64] = (320 * _53084) + 128
                _59955 = mem[_51614]
                mem[_52220 + (320 * _53084) + 128] = mem[_51614]
                mem[_52220 + (320 * _53084) + 160 len ceil32(_59955)] = mem[_51614 + 32 len ceil32(_59955)]
                var64001 = ceil32(_59955)
                if ceil32(_59955) > _59955:
                    mem[_52220 + (320 * _53084) + _59955 + 160] = 0
                return memory
                  from mem[64]
                   len ceil32(_59955) + _52220 + (320 * _53084) + -mem[64] + 160
            if arg2 > test266151307():
                revert with 0, 65
            mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160] = arg2
            mem[64] = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 192
            if not arg2:
                idx = 0
                while idx < arg2:
                    if stor15[address(arg5)].field_0 - 1 > !idx:
                        revert with 0, 17
                    if stor15[address(arg5)].field_0 + idx - 1 >= mem[(32 * stor13[address(arg5)].field_0) + 128]:
                        revert with 0, 50
                    mem[0] = mem[(32 * stor15[address(arg5)].field_0 + idx - 1) + (32 * stor13[address(arg5)].field_0) + 160]
                    mem[32] = 12
                    _25580 = sha3(mem[(32 * stor15[address(arg5)].field_0 + idx - 1) + (32 * stor13[address(arg5)].field_0) + 160], 12)
                    _25581 = mem[64]
                    mem[64] = mem[64] + 320
                    mem[_25581] = stor12[mem[(32 * stor15[address(arg5)].field_0 + idx - 1) + (32 * stor13[address(arg5)].field_0) + 160]].field_0
                    mem[_25581 + 32] = stor1[_25580]
                    mem[_25581 + 64] = stor2[_25580]
                    mem[_25581 + 96] = stor3[_25580]
                    mem[_25581 + 128] = stor4[_25580]
                    mem[_25581 + 160] = stor5[_25580]
                    mem[_25581 + 192] = stor6[_25580]
                    mem[_25581 + 224] = stor7[_25580].field_0
                    mem[_25581 + 256] = bool(stor7[_25580].field_160)
                    mem[_25581 + 288] = stor8[_25580]
                    if idx >= mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]:
                        revert with 0, 50
                    mem[(32 * idx) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192] = _25581
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
                if stor15[address(arg5)].field_0 - 1 > !arg2:
                    revert with 0, 17
                if stor15[address(arg5)].field_0 - 1 > !arg2:
                    revert with 0, 17
                if stor15[address(arg5)].field_0 + arg2 - 1 < mem[(32 * stor13[address(arg5)].field_0) + 128]:
                    _27027 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_27027] = 7
                    mem[_27027 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                    _28004 = mem[64]
                    mem[mem[64]] = 96
                    _28940 = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                    mem[mem[64] + 96] = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                    idx = 0
                    s = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192
                    t = mem[64] + 128
                    while idx < _28940:
                        _36567 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_36567 + 32]
                        mem[t + 64] = mem[_36567 + 64]
                        mem[t + 96] = mem[_36567 + 96]
                        mem[t + 128] = mem[_36567 + 128]
                        mem[t + 160] = mem[_36567 + 172 len 20]
                        mem[t + 192] = mem[_36567 + 192]
                        mem[t + 224] = mem[_36567 + 236 len 20]
                        mem[t + 256] = bool(mem[_36567 + 256])
                        mem[t + 288] = mem[_36567 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_28004 + 32] = stor15[address(arg5)].field_0 + arg2 - 1
                    mem[_28004 + 64] = (320 * _28940) + 128
                    _38076 = mem[_27027]
                    mem[_28004 + (320 * _28940) + 128] = mem[_27027]
                    mem[_28004 + (320 * _28940) + 160 len ceil32(_38076)] = mem[_27027 + 32 len ceil32(_38076)]
                    var53001 = ceil32(_38076)
                    if ceil32(_38076) > _38076:
                        mem[_28004 + (320 * _28940) + _38076 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_38076) + _28004 + (320 * _28940) + -mem[64] + 160
                _27028 = mem[64]
                mem[64] = mem[64] + 64
                mem[_27028] = 4
                mem[_27028 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                _28005 = mem[64]
                mem[mem[64]] = 96
                _28941 = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                mem[mem[64] + 96] = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                idx = 0
                s = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192
                t = mem[64] + 128
                while idx < _28941:
                    _36574 = mem[s]
                    mem[t] = mem[mem[s]]
                    mem[t + 32] = mem[_36574 + 32]
                    mem[t + 64] = mem[_36574 + 64]
                    mem[t + 96] = mem[_36574 + 96]
                    mem[t + 128] = mem[_36574 + 128]
                    mem[t + 160] = mem[_36574 + 172 len 20]
                    mem[t + 192] = mem[_36574 + 192]
                    mem[t + 224] = mem[_36574 + 236 len 20]
                    mem[t + 256] = bool(mem[_36574 + 256])
                    mem[t + 288] = mem[_36574 + 288]
                    idx = idx + 1
                    s = s + 32
                    t = t + 320
                    continue 
                mem[_28005 + 32] = stor15[address(arg5)].field_0 + arg2 - 1
                mem[_28005 + 64] = (320 * _28941) + 128
                _38077 = mem[_27028]
                mem[_28005 + (320 * _28941) + 128] = mem[_27028]
                mem[_28005 + (320 * _28941) + 160 len ceil32(_38077)] = mem[_27028 + 32 len ceil32(_38077)]
                var53001 = ceil32(_38077)
                if ceil32(_38077) > _38077:
                    mem[_28005 + (320 * _28941) + _38077 + 160] = 0
                return memory
                  from mem[64]
                   len ceil32(_38077) + _28005 + (320 * _28941) + -mem[64] + 160
            mem[64] = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 512
            mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 192] = 0
            mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224] = 0
            mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 256] = 0
            mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 288] = 0
            mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 320] = 0
            mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 352] = 0
            mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 384] = 0
            mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 416] = 0
            mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 448] = 0
            mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 480] = 0
            mem[var37001] = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 192
            s = var37001
            idx = var37002
            while idx - 1:
                mem[64] = mem[64] + 320
                mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 192] = 0
                mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224] = 0
                mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 256] = 0
                mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 288] = 0
                mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 320] = 0
                mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 352] = 0
                mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 384] = 0
                mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 416] = 0
                mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 448] = 0
                mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 480] = 0
                mem[s + 32] = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 192
                s = s + 32
                idx = idx - 1
                continue 
            idx = 0
            while idx < arg2:
                if stor15[address(arg5)].field_0 - 1 > !idx:
                    revert with 0, 17
                if stor15[address(arg5)].field_0 + idx - 1 >= mem[(32 * stor13[address(arg5)].field_0) + 128]:
                    revert with 0, 50
                mem[0] = mem[(32 * stor15[address(arg5)].field_0 + idx - 1) + (32 * stor13[address(arg5)].field_0) + 160]
                mem[32] = 12
                _50148 = sha3(mem[(32 * stor15[address(arg5)].field_0 + idx - 1) + (32 * stor13[address(arg5)].field_0) + 160], 12)
                _50149 = mem[64]
                mem[64] = mem[64] + 320
                mem[_50149] = stor12[mem[(32 * stor15[address(arg5)].field_0 + idx - 1) + (32 * stor13[address(arg5)].field_0) + 160]].field_0
                mem[_50149 + 32] = stor1[_50148]
                mem[_50149 + 64] = stor2[_50148]
                mem[_50149 + 96] = stor3[_50148]
                mem[_50149 + 128] = stor4[_50148]
                mem[_50149 + 160] = stor5[_50148]
                mem[_50149 + 192] = stor6[_50148]
                mem[_50149 + 224] = stor7[_50148].field_0
                mem[_50149 + 256] = bool(stor7[_50148].field_160)
                mem[_50149 + 288] = stor8[_50148]
                if idx >= mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]:
                    revert with 0, 50
                mem[(32 * idx) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192] = _50149
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
            if stor15[address(arg5)].field_0 - 1 > !arg2:
                revert with 0, 17
            if stor15[address(arg5)].field_0 - 1 > !arg2:
                revert with 0, 17
            if stor15[address(arg5)].field_0 + arg2 - 1 < mem[(32 * stor13[address(arg5)].field_0) + 128]:
                _51611 = mem[64]
                mem[64] = mem[64] + 64
                mem[_51611] = 7
                mem[_51611 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                _52217 = mem[64]
                mem[mem[64]] = 96
                _53081 = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                mem[mem[64] + 96] = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                idx = 0
                s = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192
                t = mem[64] + 128
                while idx < _53081:
                    _58289 = mem[s]
                    mem[t] = mem[mem[s]]
                    mem[t + 32] = mem[_58289 + 32]
                    mem[t + 64] = mem[_58289 + 64]
                    mem[t + 96] = mem[_58289 + 96]
                    mem[t + 128] = mem[_58289 + 128]
                    mem[t + 160] = mem[_58289 + 172 len 20]
                    mem[t + 192] = mem[_58289 + 192]
                    mem[t + 224] = mem[_58289 + 236 len 20]
                    mem[t + 256] = bool(mem[_58289 + 256])
                    mem[t + 288] = mem[_58289 + 288]
                    idx = idx + 1
                    s = s + 32
                    t = t + 320
                    continue 
                mem[_52217 + 32] = stor15[address(arg5)].field_0 + arg2 - 1
                mem[_52217 + 64] = (320 * _53081) + 128
                _59952 = mem[_51611]
                mem[_52217 + (320 * _53081) + 128] = mem[_51611]
                mem[_52217 + (320 * _53081) + 160 len ceil32(_59952)] = mem[_51611 + 32 len ceil32(_59952)]
                var60001 = ceil32(_59952)
                if ceil32(_59952) > _59952:
                    mem[_52217 + (320 * _53081) + _59952 + 160] = 0
                return memory
                  from mem[64]
                   len ceil32(_59952) + _52217 + (320 * _53081) + -mem[64] + 160
            _51612 = mem[64]
            mem[64] = mem[64] + 64
            mem[_51612] = 4
            mem[_51612 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
            _52218 = mem[64]
            mem[mem[64]] = 96
            _53082 = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
            mem[mem[64] + 96] = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
            idx = 0
            s = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192
            t = mem[64] + 128
            while idx < _53082:
                _58296 = mem[s]
                mem[t] = mem[mem[s]]
                mem[t + 32] = mem[_58296 + 32]
                mem[t + 64] = mem[_58296 + 64]
                mem[t + 96] = mem[_58296 + 96]
                mem[t + 128] = mem[_58296 + 128]
                mem[t + 160] = mem[_58296 + 172 len 20]
                mem[t + 192] = mem[_58296 + 192]
                mem[t + 224] = mem[_58296 + 236 len 20]
                mem[t + 256] = bool(mem[_58296 + 256])
                mem[t + 288] = mem[_58296 + 288]
                idx = idx + 1
                s = s + 32
                t = t + 320
                continue 
            mem[_52218 + 32] = stor15[address(arg5)].field_0 + arg2 - 1
            mem[_52218 + 64] = (320 * _53082) + 128
            _59953 = mem[_51612]
            mem[_52218 + (320 * _53082) + 128] = mem[_51612]
            mem[_52218 + (320 * _53082) + 160 len ceil32(_59953)] = mem[_51612 + 32 len ceil32(_59953)]
            var60001 = ceil32(_59953)
            if ceil32(_59953) > _59953:
                mem[_52218 + (320 * _53082) + _59953 + 160] = 0
            return memory
              from mem[64]
               len ceil32(_59953) + _52218 + (320 * _53082) + -mem[64] + 160
        mem[0] = sha3(address(arg5), 15)
        mem[(32 * stor13[address(arg5)].field_0) + 160] = stor15[address(arg5)].field_0
        idx = (32 * stor13[address(arg5)].field_0) + 160
        s = 0
        while (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 128 > idx:
            mem[idx + 32] = stor15[address(arg5)][s].field_256
            idx = idx + 32
            s = s + 1
            continue 
        if not stor15[address(arg5)].field_0:
            mem[64] = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 256
            mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192] = 4
            mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224] = 0x6f76657200000000000000000000000000000000000000000000000000000000
            mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 256] = 96
            _39677 = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
            mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 352] = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
            idx = 0
            s = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192
            t = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 384
            while idx < mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]:
                _48911 = mem[s]
                mem[t] = mem[mem[s]]
                mem[t + 32] = mem[_48911 + 32]
                mem[t + 64] = mem[_48911 + 64]
                mem[t + 96] = mem[_48911 + 96]
                mem[t + 128] = mem[_48911 + 128]
                mem[t + 160] = mem[_48911 + 172 len 20]
                mem[t + 192] = mem[_48911 + 192]
                mem[t + 224] = mem[_48911 + 236 len 20]
                mem[t + 256] = bool(mem[_48911 + 256])
                mem[t + 288] = mem[_48911 + 288]
                idx = idx + 1
                s = s + 32
                t = t + 320
                continue 
            mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 288] = 0
            mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 320] = (320 * _39677) + 128
            mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (320 * _39677) + 384] = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
            mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (320 * _39677) + 416 len ceil32(mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192])] = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224 len ceil32(mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192])]
            var36001 = ceil32(mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192])
            if ceil32(mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]) > mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]:
                mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (320 * _39677) + mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192] + 416] = 0
            return memory
              from mem[64]
               len ceil32(mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (320 * _39677) + -mem[64] + 416
        if arg1 < stor15[address(arg5)].field_0:
            if arg3:
                if arg2 <= arg1:
                    if arg2 > test266151307():
                        revert with 0, 65
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160] = arg2
                    mem[64] = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 192
                    if not arg2:
                        idx = 0
                        while idx < arg2:
                            if arg1 < idx:
                                revert with 0, 17
                            if arg1 - idx >= mem[(32 * stor13[address(arg5)].field_0) + 128]:
                                revert with 0, 50
                            mem[0] = mem[(32 * arg1 - idx) + (32 * stor13[address(arg5)].field_0) + 160]
                            mem[32] = 12
                            _50160 = sha3(mem[(32 * arg1 - idx) + (32 * stor13[address(arg5)].field_0) + 160], 12)
                            _50161 = mem[64]
                            mem[64] = mem[64] + 320
                            mem[_50161] = stor12[mem[(32 * arg1 - idx) + (32 * stor13[address(arg5)].field_0) + 160]].field_0
                            mem[_50161 + 32] = stor1[_50160]
                            mem[_50161 + 64] = stor2[_50160]
                            mem[_50161 + 96] = stor3[_50160]
                            mem[_50161 + 128] = stor4[_50160]
                            mem[_50161 + 160] = stor5[_50160]
                            mem[_50161 + 192] = stor6[_50160]
                            mem[_50161 + 224] = stor7[_50160].field_0
                            mem[_50161 + 256] = bool(stor7[_50160].field_160)
                            mem[_50161 + 288] = stor8[_50160]
                            if idx >= mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]:
                                revert with 0, 50
                            mem[(32 * idx) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192] = _50161
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            continue 
                        if arg1 < arg2:
                            _49253 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_49253] = 4
                            mem[_49253 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                            _49503 = mem[64]
                            mem[mem[64]] = 96
                            _50157 = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                            mem[mem[64] + 96] = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                            idx = 0
                            s = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192
                            t = mem[64] + 128
                            while idx < _50157:
                                _58317 = mem[s]
                                mem[t] = mem[mem[s]]
                                mem[t + 32] = mem[_58317 + 32]
                                mem[t + 64] = mem[_58317 + 64]
                                mem[t + 96] = mem[_58317 + 96]
                                mem[t + 128] = mem[_58317 + 128]
                                mem[t + 160] = mem[_58317 + 172 len 20]
                                mem[t + 192] = mem[_58317 + 192]
                                mem[t + 224] = mem[_58317 + 236 len 20]
                                mem[t + 256] = bool(mem[_58317 + 256])
                                mem[t + 288] = mem[_58317 + 288]
                                idx = idx + 1
                                s = s + 32
                                t = t + 320
                                continue 
                            mem[_49503 + 32] = 0
                            mem[_49503 + 64] = (320 * _50157) + 128
                            _59956 = mem[_49253]
                            mem[_49503 + (320 * _50157) + 128] = mem[_49253]
                            mem[_49503 + (320 * _50157) + 160 len ceil32(_59956)] = mem[_49253 + 32 len ceil32(_59956)]
                            var44001 = ceil32(_59956)
                            if ceil32(_59956) > _59956:
                                mem[_49503 + (320 * _50157) + _59956 + 160] = 0
                            return memory
                              from mem[64]
                               len ceil32(_59956) + _49503 + (320 * _50157) + -mem[64] + 160
                        _50158 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_50158] = 7
                        mem[_50158 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                        _51074 = mem[64]
                        mem[mem[64]] = 96
                        _51616 = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                        mem[mem[64] + 96] = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                        idx = 0
                        s = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192
                        t = mem[64] + 128
                        while idx < _51616:
                            _58324 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_58324 + 32]
                            mem[t + 64] = mem[_58324 + 64]
                            mem[t + 96] = mem[_58324 + 96]
                            mem[t + 128] = mem[_58324 + 128]
                            mem[t + 160] = mem[_58324 + 172 len 20]
                            mem[t + 192] = mem[_58324 + 192]
                            mem[t + 224] = mem[_58324 + 236 len 20]
                            mem[t + 256] = bool(mem[_58324 + 256])
                            mem[t + 288] = mem[_58324 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_51074 + 32] = arg1 - arg2
                        mem[_51074 + 64] = (320 * _51616) + 128
                        _59957 = mem[_50158]
                        mem[_51074 + (320 * _51616) + 128] = mem[_50158]
                        mem[_51074 + (320 * _51616) + 160 len ceil32(_59957)] = mem[_50158 + 32 len ceil32(_59957)]
                        var47001 = ceil32(_59957)
                        if ceil32(_59957) > _59957:
                            mem[_51074 + (320 * _51616) + _59957 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_59957) + _51074 + (320 * _51616) + -mem[64] + 160
                    mem[64] = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 512
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 192] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 256] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 288] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 320] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 352] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 384] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 416] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 448] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 480] = 0
                    mem[var34001] = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 192
                    s = var34001
                    idx = var34002
                    while idx - 1:
                        mem[64] = mem[64] + 320
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 192] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 256] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 288] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 320] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 352] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 384] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 416] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 448] = 0
                        mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 480] = 0
                        mem[s + 32] = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 192
                        s = s + 32
                        idx = idx - 1
                        continue 
                    idx = 0
                    while idx < arg2:
                        if arg1 < idx:
                            revert with 0, 17
                        if arg1 - idx >= mem[(32 * stor13[address(arg5)].field_0) + 128]:
                            revert with 0, 50
                        mem[0] = mem[(32 * arg1 - idx) + (32 * stor13[address(arg5)].field_0) + 160]
                        mem[32] = 12
                        _65709 = sha3(mem[(32 * arg1 - idx) + (32 * stor13[address(arg5)].field_0) + 160], 12)
                        _65710 = mem[64]
                        mem[64] = mem[64] + 320
                        mem[_65710] = stor12[mem[(32 * arg1 - idx) + (32 * stor13[address(arg5)].field_0) + 160]].field_0
                        mem[_65710 + 32] = stor1[_65709]
                        mem[_65710 + 64] = stor2[_65709]
                        mem[_65710 + 96] = stor3[_65709]
                        mem[_65710 + 128] = stor4[_65709]
                        mem[_65710 + 160] = stor5[_65709]
                        mem[_65710 + 192] = stor6[_65709]
                        mem[_65710 + 224] = stor7[_65709].field_0
                        mem[_65710 + 256] = bool(stor7[_65709].field_160)
                        mem[_65710 + 288] = stor8[_65709]
                        if idx >= mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]:
                            revert with 0, 50
                        mem[(32 * idx) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192] = _65710
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if arg1 < arg2:
                        _65236 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_65236] = 4
                        mem[_65236 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                        _65333 = mem[64]
                        mem[mem[64]] = 96
                        _65706 = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                        mem[mem[64] + 96] = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                        idx = 0
                        s = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192
                        t = mem[64] + 128
                        while idx < _65706:
                            _68456 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_68456 + 32]
                            mem[t + 64] = mem[_68456 + 64]
                            mem[t + 96] = mem[_68456 + 96]
                            mem[t + 128] = mem[_68456 + 128]
                            mem[t + 160] = mem[_68456 + 172 len 20]
                            mem[t + 192] = mem[_68456 + 192]
                            mem[t + 224] = mem[_68456 + 236 len 20]
                            mem[t + 256] = bool(mem[_68456 + 256])
                            mem[t + 288] = mem[_68456 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_65333 + 32] = 0
                        mem[_65333 + 64] = (320 * _65706) + 128
                        _69241 = mem[_65236]
                        mem[_65333 + (320 * _65706) + 128] = mem[_65236]
                        mem[_65333 + (320 * _65706) + 160 len ceil32(_69241)] = mem[_65236 + 32 len ceil32(_69241)]
                        var51001 = ceil32(_69241)
                        if ceil32(_69241) > _69241:
                            mem[_65333 + (320 * _65706) + _69241 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_69241) + _65333 + (320 * _65706) + -mem[64] + 160
                    _65707 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_65707] = 7
                    mem[_65707 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                    _66220 = mem[64]
                    mem[mem[64]] = 96
                    _66444 = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                    mem[mem[64] + 96] = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                    idx = 0
                    s = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192
                    t = mem[64] + 128
                    while idx < _66444:
                        _68463 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_68463 + 32]
                        mem[t + 64] = mem[_68463 + 64]
                        mem[t + 96] = mem[_68463 + 96]
                        mem[t + 128] = mem[_68463 + 128]
                        mem[t + 160] = mem[_68463 + 172 len 20]
                        mem[t + 192] = mem[_68463 + 192]
                        mem[t + 224] = mem[_68463 + 236 len 20]
                        mem[t + 256] = bool(mem[_68463 + 256])
                        mem[t + 288] = mem[_68463 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_66220 + 32] = arg1 - arg2
                    mem[_66220 + 64] = (320 * _66444) + 128
                    _69242 = mem[_65707]
                    mem[_66220 + (320 * _66444) + 128] = mem[_65707]
                    mem[_66220 + (320 * _66444) + 160 len ceil32(_69242)] = mem[_65707 + 32 len ceil32(_69242)]
                    var54001 = ceil32(_69242)
                    if ceil32(_69242) > _69242:
                        mem[_66220 + (320 * _66444) + _69242 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_69242) + _66220 + (320 * _66444) + -mem[64] + 160
                if 1 > !arg1:
                    revert with 0, 17
                if arg1 + 1 > test266151307():
                    revert with 0, 65
                mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160] = arg1 + 1
                mem[64] = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 192
                if not arg1 + 1:
                    idx = 0
                    while idx < arg1 + 1:
                        if arg1 < idx:
                            revert with 0, 17
                        if arg1 - idx >= mem[(32 * stor13[address(arg5)].field_0) + 128]:
                            revert with 0, 50
                        mem[0] = mem[(32 * arg1 - idx) + (32 * stor13[address(arg5)].field_0) + 160]
                        mem[32] = 12
                        _50166 = sha3(mem[(32 * arg1 - idx) + (32 * stor13[address(arg5)].field_0) + 160], 12)
                        _50167 = mem[64]
                        mem[64] = mem[64] + 320
                        mem[_50167] = stor12[mem[(32 * arg1 - idx) + (32 * stor13[address(arg5)].field_0) + 160]].field_0
                        mem[_50167 + 32] = stor1[_50166]
                        mem[_50167 + 64] = stor2[_50166]
                        mem[_50167 + 96] = stor3[_50166]
                        mem[_50167 + 128] = stor4[_50166]
                        mem[_50167 + 160] = stor5[_50166]
                        mem[_50167 + 192] = stor6[_50166]
                        mem[_50167 + 224] = stor7[_50166].field_0
                        mem[_50167 + 256] = bool(stor7[_50166].field_160)
                        mem[_50167 + 288] = stor8[_50166]
                        if idx >= mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]:
                            revert with 0, 50
                        mem[(32 * idx) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192] = _50167
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if arg1 < arg1 + 1:
                        _49254 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_49254] = 4
                        mem[_49254 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                        _49505 = mem[64]
                        mem[mem[64]] = 96
                        _50163 = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                        mem[mem[64] + 96] = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                        idx = 0
                        s = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192
                        t = mem[64] + 128
                        while idx < _50163:
                            _58331 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_58331 + 32]
                            mem[t + 64] = mem[_58331 + 64]
                            mem[t + 96] = mem[_58331 + 96]
                            mem[t + 128] = mem[_58331 + 128]
                            mem[t + 160] = mem[_58331 + 172 len 20]
                            mem[t + 192] = mem[_58331 + 192]
                            mem[t + 224] = mem[_58331 + 236 len 20]
                            mem[t + 256] = bool(mem[_58331 + 256])
                            mem[t + 288] = mem[_58331 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_49505 + 32] = 0
                        mem[_49505 + 64] = (320 * _50163) + 128
                        _59958 = mem[_49254]
                        mem[_49505 + (320 * _50163) + 128] = mem[_49254]
                        mem[_49505 + (320 * _50163) + 160 len ceil32(_59958)] = mem[_49254 + 32 len ceil32(_59958)]
                        var48001 = ceil32(_59958)
                        if ceil32(_59958) > _59958:
                            mem[_49505 + (320 * _50163) + _59958 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_59958) + _49505 + (320 * _50163) + -mem[64] + 160
                    _50164 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_50164] = 7
                    mem[_50164 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                    _51083 = mem[64]
                    mem[mem[64]] = 96
                    _51618 = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                    mem[mem[64] + 96] = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                    idx = 0
                    s = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192
                    t = mem[64] + 128
                    while idx < _51618:
                        _58338 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_58338 + 32]
                        mem[t + 64] = mem[_58338 + 64]
                        mem[t + 96] = mem[_58338 + 96]
                        mem[t + 128] = mem[_58338 + 128]
                        mem[t + 160] = mem[_58338 + 172 len 20]
                        mem[t + 192] = mem[_58338 + 192]
                        mem[t + 224] = mem[_58338 + 236 len 20]
                        mem[t + 256] = bool(mem[_58338 + 256])
                        mem[t + 288] = mem[_58338 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_51083 + 32] = -1
                    mem[_51083 + 64] = (320 * _51618) + 128
                    _59959 = mem[_50164]
                    mem[_51083 + (320 * _51618) + 128] = mem[_50164]
                    mem[_51083 + (320 * _51618) + 160 len ceil32(_59959)] = mem[_50164 + 32 len ceil32(_59959)]
                    var51001 = ceil32(_59959)
                    if ceil32(_59959) > _59959:
                        mem[_51083 + (320 * _51618) + _59959 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_59959) + _51083 + (320 * _51618) + -mem[64] + 160
                mem[64] = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 512
                mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 192] = 0
                mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 224] = 0
                mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 256] = 0
                mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 288] = 0
                mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 320] = 0
                mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 352] = 0
                mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 384] = 0
                mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 416] = 0
                mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 448] = 0
                mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 480] = 0
                mem[var38001] = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 192
                s = var38001
                idx = var38002
                while idx - 1:
                    mem[64] = mem[64] + 320
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 192] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 224] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 256] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 288] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 320] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 352] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 384] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 416] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 448] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 480] = 0
                    mem[s + 32] = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 192
                    s = s + 32
                    idx = idx - 1
                    continue 
                idx = 0
                while idx < arg1 + 1:
                    if arg1 < idx:
                        revert with 0, 17
                    if arg1 - idx >= mem[(32 * stor13[address(arg5)].field_0) + 128]:
                        revert with 0, 50
                    mem[0] = mem[(32 * arg1 - idx) + (32 * stor13[address(arg5)].field_0) + 160]
                    mem[32] = 12
                    _65717 = sha3(mem[(32 * arg1 - idx) + (32 * stor13[address(arg5)].field_0) + 160], 12)
                    _65718 = mem[64]
                    mem[64] = mem[64] + 320
                    mem[_65718] = stor12[mem[(32 * arg1 - idx) + (32 * stor13[address(arg5)].field_0) + 160]].field_0
                    mem[_65718 + 32] = stor1[_65717]
                    mem[_65718 + 64] = stor2[_65717]
                    mem[_65718 + 96] = stor3[_65717]
                    mem[_65718 + 128] = stor4[_65717]
                    mem[_65718 + 160] = stor5[_65717]
                    mem[_65718 + 192] = stor6[_65717]
                    mem[_65718 + 224] = stor7[_65717].field_0
                    mem[_65718 + 256] = bool(stor7[_65717].field_160)
                    mem[_65718 + 288] = stor8[_65717]
                    if idx >= mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]:
                        revert with 0, 50
                    mem[(32 * idx) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192] = _65718
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
                if arg1 < arg1 + 1:
                    _65237 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_65237] = 4
                    mem[_65237 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                    _65337 = mem[64]
                    mem[mem[64]] = 96
                    _65714 = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                    mem[mem[64] + 96] = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                    idx = 0
                    s = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192
                    t = mem[64] + 128
                    while idx < _65714:
                        _68470 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_68470 + 32]
                        mem[t + 64] = mem[_68470 + 64]
                        mem[t + 96] = mem[_68470 + 96]
                        mem[t + 128] = mem[_68470 + 128]
                        mem[t + 160] = mem[_68470 + 172 len 20]
                        mem[t + 192] = mem[_68470 + 192]
                        mem[t + 224] = mem[_68470 + 236 len 20]
                        mem[t + 256] = bool(mem[_68470 + 256])
                        mem[t + 288] = mem[_68470 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_65337 + 32] = 0
                    mem[_65337 + 64] = (320 * _65714) + 128
                    _69243 = mem[_65237]
                    mem[_65337 + (320 * _65714) + 128] = mem[_65237]
                    mem[_65337 + (320 * _65714) + 160 len ceil32(_69243)] = mem[_65237 + 32 len ceil32(_69243)]
                    var55001 = ceil32(_69243)
                    if ceil32(_69243) > _69243:
                        mem[_65337 + (320 * _65714) + _69243 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_69243) + _65337 + (320 * _65714) + -mem[64] + 160
                _65715 = mem[64]
                mem[64] = mem[64] + 64
                mem[_65715] = 7
                mem[_65715 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                _66228 = mem[64]
                mem[mem[64]] = 96
                _66446 = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                mem[mem[64] + 96] = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                idx = 0
                s = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192
                t = mem[64] + 128
                while idx < _66446:
                    _68477 = mem[s]
                    mem[t] = mem[mem[s]]
                    mem[t + 32] = mem[_68477 + 32]
                    mem[t + 64] = mem[_68477 + 64]
                    mem[t + 96] = mem[_68477 + 96]
                    mem[t + 128] = mem[_68477 + 128]
                    mem[t + 160] = mem[_68477 + 172 len 20]
                    mem[t + 192] = mem[_68477 + 192]
                    mem[t + 224] = mem[_68477 + 236 len 20]
                    mem[t + 256] = bool(mem[_68477 + 256])
                    mem[t + 288] = mem[_68477 + 288]
                    idx = idx + 1
                    s = s + 32
                    t = t + 320
                    continue 
                mem[_66228 + 32] = -1
                mem[_66228 + 64] = (320 * _66446) + 128
                _69244 = mem[_65715]
                mem[_66228 + (320 * _66446) + 128] = mem[_65715]
                mem[_66228 + (320 * _66446) + 160 len ceil32(_69244)] = mem[_65715 + 32 len ceil32(_69244)]
                var58001 = ceil32(_69244)
                if ceil32(_69244) > _69244:
                    mem[_66228 + (320 * _66446) + _69244 + 160] = 0
                return memory
                  from mem[64]
                   len ceil32(_69244) + _66228 + (320 * _66446) + -mem[64] + 160
            if stor15[address(arg5)].field_0 < arg1:
                revert with 0, 17
            if arg2 <= stor15[address(arg5)].field_0 - arg1:
                if arg2 > test266151307():
                    revert with 0, 65
                mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160] = arg2
                mem[64] = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 192
                if not arg2:
                    idx = 0
                    while idx < arg2:
                        if arg1 > !idx:
                            revert with 0, 17
                        if arg1 + idx >= mem[(32 * stor13[address(arg5)].field_0) + 128]:
                            revert with 0, 50
                        mem[0] = mem[(32 * arg1 + idx) + (32 * stor13[address(arg5)].field_0) + 160]
                        mem[32] = 12
                        _50170 = sha3(mem[(32 * arg1 + idx) + (32 * stor13[address(arg5)].field_0) + 160], 12)
                        _50171 = mem[64]
                        mem[64] = mem[64] + 320
                        mem[_50171] = stor12[mem[(32 * arg1 + idx) + (32 * stor13[address(arg5)].field_0) + 160]].field_0
                        mem[_50171 + 32] = stor1[_50170]
                        mem[_50171 + 64] = stor2[_50170]
                        mem[_50171 + 96] = stor3[_50170]
                        mem[_50171 + 128] = stor4[_50170]
                        mem[_50171 + 160] = stor5[_50170]
                        mem[_50171 + 192] = stor6[_50170]
                        mem[_50171 + 224] = stor7[_50170].field_0
                        mem[_50171 + 256] = bool(stor7[_50170].field_160)
                        mem[_50171 + 288] = stor8[_50170]
                        if idx >= mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]:
                            revert with 0, 50
                        mem[(32 * idx) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192] = _50171
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if arg1 > !arg2:
                        revert with 0, 17
                    if arg1 > !arg2:
                        revert with 0, 17
                    if arg1 + arg2 < mem[(32 * stor13[address(arg5)].field_0) + 128]:
                        _51619 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_51619] = 7
                        mem[_51619 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                        _52249 = mem[64]
                        mem[mem[64]] = 96
                        _53089 = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                        mem[mem[64] + 96] = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                        idx = 0
                        s = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192
                        t = mem[64] + 128
                        while idx < _53089:
                            _58345 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_58345 + 32]
                            mem[t + 64] = mem[_58345 + 64]
                            mem[t + 96] = mem[_58345 + 96]
                            mem[t + 128] = mem[_58345 + 128]
                            mem[t + 160] = mem[_58345 + 172 len 20]
                            mem[t + 192] = mem[_58345 + 192]
                            mem[t + 224] = mem[_58345 + 236 len 20]
                            mem[t + 256] = bool(mem[_58345 + 256])
                            mem[t + 288] = mem[_58345 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_52249 + 32] = arg1 + arg2
                        mem[_52249 + 64] = (320 * _53089) + 128
                        _59960 = mem[_51619]
                        mem[_52249 + (320 * _53089) + 128] = mem[_51619]
                        mem[_52249 + (320 * _53089) + 160 len ceil32(_59960)] = mem[_51619 + 32 len ceil32(_59960)]
                        var53001 = ceil32(_59960)
                        if ceil32(_59960) > _59960:
                            mem[_52249 + (320 * _53089) + _59960 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_59960) + _52249 + (320 * _53089) + -mem[64] + 160
                    _51620 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_51620] = 4
                    mem[_51620 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                    _52250 = mem[64]
                    mem[mem[64]] = 96
                    _53090 = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                    mem[mem[64] + 96] = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                    idx = 0
                    s = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192
                    t = mem[64] + 128
                    while idx < _53090:
                        _58352 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_58352 + 32]
                        mem[t + 64] = mem[_58352 + 64]
                        mem[t + 96] = mem[_58352 + 96]
                        mem[t + 128] = mem[_58352 + 128]
                        mem[t + 160] = mem[_58352 + 172 len 20]
                        mem[t + 192] = mem[_58352 + 192]
                        mem[t + 224] = mem[_58352 + 236 len 20]
                        mem[t + 256] = bool(mem[_58352 + 256])
                        mem[t + 288] = mem[_58352 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_52250 + 32] = arg1 + arg2
                    mem[_52250 + 64] = (320 * _53090) + 128
                    _59961 = mem[_51620]
                    mem[_52250 + (320 * _53090) + 128] = mem[_51620]
                    mem[_52250 + (320 * _53090) + 160 len ceil32(_59961)] = mem[_51620 + 32 len ceil32(_59961)]
                    var53001 = ceil32(_59961)
                    if ceil32(_59961) > _59961:
                        mem[_52250 + (320 * _53090) + _59961 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_59961) + _52250 + (320 * _53090) + -mem[64] + 160
                mem[64] = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 512
                mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 192] = 0
                mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224] = 0
                mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 256] = 0
                mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 288] = 0
                mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 320] = 0
                mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 352] = 0
                mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 384] = 0
                mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 416] = 0
                mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 448] = 0
                mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 480] = 0
                mem[var37001] = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 192
                s = var37001
                idx = var37002
                while idx - 1:
                    mem[64] = mem[64] + 320
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 192] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 256] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 288] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 320] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 352] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 384] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 416] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 448] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 480] = 0
                    mem[s + 32] = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 192
                    s = s + 32
                    idx = idx - 1
                    continue 
                idx = 0
                while idx < arg2:
                    if arg1 > !idx:
                        revert with 0, 17
                    if arg1 + idx >= mem[(32 * stor13[address(arg5)].field_0) + 128]:
                        revert with 0, 50
                    mem[0] = mem[(32 * arg1 + idx) + (32 * stor13[address(arg5)].field_0) + 160]
                    mem[32] = 12
                    _65723 = sha3(mem[(32 * arg1 + idx) + (32 * stor13[address(arg5)].field_0) + 160], 12)
                    _65724 = mem[64]
                    mem[64] = mem[64] + 320
                    mem[_65724] = stor12[mem[(32 * arg1 + idx) + (32 * stor13[address(arg5)].field_0) + 160]].field_0
                    mem[_65724 + 32] = stor1[_65723]
                    mem[_65724 + 64] = stor2[_65723]
                    mem[_65724 + 96] = stor3[_65723]
                    mem[_65724 + 128] = stor4[_65723]
                    mem[_65724 + 160] = stor5[_65723]
                    mem[_65724 + 192] = stor6[_65723]
                    mem[_65724 + 224] = stor7[_65723].field_0
                    mem[_65724 + 256] = bool(stor7[_65723].field_160)
                    mem[_65724 + 288] = stor8[_65723]
                    if idx >= mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]:
                        revert with 0, 50
                    mem[(32 * idx) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192] = _65724
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
                if arg1 > !arg2:
                    revert with 0, 17
                if arg1 > !arg2:
                    revert with 0, 17
                if arg1 + arg2 < mem[(32 * stor13[address(arg5)].field_0) + 128]:
                    _66447 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_66447] = 7
                    mem[_66447 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                    _66640 = mem[64]
                    mem[mem[64]] = 96
                    _66948 = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                    mem[mem[64] + 96] = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                    idx = 0
                    s = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192
                    t = mem[64] + 128
                    while idx < _66948:
                        _68484 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_68484 + 32]
                        mem[t + 64] = mem[_68484 + 64]
                        mem[t + 96] = mem[_68484 + 96]
                        mem[t + 128] = mem[_68484 + 128]
                        mem[t + 160] = mem[_68484 + 172 len 20]
                        mem[t + 192] = mem[_68484 + 192]
                        mem[t + 224] = mem[_68484 + 236 len 20]
                        mem[t + 256] = bool(mem[_68484 + 256])
                        mem[t + 288] = mem[_68484 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_66640 + 32] = arg1 + arg2
                    mem[_66640 + 64] = (320 * _66948) + 128
                    _69245 = mem[_66447]
                    mem[_66640 + (320 * _66948) + 128] = mem[_66447]
                    mem[_66640 + (320 * _66948) + 160 len ceil32(_69245)] = mem[_66447 + 32 len ceil32(_69245)]
                    var60001 = ceil32(_69245)
                    if ceil32(_69245) > _69245:
                        mem[_66640 + (320 * _66948) + _69245 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_69245) + _66640 + (320 * _66948) + -mem[64] + 160
                _66448 = mem[64]
                mem[64] = mem[64] + 64
                mem[_66448] = 4
                mem[_66448 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                _66641 = mem[64]
                mem[mem[64]] = 96
                _66949 = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                mem[mem[64] + 96] = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                idx = 0
                s = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192
                t = mem[64] + 128
                while idx < _66949:
                    _68491 = mem[s]
                    mem[t] = mem[mem[s]]
                    mem[t + 32] = mem[_68491 + 32]
                    mem[t + 64] = mem[_68491 + 64]
                    mem[t + 96] = mem[_68491 + 96]
                    mem[t + 128] = mem[_68491 + 128]
                    mem[t + 160] = mem[_68491 + 172 len 20]
                    mem[t + 192] = mem[_68491 + 192]
                    mem[t + 224] = mem[_68491 + 236 len 20]
                    mem[t + 256] = bool(mem[_68491 + 256])
                    mem[t + 288] = mem[_68491 + 288]
                    idx = idx + 1
                    s = s + 32
                    t = t + 320
                    continue 
                mem[_66641 + 32] = arg1 + arg2
                mem[_66641 + 64] = (320 * _66949) + 128
                _69246 = mem[_66448]
                mem[_66641 + (320 * _66949) + 128] = mem[_66448]
                mem[_66641 + (320 * _66949) + 160 len ceil32(_69246)] = mem[_66448 + 32 len ceil32(_69246)]
                var60001 = ceil32(_69246)
                if ceil32(_69246) > _69246:
                    mem[_66641 + (320 * _66949) + _69246 + 160] = 0
                return memory
                  from mem[64]
                   len ceil32(_69246) + _66641 + (320 * _66949) + -mem[64] + 160
            if stor15[address(arg5)].field_0 < arg1:
                revert with 0, 17
            if stor15[address(arg5)].field_0 - arg1 > test266151307():
                revert with 0, 65
            mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160] = stor15[address(arg5)].field_0 - arg1
            mem[64] = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 192
            if not stor15[address(arg5)].field_0 - arg1:
                idx = 0
                while idx < stor15[address(arg5)].field_0 - arg1:
                    if arg1 > !idx:
                        revert with 0, 17
                    if arg1 + idx >= mem[(32 * stor13[address(arg5)].field_0) + 128]:
                        revert with 0, 50
                    mem[0] = mem[(32 * arg1 + idx) + (32 * stor13[address(arg5)].field_0) + 160]
                    mem[32] = 12
                    _50174 = sha3(mem[(32 * arg1 + idx) + (32 * stor13[address(arg5)].field_0) + 160], 12)
                    _50175 = mem[64]
                    mem[64] = mem[64] + 320
                    mem[_50175] = stor12[mem[(32 * arg1 + idx) + (32 * stor13[address(arg5)].field_0) + 160]].field_0
                    mem[_50175 + 32] = stor1[_50174]
                    mem[_50175 + 64] = stor2[_50174]
                    mem[_50175 + 96] = stor3[_50174]
                    mem[_50175 + 128] = stor4[_50174]
                    mem[_50175 + 160] = stor5[_50174]
                    mem[_50175 + 192] = stor6[_50174]
                    mem[_50175 + 224] = stor7[_50174].field_0
                    mem[_50175 + 256] = bool(stor7[_50174].field_160)
                    mem[_50175 + 288] = stor8[_50174]
                    if idx >= mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]:
                        revert with 0, 50
                    mem[(32 * idx) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192] = _50175
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
                if arg1 > !(stor15[address(arg5)].field_0 - arg1):
                    revert with 0, 17
                if arg1 > !(stor15[address(arg5)].field_0 - arg1):
                    revert with 0, 17
                if stor15[address(arg5)].field_0 < mem[(32 * stor13[address(arg5)].field_0) + 128]:
                    _51621 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_51621] = 7
                    mem[_51621 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                    _52255 = mem[64]
                    mem[mem[64]] = 96
                    _53091 = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                    mem[mem[64] + 96] = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                    idx = 0
                    s = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192
                    t = mem[64] + 128
                    while idx < _53091:
                        _58359 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_58359 + 32]
                        mem[t + 64] = mem[_58359 + 64]
                        mem[t + 96] = mem[_58359 + 96]
                        mem[t + 128] = mem[_58359 + 128]
                        mem[t + 160] = mem[_58359 + 172 len 20]
                        mem[t + 192] = mem[_58359 + 192]
                        mem[t + 224] = mem[_58359 + 236 len 20]
                        mem[t + 256] = bool(mem[_58359 + 256])
                        mem[t + 288] = mem[_58359 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_52255 + 32] = stor15[address(arg5)].field_0
                    mem[_52255 + 64] = (320 * _53091) + 128
                    _59962 = mem[_51621]
                    mem[_52255 + (320 * _53091) + 128] = mem[_51621]
                    mem[_52255 + (320 * _53091) + 160 len ceil32(_59962)] = mem[_51621 + 32 len ceil32(_59962)]
                    var57001 = ceil32(_59962)
                    if ceil32(_59962) > _59962:
                        mem[_52255 + (320 * _53091) + _59962 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_59962) + _52255 + (320 * _53091) + -mem[64] + 160
                _51622 = mem[64]
                mem[64] = mem[64] + 64
                mem[_51622] = 4
                mem[_51622 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                _52256 = mem[64]
                mem[mem[64]] = 96
                _53092 = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                mem[mem[64] + 96] = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                idx = 0
                s = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192
                t = mem[64] + 128
                while idx < _53092:
                    _58366 = mem[s]
                    mem[t] = mem[mem[s]]
                    mem[t + 32] = mem[_58366 + 32]
                    mem[t + 64] = mem[_58366 + 64]
                    mem[t + 96] = mem[_58366 + 96]
                    mem[t + 128] = mem[_58366 + 128]
                    mem[t + 160] = mem[_58366 + 172 len 20]
                    mem[t + 192] = mem[_58366 + 192]
                    mem[t + 224] = mem[_58366 + 236 len 20]
                    mem[t + 256] = bool(mem[_58366 + 256])
                    mem[t + 288] = mem[_58366 + 288]
                    idx = idx + 1
                    s = s + 32
                    t = t + 320
                    continue 
                mem[_52256 + 32] = stor15[address(arg5)].field_0
                mem[_52256 + 64] = (320 * _53092) + 128
                _59963 = mem[_51622]
                mem[_52256 + (320 * _53092) + 128] = mem[_51622]
                mem[_52256 + (320 * _53092) + 160 len ceil32(_59963)] = mem[_51622 + 32 len ceil32(_59963)]
                var57001 = ceil32(_59963)
                if ceil32(_59963) > _59963:
                    mem[_52256 + (320 * _53092) + _59963 + 160] = 0
                return memory
                  from mem[64]
                   len ceil32(_59963) + _52256 + (320 * _53092) + -mem[64] + 160
            mem[64] = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 512
            mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 192] = 0
            mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 224] = 0
            mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 256] = 0
            mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 288] = 0
            mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 320] = 0
            mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 352] = 0
            mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 384] = 0
            mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 416] = 0
            mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 448] = 0
            mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 480] = 0
            mem[var41001] = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 192
            s = var41001
            idx = var41002
            while idx - 1:
                mem[64] = mem[64] + 320
                mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 192] = 0
                mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 224] = 0
                mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 256] = 0
                mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 288] = 0
                mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 320] = 0
                mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 352] = 0
                mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 384] = 0
                mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 416] = 0
                mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 448] = 0
                mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 480] = 0
                mem[s + 32] = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 192
                s = s + 32
                idx = idx - 1
                continue 
            idx = 0
            while idx < stor15[address(arg5)].field_0 - arg1:
                if arg1 > !idx:
                    revert with 0, 17
                if arg1 + idx >= mem[(32 * stor13[address(arg5)].field_0) + 128]:
                    revert with 0, 50
                mem[0] = mem[(32 * arg1 + idx) + (32 * stor13[address(arg5)].field_0) + 160]
                mem[32] = 12
                _65729 = sha3(mem[(32 * arg1 + idx) + (32 * stor13[address(arg5)].field_0) + 160], 12)
                _65730 = mem[64]
                mem[64] = mem[64] + 320
                mem[_65730] = stor12[mem[(32 * arg1 + idx) + (32 * stor13[address(arg5)].field_0) + 160]].field_0
                mem[_65730 + 32] = stor1[_65729]
                mem[_65730 + 64] = stor2[_65729]
                mem[_65730 + 96] = stor3[_65729]
                mem[_65730 + 128] = stor4[_65729]
                mem[_65730 + 160] = stor5[_65729]
                mem[_65730 + 192] = stor6[_65729]
                mem[_65730 + 224] = stor7[_65729].field_0
                mem[_65730 + 256] = bool(stor7[_65729].field_160)
                mem[_65730 + 288] = stor8[_65729]
                if idx >= mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]:
                    revert with 0, 50
                mem[(32 * idx) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192] = _65730
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
            if arg1 > !(stor15[address(arg5)].field_0 - arg1):
                revert with 0, 17
            if arg1 > !(stor15[address(arg5)].field_0 - arg1):
                revert with 0, 17
            if stor15[address(arg5)].field_0 < mem[(32 * stor13[address(arg5)].field_0) + 128]:
                _66449 = mem[64]
                mem[64] = mem[64] + 64
                mem[_66449] = 7
                mem[_66449 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                _66642 = mem[64]
                mem[mem[64]] = 96
                _66950 = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                mem[mem[64] + 96] = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                idx = 0
                s = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192
                t = mem[64] + 128
                while idx < _66950:
                    _68498 = mem[s]
                    mem[t] = mem[mem[s]]
                    mem[t + 32] = mem[_68498 + 32]
                    mem[t + 64] = mem[_68498 + 64]
                    mem[t + 96] = mem[_68498 + 96]
                    mem[t + 128] = mem[_68498 + 128]
                    mem[t + 160] = mem[_68498 + 172 len 20]
                    mem[t + 192] = mem[_68498 + 192]
                    mem[t + 224] = mem[_68498 + 236 len 20]
                    mem[t + 256] = bool(mem[_68498 + 256])
                    mem[t + 288] = mem[_68498 + 288]
                    idx = idx + 1
                    s = s + 32
                    t = t + 320
                    continue 
                mem[_66642 + 32] = stor15[address(arg5)].field_0
                mem[_66642 + 64] = (320 * _66950) + 128
                _69247 = mem[_66449]
                mem[_66642 + (320 * _66950) + 128] = mem[_66449]
                mem[_66642 + (320 * _66950) + 160 len ceil32(_69247)] = mem[_66449 + 32 len ceil32(_69247)]
                var64001 = ceil32(_69247)
                if ceil32(_69247) > _69247:
                    mem[_66642 + (320 * _66950) + _69247 + 160] = 0
                return memory
                  from mem[64]
                   len ceil32(_69247) + _66642 + (320 * _66950) + -mem[64] + 160
            _66450 = mem[64]
            mem[64] = mem[64] + 64
            mem[_66450] = 4
            mem[_66450 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
            _66643 = mem[64]
            mem[mem[64]] = 96
            _66951 = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
            mem[mem[64] + 96] = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
            idx = 0
            s = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192
            t = mem[64] + 128
            while idx < _66951:
                _68505 = mem[s]
                mem[t] = mem[mem[s]]
                mem[t + 32] = mem[_68505 + 32]
                mem[t + 64] = mem[_68505 + 64]
                mem[t + 96] = mem[_68505 + 96]
                mem[t + 128] = mem[_68505 + 128]
                mem[t + 160] = mem[_68505 + 172 len 20]
                mem[t + 192] = mem[_68505 + 192]
                mem[t + 224] = mem[_68505 + 236 len 20]
                mem[t + 256] = bool(mem[_68505 + 256])
                mem[t + 288] = mem[_68505 + 288]
                idx = idx + 1
                s = s + 32
                t = t + 320
                continue 
            mem[_66643 + 32] = stor15[address(arg5)].field_0
            mem[_66643 + 64] = (320 * _66951) + 128
            _69248 = mem[_66450]
            mem[_66643 + (320 * _66951) + 128] = mem[_66450]
            mem[_66643 + (320 * _66951) + 160 len ceil32(_69248)] = mem[_66450 + 32 len ceil32(_69248)]
            var64001 = ceil32(_69248)
            if ceil32(_69248) > _69248:
                mem[_66643 + (320 * _66951) + _69248 + 160] = 0
            return memory
              from mem[64]
               len ceil32(_69248) + _66643 + (320 * _66951) + -mem[64] + 160
        if stor15[address(arg5)].field_0 < 1:
            revert with 0, 17
        if arg3:
            if arg2 <= stor15[address(arg5)].field_0 - 1:
                if arg2 > test266151307():
                    revert with 0, 65
                mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160] = arg2
                mem[64] = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 192
                if not arg2:
                    idx = 0
                    while idx < arg2:
                        if stor15[address(arg5)].field_0 - 1 < idx:
                            revert with 0, 17
                        if stor15[address(arg5)].field_0 + -idx - 1 >= mem[(32 * stor13[address(arg5)].field_0) + 128]:
                            revert with 0, 50
                        mem[0] = mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor13[address(arg5)].field_0) + 160]
                        mem[32] = 12
                        _50180 = sha3(mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor13[address(arg5)].field_0) + 160], 12)
                        _50181 = mem[64]
                        mem[64] = mem[64] + 320
                        mem[_50181] = stor12[mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor13[address(arg5)].field_0) + 160]].field_0
                        mem[_50181 + 32] = stor1[_50180]
                        mem[_50181 + 64] = stor2[_50180]
                        mem[_50181 + 96] = stor3[_50180]
                        mem[_50181 + 128] = stor4[_50180]
                        mem[_50181 + 160] = stor5[_50180]
                        mem[_50181 + 192] = stor6[_50180]
                        mem[_50181 + 224] = stor7[_50180].field_0
                        mem[_50181 + 256] = bool(stor7[_50180].field_160)
                        mem[_50181 + 288] = stor8[_50180]
                        if idx >= mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]:
                            revert with 0, 50
                        mem[(32 * idx) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192] = _50181
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if stor15[address(arg5)].field_0 - 1 < arg2:
                        _49255 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_49255] = 4
                        mem[_49255 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                        _49509 = mem[64]
                        mem[mem[64]] = 96
                        _50177 = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                        mem[mem[64] + 96] = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                        idx = 0
                        s = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192
                        t = mem[64] + 128
                        while idx < _50177:
                            _58373 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_58373 + 32]
                            mem[t + 64] = mem[_58373 + 64]
                            mem[t + 96] = mem[_58373 + 96]
                            mem[t + 128] = mem[_58373 + 128]
                            mem[t + 160] = mem[_58373 + 172 len 20]
                            mem[t + 192] = mem[_58373 + 192]
                            mem[t + 224] = mem[_58373 + 236 len 20]
                            mem[t + 256] = bool(mem[_58373 + 256])
                            mem[t + 288] = mem[_58373 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_49509 + 32] = 0
                        mem[_49509 + 64] = (320 * _50177) + 128
                        _59964 = mem[_49255]
                        mem[_49509 + (320 * _50177) + 128] = mem[_49255]
                        mem[_49509 + (320 * _50177) + 160 len ceil32(_59964)] = mem[_49255 + 32 len ceil32(_59964)]
                        var48001 = ceil32(_59964)
                        if ceil32(_59964) > _59964:
                            mem[_49509 + (320 * _50177) + _59964 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_59964) + _49509 + (320 * _50177) + -mem[64] + 160
                    _50178 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_50178] = 7
                    mem[_50178 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                    _51092 = mem[64]
                    mem[mem[64]] = 96
                    _51624 = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                    mem[mem[64] + 96] = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                    idx = 0
                    s = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192
                    t = mem[64] + 128
                    while idx < _51624:
                        _58380 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_58380 + 32]
                        mem[t + 64] = mem[_58380 + 64]
                        mem[t + 96] = mem[_58380 + 96]
                        mem[t + 128] = mem[_58380 + 128]
                        mem[t + 160] = mem[_58380 + 172 len 20]
                        mem[t + 192] = mem[_58380 + 192]
                        mem[t + 224] = mem[_58380 + 236 len 20]
                        mem[t + 256] = bool(mem[_58380 + 256])
                        mem[t + 288] = mem[_58380 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_51092 + 32] = stor15[address(arg5)].field_0 + -arg2 - 1
                    mem[_51092 + 64] = (320 * _51624) + 128
                    _59965 = mem[_50178]
                    mem[_51092 + (320 * _51624) + 128] = mem[_50178]
                    mem[_51092 + (320 * _51624) + 160 len ceil32(_59965)] = mem[_50178 + 32 len ceil32(_59965)]
                    var51001 = ceil32(_59965)
                    if ceil32(_59965) > _59965:
                        mem[_51092 + (320 * _51624) + _59965 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_59965) + _51092 + (320 * _51624) + -mem[64] + 160
                mem[64] = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 512
                mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 192] = 0
                mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224] = 0
                mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 256] = 0
                mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 288] = 0
                mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 320] = 0
                mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 352] = 0
                mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 384] = 0
                mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 416] = 0
                mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 448] = 0
                mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 480] = 0
                mem[var38001] = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 192
                s = var38001
                idx = var38002
                while idx - 1:
                    mem[64] = mem[64] + 320
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 192] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 256] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 288] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 320] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 352] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 384] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 416] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 448] = 0
                    mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 480] = 0
                    mem[s + 32] = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 192
                    s = s + 32
                    idx = idx - 1
                    continue 
                idx = 0
                while idx < arg2:
                    if stor15[address(arg5)].field_0 - 1 < idx:
                        revert with 0, 17
                    if stor15[address(arg5)].field_0 + -idx - 1 >= mem[(32 * stor13[address(arg5)].field_0) + 128]:
                        revert with 0, 50
                    mem[0] = mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor13[address(arg5)].field_0) + 160]
                    mem[32] = 12
                    _65737 = sha3(mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor13[address(arg5)].field_0) + 160], 12)
                    _65738 = mem[64]
                    mem[64] = mem[64] + 320
                    mem[_65738] = stor12[mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor13[address(arg5)].field_0) + 160]].field_0
                    mem[_65738 + 32] = stor1[_65737]
                    mem[_65738 + 64] = stor2[_65737]
                    mem[_65738 + 96] = stor3[_65737]
                    mem[_65738 + 128] = stor4[_65737]
                    mem[_65738 + 160] = stor5[_65737]
                    mem[_65738 + 192] = stor6[_65737]
                    mem[_65738 + 224] = stor7[_65737].field_0
                    mem[_65738 + 256] = bool(stor7[_65737].field_160)
                    mem[_65738 + 288] = stor8[_65737]
                    if idx >= mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]:
                        revert with 0, 50
                    mem[(32 * idx) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192] = _65738
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
                if stor15[address(arg5)].field_0 - 1 < arg2:
                    _65238 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_65238] = 4
                    mem[_65238 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                    _65347 = mem[64]
                    mem[mem[64]] = 96
                    _65734 = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                    mem[mem[64] + 96] = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                    idx = 0
                    s = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192
                    t = mem[64] + 128
                    while idx < _65734:
                        _68512 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_68512 + 32]
                        mem[t + 64] = mem[_68512 + 64]
                        mem[t + 96] = mem[_68512 + 96]
                        mem[t + 128] = mem[_68512 + 128]
                        mem[t + 160] = mem[_68512 + 172 len 20]
                        mem[t + 192] = mem[_68512 + 192]
                        mem[t + 224] = mem[_68512 + 236 len 20]
                        mem[t + 256] = bool(mem[_68512 + 256])
                        mem[t + 288] = mem[_68512 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_65347 + 32] = 0
                    mem[_65347 + 64] = (320 * _65734) + 128
                    _69249 = mem[_65238]
                    mem[_65347 + (320 * _65734) + 128] = mem[_65238]
                    mem[_65347 + (320 * _65734) + 160 len ceil32(_69249)] = mem[_65238 + 32 len ceil32(_69249)]
                    var55001 = ceil32(_69249)
                    if ceil32(_69249) > _69249:
                        mem[_65347 + (320 * _65734) + _69249 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_69249) + _65347 + (320 * _65734) + -mem[64] + 160
                _65735 = mem[64]
                mem[64] = mem[64] + 64
                mem[_65735] = 7
                mem[_65735 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                _66236 = mem[64]
                mem[mem[64]] = 96
                _66452 = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                mem[mem[64] + 96] = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                idx = 0
                s = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192
                t = mem[64] + 128
                while idx < _66452:
                    _68519 = mem[s]
                    mem[t] = mem[mem[s]]
                    mem[t + 32] = mem[_68519 + 32]
                    mem[t + 64] = mem[_68519 + 64]
                    mem[t + 96] = mem[_68519 + 96]
                    mem[t + 128] = mem[_68519 + 128]
                    mem[t + 160] = mem[_68519 + 172 len 20]
                    mem[t + 192] = mem[_68519 + 192]
                    mem[t + 224] = mem[_68519 + 236 len 20]
                    mem[t + 256] = bool(mem[_68519 + 256])
                    mem[t + 288] = mem[_68519 + 288]
                    idx = idx + 1
                    s = s + 32
                    t = t + 320
                    continue 
                mem[_66236 + 32] = stor15[address(arg5)].field_0 + -arg2 - 1
                mem[_66236 + 64] = (320 * _66452) + 128
                _69250 = mem[_65735]
                mem[_66236 + (320 * _66452) + 128] = mem[_65735]
                mem[_66236 + (320 * _66452) + 160 len ceil32(_69250)] = mem[_65735 + 32 len ceil32(_69250)]
                var58001 = ceil32(_69250)
                if ceil32(_69250) > _69250:
                    mem[_66236 + (320 * _66452) + _69250 + 160] = 0
                return memory
                  from mem[64]
                   len ceil32(_69250) + _66236 + (320 * _66452) + -mem[64] + 160
            if 1 > !(stor15[address(arg5)].field_0 - 1):
                revert with 0, 17
            if stor15[address(arg5)].field_0 > test266151307():
                revert with 0, 65
            mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160] = stor15[address(arg5)].field_0
            mem[64] = (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 192
            if not stor15[address(arg5)].field_0:
                idx = 0
                while idx < stor15[address(arg5)].field_0:
                    if stor15[address(arg5)].field_0 - 1 < idx:
                        revert with 0, 17
                    if stor15[address(arg5)].field_0 + -idx - 1 >= mem[(32 * stor13[address(arg5)].field_0) + 128]:
                        revert with 0, 50
                    mem[0] = mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor13[address(arg5)].field_0) + 160]
                    mem[32] = 12
                    _50186 = sha3(mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor13[address(arg5)].field_0) + 160], 12)
                    _50187 = mem[64]
                    mem[64] = mem[64] + 320
                    mem[_50187] = stor12[mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor13[address(arg5)].field_0) + 160]].field_0
                    mem[_50187 + 32] = stor1[_50186]
                    mem[_50187 + 64] = stor2[_50186]
                    mem[_50187 + 96] = stor3[_50186]
                    mem[_50187 + 128] = stor4[_50186]
                    mem[_50187 + 160] = stor5[_50186]
                    mem[_50187 + 192] = stor6[_50186]
                    mem[_50187 + 224] = stor7[_50186].field_0
                    mem[_50187 + 256] = bool(stor7[_50186].field_160)
                    mem[_50187 + 288] = stor8[_50186]
                    if idx >= mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]:
                        revert with 0, 50
                    mem[(32 * idx) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192] = _50187
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
                if stor15[address(arg5)].field_0 - 1 < stor15[address(arg5)].field_0:
                    _49256 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_49256] = 4
                    mem[_49256 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                    _49511 = mem[64]
                    mem[mem[64]] = 96
                    _50183 = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                    mem[mem[64] + 96] = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                    idx = 0
                    s = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192
                    t = mem[64] + 128
                    while idx < _50183:
                        _58387 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_58387 + 32]
                        mem[t + 64] = mem[_58387 + 64]
                        mem[t + 96] = mem[_58387 + 96]
                        mem[t + 128] = mem[_58387 + 128]
                        mem[t + 160] = mem[_58387 + 172 len 20]
                        mem[t + 192] = mem[_58387 + 192]
                        mem[t + 224] = mem[_58387 + 236 len 20]
                        mem[t + 256] = bool(mem[_58387 + 256])
                        mem[t + 288] = mem[_58387 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_49511 + 32] = 0
                    mem[_49511 + 64] = (320 * _50183) + 128
                    _59966 = mem[_49256]
                    mem[_49511 + (320 * _50183) + 128] = mem[_49256]
                    mem[_49511 + (320 * _50183) + 160 len ceil32(_59966)] = mem[_49256 + 32 len ceil32(_59966)]
                    var52001 = ceil32(_59966)
                    if ceil32(_59966) > _59966:
                        mem[_49511 + (320 * _50183) + _59966 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_59966) + _49511 + (320 * _50183) + -mem[64] + 160
                _50184 = mem[64]
                mem[64] = mem[64] + 64
                mem[_50184] = 7
                mem[_50184 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                _51101 = mem[64]
                mem[mem[64]] = 96
                _51626 = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                mem[mem[64] + 96] = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                idx = 0
                s = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192
                t = mem[64] + 128
                while idx < _51626:
                    _58394 = mem[s]
                    mem[t] = mem[mem[s]]
                    mem[t + 32] = mem[_58394 + 32]
                    mem[t + 64] = mem[_58394 + 64]
                    mem[t + 96] = mem[_58394 + 96]
                    mem[t + 128] = mem[_58394 + 128]
                    mem[t + 160] = mem[_58394 + 172 len 20]
                    mem[t + 192] = mem[_58394 + 192]
                    mem[t + 224] = mem[_58394 + 236 len 20]
                    mem[t + 256] = bool(mem[_58394 + 256])
                    mem[t + 288] = mem[_58394 + 288]
                    idx = idx + 1
                    s = s + 32
                    t = t + 320
                    continue 
                mem[_51101 + 32] = -1
                mem[_51101 + 64] = (320 * _51626) + 128
                _59967 = mem[_50184]
                mem[_51101 + (320 * _51626) + 128] = mem[_50184]
                mem[_51101 + (320 * _51626) + 160 len ceil32(_59967)] = mem[_50184 + 32 len ceil32(_59967)]
                var55001 = ceil32(_59967)
                if ceil32(_59967) > _59967:
                    mem[_51101 + (320 * _51626) + _59967 + 160] = 0
                return memory
                  from mem[64]
                   len ceil32(_59967) + _51101 + (320 * _51626) + -mem[64] + 160
            mem[64] = (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 512
            mem[(32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 192] = 0
            mem[(32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 224] = 0
            mem[(32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 256] = 0
            mem[(32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 288] = 0
            mem[(32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 320] = 0
            mem[(32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 352] = 0
            mem[(32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 384] = 0
            mem[(32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 416] = 0
            mem[(32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 448] = 0
            mem[(32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 480] = 0
            mem[var42001] = (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 192
            s = var42001
            idx = var42002
            while idx - 1:
                mem[64] = mem[64] + 320
                mem[(32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 192] = 0
                mem[(32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 224] = 0
                mem[(32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 256] = 0
                mem[(32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 288] = 0
                mem[(32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 320] = 0
                mem[(32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 352] = 0
                mem[(32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 384] = 0
                mem[(32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 416] = 0
                mem[(32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 448] = 0
                mem[(32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 480] = 0
                mem[s + 32] = (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 192
                s = s + 32
                idx = idx - 1
                continue 
            idx = 0
            while idx < stor15[address(arg5)].field_0:
                if stor15[address(arg5)].field_0 - 1 < idx:
                    revert with 0, 17
                if stor15[address(arg5)].field_0 + -idx - 1 >= mem[(32 * stor13[address(arg5)].field_0) + 128]:
                    revert with 0, 50
                mem[0] = mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor13[address(arg5)].field_0) + 160]
                mem[32] = 12
                _65745 = sha3(mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor13[address(arg5)].field_0) + 160], 12)
                _65746 = mem[64]
                mem[64] = mem[64] + 320
                mem[_65746] = stor12[mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor13[address(arg5)].field_0) + 160]].field_0
                mem[_65746 + 32] = stor1[_65745]
                mem[_65746 + 64] = stor2[_65745]
                mem[_65746 + 96] = stor3[_65745]
                mem[_65746 + 128] = stor4[_65745]
                mem[_65746 + 160] = stor5[_65745]
                mem[_65746 + 192] = stor6[_65745]
                mem[_65746 + 224] = stor7[_65745].field_0
                mem[_65746 + 256] = bool(stor7[_65745].field_160)
                mem[_65746 + 288] = stor8[_65745]
                if idx >= mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]:
                    revert with 0, 50
                mem[(32 * idx) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192] = _65746
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
            if stor15[address(arg5)].field_0 - 1 < stor15[address(arg5)].field_0:
                _65239 = mem[64]
                mem[64] = mem[64] + 64
                mem[_65239] = 4
                mem[_65239 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                _65351 = mem[64]
                mem[mem[64]] = 96
                _65742 = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                mem[mem[64] + 96] = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                idx = 0
                s = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192
                t = mem[64] + 128
                while idx < _65742:
                    _68526 = mem[s]
                    mem[t] = mem[mem[s]]
                    mem[t + 32] = mem[_68526 + 32]
                    mem[t + 64] = mem[_68526 + 64]
                    mem[t + 96] = mem[_68526 + 96]
                    mem[t + 128] = mem[_68526 + 128]
                    mem[t + 160] = mem[_68526 + 172 len 20]
                    mem[t + 192] = mem[_68526 + 192]
                    mem[t + 224] = mem[_68526 + 236 len 20]
                    mem[t + 256] = bool(mem[_68526 + 256])
                    mem[t + 288] = mem[_68526 + 288]
                    idx = idx + 1
                    s = s + 32
                    t = t + 320
                    continue 
                mem[_65351 + 32] = 0
                mem[_65351 + 64] = (320 * _65742) + 128
                _69251 = mem[_65239]
                mem[_65351 + (320 * _65742) + 128] = mem[_65239]
                mem[_65351 + (320 * _65742) + 160 len ceil32(_69251)] = mem[_65239 + 32 len ceil32(_69251)]
                var59001 = ceil32(_69251)
                if ceil32(_69251) > _69251:
                    mem[_65351 + (320 * _65742) + _69251 + 160] = 0
                return memory
                  from mem[64]
                   len ceil32(_69251) + _65351 + (320 * _65742) + -mem[64] + 160
            _65743 = mem[64]
            mem[64] = mem[64] + 64
            mem[_65743] = 7
            mem[_65743 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
            _66244 = mem[64]
            mem[mem[64]] = 96
            _66454 = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
            mem[mem[64] + 96] = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
            idx = 0
            s = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192
            t = mem[64] + 128
            while idx < _66454:
                _68533 = mem[s]
                mem[t] = mem[mem[s]]
                mem[t + 32] = mem[_68533 + 32]
                mem[t + 64] = mem[_68533 + 64]
                mem[t + 96] = mem[_68533 + 96]
                mem[t + 128] = mem[_68533 + 128]
                mem[t + 160] = mem[_68533 + 172 len 20]
                mem[t + 192] = mem[_68533 + 192]
                mem[t + 224] = mem[_68533 + 236 len 20]
                mem[t + 256] = bool(mem[_68533 + 256])
                mem[t + 288] = mem[_68533 + 288]
                idx = idx + 1
                s = s + 32
                t = t + 320
                continue 
            mem[_66244 + 32] = -1
            mem[_66244 + 64] = (320 * _66454) + 128
            _69252 = mem[_65743]
            mem[_66244 + (320 * _66454) + 128] = mem[_65743]
            mem[_66244 + (320 * _66454) + 160 len ceil32(_69252)] = mem[_65743 + 32 len ceil32(_69252)]
            var62001 = ceil32(_69252)
            if ceil32(_69252) > _69252:
                mem[_66244 + (320 * _66454) + _69252 + 160] = 0
            return memory
              from mem[64]
               len ceil32(_69252) + _66244 + (320 * _66454) + -mem[64] + 160
        if stor15[address(arg5)].field_0 < stor15[address(arg5)].field_0 - 1:
            revert with 0, 17
        if arg2 > 1:
            if stor15[address(arg5)].field_0 < stor15[address(arg5)].field_0 - 1:
                revert with 0, 17
            mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160] = 1
            mem[64] = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 544
            mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224] = 0
            mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 256] = 0
            mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 288] = 0
            mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 320] = 0
            mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 352] = 0
            mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 384] = 0
            mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 416] = 0
            mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 448] = 0
            mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 480] = 0
            mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 512] = 0
            mem[var45001] = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
            s = var45001
            idx = var45002
            while idx - 1:
                mem[64] = mem[64] + 320
                mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224] = 0
                mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 256] = 0
                mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 288] = 0
                mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 320] = 0
                mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 352] = 0
                mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 384] = 0
                mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 416] = 0
                mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 448] = 0
                mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 480] = 0
                mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 512] = 0
                mem[s + 32] = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                s = s + 32
                idx = idx - 1
                continue 
            idx = 0
            while idx < 1:
                if stor15[address(arg5)].field_0 - 1 > !idx:
                    revert with 0, 17
                if stor15[address(arg5)].field_0 + idx - 1 >= mem[(32 * stor13[address(arg5)].field_0) + 128]:
                    revert with 0, 50
                mem[0] = mem[(32 * stor15[address(arg5)].field_0 + idx - 1) + (32 * stor13[address(arg5)].field_0) + 160]
                mem[32] = 12
                _65757 = sha3(mem[(32 * stor15[address(arg5)].field_0 + idx - 1) + (32 * stor13[address(arg5)].field_0) + 160], 12)
                _65758 = mem[64]
                mem[64] = mem[64] + 320
                mem[_65758] = stor12[mem[(32 * stor15[address(arg5)].field_0 + idx - 1) + (32 * stor13[address(arg5)].field_0) + 160]].field_0
                mem[_65758 + 32] = stor1[_65757]
                mem[_65758 + 64] = stor2[_65757]
                mem[_65758 + 96] = stor3[_65757]
                mem[_65758 + 128] = stor4[_65757]
                mem[_65758 + 160] = stor5[_65757]
                mem[_65758 + 192] = stor6[_65757]
                mem[_65758 + 224] = stor7[_65757].field_0
                mem[_65758 + 256] = bool(stor7[_65757].field_160)
                mem[_65758 + 288] = stor8[_65757]
                if idx >= mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]:
                    revert with 0, 50
                mem[(32 * idx) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192] = _65758
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
            if stor15[address(arg5)].field_0 - 1 > !1:
                revert with 0, 17
            if stor15[address(arg5)].field_0 - 1 > !1:
                revert with 0, 17
            if stor15[address(arg5)].field_0 < mem[(32 * stor13[address(arg5)].field_0) + 128]:
                _66457 = mem[64]
                mem[64] = mem[64] + 64
                mem[_66457] = 7
                mem[_66457 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                _66662 = mem[64]
                mem[mem[64]] = 96
                _66958 = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                mem[mem[64] + 96] = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                idx = 0
                s = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192
                t = mem[64] + 128
                while idx < _66958:
                    _68554 = mem[s]
                    mem[t] = mem[mem[s]]
                    mem[t + 32] = mem[_68554 + 32]
                    mem[t + 64] = mem[_68554 + 64]
                    mem[t + 96] = mem[_68554 + 96]
                    mem[t + 128] = mem[_68554 + 128]
                    mem[t + 160] = mem[_68554 + 172 len 20]
                    mem[t + 192] = mem[_68554 + 192]
                    mem[t + 224] = mem[_68554 + 236 len 20]
                    mem[t + 256] = bool(mem[_68554 + 256])
                    mem[t + 288] = mem[_68554 + 288]
                    idx = idx + 1
                    s = s + 32
                    t = t + 320
                    continue 
                mem[_66662 + 32] = stor15[address(arg5)].field_0
                mem[_66662 + 64] = (320 * _66958) + 128
                _69255 = mem[_66457]
                mem[_66662 + (320 * _66958) + 128] = mem[_66457]
                mem[_66662 + (320 * _66958) + 160 len ceil32(_69255)] = mem[_66457 + 32 len ceil32(_69255)]
                if ceil32(_69255) > _69255:
                    mem[_66662 + (320 * _66958) + _69255 + 160] = 0
                return memory
                  from mem[64]
                   len ceil32(_69255) + _66662 + (320 * _66958) + -mem[64] + 160
            _66458 = mem[64]
            mem[64] = mem[64] + 64
            mem[_66458] = 4
            mem[_66458 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
            _66663 = mem[64]
            mem[mem[64]] = 96
            _66959 = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
            mem[mem[64] + 96] = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
            idx = 0
            s = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192
            t = mem[64] + 128
            while idx < _66959:
                _68561 = mem[s]
                mem[t] = mem[mem[s]]
                mem[t + 32] = mem[_68561 + 32]
                mem[t + 64] = mem[_68561 + 64]
                mem[t + 96] = mem[_68561 + 96]
                mem[t + 128] = mem[_68561 + 128]
                mem[t + 160] = mem[_68561 + 172 len 20]
                mem[t + 192] = mem[_68561 + 192]
                mem[t + 224] = mem[_68561 + 236 len 20]
                mem[t + 256] = bool(mem[_68561 + 256])
                mem[t + 288] = mem[_68561 + 288]
                idx = idx + 1
                s = s + 32
                t = t + 320
                continue 
            mem[_66663 + 32] = stor15[address(arg5)].field_0
            mem[_66663 + 64] = (320 * _66959) + 128
            _69256 = mem[_66458]
            mem[_66663 + (320 * _66959) + 128] = mem[_66458]
            mem[_66663 + (320 * _66959) + 160 len ceil32(_69256)] = mem[_66458 + 32 len ceil32(_69256)]
            if ceil32(_69256) > _69256:
                mem[_66663 + (320 * _66959) + _69256 + 160] = 0
            return memory
              from mem[64]
               len ceil32(_69256) + _66663 + (320 * _66959) + -mem[64] + 160
        if arg2 > test266151307():
            revert with 0, 65
        mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160] = arg2
        mem[64] = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 192
        if not arg2:
            idx = 0
            while idx < arg2:
                if stor15[address(arg5)].field_0 - 1 > !idx:
                    revert with 0, 17
                if stor15[address(arg5)].field_0 + idx - 1 >= mem[(32 * stor13[address(arg5)].field_0) + 128]:
                    revert with 0, 50
                mem[0] = mem[(32 * stor15[address(arg5)].field_0 + idx - 1) + (32 * stor13[address(arg5)].field_0) + 160]
                mem[32] = 12
                _50190 = sha3(mem[(32 * stor15[address(arg5)].field_0 + idx - 1) + (32 * stor13[address(arg5)].field_0) + 160], 12)
                _50191 = mem[64]
                mem[64] = mem[64] + 320
                mem[_50191] = stor12[mem[(32 * stor15[address(arg5)].field_0 + idx - 1) + (32 * stor13[address(arg5)].field_0) + 160]].field_0
                mem[_50191 + 32] = stor1[_50190]
                mem[_50191 + 64] = stor2[_50190]
                mem[_50191 + 96] = stor3[_50190]
                mem[_50191 + 128] = stor4[_50190]
                mem[_50191 + 160] = stor5[_50190]
                mem[_50191 + 192] = stor6[_50190]
                mem[_50191 + 224] = stor7[_50190].field_0
                mem[_50191 + 256] = bool(stor7[_50190].field_160)
                mem[_50191 + 288] = stor8[_50190]
                if idx >= mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]:
                    revert with 0, 50
                mem[(32 * idx) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192] = _50191
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
            if stor15[address(arg5)].field_0 - 1 > !arg2:
                revert with 0, 17
            if stor15[address(arg5)].field_0 - 1 > !arg2:
                revert with 0, 17
            if stor15[address(arg5)].field_0 + arg2 - 1 < mem[(32 * stor13[address(arg5)].field_0) + 128]:
                _51627 = mem[64]
                mem[64] = mem[64] + 64
                mem[_51627] = 7
                mem[_51627 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                _52289 = mem[64]
                mem[mem[64]] = 96
                _53097 = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                mem[mem[64] + 96] = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
                idx = 0
                s = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192
                t = mem[64] + 128
                while idx < _53097:
                    _58401 = mem[s]
                    mem[t] = mem[mem[s]]
                    mem[t + 32] = mem[_58401 + 32]
                    mem[t + 64] = mem[_58401 + 64]
                    mem[t + 96] = mem[_58401 + 96]
                    mem[t + 128] = mem[_58401 + 128]
                    mem[t + 160] = mem[_58401 + 172 len 20]
                    mem[t + 192] = mem[_58401 + 192]
                    mem[t + 224] = mem[_58401 + 236 len 20]
                    mem[t + 256] = bool(mem[_58401 + 256])
                    mem[t + 288] = mem[_58401 + 288]
                    idx = idx + 1
                    s = s + 32
                    t = t + 320
                    continue 
                mem[_52289 + 32] = stor15[address(arg5)].field_0 + arg2 - 1
                mem[_52289 + 64] = (320 * _53097) + 128
                _59968 = mem[_51627]
                mem[_52289 + (320 * _53097) + 128] = mem[_51627]
                mem[_52289 + (320 * _53097) + 160 len ceil32(_59968)] = mem[_51627 + 32 len ceil32(_59968)]
                var57001 = ceil32(_59968)
                if ceil32(_59968) > _59968:
                    mem[_52289 + (320 * _53097) + _59968 + 160] = 0
                return memory
                  from mem[64]
                   len ceil32(_59968) + _52289 + (320 * _53097) + -mem[64] + 160
            _51628 = mem[64]
            mem[64] = mem[64] + 64
            mem[_51628] = 4
            mem[_51628 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
            _52290 = mem[64]
            mem[mem[64]] = 96
            _53098 = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
            mem[mem[64] + 96] = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
            idx = 0
            s = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192
            t = mem[64] + 128
            while idx < _53098:
                _58408 = mem[s]
                mem[t] = mem[mem[s]]
                mem[t + 32] = mem[_58408 + 32]
                mem[t + 64] = mem[_58408 + 64]
                mem[t + 96] = mem[_58408 + 96]
                mem[t + 128] = mem[_58408 + 128]
                mem[t + 160] = mem[_58408 + 172 len 20]
                mem[t + 192] = mem[_58408 + 192]
                mem[t + 224] = mem[_58408 + 236 len 20]
                mem[t + 256] = bool(mem[_58408 + 256])
                mem[t + 288] = mem[_58408 + 288]
                idx = idx + 1
                s = s + 32
                t = t + 320
                continue 
            mem[_52290 + 32] = stor15[address(arg5)].field_0 + arg2 - 1
            mem[_52290 + 64] = (320 * _53098) + 128
            _59969 = mem[_51628]
            mem[_52290 + (320 * _53098) + 128] = mem[_51628]
            mem[_52290 + (320 * _53098) + 160 len ceil32(_59969)] = mem[_51628 + 32 len ceil32(_59969)]
            var57001 = ceil32(_59969)
            if ceil32(_59969) > _59969:
                mem[_52290 + (320 * _53098) + _59969 + 160] = 0
            return memory
              from mem[64]
               len ceil32(_59969) + _52290 + (320 * _53098) + -mem[64] + 160
        mem[64] = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 512
        mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 192] = 0
        mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224] = 0
        mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 256] = 0
        mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 288] = 0
        mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 320] = 0
        mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 352] = 0
        mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 384] = 0
        mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 416] = 0
        mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 448] = 0
        mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 480] = 0
        mem[var41001] = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 192
        s = var41001
        idx = var41002
        while idx - 1:
            mem[64] = mem[64] + 320
            mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 192] = 0
            mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224] = 0
            mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 256] = 0
            mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 288] = 0
            mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 320] = 0
            mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 352] = 0
            mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 384] = 0
            mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 416] = 0
            mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 448] = 0
            mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 480] = 0
            mem[s + 32] = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 192
            s = s + 32
            idx = idx - 1
            continue 
        idx = 0
        while idx < arg2:
            if stor15[address(arg5)].field_0 - 1 > !idx:
                revert with 0, 17
            if stor15[address(arg5)].field_0 + idx - 1 >= mem[(32 * stor13[address(arg5)].field_0) + 128]:
                revert with 0, 50
            mem[0] = mem[(32 * stor15[address(arg5)].field_0 + idx - 1) + (32 * stor13[address(arg5)].field_0) + 160]
            mem[32] = 12
            _65751 = sha3(mem[(32 * stor15[address(arg5)].field_0 + idx - 1) + (32 * stor13[address(arg5)].field_0) + 160], 12)
            _65752 = mem[64]
            mem[64] = mem[64] + 320
            mem[_65752] = stor12[mem[(32 * stor15[address(arg5)].field_0 + idx - 1) + (32 * stor13[address(arg5)].field_0) + 160]].field_0
            mem[_65752 + 32] = stor1[_65751]
            mem[_65752 + 64] = stor2[_65751]
            mem[_65752 + 96] = stor3[_65751]
            mem[_65752 + 128] = stor4[_65751]
            mem[_65752 + 160] = stor5[_65751]
            mem[_65752 + 192] = stor6[_65751]
            mem[_65752 + 224] = stor7[_65751].field_0
            mem[_65752 + 256] = bool(stor7[_65751].field_160)
            mem[_65752 + 288] = stor8[_65751]
            if idx >= mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]:
                revert with 0, 50
            mem[(32 * idx) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192] = _65752
            if idx == -1:
                revert with 0, 17
            idx = idx + 1
            continue 
        if stor15[address(arg5)].field_0 - 1 > !arg2:
            revert with 0, 17
        if stor15[address(arg5)].field_0 - 1 > !arg2:
            revert with 0, 17
        if stor15[address(arg5)].field_0 + arg2 - 1 < mem[(32 * stor13[address(arg5)].field_0) + 128]:
            _66455 = mem[64]
            mem[64] = mem[64] + 64
            mem[_66455] = 7
            mem[_66455 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
            _66660 = mem[64]
            mem[mem[64]] = 96
            _66956 = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
            mem[mem[64] + 96] = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
            idx = 0
            s = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192
            t = mem[64] + 128
            while idx < _66956:
                _68540 = mem[s]
                mem[t] = mem[mem[s]]
                mem[t + 32] = mem[_68540 + 32]
                mem[t + 64] = mem[_68540 + 64]
                mem[t + 96] = mem[_68540 + 96]
                mem[t + 128] = mem[_68540 + 128]
                mem[t + 160] = mem[_68540 + 172 len 20]
                mem[t + 192] = mem[_68540 + 192]
                mem[t + 224] = mem[_68540 + 236 len 20]
                mem[t + 256] = bool(mem[_68540 + 256])
                mem[t + 288] = mem[_68540 + 288]
                idx = idx + 1
                s = s + 32
                t = t + 320
                continue 
            mem[_66660 + 32] = stor15[address(arg5)].field_0 + arg2 - 1
            mem[_66660 + 64] = (320 * _66956) + 128
            _69253 = mem[_66455]
            mem[_66660 + (320 * _66956) + 128] = mem[_66455]
            mem[_66660 + (320 * _66956) + 160 len ceil32(_69253)] = mem[_66455 + 32 len ceil32(_69253)]
            var64001 = ceil32(_69253)
            if ceil32(_69253) > _69253:
                mem[_66660 + (320 * _66956) + _69253 + 160] = 0
            return memory
              from mem[64]
               len ceil32(_69253) + _66660 + (320 * _66956) + -mem[64] + 160
        _66456 = mem[64]
        mem[64] = mem[64] + 64
        mem[_66456] = 4
        mem[_66456 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
        _66661 = mem[64]
        mem[mem[64]] = 96
        _66957 = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
        mem[mem[64] + 96] = mem[(32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160]
        idx = 0
        s = (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192
        t = mem[64] + 128
        while idx < _66957:
            _68547 = mem[s]
            mem[t] = mem[mem[s]]
            mem[t + 32] = mem[_68547 + 32]
            mem[t + 64] = mem[_68547 + 64]
            mem[t + 96] = mem[_68547 + 96]
            mem[t + 128] = mem[_68547 + 128]
            mem[t + 160] = mem[_68547 + 172 len 20]
            mem[t + 192] = mem[_68547 + 192]
            mem[t + 224] = mem[_68547 + 236 len 20]
            mem[t + 256] = bool(mem[_68547 + 256])
            mem[t + 288] = mem[_68547 + 288]
            idx = idx + 1
            s = s + 32
            t = t + 320
            continue 
        mem[_66661 + 32] = stor15[address(arg5)].field_0 + arg2 - 1
        mem[_66661 + 64] = (320 * _66957) + 128
        _69254 = mem[_66456]
        mem[_66661 + (320 * _66957) + 128] = mem[_66456]
        mem[_66661 + (320 * _66957) + 160 len ceil32(_69254)] = mem[_66456 + 32 len ceil32(_69254)]
        var64001 = ceil32(_69254)
        if ceil32(_69254) > _69254:
            mem[_66661 + (320 * _66957) + _69254 + 160] = 0
        return memory
          from mem[64]
           len ceil32(_69254) + _66661 + (320 * _66957) + -mem[64] + 160
    mem[96] = stor11.length
    if not stor11.length:
        if arg4 != 1:
            if arg4 != 2:
                if not stor11.length:
                    mem[(32 * stor11.length) + 128] = 0
                    mem[64] = (32 * stor11.length) + 224
                    mem[(32 * stor11.length) + 160] = 4
                    mem[(32 * stor11.length) + 192] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                    mem[(32 * stor11.length) + 224] = 96
                    mem[(32 * stor11.length) + 320] = 0
                    idx = 0
                    s = (32 * stor11.length) + 160
                    t = (32 * stor11.length) + 352
                    while idx < mem[(32 * stor11.length) + 128]:
                        _5757 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_5757 + 32]
                        mem[t + 64] = mem[_5757 + 64]
                        mem[t + 96] = mem[_5757 + 96]
                        mem[t + 128] = mem[_5757 + 128]
                        mem[t + 160] = mem[_5757 + 172 len 20]
                        mem[t + 192] = mem[_5757 + 192]
                        mem[t + 224] = mem[_5757 + 236 len 20]
                        mem[t + 256] = bool(mem[_5757 + 256])
                        mem[t + 288] = mem[_5757 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[(32 * stor11.length) + 256] = 0
                    mem[(32 * stor11.length) + 288] = 128
                    mem[(32 * stor11.length) + 352] = mem[(32 * stor11.length) + 160]
                    mem[(32 * stor11.length) + 384 len ceil32(mem[(32 * stor11.length) + 160])] = mem[(32 * stor11.length) + 192 len ceil32(mem[(32 * stor11.length) + 160])]
                    if ceil32(mem[(32 * stor11.length) + 160]) > mem[(32 * stor11.length) + 160]:
                        mem[(32 * stor11.length) + mem[(32 * stor11.length) + 160] + 384] = 0
                    return memory
                      from mem[64]
                       len ceil32(mem[(32 * stor11.length) + 160]) + (32 * stor11.length) + -mem[64] + 384
                if arg1 < stor11.length:
                    if arg3:
                        if arg2 <= arg1:
                            if arg2 > test266151307():
                                revert with 0, 65
                            mem[(32 * stor11.length) + 128] = arg2
                            mem[64] = (32 * stor11.length) + (32 * arg2) + 160
                            if not arg2:
                                idx = 0
                                while idx < arg2:
                                    if arg1 < idx:
                                        revert with 0, 17
                                    if arg1 - idx >= mem[96]:
                                        revert with 0, 50
                                    mem[0] = mem[(32 * arg1 - idx) + 128]
                                    mem[32] = 12
                                    _6148 = sha3(mem[(32 * arg1 - idx) + 128], 12)
                                    _6149 = mem[64]
                                    mem[64] = mem[64] + 320
                                    mem[_6149] = stor12[mem[(32 * arg1 - idx) + 128]].field_0
                                    mem[_6149 + 32] = stor1[_6148]
                                    mem[_6149 + 64] = stor2[_6148]
                                    mem[_6149 + 96] = stor3[_6148]
                                    mem[_6149 + 128] = stor4[_6148]
                                    mem[_6149 + 160] = stor5[_6148]
                                    mem[_6149 + 192] = stor6[_6148]
                                    mem[_6149 + 224] = stor7[_6148].field_0
                                    mem[_6149 + 256] = bool(stor7[_6148].field_160)
                                    mem[_6149 + 288] = stor8[_6148]
                                    if idx >= mem[(32 * stor11.length) + 128]:
                                        revert with 0, 50
                                    mem[(32 * idx) + (32 * stor11.length) + 160] = _6149
                                    if idx == -1:
                                        revert with 0, 17
                                    idx = idx + 1
                                    continue 
                                if arg1 < arg2:
                                    _5841 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_5841] = 4
                                    mem[_5841 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                                    _5929 = mem[64]
                                    mem[mem[64]] = 96
                                    _6145 = mem[(32 * stor11.length) + 128]
                                    mem[mem[64] + 96] = mem[(32 * stor11.length) + 128]
                                    idx = 0
                                    s = (32 * stor11.length) + 160
                                    t = mem[64] + 128
                                    while idx < _6145:
                                        _11683 = mem[s]
                                        mem[t] = mem[mem[s]]
                                        mem[t + 32] = mem[_11683 + 32]
                                        mem[t + 64] = mem[_11683 + 64]
                                        mem[t + 96] = mem[_11683 + 96]
                                        mem[t + 128] = mem[_11683 + 128]
                                        mem[t + 160] = mem[_11683 + 172 len 20]
                                        mem[t + 192] = mem[_11683 + 192]
                                        mem[t + 224] = mem[_11683 + 236 len 20]
                                        mem[t + 256] = bool(mem[_11683 + 256])
                                        mem[t + 288] = mem[_11683 + 288]
                                        idx = idx + 1
                                        s = s + 32
                                        t = t + 320
                                        continue 
                                    mem[_5929 + 32] = 0
                                    mem[_5929 + 64] = (320 * _6145) + 128
                                    _12208 = mem[_5841]
                                    mem[_5929 + (320 * _6145) + 128] = mem[_5841]
                                    mem[_5929 + (320 * _6145) + 160 len ceil32(_12208)] = mem[_5841 + 32 len ceil32(_12208)]
                                    if ceil32(_12208) > _12208:
                                        mem[_5929 + (320 * _6145) + _12208 + 160] = 0
                                    return memory
                                      from mem[64]
                                       len ceil32(_12208) + _5929 + (320 * _6145) + -mem[64] + 160
                                _6146 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_6146] = 7
                                mem[_6146 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                                _6500 = mem[64]
                                mem[mem[64]] = 96
                                _6714 = mem[(32 * stor11.length) + 128]
                                mem[mem[64] + 96] = mem[(32 * stor11.length) + 128]
                                idx = 0
                                s = (32 * stor11.length) + 160
                                t = mem[64] + 128
                                while idx < _6714:
                                    _11690 = mem[s]
                                    mem[t] = mem[mem[s]]
                                    mem[t + 32] = mem[_11690 + 32]
                                    mem[t + 64] = mem[_11690 + 64]
                                    mem[t + 96] = mem[_11690 + 96]
                                    mem[t + 128] = mem[_11690 + 128]
                                    mem[t + 160] = mem[_11690 + 172 len 20]
                                    mem[t + 192] = mem[_11690 + 192]
                                    mem[t + 224] = mem[_11690 + 236 len 20]
                                    mem[t + 256] = bool(mem[_11690 + 256])
                                    mem[t + 288] = mem[_11690 + 288]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 320
                                    continue 
                                mem[_6500 + 32] = arg1 - arg2
                                mem[_6500 + 64] = (320 * _6714) + 128
                                _12209 = mem[_6146]
                                mem[_6500 + (320 * _6714) + 128] = mem[_6146]
                                mem[_6500 + (320 * _6714) + 160 len ceil32(_12209)] = mem[_6146 + 32 len ceil32(_12209)]
                                if ceil32(_12209) > _12209:
                                    mem[_6500 + (320 * _6714) + _12209 + 160] = 0
                                return memory
                                  from mem[64]
                                   len ceil32(_12209) + _6500 + (320 * _6714) + -mem[64] + 160
                            mem[64] = (32 * stor11.length) + (32 * arg2) + 480
                            mem[(32 * stor11.length) + (32 * arg2) + 160] = 0
                            mem[(32 * stor11.length) + (32 * arg2) + 192] = 0
                            mem[(32 * stor11.length) + (32 * arg2) + 224] = 0
                            mem[(32 * stor11.length) + (32 * arg2) + 256] = 0
                            mem[(32 * stor11.length) + (32 * arg2) + 288] = 0
                            mem[(32 * stor11.length) + (32 * arg2) + 320] = 0
                            mem[(32 * stor11.length) + (32 * arg2) + 352] = 0
                            mem[(32 * stor11.length) + (32 * arg2) + 384] = 0
                            mem[(32 * stor11.length) + (32 * arg2) + 416] = 0
                            mem[(32 * stor11.length) + (32 * arg2) + 448] = 0
                            mem[var24001] = (32 * stor11.length) + (32 * arg2) + 160
                            s = var24001
                            idx = var24002
                            while idx - 1:
                                mem[64] = mem[64] + 320
                                mem[(32 * stor11.length) + (32 * arg2) + 160] = 0
                                mem[(32 * stor11.length) + (32 * arg2) + 192] = 0
                                mem[(32 * stor11.length) + (32 * arg2) + 224] = 0
                                mem[(32 * stor11.length) + (32 * arg2) + 256] = 0
                                mem[(32 * stor11.length) + (32 * arg2) + 288] = 0
                                mem[(32 * stor11.length) + (32 * arg2) + 320] = 0
                                mem[(32 * stor11.length) + (32 * arg2) + 352] = 0
                                mem[(32 * stor11.length) + (32 * arg2) + 384] = 0
                                mem[(32 * stor11.length) + (32 * arg2) + 416] = 0
                                mem[(32 * stor11.length) + (32 * arg2) + 448] = 0
                                mem[s + 32] = (32 * stor11.length) + (32 * arg2) + 160
                                s = s + 32
                                idx = idx - 1
                                continue 
                            idx = 0
                            while idx < arg2:
                                if arg1 < idx:
                                    revert with 0, 17
                                if arg1 - idx >= mem[96]:
                                    revert with 0, 50
                                mem[0] = mem[(32 * arg1 - idx) + 128]
                                mem[32] = 12
                                _25593 = sha3(mem[(32 * arg1 - idx) + 128], 12)
                                _25594 = mem[64]
                                mem[64] = mem[64] + 320
                                mem[_25594] = stor12[mem[(32 * arg1 - idx) + 128]].field_0
                                mem[_25594 + 32] = stor1[_25593]
                                mem[_25594 + 64] = stor2[_25593]
                                mem[_25594 + 96] = stor3[_25593]
                                mem[_25594 + 128] = stor4[_25593]
                                mem[_25594 + 160] = stor5[_25593]
                                mem[_25594 + 192] = stor6[_25593]
                                mem[_25594 + 224] = stor7[_25593].field_0
                                mem[_25594 + 256] = bool(stor7[_25593].field_160)
                                mem[_25594 + 288] = stor8[_25593]
                                if idx >= mem[(32 * stor11.length) + 128]:
                                    revert with 0, 50
                                mem[(32 * idx) + (32 * stor11.length) + 160] = _25594
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                continue 
                            if arg1 < arg2:
                                _24740 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_24740] = 4
                                mem[_24740 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                                _24986 = mem[64]
                                mem[mem[64]] = 96
                                _25590 = mem[(32 * stor11.length) + 128]
                                mem[mem[64] + 96] = mem[(32 * stor11.length) + 128]
                                idx = 0
                                s = (32 * stor11.length) + 160
                                t = mem[64] + 128
                                while idx < _25590:
                                    _36597 = mem[s]
                                    mem[t] = mem[mem[s]]
                                    mem[t + 32] = mem[_36597 + 32]
                                    mem[t + 64] = mem[_36597 + 64]
                                    mem[t + 96] = mem[_36597 + 96]
                                    mem[t + 128] = mem[_36597 + 128]
                                    mem[t + 160] = mem[_36597 + 172 len 20]
                                    mem[t + 192] = mem[_36597 + 192]
                                    mem[t + 224] = mem[_36597 + 236 len 20]
                                    mem[t + 256] = bool(mem[_36597 + 256])
                                    mem[t + 288] = mem[_36597 + 288]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 320
                                    continue 
                                mem[_24986 + 32] = 0
                                mem[_24986 + 64] = (320 * _25590) + 128
                                _38082 = mem[_24740]
                                mem[_24986 + (320 * _25590) + 128] = mem[_24740]
                                mem[_24986 + (320 * _25590) + 160 len ceil32(_38082)] = mem[_24740 + 32 len ceil32(_38082)]
                                if ceil32(_38082) > _38082:
                                    mem[_24986 + (320 * _25590) + _38082 + 160] = 0
                                return memory
                                  from mem[64]
                                   len ceil32(_38082) + _24986 + (320 * _25590) + -mem[64] + 160
                            _25591 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_25591] = 7
                            mem[_25591 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                            _26475 = mem[64]
                            mem[mem[64]] = 96
                            _27033 = mem[(32 * stor11.length) + 128]
                            mem[mem[64] + 96] = mem[(32 * stor11.length) + 128]
                            idx = 0
                            s = (32 * stor11.length) + 160
                            t = mem[64] + 128
                            while idx < _27033:
                                _36604 = mem[s]
                                mem[t] = mem[mem[s]]
                                mem[t + 32] = mem[_36604 + 32]
                                mem[t + 64] = mem[_36604 + 64]
                                mem[t + 96] = mem[_36604 + 96]
                                mem[t + 128] = mem[_36604 + 128]
                                mem[t + 160] = mem[_36604 + 172 len 20]
                                mem[t + 192] = mem[_36604 + 192]
                                mem[t + 224] = mem[_36604 + 236 len 20]
                                mem[t + 256] = bool(mem[_36604 + 256])
                                mem[t + 288] = mem[_36604 + 288]
                                idx = idx + 1
                                s = s + 32
                                t = t + 320
                                continue 
                            mem[_26475 + 32] = arg1 - arg2
                            mem[_26475 + 64] = (320 * _27033) + 128
                            _38083 = mem[_25591]
                            mem[_26475 + (320 * _27033) + 128] = mem[_25591]
                            mem[_26475 + (320 * _27033) + 160 len ceil32(_38083)] = mem[_25591 + 32 len ceil32(_38083)]
                            if ceil32(_38083) > _38083:
                                mem[_26475 + (320 * _27033) + _38083 + 160] = 0
                            return memory
                              from mem[64]
                               len ceil32(_38083) + _26475 + (320 * _27033) + -mem[64] + 160
                        if 1 > !arg1:
                            revert with 0, 17
                        if arg1 + 1 > test266151307():
                            revert with 0, 65
                        mem[(32 * stor11.length) + 128] = arg1 + 1
                        mem[64] = (32 * stor11.length) + (32 * arg1 + 1) + 160
                        if not arg1 + 1:
                            idx = 0
                            while idx < arg1 + 1:
                                if arg1 < idx:
                                    revert with 0, 17
                                if arg1 - idx >= mem[96]:
                                    revert with 0, 50
                                mem[0] = mem[(32 * arg1 - idx) + 128]
                                mem[32] = 12
                                _6154 = sha3(mem[(32 * arg1 - idx) + 128], 12)
                                _6155 = mem[64]
                                mem[64] = mem[64] + 320
                                mem[_6155] = stor12[mem[(32 * arg1 - idx) + 128]].field_0
                                mem[_6155 + 32] = stor1[_6154]
                                mem[_6155 + 64] = stor2[_6154]
                                mem[_6155 + 96] = stor3[_6154]
                                mem[_6155 + 128] = stor4[_6154]
                                mem[_6155 + 160] = stor5[_6154]
                                mem[_6155 + 192] = stor6[_6154]
                                mem[_6155 + 224] = stor7[_6154].field_0
                                mem[_6155 + 256] = bool(stor7[_6154].field_160)
                                mem[_6155 + 288] = stor8[_6154]
                                if idx >= mem[(32 * stor11.length) + 128]:
                                    revert with 0, 50
                                mem[(32 * idx) + (32 * stor11.length) + 160] = _6155
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                continue 
                            if arg1 < arg1 + 1:
                                _5842 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_5842] = 4
                                mem[_5842 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                                _5931 = mem[64]
                                mem[mem[64]] = 96
                                _6151 = mem[(32 * stor11.length) + 128]
                                mem[mem[64] + 96] = mem[(32 * stor11.length) + 128]
                                idx = 0
                                s = (32 * stor11.length) + 160
                                t = mem[64] + 128
                                while idx < _6151:
                                    _11697 = mem[s]
                                    mem[t] = mem[mem[s]]
                                    mem[t + 32] = mem[_11697 + 32]
                                    mem[t + 64] = mem[_11697 + 64]
                                    mem[t + 96] = mem[_11697 + 96]
                                    mem[t + 128] = mem[_11697 + 128]
                                    mem[t + 160] = mem[_11697 + 172 len 20]
                                    mem[t + 192] = mem[_11697 + 192]
                                    mem[t + 224] = mem[_11697 + 236 len 20]
                                    mem[t + 256] = bool(mem[_11697 + 256])
                                    mem[t + 288] = mem[_11697 + 288]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 320
                                    continue 
                                mem[_5931 + 32] = 0
                                mem[_5931 + 64] = (320 * _6151) + 128
                                _12210 = mem[_5842]
                                mem[_5931 + (320 * _6151) + 128] = mem[_5842]
                                mem[_5931 + (320 * _6151) + 160 len ceil32(_12210)] = mem[_5842 + 32 len ceil32(_12210)]
                                if ceil32(_12210) > _12210:
                                    mem[_5931 + (320 * _6151) + _12210 + 160] = 0
                                return memory
                                  from mem[64]
                                   len ceil32(_12210) + _5931 + (320 * _6151) + -mem[64] + 160
                            _6152 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_6152] = 7
                            mem[_6152 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                            _6509 = mem[64]
                            mem[mem[64]] = 96
                            _6716 = mem[(32 * stor11.length) + 128]
                            mem[mem[64] + 96] = mem[(32 * stor11.length) + 128]
                            idx = 0
                            s = (32 * stor11.length) + 160
                            t = mem[64] + 128
                            while idx < _6716:
                                _11704 = mem[s]
                                mem[t] = mem[mem[s]]
                                mem[t + 32] = mem[_11704 + 32]
                                mem[t + 64] = mem[_11704 + 64]
                                mem[t + 96] = mem[_11704 + 96]
                                mem[t + 128] = mem[_11704 + 128]
                                mem[t + 160] = mem[_11704 + 172 len 20]
                                mem[t + 192] = mem[_11704 + 192]
                                mem[t + 224] = mem[_11704 + 236 len 20]
                                mem[t + 256] = bool(mem[_11704 + 256])
                                mem[t + 288] = mem[_11704 + 288]
                                idx = idx + 1
                                s = s + 32
                                t = t + 320
                                continue 
                            mem[_6509 + 32] = -1
                            mem[_6509 + 64] = (320 * _6716) + 128
                            _12211 = mem[_6152]
                            mem[_6509 + (320 * _6716) + 128] = mem[_6152]
                            mem[_6509 + (320 * _6716) + 160 len ceil32(_12211)] = mem[_6152 + 32 len ceil32(_12211)]
                            if ceil32(_12211) > _12211:
                                mem[_6509 + (320 * _6716) + _12211 + 160] = 0
                            return memory
                              from mem[64]
                               len ceil32(_12211) + _6509 + (320 * _6716) + -mem[64] + 160
                        mem[64] = (32 * stor11.length) + (32 * arg1 + 1) + 480
                        mem[(32 * stor11.length) + (32 * arg1 + 1) + 160] = 0
                        mem[(32 * stor11.length) + (32 * arg1 + 1) + 192] = 0
                        mem[(32 * stor11.length) + (32 * arg1 + 1) + 224] = 0
                        mem[(32 * stor11.length) + (32 * arg1 + 1) + 256] = 0
                        mem[(32 * stor11.length) + (32 * arg1 + 1) + 288] = 0
                        mem[(32 * stor11.length) + (32 * arg1 + 1) + 320] = 0
                        mem[(32 * stor11.length) + (32 * arg1 + 1) + 352] = 0
                        mem[(32 * stor11.length) + (32 * arg1 + 1) + 384] = 0
                        mem[(32 * stor11.length) + (32 * arg1 + 1) + 416] = 0
                        mem[(32 * stor11.length) + (32 * arg1 + 1) + 448] = 0
                        mem[var28001] = (32 * stor11.length) + (32 * arg1 + 1) + 160
                        s = var28001
                        idx = var28002
                        while idx - 1:
                            mem[64] = mem[64] + 320
                            mem[(32 * stor11.length) + (32 * arg1 + 1) + 160] = 0
                            mem[(32 * stor11.length) + (32 * arg1 + 1) + 192] = 0
                            mem[(32 * stor11.length) + (32 * arg1 + 1) + 224] = 0
                            mem[(32 * stor11.length) + (32 * arg1 + 1) + 256] = 0
                            mem[(32 * stor11.length) + (32 * arg1 + 1) + 288] = 0
                            mem[(32 * stor11.length) + (32 * arg1 + 1) + 320] = 0
                            mem[(32 * stor11.length) + (32 * arg1 + 1) + 352] = 0
                            mem[(32 * stor11.length) + (32 * arg1 + 1) + 384] = 0
                            mem[(32 * stor11.length) + (32 * arg1 + 1) + 416] = 0
                            mem[(32 * stor11.length) + (32 * arg1 + 1) + 448] = 0
                            mem[s + 32] = (32 * stor11.length) + (32 * arg1 + 1) + 160
                            s = s + 32
                            idx = idx - 1
                            continue 
                        idx = 0
                        while idx < arg1 + 1:
                            if arg1 < idx:
                                revert with 0, 17
                            if arg1 - idx >= mem[96]:
                                revert with 0, 50
                            mem[0] = mem[(32 * arg1 - idx) + 128]
                            mem[32] = 12
                            _25601 = sha3(mem[(32 * arg1 - idx) + 128], 12)
                            _25602 = mem[64]
                            mem[64] = mem[64] + 320
                            mem[_25602] = stor12[mem[(32 * arg1 - idx) + 128]].field_0
                            mem[_25602 + 32] = stor1[_25601]
                            mem[_25602 + 64] = stor2[_25601]
                            mem[_25602 + 96] = stor3[_25601]
                            mem[_25602 + 128] = stor4[_25601]
                            mem[_25602 + 160] = stor5[_25601]
                            mem[_25602 + 192] = stor6[_25601]
                            mem[_25602 + 224] = stor7[_25601].field_0
                            mem[_25602 + 256] = bool(stor7[_25601].field_160)
                            mem[_25602 + 288] = stor8[_25601]
                            if idx >= mem[(32 * stor11.length) + 128]:
                                revert with 0, 50
                            mem[(32 * idx) + (32 * stor11.length) + 160] = _25602
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            continue 
                        if arg1 < arg1 + 1:
                            _24741 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_24741] = 4
                            mem[_24741 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                            _24990 = mem[64]
                            mem[mem[64]] = 96
                            _25598 = mem[(32 * stor11.length) + 128]
                            mem[mem[64] + 96] = mem[(32 * stor11.length) + 128]
                            idx = 0
                            s = (32 * stor11.length) + 160
                            t = mem[64] + 128
                            while idx < _25598:
                                _36611 = mem[s]
                                mem[t] = mem[mem[s]]
                                mem[t + 32] = mem[_36611 + 32]
                                mem[t + 64] = mem[_36611 + 64]
                                mem[t + 96] = mem[_36611 + 96]
                                mem[t + 128] = mem[_36611 + 128]
                                mem[t + 160] = mem[_36611 + 172 len 20]
                                mem[t + 192] = mem[_36611 + 192]
                                mem[t + 224] = mem[_36611 + 236 len 20]
                                mem[t + 256] = bool(mem[_36611 + 256])
                                mem[t + 288] = mem[_36611 + 288]
                                idx = idx + 1
                                s = s + 32
                                t = t + 320
                                continue 
                            mem[_24990 + 32] = 0
                            mem[_24990 + 64] = (320 * _25598) + 128
                            _38084 = mem[_24741]
                            mem[_24990 + (320 * _25598) + 128] = mem[_24741]
                            mem[_24990 + (320 * _25598) + 160 len ceil32(_38084)] = mem[_24741 + 32 len ceil32(_38084)]
                            if ceil32(_38084) > _38084:
                                mem[_24990 + (320 * _25598) + _38084 + 160] = 0
                            return memory
                              from mem[64]
                               len ceil32(_38084) + _24990 + (320 * _25598) + -mem[64] + 160
                        _25599 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_25599] = 7
                        mem[_25599 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                        _26483 = mem[64]
                        mem[mem[64]] = 96
                        _27035 = mem[(32 * stor11.length) + 128]
                        mem[mem[64] + 96] = mem[(32 * stor11.length) + 128]
                        idx = 0
                        s = (32 * stor11.length) + 160
                        t = mem[64] + 128
                        while idx < _27035:
                            _36618 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_36618 + 32]
                            mem[t + 64] = mem[_36618 + 64]
                            mem[t + 96] = mem[_36618 + 96]
                            mem[t + 128] = mem[_36618 + 128]
                            mem[t + 160] = mem[_36618 + 172 len 20]
                            mem[t + 192] = mem[_36618 + 192]
                            mem[t + 224] = mem[_36618 + 236 len 20]
                            mem[t + 256] = bool(mem[_36618 + 256])
                            mem[t + 288] = mem[_36618 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_26483 + 32] = -1
                        mem[_26483 + 64] = (320 * _27035) + 128
                        _38085 = mem[_25599]
                        mem[_26483 + (320 * _27035) + 128] = mem[_25599]
                        mem[_26483 + (320 * _27035) + 160 len ceil32(_38085)] = mem[_25599 + 32 len ceil32(_38085)]
                        if ceil32(_38085) > _38085:
                            mem[_26483 + (320 * _27035) + _38085 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_38085) + _26483 + (320 * _27035) + -mem[64] + 160
                    if stor11.length < arg1:
                        revert with 0, 17
                    if arg2 <= stor11.length - arg1:
                        if arg2 > test266151307():
                            revert with 0, 65
                        mem[(32 * stor11.length) + 128] = arg2
                        mem[64] = (32 * stor11.length) + (32 * arg2) + 160
                        if not arg2:
                            idx = 0
                            while idx < arg2:
                                if arg1 > !idx:
                                    revert with 0, 17
                                if arg1 + idx >= mem[96]:
                                    revert with 0, 50
                                mem[0] = mem[(32 * arg1 + idx) + 128]
                                mem[32] = 12
                                _6158 = sha3(mem[(32 * arg1 + idx) + 128], 12)
                                _6159 = mem[64]
                                mem[64] = mem[64] + 320
                                mem[_6159] = stor12[mem[(32 * arg1 + idx) + 128]].field_0
                                mem[_6159 + 32] = stor1[_6158]
                                mem[_6159 + 64] = stor2[_6158]
                                mem[_6159 + 96] = stor3[_6158]
                                mem[_6159 + 128] = stor4[_6158]
                                mem[_6159 + 160] = stor5[_6158]
                                mem[_6159 + 192] = stor6[_6158]
                                mem[_6159 + 224] = stor7[_6158].field_0
                                mem[_6159 + 256] = bool(stor7[_6158].field_160)
                                mem[_6159 + 288] = stor8[_6158]
                                if idx >= mem[(32 * stor11.length) + 128]:
                                    revert with 0, 50
                                mem[(32 * idx) + (32 * stor11.length) + 160] = _6159
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                continue 
                            if arg1 > !arg2:
                                revert with 0, 17
                            if arg1 > !arg2:
                                revert with 0, 17
                            if arg1 + arg2 < mem[96]:
                                _6717 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_6717] = 7
                                mem[_6717 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                                _7289 = mem[64]
                                mem[mem[64]] = 96
                                _7649 = mem[(32 * stor11.length) + 128]
                                mem[mem[64] + 96] = mem[(32 * stor11.length) + 128]
                                idx = 0
                                s = (32 * stor11.length) + 160
                                t = mem[64] + 128
                                while idx < _7649:
                                    _11711 = mem[s]
                                    mem[t] = mem[mem[s]]
                                    mem[t + 32] = mem[_11711 + 32]
                                    mem[t + 64] = mem[_11711 + 64]
                                    mem[t + 96] = mem[_11711 + 96]
                                    mem[t + 128] = mem[_11711 + 128]
                                    mem[t + 160] = mem[_11711 + 172 len 20]
                                    mem[t + 192] = mem[_11711 + 192]
                                    mem[t + 224] = mem[_11711 + 236 len 20]
                                    mem[t + 256] = bool(mem[_11711 + 256])
                                    mem[t + 288] = mem[_11711 + 288]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 320
                                    continue 
                                mem[_7289 + 32] = arg1 + arg2
                                mem[_7289 + 64] = (320 * _7649) + 128
                                _12212 = mem[_6717]
                                mem[_7289 + (320 * _7649) + 128] = mem[_6717]
                                mem[_7289 + (320 * _7649) + 160 len ceil32(_12212)] = mem[_6717 + 32 len ceil32(_12212)]
                                if ceil32(_12212) > _12212:
                                    mem[_7289 + (320 * _7649) + _12212 + 160] = 0
                                return memory
                                  from mem[64]
                                   len ceil32(_12212) + _7289 + (320 * _7649) + -mem[64] + 160
                            _6718 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_6718] = 4
                            mem[_6718 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                            _7290 = mem[64]
                            mem[mem[64]] = 96
                            _7650 = mem[(32 * stor11.length) + 128]
                            mem[mem[64] + 96] = mem[(32 * stor11.length) + 128]
                            idx = 0
                            s = (32 * stor11.length) + 160
                            t = mem[64] + 128
                            while idx < _7650:
                                _11718 = mem[s]
                                mem[t] = mem[mem[s]]
                                mem[t + 32] = mem[_11718 + 32]
                                mem[t + 64] = mem[_11718 + 64]
                                mem[t + 96] = mem[_11718 + 96]
                                mem[t + 128] = mem[_11718 + 128]
                                mem[t + 160] = mem[_11718 + 172 len 20]
                                mem[t + 192] = mem[_11718 + 192]
                                mem[t + 224] = mem[_11718 + 236 len 20]
                                mem[t + 256] = bool(mem[_11718 + 256])
                                mem[t + 288] = mem[_11718 + 288]
                                idx = idx + 1
                                s = s + 32
                                t = t + 320
                                continue 
                            mem[_7290 + 32] = arg1 + arg2
                            mem[_7290 + 64] = (320 * _7650) + 128
                            _12213 = mem[_6718]
                            mem[_7290 + (320 * _7650) + 128] = mem[_6718]
                            mem[_7290 + (320 * _7650) + 160 len ceil32(_12213)] = mem[_6718 + 32 len ceil32(_12213)]
                            if ceil32(_12213) > _12213:
                                mem[_7290 + (320 * _7650) + _12213 + 160] = 0
                            return memory
                              from mem[64]
                               len ceil32(_12213) + _7290 + (320 * _7650) + -mem[64] + 160
                        mem[64] = (32 * stor11.length) + (32 * arg2) + 480
                        mem[(32 * stor11.length) + (32 * arg2) + 160] = 0
                        mem[(32 * stor11.length) + (32 * arg2) + 192] = 0
                        mem[(32 * stor11.length) + (32 * arg2) + 224] = 0
                        mem[(32 * stor11.length) + (32 * arg2) + 256] = 0
                        mem[(32 * stor11.length) + (32 * arg2) + 288] = 0
                        mem[(32 * stor11.length) + (32 * arg2) + 320] = 0
                        mem[(32 * stor11.length) + (32 * arg2) + 352] = 0
                        mem[(32 * stor11.length) + (32 * arg2) + 384] = 0
                        mem[(32 * stor11.length) + (32 * arg2) + 416] = 0
                        mem[(32 * stor11.length) + (32 * arg2) + 448] = 0
                        mem[var27001] = (32 * stor11.length) + (32 * arg2) + 160
                        s = var27001
                        idx = var27002
                        while idx - 1:
                            mem[64] = mem[64] + 320
                            mem[(32 * stor11.length) + (32 * arg2) + 160] = 0
                            mem[(32 * stor11.length) + (32 * arg2) + 192] = 0
                            mem[(32 * stor11.length) + (32 * arg2) + 224] = 0
                            mem[(32 * stor11.length) + (32 * arg2) + 256] = 0
                            mem[(32 * stor11.length) + (32 * arg2) + 288] = 0
                            mem[(32 * stor11.length) + (32 * arg2) + 320] = 0
                            mem[(32 * stor11.length) + (32 * arg2) + 352] = 0
                            mem[(32 * stor11.length) + (32 * arg2) + 384] = 0
                            mem[(32 * stor11.length) + (32 * arg2) + 416] = 0
                            mem[(32 * stor11.length) + (32 * arg2) + 448] = 0
                            mem[s + 32] = (32 * stor11.length) + (32 * arg2) + 160
                            s = s + 32
                            idx = idx - 1
                            continue 
                        idx = 0
                        while idx < arg2:
                            if arg1 > !idx:
                                revert with 0, 17
                            if arg1 + idx >= mem[96]:
                                revert with 0, 50
                            mem[0] = mem[(32 * arg1 + idx) + 128]
                            mem[32] = 12
                            _25607 = sha3(mem[(32 * arg1 + idx) + 128], 12)
                            _25608 = mem[64]
                            mem[64] = mem[64] + 320
                            mem[_25608] = stor12[mem[(32 * arg1 + idx) + 128]].field_0
                            mem[_25608 + 32] = stor1[_25607]
                            mem[_25608 + 64] = stor2[_25607]
                            mem[_25608 + 96] = stor3[_25607]
                            mem[_25608 + 128] = stor4[_25607]
                            mem[_25608 + 160] = stor5[_25607]
                            mem[_25608 + 192] = stor6[_25607]
                            mem[_25608 + 224] = stor7[_25607].field_0
                            mem[_25608 + 256] = bool(stor7[_25607].field_160)
                            mem[_25608 + 288] = stor8[_25607]
                            if idx >= mem[(32 * stor11.length) + 128]:
                                revert with 0, 50
                            mem[(32 * idx) + (32 * stor11.length) + 160] = _25608
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            continue 
                        if arg1 > !arg2:
                            revert with 0, 17
                        if arg1 > !arg2:
                            revert with 0, 17
                        if arg1 + arg2 < mem[96]:
                            _27036 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_27036] = 7
                            mem[_27036 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                            _28032 = mem[64]
                            mem[mem[64]] = 96
                            _28948 = mem[(32 * stor11.length) + 128]
                            mem[mem[64] + 96] = mem[(32 * stor11.length) + 128]
                            idx = 0
                            s = (32 * stor11.length) + 160
                            t = mem[64] + 128
                            while idx < _28948:
                                _36625 = mem[s]
                                mem[t] = mem[mem[s]]
                                mem[t + 32] = mem[_36625 + 32]
                                mem[t + 64] = mem[_36625 + 64]
                                mem[t + 96] = mem[_36625 + 96]
                                mem[t + 128] = mem[_36625 + 128]
                                mem[t + 160] = mem[_36625 + 172 len 20]
                                mem[t + 192] = mem[_36625 + 192]
                                mem[t + 224] = mem[_36625 + 236 len 20]
                                mem[t + 256] = bool(mem[_36625 + 256])
                                mem[t + 288] = mem[_36625 + 288]
                                idx = idx + 1
                                s = s + 32
                                t = t + 320
                                continue 
                            mem[_28032 + 32] = arg1 + arg2
                            mem[_28032 + 64] = (320 * _28948) + 128
                            _38086 = mem[_27036]
                            mem[_28032 + (320 * _28948) + 128] = mem[_27036]
                            mem[_28032 + (320 * _28948) + 160 len ceil32(_38086)] = mem[_27036 + 32 len ceil32(_38086)]
                            if ceil32(_38086) > _38086:
                                mem[_28032 + (320 * _28948) + _38086 + 160] = 0
                            return memory
                              from mem[64]
                               len ceil32(_38086) + _28032 + (320 * _28948) + -mem[64] + 160
                        _27037 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_27037] = 4
                        mem[_27037 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                        _28033 = mem[64]
                        mem[mem[64]] = 96
                        _28949 = mem[(32 * stor11.length) + 128]
                        mem[mem[64] + 96] = mem[(32 * stor11.length) + 128]
                        idx = 0
                        s = (32 * stor11.length) + 160
                        t = mem[64] + 128
                        while idx < _28949:
                            _36632 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_36632 + 32]
                            mem[t + 64] = mem[_36632 + 64]
                            mem[t + 96] = mem[_36632 + 96]
                            mem[t + 128] = mem[_36632 + 128]
                            mem[t + 160] = mem[_36632 + 172 len 20]
                            mem[t + 192] = mem[_36632 + 192]
                            mem[t + 224] = mem[_36632 + 236 len 20]
                            mem[t + 256] = bool(mem[_36632 + 256])
                            mem[t + 288] = mem[_36632 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_28033 + 32] = arg1 + arg2
                        mem[_28033 + 64] = (320 * _28949) + 128
                        _38087 = mem[_27037]
                        mem[_28033 + (320 * _28949) + 128] = mem[_27037]
                        mem[_28033 + (320 * _28949) + 160 len ceil32(_38087)] = mem[_27037 + 32 len ceil32(_38087)]
                        if ceil32(_38087) > _38087:
                            mem[_28033 + (320 * _28949) + _38087 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_38087) + _28033 + (320 * _28949) + -mem[64] + 160
                    if stor11.length < arg1:
                        revert with 0, 17
                    if stor11.length - arg1 > test266151307():
                        revert with 0, 65
                    mem[(32 * stor11.length) + 128] = stor11.length - arg1
                    mem[64] = (32 * stor11.length) + (32 * stor11.length - arg1) + 160
                    if not stor11.length - arg1:
                        idx = 0
                        while idx < stor11.length - arg1:
                            if arg1 > !idx:
                                revert with 0, 17
                            if arg1 + idx >= mem[96]:
                                revert with 0, 50
                            mem[0] = mem[(32 * arg1 + idx) + 128]
                            mem[32] = 12
                            _6162 = sha3(mem[(32 * arg1 + idx) + 128], 12)
                            _6163 = mem[64]
                            mem[64] = mem[64] + 320
                            mem[_6163] = stor12[mem[(32 * arg1 + idx) + 128]].field_0
                            mem[_6163 + 32] = stor1[_6162]
                            mem[_6163 + 64] = stor2[_6162]
                            mem[_6163 + 96] = stor3[_6162]
                            mem[_6163 + 128] = stor4[_6162]
                            mem[_6163 + 160] = stor5[_6162]
                            mem[_6163 + 192] = stor6[_6162]
                            mem[_6163 + 224] = stor7[_6162].field_0
                            mem[_6163 + 256] = bool(stor7[_6162].field_160)
                            mem[_6163 + 288] = stor8[_6162]
                            if idx >= mem[(32 * stor11.length) + 128]:
                                revert with 0, 50
                            mem[(32 * idx) + (32 * stor11.length) + 160] = _6163
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            continue 
                        if arg1 > !(stor11.length - arg1):
                            revert with 0, 17
                        if arg1 > !(stor11.length - arg1):
                            revert with 0, 17
                        if stor11.length < mem[96]:
                            _6719 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_6719] = 7
                            mem[_6719 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                            _7295 = mem[64]
                            mem[mem[64]] = 96
                            _7651 = mem[(32 * stor11.length) + 128]
                            mem[mem[64] + 96] = mem[(32 * stor11.length) + 128]
                            idx = 0
                            s = (32 * stor11.length) + 160
                            t = mem[64] + 128
                            while idx < _7651:
                                _11725 = mem[s]
                                mem[t] = mem[mem[s]]
                                mem[t + 32] = mem[_11725 + 32]
                                mem[t + 64] = mem[_11725 + 64]
                                mem[t + 96] = mem[_11725 + 96]
                                mem[t + 128] = mem[_11725 + 128]
                                mem[t + 160] = mem[_11725 + 172 len 20]
                                mem[t + 192] = mem[_11725 + 192]
                                mem[t + 224] = mem[_11725 + 236 len 20]
                                mem[t + 256] = bool(mem[_11725 + 256])
                                mem[t + 288] = mem[_11725 + 288]
                                idx = idx + 1
                                s = s + 32
                                t = t + 320
                                continue 
                            mem[_7295 + 32] = stor11.length
                            mem[_7295 + 64] = (320 * _7651) + 128
                            _12214 = mem[_6719]
                            mem[_7295 + (320 * _7651) + 128] = mem[_6719]
                            mem[_7295 + (320 * _7651) + 160 len ceil32(_12214)] = mem[_6719 + 32 len ceil32(_12214)]
                            if ceil32(_12214) > _12214:
                                mem[_7295 + (320 * _7651) + _12214 + 160] = 0
                            return memory
                              from mem[64]
                               len ceil32(_12214) + _7295 + (320 * _7651) + -mem[64] + 160
                        _6720 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_6720] = 4
                        mem[_6720 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                        _7296 = mem[64]
                        mem[mem[64]] = 96
                        _7652 = mem[(32 * stor11.length) + 128]
                        mem[mem[64] + 96] = mem[(32 * stor11.length) + 128]
                        idx = 0
                        s = (32 * stor11.length) + 160
                        t = mem[64] + 128
                        while idx < _7652:
                            _11732 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_11732 + 32]
                            mem[t + 64] = mem[_11732 + 64]
                            mem[t + 96] = mem[_11732 + 96]
                            mem[t + 128] = mem[_11732 + 128]
                            mem[t + 160] = mem[_11732 + 172 len 20]
                            mem[t + 192] = mem[_11732 + 192]
                            mem[t + 224] = mem[_11732 + 236 len 20]
                            mem[t + 256] = bool(mem[_11732 + 256])
                            mem[t + 288] = mem[_11732 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_7296 + 32] = stor11.length
                        mem[_7296 + 64] = (320 * _7652) + 128
                        _12215 = mem[_6720]
                        mem[_7296 + (320 * _7652) + 128] = mem[_6720]
                        mem[_7296 + (320 * _7652) + 160 len ceil32(_12215)] = mem[_6720 + 32 len ceil32(_12215)]
                        if ceil32(_12215) > _12215:
                            mem[_7296 + (320 * _7652) + _12215 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_12215) + _7296 + (320 * _7652) + -mem[64] + 160
                    mem[64] = (32 * stor11.length) + (32 * stor11.length - arg1) + 480
                    mem[(32 * stor11.length) + (32 * stor11.length - arg1) + 160] = 0
                    mem[(32 * stor11.length) + (32 * stor11.length - arg1) + 192] = 0
                    mem[(32 * stor11.length) + (32 * stor11.length - arg1) + 224] = 0
                    mem[(32 * stor11.length) + (32 * stor11.length - arg1) + 256] = 0
                    mem[(32 * stor11.length) + (32 * stor11.length - arg1) + 288] = 0
                    mem[(32 * stor11.length) + (32 * stor11.length - arg1) + 320] = 0
                    mem[(32 * stor11.length) + (32 * stor11.length - arg1) + 352] = 0
                    mem[(32 * stor11.length) + (32 * stor11.length - arg1) + 384] = 0
                    mem[(32 * stor11.length) + (32 * stor11.length - arg1) + 416] = 0
                    mem[(32 * stor11.length) + (32 * stor11.length - arg1) + 448] = 0
                    mem[var31001] = (32 * stor11.length) + (32 * stor11.length - arg1) + 160
                    s = var31001
                    idx = var31002
                    while idx - 1:
                        mem[64] = mem[64] + 320
                        mem[(32 * stor11.length) + (32 * stor11.length - arg1) + 160] = 0
                        mem[(32 * stor11.length) + (32 * stor11.length - arg1) + 192] = 0
                        mem[(32 * stor11.length) + (32 * stor11.length - arg1) + 224] = 0
                        mem[(32 * stor11.length) + (32 * stor11.length - arg1) + 256] = 0
                        mem[(32 * stor11.length) + (32 * stor11.length - arg1) + 288] = 0
                        mem[(32 * stor11.length) + (32 * stor11.length - arg1) + 320] = 0
                        mem[(32 * stor11.length) + (32 * stor11.length - arg1) + 352] = 0
                        mem[(32 * stor11.length) + (32 * stor11.length - arg1) + 384] = 0
                        mem[(32 * stor11.length) + (32 * stor11.length - arg1) + 416] = 0
                        mem[(32 * stor11.length) + (32 * stor11.length - arg1) + 448] = 0
                        mem[s + 32] = (32 * stor11.length) + (32 * stor11.length - arg1) + 160
                        s = s + 32
                        idx = idx - 1
                        continue 
                    idx = 0
                    while idx < stor11.length - arg1:
                        if arg1 > !idx:
                            revert with 0, 17
                        if arg1 + idx >= mem[96]:
                            revert with 0, 50
                        mem[0] = mem[(32 * arg1 + idx) + 128]
                        mem[32] = 12
                        _25613 = sha3(mem[(32 * arg1 + idx) + 128], 12)
                        _25614 = mem[64]
                        mem[64] = mem[64] + 320
                        mem[_25614] = stor12[mem[(32 * arg1 + idx) + 128]].field_0
                        mem[_25614 + 32] = stor1[_25613]
                        mem[_25614 + 64] = stor2[_25613]
                        mem[_25614 + 96] = stor3[_25613]
                        mem[_25614 + 128] = stor4[_25613]
                        mem[_25614 + 160] = stor5[_25613]
                        mem[_25614 + 192] = stor6[_25613]
                        mem[_25614 + 224] = stor7[_25613].field_0
                        mem[_25614 + 256] = bool(stor7[_25613].field_160)
                        mem[_25614 + 288] = stor8[_25613]
                        if idx >= mem[(32 * stor11.length) + 128]:
                            revert with 0, 50
                        mem[(32 * idx) + (32 * stor11.length) + 160] = _25614
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if arg1 > !(stor11.length - arg1):
                        revert with 0, 17
                    if arg1 > !(stor11.length - arg1):
                        revert with 0, 17
                    if stor11.length < mem[96]:
                        _27038 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_27038] = 7
                        mem[_27038 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                        _28034 = mem[64]
                        mem[mem[64]] = 96
                        _28950 = mem[(32 * stor11.length) + 128]
                        mem[mem[64] + 96] = mem[(32 * stor11.length) + 128]
                        idx = 0
                        s = (32 * stor11.length) + 160
                        t = mem[64] + 128
                        while idx < _28950:
                            _36639 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_36639 + 32]
                            mem[t + 64] = mem[_36639 + 64]
                            mem[t + 96] = mem[_36639 + 96]
                            mem[t + 128] = mem[_36639 + 128]
                            mem[t + 160] = mem[_36639 + 172 len 20]
                            mem[t + 192] = mem[_36639 + 192]
                            mem[t + 224] = mem[_36639 + 236 len 20]
                            mem[t + 256] = bool(mem[_36639 + 256])
                            mem[t + 288] = mem[_36639 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_28034 + 32] = stor11.length
                        mem[_28034 + 64] = (320 * _28950) + 128
                        _38088 = mem[_27038]
                        mem[_28034 + (320 * _28950) + 128] = mem[_27038]
                        mem[_28034 + (320 * _28950) + 160 len ceil32(_38088)] = mem[_27038 + 32 len ceil32(_38088)]
                        if ceil32(_38088) > _38088:
                            mem[_28034 + (320 * _28950) + _38088 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_38088) + _28034 + (320 * _28950) + -mem[64] + 160
                    _27039 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_27039] = 4
                    mem[_27039 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                    _28035 = mem[64]
                    mem[mem[64]] = 96
                    _28951 = mem[(32 * stor11.length) + 128]
                    mem[mem[64] + 96] = mem[(32 * stor11.length) + 128]
                    idx = 0
                    s = (32 * stor11.length) + 160
                    t = mem[64] + 128
                    while idx < _28951:
                        _36646 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_36646 + 32]
                        mem[t + 64] = mem[_36646 + 64]
                        mem[t + 96] = mem[_36646 + 96]
                        mem[t + 128] = mem[_36646 + 128]
                        mem[t + 160] = mem[_36646 + 172 len 20]
                        mem[t + 192] = mem[_36646 + 192]
                        mem[t + 224] = mem[_36646 + 236 len 20]
                        mem[t + 256] = bool(mem[_36646 + 256])
                        mem[t + 288] = mem[_36646 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_28035 + 32] = stor11.length
                    mem[_28035 + 64] = (320 * _28951) + 128
                    _38089 = mem[_27039]
                    mem[_28035 + (320 * _28951) + 128] = mem[_27039]
                    mem[_28035 + (320 * _28951) + 160 len ceil32(_38089)] = mem[_27039 + 32 len ceil32(_38089)]
                    if ceil32(_38089) > _38089:
                        mem[_28035 + (320 * _28951) + _38089 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_38089) + _28035 + (320 * _28951) + -mem[64] + 160
                if stor11.length < 1:
                    revert with 0, 17
                if arg3:
                    if arg2 <= stor11.length - 1:
                        if arg2 > test266151307():
                            revert with 0, 65
                        mem[(32 * stor11.length) + 128] = arg2
                        mem[64] = (32 * stor11.length) + (32 * arg2) + 160
                        if not arg2:
                            idx = 0
                            while idx < arg2:
                                if stor11.length - 1 < idx:
                                    revert with 0, 17
                                if stor11.length + -idx - 1 >= mem[96]:
                                    revert with 0, 50
                                mem[0] = mem[(32 * stor11.length + -idx - 1) + 128]
                                mem[32] = 12
                                _6168 = sha3(mem[(32 * stor11.length + -idx - 1) + 128], 12)
                                _6169 = mem[64]
                                mem[64] = mem[64] + 320
                                mem[_6169] = stor12[mem[(32 * stor11.length + -idx - 1) + 128]].field_0
                                mem[_6169 + 32] = stor1[_6168]
                                mem[_6169 + 64] = stor2[_6168]
                                mem[_6169 + 96] = stor3[_6168]
                                mem[_6169 + 128] = stor4[_6168]
                                mem[_6169 + 160] = stor5[_6168]
                                mem[_6169 + 192] = stor6[_6168]
                                mem[_6169 + 224] = stor7[_6168].field_0
                                mem[_6169 + 256] = bool(stor7[_6168].field_160)
                                mem[_6169 + 288] = stor8[_6168]
                                if idx >= mem[(32 * stor11.length) + 128]:
                                    revert with 0, 50
                                mem[(32 * idx) + (32 * stor11.length) + 160] = _6169
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                continue 
                            if stor11.length - 1 < arg2:
                                _5843 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_5843] = 4
                                mem[_5843 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                                _5935 = mem[64]
                                mem[mem[64]] = 96
                                _6165 = mem[(32 * stor11.length) + 128]
                                mem[mem[64] + 96] = mem[(32 * stor11.length) + 128]
                                idx = 0
                                s = (32 * stor11.length) + 160
                                t = mem[64] + 128
                                while idx < _6165:
                                    _11739 = mem[s]
                                    mem[t] = mem[mem[s]]
                                    mem[t + 32] = mem[_11739 + 32]
                                    mem[t + 64] = mem[_11739 + 64]
                                    mem[t + 96] = mem[_11739 + 96]
                                    mem[t + 128] = mem[_11739 + 128]
                                    mem[t + 160] = mem[_11739 + 172 len 20]
                                    mem[t + 192] = mem[_11739 + 192]
                                    mem[t + 224] = mem[_11739 + 236 len 20]
                                    mem[t + 256] = bool(mem[_11739 + 256])
                                    mem[t + 288] = mem[_11739 + 288]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 320
                                    continue 
                                mem[_5935 + 32] = 0
                                mem[_5935 + 64] = (320 * _6165) + 128
                                _12216 = mem[_5843]
                                mem[_5935 + (320 * _6165) + 128] = mem[_5843]
                                mem[_5935 + (320 * _6165) + 160 len ceil32(_12216)] = mem[_5843 + 32 len ceil32(_12216)]
                                if ceil32(_12216) > _12216:
                                    mem[_5935 + (320 * _6165) + _12216 + 160] = 0
                                return memory
                                  from mem[64]
                                   len ceil32(_12216) + _5935 + (320 * _6165) + -mem[64] + 160
                            _6166 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_6166] = 7
                            mem[_6166 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                            _6518 = mem[64]
                            mem[mem[64]] = 96
                            _6722 = mem[(32 * stor11.length) + 128]
                            mem[mem[64] + 96] = mem[(32 * stor11.length) + 128]
                            idx = 0
                            s = (32 * stor11.length) + 160
                            t = mem[64] + 128
                            while idx < _6722:
                                _11746 = mem[s]
                                mem[t] = mem[mem[s]]
                                mem[t + 32] = mem[_11746 + 32]
                                mem[t + 64] = mem[_11746 + 64]
                                mem[t + 96] = mem[_11746 + 96]
                                mem[t + 128] = mem[_11746 + 128]
                                mem[t + 160] = mem[_11746 + 172 len 20]
                                mem[t + 192] = mem[_11746 + 192]
                                mem[t + 224] = mem[_11746 + 236 len 20]
                                mem[t + 256] = bool(mem[_11746 + 256])
                                mem[t + 288] = mem[_11746 + 288]
                                idx = idx + 1
                                s = s + 32
                                t = t + 320
                                continue 
                            mem[_6518 + 32] = stor11.length + -arg2 - 1
                            mem[_6518 + 64] = (320 * _6722) + 128
                            _12217 = mem[_6166]
                            mem[_6518 + (320 * _6722) + 128] = mem[_6166]
                            mem[_6518 + (320 * _6722) + 160 len ceil32(_12217)] = mem[_6166 + 32 len ceil32(_12217)]
                            if ceil32(_12217) > _12217:
                                mem[_6518 + (320 * _6722) + _12217 + 160] = 0
                            return memory
                              from mem[64]
                               len ceil32(_12217) + _6518 + (320 * _6722) + -mem[64] + 160
                        mem[64] = (32 * stor11.length) + (32 * arg2) + 480
                        mem[(32 * stor11.length) + (32 * arg2) + 160] = 0
                        mem[(32 * stor11.length) + (32 * arg2) + 192] = 0
                        mem[(32 * stor11.length) + (32 * arg2) + 224] = 0
                        mem[(32 * stor11.length) + (32 * arg2) + 256] = 0
                        mem[(32 * stor11.length) + (32 * arg2) + 288] = 0
                        mem[(32 * stor11.length) + (32 * arg2) + 320] = 0
                        mem[(32 * stor11.length) + (32 * arg2) + 352] = 0
                        mem[(32 * stor11.length) + (32 * arg2) + 384] = 0
                        mem[(32 * stor11.length) + (32 * arg2) + 416] = 0
                        mem[(32 * stor11.length) + (32 * arg2) + 448] = 0
                        mem[var28001] = (32 * stor11.length) + (32 * arg2) + 160
                        s = var28001
                        idx = var28002
                        while idx - 1:
                            mem[64] = mem[64] + 320
                            mem[(32 * stor11.length) + (32 * arg2) + 160] = 0
                            mem[(32 * stor11.length) + (32 * arg2) + 192] = 0
                            mem[(32 * stor11.length) + (32 * arg2) + 224] = 0
                            mem[(32 * stor11.length) + (32 * arg2) + 256] = 0
                            mem[(32 * stor11.length) + (32 * arg2) + 288] = 0
                            mem[(32 * stor11.length) + (32 * arg2) + 320] = 0
                            mem[(32 * stor11.length) + (32 * arg2) + 352] = 0
                            mem[(32 * stor11.length) + (32 * arg2) + 384] = 0
                            mem[(32 * stor11.length) + (32 * arg2) + 416] = 0
                            mem[(32 * stor11.length) + (32 * arg2) + 448] = 0
                            mem[s + 32] = (32 * stor11.length) + (32 * arg2) + 160
                            s = s + 32
                            idx = idx - 1
                            continue 
                        idx = 0
                        while idx < arg2:
                            if stor11.length - 1 < idx:
                                revert with 0, 17
                            if stor11.length + -idx - 1 >= mem[96]:
                                revert with 0, 50
                            mem[0] = mem[(32 * stor11.length + -idx - 1) + 128]
                            mem[32] = 12
                            _25621 = sha3(mem[(32 * stor11.length + -idx - 1) + 128], 12)
                            _25622 = mem[64]
                            mem[64] = mem[64] + 320
                            mem[_25622] = stor12[mem[(32 * stor11.length + -idx - 1) + 128]].field_0
                            mem[_25622 + 32] = stor1[_25621]
                            mem[_25622 + 64] = stor2[_25621]
                            mem[_25622 + 96] = stor3[_25621]
                            mem[_25622 + 128] = stor4[_25621]
                            mem[_25622 + 160] = stor5[_25621]
                            mem[_25622 + 192] = stor6[_25621]
                            mem[_25622 + 224] = stor7[_25621].field_0
                            mem[_25622 + 256] = bool(stor7[_25621].field_160)
                            mem[_25622 + 288] = stor8[_25621]
                            if idx >= mem[(32 * stor11.length) + 128]:
                                revert with 0, 50
                            mem[(32 * idx) + (32 * stor11.length) + 160] = _25622
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            continue 
                        if stor11.length - 1 < arg2:
                            _24742 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_24742] = 4
                            mem[_24742 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                            _25000 = mem[64]
                            mem[mem[64]] = 96
                            _25618 = mem[(32 * stor11.length) + 128]
                            mem[mem[64] + 96] = mem[(32 * stor11.length) + 128]
                            idx = 0
                            s = (32 * stor11.length) + 160
                            t = mem[64] + 128
                            while idx < _25618:
                                _36653 = mem[s]
                                mem[t] = mem[mem[s]]
                                mem[t + 32] = mem[_36653 + 32]
                                mem[t + 64] = mem[_36653 + 64]
                                mem[t + 96] = mem[_36653 + 96]
                                mem[t + 128] = mem[_36653 + 128]
                                mem[t + 160] = mem[_36653 + 172 len 20]
                                mem[t + 192] = mem[_36653 + 192]
                                mem[t + 224] = mem[_36653 + 236 len 20]
                                mem[t + 256] = bool(mem[_36653 + 256])
                                mem[t + 288] = mem[_36653 + 288]
                                idx = idx + 1
                                s = s + 32
                                t = t + 320
                                continue 
                            mem[_25000 + 32] = 0
                            mem[_25000 + 64] = (320 * _25618) + 128
                            _38090 = mem[_24742]
                            mem[_25000 + (320 * _25618) + 128] = mem[_24742]
                            mem[_25000 + (320 * _25618) + 160 len ceil32(_38090)] = mem[_24742 + 32 len ceil32(_38090)]
                            if ceil32(_38090) > _38090:
                                mem[_25000 + (320 * _25618) + _38090 + 160] = 0
                            return memory
                              from mem[64]
                               len ceil32(_38090) + _25000 + (320 * _25618) + -mem[64] + 160
                        _25619 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_25619] = 7
                        mem[_25619 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                        _26491 = mem[64]
                        mem[mem[64]] = 96
                        _27041 = mem[(32 * stor11.length) + 128]
                        mem[mem[64] + 96] = mem[(32 * stor11.length) + 128]
                        idx = 0
                        s = (32 * stor11.length) + 160
                        t = mem[64] + 128
                        while idx < _27041:
                            _36660 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_36660 + 32]
                            mem[t + 64] = mem[_36660 + 64]
                            mem[t + 96] = mem[_36660 + 96]
                            mem[t + 128] = mem[_36660 + 128]
                            mem[t + 160] = mem[_36660 + 172 len 20]
                            mem[t + 192] = mem[_36660 + 192]
                            mem[t + 224] = mem[_36660 + 236 len 20]
                            mem[t + 256] = bool(mem[_36660 + 256])
                            mem[t + 288] = mem[_36660 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_26491 + 32] = stor11.length + -arg2 - 1
                        mem[_26491 + 64] = (320 * _27041) + 128
                        _38091 = mem[_25619]
                        mem[_26491 + (320 * _27041) + 128] = mem[_25619]
                        mem[_26491 + (320 * _27041) + 160 len ceil32(_38091)] = mem[_25619 + 32 len ceil32(_38091)]
                        if ceil32(_38091) > _38091:
                            mem[_26491 + (320 * _27041) + _38091 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_38091) + _26491 + (320 * _27041) + -mem[64] + 160
                    if 1 > !(stor11.length - 1):
                        revert with 0, 17
                    if stor11.length > test266151307():
                        revert with 0, 65
                    mem[(32 * stor11.length) + 128] = stor11.length
                    mem[64] = (64 * stor11.length) + 160
                    if not stor11.length:
                        idx = 0
                        while idx < stor11.length:
                            if stor11.length - 1 < idx:
                                revert with 0, 17
                            if stor11.length + -idx - 1 >= mem[96]:
                                revert with 0, 50
                            mem[0] = mem[(32 * stor11.length + -idx - 1) + 128]
                            mem[32] = 12
                            _6174 = sha3(mem[(32 * stor11.length + -idx - 1) + 128], 12)
                            _6175 = mem[64]
                            mem[64] = mem[64] + 320
                            mem[_6175] = stor12[mem[(32 * stor11.length + -idx - 1) + 128]].field_0
                            mem[_6175 + 32] = stor1[_6174]
                            mem[_6175 + 64] = stor2[_6174]
                            mem[_6175 + 96] = stor3[_6174]
                            mem[_6175 + 128] = stor4[_6174]
                            mem[_6175 + 160] = stor5[_6174]
                            mem[_6175 + 192] = stor6[_6174]
                            mem[_6175 + 224] = stor7[_6174].field_0
                            mem[_6175 + 256] = bool(stor7[_6174].field_160)
                            mem[_6175 + 288] = stor8[_6174]
                            if idx >= mem[(32 * stor11.length) + 128]:
                                revert with 0, 50
                            mem[(32 * idx) + (32 * stor11.length) + 160] = _6175
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            continue 
                        if stor11.length - 1 < stor11.length:
                            _5844 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_5844] = 4
                            mem[_5844 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                            _5937 = mem[64]
                            mem[mem[64]] = 96
                            _6171 = mem[(32 * stor11.length) + 128]
                            mem[mem[64] + 96] = mem[(32 * stor11.length) + 128]
                            idx = 0
                            s = (32 * stor11.length) + 160
                            t = mem[64] + 128
                            while idx < _6171:
                                _11753 = mem[s]
                                mem[t] = mem[mem[s]]
                                mem[t + 32] = mem[_11753 + 32]
                                mem[t + 64] = mem[_11753 + 64]
                                mem[t + 96] = mem[_11753 + 96]
                                mem[t + 128] = mem[_11753 + 128]
                                mem[t + 160] = mem[_11753 + 172 len 20]
                                mem[t + 192] = mem[_11753 + 192]
                                mem[t + 224] = mem[_11753 + 236 len 20]
                                mem[t + 256] = bool(mem[_11753 + 256])
                                mem[t + 288] = mem[_11753 + 288]
                                idx = idx + 1
                                s = s + 32
                                t = t + 320
                                continue 
                            mem[_5937 + 32] = 0
                            mem[_5937 + 64] = (320 * _6171) + 128
                            _12218 = mem[_5844]
                            mem[_5937 + (320 * _6171) + 128] = mem[_5844]
                            mem[_5937 + (320 * _6171) + 160 len ceil32(_12218)] = mem[_5844 + 32 len ceil32(_12218)]
                            if ceil32(_12218) > _12218:
                                mem[_5937 + (320 * _6171) + _12218 + 160] = 0
                            return memory
                              from mem[64]
                               len ceil32(_12218) + _5937 + (320 * _6171) + -mem[64] + 160
                        _6172 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_6172] = 7
                        mem[_6172 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                        _6527 = mem[64]
                        mem[mem[64]] = 96
                        _6724 = mem[(32 * stor11.length) + 128]
                        mem[mem[64] + 96] = mem[(32 * stor11.length) + 128]
                        idx = 0
                        s = (32 * stor11.length) + 160
                        t = mem[64] + 128
                        while idx < _6724:
                            _11760 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_11760 + 32]
                            mem[t + 64] = mem[_11760 + 64]
                            mem[t + 96] = mem[_11760 + 96]
                            mem[t + 128] = mem[_11760 + 128]
                            mem[t + 160] = mem[_11760 + 172 len 20]
                            mem[t + 192] = mem[_11760 + 192]
                            mem[t + 224] = mem[_11760 + 236 len 20]
                            mem[t + 256] = bool(mem[_11760 + 256])
                            mem[t + 288] = mem[_11760 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_6527 + 32] = -1
                        mem[_6527 + 64] = (320 * _6724) + 128
                        _12219 = mem[_6172]
                        mem[_6527 + (320 * _6724) + 128] = mem[_6172]
                        mem[_6527 + (320 * _6724) + 160 len ceil32(_12219)] = mem[_6172 + 32 len ceil32(_12219)]
                        if ceil32(_12219) > _12219:
                            mem[_6527 + (320 * _6724) + _12219 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_12219) + _6527 + (320 * _6724) + -mem[64] + 160
                    mem[64] = (64 * stor11.length) + 480
                    mem[(64 * stor11.length) + 160] = 0
                    mem[(64 * stor11.length) + 192] = 0
                    mem[(64 * stor11.length) + 224] = 0
                    mem[(64 * stor11.length) + 256] = 0
                    mem[(64 * stor11.length) + 288] = 0
                    mem[(64 * stor11.length) + 320] = 0
                    mem[(64 * stor11.length) + 352] = 0
                    mem[(64 * stor11.length) + 384] = 0
                    mem[(64 * stor11.length) + 416] = 0
                    mem[(64 * stor11.length) + 448] = 0
                    mem[var32001] = (64 * stor11.length) + 160
                    s = var32001
                    idx = var32002
                    while idx - 1:
                        mem[64] = mem[64] + 320
                        mem[(64 * stor11.length) + 160] = 0
                        mem[(64 * stor11.length) + 192] = 0
                        mem[(64 * stor11.length) + 224] = 0
                        mem[(64 * stor11.length) + 256] = 0
                        mem[(64 * stor11.length) + 288] = 0
                        mem[(64 * stor11.length) + 320] = 0
                        mem[(64 * stor11.length) + 352] = 0
                        mem[(64 * stor11.length) + 384] = 0
                        mem[(64 * stor11.length) + 416] = 0
                        mem[(64 * stor11.length) + 448] = 0
                        mem[s + 32] = (64 * stor11.length) + 160
                        s = s + 32
                        idx = idx - 1
                        continue 
                    idx = 0
                    while idx < stor11.length:
                        if stor11.length - 1 < idx:
                            revert with 0, 17
                        if stor11.length + -idx - 1 >= mem[96]:
                            revert with 0, 50
                        mem[0] = mem[(32 * stor11.length + -idx - 1) + 128]
                        mem[32] = 12
                        _25629 = sha3(mem[(32 * stor11.length + -idx - 1) + 128], 12)
                        _25630 = mem[64]
                        mem[64] = mem[64] + 320
                        mem[_25630] = stor12[mem[(32 * stor11.length + -idx - 1) + 128]].field_0
                        mem[_25630 + 32] = stor1[_25629]
                        mem[_25630 + 64] = stor2[_25629]
                        mem[_25630 + 96] = stor3[_25629]
                        mem[_25630 + 128] = stor4[_25629]
                        mem[_25630 + 160] = stor5[_25629]
                        mem[_25630 + 192] = stor6[_25629]
                        mem[_25630 + 224] = stor7[_25629].field_0
                        mem[_25630 + 256] = bool(stor7[_25629].field_160)
                        mem[_25630 + 288] = stor8[_25629]
                        if idx >= mem[(32 * stor11.length) + 128]:
                            revert with 0, 50
                        mem[(32 * idx) + (32 * stor11.length) + 160] = _25630
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if stor11.length - 1 < stor11.length:
                        _24743 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_24743] = 4
                        mem[_24743 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                        _25004 = mem[64]
                        mem[mem[64]] = 96
                        _25626 = mem[(32 * stor11.length) + 128]
                        mem[mem[64] + 96] = mem[(32 * stor11.length) + 128]
                        idx = 0
                        s = (32 * stor11.length) + 160
                        t = mem[64] + 128
                        while idx < _25626:
                            _36667 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_36667 + 32]
                            mem[t + 64] = mem[_36667 + 64]
                            mem[t + 96] = mem[_36667 + 96]
                            mem[t + 128] = mem[_36667 + 128]
                            mem[t + 160] = mem[_36667 + 172 len 20]
                            mem[t + 192] = mem[_36667 + 192]
                            mem[t + 224] = mem[_36667 + 236 len 20]
                            mem[t + 256] = bool(mem[_36667 + 256])
                            mem[t + 288] = mem[_36667 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_25004 + 32] = 0
                        mem[_25004 + 64] = (320 * _25626) + 128
                        _38092 = mem[_24743]
                        mem[_25004 + (320 * _25626) + 128] = mem[_24743]
                        mem[_25004 + (320 * _25626) + 160 len ceil32(_38092)] = mem[_24743 + 32 len ceil32(_38092)]
                        if ceil32(_38092) > _38092:
                            mem[_25004 + (320 * _25626) + _38092 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_38092) + _25004 + (320 * _25626) + -mem[64] + 160
                    _25627 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_25627] = 7
                    mem[_25627 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                    _26499 = mem[64]
                    mem[mem[64]] = 96
                    _27043 = mem[(32 * stor11.length) + 128]
                    mem[mem[64] + 96] = mem[(32 * stor11.length) + 128]
                    idx = 0
                    s = (32 * stor11.length) + 160
                    t = mem[64] + 128
                    while idx < _27043:
                        _36674 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_36674 + 32]
                        mem[t + 64] = mem[_36674 + 64]
                        mem[t + 96] = mem[_36674 + 96]
                        mem[t + 128] = mem[_36674 + 128]
                        mem[t + 160] = mem[_36674 + 172 len 20]
                        mem[t + 192] = mem[_36674 + 192]
                        mem[t + 224] = mem[_36674 + 236 len 20]
                        mem[t + 256] = bool(mem[_36674 + 256])
                        mem[t + 288] = mem[_36674 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_26499 + 32] = -1
                    mem[_26499 + 64] = (320 * _27043) + 128
                    _38093 = mem[_25627]
                    mem[_26499 + (320 * _27043) + 128] = mem[_25627]
                    mem[_26499 + (320 * _27043) + 160 len ceil32(_38093)] = mem[_25627 + 32 len ceil32(_38093)]
                    if ceil32(_38093) > _38093:
                        mem[_26499 + (320 * _27043) + _38093 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_38093) + _26499 + (320 * _27043) + -mem[64] + 160
                if stor11.length < stor11.length - 1:
                    revert with 0, 17
                if arg2 > 1:
                    if stor11.length < stor11.length - 1:
                        revert with 0, 17
                    mem[(32 * stor11.length) + 128] = 1
                    mem[64] = (32 * stor11.length) + 512
                    mem[(32 * stor11.length) + 192] = 0
                    mem[(32 * stor11.length) + 224] = 0
                    mem[(32 * stor11.length) + 256] = 0
                    mem[(32 * stor11.length) + 288] = 0
                    mem[(32 * stor11.length) + 320] = 0
                    mem[(32 * stor11.length) + 352] = 0
                    mem[(32 * stor11.length) + 384] = 0
                    mem[(32 * stor11.length) + 416] = 0
                    mem[(32 * stor11.length) + 448] = 0
                    mem[(32 * stor11.length) + 480] = 0
                    mem[var35001] = (32 * stor11.length) + 192
                    s = var35001
                    idx = var35002
                    while idx - 1:
                        mem[64] = mem[64] + 320
                        mem[(32 * stor11.length) + 192] = 0
                        mem[(32 * stor11.length) + 224] = 0
                        mem[(32 * stor11.length) + 256] = 0
                        mem[(32 * stor11.length) + 288] = 0
                        mem[(32 * stor11.length) + 320] = 0
                        mem[(32 * stor11.length) + 352] = 0
                        mem[(32 * stor11.length) + 384] = 0
                        mem[(32 * stor11.length) + 416] = 0
                        mem[(32 * stor11.length) + 448] = 0
                        mem[(32 * stor11.length) + 480] = 0
                        mem[s + 32] = (32 * stor11.length) + 192
                        s = s + 32
                        idx = idx - 1
                        continue 
                    idx = 0
                    while idx < 1:
                        if stor11.length - 1 > !idx:
                            revert with 0, 17
                        if stor11.length + idx - 1 >= mem[96]:
                            revert with 0, 50
                        mem[0] = mem[(32 * stor11.length + idx - 1) + 128]
                        mem[32] = 12
                        _25641 = sha3(mem[(32 * stor11.length + idx - 1) + 128], 12)
                        _25642 = mem[64]
                        mem[64] = mem[64] + 320
                        mem[_25642] = stor12[mem[(32 * stor11.length + idx - 1) + 128]].field_0
                        mem[_25642 + 32] = stor1[_25641]
                        mem[_25642 + 64] = stor2[_25641]
                        mem[_25642 + 96] = stor3[_25641]
                        mem[_25642 + 128] = stor4[_25641]
                        mem[_25642 + 160] = stor5[_25641]
                        mem[_25642 + 192] = stor6[_25641]
                        mem[_25642 + 224] = stor7[_25641].field_0
                        mem[_25642 + 256] = bool(stor7[_25641].field_160)
                        mem[_25642 + 288] = stor8[_25641]
                        if idx >= mem[(32 * stor11.length) + 128]:
                            revert with 0, 50
                        mem[(32 * idx) + (32 * stor11.length) + 160] = _25642
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if stor11.length - 1 > !1:
                        revert with 0, 17
                    if stor11.length - 1 > !1:
                        revert with 0, 17
                    if stor11.length < mem[96]:
                        _27046 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_27046] = 7
                        mem[_27046 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                        _28054 = mem[64]
                        mem[mem[64]] = 96
                        _28958 = mem[(32 * stor11.length) + 128]
                        mem[mem[64] + 96] = mem[(32 * stor11.length) + 128]
                        idx = 0
                        s = (32 * stor11.length) + 160
                        t = mem[64] + 128
                        while idx < _28958:
                            _36695 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_36695 + 32]
                            mem[t + 64] = mem[_36695 + 64]
                            mem[t + 96] = mem[_36695 + 96]
                            mem[t + 128] = mem[_36695 + 128]
                            mem[t + 160] = mem[_36695 + 172 len 20]
                            mem[t + 192] = mem[_36695 + 192]
                            mem[t + 224] = mem[_36695 + 236 len 20]
                            mem[t + 256] = bool(mem[_36695 + 256])
                            mem[t + 288] = mem[_36695 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_28054 + 32] = stor11.length
                        mem[_28054 + 64] = (320 * _28958) + 128
                        _38096 = mem[_27046]
                        mem[_28054 + (320 * _28958) + 128] = mem[_27046]
                        mem[_28054 + (320 * _28958) + 160 len ceil32(_38096)] = mem[_27046 + 32 len ceil32(_38096)]
                        if ceil32(_38096) > _38096:
                            mem[_28054 + (320 * _28958) + _38096 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_38096) + _28054 + (320 * _28958) + -mem[64] + 160
                    _27047 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_27047] = 4
                    mem[_27047 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                    _28055 = mem[64]
                    mem[mem[64]] = 96
                    _28959 = mem[(32 * stor11.length) + 128]
                    mem[mem[64] + 96] = mem[(32 * stor11.length) + 128]
                    idx = 0
                    s = (32 * stor11.length) + 160
                    t = mem[64] + 128
                    while idx < _28959:
                        _36702 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_36702 + 32]
                        mem[t + 64] = mem[_36702 + 64]
                        mem[t + 96] = mem[_36702 + 96]
                        mem[t + 128] = mem[_36702 + 128]
                        mem[t + 160] = mem[_36702 + 172 len 20]
                        mem[t + 192] = mem[_36702 + 192]
                        mem[t + 224] = mem[_36702 + 236 len 20]
                        mem[t + 256] = bool(mem[_36702 + 256])
                        mem[t + 288] = mem[_36702 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_28055 + 32] = stor11.length
                    mem[_28055 + 64] = (320 * _28959) + 128
                    _38097 = mem[_27047]
                    mem[_28055 + (320 * _28959) + 128] = mem[_27047]
                    mem[_28055 + (320 * _28959) + 160 len ceil32(_38097)] = mem[_27047 + 32 len ceil32(_38097)]
                    if ceil32(_38097) > _38097:
                        mem[_28055 + (320 * _28959) + _38097 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_38097) + _28055 + (320 * _28959) + -mem[64] + 160
                if arg2 > test266151307():
                    revert with 0, 65
                mem[(32 * stor11.length) + 128] = arg2
                mem[64] = (32 * stor11.length) + (32 * arg2) + 160
                if not arg2:
                    idx = 0
                    while idx < arg2:
                        if stor11.length - 1 > !idx:
                            revert with 0, 17
                        if stor11.length + idx - 1 >= mem[96]:
                            revert with 0, 50
                        mem[0] = mem[(32 * stor11.length + idx - 1) + 128]
                        mem[32] = 12
                        _6178 = sha3(mem[(32 * stor11.length + idx - 1) + 128], 12)
                        _6179 = mem[64]
                        mem[64] = mem[64] + 320
                        mem[_6179] = stor12[mem[(32 * stor11.length + idx - 1) + 128]].field_0
                        mem[_6179 + 32] = stor1[_6178]
                        mem[_6179 + 64] = stor2[_6178]
                        mem[_6179 + 96] = stor3[_6178]
                        mem[_6179 + 128] = stor4[_6178]
                        mem[_6179 + 160] = stor5[_6178]
                        mem[_6179 + 192] = stor6[_6178]
                        mem[_6179 + 224] = stor7[_6178].field_0
                        mem[_6179 + 256] = bool(stor7[_6178].field_160)
                        mem[_6179 + 288] = stor8[_6178]
                        if idx >= mem[(32 * stor11.length) + 128]:
                            revert with 0, 50
                        mem[(32 * idx) + (32 * stor11.length) + 160] = _6179
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if stor11.length - 1 > !arg2:
                        revert with 0, 17
                    if stor11.length - 1 > !arg2:
                        revert with 0, 17
                    if stor11.length + arg2 - 1 < mem[96]:
                        _6725 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_6725] = 7
                        mem[_6725 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                        _7329 = mem[64]
                        mem[mem[64]] = 96
                        _7657 = mem[(32 * stor11.length) + 128]
                        mem[mem[64] + 96] = mem[(32 * stor11.length) + 128]
                        idx = 0
                        s = (32 * stor11.length) + 160
                        t = mem[64] + 128
                        while idx < _7657:
                            _11767 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_11767 + 32]
                            mem[t + 64] = mem[_11767 + 64]
                            mem[t + 96] = mem[_11767 + 96]
                            mem[t + 128] = mem[_11767 + 128]
                            mem[t + 160] = mem[_11767 + 172 len 20]
                            mem[t + 192] = mem[_11767 + 192]
                            mem[t + 224] = mem[_11767 + 236 len 20]
                            mem[t + 256] = bool(mem[_11767 + 256])
                            mem[t + 288] = mem[_11767 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_7329 + 32] = stor11.length + arg2 - 1
                        mem[_7329 + 64] = (320 * _7657) + 128
                        _12220 = mem[_6725]
                        mem[_7329 + (320 * _7657) + 128] = mem[_6725]
                        mem[_7329 + (320 * _7657) + 160 len ceil32(_12220)] = mem[_6725 + 32 len ceil32(_12220)]
                        if ceil32(_12220) > _12220:
                            mem[_7329 + (320 * _7657) + _12220 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_12220) + _7329 + (320 * _7657) + -mem[64] + 160
                    _6726 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_6726] = 4
                    mem[_6726 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                    _7330 = mem[64]
                    mem[mem[64]] = 96
                    _7658 = mem[(32 * stor11.length) + 128]
                    mem[mem[64] + 96] = mem[(32 * stor11.length) + 128]
                    idx = 0
                    s = (32 * stor11.length) + 160
                    t = mem[64] + 128
                    while idx < _7658:
                        _11774 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_11774 + 32]
                        mem[t + 64] = mem[_11774 + 64]
                        mem[t + 96] = mem[_11774 + 96]
                        mem[t + 128] = mem[_11774 + 128]
                        mem[t + 160] = mem[_11774 + 172 len 20]
                        mem[t + 192] = mem[_11774 + 192]
                        mem[t + 224] = mem[_11774 + 236 len 20]
                        mem[t + 256] = bool(mem[_11774 + 256])
                        mem[t + 288] = mem[_11774 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_7330 + 32] = stor11.length + arg2 - 1
                    mem[_7330 + 64] = (320 * _7658) + 128
                    _12221 = mem[_6726]
                    mem[_7330 + (320 * _7658) + 128] = mem[_6726]
                    mem[_7330 + (320 * _7658) + 160 len ceil32(_12221)] = mem[_6726 + 32 len ceil32(_12221)]
                    if ceil32(_12221) > _12221:
                        mem[_7330 + (320 * _7658) + _12221 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_12221) + _7330 + (320 * _7658) + -mem[64] + 160
                mem[64] = (32 * stor11.length) + (32 * arg2) + 480
                mem[(32 * stor11.length) + (32 * arg2) + 160] = 0
                mem[(32 * stor11.length) + (32 * arg2) + 192] = 0
                mem[(32 * stor11.length) + (32 * arg2) + 224] = 0
                mem[(32 * stor11.length) + (32 * arg2) + 256] = 0
                mem[(32 * stor11.length) + (32 * arg2) + 288] = 0
                mem[(32 * stor11.length) + (32 * arg2) + 320] = 0
                mem[(32 * stor11.length) + (32 * arg2) + 352] = 0
                mem[(32 * stor11.length) + (32 * arg2) + 384] = 0
                mem[(32 * stor11.length) + (32 * arg2) + 416] = 0
                mem[(32 * stor11.length) + (32 * arg2) + 448] = 0
                mem[var31001] = (32 * stor11.length) + (32 * arg2) + 160
                s = var31001
                idx = var31002
                while idx - 1:
                    mem[64] = mem[64] + 320
                    mem[(32 * stor11.length) + (32 * arg2) + 160] = 0
                    mem[(32 * stor11.length) + (32 * arg2) + 192] = 0
                    mem[(32 * stor11.length) + (32 * arg2) + 224] = 0
                    mem[(32 * stor11.length) + (32 * arg2) + 256] = 0
                    mem[(32 * stor11.length) + (32 * arg2) + 288] = 0
                    mem[(32 * stor11.length) + (32 * arg2) + 320] = 0
                    mem[(32 * stor11.length) + (32 * arg2) + 352] = 0
                    mem[(32 * stor11.length) + (32 * arg2) + 384] = 0
                    mem[(32 * stor11.length) + (32 * arg2) + 416] = 0
                    mem[(32 * stor11.length) + (32 * arg2) + 448] = 0
                    mem[s + 32] = (32 * stor11.length) + (32 * arg2) + 160
                    s = s + 32
                    idx = idx - 1
                    continue 
                idx = 0
                while idx < arg2:
                    if stor11.length - 1 > !idx:
                        revert with 0, 17
                    if stor11.length + idx - 1 >= mem[96]:
                        revert with 0, 50
                    mem[0] = mem[(32 * stor11.length + idx - 1) + 128]
                    mem[32] = 12
                    _25635 = sha3(mem[(32 * stor11.length + idx - 1) + 128], 12)
                    _25636 = mem[64]
                    mem[64] = mem[64] + 320
                    mem[_25636] = stor12[mem[(32 * stor11.length + idx - 1) + 128]].field_0
                    mem[_25636 + 32] = stor1[_25635]
                    mem[_25636 + 64] = stor2[_25635]
                    mem[_25636 + 96] = stor3[_25635]
                    mem[_25636 + 128] = stor4[_25635]
                    mem[_25636 + 160] = stor5[_25635]
                    mem[_25636 + 192] = stor6[_25635]
                    mem[_25636 + 224] = stor7[_25635].field_0
                    mem[_25636 + 256] = bool(stor7[_25635].field_160)
                    mem[_25636 + 288] = stor8[_25635]
                    if idx >= mem[(32 * stor11.length) + 128]:
                        revert with 0, 50
                    mem[(32 * idx) + (32 * stor11.length) + 160] = _25636
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
                if stor11.length - 1 > !arg2:
                    revert with 0, 17
                if stor11.length - 1 > !arg2:
                    revert with 0, 17
                if stor11.length + arg2 - 1 < mem[96]:
                    _27044 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_27044] = 7
                    mem[_27044 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                    _28052 = mem[64]
                    mem[mem[64]] = 96
                    _28956 = mem[(32 * stor11.length) + 128]
                    mem[mem[64] + 96] = mem[(32 * stor11.length) + 128]
                    idx = 0
                    s = (32 * stor11.length) + 160
                    t = mem[64] + 128
                    while idx < _28956:
                        _36681 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_36681 + 32]
                        mem[t + 64] = mem[_36681 + 64]
                        mem[t + 96] = mem[_36681 + 96]
                        mem[t + 128] = mem[_36681 + 128]
                        mem[t + 160] = mem[_36681 + 172 len 20]
                        mem[t + 192] = mem[_36681 + 192]
                        mem[t + 224] = mem[_36681 + 236 len 20]
                        mem[t + 256] = bool(mem[_36681 + 256])
                        mem[t + 288] = mem[_36681 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_28052 + 32] = stor11.length + arg2 - 1
                    mem[_28052 + 64] = (320 * _28956) + 128
                    _38094 = mem[_27044]
                    mem[_28052 + (320 * _28956) + 128] = mem[_27044]
                    mem[_28052 + (320 * _28956) + 160 len ceil32(_38094)] = mem[_27044 + 32 len ceil32(_38094)]
                    if ceil32(_38094) > _38094:
                        mem[_28052 + (320 * _28956) + _38094 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_38094) + _28052 + (320 * _28956) + -mem[64] + 160
                _27045 = mem[64]
                mem[64] = mem[64] + 64
                mem[_27045] = 4
                mem[_27045 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                _28053 = mem[64]
                mem[mem[64]] = 96
                _28957 = mem[(32 * stor11.length) + 128]
                mem[mem[64] + 96] = mem[(32 * stor11.length) + 128]
                idx = 0
                s = (32 * stor11.length) + 160
                t = mem[64] + 128
                while idx < _28957:
                    _36688 = mem[s]
                    mem[t] = mem[mem[s]]
                    mem[t + 32] = mem[_36688 + 32]
                    mem[t + 64] = mem[_36688 + 64]
                    mem[t + 96] = mem[_36688 + 96]
                    mem[t + 128] = mem[_36688 + 128]
                    mem[t + 160] = mem[_36688 + 172 len 20]
                    mem[t + 192] = mem[_36688 + 192]
                    mem[t + 224] = mem[_36688 + 236 len 20]
                    mem[t + 256] = bool(mem[_36688 + 256])
                    mem[t + 288] = mem[_36688 + 288]
                    idx = idx + 1
                    s = s + 32
                    t = t + 320
                    continue 
                mem[_28053 + 32] = stor11.length + arg2 - 1
                mem[_28053 + 64] = (320 * _28957) + 128
                _38095 = mem[_27045]
                mem[_28053 + (320 * _28957) + 128] = mem[_27045]
                mem[_28053 + (320 * _28957) + 160 len ceil32(_38095)] = mem[_27045 + 32 len ceil32(_38095)]
                if ceil32(_38095) > _38095:
                    mem[_28053 + (320 * _28957) + _38095 + 160] = 0
                return memory
                  from mem[64]
                   len ceil32(_38095) + _28053 + (320 * _28957) + -mem[64] + 160
            mem[0] = address(arg5)
            mem[32] = 15
            mem[(32 * stor11.length) + 128] = stor15[address(arg5)].field_0
            if not stor15[address(arg5)].field_0:
                if not stor15[address(arg5)].field_0:
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160] = 0
                    mem[64] = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 256
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192] = 4
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 224] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 256] = 96
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 352] = 0
                    idx = 0
                    s = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192
                    t = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 384
                    while idx < mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]:
                        _5776 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_5776 + 32]
                        mem[t + 64] = mem[_5776 + 64]
                        mem[t + 96] = mem[_5776 + 96]
                        mem[t + 128] = mem[_5776 + 128]
                        mem[t + 160] = mem[_5776 + 172 len 20]
                        mem[t + 192] = mem[_5776 + 192]
                        mem[t + 224] = mem[_5776 + 236 len 20]
                        mem[t + 256] = bool(mem[_5776 + 256])
                        mem[t + 288] = mem[_5776 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 288] = 0
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 320] = 128
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 384] = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192]
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 416 len ceil32(mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192])] = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 224 len ceil32(mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192])]
                    if ceil32(mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192]) > mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192]:
                        mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192] + 416] = 0
                    return memory
                      from mem[64]
                       len ceil32(mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192]) + (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + -mem[64] + 416
                if arg1 < stor15[address(arg5)].field_0:
                    if arg3:
                        if arg2 <= arg1:
                            if arg2 > test266151307():
                                revert with 0, 65
                            mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160] = arg2
                            mem[64] = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 192
                            if not arg2:
                                idx = 0
                                while idx < arg2:
                                    if arg1 < idx:
                                        revert with 0, 17
                                    if arg1 - idx >= mem[(32 * stor11.length) + 128]:
                                        revert with 0, 50
                                    mem[0] = mem[(32 * arg1 - idx) + (32 * stor11.length) + 160]
                                    mem[32] = 12
                                    _6189 = sha3(mem[(32 * arg1 - idx) + (32 * stor11.length) + 160], 12)
                                    _6190 = mem[64]
                                    mem[64] = mem[64] + 320
                                    mem[_6190] = stor12[mem[(32 * arg1 - idx) + (32 * stor11.length) + 160]].field_0
                                    mem[_6190 + 32] = stor1[_6189]
                                    mem[_6190 + 64] = stor2[_6189]
                                    mem[_6190 + 96] = stor3[_6189]
                                    mem[_6190 + 128] = stor4[_6189]
                                    mem[_6190 + 160] = stor5[_6189]
                                    mem[_6190 + 192] = stor6[_6189]
                                    mem[_6190 + 224] = stor7[_6189].field_0
                                    mem[_6190 + 256] = bool(stor7[_6189].field_160)
                                    mem[_6190 + 288] = stor8[_6189]
                                    if idx >= mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]:
                                        revert with 0, 50
                                    mem[(32 * idx) + (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192] = _6190
                                    if idx == -1:
                                        revert with 0, 17
                                    idx = idx + 1
                                    continue 
                                if arg1 < arg2:
                                    _5846 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_5846] = 4
                                    mem[_5846 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                                    _5942 = mem[64]
                                    mem[mem[64]] = 96
                                    _6186 = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                                    mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                                    idx = 0
                                    s = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192
                                    t = mem[64] + 128
                                    while idx < _6186:
                                        _11796 = mem[s]
                                        mem[t] = mem[mem[s]]
                                        mem[t + 32] = mem[_11796 + 32]
                                        mem[t + 64] = mem[_11796 + 64]
                                        mem[t + 96] = mem[_11796 + 96]
                                        mem[t + 128] = mem[_11796 + 128]
                                        mem[t + 160] = mem[_11796 + 172 len 20]
                                        mem[t + 192] = mem[_11796 + 192]
                                        mem[t + 224] = mem[_11796 + 236 len 20]
                                        mem[t + 256] = bool(mem[_11796 + 256])
                                        mem[t + 288] = mem[_11796 + 288]
                                        idx = idx + 1
                                        s = s + 32
                                        t = t + 320
                                        continue 
                                    mem[_5942 + 32] = 0
                                    mem[_5942 + 64] = (320 * _6186) + 128
                                    _12224 = mem[_5846]
                                    mem[_5942 + (320 * _6186) + 128] = mem[_5846]
                                    mem[_5942 + (320 * _6186) + 160 len ceil32(_12224)] = mem[_5846 + 32 len ceil32(_12224)]
                                    if ceil32(_12224) > _12224:
                                        mem[_5942 + (320 * _6186) + _12224 + 160] = 0
                                    return memory
                                      from mem[64]
                                       len ceil32(_12224) + _5942 + (320 * _6186) + -mem[64] + 160
                                _6187 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_6187] = 7
                                mem[_6187 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                                _6538 = mem[64]
                                mem[mem[64]] = 96
                                _6731 = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                                mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                                idx = 0
                                s = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192
                                t = mem[64] + 128
                                while idx < _6731:
                                    _11803 = mem[s]
                                    mem[t] = mem[mem[s]]
                                    mem[t + 32] = mem[_11803 + 32]
                                    mem[t + 64] = mem[_11803 + 64]
                                    mem[t + 96] = mem[_11803 + 96]
                                    mem[t + 128] = mem[_11803 + 128]
                                    mem[t + 160] = mem[_11803 + 172 len 20]
                                    mem[t + 192] = mem[_11803 + 192]
                                    mem[t + 224] = mem[_11803 + 236 len 20]
                                    mem[t + 256] = bool(mem[_11803 + 256])
                                    mem[t + 288] = mem[_11803 + 288]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 320
                                    continue 
                                mem[_6538 + 32] = arg1 - arg2
                                mem[_6538 + 64] = (320 * _6731) + 128
                                _12225 = mem[_6187]
                                mem[_6538 + (320 * _6731) + 128] = mem[_6187]
                                mem[_6538 + (320 * _6731) + 160 len ceil32(_12225)] = mem[_6187 + 32 len ceil32(_12225)]
                                if ceil32(_12225) > _12225:
                                    mem[_6538 + (320 * _6731) + _12225 + 160] = 0
                                return memory
                                  from mem[64]
                                   len ceil32(_12225) + _6538 + (320 * _6731) + -mem[64] + 160
                            mem[64] = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 512
                            mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 192] = 0
                            mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224] = 0
                            mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 256] = 0
                            mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 288] = 0
                            mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 320] = 0
                            mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 352] = 0
                            mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 384] = 0
                            mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 416] = 0
                            mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 448] = 0
                            mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 480] = 0
                            mem[var26001] = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 192
                            s = var26001
                            idx = var26002
                            while idx - 1:
                                mem[64] = mem[64] + 320
                                mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 192] = 0
                                mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224] = 0
                                mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 256] = 0
                                mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 288] = 0
                                mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 320] = 0
                                mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 352] = 0
                                mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 384] = 0
                                mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 416] = 0
                                mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 448] = 0
                                mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 480] = 0
                                mem[s + 32] = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 192
                                s = s + 32
                                idx = idx - 1
                                continue 
                            idx = 0
                            while idx < arg2:
                                if arg1 < idx:
                                    revert with 0, 17
                                if arg1 - idx >= mem[(32 * stor11.length) + 128]:
                                    revert with 0, 50
                                mem[0] = mem[(32 * arg1 - idx) + (32 * stor11.length) + 160]
                                mem[32] = 12
                                _25649 = sha3(mem[(32 * arg1 - idx) + (32 * stor11.length) + 160], 12)
                                _25650 = mem[64]
                                mem[64] = mem[64] + 320
                                mem[_25650] = stor12[mem[(32 * arg1 - idx) + (32 * stor11.length) + 160]].field_0
                                mem[_25650 + 32] = stor1[_25649]
                                mem[_25650 + 64] = stor2[_25649]
                                mem[_25650 + 96] = stor3[_25649]
                                mem[_25650 + 128] = stor4[_25649]
                                mem[_25650 + 160] = stor5[_25649]
                                mem[_25650 + 192] = stor6[_25649]
                                mem[_25650 + 224] = stor7[_25649].field_0
                                mem[_25650 + 256] = bool(stor7[_25649].field_160)
                                mem[_25650 + 288] = stor8[_25649]
                                if idx >= mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]:
                                    revert with 0, 50
                                mem[(32 * idx) + (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192] = _25650
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                continue 
                            if arg1 < arg2:
                                _24744 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_24744] = 4
                                mem[_24744 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                                _25014 = mem[64]
                                mem[mem[64]] = 96
                                _25646 = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                                mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                                idx = 0
                                s = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192
                                t = mem[64] + 128
                                while idx < _25646:
                                    _36709 = mem[s]
                                    mem[t] = mem[mem[s]]
                                    mem[t + 32] = mem[_36709 + 32]
                                    mem[t + 64] = mem[_36709 + 64]
                                    mem[t + 96] = mem[_36709 + 96]
                                    mem[t + 128] = mem[_36709 + 128]
                                    mem[t + 160] = mem[_36709 + 172 len 20]
                                    mem[t + 192] = mem[_36709 + 192]
                                    mem[t + 224] = mem[_36709 + 236 len 20]
                                    mem[t + 256] = bool(mem[_36709 + 256])
                                    mem[t + 288] = mem[_36709 + 288]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 320
                                    continue 
                                mem[_25014 + 32] = 0
                                mem[_25014 + 64] = (320 * _25646) + 128
                                _38098 = mem[_24744]
                                mem[_25014 + (320 * _25646) + 128] = mem[_24744]
                                mem[_25014 + (320 * _25646) + 160 len ceil32(_38098)] = mem[_24744 + 32 len ceil32(_38098)]
                                if ceil32(_38098) > _38098:
                                    mem[_25014 + (320 * _25646) + _38098 + 160] = 0
                                return memory
                                  from mem[64]
                                   len ceil32(_38098) + _25014 + (320 * _25646) + -mem[64] + 160
                            _25647 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_25647] = 7
                            mem[_25647 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                            _26507 = mem[64]
                            mem[mem[64]] = 96
                            _27049 = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                            mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                            idx = 0
                            s = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192
                            t = mem[64] + 128
                            while idx < _27049:
                                _36716 = mem[s]
                                mem[t] = mem[mem[s]]
                                mem[t + 32] = mem[_36716 + 32]
                                mem[t + 64] = mem[_36716 + 64]
                                mem[t + 96] = mem[_36716 + 96]
                                mem[t + 128] = mem[_36716 + 128]
                                mem[t + 160] = mem[_36716 + 172 len 20]
                                mem[t + 192] = mem[_36716 + 192]
                                mem[t + 224] = mem[_36716 + 236 len 20]
                                mem[t + 256] = bool(mem[_36716 + 256])
                                mem[t + 288] = mem[_36716 + 288]
                                idx = idx + 1
                                s = s + 32
                                t = t + 320
                                continue 
                            mem[_26507 + 32] = arg1 - arg2
                            mem[_26507 + 64] = (320 * _27049) + 128
                            _38099 = mem[_25647]
                            mem[_26507 + (320 * _27049) + 128] = mem[_25647]
                            mem[_26507 + (320 * _27049) + 160 len ceil32(_38099)] = mem[_25647 + 32 len ceil32(_38099)]
                            if ceil32(_38099) > _38099:
                                mem[_26507 + (320 * _27049) + _38099 + 160] = 0
                            return memory
                              from mem[64]
                               len ceil32(_38099) + _26507 + (320 * _27049) + -mem[64] + 160
                        if 1 > !arg1:
                            revert with 0, 17
                        if arg1 + 1 > test266151307():
                            revert with 0, 65
                        mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160] = arg1 + 1
                        mem[64] = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 192
                        if not arg1 + 1:
                            idx = 0
                            while idx < arg1 + 1:
                                if arg1 < idx:
                                    revert with 0, 17
                                if arg1 - idx >= mem[(32 * stor11.length) + 128]:
                                    revert with 0, 50
                                mem[0] = mem[(32 * arg1 - idx) + (32 * stor11.length) + 160]
                                mem[32] = 12
                                _6195 = sha3(mem[(32 * arg1 - idx) + (32 * stor11.length) + 160], 12)
                                _6196 = mem[64]
                                mem[64] = mem[64] + 320
                                mem[_6196] = stor12[mem[(32 * arg1 - idx) + (32 * stor11.length) + 160]].field_0
                                mem[_6196 + 32] = stor1[_6195]
                                mem[_6196 + 64] = stor2[_6195]
                                mem[_6196 + 96] = stor3[_6195]
                                mem[_6196 + 128] = stor4[_6195]
                                mem[_6196 + 160] = stor5[_6195]
                                mem[_6196 + 192] = stor6[_6195]
                                mem[_6196 + 224] = stor7[_6195].field_0
                                mem[_6196 + 256] = bool(stor7[_6195].field_160)
                                mem[_6196 + 288] = stor8[_6195]
                                if idx >= mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]:
                                    revert with 0, 50
                                mem[(32 * idx) + (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192] = _6196
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                continue 
                            if arg1 < arg1 + 1:
                                _5847 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_5847] = 4
                                mem[_5847 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                                _5944 = mem[64]
                                mem[mem[64]] = 96
                                _6192 = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                                mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                                idx = 0
                                s = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192
                                t = mem[64] + 128
                                while idx < _6192:
                                    _11810 = mem[s]
                                    mem[t] = mem[mem[s]]
                                    mem[t + 32] = mem[_11810 + 32]
                                    mem[t + 64] = mem[_11810 + 64]
                                    mem[t + 96] = mem[_11810 + 96]
                                    mem[t + 128] = mem[_11810 + 128]
                                    mem[t + 160] = mem[_11810 + 172 len 20]
                                    mem[t + 192] = mem[_11810 + 192]
                                    mem[t + 224] = mem[_11810 + 236 len 20]
                                    mem[t + 256] = bool(mem[_11810 + 256])
                                    mem[t + 288] = mem[_11810 + 288]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 320
                                    continue 
                                mem[_5944 + 32] = 0
                                mem[_5944 + 64] = (320 * _6192) + 128
                                _12226 = mem[_5847]
                                mem[_5944 + (320 * _6192) + 128] = mem[_5847]
                                mem[_5944 + (320 * _6192) + 160 len ceil32(_12226)] = mem[_5847 + 32 len ceil32(_12226)]
                                if ceil32(_12226) > _12226:
                                    mem[_5944 + (320 * _6192) + _12226 + 160] = 0
                                return memory
                                  from mem[64]
                                   len ceil32(_12226) + _5944 + (320 * _6192) + -mem[64] + 160
                            _6193 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_6193] = 7
                            mem[_6193 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                            _6547 = mem[64]
                            mem[mem[64]] = 96
                            _6733 = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                            mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                            idx = 0
                            s = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192
                            t = mem[64] + 128
                            while idx < _6733:
                                _11817 = mem[s]
                                mem[t] = mem[mem[s]]
                                mem[t + 32] = mem[_11817 + 32]
                                mem[t + 64] = mem[_11817 + 64]
                                mem[t + 96] = mem[_11817 + 96]
                                mem[t + 128] = mem[_11817 + 128]
                                mem[t + 160] = mem[_11817 + 172 len 20]
                                mem[t + 192] = mem[_11817 + 192]
                                mem[t + 224] = mem[_11817 + 236 len 20]
                                mem[t + 256] = bool(mem[_11817 + 256])
                                mem[t + 288] = mem[_11817 + 288]
                                idx = idx + 1
                                s = s + 32
                                t = t + 320
                                continue 
                            mem[_6547 + 32] = -1
                            mem[_6547 + 64] = (320 * _6733) + 128
                            _12227 = mem[_6193]
                            mem[_6547 + (320 * _6733) + 128] = mem[_6193]
                            mem[_6547 + (320 * _6733) + 160 len ceil32(_12227)] = mem[_6193 + 32 len ceil32(_12227)]
                            if ceil32(_12227) > _12227:
                                mem[_6547 + (320 * _6733) + _12227 + 160] = 0
                            return memory
                              from mem[64]
                               len ceil32(_12227) + _6547 + (320 * _6733) + -mem[64] + 160
                        mem[64] = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 512
                        mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 192] = 0
                        mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 224] = 0
                        mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 256] = 0
                        mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 288] = 0
                        mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 320] = 0
                        mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 352] = 0
                        mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 384] = 0
                        mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 416] = 0
                        mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 448] = 0
                        mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 480] = 0
                        mem[var30001] = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 192
                        s = var30001
                        idx = var30002
                        while idx - 1:
                            mem[64] = mem[64] + 320
                            mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 192] = 0
                            mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 224] = 0
                            mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 256] = 0
                            mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 288] = 0
                            mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 320] = 0
                            mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 352] = 0
                            mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 384] = 0
                            mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 416] = 0
                            mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 448] = 0
                            mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 480] = 0
                            mem[s + 32] = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 192
                            s = s + 32
                            idx = idx - 1
                            continue 
                        idx = 0
                        while idx < arg1 + 1:
                            if arg1 < idx:
                                revert with 0, 17
                            if arg1 - idx >= mem[(32 * stor11.length) + 128]:
                                revert with 0, 50
                            mem[0] = mem[(32 * arg1 - idx) + (32 * stor11.length) + 160]
                            mem[32] = 12
                            _25657 = sha3(mem[(32 * arg1 - idx) + (32 * stor11.length) + 160], 12)
                            _25658 = mem[64]
                            mem[64] = mem[64] + 320
                            mem[_25658] = stor12[mem[(32 * arg1 - idx) + (32 * stor11.length) + 160]].field_0
                            mem[_25658 + 32] = stor1[_25657]
                            mem[_25658 + 64] = stor2[_25657]
                            mem[_25658 + 96] = stor3[_25657]
                            mem[_25658 + 128] = stor4[_25657]
                            mem[_25658 + 160] = stor5[_25657]
                            mem[_25658 + 192] = stor6[_25657]
                            mem[_25658 + 224] = stor7[_25657].field_0
                            mem[_25658 + 256] = bool(stor7[_25657].field_160)
                            mem[_25658 + 288] = stor8[_25657]
                            if idx >= mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]:
                                revert with 0, 50
                            mem[(32 * idx) + (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192] = _25658
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            continue 
                        if arg1 < arg1 + 1:
                            _24745 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_24745] = 4
                            mem[_24745 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                            _25018 = mem[64]
                            mem[mem[64]] = 96
                            _25654 = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                            mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                            idx = 0
                            s = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192
                            t = mem[64] + 128
                            while idx < _25654:
                                _36723 = mem[s]
                                mem[t] = mem[mem[s]]
                                mem[t + 32] = mem[_36723 + 32]
                                mem[t + 64] = mem[_36723 + 64]
                                mem[t + 96] = mem[_36723 + 96]
                                mem[t + 128] = mem[_36723 + 128]
                                mem[t + 160] = mem[_36723 + 172 len 20]
                                mem[t + 192] = mem[_36723 + 192]
                                mem[t + 224] = mem[_36723 + 236 len 20]
                                mem[t + 256] = bool(mem[_36723 + 256])
                                mem[t + 288] = mem[_36723 + 288]
                                idx = idx + 1
                                s = s + 32
                                t = t + 320
                                continue 
                            mem[_25018 + 32] = 0
                            mem[_25018 + 64] = (320 * _25654) + 128
                            _38100 = mem[_24745]
                            mem[_25018 + (320 * _25654) + 128] = mem[_24745]
                            mem[_25018 + (320 * _25654) + 160 len ceil32(_38100)] = mem[_24745 + 32 len ceil32(_38100)]
                            if ceil32(_38100) > _38100:
                                mem[_25018 + (320 * _25654) + _38100 + 160] = 0
                            return memory
                              from mem[64]
                               len ceil32(_38100) + _25018 + (320 * _25654) + -mem[64] + 160
                        _25655 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_25655] = 7
                        mem[_25655 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                        _26515 = mem[64]
                        mem[mem[64]] = 96
                        _27051 = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                        mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                        idx = 0
                        s = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192
                        t = mem[64] + 128
                        while idx < _27051:
                            _36730 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_36730 + 32]
                            mem[t + 64] = mem[_36730 + 64]
                            mem[t + 96] = mem[_36730 + 96]
                            mem[t + 128] = mem[_36730 + 128]
                            mem[t + 160] = mem[_36730 + 172 len 20]
                            mem[t + 192] = mem[_36730 + 192]
                            mem[t + 224] = mem[_36730 + 236 len 20]
                            mem[t + 256] = bool(mem[_36730 + 256])
                            mem[t + 288] = mem[_36730 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_26515 + 32] = -1
                        mem[_26515 + 64] = (320 * _27051) + 128
                        _38101 = mem[_25655]
                        mem[_26515 + (320 * _27051) + 128] = mem[_25655]
                        mem[_26515 + (320 * _27051) + 160 len ceil32(_38101)] = mem[_25655 + 32 len ceil32(_38101)]
                        if ceil32(_38101) > _38101:
                            mem[_26515 + (320 * _27051) + _38101 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_38101) + _26515 + (320 * _27051) + -mem[64] + 160
                    if stor15[address(arg5)].field_0 < arg1:
                        revert with 0, 17
                    if arg2 <= stor15[address(arg5)].field_0 - arg1:
                        if arg2 > test266151307():
                            revert with 0, 65
                        mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160] = arg2
                        mem[64] = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 192
                        if not arg2:
                            idx = 0
                            while idx < arg2:
                                if arg1 > !idx:
                                    revert with 0, 17
                                if arg1 + idx >= mem[(32 * stor11.length) + 128]:
                                    revert with 0, 50
                                mem[0] = mem[(32 * arg1 + idx) + (32 * stor11.length) + 160]
                                mem[32] = 12
                                _6199 = sha3(mem[(32 * arg1 + idx) + (32 * stor11.length) + 160], 12)
                                _6200 = mem[64]
                                mem[64] = mem[64] + 320
                                mem[_6200] = stor12[mem[(32 * arg1 + idx) + (32 * stor11.length) + 160]].field_0
                                mem[_6200 + 32] = stor1[_6199]
                                mem[_6200 + 64] = stor2[_6199]
                                mem[_6200 + 96] = stor3[_6199]
                                mem[_6200 + 128] = stor4[_6199]
                                mem[_6200 + 160] = stor5[_6199]
                                mem[_6200 + 192] = stor6[_6199]
                                mem[_6200 + 224] = stor7[_6199].field_0
                                mem[_6200 + 256] = bool(stor7[_6199].field_160)
                                mem[_6200 + 288] = stor8[_6199]
                                if idx >= mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]:
                                    revert with 0, 50
                                mem[(32 * idx) + (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192] = _6200
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                continue 
                            if arg1 > !arg2:
                                revert with 0, 17
                            if arg1 > !arg2:
                                revert with 0, 17
                            if arg1 + arg2 < mem[(32 * stor11.length) + 128]:
                                _6734 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_6734] = 7
                                mem[_6734 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                                _7369 = mem[64]
                                mem[mem[64]] = 96
                                _7665 = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                                mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                                idx = 0
                                s = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192
                                t = mem[64] + 128
                                while idx < _7665:
                                    _11824 = mem[s]
                                    mem[t] = mem[mem[s]]
                                    mem[t + 32] = mem[_11824 + 32]
                                    mem[t + 64] = mem[_11824 + 64]
                                    mem[t + 96] = mem[_11824 + 96]
                                    mem[t + 128] = mem[_11824 + 128]
                                    mem[t + 160] = mem[_11824 + 172 len 20]
                                    mem[t + 192] = mem[_11824 + 192]
                                    mem[t + 224] = mem[_11824 + 236 len 20]
                                    mem[t + 256] = bool(mem[_11824 + 256])
                                    mem[t + 288] = mem[_11824 + 288]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 320
                                    continue 
                                mem[_7369 + 32] = arg1 + arg2
                                mem[_7369 + 64] = (320 * _7665) + 128
                                _12228 = mem[_6734]
                                mem[_7369 + (320 * _7665) + 128] = mem[_6734]
                                mem[_7369 + (320 * _7665) + 160 len ceil32(_12228)] = mem[_6734 + 32 len ceil32(_12228)]
                                if ceil32(_12228) > _12228:
                                    mem[_7369 + (320 * _7665) + _12228 + 160] = 0
                                return memory
                                  from mem[64]
                                   len ceil32(_12228) + _7369 + (320 * _7665) + -mem[64] + 160
                            _6735 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_6735] = 4
                            mem[_6735 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                            _7370 = mem[64]
                            mem[mem[64]] = 96
                            _7666 = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                            mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                            idx = 0
                            s = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192
                            t = mem[64] + 128
                            while idx < _7666:
                                _11831 = mem[s]
                                mem[t] = mem[mem[s]]
                                mem[t + 32] = mem[_11831 + 32]
                                mem[t + 64] = mem[_11831 + 64]
                                mem[t + 96] = mem[_11831 + 96]
                                mem[t + 128] = mem[_11831 + 128]
                                mem[t + 160] = mem[_11831 + 172 len 20]
                                mem[t + 192] = mem[_11831 + 192]
                                mem[t + 224] = mem[_11831 + 236 len 20]
                                mem[t + 256] = bool(mem[_11831 + 256])
                                mem[t + 288] = mem[_11831 + 288]
                                idx = idx + 1
                                s = s + 32
                                t = t + 320
                                continue 
                            mem[_7370 + 32] = arg1 + arg2
                            mem[_7370 + 64] = (320 * _7666) + 128
                            _12229 = mem[_6735]
                            mem[_7370 + (320 * _7666) + 128] = mem[_6735]
                            mem[_7370 + (320 * _7666) + 160 len ceil32(_12229)] = mem[_6735 + 32 len ceil32(_12229)]
                            if ceil32(_12229) > _12229:
                                mem[_7370 + (320 * _7666) + _12229 + 160] = 0
                            return memory
                              from mem[64]
                               len ceil32(_12229) + _7370 + (320 * _7666) + -mem[64] + 160
                        mem[64] = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 512
                        mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 192] = 0
                        mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224] = 0
                        mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 256] = 0
                        mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 288] = 0
                        mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 320] = 0
                        mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 352] = 0
                        mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 384] = 0
                        mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 416] = 0
                        mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 448] = 0
                        mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 480] = 0
                        mem[var29001] = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 192
                        s = var29001
                        idx = var29002
                        while idx - 1:
                            mem[64] = mem[64] + 320
                            mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 192] = 0
                            mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224] = 0
                            mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 256] = 0
                            mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 288] = 0
                            mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 320] = 0
                            mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 352] = 0
                            mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 384] = 0
                            mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 416] = 0
                            mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 448] = 0
                            mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 480] = 0
                            mem[s + 32] = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 192
                            s = s + 32
                            idx = idx - 1
                            continue 
                        idx = 0
                        while idx < arg2:
                            if arg1 > !idx:
                                revert with 0, 17
                            if arg1 + idx >= mem[(32 * stor11.length) + 128]:
                                revert with 0, 50
                            mem[0] = mem[(32 * arg1 + idx) + (32 * stor11.length) + 160]
                            mem[32] = 12
                            _25663 = sha3(mem[(32 * arg1 + idx) + (32 * stor11.length) + 160], 12)
                            _25664 = mem[64]
                            mem[64] = mem[64] + 320
                            mem[_25664] = stor12[mem[(32 * arg1 + idx) + (32 * stor11.length) + 160]].field_0
                            mem[_25664 + 32] = stor1[_25663]
                            mem[_25664 + 64] = stor2[_25663]
                            mem[_25664 + 96] = stor3[_25663]
                            mem[_25664 + 128] = stor4[_25663]
                            mem[_25664 + 160] = stor5[_25663]
                            mem[_25664 + 192] = stor6[_25663]
                            mem[_25664 + 224] = stor7[_25663].field_0
                            mem[_25664 + 256] = bool(stor7[_25663].field_160)
                            mem[_25664 + 288] = stor8[_25663]
                            if idx >= mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]:
                                revert with 0, 50
                            mem[(32 * idx) + (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192] = _25664
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            continue 
                        if arg1 > !arg2:
                            revert with 0, 17
                        if arg1 > !arg2:
                            revert with 0, 17
                        if arg1 + arg2 < mem[(32 * stor11.length) + 128]:
                            _27052 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_27052] = 7
                            mem[_27052 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                            _28072 = mem[64]
                            mem[mem[64]] = 96
                            _28964 = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                            mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                            idx = 0
                            s = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192
                            t = mem[64] + 128
                            while idx < _28964:
                                _36737 = mem[s]
                                mem[t] = mem[mem[s]]
                                mem[t + 32] = mem[_36737 + 32]
                                mem[t + 64] = mem[_36737 + 64]
                                mem[t + 96] = mem[_36737 + 96]
                                mem[t + 128] = mem[_36737 + 128]
                                mem[t + 160] = mem[_36737 + 172 len 20]
                                mem[t + 192] = mem[_36737 + 192]
                                mem[t + 224] = mem[_36737 + 236 len 20]
                                mem[t + 256] = bool(mem[_36737 + 256])
                                mem[t + 288] = mem[_36737 + 288]
                                idx = idx + 1
                                s = s + 32
                                t = t + 320
                                continue 
                            mem[_28072 + 32] = arg1 + arg2
                            mem[_28072 + 64] = (320 * _28964) + 128
                            _38102 = mem[_27052]
                            mem[_28072 + (320 * _28964) + 128] = mem[_27052]
                            mem[_28072 + (320 * _28964) + 160 len ceil32(_38102)] = mem[_27052 + 32 len ceil32(_38102)]
                            if ceil32(_38102) > _38102:
                                mem[_28072 + (320 * _28964) + _38102 + 160] = 0
                            return memory
                              from mem[64]
                               len ceil32(_38102) + _28072 + (320 * _28964) + -mem[64] + 160
                        _27053 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_27053] = 4
                        mem[_27053 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                        _28073 = mem[64]
                        mem[mem[64]] = 96
                        _28965 = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                        mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                        idx = 0
                        s = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192
                        t = mem[64] + 128
                        while idx < _28965:
                            _36744 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_36744 + 32]
                            mem[t + 64] = mem[_36744 + 64]
                            mem[t + 96] = mem[_36744 + 96]
                            mem[t + 128] = mem[_36744 + 128]
                            mem[t + 160] = mem[_36744 + 172 len 20]
                            mem[t + 192] = mem[_36744 + 192]
                            mem[t + 224] = mem[_36744 + 236 len 20]
                            mem[t + 256] = bool(mem[_36744 + 256])
                            mem[t + 288] = mem[_36744 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_28073 + 32] = arg1 + arg2
                        mem[_28073 + 64] = (320 * _28965) + 128
                        _38103 = mem[_27053]
                        mem[_28073 + (320 * _28965) + 128] = mem[_27053]
                        mem[_28073 + (320 * _28965) + 160 len ceil32(_38103)] = mem[_27053 + 32 len ceil32(_38103)]
                        if ceil32(_38103) > _38103:
                            mem[_28073 + (320 * _28965) + _38103 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_38103) + _28073 + (320 * _28965) + -mem[64] + 160
                    if stor15[address(arg5)].field_0 < arg1:
                        revert with 0, 17
                    if stor15[address(arg5)].field_0 - arg1 > test266151307():
                        revert with 0, 65
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160] = stor15[address(arg5)].field_0 - arg1
                    mem[64] = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 192
                    if not stor15[address(arg5)].field_0 - arg1:
                        idx = 0
                        while idx < stor15[address(arg5)].field_0 - arg1:
                            if arg1 > !idx:
                                revert with 0, 17
                            if arg1 + idx >= mem[(32 * stor11.length) + 128]:
                                revert with 0, 50
                            mem[0] = mem[(32 * arg1 + idx) + (32 * stor11.length) + 160]
                            mem[32] = 12
                            _6203 = sha3(mem[(32 * arg1 + idx) + (32 * stor11.length) + 160], 12)
                            _6204 = mem[64]
                            mem[64] = mem[64] + 320
                            mem[_6204] = stor12[mem[(32 * arg1 + idx) + (32 * stor11.length) + 160]].field_0
                            mem[_6204 + 32] = stor1[_6203]
                            mem[_6204 + 64] = stor2[_6203]
                            mem[_6204 + 96] = stor3[_6203]
                            mem[_6204 + 128] = stor4[_6203]
                            mem[_6204 + 160] = stor5[_6203]
                            mem[_6204 + 192] = stor6[_6203]
                            mem[_6204 + 224] = stor7[_6203].field_0
                            mem[_6204 + 256] = bool(stor7[_6203].field_160)
                            mem[_6204 + 288] = stor8[_6203]
                            if idx >= mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]:
                                revert with 0, 50
                            mem[(32 * idx) + (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192] = _6204
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            continue 
                        if arg1 > !(stor15[address(arg5)].field_0 - arg1):
                            revert with 0, 17
                        if arg1 > !(stor15[address(arg5)].field_0 - arg1):
                            revert with 0, 17
                        if stor15[address(arg5)].field_0 < mem[(32 * stor11.length) + 128]:
                            _6736 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_6736] = 7
                            mem[_6736 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                            _7375 = mem[64]
                            mem[mem[64]] = 96
                            _7667 = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                            mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                            idx = 0
                            s = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192
                            t = mem[64] + 128
                            while idx < _7667:
                                _11838 = mem[s]
                                mem[t] = mem[mem[s]]
                                mem[t + 32] = mem[_11838 + 32]
                                mem[t + 64] = mem[_11838 + 64]
                                mem[t + 96] = mem[_11838 + 96]
                                mem[t + 128] = mem[_11838 + 128]
                                mem[t + 160] = mem[_11838 + 172 len 20]
                                mem[t + 192] = mem[_11838 + 192]
                                mem[t + 224] = mem[_11838 + 236 len 20]
                                mem[t + 256] = bool(mem[_11838 + 256])
                                mem[t + 288] = mem[_11838 + 288]
                                idx = idx + 1
                                s = s + 32
                                t = t + 320
                                continue 
                            mem[_7375 + 32] = stor15[address(arg5)].field_0
                            mem[_7375 + 64] = (320 * _7667) + 128
                            _12230 = mem[_6736]
                            mem[_7375 + (320 * _7667) + 128] = mem[_6736]
                            mem[_7375 + (320 * _7667) + 160 len ceil32(_12230)] = mem[_6736 + 32 len ceil32(_12230)]
                            if ceil32(_12230) > _12230:
                                mem[_7375 + (320 * _7667) + _12230 + 160] = 0
                            return memory
                              from mem[64]
                               len ceil32(_12230) + _7375 + (320 * _7667) + -mem[64] + 160
                        _6737 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_6737] = 4
                        mem[_6737 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                        _7376 = mem[64]
                        mem[mem[64]] = 96
                        _7668 = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                        mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                        idx = 0
                        s = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192
                        t = mem[64] + 128
                        while idx < _7668:
                            _11845 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_11845 + 32]
                            mem[t + 64] = mem[_11845 + 64]
                            mem[t + 96] = mem[_11845 + 96]
                            mem[t + 128] = mem[_11845 + 128]
                            mem[t + 160] = mem[_11845 + 172 len 20]
                            mem[t + 192] = mem[_11845 + 192]
                            mem[t + 224] = mem[_11845 + 236 len 20]
                            mem[t + 256] = bool(mem[_11845 + 256])
                            mem[t + 288] = mem[_11845 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_7376 + 32] = stor15[address(arg5)].field_0
                        mem[_7376 + 64] = (320 * _7668) + 128
                        _12231 = mem[_6737]
                        mem[_7376 + (320 * _7668) + 128] = mem[_6737]
                        mem[_7376 + (320 * _7668) + 160 len ceil32(_12231)] = mem[_6737 + 32 len ceil32(_12231)]
                        if ceil32(_12231) > _12231:
                            mem[_7376 + (320 * _7668) + _12231 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_12231) + _7376 + (320 * _7668) + -mem[64] + 160
                    mem[64] = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 512
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 192] = 0
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 224] = 0
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 256] = 0
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 288] = 0
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 320] = 0
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 352] = 0
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 384] = 0
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 416] = 0
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 448] = 0
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 480] = 0
                    mem[var33001] = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 192
                    s = var33001
                    idx = var33002
                    while idx - 1:
                        mem[64] = mem[64] + 320
                        mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 192] = 0
                        mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 224] = 0
                        mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 256] = 0
                        mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 288] = 0
                        mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 320] = 0
                        mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 352] = 0
                        mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 384] = 0
                        mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 416] = 0
                        mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 448] = 0
                        mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 480] = 0
                        mem[s + 32] = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 192
                        s = s + 32
                        idx = idx - 1
                        continue 
                    idx = 0
                    while idx < stor15[address(arg5)].field_0 - arg1:
                        if arg1 > !idx:
                            revert with 0, 17
                        if arg1 + idx >= mem[(32 * stor11.length) + 128]:
                            revert with 0, 50
                        mem[0] = mem[(32 * arg1 + idx) + (32 * stor11.length) + 160]
                        mem[32] = 12
                        _25669 = sha3(mem[(32 * arg1 + idx) + (32 * stor11.length) + 160], 12)
                        _25670 = mem[64]
                        mem[64] = mem[64] + 320
                        mem[_25670] = stor12[mem[(32 * arg1 + idx) + (32 * stor11.length) + 160]].field_0
                        mem[_25670 + 32] = stor1[_25669]
                        mem[_25670 + 64] = stor2[_25669]
                        mem[_25670 + 96] = stor3[_25669]
                        mem[_25670 + 128] = stor4[_25669]
                        mem[_25670 + 160] = stor5[_25669]
                        mem[_25670 + 192] = stor6[_25669]
                        mem[_25670 + 224] = stor7[_25669].field_0
                        mem[_25670 + 256] = bool(stor7[_25669].field_160)
                        mem[_25670 + 288] = stor8[_25669]
                        if idx >= mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]:
                            revert with 0, 50
                        mem[(32 * idx) + (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192] = _25670
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if arg1 > !(stor15[address(arg5)].field_0 - arg1):
                        revert with 0, 17
                    if arg1 > !(stor15[address(arg5)].field_0 - arg1):
                        revert with 0, 17
                    if stor15[address(arg5)].field_0 < mem[(32 * stor11.length) + 128]:
                        _27054 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_27054] = 7
                        mem[_27054 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                        _28074 = mem[64]
                        mem[mem[64]] = 96
                        _28966 = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                        mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                        idx = 0
                        s = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192
                        t = mem[64] + 128
                        while idx < _28966:
                            _36751 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_36751 + 32]
                            mem[t + 64] = mem[_36751 + 64]
                            mem[t + 96] = mem[_36751 + 96]
                            mem[t + 128] = mem[_36751 + 128]
                            mem[t + 160] = mem[_36751 + 172 len 20]
                            mem[t + 192] = mem[_36751 + 192]
                            mem[t + 224] = mem[_36751 + 236 len 20]
                            mem[t + 256] = bool(mem[_36751 + 256])
                            mem[t + 288] = mem[_36751 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_28074 + 32] = stor15[address(arg5)].field_0
                        mem[_28074 + 64] = (320 * _28966) + 128
                        _38104 = mem[_27054]
                        mem[_28074 + (320 * _28966) + 128] = mem[_27054]
                        mem[_28074 + (320 * _28966) + 160 len ceil32(_38104)] = mem[_27054 + 32 len ceil32(_38104)]
                        if ceil32(_38104) > _38104:
                            mem[_28074 + (320 * _28966) + _38104 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_38104) + _28074 + (320 * _28966) + -mem[64] + 160
                    _27055 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_27055] = 4
                    mem[_27055 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                    _28075 = mem[64]
                    mem[mem[64]] = 96
                    _28967 = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                    mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                    idx = 0
                    s = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192
                    t = mem[64] + 128
                    while idx < _28967:
                        _36758 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_36758 + 32]
                        mem[t + 64] = mem[_36758 + 64]
                        mem[t + 96] = mem[_36758 + 96]
                        mem[t + 128] = mem[_36758 + 128]
                        mem[t + 160] = mem[_36758 + 172 len 20]
                        mem[t + 192] = mem[_36758 + 192]
                        mem[t + 224] = mem[_36758 + 236 len 20]
                        mem[t + 256] = bool(mem[_36758 + 256])
                        mem[t + 288] = mem[_36758 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_28075 + 32] = stor15[address(arg5)].field_0
                    mem[_28075 + 64] = (320 * _28967) + 128
                    _38105 = mem[_27055]
                    mem[_28075 + (320 * _28967) + 128] = mem[_27055]
                    mem[_28075 + (320 * _28967) + 160 len ceil32(_38105)] = mem[_27055 + 32 len ceil32(_38105)]
                    if ceil32(_38105) > _38105:
                        mem[_28075 + (320 * _28967) + _38105 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_38105) + _28075 + (320 * _28967) + -mem[64] + 160
                if stor15[address(arg5)].field_0 < 1:
                    revert with 0, 17
                if arg3:
                    if arg2 <= stor15[address(arg5)].field_0 - 1:
                        if arg2 > test266151307():
                            revert with 0, 65
                        mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160] = arg2
                        mem[64] = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 192
                        if not arg2:
                            idx = 0
                            while idx < arg2:
                                if stor15[address(arg5)].field_0 - 1 < idx:
                                    revert with 0, 17
                                if stor15[address(arg5)].field_0 + -idx - 1 >= mem[(32 * stor11.length) + 128]:
                                    revert with 0, 50
                                mem[0] = mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + 160]
                                mem[32] = 12
                                _6209 = sha3(mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + 160], 12)
                                _6210 = mem[64]
                                mem[64] = mem[64] + 320
                                mem[_6210] = stor12[mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + 160]].field_0
                                mem[_6210 + 32] = stor1[_6209]
                                mem[_6210 + 64] = stor2[_6209]
                                mem[_6210 + 96] = stor3[_6209]
                                mem[_6210 + 128] = stor4[_6209]
                                mem[_6210 + 160] = stor5[_6209]
                                mem[_6210 + 192] = stor6[_6209]
                                mem[_6210 + 224] = stor7[_6209].field_0
                                mem[_6210 + 256] = bool(stor7[_6209].field_160)
                                mem[_6210 + 288] = stor8[_6209]
                                if idx >= mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]:
                                    revert with 0, 50
                                mem[(32 * idx) + (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192] = _6210
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                continue 
                            if stor15[address(arg5)].field_0 - 1 < arg2:
                                _5848 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_5848] = 4
                                mem[_5848 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                                _5948 = mem[64]
                                mem[mem[64]] = 96
                                _6206 = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                                mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                                idx = 0
                                s = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192
                                t = mem[64] + 128
                                while idx < _6206:
                                    _11852 = mem[s]
                                    mem[t] = mem[mem[s]]
                                    mem[t + 32] = mem[_11852 + 32]
                                    mem[t + 64] = mem[_11852 + 64]
                                    mem[t + 96] = mem[_11852 + 96]
                                    mem[t + 128] = mem[_11852 + 128]
                                    mem[t + 160] = mem[_11852 + 172 len 20]
                                    mem[t + 192] = mem[_11852 + 192]
                                    mem[t + 224] = mem[_11852 + 236 len 20]
                                    mem[t + 256] = bool(mem[_11852 + 256])
                                    mem[t + 288] = mem[_11852 + 288]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 320
                                    continue 
                                mem[_5948 + 32] = 0
                                mem[_5948 + 64] = (320 * _6206) + 128
                                _12232 = mem[_5848]
                                mem[_5948 + (320 * _6206) + 128] = mem[_5848]
                                mem[_5948 + (320 * _6206) + 160 len ceil32(_12232)] = mem[_5848 + 32 len ceil32(_12232)]
                                if ceil32(_12232) > _12232:
                                    mem[_5948 + (320 * _6206) + _12232 + 160] = 0
                                return memory
                                  from mem[64]
                                   len ceil32(_12232) + _5948 + (320 * _6206) + -mem[64] + 160
                            _6207 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_6207] = 7
                            mem[_6207 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                            _6556 = mem[64]
                            mem[mem[64]] = 96
                            _6739 = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                            mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                            idx = 0
                            s = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192
                            t = mem[64] + 128
                            while idx < _6739:
                                _11859 = mem[s]
                                mem[t] = mem[mem[s]]
                                mem[t + 32] = mem[_11859 + 32]
                                mem[t + 64] = mem[_11859 + 64]
                                mem[t + 96] = mem[_11859 + 96]
                                mem[t + 128] = mem[_11859 + 128]
                                mem[t + 160] = mem[_11859 + 172 len 20]
                                mem[t + 192] = mem[_11859 + 192]
                                mem[t + 224] = mem[_11859 + 236 len 20]
                                mem[t + 256] = bool(mem[_11859 + 256])
                                mem[t + 288] = mem[_11859 + 288]
                                idx = idx + 1
                                s = s + 32
                                t = t + 320
                                continue 
                            mem[_6556 + 32] = stor15[address(arg5)].field_0 + -arg2 - 1
                            mem[_6556 + 64] = (320 * _6739) + 128
                            _12233 = mem[_6207]
                            mem[_6556 + (320 * _6739) + 128] = mem[_6207]
                            mem[_6556 + (320 * _6739) + 160 len ceil32(_12233)] = mem[_6207 + 32 len ceil32(_12233)]
                            if ceil32(_12233) > _12233:
                                mem[_6556 + (320 * _6739) + _12233 + 160] = 0
                            return memory
                              from mem[64]
                               len ceil32(_12233) + _6556 + (320 * _6739) + -mem[64] + 160
                        mem[64] = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 512
                        mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 192] = 0
                        mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224] = 0
                        mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 256] = 0
                        mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 288] = 0
                        mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 320] = 0
                        mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 352] = 0
                        mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 384] = 0
                        mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 416] = 0
                        mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 448] = 0
                        mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 480] = 0
                        mem[var30001] = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 192
                        s = var30001
                        idx = var30002
                        while idx - 1:
                            mem[64] = mem[64] + 320
                            mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 192] = 0
                            mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224] = 0
                            mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 256] = 0
                            mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 288] = 0
                            mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 320] = 0
                            mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 352] = 0
                            mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 384] = 0
                            mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 416] = 0
                            mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 448] = 0
                            mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 480] = 0
                            mem[s + 32] = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 192
                            s = s + 32
                            idx = idx - 1
                            continue 
                        idx = 0
                        while idx < arg2:
                            if stor15[address(arg5)].field_0 - 1 < idx:
                                revert with 0, 17
                            if stor15[address(arg5)].field_0 + -idx - 1 >= mem[(32 * stor11.length) + 128]:
                                revert with 0, 50
                            mem[0] = mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + 160]
                            mem[32] = 12
                            _25677 = sha3(mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + 160], 12)
                            _25678 = mem[64]
                            mem[64] = mem[64] + 320
                            mem[_25678] = stor12[mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + 160]].field_0
                            mem[_25678 + 32] = stor1[_25677]
                            mem[_25678 + 64] = stor2[_25677]
                            mem[_25678 + 96] = stor3[_25677]
                            mem[_25678 + 128] = stor4[_25677]
                            mem[_25678 + 160] = stor5[_25677]
                            mem[_25678 + 192] = stor6[_25677]
                            mem[_25678 + 224] = stor7[_25677].field_0
                            mem[_25678 + 256] = bool(stor7[_25677].field_160)
                            mem[_25678 + 288] = stor8[_25677]
                            if idx >= mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]:
                                revert with 0, 50
                            mem[(32 * idx) + (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192] = _25678
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            continue 
                        if stor15[address(arg5)].field_0 - 1 < arg2:
                            _24746 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_24746] = 4
                            mem[_24746 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                            _25028 = mem[64]
                            mem[mem[64]] = 96
                            _25674 = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                            mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                            idx = 0
                            s = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192
                            t = mem[64] + 128
                            while idx < _25674:
                                _36765 = mem[s]
                                mem[t] = mem[mem[s]]
                                mem[t + 32] = mem[_36765 + 32]
                                mem[t + 64] = mem[_36765 + 64]
                                mem[t + 96] = mem[_36765 + 96]
                                mem[t + 128] = mem[_36765 + 128]
                                mem[t + 160] = mem[_36765 + 172 len 20]
                                mem[t + 192] = mem[_36765 + 192]
                                mem[t + 224] = mem[_36765 + 236 len 20]
                                mem[t + 256] = bool(mem[_36765 + 256])
                                mem[t + 288] = mem[_36765 + 288]
                                idx = idx + 1
                                s = s + 32
                                t = t + 320
                                continue 
                            mem[_25028 + 32] = 0
                            mem[_25028 + 64] = (320 * _25674) + 128
                            _38106 = mem[_24746]
                            mem[_25028 + (320 * _25674) + 128] = mem[_24746]
                            mem[_25028 + (320 * _25674) + 160 len ceil32(_38106)] = mem[_24746 + 32 len ceil32(_38106)]
                            if ceil32(_38106) > _38106:
                                mem[_25028 + (320 * _25674) + _38106 + 160] = 0
                            return memory
                              from mem[64]
                               len ceil32(_38106) + _25028 + (320 * _25674) + -mem[64] + 160
                        _25675 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_25675] = 7
                        mem[_25675 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                        _26523 = mem[64]
                        mem[mem[64]] = 96
                        _27057 = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                        mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                        idx = 0
                        s = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192
                        t = mem[64] + 128
                        while idx < _27057:
                            _36772 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_36772 + 32]
                            mem[t + 64] = mem[_36772 + 64]
                            mem[t + 96] = mem[_36772 + 96]
                            mem[t + 128] = mem[_36772 + 128]
                            mem[t + 160] = mem[_36772 + 172 len 20]
                            mem[t + 192] = mem[_36772 + 192]
                            mem[t + 224] = mem[_36772 + 236 len 20]
                            mem[t + 256] = bool(mem[_36772 + 256])
                            mem[t + 288] = mem[_36772 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_26523 + 32] = stor15[address(arg5)].field_0 + -arg2 - 1
                        mem[_26523 + 64] = (320 * _27057) + 128
                        _38107 = mem[_25675]
                        mem[_26523 + (320 * _27057) + 128] = mem[_25675]
                        mem[_26523 + (320 * _27057) + 160 len ceil32(_38107)] = mem[_25675 + 32 len ceil32(_38107)]
                        if ceil32(_38107) > _38107:
                            mem[_26523 + (320 * _27057) + _38107 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_38107) + _26523 + (320 * _27057) + -mem[64] + 160
                    if 1 > !(stor15[address(arg5)].field_0 - 1):
                        revert with 0, 17
                    if stor15[address(arg5)].field_0 > test266151307():
                        revert with 0, 65
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160] = stor15[address(arg5)].field_0
                    mem[64] = (32 * stor11.length) + (64 * stor15[address(arg5)].field_0) + 192
                    if not stor15[address(arg5)].field_0:
                        idx = 0
                        while idx < stor15[address(arg5)].field_0:
                            if stor15[address(arg5)].field_0 - 1 < idx:
                                revert with 0, 17
                            if stor15[address(arg5)].field_0 + -idx - 1 >= mem[(32 * stor11.length) + 128]:
                                revert with 0, 50
                            mem[0] = mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + 160]
                            mem[32] = 12
                            _6215 = sha3(mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + 160], 12)
                            _6216 = mem[64]
                            mem[64] = mem[64] + 320
                            mem[_6216] = stor12[mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + 160]].field_0
                            mem[_6216 + 32] = stor1[_6215]
                            mem[_6216 + 64] = stor2[_6215]
                            mem[_6216 + 96] = stor3[_6215]
                            mem[_6216 + 128] = stor4[_6215]
                            mem[_6216 + 160] = stor5[_6215]
                            mem[_6216 + 192] = stor6[_6215]
                            mem[_6216 + 224] = stor7[_6215].field_0
                            mem[_6216 + 256] = bool(stor7[_6215].field_160)
                            mem[_6216 + 288] = stor8[_6215]
                            if idx >= mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]:
                                revert with 0, 50
                            mem[(32 * idx) + (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192] = _6216
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            continue 
                        if stor15[address(arg5)].field_0 - 1 < stor15[address(arg5)].field_0:
                            _5849 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_5849] = 4
                            mem[_5849 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                            _5950 = mem[64]
                            mem[mem[64]] = 96
                            _6212 = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                            mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                            idx = 0
                            s = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192
                            t = mem[64] + 128
                            while idx < _6212:
                                _11866 = mem[s]
                                mem[t] = mem[mem[s]]
                                mem[t + 32] = mem[_11866 + 32]
                                mem[t + 64] = mem[_11866 + 64]
                                mem[t + 96] = mem[_11866 + 96]
                                mem[t + 128] = mem[_11866 + 128]
                                mem[t + 160] = mem[_11866 + 172 len 20]
                                mem[t + 192] = mem[_11866 + 192]
                                mem[t + 224] = mem[_11866 + 236 len 20]
                                mem[t + 256] = bool(mem[_11866 + 256])
                                mem[t + 288] = mem[_11866 + 288]
                                idx = idx + 1
                                s = s + 32
                                t = t + 320
                                continue 
                            mem[_5950 + 32] = 0
                            mem[_5950 + 64] = (320 * _6212) + 128
                            _12234 = mem[_5849]
                            mem[_5950 + (320 * _6212) + 128] = mem[_5849]
                            mem[_5950 + (320 * _6212) + 160 len ceil32(_12234)] = mem[_5849 + 32 len ceil32(_12234)]
                            if ceil32(_12234) > _12234:
                                mem[_5950 + (320 * _6212) + _12234 + 160] = 0
                            return memory
                              from mem[64]
                               len ceil32(_12234) + _5950 + (320 * _6212) + -mem[64] + 160
                        _6213 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_6213] = 7
                        mem[_6213 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                        _6565 = mem[64]
                        mem[mem[64]] = 96
                        _6741 = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                        mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                        idx = 0
                        s = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192
                        t = mem[64] + 128
                        while idx < _6741:
                            _11873 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_11873 + 32]
                            mem[t + 64] = mem[_11873 + 64]
                            mem[t + 96] = mem[_11873 + 96]
                            mem[t + 128] = mem[_11873 + 128]
                            mem[t + 160] = mem[_11873 + 172 len 20]
                            mem[t + 192] = mem[_11873 + 192]
                            mem[t + 224] = mem[_11873 + 236 len 20]
                            mem[t + 256] = bool(mem[_11873 + 256])
                            mem[t + 288] = mem[_11873 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_6565 + 32] = -1
                        mem[_6565 + 64] = (320 * _6741) + 128
                        _12235 = mem[_6213]
                        mem[_6565 + (320 * _6741) + 128] = mem[_6213]
                        mem[_6565 + (320 * _6741) + 160 len ceil32(_12235)] = mem[_6213 + 32 len ceil32(_12235)]
                        if ceil32(_12235) > _12235:
                            mem[_6565 + (320 * _6741) + _12235 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_12235) + _6565 + (320 * _6741) + -mem[64] + 160
                    mem[64] = (32 * stor11.length) + (64 * stor15[address(arg5)].field_0) + 512
                    mem[(32 * stor11.length) + (64 * stor15[address(arg5)].field_0) + 192] = 0
                    mem[(32 * stor11.length) + (64 * stor15[address(arg5)].field_0) + 224] = 0
                    mem[(32 * stor11.length) + (64 * stor15[address(arg5)].field_0) + 256] = 0
                    mem[(32 * stor11.length) + (64 * stor15[address(arg5)].field_0) + 288] = 0
                    mem[(32 * stor11.length) + (64 * stor15[address(arg5)].field_0) + 320] = 0
                    mem[(32 * stor11.length) + (64 * stor15[address(arg5)].field_0) + 352] = 0
                    mem[(32 * stor11.length) + (64 * stor15[address(arg5)].field_0) + 384] = 0
                    mem[(32 * stor11.length) + (64 * stor15[address(arg5)].field_0) + 416] = 0
                    mem[(32 * stor11.length) + (64 * stor15[address(arg5)].field_0) + 448] = 0
                    mem[(32 * stor11.length) + (64 * stor15[address(arg5)].field_0) + 480] = 0
                    mem[var34001] = (32 * stor11.length) + (64 * stor15[address(arg5)].field_0) + 192
                    s = var34001
                    idx = var34002
                    while idx - 1:
                        mem[64] = mem[64] + 320
                        mem[(32 * stor11.length) + (64 * stor15[address(arg5)].field_0) + 192] = 0
                        mem[(32 * stor11.length) + (64 * stor15[address(arg5)].field_0) + 224] = 0
                        mem[(32 * stor11.length) + (64 * stor15[address(arg5)].field_0) + 256] = 0
                        mem[(32 * stor11.length) + (64 * stor15[address(arg5)].field_0) + 288] = 0
                        mem[(32 * stor11.length) + (64 * stor15[address(arg5)].field_0) + 320] = 0
                        mem[(32 * stor11.length) + (64 * stor15[address(arg5)].field_0) + 352] = 0
                        mem[(32 * stor11.length) + (64 * stor15[address(arg5)].field_0) + 384] = 0
                        mem[(32 * stor11.length) + (64 * stor15[address(arg5)].field_0) + 416] = 0
                        mem[(32 * stor11.length) + (64 * stor15[address(arg5)].field_0) + 448] = 0
                        mem[(32 * stor11.length) + (64 * stor15[address(arg5)].field_0) + 480] = 0
                        mem[s + 32] = (32 * stor11.length) + (64 * stor15[address(arg5)].field_0) + 192
                        s = s + 32
                        idx = idx - 1
                        continue 
                    idx = 0
                    while idx < stor15[address(arg5)].field_0:
                        if stor15[address(arg5)].field_0 - 1 < idx:
                            revert with 0, 17
                        if stor15[address(arg5)].field_0 + -idx - 1 >= mem[(32 * stor11.length) + 128]:
                            revert with 0, 50
                        mem[0] = mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + 160]
                        mem[32] = 12
                        _25685 = sha3(mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + 160], 12)
                        _25686 = mem[64]
                        mem[64] = mem[64] + 320
                        mem[_25686] = stor12[mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + 160]].field_0
                        mem[_25686 + 32] = stor1[_25685]
                        mem[_25686 + 64] = stor2[_25685]
                        mem[_25686 + 96] = stor3[_25685]
                        mem[_25686 + 128] = stor4[_25685]
                        mem[_25686 + 160] = stor5[_25685]
                        mem[_25686 + 192] = stor6[_25685]
                        mem[_25686 + 224] = stor7[_25685].field_0
                        mem[_25686 + 256] = bool(stor7[_25685].field_160)
                        mem[_25686 + 288] = stor8[_25685]
                        if idx >= mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]:
                            revert with 0, 50
                        mem[(32 * idx) + (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192] = _25686
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if stor15[address(arg5)].field_0 - 1 < stor15[address(arg5)].field_0:
                        _24747 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_24747] = 4
                        mem[_24747 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                        _25032 = mem[64]
                        mem[mem[64]] = 96
                        _25682 = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                        mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                        idx = 0
                        s = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192
                        t = mem[64] + 128
                        while idx < _25682:
                            _36779 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_36779 + 32]
                            mem[t + 64] = mem[_36779 + 64]
                            mem[t + 96] = mem[_36779 + 96]
                            mem[t + 128] = mem[_36779 + 128]
                            mem[t + 160] = mem[_36779 + 172 len 20]
                            mem[t + 192] = mem[_36779 + 192]
                            mem[t + 224] = mem[_36779 + 236 len 20]
                            mem[t + 256] = bool(mem[_36779 + 256])
                            mem[t + 288] = mem[_36779 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_25032 + 32] = 0
                        mem[_25032 + 64] = (320 * _25682) + 128
                        _38108 = mem[_24747]
                        mem[_25032 + (320 * _25682) + 128] = mem[_24747]
                        mem[_25032 + (320 * _25682) + 160 len ceil32(_38108)] = mem[_24747 + 32 len ceil32(_38108)]
                        if ceil32(_38108) > _38108:
                            mem[_25032 + (320 * _25682) + _38108 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_38108) + _25032 + (320 * _25682) + -mem[64] + 160
                    _25683 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_25683] = 7
                    mem[_25683 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                    _26531 = mem[64]
                    mem[mem[64]] = 96
                    _27059 = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                    mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                    idx = 0
                    s = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192
                    t = mem[64] + 128
                    while idx < _27059:
                        _36786 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_36786 + 32]
                        mem[t + 64] = mem[_36786 + 64]
                        mem[t + 96] = mem[_36786 + 96]
                        mem[t + 128] = mem[_36786 + 128]
                        mem[t + 160] = mem[_36786 + 172 len 20]
                        mem[t + 192] = mem[_36786 + 192]
                        mem[t + 224] = mem[_36786 + 236 len 20]
                        mem[t + 256] = bool(mem[_36786 + 256])
                        mem[t + 288] = mem[_36786 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_26531 + 32] = -1
                    mem[_26531 + 64] = (320 * _27059) + 128
                    _38109 = mem[_25683]
                    mem[_26531 + (320 * _27059) + 128] = mem[_25683]
                    mem[_26531 + (320 * _27059) + 160 len ceil32(_38109)] = mem[_25683 + 32 len ceil32(_38109)]
                    if ceil32(_38109) > _38109:
                        mem[_26531 + (320 * _27059) + _38109 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_38109) + _26531 + (320 * _27059) + -mem[64] + 160
                if stor15[address(arg5)].field_0 < stor15[address(arg5)].field_0 - 1:
                    revert with 0, 17
                if arg2 > 1:
                    if stor15[address(arg5)].field_0 < stor15[address(arg5)].field_0 - 1:
                        revert with 0, 17
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160] = 1
                    mem[64] = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 544
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 224] = 0
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 256] = 0
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 288] = 0
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 320] = 0
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 352] = 0
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 384] = 0
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 416] = 0
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 448] = 0
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 480] = 0
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 512] = 0
                    mem[var37001] = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 224
                    s = var37001
                    idx = var37002
                    while idx - 1:
                        mem[64] = mem[64] + 320
                        mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 224] = 0
                        mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 256] = 0
                        mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 288] = 0
                        mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 320] = 0
                        mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 352] = 0
                        mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 384] = 0
                        mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 416] = 0
                        mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 448] = 0
                        mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 480] = 0
                        mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 512] = 0
                        mem[s + 32] = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 224
                        s = s + 32
                        idx = idx - 1
                        continue 
                    idx = 0
                    while idx < 1:
                        if stor15[address(arg5)].field_0 - 1 > !idx:
                            revert with 0, 17
                        if stor15[address(arg5)].field_0 + idx - 1 >= mem[(32 * stor11.length) + 128]:
                            revert with 0, 50
                        mem[0] = mem[(32 * stor15[address(arg5)].field_0 + idx - 1) + (32 * stor11.length) + 160]
                        mem[32] = 12
                        _25697 = sha3(mem[(32 * stor15[address(arg5)].field_0 + idx - 1) + (32 * stor11.length) + 160], 12)
                        _25698 = mem[64]
                        mem[64] = mem[64] + 320
                        mem[_25698] = stor12[mem[(32 * stor15[address(arg5)].field_0 + idx - 1) + (32 * stor11.length) + 160]].field_0
                        mem[_25698 + 32] = stor1[_25697]
                        mem[_25698 + 64] = stor2[_25697]
                        mem[_25698 + 96] = stor3[_25697]
                        mem[_25698 + 128] = stor4[_25697]
                        mem[_25698 + 160] = stor5[_25697]
                        mem[_25698 + 192] = stor6[_25697]
                        mem[_25698 + 224] = stor7[_25697].field_0
                        mem[_25698 + 256] = bool(stor7[_25697].field_160)
                        mem[_25698 + 288] = stor8[_25697]
                        if idx >= mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]:
                            revert with 0, 50
                        mem[(32 * idx) + (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192] = _25698
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if stor15[address(arg5)].field_0 - 1 > !1:
                        revert with 0, 17
                    if stor15[address(arg5)].field_0 - 1 > !1:
                        revert with 0, 17
                    if stor15[address(arg5)].field_0 < mem[(32 * stor11.length) + 128]:
                        _27062 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_27062] = 7
                        mem[_27062 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                        _28094 = mem[64]
                        mem[mem[64]] = 96
                        _28974 = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                        mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                        idx = 0
                        s = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192
                        t = mem[64] + 128
                        while idx < _28974:
                            _36807 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_36807 + 32]
                            mem[t + 64] = mem[_36807 + 64]
                            mem[t + 96] = mem[_36807 + 96]
                            mem[t + 128] = mem[_36807 + 128]
                            mem[t + 160] = mem[_36807 + 172 len 20]
                            mem[t + 192] = mem[_36807 + 192]
                            mem[t + 224] = mem[_36807 + 236 len 20]
                            mem[t + 256] = bool(mem[_36807 + 256])
                            mem[t + 288] = mem[_36807 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_28094 + 32] = stor15[address(arg5)].field_0
                        mem[_28094 + 64] = (320 * _28974) + 128
                        _38112 = mem[_27062]
                        mem[_28094 + (320 * _28974) + 128] = mem[_27062]
                        mem[_28094 + (320 * _28974) + 160 len ceil32(_38112)] = mem[_27062 + 32 len ceil32(_38112)]
                        if ceil32(_38112) > _38112:
                            mem[_28094 + (320 * _28974) + _38112 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_38112) + _28094 + (320 * _28974) + -mem[64] + 160
                    _27063 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_27063] = 4
                    mem[_27063 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                    _28095 = mem[64]
                    mem[mem[64]] = 96
                    _28975 = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                    mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                    idx = 0
                    s = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192
                    t = mem[64] + 128
                    while idx < _28975:
                        _36814 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_36814 + 32]
                        mem[t + 64] = mem[_36814 + 64]
                        mem[t + 96] = mem[_36814 + 96]
                        mem[t + 128] = mem[_36814 + 128]
                        mem[t + 160] = mem[_36814 + 172 len 20]
                        mem[t + 192] = mem[_36814 + 192]
                        mem[t + 224] = mem[_36814 + 236 len 20]
                        mem[t + 256] = bool(mem[_36814 + 256])
                        mem[t + 288] = mem[_36814 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_28095 + 32] = stor15[address(arg5)].field_0
                    mem[_28095 + 64] = (320 * _28975) + 128
                    _38113 = mem[_27063]
                    mem[_28095 + (320 * _28975) + 128] = mem[_27063]
                    mem[_28095 + (320 * _28975) + 160 len ceil32(_38113)] = mem[_27063 + 32 len ceil32(_38113)]
                    if ceil32(_38113) > _38113:
                        mem[_28095 + (320 * _28975) + _38113 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_38113) + _28095 + (320 * _28975) + -mem[64] + 160
                if arg2 > test266151307():
                    revert with 0, 65
                mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160] = arg2
                mem[64] = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 192
                if not arg2:
                    idx = 0
                    while idx < arg2:
                        if stor15[address(arg5)].field_0 - 1 > !idx:
                            revert with 0, 17
                        if stor15[address(arg5)].field_0 + idx - 1 >= mem[(32 * stor11.length) + 128]:
                            revert with 0, 50
                        mem[0] = mem[(32 * stor15[address(arg5)].field_0 + idx - 1) + (32 * stor11.length) + 160]
                        mem[32] = 12
                        _6219 = sha3(mem[(32 * stor15[address(arg5)].field_0 + idx - 1) + (32 * stor11.length) + 160], 12)
                        _6220 = mem[64]
                        mem[64] = mem[64] + 320
                        mem[_6220] = stor12[mem[(32 * stor15[address(arg5)].field_0 + idx - 1) + (32 * stor11.length) + 160]].field_0
                        mem[_6220 + 32] = stor1[_6219]
                        mem[_6220 + 64] = stor2[_6219]
                        mem[_6220 + 96] = stor3[_6219]
                        mem[_6220 + 128] = stor4[_6219]
                        mem[_6220 + 160] = stor5[_6219]
                        mem[_6220 + 192] = stor6[_6219]
                        mem[_6220 + 224] = stor7[_6219].field_0
                        mem[_6220 + 256] = bool(stor7[_6219].field_160)
                        mem[_6220 + 288] = stor8[_6219]
                        if idx >= mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]:
                            revert with 0, 50
                        mem[(32 * idx) + (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192] = _6220
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if stor15[address(arg5)].field_0 - 1 > !arg2:
                        revert with 0, 17
                    if stor15[address(arg5)].field_0 - 1 > !arg2:
                        revert with 0, 17
                    if stor15[address(arg5)].field_0 + arg2 - 1 < mem[(32 * stor11.length) + 128]:
                        _6742 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_6742] = 7
                        mem[_6742 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                        _7409 = mem[64]
                        mem[mem[64]] = 96
                        _7673 = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                        mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                        idx = 0
                        s = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192
                        t = mem[64] + 128
                        while idx < _7673:
                            _11880 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_11880 + 32]
                            mem[t + 64] = mem[_11880 + 64]
                            mem[t + 96] = mem[_11880 + 96]
                            mem[t + 128] = mem[_11880 + 128]
                            mem[t + 160] = mem[_11880 + 172 len 20]
                            mem[t + 192] = mem[_11880 + 192]
                            mem[t + 224] = mem[_11880 + 236 len 20]
                            mem[t + 256] = bool(mem[_11880 + 256])
                            mem[t + 288] = mem[_11880 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_7409 + 32] = stor15[address(arg5)].field_0 + arg2 - 1
                        mem[_7409 + 64] = (320 * _7673) + 128
                        _12236 = mem[_6742]
                        mem[_7409 + (320 * _7673) + 128] = mem[_6742]
                        mem[_7409 + (320 * _7673) + 160 len ceil32(_12236)] = mem[_6742 + 32 len ceil32(_12236)]
                        if ceil32(_12236) > _12236:
                            mem[_7409 + (320 * _7673) + _12236 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_12236) + _7409 + (320 * _7673) + -mem[64] + 160
                    _6743 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_6743] = 4
                    mem[_6743 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                    _7410 = mem[64]
                    mem[mem[64]] = 96
                    _7674 = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                    mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                    idx = 0
                    s = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192
                    t = mem[64] + 128
                    while idx < _7674:
                        _11887 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_11887 + 32]
                        mem[t + 64] = mem[_11887 + 64]
                        mem[t + 96] = mem[_11887 + 96]
                        mem[t + 128] = mem[_11887 + 128]
                        mem[t + 160] = mem[_11887 + 172 len 20]
                        mem[t + 192] = mem[_11887 + 192]
                        mem[t + 224] = mem[_11887 + 236 len 20]
                        mem[t + 256] = bool(mem[_11887 + 256])
                        mem[t + 288] = mem[_11887 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_7410 + 32] = stor15[address(arg5)].field_0 + arg2 - 1
                    mem[_7410 + 64] = (320 * _7674) + 128
                    _12237 = mem[_6743]
                    mem[_7410 + (320 * _7674) + 128] = mem[_6743]
                    mem[_7410 + (320 * _7674) + 160 len ceil32(_12237)] = mem[_6743 + 32 len ceil32(_12237)]
                    if ceil32(_12237) > _12237:
                        mem[_7410 + (320 * _7674) + _12237 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_12237) + _7410 + (320 * _7674) + -mem[64] + 160
                mem[64] = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 512
                mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 192] = 0
                mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224] = 0
                mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 256] = 0
                mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 288] = 0
                mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 320] = 0
                mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 352] = 0
                mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 384] = 0
                mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 416] = 0
                mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 448] = 0
                mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 480] = 0
                mem[var33001] = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 192
                s = var33001
                idx = var33002
                while idx - 1:
                    mem[64] = mem[64] + 320
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 192] = 0
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224] = 0
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 256] = 0
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 288] = 0
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 320] = 0
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 352] = 0
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 384] = 0
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 416] = 0
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 448] = 0
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 480] = 0
                    mem[s + 32] = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 192
                    s = s + 32
                    idx = idx - 1
                    continue 
                idx = 0
                while idx < arg2:
                    if stor15[address(arg5)].field_0 - 1 > !idx:
                        revert with 0, 17
                    if stor15[address(arg5)].field_0 + idx - 1 >= mem[(32 * stor11.length) + 128]:
                        revert with 0, 50
                    mem[0] = mem[(32 * stor15[address(arg5)].field_0 + idx - 1) + (32 * stor11.length) + 160]
                    mem[32] = 12
                    _25691 = sha3(mem[(32 * stor15[address(arg5)].field_0 + idx - 1) + (32 * stor11.length) + 160], 12)
                    _25692 = mem[64]
                    mem[64] = mem[64] + 320
                    mem[_25692] = stor12[mem[(32 * stor15[address(arg5)].field_0 + idx - 1) + (32 * stor11.length) + 160]].field_0
                    mem[_25692 + 32] = stor1[_25691]
                    mem[_25692 + 64] = stor2[_25691]
                    mem[_25692 + 96] = stor3[_25691]
                    mem[_25692 + 128] = stor4[_25691]
                    mem[_25692 + 160] = stor5[_25691]
                    mem[_25692 + 192] = stor6[_25691]
                    mem[_25692 + 224] = stor7[_25691].field_0
                    mem[_25692 + 256] = bool(stor7[_25691].field_160)
                    mem[_25692 + 288] = stor8[_25691]
                    if idx >= mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]:
                        revert with 0, 50
                    mem[(32 * idx) + (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192] = _25692
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
                if stor15[address(arg5)].field_0 - 1 > !arg2:
                    revert with 0, 17
                if stor15[address(arg5)].field_0 - 1 > !arg2:
                    revert with 0, 17
                if stor15[address(arg5)].field_0 + arg2 - 1 < mem[(32 * stor11.length) + 128]:
                    _27060 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_27060] = 7
                    mem[_27060 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                    _28092 = mem[64]
                    mem[mem[64]] = 96
                    _28972 = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                    mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                    idx = 0
                    s = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192
                    t = mem[64] + 128
                    while idx < _28972:
                        _36793 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_36793 + 32]
                        mem[t + 64] = mem[_36793 + 64]
                        mem[t + 96] = mem[_36793 + 96]
                        mem[t + 128] = mem[_36793 + 128]
                        mem[t + 160] = mem[_36793 + 172 len 20]
                        mem[t + 192] = mem[_36793 + 192]
                        mem[t + 224] = mem[_36793 + 236 len 20]
                        mem[t + 256] = bool(mem[_36793 + 256])
                        mem[t + 288] = mem[_36793 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_28092 + 32] = stor15[address(arg5)].field_0 + arg2 - 1
                    mem[_28092 + 64] = (320 * _28972) + 128
                    _38110 = mem[_27060]
                    mem[_28092 + (320 * _28972) + 128] = mem[_27060]
                    mem[_28092 + (320 * _28972) + 160 len ceil32(_38110)] = mem[_27060 + 32 len ceil32(_38110)]
                    if ceil32(_38110) > _38110:
                        mem[_28092 + (320 * _28972) + _38110 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_38110) + _28092 + (320 * _28972) + -mem[64] + 160
                _27061 = mem[64]
                mem[64] = mem[64] + 64
                mem[_27061] = 4
                mem[_27061 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                _28093 = mem[64]
                mem[mem[64]] = 96
                _28973 = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                idx = 0
                s = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192
                t = mem[64] + 128
                while idx < _28973:
                    _36800 = mem[s]
                    mem[t] = mem[mem[s]]
                    mem[t + 32] = mem[_36800 + 32]
                    mem[t + 64] = mem[_36800 + 64]
                    mem[t + 96] = mem[_36800 + 96]
                    mem[t + 128] = mem[_36800 + 128]
                    mem[t + 160] = mem[_36800 + 172 len 20]
                    mem[t + 192] = mem[_36800 + 192]
                    mem[t + 224] = mem[_36800 + 236 len 20]
                    mem[t + 256] = bool(mem[_36800 + 256])
                    mem[t + 288] = mem[_36800 + 288]
                    idx = idx + 1
                    s = s + 32
                    t = t + 320
                    continue 
                mem[_28093 + 32] = stor15[address(arg5)].field_0 + arg2 - 1
                mem[_28093 + 64] = (320 * _28973) + 128
                _38111 = mem[_27061]
                mem[_28093 + (320 * _28973) + 128] = mem[_27061]
                mem[_28093 + (320 * _28973) + 160 len ceil32(_38111)] = mem[_27061 + 32 len ceil32(_38111)]
                if ceil32(_38111) > _38111:
                    mem[_28093 + (320 * _28973) + _38111 + 160] = 0
                return memory
                  from mem[64]
                   len ceil32(_38111) + _28093 + (320 * _28973) + -mem[64] + 160
            mem[0] = sha3(address(arg5), 15)
            mem[(32 * stor11.length) + 160] = stor15[address(arg5)].field_0
            idx = (32 * stor11.length) + 160
            s = 0
            while (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 128 > idx:
                mem[idx + 32] = stor15[address(arg5)][s].field_256
                idx = idx + 32
                s = s + 1
                continue 
            if not stor15[address(arg5)].field_0:
                mem[64] = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 256
                mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192] = 4
                mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 224] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 256] = 96
                _12920 = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 352] = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                idx = 0
                s = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192
                t = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 384
                while idx < mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]:
                    _24524 = mem[s]
                    mem[t] = mem[mem[s]]
                    mem[t + 32] = mem[_24524 + 32]
                    mem[t + 64] = mem[_24524 + 64]
                    mem[t + 96] = mem[_24524 + 96]
                    mem[t + 128] = mem[_24524 + 128]
                    mem[t + 160] = mem[_24524 + 172 len 20]
                    mem[t + 192] = mem[_24524 + 192]
                    mem[t + 224] = mem[_24524 + 236 len 20]
                    mem[t + 256] = bool(mem[_24524 + 256])
                    mem[t + 288] = mem[_24524 + 288]
                    idx = idx + 1
                    s = s + 32
                    t = t + 320
                    continue 
                mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 288] = 0
                mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 320] = (320 * _12920) + 128
                mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (320 * _12920) + 384] = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192]
                mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (320 * _12920) + 416 len ceil32(mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192])] = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 224 len ceil32(mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192])]
                if ceil32(mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192]) > mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192]:
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (320 * _12920) + mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192] + 416] = 0
                return memory
                  from mem[64]
                   len ceil32(mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192]) + (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (320 * _12920) + -mem[64] + 416
            if arg1 < stor15[address(arg5)].field_0:
                if arg3:
                    if arg2 <= arg1:
                        if arg2 > test266151307():
                            revert with 0, 65
                        mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160] = arg2
                        mem[64] = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 192
                        if not arg2:
                            idx = 0
                            while idx < arg2:
                                if arg1 < idx:
                                    revert with 0, 17
                                if arg1 - idx >= mem[(32 * stor11.length) + 128]:
                                    revert with 0, 50
                                mem[0] = mem[(32 * arg1 - idx) + (32 * stor11.length) + 160]
                                mem[32] = 12
                                _25703 = sha3(mem[(32 * arg1 - idx) + (32 * stor11.length) + 160], 12)
                                _25704 = mem[64]
                                mem[64] = mem[64] + 320
                                mem[_25704] = stor12[mem[(32 * arg1 - idx) + (32 * stor11.length) + 160]].field_0
                                mem[_25704 + 32] = stor1[_25703]
                                mem[_25704 + 64] = stor2[_25703]
                                mem[_25704 + 96] = stor3[_25703]
                                mem[_25704 + 128] = stor4[_25703]
                                mem[_25704 + 160] = stor5[_25703]
                                mem[_25704 + 192] = stor6[_25703]
                                mem[_25704 + 224] = stor7[_25703].field_0
                                mem[_25704 + 256] = bool(stor7[_25703].field_160)
                                mem[_25704 + 288] = stor8[_25703]
                                if idx >= mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]:
                                    revert with 0, 50
                                mem[(32 * idx) + (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192] = _25704
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                continue 
                            if arg1 >= arg2:
                                _25701 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_25701] = 7
                                mem[_25701 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                                _26539 = mem[64]
                                mem[mem[64]] = 96
                                _27065 = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                                mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                                idx = 0
                                s = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192
                                t = mem[64] + 128
                                while idx < _27065:
                                    _36828 = mem[s]
                                    mem[t] = mem[mem[s]]
                                    mem[t + 32] = mem[_36828 + 32]
                                    mem[t + 64] = mem[_36828 + 64]
                                    mem[t + 96] = mem[_36828 + 96]
                                    mem[t + 128] = mem[_36828 + 128]
                                    mem[t + 160] = mem[_36828 + 172 len 20]
                                    mem[t + 192] = mem[_36828 + 192]
                                    mem[t + 224] = mem[_36828 + 236 len 20]
                                    mem[t + 256] = bool(mem[_36828 + 256])
                                    mem[t + 288] = mem[_36828 + 288]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 320
                                    continue 
                                mem[_26539 + 32] = arg1 - arg2
                                mem[_26539 + 64] = (320 * _27065) + 128
                                _38115 = mem[_25701]
                                mem[_26539 + (320 * _27065) + 128] = mem[_25701]
                                mem[_26539 + (320 * _27065) + 160 len ceil32(_38115)] = mem[_25701 + 32 len ceil32(_38115)]
                                if ceil32(_38115) > _38115:
                                    mem[_26539 + (320 * _27065) + _38115 + 160] = 0
                                return memory
                                  from mem[64]
                                   len ceil32(_38115) + _26539 + (320 * _27065) + -mem[64] + 160
                            _24748 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_24748] = 4
                            mem[_24748 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                            _25040 = mem[64]
                            mem[mem[64]] = 96
                            _25700 = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                            mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                            idx = 0
                            s = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192
                            t = mem[64] + 128
                            while idx < _25700:
                                _36821 = mem[s]
                                mem[t] = mem[mem[s]]
                                mem[t + 32] = mem[_36821 + 32]
                                mem[t + 64] = mem[_36821 + 64]
                                mem[t + 96] = mem[_36821 + 96]
                                mem[t + 128] = mem[_36821 + 128]
                                mem[t + 160] = mem[_36821 + 172 len 20]
                                mem[t + 192] = mem[_36821 + 192]
                                mem[t + 224] = mem[_36821 + 236 len 20]
                                mem[t + 256] = bool(mem[_36821 + 256])
                                mem[t + 288] = mem[_36821 + 288]
                                idx = idx + 1
                                s = s + 32
                                t = t + 320
                                continue 
                            mem[_25040 + 32] = 0
                            mem[_25040 + 64] = (320 * _25700) + 128
                            _38114 = mem[_24748]
                            mem[_25040 + (320 * _25700) + 128] = mem[_24748]
                            mem[_25040 + (320 * _25700) + 160 len ceil32(_38114)] = mem[_24748 + 32 len ceil32(_38114)]
                            var40001 = ceil32(_38114)
                            if ceil32(_38114) > _38114:
                                mem[_25040 + (320 * _25700) + _38114 + 160] = 0
                            return memory
                              from mem[64]
                               len ceil32(_38114) + _25040 + (320 * _25700) + -mem[64] + 160
                        mem[64] = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 512
                        mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 192] = 0
                        mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224] = 0
                        mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 256] = 0
                        mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 288] = 0
                        mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 320] = 0
                        mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 352] = 0
                        mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 384] = 0
                        mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 416] = 0
                        mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 448] = 0
                        mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 480] = 0
                        mem[var30001] = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 192
                        s = var30001
                        idx = var30002
                        while idx - 1:
                            mem[64] = mem[64] + 320
                            mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 192] = 0
                            mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224] = 0
                            mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 256] = 0
                            mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 288] = 0
                            mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 320] = 0
                            mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 352] = 0
                            mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 384] = 0
                            mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 416] = 0
                            mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 448] = 0
                            mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 480] = 0
                            mem[s + 32] = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 192
                            s = s + 32
                            idx = idx - 1
                            continue 
                        idx = 0
                        while idx < arg2:
                            if arg1 < idx:
                                revert with 0, 17
                            if arg1 - idx >= mem[(32 * stor11.length) + 128]:
                                revert with 0, 50
                            mem[0] = mem[(32 * arg1 - idx) + (32 * stor11.length) + 160]
                            mem[32] = 12
                            _50235 = sha3(mem[(32 * arg1 - idx) + (32 * stor11.length) + 160], 12)
                            _50236 = mem[64]
                            mem[64] = mem[64] + 320
                            mem[_50236] = stor12[mem[(32 * arg1 - idx) + (32 * stor11.length) + 160]].field_0
                            mem[_50236 + 32] = stor1[_50235]
                            mem[_50236 + 64] = stor2[_50235]
                            mem[_50236 + 96] = stor3[_50235]
                            mem[_50236 + 128] = stor4[_50235]
                            mem[_50236 + 160] = stor5[_50235]
                            mem[_50236 + 192] = stor6[_50235]
                            mem[_50236 + 224] = stor7[_50235].field_0
                            mem[_50236 + 256] = bool(stor7[_50235].field_160)
                            mem[_50236 + 288] = stor8[_50235]
                            if idx >= mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]:
                                revert with 0, 50
                            mem[(32 * idx) + (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192] = _50236
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            continue 
                        if arg1 < arg2:
                            _49258 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_49258] = 4
                            mem[_49258 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                            _49550 = mem[64]
                            mem[mem[64]] = 96
                            _50232 = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                            mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                            idx = 0
                            s = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192
                            t = mem[64] + 128
                            while idx < _50232:
                                _58430 = mem[s]
                                mem[t] = mem[mem[s]]
                                mem[t + 32] = mem[_58430 + 32]
                                mem[t + 64] = mem[_58430 + 64]
                                mem[t + 96] = mem[_58430 + 96]
                                mem[t + 128] = mem[_58430 + 128]
                                mem[t + 160] = mem[_58430 + 172 len 20]
                                mem[t + 192] = mem[_58430 + 192]
                                mem[t + 224] = mem[_58430 + 236 len 20]
                                mem[t + 256] = bool(mem[_58430 + 256])
                                mem[t + 288] = mem[_58430 + 288]
                                idx = idx + 1
                                s = s + 32
                                t = t + 320
                                continue 
                            mem[_49550 + 32] = 0
                            mem[_49550 + 64] = (320 * _50232) + 128
                            _59972 = mem[_49258]
                            mem[_49550 + (320 * _50232) + 128] = mem[_49258]
                            mem[_49550 + (320 * _50232) + 160 len ceil32(_59972)] = mem[_49258 + 32 len ceil32(_59972)]
                            var47001 = ceil32(_59972)
                            if ceil32(_59972) > _59972:
                                mem[_49550 + (320 * _50232) + _59972 + 160] = 0
                            return memory
                              from mem[64]
                               len ceil32(_59972) + _49550 + (320 * _50232) + -mem[64] + 160
                        _50233 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_50233] = 7
                        mem[_50233 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                        _51112 = mem[64]
                        mem[mem[64]] = 96
                        _51633 = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                        mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                        idx = 0
                        s = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192
                        t = mem[64] + 128
                        while idx < _51633:
                            _58437 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_58437 + 32]
                            mem[t + 64] = mem[_58437 + 64]
                            mem[t + 96] = mem[_58437 + 96]
                            mem[t + 128] = mem[_58437 + 128]
                            mem[t + 160] = mem[_58437 + 172 len 20]
                            mem[t + 192] = mem[_58437 + 192]
                            mem[t + 224] = mem[_58437 + 236 len 20]
                            mem[t + 256] = bool(mem[_58437 + 256])
                            mem[t + 288] = mem[_58437 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_51112 + 32] = arg1 - arg2
                        mem[_51112 + 64] = (320 * _51633) + 128
                        _59973 = mem[_50233]
                        mem[_51112 + (320 * _51633) + 128] = mem[_50233]
                        mem[_51112 + (320 * _51633) + 160 len ceil32(_59973)] = mem[_50233 + 32 len ceil32(_59973)]
                        var50001 = ceil32(_59973)
                        if ceil32(_59973) > _59973:
                            mem[_51112 + (320 * _51633) + _59973 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_59973) + _51112 + (320 * _51633) + -mem[64] + 160
                    if 1 > !arg1:
                        revert with 0, 17
                    if arg1 + 1 > test266151307():
                        revert with 0, 65
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160] = arg1 + 1
                    mem[64] = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 192
                    if not arg1 + 1:
                        idx = 0
                        while idx < arg1 + 1:
                            if arg1 < idx:
                                revert with 0, 17
                            if arg1 - idx >= mem[(32 * stor11.length) + 128]:
                                revert with 0, 50
                            mem[0] = mem[(32 * arg1 - idx) + (32 * stor11.length) + 160]
                            mem[32] = 12
                            _25709 = sha3(mem[(32 * arg1 - idx) + (32 * stor11.length) + 160], 12)
                            _25710 = mem[64]
                            mem[64] = mem[64] + 320
                            mem[_25710] = stor12[mem[(32 * arg1 - idx) + (32 * stor11.length) + 160]].field_0
                            mem[_25710 + 32] = stor1[_25709]
                            mem[_25710 + 64] = stor2[_25709]
                            mem[_25710 + 96] = stor3[_25709]
                            mem[_25710 + 128] = stor4[_25709]
                            mem[_25710 + 160] = stor5[_25709]
                            mem[_25710 + 192] = stor6[_25709]
                            mem[_25710 + 224] = stor7[_25709].field_0
                            mem[_25710 + 256] = bool(stor7[_25709].field_160)
                            mem[_25710 + 288] = stor8[_25709]
                            if idx >= mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]:
                                revert with 0, 50
                            mem[(32 * idx) + (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192] = _25710
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            continue 
                        if arg1 < arg1 + 1:
                            _24749 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_24749] = 4
                            mem[_24749 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                            _25042 = mem[64]
                            mem[mem[64]] = 96
                            _25706 = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                            mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                            idx = 0
                            s = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192
                            t = mem[64] + 128
                            while idx < _25706:
                                _36835 = mem[s]
                                mem[t] = mem[mem[s]]
                                mem[t + 32] = mem[_36835 + 32]
                                mem[t + 64] = mem[_36835 + 64]
                                mem[t + 96] = mem[_36835 + 96]
                                mem[t + 128] = mem[_36835 + 128]
                                mem[t + 160] = mem[_36835 + 172 len 20]
                                mem[t + 192] = mem[_36835 + 192]
                                mem[t + 224] = mem[_36835 + 236 len 20]
                                mem[t + 256] = bool(mem[_36835 + 256])
                                mem[t + 288] = mem[_36835 + 288]
                                idx = idx + 1
                                s = s + 32
                                t = t + 320
                                continue 
                            mem[_25042 + 32] = 0
                            mem[_25042 + 64] = (320 * _25706) + 128
                            _38116 = mem[_24749]
                            mem[_25042 + (320 * _25706) + 128] = mem[_24749]
                            mem[_25042 + (320 * _25706) + 160 len ceil32(_38116)] = mem[_24749 + 32 len ceil32(_38116)]
                            var44001 = ceil32(_38116)
                            if ceil32(_38116) > _38116:
                                mem[_25042 + (320 * _25706) + _38116 + 160] = 0
                            return memory
                              from mem[64]
                               len ceil32(_38116) + _25042 + (320 * _25706) + -mem[64] + 160
                        _25707 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_25707] = 7
                        mem[_25707 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                        _26548 = mem[64]
                        mem[mem[64]] = 96
                        _27067 = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                        mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                        idx = 0
                        s = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192
                        t = mem[64] + 128
                        while idx < _27067:
                            _36842 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_36842 + 32]
                            mem[t + 64] = mem[_36842 + 64]
                            mem[t + 96] = mem[_36842 + 96]
                            mem[t + 128] = mem[_36842 + 128]
                            mem[t + 160] = mem[_36842 + 172 len 20]
                            mem[t + 192] = mem[_36842 + 192]
                            mem[t + 224] = mem[_36842 + 236 len 20]
                            mem[t + 256] = bool(mem[_36842 + 256])
                            mem[t + 288] = mem[_36842 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_26548 + 32] = -1
                        mem[_26548 + 64] = (320 * _27067) + 128
                        _38117 = mem[_25707]
                        mem[_26548 + (320 * _27067) + 128] = mem[_25707]
                        mem[_26548 + (320 * _27067) + 160 len ceil32(_38117)] = mem[_25707 + 32 len ceil32(_38117)]
                        var47001 = ceil32(_38117)
                        if ceil32(_38117) > _38117:
                            mem[_26548 + (320 * _27067) + _38117 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_38117) + _26548 + (320 * _27067) + -mem[64] + 160
                    mem[64] = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 512
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 192] = 0
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 224] = 0
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 256] = 0
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 288] = 0
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 320] = 0
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 352] = 0
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 384] = 0
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 416] = 0
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 448] = 0
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 480] = 0
                    mem[var34001] = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 192
                    s = var34001
                    idx = var34002
                    while idx - 1:
                        mem[64] = mem[64] + 320
                        mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 192] = 0
                        mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 224] = 0
                        mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 256] = 0
                        mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 288] = 0
                        mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 320] = 0
                        mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 352] = 0
                        mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 384] = 0
                        mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 416] = 0
                        mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 448] = 0
                        mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 480] = 0
                        mem[s + 32] = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 192
                        s = s + 32
                        idx = idx - 1
                        continue 
                    idx = 0
                    while idx < arg1 + 1:
                        if arg1 < idx:
                            revert with 0, 17
                        if arg1 - idx >= mem[(32 * stor11.length) + 128]:
                            revert with 0, 50
                        mem[0] = mem[(32 * arg1 - idx) + (32 * stor11.length) + 160]
                        mem[32] = 12
                        _50243 = sha3(mem[(32 * arg1 - idx) + (32 * stor11.length) + 160], 12)
                        _50244 = mem[64]
                        mem[64] = mem[64] + 320
                        mem[_50244] = stor12[mem[(32 * arg1 - idx) + (32 * stor11.length) + 160]].field_0
                        mem[_50244 + 32] = stor1[_50243]
                        mem[_50244 + 64] = stor2[_50243]
                        mem[_50244 + 96] = stor3[_50243]
                        mem[_50244 + 128] = stor4[_50243]
                        mem[_50244 + 160] = stor5[_50243]
                        mem[_50244 + 192] = stor6[_50243]
                        mem[_50244 + 224] = stor7[_50243].field_0
                        mem[_50244 + 256] = bool(stor7[_50243].field_160)
                        mem[_50244 + 288] = stor8[_50243]
                        if idx >= mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]:
                            revert with 0, 50
                        mem[(32 * idx) + (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192] = _50244
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if arg1 >= arg1 + 1:
                        _50241 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_50241] = 7
                        mem[_50241 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                        _51120 = mem[64]
                        mem[mem[64]] = 96
                        _51635 = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                        mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                        idx = 0
                        s = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192
                        t = mem[64] + 128
                        while idx < _51635:
                            _58451 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_58451 + 32]
                            mem[t + 64] = mem[_58451 + 64]
                            mem[t + 96] = mem[_58451 + 96]
                            mem[t + 128] = mem[_58451 + 128]
                            mem[t + 160] = mem[_58451 + 172 len 20]
                            mem[t + 192] = mem[_58451 + 192]
                            mem[t + 224] = mem[_58451 + 236 len 20]
                            mem[t + 256] = bool(mem[_58451 + 256])
                            mem[t + 288] = mem[_58451 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_51120 + 32] = -1
                        mem[_51120 + 64] = (320 * _51635) + 128
                        _59975 = mem[_50241]
                        mem[_51120 + (320 * _51635) + 128] = mem[_50241]
                        mem[_51120 + (320 * _51635) + 160 len ceil32(_59975)] = mem[_50241 + 32 len ceil32(_59975)]
                        if ceil32(_59975) > _59975:
                            mem[_51120 + (320 * _51635) + _59975 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_59975) + _51120 + (320 * _51635) + -mem[64] + 160
                    _49259 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_49259] = 4
                    mem[_49259 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                    _49554 = mem[64]
                    mem[mem[64]] = 96
                    _50240 = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                    mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                    idx = 0
                    s = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192
                    t = mem[64] + 128
                    while idx < _50240:
                        _58444 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_58444 + 32]
                        mem[t + 64] = mem[_58444 + 64]
                        mem[t + 96] = mem[_58444 + 96]
                        mem[t + 128] = mem[_58444 + 128]
                        mem[t + 160] = mem[_58444 + 172 len 20]
                        mem[t + 192] = mem[_58444 + 192]
                        mem[t + 224] = mem[_58444 + 236 len 20]
                        mem[t + 256] = bool(mem[_58444 + 256])
                        mem[t + 288] = mem[_58444 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_49554 + 32] = 0
                    mem[_49554 + 64] = (320 * _50240) + 128
                    _59974 = mem[_49259]
                    mem[_49554 + (320 * _50240) + 128] = mem[_49259]
                    mem[_49554 + (320 * _50240) + 160 len ceil32(_59974)] = mem[_49259 + 32 len ceil32(_59974)]
                    var51001 = ceil32(_59974)
                    if ceil32(_59974) > _59974:
                        mem[_49554 + (320 * _50240) + _59974 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_59974) + _49554 + (320 * _50240) + -mem[64] + 160
                if stor15[address(arg5)].field_0 < arg1:
                    revert with 0, 17
                if arg2 <= stor15[address(arg5)].field_0 - arg1:
                    if arg2 > test266151307():
                        revert with 0, 65
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160] = arg2
                    mem[64] = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 192
                    if not arg2:
                        idx = 0
                        while idx < arg2:
                            if arg1 > !idx:
                                revert with 0, 17
                            if arg1 + idx >= mem[(32 * stor11.length) + 128]:
                                revert with 0, 50
                            mem[0] = mem[(32 * arg1 + idx) + (32 * stor11.length) + 160]
                            mem[32] = 12
                            _25713 = sha3(mem[(32 * arg1 + idx) + (32 * stor11.length) + 160], 12)
                            _25714 = mem[64]
                            mem[64] = mem[64] + 320
                            mem[_25714] = stor12[mem[(32 * arg1 + idx) + (32 * stor11.length) + 160]].field_0
                            mem[_25714 + 32] = stor1[_25713]
                            mem[_25714 + 64] = stor2[_25713]
                            mem[_25714 + 96] = stor3[_25713]
                            mem[_25714 + 128] = stor4[_25713]
                            mem[_25714 + 160] = stor5[_25713]
                            mem[_25714 + 192] = stor6[_25713]
                            mem[_25714 + 224] = stor7[_25713].field_0
                            mem[_25714 + 256] = bool(stor7[_25713].field_160)
                            mem[_25714 + 288] = stor8[_25713]
                            if idx >= mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]:
                                revert with 0, 50
                            mem[(32 * idx) + (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192] = _25714
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            continue 
                        if arg1 > !arg2:
                            revert with 0, 17
                        if arg1 > !arg2:
                            revert with 0, 17
                        if arg1 + arg2 < mem[(32 * stor11.length) + 128]:
                            _27068 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_27068] = 7
                            mem[_27068 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                            _28124 = mem[64]
                            mem[mem[64]] = 96
                            _28980 = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                            mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                            idx = 0
                            s = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192
                            t = mem[64] + 128
                            while idx < _28980:
                                _36849 = mem[s]
                                mem[t] = mem[mem[s]]
                                mem[t + 32] = mem[_36849 + 32]
                                mem[t + 64] = mem[_36849 + 64]
                                mem[t + 96] = mem[_36849 + 96]
                                mem[t + 128] = mem[_36849 + 128]
                                mem[t + 160] = mem[_36849 + 172 len 20]
                                mem[t + 192] = mem[_36849 + 192]
                                mem[t + 224] = mem[_36849 + 236 len 20]
                                mem[t + 256] = bool(mem[_36849 + 256])
                                mem[t + 288] = mem[_36849 + 288]
                                idx = idx + 1
                                s = s + 32
                                t = t + 320
                                continue 
                            mem[_28124 + 32] = arg1 + arg2
                            mem[_28124 + 64] = (320 * _28980) + 128
                            _38118 = mem[_27068]
                            mem[_28124 + (320 * _28980) + 128] = mem[_27068]
                            mem[_28124 + (320 * _28980) + 160 len ceil32(_38118)] = mem[_27068 + 32 len ceil32(_38118)]
                            var49001 = ceil32(_38118)
                            if ceil32(_38118) > _38118:
                                mem[_28124 + (320 * _28980) + _38118 + 160] = 0
                            return memory
                              from mem[64]
                               len ceil32(_38118) + _28124 + (320 * _28980) + -mem[64] + 160
                        _27069 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_27069] = 4
                        mem[_27069 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                        _28125 = mem[64]
                        mem[mem[64]] = 96
                        _28981 = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                        mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                        idx = 0
                        s = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192
                        t = mem[64] + 128
                        while idx < _28981:
                            _36856 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_36856 + 32]
                            mem[t + 64] = mem[_36856 + 64]
                            mem[t + 96] = mem[_36856 + 96]
                            mem[t + 128] = mem[_36856 + 128]
                            mem[t + 160] = mem[_36856 + 172 len 20]
                            mem[t + 192] = mem[_36856 + 192]
                            mem[t + 224] = mem[_36856 + 236 len 20]
                            mem[t + 256] = bool(mem[_36856 + 256])
                            mem[t + 288] = mem[_36856 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_28125 + 32] = arg1 + arg2
                        mem[_28125 + 64] = (320 * _28981) + 128
                        _38119 = mem[_27069]
                        mem[_28125 + (320 * _28981) + 128] = mem[_27069]
                        mem[_28125 + (320 * _28981) + 160 len ceil32(_38119)] = mem[_27069 + 32 len ceil32(_38119)]
                        var49001 = ceil32(_38119)
                        if ceil32(_38119) > _38119:
                            mem[_28125 + (320 * _28981) + _38119 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_38119) + _28125 + (320 * _28981) + -mem[64] + 160
                    mem[64] = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 512
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 192] = 0
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224] = 0
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 256] = 0
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 288] = 0
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 320] = 0
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 352] = 0
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 384] = 0
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 416] = 0
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 448] = 0
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 480] = 0
                    mem[var33001] = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 192
                    s = var33001
                    idx = var33002
                    while idx - 1:
                        mem[64] = mem[64] + 320
                        mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 192] = 0
                        mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224] = 0
                        mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 256] = 0
                        mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 288] = 0
                        mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 320] = 0
                        mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 352] = 0
                        mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 384] = 0
                        mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 416] = 0
                        mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 448] = 0
                        mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 480] = 0
                        mem[s + 32] = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 192
                        s = s + 32
                        idx = idx - 1
                        continue 
                    idx = 0
                    while idx < arg2:
                        if arg1 > !idx:
                            revert with 0, 17
                        if arg1 + idx >= mem[(32 * stor11.length) + 128]:
                            revert with 0, 50
                        mem[0] = mem[(32 * arg1 + idx) + (32 * stor11.length) + 160]
                        mem[32] = 12
                        _50249 = sha3(mem[(32 * arg1 + idx) + (32 * stor11.length) + 160], 12)
                        _50250 = mem[64]
                        mem[64] = mem[64] + 320
                        mem[_50250] = stor12[mem[(32 * arg1 + idx) + (32 * stor11.length) + 160]].field_0
                        mem[_50250 + 32] = stor1[_50249]
                        mem[_50250 + 64] = stor2[_50249]
                        mem[_50250 + 96] = stor3[_50249]
                        mem[_50250 + 128] = stor4[_50249]
                        mem[_50250 + 160] = stor5[_50249]
                        mem[_50250 + 192] = stor6[_50249]
                        mem[_50250 + 224] = stor7[_50249].field_0
                        mem[_50250 + 256] = bool(stor7[_50249].field_160)
                        mem[_50250 + 288] = stor8[_50249]
                        if idx >= mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]:
                            revert with 0, 50
                        mem[(32 * idx) + (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192] = _50250
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if arg1 > !arg2:
                        revert with 0, 17
                    if arg1 > !arg2:
                        revert with 0, 17
                    if arg1 + arg2 < mem[(32 * stor11.length) + 128]:
                        _51636 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_51636] = 7
                        mem[_51636 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                        _52317 = mem[64]
                        mem[mem[64]] = 96
                        _53105 = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                        mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                        idx = 0
                        s = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192
                        t = mem[64] + 128
                        while idx < _53105:
                            _58458 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_58458 + 32]
                            mem[t + 64] = mem[_58458 + 64]
                            mem[t + 96] = mem[_58458 + 96]
                            mem[t + 128] = mem[_58458 + 128]
                            mem[t + 160] = mem[_58458 + 172 len 20]
                            mem[t + 192] = mem[_58458 + 192]
                            mem[t + 224] = mem[_58458 + 236 len 20]
                            mem[t + 256] = bool(mem[_58458 + 256])
                            mem[t + 288] = mem[_58458 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_52317 + 32] = arg1 + arg2
                        mem[_52317 + 64] = (320 * _53105) + 128
                        _59976 = mem[_51636]
                        mem[_52317 + (320 * _53105) + 128] = mem[_51636]
                        mem[_52317 + (320 * _53105) + 160 len ceil32(_59976)] = mem[_51636 + 32 len ceil32(_59976)]
                        var56001 = ceil32(_59976)
                        if ceil32(_59976) > _59976:
                            mem[_52317 + (320 * _53105) + _59976 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_59976) + _52317 + (320 * _53105) + -mem[64] + 160
                    _51637 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_51637] = 4
                    mem[_51637 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                    _52318 = mem[64]
                    mem[mem[64]] = 96
                    _53106 = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                    mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                    idx = 0
                    s = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192
                    t = mem[64] + 128
                    while idx < _53106:
                        _58465 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_58465 + 32]
                        mem[t + 64] = mem[_58465 + 64]
                        mem[t + 96] = mem[_58465 + 96]
                        mem[t + 128] = mem[_58465 + 128]
                        mem[t + 160] = mem[_58465 + 172 len 20]
                        mem[t + 192] = mem[_58465 + 192]
                        mem[t + 224] = mem[_58465 + 236 len 20]
                        mem[t + 256] = bool(mem[_58465 + 256])
                        mem[t + 288] = mem[_58465 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_52318 + 32] = arg1 + arg2
                    mem[_52318 + 64] = (320 * _53106) + 128
                    _59977 = mem[_51637]
                    mem[_52318 + (320 * _53106) + 128] = mem[_51637]
                    mem[_52318 + (320 * _53106) + 160 len ceil32(_59977)] = mem[_51637 + 32 len ceil32(_59977)]
                    var56001 = ceil32(_59977)
                    if ceil32(_59977) > _59977:
                        mem[_52318 + (320 * _53106) + _59977 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_59977) + _52318 + (320 * _53106) + -mem[64] + 160
                if stor15[address(arg5)].field_0 < arg1:
                    revert with 0, 17
                if stor15[address(arg5)].field_0 - arg1 > test266151307():
                    revert with 0, 65
                mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160] = stor15[address(arg5)].field_0 - arg1
                mem[64] = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 192
                if not stor15[address(arg5)].field_0 - arg1:
                    idx = 0
                    while idx < stor15[address(arg5)].field_0 - arg1:
                        if arg1 > !idx:
                            revert with 0, 17
                        if arg1 + idx >= mem[(32 * stor11.length) + 128]:
                            revert with 0, 50
                        mem[0] = mem[(32 * arg1 + idx) + (32 * stor11.length) + 160]
                        mem[32] = 12
                        _25717 = sha3(mem[(32 * arg1 + idx) + (32 * stor11.length) + 160], 12)
                        _25718 = mem[64]
                        mem[64] = mem[64] + 320
                        mem[_25718] = stor12[mem[(32 * arg1 + idx) + (32 * stor11.length) + 160]].field_0
                        mem[_25718 + 32] = stor1[_25717]
                        mem[_25718 + 64] = stor2[_25717]
                        mem[_25718 + 96] = stor3[_25717]
                        mem[_25718 + 128] = stor4[_25717]
                        mem[_25718 + 160] = stor5[_25717]
                        mem[_25718 + 192] = stor6[_25717]
                        mem[_25718 + 224] = stor7[_25717].field_0
                        mem[_25718 + 256] = bool(stor7[_25717].field_160)
                        mem[_25718 + 288] = stor8[_25717]
                        if idx >= mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]:
                            revert with 0, 50
                        mem[(32 * idx) + (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192] = _25718
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if arg1 > !(stor15[address(arg5)].field_0 - arg1):
                        revert with 0, 17
                    if arg1 > !(stor15[address(arg5)].field_0 - arg1):
                        revert with 0, 17
                    if stor15[address(arg5)].field_0 < mem[(32 * stor11.length) + 128]:
                        _27070 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_27070] = 7
                        mem[_27070 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                        _28130 = mem[64]
                        mem[mem[64]] = 96
                        _28982 = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                        mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                        idx = 0
                        s = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192
                        t = mem[64] + 128
                        while idx < _28982:
                            _36863 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_36863 + 32]
                            mem[t + 64] = mem[_36863 + 64]
                            mem[t + 96] = mem[_36863 + 96]
                            mem[t + 128] = mem[_36863 + 128]
                            mem[t + 160] = mem[_36863 + 172 len 20]
                            mem[t + 192] = mem[_36863 + 192]
                            mem[t + 224] = mem[_36863 + 236 len 20]
                            mem[t + 256] = bool(mem[_36863 + 256])
                            mem[t + 288] = mem[_36863 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_28130 + 32] = stor15[address(arg5)].field_0
                        mem[_28130 + 64] = (320 * _28982) + 128
                        _38120 = mem[_27070]
                        mem[_28130 + (320 * _28982) + 128] = mem[_27070]
                        mem[_28130 + (320 * _28982) + 160 len ceil32(_38120)] = mem[_27070 + 32 len ceil32(_38120)]
                        var53001 = ceil32(_38120)
                        if ceil32(_38120) > _38120:
                            mem[_28130 + (320 * _28982) + _38120 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_38120) + _28130 + (320 * _28982) + -mem[64] + 160
                    _27071 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_27071] = 4
                    mem[_27071 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                    _28131 = mem[64]
                    mem[mem[64]] = 96
                    _28983 = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                    mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                    idx = 0
                    s = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192
                    t = mem[64] + 128
                    while idx < _28983:
                        _36870 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_36870 + 32]
                        mem[t + 64] = mem[_36870 + 64]
                        mem[t + 96] = mem[_36870 + 96]
                        mem[t + 128] = mem[_36870 + 128]
                        mem[t + 160] = mem[_36870 + 172 len 20]
                        mem[t + 192] = mem[_36870 + 192]
                        mem[t + 224] = mem[_36870 + 236 len 20]
                        mem[t + 256] = bool(mem[_36870 + 256])
                        mem[t + 288] = mem[_36870 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_28131 + 32] = stor15[address(arg5)].field_0
                    mem[_28131 + 64] = (320 * _28983) + 128
                    _38121 = mem[_27071]
                    mem[_28131 + (320 * _28983) + 128] = mem[_27071]
                    mem[_28131 + (320 * _28983) + 160 len ceil32(_38121)] = mem[_27071 + 32 len ceil32(_38121)]
                    var53001 = ceil32(_38121)
                    if ceil32(_38121) > _38121:
                        mem[_28131 + (320 * _28983) + _38121 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_38121) + _28131 + (320 * _28983) + -mem[64] + 160
                mem[64] = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 512
                mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 192] = 0
                mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 224] = 0
                mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 256] = 0
                mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 288] = 0
                mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 320] = 0
                mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 352] = 0
                mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 384] = 0
                mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 416] = 0
                mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 448] = 0
                mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 480] = 0
                mem[var37001] = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 192
                s = var37001
                idx = var37002
                while idx - 1:
                    mem[64] = mem[64] + 320
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 192] = 0
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 224] = 0
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 256] = 0
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 288] = 0
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 320] = 0
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 352] = 0
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 384] = 0
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 416] = 0
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 448] = 0
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 480] = 0
                    mem[s + 32] = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 192
                    s = s + 32
                    idx = idx - 1
                    continue 
                idx = 0
                while idx < stor15[address(arg5)].field_0 - arg1:
                    if arg1 > !idx:
                        revert with 0, 17
                    if arg1 + idx >= mem[(32 * stor11.length) + 128]:
                        revert with 0, 50
                    mem[0] = mem[(32 * arg1 + idx) + (32 * stor11.length) + 160]
                    mem[32] = 12
                    _50255 = sha3(mem[(32 * arg1 + idx) + (32 * stor11.length) + 160], 12)
                    _50256 = mem[64]
                    mem[64] = mem[64] + 320
                    mem[_50256] = stor12[mem[(32 * arg1 + idx) + (32 * stor11.length) + 160]].field_0
                    mem[_50256 + 32] = stor1[_50255]
                    mem[_50256 + 64] = stor2[_50255]
                    mem[_50256 + 96] = stor3[_50255]
                    mem[_50256 + 128] = stor4[_50255]
                    mem[_50256 + 160] = stor5[_50255]
                    mem[_50256 + 192] = stor6[_50255]
                    mem[_50256 + 224] = stor7[_50255].field_0
                    mem[_50256 + 256] = bool(stor7[_50255].field_160)
                    mem[_50256 + 288] = stor8[_50255]
                    if idx >= mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]:
                        revert with 0, 50
                    mem[(32 * idx) + (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192] = _50256
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
                if arg1 > !(stor15[address(arg5)].field_0 - arg1):
                    revert with 0, 17
                if arg1 > !(stor15[address(arg5)].field_0 - arg1):
                    revert with 0, 17
                if stor15[address(arg5)].field_0 < mem[(32 * stor11.length) + 128]:
                    _51638 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_51638] = 7
                    mem[_51638 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                    _52319 = mem[64]
                    mem[mem[64]] = 96
                    _53107 = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                    mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                    idx = 0
                    s = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192
                    t = mem[64] + 128
                    while idx < _53107:
                        _58472 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_58472 + 32]
                        mem[t + 64] = mem[_58472 + 64]
                        mem[t + 96] = mem[_58472 + 96]
                        mem[t + 128] = mem[_58472 + 128]
                        mem[t + 160] = mem[_58472 + 172 len 20]
                        mem[t + 192] = mem[_58472 + 192]
                        mem[t + 224] = mem[_58472 + 236 len 20]
                        mem[t + 256] = bool(mem[_58472 + 256])
                        mem[t + 288] = mem[_58472 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_52319 + 32] = stor15[address(arg5)].field_0
                    mem[_52319 + 64] = (320 * _53107) + 128
                    _59978 = mem[_51638]
                    mem[_52319 + (320 * _53107) + 128] = mem[_51638]
                    mem[_52319 + (320 * _53107) + 160 len ceil32(_59978)] = mem[_51638 + 32 len ceil32(_59978)]
                    var60001 = ceil32(_59978)
                    if ceil32(_59978) > _59978:
                        mem[_52319 + (320 * _53107) + _59978 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_59978) + _52319 + (320 * _53107) + -mem[64] + 160
                _51639 = mem[64]
                mem[64] = mem[64] + 64
                mem[_51639] = 4
                mem[_51639 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                _52320 = mem[64]
                mem[mem[64]] = 96
                _53108 = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                idx = 0
                s = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192
                t = mem[64] + 128
                while idx < _53108:
                    _58479 = mem[s]
                    mem[t] = mem[mem[s]]
                    mem[t + 32] = mem[_58479 + 32]
                    mem[t + 64] = mem[_58479 + 64]
                    mem[t + 96] = mem[_58479 + 96]
                    mem[t + 128] = mem[_58479 + 128]
                    mem[t + 160] = mem[_58479 + 172 len 20]
                    mem[t + 192] = mem[_58479 + 192]
                    mem[t + 224] = mem[_58479 + 236 len 20]
                    mem[t + 256] = bool(mem[_58479 + 256])
                    mem[t + 288] = mem[_58479 + 288]
                    idx = idx + 1
                    s = s + 32
                    t = t + 320
                    continue 
                mem[_52320 + 32] = stor15[address(arg5)].field_0
                mem[_52320 + 64] = (320 * _53108) + 128
                _59979 = mem[_51639]
                mem[_52320 + (320 * _53108) + 128] = mem[_51639]
                mem[_52320 + (320 * _53108) + 160 len ceil32(_59979)] = mem[_51639 + 32 len ceil32(_59979)]
                var60001 = ceil32(_59979)
                if ceil32(_59979) > _59979:
                    mem[_52320 + (320 * _53108) + _59979 + 160] = 0
                return memory
                  from mem[64]
                   len ceil32(_59979) + _52320 + (320 * _53108) + -mem[64] + 160
            if stor15[address(arg5)].field_0 < 1:
                revert with 0, 17
            if arg3:
                if arg2 <= stor15[address(arg5)].field_0 - 1:
                    if arg2 > test266151307():
                        revert with 0, 65
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160] = arg2
                    mem[64] = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 192
                    if not arg2:
                        idx = 0
                        while idx < arg2:
                            if stor15[address(arg5)].field_0 - 1 < idx:
                                revert with 0, 17
                            if stor15[address(arg5)].field_0 + -idx - 1 >= mem[(32 * stor11.length) + 128]:
                                revert with 0, 50
                            mem[0] = mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + 160]
                            mem[32] = 12
                            _25723 = sha3(mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + 160], 12)
                            _25724 = mem[64]
                            mem[64] = mem[64] + 320
                            mem[_25724] = stor12[mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + 160]].field_0
                            mem[_25724 + 32] = stor1[_25723]
                            mem[_25724 + 64] = stor2[_25723]
                            mem[_25724 + 96] = stor3[_25723]
                            mem[_25724 + 128] = stor4[_25723]
                            mem[_25724 + 160] = stor5[_25723]
                            mem[_25724 + 192] = stor6[_25723]
                            mem[_25724 + 224] = stor7[_25723].field_0
                            mem[_25724 + 256] = bool(stor7[_25723].field_160)
                            mem[_25724 + 288] = stor8[_25723]
                            if idx >= mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]:
                                revert with 0, 50
                            mem[(32 * idx) + (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192] = _25724
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            continue 
                        if stor15[address(arg5)].field_0 - 1 < arg2:
                            _24750 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_24750] = 4
                            mem[_24750 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                            _25046 = mem[64]
                            mem[mem[64]] = 96
                            _25720 = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                            mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                            idx = 0
                            s = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192
                            t = mem[64] + 128
                            while idx < _25720:
                                _36877 = mem[s]
                                mem[t] = mem[mem[s]]
                                mem[t + 32] = mem[_36877 + 32]
                                mem[t + 64] = mem[_36877 + 64]
                                mem[t + 96] = mem[_36877 + 96]
                                mem[t + 128] = mem[_36877 + 128]
                                mem[t + 160] = mem[_36877 + 172 len 20]
                                mem[t + 192] = mem[_36877 + 192]
                                mem[t + 224] = mem[_36877 + 236 len 20]
                                mem[t + 256] = bool(mem[_36877 + 256])
                                mem[t + 288] = mem[_36877 + 288]
                                idx = idx + 1
                                s = s + 32
                                t = t + 320
                                continue 
                            mem[_25046 + 32] = 0
                            mem[_25046 + 64] = (320 * _25720) + 128
                            _38122 = mem[_24750]
                            mem[_25046 + (320 * _25720) + 128] = mem[_24750]
                            mem[_25046 + (320 * _25720) + 160 len ceil32(_38122)] = mem[_24750 + 32 len ceil32(_38122)]
                            var44001 = ceil32(_38122)
                            if ceil32(_38122) > _38122:
                                mem[_25046 + (320 * _25720) + _38122 + 160] = 0
                            return memory
                              from mem[64]
                               len ceil32(_38122) + _25046 + (320 * _25720) + -mem[64] + 160
                        _25721 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_25721] = 7
                        mem[_25721 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                        _26557 = mem[64]
                        mem[mem[64]] = 96
                        _27073 = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                        mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                        idx = 0
                        s = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192
                        t = mem[64] + 128
                        while idx < _27073:
                            _36884 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_36884 + 32]
                            mem[t + 64] = mem[_36884 + 64]
                            mem[t + 96] = mem[_36884 + 96]
                            mem[t + 128] = mem[_36884 + 128]
                            mem[t + 160] = mem[_36884 + 172 len 20]
                            mem[t + 192] = mem[_36884 + 192]
                            mem[t + 224] = mem[_36884 + 236 len 20]
                            mem[t + 256] = bool(mem[_36884 + 256])
                            mem[t + 288] = mem[_36884 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_26557 + 32] = stor15[address(arg5)].field_0 + -arg2 - 1
                        mem[_26557 + 64] = (320 * _27073) + 128
                        _38123 = mem[_25721]
                        mem[_26557 + (320 * _27073) + 128] = mem[_25721]
                        mem[_26557 + (320 * _27073) + 160 len ceil32(_38123)] = mem[_25721 + 32 len ceil32(_38123)]
                        var47001 = ceil32(_38123)
                        if ceil32(_38123) > _38123:
                            mem[_26557 + (320 * _27073) + _38123 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_38123) + _26557 + (320 * _27073) + -mem[64] + 160
                    mem[64] = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 512
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 192] = 0
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224] = 0
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 256] = 0
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 288] = 0
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 320] = 0
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 352] = 0
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 384] = 0
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 416] = 0
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 448] = 0
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 480] = 0
                    mem[var34001] = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 192
                    s = var34001
                    idx = var34002
                    while idx - 1:
                        mem[64] = mem[64] + 320
                        mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 192] = 0
                        mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224] = 0
                        mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 256] = 0
                        mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 288] = 0
                        mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 320] = 0
                        mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 352] = 0
                        mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 384] = 0
                        mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 416] = 0
                        mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 448] = 0
                        mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 480] = 0
                        mem[s + 32] = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 192
                        s = s + 32
                        idx = idx - 1
                        continue 
                    idx = 0
                    while idx < arg2:
                        if stor15[address(arg5)].field_0 - 1 < idx:
                            revert with 0, 17
                        if stor15[address(arg5)].field_0 + -idx - 1 >= mem[(32 * stor11.length) + 128]:
                            revert with 0, 50
                        mem[0] = mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + 160]
                        mem[32] = 12
                        _50263 = sha3(mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + 160], 12)
                        _50264 = mem[64]
                        mem[64] = mem[64] + 320
                        mem[_50264] = stor12[mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + 160]].field_0
                        mem[_50264 + 32] = stor1[_50263]
                        mem[_50264 + 64] = stor2[_50263]
                        mem[_50264 + 96] = stor3[_50263]
                        mem[_50264 + 128] = stor4[_50263]
                        mem[_50264 + 160] = stor5[_50263]
                        mem[_50264 + 192] = stor6[_50263]
                        mem[_50264 + 224] = stor7[_50263].field_0
                        mem[_50264 + 256] = bool(stor7[_50263].field_160)
                        mem[_50264 + 288] = stor8[_50263]
                        if idx >= mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]:
                            revert with 0, 50
                        mem[(32 * idx) + (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192] = _50264
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if stor15[address(arg5)].field_0 - 1 >= arg2:
                        _50261 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_50261] = 7
                        mem[_50261 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                        _51128 = mem[64]
                        mem[mem[64]] = 96
                        _51641 = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                        mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                        idx = 0
                        s = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192
                        t = mem[64] + 128
                        while idx < _51641:
                            _58493 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_58493 + 32]
                            mem[t + 64] = mem[_58493 + 64]
                            mem[t + 96] = mem[_58493 + 96]
                            mem[t + 128] = mem[_58493 + 128]
                            mem[t + 160] = mem[_58493 + 172 len 20]
                            mem[t + 192] = mem[_58493 + 192]
                            mem[t + 224] = mem[_58493 + 236 len 20]
                            mem[t + 256] = bool(mem[_58493 + 256])
                            mem[t + 288] = mem[_58493 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_51128 + 32] = stor15[address(arg5)].field_0 + -arg2 - 1
                        mem[_51128 + 64] = (320 * _51641) + 128
                        _59981 = mem[_50261]
                        mem[_51128 + (320 * _51641) + 128] = mem[_50261]
                        mem[_51128 + (320 * _51641) + 160 len ceil32(_59981)] = mem[_50261 + 32 len ceil32(_59981)]
                        if ceil32(_59981) > _59981:
                            mem[_51128 + (320 * _51641) + _59981 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_59981) + _51128 + (320 * _51641) + -mem[64] + 160
                    _49260 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_49260] = 4
                    mem[_49260 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                    _49564 = mem[64]
                    mem[mem[64]] = 96
                    _50260 = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                    mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                    idx = 0
                    s = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192
                    t = mem[64] + 128
                    while idx < _50260:
                        _58486 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_58486 + 32]
                        mem[t + 64] = mem[_58486 + 64]
                        mem[t + 96] = mem[_58486 + 96]
                        mem[t + 128] = mem[_58486 + 128]
                        mem[t + 160] = mem[_58486 + 172 len 20]
                        mem[t + 192] = mem[_58486 + 192]
                        mem[t + 224] = mem[_58486 + 236 len 20]
                        mem[t + 256] = bool(mem[_58486 + 256])
                        mem[t + 288] = mem[_58486 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_49564 + 32] = 0
                    mem[_49564 + 64] = (320 * _50260) + 128
                    _59980 = mem[_49260]
                    mem[_49564 + (320 * _50260) + 128] = mem[_49260]
                    mem[_49564 + (320 * _50260) + 160 len ceil32(_59980)] = mem[_49260 + 32 len ceil32(_59980)]
                    var51001 = ceil32(_59980)
                    if ceil32(_59980) > _59980:
                        mem[_49564 + (320 * _50260) + _59980 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_59980) + _49564 + (320 * _50260) + -mem[64] + 160
                if 1 > !(stor15[address(arg5)].field_0 - 1):
                    revert with 0, 17
                if stor15[address(arg5)].field_0 > test266151307():
                    revert with 0, 65
                mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160] = stor15[address(arg5)].field_0
                mem[64] = (32 * stor11.length) + (64 * stor15[address(arg5)].field_0) + 192
                if not stor15[address(arg5)].field_0:
                    idx = 0
                    while idx < stor15[address(arg5)].field_0:
                        if stor15[address(arg5)].field_0 - 1 < idx:
                            revert with 0, 17
                        if stor15[address(arg5)].field_0 + -idx - 1 >= mem[(32 * stor11.length) + 128]:
                            revert with 0, 50
                        mem[0] = mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + 160]
                        mem[32] = 12
                        _25729 = sha3(mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + 160], 12)
                        _25730 = mem[64]
                        mem[64] = mem[64] + 320
                        mem[_25730] = stor12[mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + 160]].field_0
                        mem[_25730 + 32] = stor1[_25729]
                        mem[_25730 + 64] = stor2[_25729]
                        mem[_25730 + 96] = stor3[_25729]
                        mem[_25730 + 128] = stor4[_25729]
                        mem[_25730 + 160] = stor5[_25729]
                        mem[_25730 + 192] = stor6[_25729]
                        mem[_25730 + 224] = stor7[_25729].field_0
                        mem[_25730 + 256] = bool(stor7[_25729].field_160)
                        mem[_25730 + 288] = stor8[_25729]
                        if idx >= mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]:
                            revert with 0, 50
                        mem[(32 * idx) + (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192] = _25730
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if stor15[address(arg5)].field_0 - 1 < stor15[address(arg5)].field_0:
                        _24751 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_24751] = 4
                        mem[_24751 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                        _25048 = mem[64]
                        mem[mem[64]] = 96
                        _25726 = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                        mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                        idx = 0
                        s = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192
                        t = mem[64] + 128
                        while idx < _25726:
                            _36891 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_36891 + 32]
                            mem[t + 64] = mem[_36891 + 64]
                            mem[t + 96] = mem[_36891 + 96]
                            mem[t + 128] = mem[_36891 + 128]
                            mem[t + 160] = mem[_36891 + 172 len 20]
                            mem[t + 192] = mem[_36891 + 192]
                            mem[t + 224] = mem[_36891 + 236 len 20]
                            mem[t + 256] = bool(mem[_36891 + 256])
                            mem[t + 288] = mem[_36891 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_25048 + 32] = 0
                        mem[_25048 + 64] = (320 * _25726) + 128
                        _38124 = mem[_24751]
                        mem[_25048 + (320 * _25726) + 128] = mem[_24751]
                        mem[_25048 + (320 * _25726) + 160 len ceil32(_38124)] = mem[_24751 + 32 len ceil32(_38124)]
                        var48001 = ceil32(_38124)
                        if ceil32(_38124) > _38124:
                            mem[_25048 + (320 * _25726) + _38124 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_38124) + _25048 + (320 * _25726) + -mem[64] + 160
                    _25727 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_25727] = 7
                    mem[_25727 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                    _26566 = mem[64]
                    mem[mem[64]] = 96
                    _27075 = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                    mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                    idx = 0
                    s = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192
                    t = mem[64] + 128
                    while idx < _27075:
                        _36898 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_36898 + 32]
                        mem[t + 64] = mem[_36898 + 64]
                        mem[t + 96] = mem[_36898 + 96]
                        mem[t + 128] = mem[_36898 + 128]
                        mem[t + 160] = mem[_36898 + 172 len 20]
                        mem[t + 192] = mem[_36898 + 192]
                        mem[t + 224] = mem[_36898 + 236 len 20]
                        mem[t + 256] = bool(mem[_36898 + 256])
                        mem[t + 288] = mem[_36898 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_26566 + 32] = -1
                    mem[_26566 + 64] = (320 * _27075) + 128
                    _38125 = mem[_25727]
                    mem[_26566 + (320 * _27075) + 128] = mem[_25727]
                    mem[_26566 + (320 * _27075) + 160 len ceil32(_38125)] = mem[_25727 + 32 len ceil32(_38125)]
                    var51001 = ceil32(_38125)
                    if ceil32(_38125) > _38125:
                        mem[_26566 + (320 * _27075) + _38125 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_38125) + _26566 + (320 * _27075) + -mem[64] + 160
                mem[64] = (32 * stor11.length) + (64 * stor15[address(arg5)].field_0) + 512
                mem[(32 * stor11.length) + (64 * stor15[address(arg5)].field_0) + 192] = 0
                mem[(32 * stor11.length) + (64 * stor15[address(arg5)].field_0) + 224] = 0
                mem[(32 * stor11.length) + (64 * stor15[address(arg5)].field_0) + 256] = 0
                mem[(32 * stor11.length) + (64 * stor15[address(arg5)].field_0) + 288] = 0
                mem[(32 * stor11.length) + (64 * stor15[address(arg5)].field_0) + 320] = 0
                mem[(32 * stor11.length) + (64 * stor15[address(arg5)].field_0) + 352] = 0
                mem[(32 * stor11.length) + (64 * stor15[address(arg5)].field_0) + 384] = 0
                mem[(32 * stor11.length) + (64 * stor15[address(arg5)].field_0) + 416] = 0
                mem[(32 * stor11.length) + (64 * stor15[address(arg5)].field_0) + 448] = 0
                mem[(32 * stor11.length) + (64 * stor15[address(arg5)].field_0) + 480] = 0
                mem[var38001] = (32 * stor11.length) + (64 * stor15[address(arg5)].field_0) + 192
                s = var38001
                idx = var38002
                while idx - 1:
                    mem[64] = mem[64] + 320
                    mem[(32 * stor11.length) + (64 * stor15[address(arg5)].field_0) + 192] = 0
                    mem[(32 * stor11.length) + (64 * stor15[address(arg5)].field_0) + 224] = 0
                    mem[(32 * stor11.length) + (64 * stor15[address(arg5)].field_0) + 256] = 0
                    mem[(32 * stor11.length) + (64 * stor15[address(arg5)].field_0) + 288] = 0
                    mem[(32 * stor11.length) + (64 * stor15[address(arg5)].field_0) + 320] = 0
                    mem[(32 * stor11.length) + (64 * stor15[address(arg5)].field_0) + 352] = 0
                    mem[(32 * stor11.length) + (64 * stor15[address(arg5)].field_0) + 384] = 0
                    mem[(32 * stor11.length) + (64 * stor15[address(arg5)].field_0) + 416] = 0
                    mem[(32 * stor11.length) + (64 * stor15[address(arg5)].field_0) + 448] = 0
                    mem[(32 * stor11.length) + (64 * stor15[address(arg5)].field_0) + 480] = 0
                    mem[s + 32] = (32 * stor11.length) + (64 * stor15[address(arg5)].field_0) + 192
                    s = s + 32
                    idx = idx - 1
                    continue 
                idx = 0
                while idx < stor15[address(arg5)].field_0:
                    if stor15[address(arg5)].field_0 - 1 < idx:
                        revert with 0, 17
                    if stor15[address(arg5)].field_0 + -idx - 1 >= mem[(32 * stor11.length) + 128]:
                        revert with 0, 50
                    mem[0] = mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + 160]
                    mem[32] = 12
                    _50271 = sha3(mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + 160], 12)
                    _50272 = mem[64]
                    mem[64] = mem[64] + 320
                    mem[_50272] = stor12[mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + 160]].field_0
                    mem[_50272 + 32] = stor1[_50271]
                    mem[_50272 + 64] = stor2[_50271]
                    mem[_50272 + 96] = stor3[_50271]
                    mem[_50272 + 128] = stor4[_50271]
                    mem[_50272 + 160] = stor5[_50271]
                    mem[_50272 + 192] = stor6[_50271]
                    mem[_50272 + 224] = stor7[_50271].field_0
                    mem[_50272 + 256] = bool(stor7[_50271].field_160)
                    mem[_50272 + 288] = stor8[_50271]
                    if idx >= mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]:
                        revert with 0, 50
                    mem[(32 * idx) + (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192] = _50272
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
                if stor15[address(arg5)].field_0 - 1 < stor15[address(arg5)].field_0:
                    _49261 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_49261] = 4
                    mem[_49261 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                    _49568 = mem[64]
                    mem[mem[64]] = 96
                    _50268 = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                    mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                    idx = 0
                    s = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192
                    t = mem[64] + 128
                    while idx < _50268:
                        _58500 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_58500 + 32]
                        mem[t + 64] = mem[_58500 + 64]
                        mem[t + 96] = mem[_58500 + 96]
                        mem[t + 128] = mem[_58500 + 128]
                        mem[t + 160] = mem[_58500 + 172 len 20]
                        mem[t + 192] = mem[_58500 + 192]
                        mem[t + 224] = mem[_58500 + 236 len 20]
                        mem[t + 256] = bool(mem[_58500 + 256])
                        mem[t + 288] = mem[_58500 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_49568 + 32] = 0
                    mem[_49568 + 64] = (320 * _50268) + 128
                    _59982 = mem[_49261]
                    mem[_49568 + (320 * _50268) + 128] = mem[_49261]
                    mem[_49568 + (320 * _50268) + 160 len ceil32(_59982)] = mem[_49261 + 32 len ceil32(_59982)]
                    var55001 = ceil32(_59982)
                    if ceil32(_59982) > _59982:
                        mem[_49568 + (320 * _50268) + _59982 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_59982) + _49568 + (320 * _50268) + -mem[64] + 160
                _50269 = mem[64]
                mem[64] = mem[64] + 64
                mem[_50269] = 7
                mem[_50269 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                _51136 = mem[64]
                mem[mem[64]] = 96
                _51643 = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                idx = 0
                s = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192
                t = mem[64] + 128
                while idx < _51643:
                    _58507 = mem[s]
                    mem[t] = mem[mem[s]]
                    mem[t + 32] = mem[_58507 + 32]
                    mem[t + 64] = mem[_58507 + 64]
                    mem[t + 96] = mem[_58507 + 96]
                    mem[t + 128] = mem[_58507 + 128]
                    mem[t + 160] = mem[_58507 + 172 len 20]
                    mem[t + 192] = mem[_58507 + 192]
                    mem[t + 224] = mem[_58507 + 236 len 20]
                    mem[t + 256] = bool(mem[_58507 + 256])
                    mem[t + 288] = mem[_58507 + 288]
                    idx = idx + 1
                    s = s + 32
                    t = t + 320
                    continue 
                mem[_51136 + 32] = -1
                mem[_51136 + 64] = (320 * _51643) + 128
                _59983 = mem[_50269]
                mem[_51136 + (320 * _51643) + 128] = mem[_50269]
                mem[_51136 + (320 * _51643) + 160 len ceil32(_59983)] = mem[_50269 + 32 len ceil32(_59983)]
                var58001 = ceil32(_59983)
                if ceil32(_59983) > _59983:
                    mem[_51136 + (320 * _51643) + _59983 + 160] = 0
                return memory
                  from mem[64]
                   len ceil32(_59983) + _51136 + (320 * _51643) + -mem[64] + 160
            if stor15[address(arg5)].field_0 < stor15[address(arg5)].field_0 - 1:
                revert with 0, 17
            if arg2 > 1:
                if stor15[address(arg5)].field_0 < stor15[address(arg5)].field_0 - 1:
                    revert with 0, 17
                mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160] = 1
                mem[64] = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 544
                mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 224] = 0
                mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 256] = 0
                mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 288] = 0
                mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 320] = 0
                mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 352] = 0
                mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 384] = 0
                mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 416] = 0
                mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 448] = 0
                mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 480] = 0
                mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 512] = 0
                mem[var41001] = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 224
                s = var41001
                idx = var41002
                while idx - 1:
                    mem[64] = mem[64] + 320
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 224] = 0
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 256] = 0
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 288] = 0
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 320] = 0
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 352] = 0
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 384] = 0
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 416] = 0
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 448] = 0
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 480] = 0
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 512] = 0
                    mem[s + 32] = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 224
                    s = s + 32
                    idx = idx - 1
                    continue 
                idx = 0
                while idx < 1:
                    if stor15[address(arg5)].field_0 - 1 > !idx:
                        revert with 0, 17
                    if stor15[address(arg5)].field_0 + idx - 1 >= mem[(32 * stor11.length) + 128]:
                        revert with 0, 50
                    mem[0] = mem[(32 * stor15[address(arg5)].field_0 + idx - 1) + (32 * stor11.length) + 160]
                    mem[32] = 12
                    _50283 = sha3(mem[(32 * stor15[address(arg5)].field_0 + idx - 1) + (32 * stor11.length) + 160], 12)
                    _50284 = mem[64]
                    mem[64] = mem[64] + 320
                    mem[_50284] = stor12[mem[(32 * stor15[address(arg5)].field_0 + idx - 1) + (32 * stor11.length) + 160]].field_0
                    mem[_50284 + 32] = stor1[_50283]
                    mem[_50284 + 64] = stor2[_50283]
                    mem[_50284 + 96] = stor3[_50283]
                    mem[_50284 + 128] = stor4[_50283]
                    mem[_50284 + 160] = stor5[_50283]
                    mem[_50284 + 192] = stor6[_50283]
                    mem[_50284 + 224] = stor7[_50283].field_0
                    mem[_50284 + 256] = bool(stor7[_50283].field_160)
                    mem[_50284 + 288] = stor8[_50283]
                    if idx >= mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]:
                        revert with 0, 50
                    mem[(32 * idx) + (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192] = _50284
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
                if stor15[address(arg5)].field_0 - 1 > !1:
                    revert with 0, 17
                if stor15[address(arg5)].field_0 - 1 > !1:
                    revert with 0, 17
                if stor15[address(arg5)].field_0 < mem[(32 * stor11.length) + 128]:
                    _51646 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_51646] = 7
                    mem[_51646 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                    _52339 = mem[64]
                    mem[mem[64]] = 96
                    _53115 = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                    mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                    idx = 0
                    s = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192
                    t = mem[64] + 128
                    while idx < _53115:
                        _58528 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_58528 + 32]
                        mem[t + 64] = mem[_58528 + 64]
                        mem[t + 96] = mem[_58528 + 96]
                        mem[t + 128] = mem[_58528 + 128]
                        mem[t + 160] = mem[_58528 + 172 len 20]
                        mem[t + 192] = mem[_58528 + 192]
                        mem[t + 224] = mem[_58528 + 236 len 20]
                        mem[t + 256] = bool(mem[_58528 + 256])
                        mem[t + 288] = mem[_58528 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_52339 + 32] = stor15[address(arg5)].field_0
                    mem[_52339 + 64] = (320 * _53115) + 128
                    _59986 = mem[_51646]
                    mem[_52339 + (320 * _53115) + 128] = mem[_51646]
                    mem[_52339 + (320 * _53115) + 160 len ceil32(_59986)] = mem[_51646 + 32 len ceil32(_59986)]
                    if ceil32(_59986) > _59986:
                        mem[_52339 + (320 * _53115) + _59986 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_59986) + _52339 + (320 * _53115) + -mem[64] + 160
                _51647 = mem[64]
                mem[64] = mem[64] + 64
                mem[_51647] = 4
                mem[_51647 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                _52340 = mem[64]
                mem[mem[64]] = 96
                _53116 = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                idx = 0
                s = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192
                t = mem[64] + 128
                while idx < _53116:
                    _58535 = mem[s]
                    mem[t] = mem[mem[s]]
                    mem[t + 32] = mem[_58535 + 32]
                    mem[t + 64] = mem[_58535 + 64]
                    mem[t + 96] = mem[_58535 + 96]
                    mem[t + 128] = mem[_58535 + 128]
                    mem[t + 160] = mem[_58535 + 172 len 20]
                    mem[t + 192] = mem[_58535 + 192]
                    mem[t + 224] = mem[_58535 + 236 len 20]
                    mem[t + 256] = bool(mem[_58535 + 256])
                    mem[t + 288] = mem[_58535 + 288]
                    idx = idx + 1
                    s = s + 32
                    t = t + 320
                    continue 
                mem[_52340 + 32] = stor15[address(arg5)].field_0
                mem[_52340 + 64] = (320 * _53116) + 128
                _59987 = mem[_51647]
                mem[_52340 + (320 * _53116) + 128] = mem[_51647]
                mem[_52340 + (320 * _53116) + 160 len ceil32(_59987)] = mem[_51647 + 32 len ceil32(_59987)]
                if ceil32(_59987) > _59987:
                    mem[_52340 + (320 * _53116) + _59987 + 160] = 0
                return memory
                  from mem[64]
                   len ceil32(_59987) + _52340 + (320 * _53116) + -mem[64] + 160
            if arg2 > test266151307():
                revert with 0, 65
            mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160] = arg2
            mem[64] = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 192
            if not arg2:
                idx = 0
                while idx < arg2:
                    if stor15[address(arg5)].field_0 - 1 > !idx:
                        revert with 0, 17
                    if stor15[address(arg5)].field_0 + idx - 1 >= mem[(32 * stor11.length) + 128]:
                        revert with 0, 50
                    mem[0] = mem[(32 * stor15[address(arg5)].field_0 + idx - 1) + (32 * stor11.length) + 160]
                    mem[32] = 12
                    _25733 = sha3(mem[(32 * stor15[address(arg5)].field_0 + idx - 1) + (32 * stor11.length) + 160], 12)
                    _25734 = mem[64]
                    mem[64] = mem[64] + 320
                    mem[_25734] = stor12[mem[(32 * stor15[address(arg5)].field_0 + idx - 1) + (32 * stor11.length) + 160]].field_0
                    mem[_25734 + 32] = stor1[_25733]
                    mem[_25734 + 64] = stor2[_25733]
                    mem[_25734 + 96] = stor3[_25733]
                    mem[_25734 + 128] = stor4[_25733]
                    mem[_25734 + 160] = stor5[_25733]
                    mem[_25734 + 192] = stor6[_25733]
                    mem[_25734 + 224] = stor7[_25733].field_0
                    mem[_25734 + 256] = bool(stor7[_25733].field_160)
                    mem[_25734 + 288] = stor8[_25733]
                    if idx >= mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]:
                        revert with 0, 50
                    mem[(32 * idx) + (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192] = _25734
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
                if stor15[address(arg5)].field_0 - 1 > !arg2:
                    revert with 0, 17
                if stor15[address(arg5)].field_0 - 1 > !arg2:
                    revert with 0, 17
                if stor15[address(arg5)].field_0 + arg2 - 1 < mem[(32 * stor11.length) + 128]:
                    _27076 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_27076] = 7
                    mem[_27076 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                    _28164 = mem[64]
                    mem[mem[64]] = 96
                    _28988 = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                    mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                    idx = 0
                    s = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192
                    t = mem[64] + 128
                    while idx < _28988:
                        _36905 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_36905 + 32]
                        mem[t + 64] = mem[_36905 + 64]
                        mem[t + 96] = mem[_36905 + 96]
                        mem[t + 128] = mem[_36905 + 128]
                        mem[t + 160] = mem[_36905 + 172 len 20]
                        mem[t + 192] = mem[_36905 + 192]
                        mem[t + 224] = mem[_36905 + 236 len 20]
                        mem[t + 256] = bool(mem[_36905 + 256])
                        mem[t + 288] = mem[_36905 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_28164 + 32] = stor15[address(arg5)].field_0 + arg2 - 1
                    mem[_28164 + 64] = (320 * _28988) + 128
                    _38126 = mem[_27076]
                    mem[_28164 + (320 * _28988) + 128] = mem[_27076]
                    mem[_28164 + (320 * _28988) + 160 len ceil32(_38126)] = mem[_27076 + 32 len ceil32(_38126)]
                    var53001 = ceil32(_38126)
                    if ceil32(_38126) > _38126:
                        mem[_28164 + (320 * _28988) + _38126 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_38126) + _28164 + (320 * _28988) + -mem[64] + 160
                _27077 = mem[64]
                mem[64] = mem[64] + 64
                mem[_27077] = 4
                mem[_27077 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                _28165 = mem[64]
                mem[mem[64]] = 96
                _28989 = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                idx = 0
                s = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192
                t = mem[64] + 128
                while idx < _28989:
                    _36912 = mem[s]
                    mem[t] = mem[mem[s]]
                    mem[t + 32] = mem[_36912 + 32]
                    mem[t + 64] = mem[_36912 + 64]
                    mem[t + 96] = mem[_36912 + 96]
                    mem[t + 128] = mem[_36912 + 128]
                    mem[t + 160] = mem[_36912 + 172 len 20]
                    mem[t + 192] = mem[_36912 + 192]
                    mem[t + 224] = mem[_36912 + 236 len 20]
                    mem[t + 256] = bool(mem[_36912 + 256])
                    mem[t + 288] = mem[_36912 + 288]
                    idx = idx + 1
                    s = s + 32
                    t = t + 320
                    continue 
                mem[_28165 + 32] = stor15[address(arg5)].field_0 + arg2 - 1
                mem[_28165 + 64] = (320 * _28989) + 128
                _38127 = mem[_27077]
                mem[_28165 + (320 * _28989) + 128] = mem[_27077]
                mem[_28165 + (320 * _28989) + 160 len ceil32(_38127)] = mem[_27077 + 32 len ceil32(_38127)]
                var53001 = ceil32(_38127)
                if ceil32(_38127) > _38127:
                    mem[_28165 + (320 * _28989) + _38127 + 160] = 0
                return memory
                  from mem[64]
                   len ceil32(_38127) + _28165 + (320 * _28989) + -mem[64] + 160
            mem[64] = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 512
            mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 192] = 0
            mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224] = 0
            mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 256] = 0
            mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 288] = 0
            mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 320] = 0
            mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 352] = 0
            mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 384] = 0
            mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 416] = 0
            mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 448] = 0
            mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 480] = 0
            mem[var37001] = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 192
            s = var37001
            idx = var37002
            while idx - 1:
                mem[64] = mem[64] + 320
                mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 192] = 0
                mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224] = 0
                mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 256] = 0
                mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 288] = 0
                mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 320] = 0
                mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 352] = 0
                mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 384] = 0
                mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 416] = 0
                mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 448] = 0
                mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 480] = 0
                mem[s + 32] = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 192
                s = s + 32
                idx = idx - 1
                continue 
            idx = 0
            while idx < arg2:
                if stor15[address(arg5)].field_0 - 1 > !idx:
                    revert with 0, 17
                if stor15[address(arg5)].field_0 + idx - 1 >= mem[(32 * stor11.length) + 128]:
                    revert with 0, 50
                mem[0] = mem[(32 * stor15[address(arg5)].field_0 + idx - 1) + (32 * stor11.length) + 160]
                mem[32] = 12
                _50277 = sha3(mem[(32 * stor15[address(arg5)].field_0 + idx - 1) + (32 * stor11.length) + 160], 12)
                _50278 = mem[64]
                mem[64] = mem[64] + 320
                mem[_50278] = stor12[mem[(32 * stor15[address(arg5)].field_0 + idx - 1) + (32 * stor11.length) + 160]].field_0
                mem[_50278 + 32] = stor1[_50277]
                mem[_50278 + 64] = stor2[_50277]
                mem[_50278 + 96] = stor3[_50277]
                mem[_50278 + 128] = stor4[_50277]
                mem[_50278 + 160] = stor5[_50277]
                mem[_50278 + 192] = stor6[_50277]
                mem[_50278 + 224] = stor7[_50277].field_0
                mem[_50278 + 256] = bool(stor7[_50277].field_160)
                mem[_50278 + 288] = stor8[_50277]
                if idx >= mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]:
                    revert with 0, 50
                mem[(32 * idx) + (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192] = _50278
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
            if stor15[address(arg5)].field_0 - 1 > !arg2:
                revert with 0, 17
            if stor15[address(arg5)].field_0 - 1 > !arg2:
                revert with 0, 17
            if stor15[address(arg5)].field_0 + arg2 - 1 < mem[(32 * stor11.length) + 128]:
                _51644 = mem[64]
                mem[64] = mem[64] + 64
                mem[_51644] = 7
                mem[_51644 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                _52337 = mem[64]
                mem[mem[64]] = 96
                _53113 = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                idx = 0
                s = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192
                t = mem[64] + 128
                while idx < _53113:
                    _58514 = mem[s]
                    mem[t] = mem[mem[s]]
                    mem[t + 32] = mem[_58514 + 32]
                    mem[t + 64] = mem[_58514 + 64]
                    mem[t + 96] = mem[_58514 + 96]
                    mem[t + 128] = mem[_58514 + 128]
                    mem[t + 160] = mem[_58514 + 172 len 20]
                    mem[t + 192] = mem[_58514 + 192]
                    mem[t + 224] = mem[_58514 + 236 len 20]
                    mem[t + 256] = bool(mem[_58514 + 256])
                    mem[t + 288] = mem[_58514 + 288]
                    idx = idx + 1
                    s = s + 32
                    t = t + 320
                    continue 
                mem[_52337 + 32] = stor15[address(arg5)].field_0 + arg2 - 1
                mem[_52337 + 64] = (320 * _53113) + 128
                _59984 = mem[_51644]
                mem[_52337 + (320 * _53113) + 128] = mem[_51644]
                mem[_52337 + (320 * _53113) + 160 len ceil32(_59984)] = mem[_51644 + 32 len ceil32(_59984)]
                var60001 = ceil32(_59984)
                if ceil32(_59984) > _59984:
                    mem[_52337 + (320 * _53113) + _59984 + 160] = 0
                return memory
                  from mem[64]
                   len ceil32(_59984) + _52337 + (320 * _53113) + -mem[64] + 160
            _51645 = mem[64]
            mem[64] = mem[64] + 64
            mem[_51645] = 4
            mem[_51645 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
            _52338 = mem[64]
            mem[mem[64]] = 96
            _53114 = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
            mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
            idx = 0
            s = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192
            t = mem[64] + 128
            while idx < _53114:
                _58521 = mem[s]
                mem[t] = mem[mem[s]]
                mem[t + 32] = mem[_58521 + 32]
                mem[t + 64] = mem[_58521 + 64]
                mem[t + 96] = mem[_58521 + 96]
                mem[t + 128] = mem[_58521 + 128]
                mem[t + 160] = mem[_58521 + 172 len 20]
                mem[t + 192] = mem[_58521 + 192]
                mem[t + 224] = mem[_58521 + 236 len 20]
                mem[t + 256] = bool(mem[_58521 + 256])
                mem[t + 288] = mem[_58521 + 288]
                idx = idx + 1
                s = s + 32
                t = t + 320
                continue 
            mem[_52338 + 32] = stor15[address(arg5)].field_0 + arg2 - 1
            mem[_52338 + 64] = (320 * _53114) + 128
            _59985 = mem[_51645]
            mem[_52338 + (320 * _53114) + 128] = mem[_51645]
            mem[_52338 + (320 * _53114) + 160 len ceil32(_59985)] = mem[_51645 + 32 len ceil32(_59985)]
            var60001 = ceil32(_59985)
            if ceil32(_59985) > _59985:
                mem[_52338 + (320 * _53114) + _59985 + 160] = 0
            return memory
              from mem[64]
               len ceil32(_59985) + _52338 + (320 * _53114) + -mem[64] + 160
        mem[0] = address(arg5)
        mem[32] = 13
        mem[(32 * stor11.length) + 128] = stor13[address(arg5)].field_0
        if not stor13[address(arg5)].field_0:
            if arg4 != 2:
                if not stor13[address(arg5)].field_0:
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160] = 0
                    mem[64] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 256
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192] = 4
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 224] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 256] = 96
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 352] = 0
                    idx = 0
                    s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192
                    t = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 384
                    while idx < mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                        _5795 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_5795 + 32]
                        mem[t + 64] = mem[_5795 + 64]
                        mem[t + 96] = mem[_5795 + 96]
                        mem[t + 128] = mem[_5795 + 128]
                        mem[t + 160] = mem[_5795 + 172 len 20]
                        mem[t + 192] = mem[_5795 + 192]
                        mem[t + 224] = mem[_5795 + 236 len 20]
                        mem[t + 256] = bool(mem[_5795 + 256])
                        mem[t + 288] = mem[_5795 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 288] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 320] = 128
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 384] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 416 len ceil32(mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192])] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 224 len ceil32(mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192])]
                    if ceil32(mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]) > mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]:
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192] + 416] = 0
                    return memory
                      from mem[64]
                       len ceil32(mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + -mem[64] + 416
                if arg1 < stor13[address(arg5)].field_0:
                    if arg3:
                        if arg2 <= arg1:
                            if arg2 > test266151307():
                                revert with 0, 65
                            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160] = arg2
                            mem[64] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 192
                            if not arg2:
                                idx = 0
                                while idx < arg2:
                                    if arg1 < idx:
                                        revert with 0, 17
                                    if arg1 - idx >= mem[(32 * stor11.length) + 128]:
                                        revert with 0, 50
                                    mem[0] = mem[(32 * arg1 - idx) + (32 * stor11.length) + 160]
                                    mem[32] = 12
                                    _6230 = sha3(mem[(32 * arg1 - idx) + (32 * stor11.length) + 160], 12)
                                    _6231 = mem[64]
                                    mem[64] = mem[64] + 320
                                    mem[_6231] = stor12[mem[(32 * arg1 - idx) + (32 * stor11.length) + 160]].field_0
                                    mem[_6231 + 32] = stor1[_6230]
                                    mem[_6231 + 64] = stor2[_6230]
                                    mem[_6231 + 96] = stor3[_6230]
                                    mem[_6231 + 128] = stor4[_6230]
                                    mem[_6231 + 160] = stor5[_6230]
                                    mem[_6231 + 192] = stor6[_6230]
                                    mem[_6231 + 224] = stor7[_6230].field_0
                                    mem[_6231 + 256] = bool(stor7[_6230].field_160)
                                    mem[_6231 + 288] = stor8[_6230]
                                    if idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                                        revert with 0, 50
                                    mem[(32 * idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192] = _6231
                                    if idx == -1:
                                        revert with 0, 17
                                    idx = idx + 1
                                    continue 
                                if arg1 < arg2:
                                    _5851 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_5851] = 4
                                    mem[_5851 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                                    _5955 = mem[64]
                                    mem[mem[64]] = 96
                                    _6227 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                                    mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                                    idx = 0
                                    s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192
                                    t = mem[64] + 128
                                    while idx < _6227:
                                        _11910 = mem[s]
                                        mem[t] = mem[mem[s]]
                                        mem[t + 32] = mem[_11910 + 32]
                                        mem[t + 64] = mem[_11910 + 64]
                                        mem[t + 96] = mem[_11910 + 96]
                                        mem[t + 128] = mem[_11910 + 128]
                                        mem[t + 160] = mem[_11910 + 172 len 20]
                                        mem[t + 192] = mem[_11910 + 192]
                                        mem[t + 224] = mem[_11910 + 236 len 20]
                                        mem[t + 256] = bool(mem[_11910 + 256])
                                        mem[t + 288] = mem[_11910 + 288]
                                        idx = idx + 1
                                        s = s + 32
                                        t = t + 320
                                        continue 
                                    mem[_5955 + 32] = 0
                                    mem[_5955 + 64] = (320 * _6227) + 128
                                    _12242 = mem[_5851]
                                    mem[_5955 + (320 * _6227) + 128] = mem[_5851]
                                    mem[_5955 + (320 * _6227) + 160 len ceil32(_12242)] = mem[_5851 + 32 len ceil32(_12242)]
                                    if ceil32(_12242) > _12242:
                                        mem[_5955 + (320 * _6227) + _12242 + 160] = 0
                                    return memory
                                      from mem[64]
                                       len ceil32(_12242) + _5955 + (320 * _6227) + -mem[64] + 160
                                _6228 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_6228] = 7
                                mem[_6228 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                                _6576 = mem[64]
                                mem[mem[64]] = 96
                                _6748 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                                mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                                idx = 0
                                s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192
                                t = mem[64] + 128
                                while idx < _6748:
                                    _11917 = mem[s]
                                    mem[t] = mem[mem[s]]
                                    mem[t + 32] = mem[_11917 + 32]
                                    mem[t + 64] = mem[_11917 + 64]
                                    mem[t + 96] = mem[_11917 + 96]
                                    mem[t + 128] = mem[_11917 + 128]
                                    mem[t + 160] = mem[_11917 + 172 len 20]
                                    mem[t + 192] = mem[_11917 + 192]
                                    mem[t + 224] = mem[_11917 + 236 len 20]
                                    mem[t + 256] = bool(mem[_11917 + 256])
                                    mem[t + 288] = mem[_11917 + 288]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 320
                                    continue 
                                mem[_6576 + 32] = arg1 - arg2
                                mem[_6576 + 64] = (320 * _6748) + 128
                                _12243 = mem[_6228]
                                mem[_6576 + (320 * _6748) + 128] = mem[_6228]
                                mem[_6576 + (320 * _6748) + 160 len ceil32(_12243)] = mem[_6228 + 32 len ceil32(_12243)]
                                if ceil32(_12243) > _12243:
                                    mem[_6576 + (320 * _6748) + _12243 + 160] = 0
                                return memory
                                  from mem[64]
                                   len ceil32(_12243) + _6576 + (320 * _6748) + -mem[64] + 160
                            mem[64] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 512
                            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 192] = 0
                            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 224] = 0
                            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 256] = 0
                            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 288] = 0
                            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 320] = 0
                            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 352] = 0
                            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 384] = 0
                            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 416] = 0
                            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 448] = 0
                            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 480] = 0
                            mem[var26001] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 192
                            s = var26001
                            idx = var26002
                            while idx - 1:
                                mem[64] = mem[64] + 320
                                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 192] = 0
                                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 224] = 0
                                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 256] = 0
                                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 288] = 0
                                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 320] = 0
                                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 352] = 0
                                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 384] = 0
                                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 416] = 0
                                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 448] = 0
                                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 480] = 0
                                mem[s + 32] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 192
                                s = s + 32
                                idx = idx - 1
                                continue 
                            idx = 0
                            while idx < arg2:
                                if arg1 < idx:
                                    revert with 0, 17
                                if arg1 - idx >= mem[(32 * stor11.length) + 128]:
                                    revert with 0, 50
                                mem[0] = mem[(32 * arg1 - idx) + (32 * stor11.length) + 160]
                                mem[32] = 12
                                _25746 = sha3(mem[(32 * arg1 - idx) + (32 * stor11.length) + 160], 12)
                                _25747 = mem[64]
                                mem[64] = mem[64] + 320
                                mem[_25747] = stor12[mem[(32 * arg1 - idx) + (32 * stor11.length) + 160]].field_0
                                mem[_25747 + 32] = stor1[_25746]
                                mem[_25747 + 64] = stor2[_25746]
                                mem[_25747 + 96] = stor3[_25746]
                                mem[_25747 + 128] = stor4[_25746]
                                mem[_25747 + 160] = stor5[_25746]
                                mem[_25747 + 192] = stor6[_25746]
                                mem[_25747 + 224] = stor7[_25746].field_0
                                mem[_25747 + 256] = bool(stor7[_25746].field_160)
                                mem[_25747 + 288] = stor8[_25746]
                                if idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                                    revert with 0, 50
                                mem[(32 * idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192] = _25747
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                continue 
                            if arg1 < arg2:
                                _24753 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_24753] = 4
                                mem[_24753 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                                _25055 = mem[64]
                                mem[mem[64]] = 96
                                _25743 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                                mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                                idx = 0
                                s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192
                                t = mem[64] + 128
                                while idx < _25743:
                                    _36934 = mem[s]
                                    mem[t] = mem[mem[s]]
                                    mem[t + 32] = mem[_36934 + 32]
                                    mem[t + 64] = mem[_36934 + 64]
                                    mem[t + 96] = mem[_36934 + 96]
                                    mem[t + 128] = mem[_36934 + 128]
                                    mem[t + 160] = mem[_36934 + 172 len 20]
                                    mem[t + 192] = mem[_36934 + 192]
                                    mem[t + 224] = mem[_36934 + 236 len 20]
                                    mem[t + 256] = bool(mem[_36934 + 256])
                                    mem[t + 288] = mem[_36934 + 288]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 320
                                    continue 
                                mem[_25055 + 32] = 0
                                mem[_25055 + 64] = (320 * _25743) + 128
                                _38130 = mem[_24753]
                                mem[_25055 + (320 * _25743) + 128] = mem[_24753]
                                mem[_25055 + (320 * _25743) + 160 len ceil32(_38130)] = mem[_24753 + 32 len ceil32(_38130)]
                                if ceil32(_38130) > _38130:
                                    mem[_25055 + (320 * _25743) + _38130 + 160] = 0
                                return memory
                                  from mem[64]
                                   len ceil32(_38130) + _25055 + (320 * _25743) + -mem[64] + 160
                            _25744 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_25744] = 7
                            mem[_25744 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                            _26577 = mem[64]
                            mem[mem[64]] = 96
                            _27082 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                            mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                            idx = 0
                            s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192
                            t = mem[64] + 128
                            while idx < _27082:
                                _36941 = mem[s]
                                mem[t] = mem[mem[s]]
                                mem[t + 32] = mem[_36941 + 32]
                                mem[t + 64] = mem[_36941 + 64]
                                mem[t + 96] = mem[_36941 + 96]
                                mem[t + 128] = mem[_36941 + 128]
                                mem[t + 160] = mem[_36941 + 172 len 20]
                                mem[t + 192] = mem[_36941 + 192]
                                mem[t + 224] = mem[_36941 + 236 len 20]
                                mem[t + 256] = bool(mem[_36941 + 256])
                                mem[t + 288] = mem[_36941 + 288]
                                idx = idx + 1
                                s = s + 32
                                t = t + 320
                                continue 
                            mem[_26577 + 32] = arg1 - arg2
                            mem[_26577 + 64] = (320 * _27082) + 128
                            _38131 = mem[_25744]
                            mem[_26577 + (320 * _27082) + 128] = mem[_25744]
                            mem[_26577 + (320 * _27082) + 160 len ceil32(_38131)] = mem[_25744 + 32 len ceil32(_38131)]
                            if ceil32(_38131) > _38131:
                                mem[_26577 + (320 * _27082) + _38131 + 160] = 0
                            return memory
                              from mem[64]
                               len ceil32(_38131) + _26577 + (320 * _27082) + -mem[64] + 160
                        if 1 > !arg1:
                            revert with 0, 17
                        if arg1 + 1 > test266151307():
                            revert with 0, 65
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160] = arg1 + 1
                        mem[64] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg1 + 1) + 192
                        if not arg1 + 1:
                            idx = 0
                            while idx < arg1 + 1:
                                if arg1 < idx:
                                    revert with 0, 17
                                if arg1 - idx >= mem[(32 * stor11.length) + 128]:
                                    revert with 0, 50
                                mem[0] = mem[(32 * arg1 - idx) + (32 * stor11.length) + 160]
                                mem[32] = 12
                                _6236 = sha3(mem[(32 * arg1 - idx) + (32 * stor11.length) + 160], 12)
                                _6237 = mem[64]
                                mem[64] = mem[64] + 320
                                mem[_6237] = stor12[mem[(32 * arg1 - idx) + (32 * stor11.length) + 160]].field_0
                                mem[_6237 + 32] = stor1[_6236]
                                mem[_6237 + 64] = stor2[_6236]
                                mem[_6237 + 96] = stor3[_6236]
                                mem[_6237 + 128] = stor4[_6236]
                                mem[_6237 + 160] = stor5[_6236]
                                mem[_6237 + 192] = stor6[_6236]
                                mem[_6237 + 224] = stor7[_6236].field_0
                                mem[_6237 + 256] = bool(stor7[_6236].field_160)
                                mem[_6237 + 288] = stor8[_6236]
                                if idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                                    revert with 0, 50
                                mem[(32 * idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192] = _6237
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                continue 
                            if arg1 < arg1 + 1:
                                _5852 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_5852] = 4
                                mem[_5852 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                                _5957 = mem[64]
                                mem[mem[64]] = 96
                                _6233 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                                mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                                idx = 0
                                s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192
                                t = mem[64] + 128
                                while idx < _6233:
                                    _11924 = mem[s]
                                    mem[t] = mem[mem[s]]
                                    mem[t + 32] = mem[_11924 + 32]
                                    mem[t + 64] = mem[_11924 + 64]
                                    mem[t + 96] = mem[_11924 + 96]
                                    mem[t + 128] = mem[_11924 + 128]
                                    mem[t + 160] = mem[_11924 + 172 len 20]
                                    mem[t + 192] = mem[_11924 + 192]
                                    mem[t + 224] = mem[_11924 + 236 len 20]
                                    mem[t + 256] = bool(mem[_11924 + 256])
                                    mem[t + 288] = mem[_11924 + 288]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 320
                                    continue 
                                mem[_5957 + 32] = 0
                                mem[_5957 + 64] = (320 * _6233) + 128
                                _12244 = mem[_5852]
                                mem[_5957 + (320 * _6233) + 128] = mem[_5852]
                                mem[_5957 + (320 * _6233) + 160 len ceil32(_12244)] = mem[_5852 + 32 len ceil32(_12244)]
                                if ceil32(_12244) > _12244:
                                    mem[_5957 + (320 * _6233) + _12244 + 160] = 0
                                return memory
                                  from mem[64]
                                   len ceil32(_12244) + _5957 + (320 * _6233) + -mem[64] + 160
                            _6234 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_6234] = 7
                            mem[_6234 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                            _6585 = mem[64]
                            mem[mem[64]] = 96
                            _6750 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                            mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                            idx = 0
                            s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192
                            t = mem[64] + 128
                            while idx < _6750:
                                _11931 = mem[s]
                                mem[t] = mem[mem[s]]
                                mem[t + 32] = mem[_11931 + 32]
                                mem[t + 64] = mem[_11931 + 64]
                                mem[t + 96] = mem[_11931 + 96]
                                mem[t + 128] = mem[_11931 + 128]
                                mem[t + 160] = mem[_11931 + 172 len 20]
                                mem[t + 192] = mem[_11931 + 192]
                                mem[t + 224] = mem[_11931 + 236 len 20]
                                mem[t + 256] = bool(mem[_11931 + 256])
                                mem[t + 288] = mem[_11931 + 288]
                                idx = idx + 1
                                s = s + 32
                                t = t + 320
                                continue 
                            mem[_6585 + 32] = -1
                            mem[_6585 + 64] = (320 * _6750) + 128
                            _12245 = mem[_6234]
                            mem[_6585 + (320 * _6750) + 128] = mem[_6234]
                            mem[_6585 + (320 * _6750) + 160 len ceil32(_12245)] = mem[_6234 + 32 len ceil32(_12245)]
                            if ceil32(_12245) > _12245:
                                mem[_6585 + (320 * _6750) + _12245 + 160] = 0
                            return memory
                              from mem[64]
                               len ceil32(_12245) + _6585 + (320 * _6750) + -mem[64] + 160
                        mem[64] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg1 + 1) + 512
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg1 + 1) + 192] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg1 + 1) + 224] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg1 + 1) + 256] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg1 + 1) + 288] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg1 + 1) + 320] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg1 + 1) + 352] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg1 + 1) + 384] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg1 + 1) + 416] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg1 + 1) + 448] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg1 + 1) + 480] = 0
                        mem[var30001] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg1 + 1) + 192
                        s = var30001
                        idx = var30002
                        while idx - 1:
                            mem[64] = mem[64] + 320
                            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg1 + 1) + 192] = 0
                            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg1 + 1) + 224] = 0
                            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg1 + 1) + 256] = 0
                            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg1 + 1) + 288] = 0
                            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg1 + 1) + 320] = 0
                            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg1 + 1) + 352] = 0
                            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg1 + 1) + 384] = 0
                            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg1 + 1) + 416] = 0
                            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg1 + 1) + 448] = 0
                            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg1 + 1) + 480] = 0
                            mem[s + 32] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg1 + 1) + 192
                            s = s + 32
                            idx = idx - 1
                            continue 
                        idx = 0
                        while idx < arg1 + 1:
                            if arg1 < idx:
                                revert with 0, 17
                            if arg1 - idx >= mem[(32 * stor11.length) + 128]:
                                revert with 0, 50
                            mem[0] = mem[(32 * arg1 - idx) + (32 * stor11.length) + 160]
                            mem[32] = 12
                            _25754 = sha3(mem[(32 * arg1 - idx) + (32 * stor11.length) + 160], 12)
                            _25755 = mem[64]
                            mem[64] = mem[64] + 320
                            mem[_25755] = stor12[mem[(32 * arg1 - idx) + (32 * stor11.length) + 160]].field_0
                            mem[_25755 + 32] = stor1[_25754]
                            mem[_25755 + 64] = stor2[_25754]
                            mem[_25755 + 96] = stor3[_25754]
                            mem[_25755 + 128] = stor4[_25754]
                            mem[_25755 + 160] = stor5[_25754]
                            mem[_25755 + 192] = stor6[_25754]
                            mem[_25755 + 224] = stor7[_25754].field_0
                            mem[_25755 + 256] = bool(stor7[_25754].field_160)
                            mem[_25755 + 288] = stor8[_25754]
                            if idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                                revert with 0, 50
                            mem[(32 * idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192] = _25755
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            continue 
                        if arg1 < arg1 + 1:
                            _24754 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_24754] = 4
                            mem[_24754 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                            _25059 = mem[64]
                            mem[mem[64]] = 96
                            _25751 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                            mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                            idx = 0
                            s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192
                            t = mem[64] + 128
                            while idx < _25751:
                                _36948 = mem[s]
                                mem[t] = mem[mem[s]]
                                mem[t + 32] = mem[_36948 + 32]
                                mem[t + 64] = mem[_36948 + 64]
                                mem[t + 96] = mem[_36948 + 96]
                                mem[t + 128] = mem[_36948 + 128]
                                mem[t + 160] = mem[_36948 + 172 len 20]
                                mem[t + 192] = mem[_36948 + 192]
                                mem[t + 224] = mem[_36948 + 236 len 20]
                                mem[t + 256] = bool(mem[_36948 + 256])
                                mem[t + 288] = mem[_36948 + 288]
                                idx = idx + 1
                                s = s + 32
                                t = t + 320
                                continue 
                            mem[_25059 + 32] = 0
                            mem[_25059 + 64] = (320 * _25751) + 128
                            _38132 = mem[_24754]
                            mem[_25059 + (320 * _25751) + 128] = mem[_24754]
                            mem[_25059 + (320 * _25751) + 160 len ceil32(_38132)] = mem[_24754 + 32 len ceil32(_38132)]
                            if ceil32(_38132) > _38132:
                                mem[_25059 + (320 * _25751) + _38132 + 160] = 0
                            return memory
                              from mem[64]
                               len ceil32(_38132) + _25059 + (320 * _25751) + -mem[64] + 160
                        _25752 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_25752] = 7
                        mem[_25752 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                        _26585 = mem[64]
                        mem[mem[64]] = 96
                        _27084 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                        mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                        idx = 0
                        s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192
                        t = mem[64] + 128
                        while idx < _27084:
                            _36955 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_36955 + 32]
                            mem[t + 64] = mem[_36955 + 64]
                            mem[t + 96] = mem[_36955 + 96]
                            mem[t + 128] = mem[_36955 + 128]
                            mem[t + 160] = mem[_36955 + 172 len 20]
                            mem[t + 192] = mem[_36955 + 192]
                            mem[t + 224] = mem[_36955 + 236 len 20]
                            mem[t + 256] = bool(mem[_36955 + 256])
                            mem[t + 288] = mem[_36955 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_26585 + 32] = -1
                        mem[_26585 + 64] = (320 * _27084) + 128
                        _38133 = mem[_25752]
                        mem[_26585 + (320 * _27084) + 128] = mem[_25752]
                        mem[_26585 + (320 * _27084) + 160 len ceil32(_38133)] = mem[_25752 + 32 len ceil32(_38133)]
                        if ceil32(_38133) > _38133:
                            mem[_26585 + (320 * _27084) + _38133 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_38133) + _26585 + (320 * _27084) + -mem[64] + 160
                    if stor13[address(arg5)].field_0 < arg1:
                        revert with 0, 17
                    if arg2 <= stor13[address(arg5)].field_0 - arg1:
                        if arg2 > test266151307():
                            revert with 0, 65
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160] = arg2
                        mem[64] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 192
                        if not arg2:
                            idx = 0
                            while idx < arg2:
                                if arg1 > !idx:
                                    revert with 0, 17
                                if arg1 + idx >= mem[(32 * stor11.length) + 128]:
                                    revert with 0, 50
                                mem[0] = mem[(32 * arg1 + idx) + (32 * stor11.length) + 160]
                                mem[32] = 12
                                _6240 = sha3(mem[(32 * arg1 + idx) + (32 * stor11.length) + 160], 12)
                                _6241 = mem[64]
                                mem[64] = mem[64] + 320
                                mem[_6241] = stor12[mem[(32 * arg1 + idx) + (32 * stor11.length) + 160]].field_0
                                mem[_6241 + 32] = stor1[_6240]
                                mem[_6241 + 64] = stor2[_6240]
                                mem[_6241 + 96] = stor3[_6240]
                                mem[_6241 + 128] = stor4[_6240]
                                mem[_6241 + 160] = stor5[_6240]
                                mem[_6241 + 192] = stor6[_6240]
                                mem[_6241 + 224] = stor7[_6240].field_0
                                mem[_6241 + 256] = bool(stor7[_6240].field_160)
                                mem[_6241 + 288] = stor8[_6240]
                                if idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                                    revert with 0, 50
                                mem[(32 * idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192] = _6241
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                continue 
                            if arg1 > !arg2:
                                revert with 0, 17
                            if arg1 > !arg2:
                                revert with 0, 17
                            if arg1 + arg2 < mem[(32 * stor11.length) + 128]:
                                _6751 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_6751] = 7
                                mem[_6751 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                                _7449 = mem[64]
                                mem[mem[64]] = 96
                                _7681 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                                mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                                idx = 0
                                s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192
                                t = mem[64] + 128
                                while idx < _7681:
                                    _11938 = mem[s]
                                    mem[t] = mem[mem[s]]
                                    mem[t + 32] = mem[_11938 + 32]
                                    mem[t + 64] = mem[_11938 + 64]
                                    mem[t + 96] = mem[_11938 + 96]
                                    mem[t + 128] = mem[_11938 + 128]
                                    mem[t + 160] = mem[_11938 + 172 len 20]
                                    mem[t + 192] = mem[_11938 + 192]
                                    mem[t + 224] = mem[_11938 + 236 len 20]
                                    mem[t + 256] = bool(mem[_11938 + 256])
                                    mem[t + 288] = mem[_11938 + 288]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 320
                                    continue 
                                mem[_7449 + 32] = arg1 + arg2
                                mem[_7449 + 64] = (320 * _7681) + 128
                                _12246 = mem[_6751]
                                mem[_7449 + (320 * _7681) + 128] = mem[_6751]
                                mem[_7449 + (320 * _7681) + 160 len ceil32(_12246)] = mem[_6751 + 32 len ceil32(_12246)]
                                if ceil32(_12246) > _12246:
                                    mem[_7449 + (320 * _7681) + _12246 + 160] = 0
                                return memory
                                  from mem[64]
                                   len ceil32(_12246) + _7449 + (320 * _7681) + -mem[64] + 160
                            _6752 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_6752] = 4
                            mem[_6752 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                            _7450 = mem[64]
                            mem[mem[64]] = 96
                            _7682 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                            mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                            idx = 0
                            s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192
                            t = mem[64] + 128
                            while idx < _7682:
                                _11945 = mem[s]
                                mem[t] = mem[mem[s]]
                                mem[t + 32] = mem[_11945 + 32]
                                mem[t + 64] = mem[_11945 + 64]
                                mem[t + 96] = mem[_11945 + 96]
                                mem[t + 128] = mem[_11945 + 128]
                                mem[t + 160] = mem[_11945 + 172 len 20]
                                mem[t + 192] = mem[_11945 + 192]
                                mem[t + 224] = mem[_11945 + 236 len 20]
                                mem[t + 256] = bool(mem[_11945 + 256])
                                mem[t + 288] = mem[_11945 + 288]
                                idx = idx + 1
                                s = s + 32
                                t = t + 320
                                continue 
                            mem[_7450 + 32] = arg1 + arg2
                            mem[_7450 + 64] = (320 * _7682) + 128
                            _12247 = mem[_6752]
                            mem[_7450 + (320 * _7682) + 128] = mem[_6752]
                            mem[_7450 + (320 * _7682) + 160 len ceil32(_12247)] = mem[_6752 + 32 len ceil32(_12247)]
                            if ceil32(_12247) > _12247:
                                mem[_7450 + (320 * _7682) + _12247 + 160] = 0
                            return memory
                              from mem[64]
                               len ceil32(_12247) + _7450 + (320 * _7682) + -mem[64] + 160
                        mem[64] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 512
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 192] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 224] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 256] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 288] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 320] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 352] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 384] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 416] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 448] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 480] = 0
                        mem[var29001] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 192
                        s = var29001
                        idx = var29002
                        while idx - 1:
                            mem[64] = mem[64] + 320
                            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 192] = 0
                            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 224] = 0
                            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 256] = 0
                            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 288] = 0
                            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 320] = 0
                            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 352] = 0
                            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 384] = 0
                            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 416] = 0
                            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 448] = 0
                            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 480] = 0
                            mem[s + 32] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 192
                            s = s + 32
                            idx = idx - 1
                            continue 
                        idx = 0
                        while idx < arg2:
                            if arg1 > !idx:
                                revert with 0, 17
                            if arg1 + idx >= mem[(32 * stor11.length) + 128]:
                                revert with 0, 50
                            mem[0] = mem[(32 * arg1 + idx) + (32 * stor11.length) + 160]
                            mem[32] = 12
                            _25760 = sha3(mem[(32 * arg1 + idx) + (32 * stor11.length) + 160], 12)
                            _25761 = mem[64]
                            mem[64] = mem[64] + 320
                            mem[_25761] = stor12[mem[(32 * arg1 + idx) + (32 * stor11.length) + 160]].field_0
                            mem[_25761 + 32] = stor1[_25760]
                            mem[_25761 + 64] = stor2[_25760]
                            mem[_25761 + 96] = stor3[_25760]
                            mem[_25761 + 128] = stor4[_25760]
                            mem[_25761 + 160] = stor5[_25760]
                            mem[_25761 + 192] = stor6[_25760]
                            mem[_25761 + 224] = stor7[_25760].field_0
                            mem[_25761 + 256] = bool(stor7[_25760].field_160)
                            mem[_25761 + 288] = stor8[_25760]
                            if idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                                revert with 0, 50
                            mem[(32 * idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192] = _25761
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            continue 
                        if arg1 > !arg2:
                            revert with 0, 17
                        if arg1 > !arg2:
                            revert with 0, 17
                        if arg1 + arg2 < mem[(32 * stor11.length) + 128]:
                            _27085 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_27085] = 7
                            mem[_27085 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                            _28192 = mem[64]
                            mem[mem[64]] = 96
                            _28996 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                            mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                            idx = 0
                            s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192
                            t = mem[64] + 128
                            while idx < _28996:
                                _36962 = mem[s]
                                mem[t] = mem[mem[s]]
                                mem[t + 32] = mem[_36962 + 32]
                                mem[t + 64] = mem[_36962 + 64]
                                mem[t + 96] = mem[_36962 + 96]
                                mem[t + 128] = mem[_36962 + 128]
                                mem[t + 160] = mem[_36962 + 172 len 20]
                                mem[t + 192] = mem[_36962 + 192]
                                mem[t + 224] = mem[_36962 + 236 len 20]
                                mem[t + 256] = bool(mem[_36962 + 256])
                                mem[t + 288] = mem[_36962 + 288]
                                idx = idx + 1
                                s = s + 32
                                t = t + 320
                                continue 
                            mem[_28192 + 32] = arg1 + arg2
                            mem[_28192 + 64] = (320 * _28996) + 128
                            _38134 = mem[_27085]
                            mem[_28192 + (320 * _28996) + 128] = mem[_27085]
                            mem[_28192 + (320 * _28996) + 160 len ceil32(_38134)] = mem[_27085 + 32 len ceil32(_38134)]
                            if ceil32(_38134) > _38134:
                                mem[_28192 + (320 * _28996) + _38134 + 160] = 0
                            return memory
                              from mem[64]
                               len ceil32(_38134) + _28192 + (320 * _28996) + -mem[64] + 160
                        _27086 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_27086] = 4
                        mem[_27086 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                        _28193 = mem[64]
                        mem[mem[64]] = 96
                        _28997 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                        mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                        idx = 0
                        s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192
                        t = mem[64] + 128
                        while idx < _28997:
                            _36969 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_36969 + 32]
                            mem[t + 64] = mem[_36969 + 64]
                            mem[t + 96] = mem[_36969 + 96]
                            mem[t + 128] = mem[_36969 + 128]
                            mem[t + 160] = mem[_36969 + 172 len 20]
                            mem[t + 192] = mem[_36969 + 192]
                            mem[t + 224] = mem[_36969 + 236 len 20]
                            mem[t + 256] = bool(mem[_36969 + 256])
                            mem[t + 288] = mem[_36969 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_28193 + 32] = arg1 + arg2
                        mem[_28193 + 64] = (320 * _28997) + 128
                        _38135 = mem[_27086]
                        mem[_28193 + (320 * _28997) + 128] = mem[_27086]
                        mem[_28193 + (320 * _28997) + 160 len ceil32(_38135)] = mem[_27086 + 32 len ceil32(_38135)]
                        if ceil32(_38135) > _38135:
                            mem[_28193 + (320 * _28997) + _38135 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_38135) + _28193 + (320 * _28997) + -mem[64] + 160
                    if stor13[address(arg5)].field_0 < arg1:
                        revert with 0, 17
                    if stor13[address(arg5)].field_0 - arg1 > test266151307():
                        revert with 0, 65
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160] = stor13[address(arg5)].field_0 - arg1
                    mem[64] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor13[address(arg5)].field_0 - arg1) + 192
                    if not stor13[address(arg5)].field_0 - arg1:
                        idx = 0
                        while idx < stor13[address(arg5)].field_0 - arg1:
                            if arg1 > !idx:
                                revert with 0, 17
                            if arg1 + idx >= mem[(32 * stor11.length) + 128]:
                                revert with 0, 50
                            mem[0] = mem[(32 * arg1 + idx) + (32 * stor11.length) + 160]
                            mem[32] = 12
                            _6244 = sha3(mem[(32 * arg1 + idx) + (32 * stor11.length) + 160], 12)
                            _6245 = mem[64]
                            mem[64] = mem[64] + 320
                            mem[_6245] = stor12[mem[(32 * arg1 + idx) + (32 * stor11.length) + 160]].field_0
                            mem[_6245 + 32] = stor1[_6244]
                            mem[_6245 + 64] = stor2[_6244]
                            mem[_6245 + 96] = stor3[_6244]
                            mem[_6245 + 128] = stor4[_6244]
                            mem[_6245 + 160] = stor5[_6244]
                            mem[_6245 + 192] = stor6[_6244]
                            mem[_6245 + 224] = stor7[_6244].field_0
                            mem[_6245 + 256] = bool(stor7[_6244].field_160)
                            mem[_6245 + 288] = stor8[_6244]
                            if idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                                revert with 0, 50
                            mem[(32 * idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192] = _6245
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            continue 
                        if arg1 > !(stor13[address(arg5)].field_0 - arg1):
                            revert with 0, 17
                        if arg1 > !(stor13[address(arg5)].field_0 - arg1):
                            revert with 0, 17
                        if stor13[address(arg5)].field_0 < mem[(32 * stor11.length) + 128]:
                            _6753 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_6753] = 7
                            mem[_6753 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                            _7455 = mem[64]
                            mem[mem[64]] = 96
                            _7683 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                            mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                            idx = 0
                            s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192
                            t = mem[64] + 128
                            while idx < _7683:
                                _11952 = mem[s]
                                mem[t] = mem[mem[s]]
                                mem[t + 32] = mem[_11952 + 32]
                                mem[t + 64] = mem[_11952 + 64]
                                mem[t + 96] = mem[_11952 + 96]
                                mem[t + 128] = mem[_11952 + 128]
                                mem[t + 160] = mem[_11952 + 172 len 20]
                                mem[t + 192] = mem[_11952 + 192]
                                mem[t + 224] = mem[_11952 + 236 len 20]
                                mem[t + 256] = bool(mem[_11952 + 256])
                                mem[t + 288] = mem[_11952 + 288]
                                idx = idx + 1
                                s = s + 32
                                t = t + 320
                                continue 
                            mem[_7455 + 32] = stor13[address(arg5)].field_0
                            mem[_7455 + 64] = (320 * _7683) + 128
                            _12248 = mem[_6753]
                            mem[_7455 + (320 * _7683) + 128] = mem[_6753]
                            mem[_7455 + (320 * _7683) + 160 len ceil32(_12248)] = mem[_6753 + 32 len ceil32(_12248)]
                            if ceil32(_12248) > _12248:
                                mem[_7455 + (320 * _7683) + _12248 + 160] = 0
                            return memory
                              from mem[64]
                               len ceil32(_12248) + _7455 + (320 * _7683) + -mem[64] + 160
                        _6754 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_6754] = 4
                        mem[_6754 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                        _7456 = mem[64]
                        mem[mem[64]] = 96
                        _7684 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                        mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                        idx = 0
                        s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192
                        t = mem[64] + 128
                        while idx < _7684:
                            _11959 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_11959 + 32]
                            mem[t + 64] = mem[_11959 + 64]
                            mem[t + 96] = mem[_11959 + 96]
                            mem[t + 128] = mem[_11959 + 128]
                            mem[t + 160] = mem[_11959 + 172 len 20]
                            mem[t + 192] = mem[_11959 + 192]
                            mem[t + 224] = mem[_11959 + 236 len 20]
                            mem[t + 256] = bool(mem[_11959 + 256])
                            mem[t + 288] = mem[_11959 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_7456 + 32] = stor13[address(arg5)].field_0
                        mem[_7456 + 64] = (320 * _7684) + 128
                        _12249 = mem[_6754]
                        mem[_7456 + (320 * _7684) + 128] = mem[_6754]
                        mem[_7456 + (320 * _7684) + 160 len ceil32(_12249)] = mem[_6754 + 32 len ceil32(_12249)]
                        if ceil32(_12249) > _12249:
                            mem[_7456 + (320 * _7684) + _12249 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_12249) + _7456 + (320 * _7684) + -mem[64] + 160
                    mem[64] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor13[address(arg5)].field_0 - arg1) + 512
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor13[address(arg5)].field_0 - arg1) + 192] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor13[address(arg5)].field_0 - arg1) + 224] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor13[address(arg5)].field_0 - arg1) + 256] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor13[address(arg5)].field_0 - arg1) + 288] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor13[address(arg5)].field_0 - arg1) + 320] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor13[address(arg5)].field_0 - arg1) + 352] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor13[address(arg5)].field_0 - arg1) + 384] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor13[address(arg5)].field_0 - arg1) + 416] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor13[address(arg5)].field_0 - arg1) + 448] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor13[address(arg5)].field_0 - arg1) + 480] = 0
                    mem[var33001] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor13[address(arg5)].field_0 - arg1) + 192
                    s = var33001
                    idx = var33002
                    while idx - 1:
                        mem[64] = mem[64] + 320
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor13[address(arg5)].field_0 - arg1) + 192] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor13[address(arg5)].field_0 - arg1) + 224] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor13[address(arg5)].field_0 - arg1) + 256] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor13[address(arg5)].field_0 - arg1) + 288] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor13[address(arg5)].field_0 - arg1) + 320] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor13[address(arg5)].field_0 - arg1) + 352] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor13[address(arg5)].field_0 - arg1) + 384] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor13[address(arg5)].field_0 - arg1) + 416] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor13[address(arg5)].field_0 - arg1) + 448] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor13[address(arg5)].field_0 - arg1) + 480] = 0
                        mem[s + 32] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor13[address(arg5)].field_0 - arg1) + 192
                        s = s + 32
                        idx = idx - 1
                        continue 
                    idx = 0
                    while idx < stor13[address(arg5)].field_0 - arg1:
                        if arg1 > !idx:
                            revert with 0, 17
                        if arg1 + idx >= mem[(32 * stor11.length) + 128]:
                            revert with 0, 50
                        mem[0] = mem[(32 * arg1 + idx) + (32 * stor11.length) + 160]
                        mem[32] = 12
                        _25766 = sha3(mem[(32 * arg1 + idx) + (32 * stor11.length) + 160], 12)
                        _25767 = mem[64]
                        mem[64] = mem[64] + 320
                        mem[_25767] = stor12[mem[(32 * arg1 + idx) + (32 * stor11.length) + 160]].field_0
                        mem[_25767 + 32] = stor1[_25766]
                        mem[_25767 + 64] = stor2[_25766]
                        mem[_25767 + 96] = stor3[_25766]
                        mem[_25767 + 128] = stor4[_25766]
                        mem[_25767 + 160] = stor5[_25766]
                        mem[_25767 + 192] = stor6[_25766]
                        mem[_25767 + 224] = stor7[_25766].field_0
                        mem[_25767 + 256] = bool(stor7[_25766].field_160)
                        mem[_25767 + 288] = stor8[_25766]
                        if idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                            revert with 0, 50
                        mem[(32 * idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192] = _25767
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if arg1 > !(stor13[address(arg5)].field_0 - arg1):
                        revert with 0, 17
                    if arg1 > !(stor13[address(arg5)].field_0 - arg1):
                        revert with 0, 17
                    if stor13[address(arg5)].field_0 < mem[(32 * stor11.length) + 128]:
                        _27087 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_27087] = 7
                        mem[_27087 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                        _28194 = mem[64]
                        mem[mem[64]] = 96
                        _28998 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                        mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                        idx = 0
                        s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192
                        t = mem[64] + 128
                        while idx < _28998:
                            _36976 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_36976 + 32]
                            mem[t + 64] = mem[_36976 + 64]
                            mem[t + 96] = mem[_36976 + 96]
                            mem[t + 128] = mem[_36976 + 128]
                            mem[t + 160] = mem[_36976 + 172 len 20]
                            mem[t + 192] = mem[_36976 + 192]
                            mem[t + 224] = mem[_36976 + 236 len 20]
                            mem[t + 256] = bool(mem[_36976 + 256])
                            mem[t + 288] = mem[_36976 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_28194 + 32] = stor13[address(arg5)].field_0
                        mem[_28194 + 64] = (320 * _28998) + 128
                        _38136 = mem[_27087]
                        mem[_28194 + (320 * _28998) + 128] = mem[_27087]
                        mem[_28194 + (320 * _28998) + 160 len ceil32(_38136)] = mem[_27087 + 32 len ceil32(_38136)]
                        if ceil32(_38136) > _38136:
                            mem[_28194 + (320 * _28998) + _38136 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_38136) + _28194 + (320 * _28998) + -mem[64] + 160
                    _27088 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_27088] = 4
                    mem[_27088 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                    _28195 = mem[64]
                    mem[mem[64]] = 96
                    _28999 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                    mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                    idx = 0
                    s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192
                    t = mem[64] + 128
                    while idx < _28999:
                        _36983 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_36983 + 32]
                        mem[t + 64] = mem[_36983 + 64]
                        mem[t + 96] = mem[_36983 + 96]
                        mem[t + 128] = mem[_36983 + 128]
                        mem[t + 160] = mem[_36983 + 172 len 20]
                        mem[t + 192] = mem[_36983 + 192]
                        mem[t + 224] = mem[_36983 + 236 len 20]
                        mem[t + 256] = bool(mem[_36983 + 256])
                        mem[t + 288] = mem[_36983 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_28195 + 32] = stor13[address(arg5)].field_0
                    mem[_28195 + 64] = (320 * _28999) + 128
                    _38137 = mem[_27088]
                    mem[_28195 + (320 * _28999) + 128] = mem[_27088]
                    mem[_28195 + (320 * _28999) + 160 len ceil32(_38137)] = mem[_27088 + 32 len ceil32(_38137)]
                    if ceil32(_38137) > _38137:
                        mem[_28195 + (320 * _28999) + _38137 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_38137) + _28195 + (320 * _28999) + -mem[64] + 160
                if stor13[address(arg5)].field_0 < 1:
                    revert with 0, 17
                if arg3:
                    if arg2 <= stor13[address(arg5)].field_0 - 1:
                        if arg2 > test266151307():
                            revert with 0, 65
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160] = arg2
                        mem[64] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 192
                        if not arg2:
                            idx = 0
                            while idx < arg2:
                                if stor13[address(arg5)].field_0 - 1 < idx:
                                    revert with 0, 17
                                if stor13[address(arg5)].field_0 + -idx - 1 >= mem[(32 * stor11.length) + 128]:
                                    revert with 0, 50
                                mem[0] = mem[(32 * stor13[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + 160]
                                mem[32] = 12
                                _6250 = sha3(mem[(32 * stor13[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + 160], 12)
                                _6251 = mem[64]
                                mem[64] = mem[64] + 320
                                mem[_6251] = stor12[mem[(32 * stor13[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + 160]].field_0
                                mem[_6251 + 32] = stor1[_6250]
                                mem[_6251 + 64] = stor2[_6250]
                                mem[_6251 + 96] = stor3[_6250]
                                mem[_6251 + 128] = stor4[_6250]
                                mem[_6251 + 160] = stor5[_6250]
                                mem[_6251 + 192] = stor6[_6250]
                                mem[_6251 + 224] = stor7[_6250].field_0
                                mem[_6251 + 256] = bool(stor7[_6250].field_160)
                                mem[_6251 + 288] = stor8[_6250]
                                if idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                                    revert with 0, 50
                                mem[(32 * idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192] = _6251
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                continue 
                            if stor13[address(arg5)].field_0 - 1 < arg2:
                                _5853 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_5853] = 4
                                mem[_5853 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                                _5961 = mem[64]
                                mem[mem[64]] = 96
                                _6247 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                                mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                                idx = 0
                                s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192
                                t = mem[64] + 128
                                while idx < _6247:
                                    _11966 = mem[s]
                                    mem[t] = mem[mem[s]]
                                    mem[t + 32] = mem[_11966 + 32]
                                    mem[t + 64] = mem[_11966 + 64]
                                    mem[t + 96] = mem[_11966 + 96]
                                    mem[t + 128] = mem[_11966 + 128]
                                    mem[t + 160] = mem[_11966 + 172 len 20]
                                    mem[t + 192] = mem[_11966 + 192]
                                    mem[t + 224] = mem[_11966 + 236 len 20]
                                    mem[t + 256] = bool(mem[_11966 + 256])
                                    mem[t + 288] = mem[_11966 + 288]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 320
                                    continue 
                                mem[_5961 + 32] = 0
                                mem[_5961 + 64] = (320 * _6247) + 128
                                _12250 = mem[_5853]
                                mem[_5961 + (320 * _6247) + 128] = mem[_5853]
                                mem[_5961 + (320 * _6247) + 160 len ceil32(_12250)] = mem[_5853 + 32 len ceil32(_12250)]
                                if ceil32(_12250) > _12250:
                                    mem[_5961 + (320 * _6247) + _12250 + 160] = 0
                                return memory
                                  from mem[64]
                                   len ceil32(_12250) + _5961 + (320 * _6247) + -mem[64] + 160
                            _6248 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_6248] = 7
                            mem[_6248 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                            _6594 = mem[64]
                            mem[mem[64]] = 96
                            _6756 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                            mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                            idx = 0
                            s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192
                            t = mem[64] + 128
                            while idx < _6756:
                                _11973 = mem[s]
                                mem[t] = mem[mem[s]]
                                mem[t + 32] = mem[_11973 + 32]
                                mem[t + 64] = mem[_11973 + 64]
                                mem[t + 96] = mem[_11973 + 96]
                                mem[t + 128] = mem[_11973 + 128]
                                mem[t + 160] = mem[_11973 + 172 len 20]
                                mem[t + 192] = mem[_11973 + 192]
                                mem[t + 224] = mem[_11973 + 236 len 20]
                                mem[t + 256] = bool(mem[_11973 + 256])
                                mem[t + 288] = mem[_11973 + 288]
                                idx = idx + 1
                                s = s + 32
                                t = t + 320
                                continue 
                            mem[_6594 + 32] = stor13[address(arg5)].field_0 + -arg2 - 1
                            mem[_6594 + 64] = (320 * _6756) + 128
                            _12251 = mem[_6248]
                            mem[_6594 + (320 * _6756) + 128] = mem[_6248]
                            mem[_6594 + (320 * _6756) + 160 len ceil32(_12251)] = mem[_6248 + 32 len ceil32(_12251)]
                            if ceil32(_12251) > _12251:
                                mem[_6594 + (320 * _6756) + _12251 + 160] = 0
                            return memory
                              from mem[64]
                               len ceil32(_12251) + _6594 + (320 * _6756) + -mem[64] + 160
                        mem[64] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 512
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 192] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 224] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 256] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 288] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 320] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 352] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 384] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 416] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 448] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 480] = 0
                        mem[var30001] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 192
                        s = var30001
                        idx = var30002
                        while idx - 1:
                            mem[64] = mem[64] + 320
                            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 192] = 0
                            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 224] = 0
                            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 256] = 0
                            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 288] = 0
                            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 320] = 0
                            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 352] = 0
                            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 384] = 0
                            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 416] = 0
                            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 448] = 0
                            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 480] = 0
                            mem[s + 32] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 192
                            s = s + 32
                            idx = idx - 1
                            continue 
                        idx = 0
                        while idx < arg2:
                            if stor13[address(arg5)].field_0 - 1 < idx:
                                revert with 0, 17
                            if stor13[address(arg5)].field_0 + -idx - 1 >= mem[(32 * stor11.length) + 128]:
                                revert with 0, 50
                            mem[0] = mem[(32 * stor13[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + 160]
                            mem[32] = 12
                            _25774 = sha3(mem[(32 * stor13[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + 160], 12)
                            _25775 = mem[64]
                            mem[64] = mem[64] + 320
                            mem[_25775] = stor12[mem[(32 * stor13[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + 160]].field_0
                            mem[_25775 + 32] = stor1[_25774]
                            mem[_25775 + 64] = stor2[_25774]
                            mem[_25775 + 96] = stor3[_25774]
                            mem[_25775 + 128] = stor4[_25774]
                            mem[_25775 + 160] = stor5[_25774]
                            mem[_25775 + 192] = stor6[_25774]
                            mem[_25775 + 224] = stor7[_25774].field_0
                            mem[_25775 + 256] = bool(stor7[_25774].field_160)
                            mem[_25775 + 288] = stor8[_25774]
                            if idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                                revert with 0, 50
                            mem[(32 * idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192] = _25775
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            continue 
                        if stor13[address(arg5)].field_0 - 1 < arg2:
                            _24755 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_24755] = 4
                            mem[_24755 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                            _25069 = mem[64]
                            mem[mem[64]] = 96
                            _25771 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                            mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                            idx = 0
                            s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192
                            t = mem[64] + 128
                            while idx < _25771:
                                _36990 = mem[s]
                                mem[t] = mem[mem[s]]
                                mem[t + 32] = mem[_36990 + 32]
                                mem[t + 64] = mem[_36990 + 64]
                                mem[t + 96] = mem[_36990 + 96]
                                mem[t + 128] = mem[_36990 + 128]
                                mem[t + 160] = mem[_36990 + 172 len 20]
                                mem[t + 192] = mem[_36990 + 192]
                                mem[t + 224] = mem[_36990 + 236 len 20]
                                mem[t + 256] = bool(mem[_36990 + 256])
                                mem[t + 288] = mem[_36990 + 288]
                                idx = idx + 1
                                s = s + 32
                                t = t + 320
                                continue 
                            mem[_25069 + 32] = 0
                            mem[_25069 + 64] = (320 * _25771) + 128
                            _38138 = mem[_24755]
                            mem[_25069 + (320 * _25771) + 128] = mem[_24755]
                            mem[_25069 + (320 * _25771) + 160 len ceil32(_38138)] = mem[_24755 + 32 len ceil32(_38138)]
                            if ceil32(_38138) > _38138:
                                mem[_25069 + (320 * _25771) + _38138 + 160] = 0
                            return memory
                              from mem[64]
                               len ceil32(_38138) + _25069 + (320 * _25771) + -mem[64] + 160
                        _25772 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_25772] = 7
                        mem[_25772 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                        _26593 = mem[64]
                        mem[mem[64]] = 96
                        _27090 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                        mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                        idx = 0
                        s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192
                        t = mem[64] + 128
                        while idx < _27090:
                            _36997 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_36997 + 32]
                            mem[t + 64] = mem[_36997 + 64]
                            mem[t + 96] = mem[_36997 + 96]
                            mem[t + 128] = mem[_36997 + 128]
                            mem[t + 160] = mem[_36997 + 172 len 20]
                            mem[t + 192] = mem[_36997 + 192]
                            mem[t + 224] = mem[_36997 + 236 len 20]
                            mem[t + 256] = bool(mem[_36997 + 256])
                            mem[t + 288] = mem[_36997 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_26593 + 32] = stor13[address(arg5)].field_0 + -arg2 - 1
                        mem[_26593 + 64] = (320 * _27090) + 128
                        _38139 = mem[_25772]
                        mem[_26593 + (320 * _27090) + 128] = mem[_25772]
                        mem[_26593 + (320 * _27090) + 160 len ceil32(_38139)] = mem[_25772 + 32 len ceil32(_38139)]
                        if ceil32(_38139) > _38139:
                            mem[_26593 + (320 * _27090) + _38139 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_38139) + _26593 + (320 * _27090) + -mem[64] + 160
                    if 1 > !(stor13[address(arg5)].field_0 - 1):
                        revert with 0, 17
                    if stor13[address(arg5)].field_0 > test266151307():
                        revert with 0, 65
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160] = stor13[address(arg5)].field_0
                    mem[64] = (32 * stor11.length) + (64 * stor13[address(arg5)].field_0) + 192
                    if not stor13[address(arg5)].field_0:
                        idx = 0
                        while idx < stor13[address(arg5)].field_0:
                            if stor13[address(arg5)].field_0 - 1 < idx:
                                revert with 0, 17
                            if stor13[address(arg5)].field_0 + -idx - 1 >= mem[(32 * stor11.length) + 128]:
                                revert with 0, 50
                            mem[0] = mem[(32 * stor13[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + 160]
                            mem[32] = 12
                            _6256 = sha3(mem[(32 * stor13[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + 160], 12)
                            _6257 = mem[64]
                            mem[64] = mem[64] + 320
                            mem[_6257] = stor12[mem[(32 * stor13[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + 160]].field_0
                            mem[_6257 + 32] = stor1[_6256]
                            mem[_6257 + 64] = stor2[_6256]
                            mem[_6257 + 96] = stor3[_6256]
                            mem[_6257 + 128] = stor4[_6256]
                            mem[_6257 + 160] = stor5[_6256]
                            mem[_6257 + 192] = stor6[_6256]
                            mem[_6257 + 224] = stor7[_6256].field_0
                            mem[_6257 + 256] = bool(stor7[_6256].field_160)
                            mem[_6257 + 288] = stor8[_6256]
                            if idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                                revert with 0, 50
                            mem[(32 * idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192] = _6257
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            continue 
                        if stor13[address(arg5)].field_0 - 1 < stor13[address(arg5)].field_0:
                            _5854 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_5854] = 4
                            mem[_5854 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                            _5963 = mem[64]
                            mem[mem[64]] = 96
                            _6253 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                            mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                            idx = 0
                            s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192
                            t = mem[64] + 128
                            while idx < _6253:
                                _11980 = mem[s]
                                mem[t] = mem[mem[s]]
                                mem[t + 32] = mem[_11980 + 32]
                                mem[t + 64] = mem[_11980 + 64]
                                mem[t + 96] = mem[_11980 + 96]
                                mem[t + 128] = mem[_11980 + 128]
                                mem[t + 160] = mem[_11980 + 172 len 20]
                                mem[t + 192] = mem[_11980 + 192]
                                mem[t + 224] = mem[_11980 + 236 len 20]
                                mem[t + 256] = bool(mem[_11980 + 256])
                                mem[t + 288] = mem[_11980 + 288]
                                idx = idx + 1
                                s = s + 32
                                t = t + 320
                                continue 
                            mem[_5963 + 32] = 0
                            mem[_5963 + 64] = (320 * _6253) + 128
                            _12252 = mem[_5854]
                            mem[_5963 + (320 * _6253) + 128] = mem[_5854]
                            mem[_5963 + (320 * _6253) + 160 len ceil32(_12252)] = mem[_5854 + 32 len ceil32(_12252)]
                            if ceil32(_12252) > _12252:
                                mem[_5963 + (320 * _6253) + _12252 + 160] = 0
                            return memory
                              from mem[64]
                               len ceil32(_12252) + _5963 + (320 * _6253) + -mem[64] + 160
                        _6254 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_6254] = 7
                        mem[_6254 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                        _6603 = mem[64]
                        mem[mem[64]] = 96
                        _6758 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                        mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                        idx = 0
                        s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192
                        t = mem[64] + 128
                        while idx < _6758:
                            _11987 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_11987 + 32]
                            mem[t + 64] = mem[_11987 + 64]
                            mem[t + 96] = mem[_11987 + 96]
                            mem[t + 128] = mem[_11987 + 128]
                            mem[t + 160] = mem[_11987 + 172 len 20]
                            mem[t + 192] = mem[_11987 + 192]
                            mem[t + 224] = mem[_11987 + 236 len 20]
                            mem[t + 256] = bool(mem[_11987 + 256])
                            mem[t + 288] = mem[_11987 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_6603 + 32] = -1
                        mem[_6603 + 64] = (320 * _6758) + 128
                        _12253 = mem[_6254]
                        mem[_6603 + (320 * _6758) + 128] = mem[_6254]
                        mem[_6603 + (320 * _6758) + 160 len ceil32(_12253)] = mem[_6254 + 32 len ceil32(_12253)]
                        if ceil32(_12253) > _12253:
                            mem[_6603 + (320 * _6758) + _12253 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_12253) + _6603 + (320 * _6758) + -mem[64] + 160
                    mem[64] = (32 * stor11.length) + (64 * stor13[address(arg5)].field_0) + 512
                    mem[(32 * stor11.length) + (64 * stor13[address(arg5)].field_0) + 192] = 0
                    mem[(32 * stor11.length) + (64 * stor13[address(arg5)].field_0) + 224] = 0
                    mem[(32 * stor11.length) + (64 * stor13[address(arg5)].field_0) + 256] = 0
                    mem[(32 * stor11.length) + (64 * stor13[address(arg5)].field_0) + 288] = 0
                    mem[(32 * stor11.length) + (64 * stor13[address(arg5)].field_0) + 320] = 0
                    mem[(32 * stor11.length) + (64 * stor13[address(arg5)].field_0) + 352] = 0
                    mem[(32 * stor11.length) + (64 * stor13[address(arg5)].field_0) + 384] = 0
                    mem[(32 * stor11.length) + (64 * stor13[address(arg5)].field_0) + 416] = 0
                    mem[(32 * stor11.length) + (64 * stor13[address(arg5)].field_0) + 448] = 0
                    mem[(32 * stor11.length) + (64 * stor13[address(arg5)].field_0) + 480] = 0
                    mem[var34001] = (32 * stor11.length) + (64 * stor13[address(arg5)].field_0) + 192
                    s = var34001
                    idx = var34002
                    while idx - 1:
                        mem[64] = mem[64] + 320
                        mem[(32 * stor11.length) + (64 * stor13[address(arg5)].field_0) + 192] = 0
                        mem[(32 * stor11.length) + (64 * stor13[address(arg5)].field_0) + 224] = 0
                        mem[(32 * stor11.length) + (64 * stor13[address(arg5)].field_0) + 256] = 0
                        mem[(32 * stor11.length) + (64 * stor13[address(arg5)].field_0) + 288] = 0
                        mem[(32 * stor11.length) + (64 * stor13[address(arg5)].field_0) + 320] = 0
                        mem[(32 * stor11.length) + (64 * stor13[address(arg5)].field_0) + 352] = 0
                        mem[(32 * stor11.length) + (64 * stor13[address(arg5)].field_0) + 384] = 0
                        mem[(32 * stor11.length) + (64 * stor13[address(arg5)].field_0) + 416] = 0
                        mem[(32 * stor11.length) + (64 * stor13[address(arg5)].field_0) + 448] = 0
                        mem[(32 * stor11.length) + (64 * stor13[address(arg5)].field_0) + 480] = 0
                        mem[s + 32] = (32 * stor11.length) + (64 * stor13[address(arg5)].field_0) + 192
                        s = s + 32
                        idx = idx - 1
                        continue 
                    idx = 0
                    while idx < stor13[address(arg5)].field_0:
                        if stor13[address(arg5)].field_0 - 1 < idx:
                            revert with 0, 17
                        if stor13[address(arg5)].field_0 + -idx - 1 >= mem[(32 * stor11.length) + 128]:
                            revert with 0, 50
                        mem[0] = mem[(32 * stor13[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + 160]
                        mem[32] = 12
                        _25782 = sha3(mem[(32 * stor13[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + 160], 12)
                        _25783 = mem[64]
                        mem[64] = mem[64] + 320
                        mem[_25783] = stor12[mem[(32 * stor13[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + 160]].field_0
                        mem[_25783 + 32] = stor1[_25782]
                        mem[_25783 + 64] = stor2[_25782]
                        mem[_25783 + 96] = stor3[_25782]
                        mem[_25783 + 128] = stor4[_25782]
                        mem[_25783 + 160] = stor5[_25782]
                        mem[_25783 + 192] = stor6[_25782]
                        mem[_25783 + 224] = stor7[_25782].field_0
                        mem[_25783 + 256] = bool(stor7[_25782].field_160)
                        mem[_25783 + 288] = stor8[_25782]
                        if idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                            revert with 0, 50
                        mem[(32 * idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192] = _25783
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if stor13[address(arg5)].field_0 - 1 < stor13[address(arg5)].field_0:
                        _24756 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_24756] = 4
                        mem[_24756 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                        _25073 = mem[64]
                        mem[mem[64]] = 96
                        _25779 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                        mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                        idx = 0
                        s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192
                        t = mem[64] + 128
                        while idx < _25779:
                            _37004 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_37004 + 32]
                            mem[t + 64] = mem[_37004 + 64]
                            mem[t + 96] = mem[_37004 + 96]
                            mem[t + 128] = mem[_37004 + 128]
                            mem[t + 160] = mem[_37004 + 172 len 20]
                            mem[t + 192] = mem[_37004 + 192]
                            mem[t + 224] = mem[_37004 + 236 len 20]
                            mem[t + 256] = bool(mem[_37004 + 256])
                            mem[t + 288] = mem[_37004 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_25073 + 32] = 0
                        mem[_25073 + 64] = (320 * _25779) + 128
                        _38140 = mem[_24756]
                        mem[_25073 + (320 * _25779) + 128] = mem[_24756]
                        mem[_25073 + (320 * _25779) + 160 len ceil32(_38140)] = mem[_24756 + 32 len ceil32(_38140)]
                        if ceil32(_38140) > _38140:
                            mem[_25073 + (320 * _25779) + _38140 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_38140) + _25073 + (320 * _25779) + -mem[64] + 160
                    _25780 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_25780] = 7
                    mem[_25780 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                    _26601 = mem[64]
                    mem[mem[64]] = 96
                    _27092 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                    mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                    idx = 0
                    s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192
                    t = mem[64] + 128
                    while idx < _27092:
                        _37011 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_37011 + 32]
                        mem[t + 64] = mem[_37011 + 64]
                        mem[t + 96] = mem[_37011 + 96]
                        mem[t + 128] = mem[_37011 + 128]
                        mem[t + 160] = mem[_37011 + 172 len 20]
                        mem[t + 192] = mem[_37011 + 192]
                        mem[t + 224] = mem[_37011 + 236 len 20]
                        mem[t + 256] = bool(mem[_37011 + 256])
                        mem[t + 288] = mem[_37011 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_26601 + 32] = -1
                    mem[_26601 + 64] = (320 * _27092) + 128
                    _38141 = mem[_25780]
                    mem[_26601 + (320 * _27092) + 128] = mem[_25780]
                    mem[_26601 + (320 * _27092) + 160 len ceil32(_38141)] = mem[_25780 + 32 len ceil32(_38141)]
                    if ceil32(_38141) > _38141:
                        mem[_26601 + (320 * _27092) + _38141 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_38141) + _26601 + (320 * _27092) + -mem[64] + 160
                if stor13[address(arg5)].field_0 < stor13[address(arg5)].field_0 - 1:
                    revert with 0, 17
                if arg2 > 1:
                    if stor13[address(arg5)].field_0 < stor13[address(arg5)].field_0 - 1:
                        revert with 0, 17
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160] = 1
                    mem[64] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 544
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 224] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 256] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 288] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 320] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 352] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 384] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 416] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 448] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 480] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 512] = 0
                    mem[var37001] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 224
                    s = var37001
                    idx = var37002
                    while idx - 1:
                        mem[64] = mem[64] + 320
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 224] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 256] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 288] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 320] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 352] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 384] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 416] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 448] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 480] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 512] = 0
                        mem[s + 32] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 224
                        s = s + 32
                        idx = idx - 1
                        continue 
                    idx = 0
                    while idx < 1:
                        if stor13[address(arg5)].field_0 - 1 > !idx:
                            revert with 0, 17
                        if stor13[address(arg5)].field_0 + idx - 1 >= mem[(32 * stor11.length) + 128]:
                            revert with 0, 50
                        mem[0] = mem[(32 * stor13[address(arg5)].field_0 + idx - 1) + (32 * stor11.length) + 160]
                        mem[32] = 12
                        _25794 = sha3(mem[(32 * stor13[address(arg5)].field_0 + idx - 1) + (32 * stor11.length) + 160], 12)
                        _25795 = mem[64]
                        mem[64] = mem[64] + 320
                        mem[_25795] = stor12[mem[(32 * stor13[address(arg5)].field_0 + idx - 1) + (32 * stor11.length) + 160]].field_0
                        mem[_25795 + 32] = stor1[_25794]
                        mem[_25795 + 64] = stor2[_25794]
                        mem[_25795 + 96] = stor3[_25794]
                        mem[_25795 + 128] = stor4[_25794]
                        mem[_25795 + 160] = stor5[_25794]
                        mem[_25795 + 192] = stor6[_25794]
                        mem[_25795 + 224] = stor7[_25794].field_0
                        mem[_25795 + 256] = bool(stor7[_25794].field_160)
                        mem[_25795 + 288] = stor8[_25794]
                        if idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                            revert with 0, 50
                        mem[(32 * idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192] = _25795
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if stor13[address(arg5)].field_0 - 1 > !1:
                        revert with 0, 17
                    if stor13[address(arg5)].field_0 - 1 > !1:
                        revert with 0, 17
                    if stor13[address(arg5)].field_0 < mem[(32 * stor11.length) + 128]:
                        _27095 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_27095] = 7
                        mem[_27095 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                        _28214 = mem[64]
                        mem[mem[64]] = 96
                        _29006 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                        mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                        idx = 0
                        s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192
                        t = mem[64] + 128
                        while idx < _29006:
                            _37032 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_37032 + 32]
                            mem[t + 64] = mem[_37032 + 64]
                            mem[t + 96] = mem[_37032 + 96]
                            mem[t + 128] = mem[_37032 + 128]
                            mem[t + 160] = mem[_37032 + 172 len 20]
                            mem[t + 192] = mem[_37032 + 192]
                            mem[t + 224] = mem[_37032 + 236 len 20]
                            mem[t + 256] = bool(mem[_37032 + 256])
                            mem[t + 288] = mem[_37032 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_28214 + 32] = stor13[address(arg5)].field_0
                        mem[_28214 + 64] = (320 * _29006) + 128
                        _38144 = mem[_27095]
                        mem[_28214 + (320 * _29006) + 128] = mem[_27095]
                        mem[_28214 + (320 * _29006) + 160 len ceil32(_38144)] = mem[_27095 + 32 len ceil32(_38144)]
                        if ceil32(_38144) > _38144:
                            mem[_28214 + (320 * _29006) + _38144 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_38144) + _28214 + (320 * _29006) + -mem[64] + 160
                    _27096 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_27096] = 4
                    mem[_27096 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                    _28215 = mem[64]
                    mem[mem[64]] = 96
                    _29007 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                    mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                    idx = 0
                    s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192
                    t = mem[64] + 128
                    while idx < _29007:
                        _37039 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_37039 + 32]
                        mem[t + 64] = mem[_37039 + 64]
                        mem[t + 96] = mem[_37039 + 96]
                        mem[t + 128] = mem[_37039 + 128]
                        mem[t + 160] = mem[_37039 + 172 len 20]
                        mem[t + 192] = mem[_37039 + 192]
                        mem[t + 224] = mem[_37039 + 236 len 20]
                        mem[t + 256] = bool(mem[_37039 + 256])
                        mem[t + 288] = mem[_37039 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_28215 + 32] = stor13[address(arg5)].field_0
                    mem[_28215 + 64] = (320 * _29007) + 128
                    _38145 = mem[_27096]
                    mem[_28215 + (320 * _29007) + 128] = mem[_27096]
                    mem[_28215 + (320 * _29007) + 160 len ceil32(_38145)] = mem[_27096 + 32 len ceil32(_38145)]
                    if ceil32(_38145) > _38145:
                        mem[_28215 + (320 * _29007) + _38145 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_38145) + _28215 + (320 * _29007) + -mem[64] + 160
                if arg2 > test266151307():
                    revert with 0, 65
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160] = arg2
                mem[64] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 192
                if not arg2:
                    idx = 0
                    while idx < arg2:
                        if stor13[address(arg5)].field_0 - 1 > !idx:
                            revert with 0, 17
                        if stor13[address(arg5)].field_0 + idx - 1 >= mem[(32 * stor11.length) + 128]:
                            revert with 0, 50
                        mem[0] = mem[(32 * stor13[address(arg5)].field_0 + idx - 1) + (32 * stor11.length) + 160]
                        mem[32] = 12
                        _6260 = sha3(mem[(32 * stor13[address(arg5)].field_0 + idx - 1) + (32 * stor11.length) + 160], 12)
                        _6261 = mem[64]
                        mem[64] = mem[64] + 320
                        mem[_6261] = stor12[mem[(32 * stor13[address(arg5)].field_0 + idx - 1) + (32 * stor11.length) + 160]].field_0
                        mem[_6261 + 32] = stor1[_6260]
                        mem[_6261 + 64] = stor2[_6260]
                        mem[_6261 + 96] = stor3[_6260]
                        mem[_6261 + 128] = stor4[_6260]
                        mem[_6261 + 160] = stor5[_6260]
                        mem[_6261 + 192] = stor6[_6260]
                        mem[_6261 + 224] = stor7[_6260].field_0
                        mem[_6261 + 256] = bool(stor7[_6260].field_160)
                        mem[_6261 + 288] = stor8[_6260]
                        if idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                            revert with 0, 50
                        mem[(32 * idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192] = _6261
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if stor13[address(arg5)].field_0 - 1 > !arg2:
                        revert with 0, 17
                    if stor13[address(arg5)].field_0 - 1 > !arg2:
                        revert with 0, 17
                    if stor13[address(arg5)].field_0 + arg2 - 1 < mem[(32 * stor11.length) + 128]:
                        _6759 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_6759] = 7
                        mem[_6759 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                        _7489 = mem[64]
                        mem[mem[64]] = 96
                        _7689 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                        mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                        idx = 0
                        s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192
                        t = mem[64] + 128
                        while idx < _7689:
                            _11994 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_11994 + 32]
                            mem[t + 64] = mem[_11994 + 64]
                            mem[t + 96] = mem[_11994 + 96]
                            mem[t + 128] = mem[_11994 + 128]
                            mem[t + 160] = mem[_11994 + 172 len 20]
                            mem[t + 192] = mem[_11994 + 192]
                            mem[t + 224] = mem[_11994 + 236 len 20]
                            mem[t + 256] = bool(mem[_11994 + 256])
                            mem[t + 288] = mem[_11994 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_7489 + 32] = stor13[address(arg5)].field_0 + arg2 - 1
                        mem[_7489 + 64] = (320 * _7689) + 128
                        _12254 = mem[_6759]
                        mem[_7489 + (320 * _7689) + 128] = mem[_6759]
                        mem[_7489 + (320 * _7689) + 160 len ceil32(_12254)] = mem[_6759 + 32 len ceil32(_12254)]
                        if ceil32(_12254) > _12254:
                            mem[_7489 + (320 * _7689) + _12254 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_12254) + _7489 + (320 * _7689) + -mem[64] + 160
                    _6760 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_6760] = 4
                    mem[_6760 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                    _7490 = mem[64]
                    mem[mem[64]] = 96
                    _7690 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                    mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                    idx = 0
                    s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192
                    t = mem[64] + 128
                    while idx < _7690:
                        _12001 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_12001 + 32]
                        mem[t + 64] = mem[_12001 + 64]
                        mem[t + 96] = mem[_12001 + 96]
                        mem[t + 128] = mem[_12001 + 128]
                        mem[t + 160] = mem[_12001 + 172 len 20]
                        mem[t + 192] = mem[_12001 + 192]
                        mem[t + 224] = mem[_12001 + 236 len 20]
                        mem[t + 256] = bool(mem[_12001 + 256])
                        mem[t + 288] = mem[_12001 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_7490 + 32] = stor13[address(arg5)].field_0 + arg2 - 1
                    mem[_7490 + 64] = (320 * _7690) + 128
                    _12255 = mem[_6760]
                    mem[_7490 + (320 * _7690) + 128] = mem[_6760]
                    mem[_7490 + (320 * _7690) + 160 len ceil32(_12255)] = mem[_6760 + 32 len ceil32(_12255)]
                    if ceil32(_12255) > _12255:
                        mem[_7490 + (320 * _7690) + _12255 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_12255) + _7490 + (320 * _7690) + -mem[64] + 160
                mem[64] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 512
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 192] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 224] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 256] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 288] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 320] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 352] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 384] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 416] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 448] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 480] = 0
                mem[var33001] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 192
                s = var33001
                idx = var33002
                while idx - 1:
                    mem[64] = mem[64] + 320
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 192] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 224] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 256] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 288] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 320] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 352] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 384] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 416] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 448] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 480] = 0
                    mem[s + 32] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 192
                    s = s + 32
                    idx = idx - 1
                    continue 
                idx = 0
                while idx < arg2:
                    if stor13[address(arg5)].field_0 - 1 > !idx:
                        revert with 0, 17
                    if stor13[address(arg5)].field_0 + idx - 1 >= mem[(32 * stor11.length) + 128]:
                        revert with 0, 50
                    mem[0] = mem[(32 * stor13[address(arg5)].field_0 + idx - 1) + (32 * stor11.length) + 160]
                    mem[32] = 12
                    _25788 = sha3(mem[(32 * stor13[address(arg5)].field_0 + idx - 1) + (32 * stor11.length) + 160], 12)
                    _25789 = mem[64]
                    mem[64] = mem[64] + 320
                    mem[_25789] = stor12[mem[(32 * stor13[address(arg5)].field_0 + idx - 1) + (32 * stor11.length) + 160]].field_0
                    mem[_25789 + 32] = stor1[_25788]
                    mem[_25789 + 64] = stor2[_25788]
                    mem[_25789 + 96] = stor3[_25788]
                    mem[_25789 + 128] = stor4[_25788]
                    mem[_25789 + 160] = stor5[_25788]
                    mem[_25789 + 192] = stor6[_25788]
                    mem[_25789 + 224] = stor7[_25788].field_0
                    mem[_25789 + 256] = bool(stor7[_25788].field_160)
                    mem[_25789 + 288] = stor8[_25788]
                    if idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                        revert with 0, 50
                    mem[(32 * idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192] = _25789
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
                if stor13[address(arg5)].field_0 - 1 > !arg2:
                    revert with 0, 17
                if stor13[address(arg5)].field_0 - 1 > !arg2:
                    revert with 0, 17
                if stor13[address(arg5)].field_0 + arg2 - 1 < mem[(32 * stor11.length) + 128]:
                    _27093 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_27093] = 7
                    mem[_27093 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                    _28212 = mem[64]
                    mem[mem[64]] = 96
                    _29004 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                    mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                    idx = 0
                    s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192
                    t = mem[64] + 128
                    while idx < _29004:
                        _37018 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_37018 + 32]
                        mem[t + 64] = mem[_37018 + 64]
                        mem[t + 96] = mem[_37018 + 96]
                        mem[t + 128] = mem[_37018 + 128]
                        mem[t + 160] = mem[_37018 + 172 len 20]
                        mem[t + 192] = mem[_37018 + 192]
                        mem[t + 224] = mem[_37018 + 236 len 20]
                        mem[t + 256] = bool(mem[_37018 + 256])
                        mem[t + 288] = mem[_37018 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_28212 + 32] = stor13[address(arg5)].field_0 + arg2 - 1
                    mem[_28212 + 64] = (320 * _29004) + 128
                    _38142 = mem[_27093]
                    mem[_28212 + (320 * _29004) + 128] = mem[_27093]
                    mem[_28212 + (320 * _29004) + 160 len ceil32(_38142)] = mem[_27093 + 32 len ceil32(_38142)]
                    if ceil32(_38142) > _38142:
                        mem[_28212 + (320 * _29004) + _38142 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_38142) + _28212 + (320 * _29004) + -mem[64] + 160
                _27094 = mem[64]
                mem[64] = mem[64] + 64
                mem[_27094] = 4
                mem[_27094 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                _28213 = mem[64]
                mem[mem[64]] = 96
                _29005 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                idx = 0
                s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192
                t = mem[64] + 128
                while idx < _29005:
                    _37025 = mem[s]
                    mem[t] = mem[mem[s]]
                    mem[t + 32] = mem[_37025 + 32]
                    mem[t + 64] = mem[_37025 + 64]
                    mem[t + 96] = mem[_37025 + 96]
                    mem[t + 128] = mem[_37025 + 128]
                    mem[t + 160] = mem[_37025 + 172 len 20]
                    mem[t + 192] = mem[_37025 + 192]
                    mem[t + 224] = mem[_37025 + 236 len 20]
                    mem[t + 256] = bool(mem[_37025 + 256])
                    mem[t + 288] = mem[_37025 + 288]
                    idx = idx + 1
                    s = s + 32
                    t = t + 320
                    continue 
                mem[_28213 + 32] = stor13[address(arg5)].field_0 + arg2 - 1
                mem[_28213 + 64] = (320 * _29005) + 128
                _38143 = mem[_27094]
                mem[_28213 + (320 * _29005) + 128] = mem[_27094]
                mem[_28213 + (320 * _29005) + 160 len ceil32(_38143)] = mem[_27094 + 32 len ceil32(_38143)]
                if ceil32(_38143) > _38143:
                    mem[_28213 + (320 * _29005) + _38143 + 160] = 0
                return memory
                  from mem[64]
                   len ceil32(_38143) + _28213 + (320 * _29005) + -mem[64] + 160
            mem[0] = address(arg5)
            mem[32] = 15
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160] = stor15[address(arg5)].field_0
            if not stor15[address(arg5)].field_0:
                if not stor15[address(arg5)].field_0:
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192] = 0
                    mem[64] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 288
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224] = 4
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 256] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 288] = 96
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 384] = 0
                    idx = 0
                    s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                    t = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 416
                    while idx < mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]:
                        _5814 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_5814 + 32]
                        mem[t + 64] = mem[_5814 + 64]
                        mem[t + 96] = mem[_5814 + 96]
                        mem[t + 128] = mem[_5814 + 128]
                        mem[t + 160] = mem[_5814 + 172 len 20]
                        mem[t + 192] = mem[_5814 + 192]
                        mem[t + 224] = mem[_5814 + 236 len 20]
                        mem[t + 256] = bool(mem[_5814 + 256])
                        mem[t + 288] = mem[_5814 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 320] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 352] = 128
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 416] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224]
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 448 len ceil32(mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224])] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 256 len ceil32(mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224])]
                    if ceil32(mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224]) > mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224]:
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224] + 448] = 0
                    return memory
                      from mem[64]
                       len ceil32(mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224]) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + -mem[64] + 448
                if arg1 < stor15[address(arg5)].field_0:
                    if arg3:
                        if arg2 <= arg1:
                            if arg2 > test266151307():
                                revert with 0, 65
                            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192] = arg2
                            mem[64] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224
                            if not arg2:
                                idx = 0
                                while idx < arg2:
                                    if arg1 < idx:
                                        revert with 0, 17
                                    if arg1 - idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                                        revert with 0, 50
                                    mem[0] = mem[(32 * arg1 - idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]
                                    mem[32] = 12
                                    _6271 = sha3(mem[(32 * arg1 - idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192], 12)
                                    _6272 = mem[64]
                                    mem[64] = mem[64] + 320
                                    mem[_6272] = stor12[mem[(32 * arg1 - idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]].field_0
                                    mem[_6272 + 32] = stor1[_6271]
                                    mem[_6272 + 64] = stor2[_6271]
                                    mem[_6272 + 96] = stor3[_6271]
                                    mem[_6272 + 128] = stor4[_6271]
                                    mem[_6272 + 160] = stor5[_6271]
                                    mem[_6272 + 192] = stor6[_6271]
                                    mem[_6272 + 224] = stor7[_6271].field_0
                                    mem[_6272 + 256] = bool(stor7[_6271].field_160)
                                    mem[_6272 + 288] = stor8[_6271]
                                    if idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]:
                                        revert with 0, 50
                                    mem[(32 * idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224] = _6272
                                    if idx == -1:
                                        revert with 0, 17
                                    idx = idx + 1
                                    continue 
                                if arg1 < arg2:
                                    _5856 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_5856] = 4
                                    mem[_5856 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                                    _5968 = mem[64]
                                    mem[mem[64]] = 96
                                    _6268 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                                    mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                                    idx = 0
                                    s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                                    t = mem[64] + 128
                                    while idx < _6268:
                                        _12023 = mem[s]
                                        mem[t] = mem[mem[s]]
                                        mem[t + 32] = mem[_12023 + 32]
                                        mem[t + 64] = mem[_12023 + 64]
                                        mem[t + 96] = mem[_12023 + 96]
                                        mem[t + 128] = mem[_12023 + 128]
                                        mem[t + 160] = mem[_12023 + 172 len 20]
                                        mem[t + 192] = mem[_12023 + 192]
                                        mem[t + 224] = mem[_12023 + 236 len 20]
                                        mem[t + 256] = bool(mem[_12023 + 256])
                                        mem[t + 288] = mem[_12023 + 288]
                                        idx = idx + 1
                                        s = s + 32
                                        t = t + 320
                                        continue 
                                    mem[_5968 + 32] = 0
                                    mem[_5968 + 64] = (320 * _6268) + 128
                                    _12258 = mem[_5856]
                                    mem[_5968 + (320 * _6268) + 128] = mem[_5856]
                                    mem[_5968 + (320 * _6268) + 160 len ceil32(_12258)] = mem[_5856 + 32 len ceil32(_12258)]
                                    if ceil32(_12258) > _12258:
                                        mem[_5968 + (320 * _6268) + _12258 + 160] = 0
                                    return memory
                                      from mem[64]
                                       len ceil32(_12258) + _5968 + (320 * _6268) + -mem[64] + 160
                                _6269 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_6269] = 7
                                mem[_6269 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                                _6614 = mem[64]
                                mem[mem[64]] = 96
                                _6765 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                                mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                                idx = 0
                                s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                                t = mem[64] + 128
                                while idx < _6765:
                                    _12030 = mem[s]
                                    mem[t] = mem[mem[s]]
                                    mem[t + 32] = mem[_12030 + 32]
                                    mem[t + 64] = mem[_12030 + 64]
                                    mem[t + 96] = mem[_12030 + 96]
                                    mem[t + 128] = mem[_12030 + 128]
                                    mem[t + 160] = mem[_12030 + 172 len 20]
                                    mem[t + 192] = mem[_12030 + 192]
                                    mem[t + 224] = mem[_12030 + 236 len 20]
                                    mem[t + 256] = bool(mem[_12030 + 256])
                                    mem[t + 288] = mem[_12030 + 288]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 320
                                    continue 
                                mem[_6614 + 32] = arg1 - arg2
                                mem[_6614 + 64] = (320 * _6765) + 128
                                _12259 = mem[_6269]
                                mem[_6614 + (320 * _6765) + 128] = mem[_6269]
                                mem[_6614 + (320 * _6765) + 160 len ceil32(_12259)] = mem[_6269 + 32 len ceil32(_12259)]
                                if ceil32(_12259) > _12259:
                                    mem[_6614 + (320 * _6765) + _12259 + 160] = 0
                                return memory
                                  from mem[64]
                                   len ceil32(_12259) + _6614 + (320 * _6765) + -mem[64] + 160
                            mem[64] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 544
                            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224] = 0
                            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 256] = 0
                            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 288] = 0
                            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 320] = 0
                            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 352] = 0
                            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 384] = 0
                            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 416] = 0
                            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 448] = 0
                            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 480] = 0
                            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 512] = 0
                            mem[var28001] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224
                            s = var28001
                            idx = var28002
                            while idx - 1:
                                mem[64] = mem[64] + 320
                                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224] = 0
                                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 256] = 0
                                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 288] = 0
                                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 320] = 0
                                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 352] = 0
                                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 384] = 0
                                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 416] = 0
                                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 448] = 0
                                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 480] = 0
                                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 512] = 0
                                mem[s + 32] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224
                                s = s + 32
                                idx = idx - 1
                                continue 
                            idx = 0
                            while idx < arg2:
                                if arg1 < idx:
                                    revert with 0, 17
                                if arg1 - idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                                    revert with 0, 50
                                mem[0] = mem[(32 * arg1 - idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]
                                mem[32] = 12
                                _25802 = sha3(mem[(32 * arg1 - idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192], 12)
                                _25803 = mem[64]
                                mem[64] = mem[64] + 320
                                mem[_25803] = stor12[mem[(32 * arg1 - idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]].field_0
                                mem[_25803 + 32] = stor1[_25802]
                                mem[_25803 + 64] = stor2[_25802]
                                mem[_25803 + 96] = stor3[_25802]
                                mem[_25803 + 128] = stor4[_25802]
                                mem[_25803 + 160] = stor5[_25802]
                                mem[_25803 + 192] = stor6[_25802]
                                mem[_25803 + 224] = stor7[_25802].field_0
                                mem[_25803 + 256] = bool(stor7[_25802].field_160)
                                mem[_25803 + 288] = stor8[_25802]
                                if idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]:
                                    revert with 0, 50
                                mem[(32 * idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224] = _25803
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                continue 
                            if arg1 < arg2:
                                _24757 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_24757] = 4
                                mem[_24757 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                                _25083 = mem[64]
                                mem[mem[64]] = 96
                                _25799 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                                mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                                idx = 0
                                s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                                t = mem[64] + 128
                                while idx < _25799:
                                    _37046 = mem[s]
                                    mem[t] = mem[mem[s]]
                                    mem[t + 32] = mem[_37046 + 32]
                                    mem[t + 64] = mem[_37046 + 64]
                                    mem[t + 96] = mem[_37046 + 96]
                                    mem[t + 128] = mem[_37046 + 128]
                                    mem[t + 160] = mem[_37046 + 172 len 20]
                                    mem[t + 192] = mem[_37046 + 192]
                                    mem[t + 224] = mem[_37046 + 236 len 20]
                                    mem[t + 256] = bool(mem[_37046 + 256])
                                    mem[t + 288] = mem[_37046 + 288]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 320
                                    continue 
                                mem[_25083 + 32] = 0
                                mem[_25083 + 64] = (320 * _25799) + 128
                                _38146 = mem[_24757]
                                mem[_25083 + (320 * _25799) + 128] = mem[_24757]
                                mem[_25083 + (320 * _25799) + 160 len ceil32(_38146)] = mem[_24757 + 32 len ceil32(_38146)]
                                if ceil32(_38146) > _38146:
                                    mem[_25083 + (320 * _25799) + _38146 + 160] = 0
                                return memory
                                  from mem[64]
                                   len ceil32(_38146) + _25083 + (320 * _25799) + -mem[64] + 160
                            _25800 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_25800] = 7
                            mem[_25800 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                            _26609 = mem[64]
                            mem[mem[64]] = 96
                            _27098 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                            mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                            idx = 0
                            s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                            t = mem[64] + 128
                            while idx < _27098:
                                _37053 = mem[s]
                                mem[t] = mem[mem[s]]
                                mem[t + 32] = mem[_37053 + 32]
                                mem[t + 64] = mem[_37053 + 64]
                                mem[t + 96] = mem[_37053 + 96]
                                mem[t + 128] = mem[_37053 + 128]
                                mem[t + 160] = mem[_37053 + 172 len 20]
                                mem[t + 192] = mem[_37053 + 192]
                                mem[t + 224] = mem[_37053 + 236 len 20]
                                mem[t + 256] = bool(mem[_37053 + 256])
                                mem[t + 288] = mem[_37053 + 288]
                                idx = idx + 1
                                s = s + 32
                                t = t + 320
                                continue 
                            mem[_26609 + 32] = arg1 - arg2
                            mem[_26609 + 64] = (320 * _27098) + 128
                            _38147 = mem[_25800]
                            mem[_26609 + (320 * _27098) + 128] = mem[_25800]
                            mem[_26609 + (320 * _27098) + 160 len ceil32(_38147)] = mem[_25800 + 32 len ceil32(_38147)]
                            if ceil32(_38147) > _38147:
                                mem[_26609 + (320 * _27098) + _38147 + 160] = 0
                            return memory
                              from mem[64]
                               len ceil32(_38147) + _26609 + (320 * _27098) + -mem[64] + 160
                        if 1 > !arg1:
                            revert with 0, 17
                        if arg1 + 1 > test266151307():
                            revert with 0, 65
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192] = arg1 + 1
                        mem[64] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 224
                        if not arg1 + 1:
                            idx = 0
                            while idx < arg1 + 1:
                                if arg1 < idx:
                                    revert with 0, 17
                                if arg1 - idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                                    revert with 0, 50
                                mem[0] = mem[(32 * arg1 - idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]
                                mem[32] = 12
                                _6277 = sha3(mem[(32 * arg1 - idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192], 12)
                                _6278 = mem[64]
                                mem[64] = mem[64] + 320
                                mem[_6278] = stor12[mem[(32 * arg1 - idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]].field_0
                                mem[_6278 + 32] = stor1[_6277]
                                mem[_6278 + 64] = stor2[_6277]
                                mem[_6278 + 96] = stor3[_6277]
                                mem[_6278 + 128] = stor4[_6277]
                                mem[_6278 + 160] = stor5[_6277]
                                mem[_6278 + 192] = stor6[_6277]
                                mem[_6278 + 224] = stor7[_6277].field_0
                                mem[_6278 + 256] = bool(stor7[_6277].field_160)
                                mem[_6278 + 288] = stor8[_6277]
                                if idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]:
                                    revert with 0, 50
                                mem[(32 * idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224] = _6278
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                continue 
                            if arg1 < arg1 + 1:
                                _5857 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_5857] = 4
                                mem[_5857 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                                _5970 = mem[64]
                                mem[mem[64]] = 96
                                _6274 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                                mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                                idx = 0
                                s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                                t = mem[64] + 128
                                while idx < _6274:
                                    _12037 = mem[s]
                                    mem[t] = mem[mem[s]]
                                    mem[t + 32] = mem[_12037 + 32]
                                    mem[t + 64] = mem[_12037 + 64]
                                    mem[t + 96] = mem[_12037 + 96]
                                    mem[t + 128] = mem[_12037 + 128]
                                    mem[t + 160] = mem[_12037 + 172 len 20]
                                    mem[t + 192] = mem[_12037 + 192]
                                    mem[t + 224] = mem[_12037 + 236 len 20]
                                    mem[t + 256] = bool(mem[_12037 + 256])
                                    mem[t + 288] = mem[_12037 + 288]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 320
                                    continue 
                                mem[_5970 + 32] = 0
                                mem[_5970 + 64] = (320 * _6274) + 128
                                _12260 = mem[_5857]
                                mem[_5970 + (320 * _6274) + 128] = mem[_5857]
                                mem[_5970 + (320 * _6274) + 160 len ceil32(_12260)] = mem[_5857 + 32 len ceil32(_12260)]
                                if ceil32(_12260) > _12260:
                                    mem[_5970 + (320 * _6274) + _12260 + 160] = 0
                                return memory
                                  from mem[64]
                                   len ceil32(_12260) + _5970 + (320 * _6274) + -mem[64] + 160
                            _6275 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_6275] = 7
                            mem[_6275 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                            _6623 = mem[64]
                            mem[mem[64]] = 96
                            _6767 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                            mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                            idx = 0
                            s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                            t = mem[64] + 128
                            while idx < _6767:
                                _12044 = mem[s]
                                mem[t] = mem[mem[s]]
                                mem[t + 32] = mem[_12044 + 32]
                                mem[t + 64] = mem[_12044 + 64]
                                mem[t + 96] = mem[_12044 + 96]
                                mem[t + 128] = mem[_12044 + 128]
                                mem[t + 160] = mem[_12044 + 172 len 20]
                                mem[t + 192] = mem[_12044 + 192]
                                mem[t + 224] = mem[_12044 + 236 len 20]
                                mem[t + 256] = bool(mem[_12044 + 256])
                                mem[t + 288] = mem[_12044 + 288]
                                idx = idx + 1
                                s = s + 32
                                t = t + 320
                                continue 
                            mem[_6623 + 32] = -1
                            mem[_6623 + 64] = (320 * _6767) + 128
                            _12261 = mem[_6275]
                            mem[_6623 + (320 * _6767) + 128] = mem[_6275]
                            mem[_6623 + (320 * _6767) + 160 len ceil32(_12261)] = mem[_6275 + 32 len ceil32(_12261)]
                            if ceil32(_12261) > _12261:
                                mem[_6623 + (320 * _6767) + _12261 + 160] = 0
                            return memory
                              from mem[64]
                               len ceil32(_12261) + _6623 + (320 * _6767) + -mem[64] + 160
                        mem[64] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 544
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 224] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 256] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 288] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 320] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 352] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 384] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 416] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 448] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 480] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 512] = 0
                        mem[var32001] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 224
                        s = var32001
                        idx = var32002
                        while idx - 1:
                            mem[64] = mem[64] + 320
                            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 224] = 0
                            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 256] = 0
                            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 288] = 0
                            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 320] = 0
                            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 352] = 0
                            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 384] = 0
                            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 416] = 0
                            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 448] = 0
                            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 480] = 0
                            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 512] = 0
                            mem[s + 32] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 224
                            s = s + 32
                            idx = idx - 1
                            continue 
                        idx = 0
                        while idx < arg1 + 1:
                            if arg1 < idx:
                                revert with 0, 17
                            if arg1 - idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                                revert with 0, 50
                            mem[0] = mem[(32 * arg1 - idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]
                            mem[32] = 12
                            _25810 = sha3(mem[(32 * arg1 - idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192], 12)
                            _25811 = mem[64]
                            mem[64] = mem[64] + 320
                            mem[_25811] = stor12[mem[(32 * arg1 - idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]].field_0
                            mem[_25811 + 32] = stor1[_25810]
                            mem[_25811 + 64] = stor2[_25810]
                            mem[_25811 + 96] = stor3[_25810]
                            mem[_25811 + 128] = stor4[_25810]
                            mem[_25811 + 160] = stor5[_25810]
                            mem[_25811 + 192] = stor6[_25810]
                            mem[_25811 + 224] = stor7[_25810].field_0
                            mem[_25811 + 256] = bool(stor7[_25810].field_160)
                            mem[_25811 + 288] = stor8[_25810]
                            if idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]:
                                revert with 0, 50
                            mem[(32 * idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224] = _25811
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            continue 
                        if arg1 < arg1 + 1:
                            _24758 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_24758] = 4
                            mem[_24758 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                            _25087 = mem[64]
                            mem[mem[64]] = 96
                            _25807 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                            mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                            idx = 0
                            s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                            t = mem[64] + 128
                            while idx < _25807:
                                _37060 = mem[s]
                                mem[t] = mem[mem[s]]
                                mem[t + 32] = mem[_37060 + 32]
                                mem[t + 64] = mem[_37060 + 64]
                                mem[t + 96] = mem[_37060 + 96]
                                mem[t + 128] = mem[_37060 + 128]
                                mem[t + 160] = mem[_37060 + 172 len 20]
                                mem[t + 192] = mem[_37060 + 192]
                                mem[t + 224] = mem[_37060 + 236 len 20]
                                mem[t + 256] = bool(mem[_37060 + 256])
                                mem[t + 288] = mem[_37060 + 288]
                                idx = idx + 1
                                s = s + 32
                                t = t + 320
                                continue 
                            mem[_25087 + 32] = 0
                            mem[_25087 + 64] = (320 * _25807) + 128
                            _38148 = mem[_24758]
                            mem[_25087 + (320 * _25807) + 128] = mem[_24758]
                            mem[_25087 + (320 * _25807) + 160 len ceil32(_38148)] = mem[_24758 + 32 len ceil32(_38148)]
                            if ceil32(_38148) > _38148:
                                mem[_25087 + (320 * _25807) + _38148 + 160] = 0
                            return memory
                              from mem[64]
                               len ceil32(_38148) + _25087 + (320 * _25807) + -mem[64] + 160
                        _25808 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_25808] = 7
                        mem[_25808 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                        _26617 = mem[64]
                        mem[mem[64]] = 96
                        _27100 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                        mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                        idx = 0
                        s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                        t = mem[64] + 128
                        while idx < _27100:
                            _37067 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_37067 + 32]
                            mem[t + 64] = mem[_37067 + 64]
                            mem[t + 96] = mem[_37067 + 96]
                            mem[t + 128] = mem[_37067 + 128]
                            mem[t + 160] = mem[_37067 + 172 len 20]
                            mem[t + 192] = mem[_37067 + 192]
                            mem[t + 224] = mem[_37067 + 236 len 20]
                            mem[t + 256] = bool(mem[_37067 + 256])
                            mem[t + 288] = mem[_37067 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_26617 + 32] = -1
                        mem[_26617 + 64] = (320 * _27100) + 128
                        _38149 = mem[_25808]
                        mem[_26617 + (320 * _27100) + 128] = mem[_25808]
                        mem[_26617 + (320 * _27100) + 160 len ceil32(_38149)] = mem[_25808 + 32 len ceil32(_38149)]
                        if ceil32(_38149) > _38149:
                            mem[_26617 + (320 * _27100) + _38149 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_38149) + _26617 + (320 * _27100) + -mem[64] + 160
                    if stor15[address(arg5)].field_0 < arg1:
                        revert with 0, 17
                    if arg2 <= stor15[address(arg5)].field_0 - arg1:
                        if arg2 > test266151307():
                            revert with 0, 65
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192] = arg2
                        mem[64] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224
                        if not arg2:
                            idx = 0
                            while idx < arg2:
                                if arg1 > !idx:
                                    revert with 0, 17
                                if arg1 + idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                                    revert with 0, 50
                                mem[0] = mem[(32 * arg1 + idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]
                                mem[32] = 12
                                _6281 = sha3(mem[(32 * arg1 + idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192], 12)
                                _6282 = mem[64]
                                mem[64] = mem[64] + 320
                                mem[_6282] = stor12[mem[(32 * arg1 + idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]].field_0
                                mem[_6282 + 32] = stor1[_6281]
                                mem[_6282 + 64] = stor2[_6281]
                                mem[_6282 + 96] = stor3[_6281]
                                mem[_6282 + 128] = stor4[_6281]
                                mem[_6282 + 160] = stor5[_6281]
                                mem[_6282 + 192] = stor6[_6281]
                                mem[_6282 + 224] = stor7[_6281].field_0
                                mem[_6282 + 256] = bool(stor7[_6281].field_160)
                                mem[_6282 + 288] = stor8[_6281]
                                if idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]:
                                    revert with 0, 50
                                mem[(32 * idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224] = _6282
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                continue 
                            if arg1 > !arg2:
                                revert with 0, 17
                            if arg1 > !arg2:
                                revert with 0, 17
                            if arg1 + arg2 < mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                                _6768 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_6768] = 7
                                mem[_6768 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                                _7529 = mem[64]
                                mem[mem[64]] = 96
                                _7697 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                                mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                                idx = 0
                                s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                                t = mem[64] + 128
                                while idx < _7697:
                                    _12051 = mem[s]
                                    mem[t] = mem[mem[s]]
                                    mem[t + 32] = mem[_12051 + 32]
                                    mem[t + 64] = mem[_12051 + 64]
                                    mem[t + 96] = mem[_12051 + 96]
                                    mem[t + 128] = mem[_12051 + 128]
                                    mem[t + 160] = mem[_12051 + 172 len 20]
                                    mem[t + 192] = mem[_12051 + 192]
                                    mem[t + 224] = mem[_12051 + 236 len 20]
                                    mem[t + 256] = bool(mem[_12051 + 256])
                                    mem[t + 288] = mem[_12051 + 288]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 320
                                    continue 
                                mem[_7529 + 32] = arg1 + arg2
                                mem[_7529 + 64] = (320 * _7697) + 128
                                _12262 = mem[_6768]
                                mem[_7529 + (320 * _7697) + 128] = mem[_6768]
                                mem[_7529 + (320 * _7697) + 160 len ceil32(_12262)] = mem[_6768 + 32 len ceil32(_12262)]
                                if ceil32(_12262) > _12262:
                                    mem[_7529 + (320 * _7697) + _12262 + 160] = 0
                                return memory
                                  from mem[64]
                                   len ceil32(_12262) + _7529 + (320 * _7697) + -mem[64] + 160
                            _6769 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_6769] = 4
                            mem[_6769 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                            _7530 = mem[64]
                            mem[mem[64]] = 96
                            _7698 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                            mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                            idx = 0
                            s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                            t = mem[64] + 128
                            while idx < _7698:
                                _12058 = mem[s]
                                mem[t] = mem[mem[s]]
                                mem[t + 32] = mem[_12058 + 32]
                                mem[t + 64] = mem[_12058 + 64]
                                mem[t + 96] = mem[_12058 + 96]
                                mem[t + 128] = mem[_12058 + 128]
                                mem[t + 160] = mem[_12058 + 172 len 20]
                                mem[t + 192] = mem[_12058 + 192]
                                mem[t + 224] = mem[_12058 + 236 len 20]
                                mem[t + 256] = bool(mem[_12058 + 256])
                                mem[t + 288] = mem[_12058 + 288]
                                idx = idx + 1
                                s = s + 32
                                t = t + 320
                                continue 
                            mem[_7530 + 32] = arg1 + arg2
                            mem[_7530 + 64] = (320 * _7698) + 128
                            _12263 = mem[_6769]
                            mem[_7530 + (320 * _7698) + 128] = mem[_6769]
                            mem[_7530 + (320 * _7698) + 160 len ceil32(_12263)] = mem[_6769 + 32 len ceil32(_12263)]
                            if ceil32(_12263) > _12263:
                                mem[_7530 + (320 * _7698) + _12263 + 160] = 0
                            return memory
                              from mem[64]
                               len ceil32(_12263) + _7530 + (320 * _7698) + -mem[64] + 160
                        mem[64] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 544
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 256] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 288] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 320] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 352] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 384] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 416] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 448] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 480] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 512] = 0
                        mem[var31001] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224
                        s = var31001
                        idx = var31002
                        while idx - 1:
                            mem[64] = mem[64] + 320
                            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224] = 0
                            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 256] = 0
                            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 288] = 0
                            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 320] = 0
                            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 352] = 0
                            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 384] = 0
                            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 416] = 0
                            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 448] = 0
                            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 480] = 0
                            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 512] = 0
                            mem[s + 32] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224
                            s = s + 32
                            idx = idx - 1
                            continue 
                        idx = 0
                        while idx < arg2:
                            if arg1 > !idx:
                                revert with 0, 17
                            if arg1 + idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                                revert with 0, 50
                            mem[0] = mem[(32 * arg1 + idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]
                            mem[32] = 12
                            _25816 = sha3(mem[(32 * arg1 + idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192], 12)
                            _25817 = mem[64]
                            mem[64] = mem[64] + 320
                            mem[_25817] = stor12[mem[(32 * arg1 + idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]].field_0
                            mem[_25817 + 32] = stor1[_25816]
                            mem[_25817 + 64] = stor2[_25816]
                            mem[_25817 + 96] = stor3[_25816]
                            mem[_25817 + 128] = stor4[_25816]
                            mem[_25817 + 160] = stor5[_25816]
                            mem[_25817 + 192] = stor6[_25816]
                            mem[_25817 + 224] = stor7[_25816].field_0
                            mem[_25817 + 256] = bool(stor7[_25816].field_160)
                            mem[_25817 + 288] = stor8[_25816]
                            if idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]:
                                revert with 0, 50
                            mem[(32 * idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224] = _25817
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            continue 
                        if arg1 > !arg2:
                            revert with 0, 17
                        if arg1 > !arg2:
                            revert with 0, 17
                        if arg1 + arg2 < mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                            _27101 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_27101] = 7
                            mem[_27101 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                            _28232 = mem[64]
                            mem[mem[64]] = 96
                            _29012 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                            mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                            idx = 0
                            s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                            t = mem[64] + 128
                            while idx < _29012:
                                _37074 = mem[s]
                                mem[t] = mem[mem[s]]
                                mem[t + 32] = mem[_37074 + 32]
                                mem[t + 64] = mem[_37074 + 64]
                                mem[t + 96] = mem[_37074 + 96]
                                mem[t + 128] = mem[_37074 + 128]
                                mem[t + 160] = mem[_37074 + 172 len 20]
                                mem[t + 192] = mem[_37074 + 192]
                                mem[t + 224] = mem[_37074 + 236 len 20]
                                mem[t + 256] = bool(mem[_37074 + 256])
                                mem[t + 288] = mem[_37074 + 288]
                                idx = idx + 1
                                s = s + 32
                                t = t + 320
                                continue 
                            mem[_28232 + 32] = arg1 + arg2
                            mem[_28232 + 64] = (320 * _29012) + 128
                            _38150 = mem[_27101]
                            mem[_28232 + (320 * _29012) + 128] = mem[_27101]
                            mem[_28232 + (320 * _29012) + 160 len ceil32(_38150)] = mem[_27101 + 32 len ceil32(_38150)]
                            if ceil32(_38150) > _38150:
                                mem[_28232 + (320 * _29012) + _38150 + 160] = 0
                            return memory
                              from mem[64]
                               len ceil32(_38150) + _28232 + (320 * _29012) + -mem[64] + 160
                        _27102 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_27102] = 4
                        mem[_27102 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                        _28233 = mem[64]
                        mem[mem[64]] = 96
                        _29013 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                        mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                        idx = 0
                        s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                        t = mem[64] + 128
                        while idx < _29013:
                            _37081 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_37081 + 32]
                            mem[t + 64] = mem[_37081 + 64]
                            mem[t + 96] = mem[_37081 + 96]
                            mem[t + 128] = mem[_37081 + 128]
                            mem[t + 160] = mem[_37081 + 172 len 20]
                            mem[t + 192] = mem[_37081 + 192]
                            mem[t + 224] = mem[_37081 + 236 len 20]
                            mem[t + 256] = bool(mem[_37081 + 256])
                            mem[t + 288] = mem[_37081 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_28233 + 32] = arg1 + arg2
                        mem[_28233 + 64] = (320 * _29013) + 128
                        _38151 = mem[_27102]
                        mem[_28233 + (320 * _29013) + 128] = mem[_27102]
                        mem[_28233 + (320 * _29013) + 160 len ceil32(_38151)] = mem[_27102 + 32 len ceil32(_38151)]
                        if ceil32(_38151) > _38151:
                            mem[_28233 + (320 * _29013) + _38151 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_38151) + _28233 + (320 * _29013) + -mem[64] + 160
                    if stor15[address(arg5)].field_0 < arg1:
                        revert with 0, 17
                    if stor15[address(arg5)].field_0 - arg1 > test266151307():
                        revert with 0, 65
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192] = stor15[address(arg5)].field_0 - arg1
                    mem[64] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 224
                    if not stor15[address(arg5)].field_0 - arg1:
                        idx = 0
                        while idx < stor15[address(arg5)].field_0 - arg1:
                            if arg1 > !idx:
                                revert with 0, 17
                            if arg1 + idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                                revert with 0, 50
                            mem[0] = mem[(32 * arg1 + idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]
                            mem[32] = 12
                            _6285 = sha3(mem[(32 * arg1 + idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192], 12)
                            _6286 = mem[64]
                            mem[64] = mem[64] + 320
                            mem[_6286] = stor12[mem[(32 * arg1 + idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]].field_0
                            mem[_6286 + 32] = stor1[_6285]
                            mem[_6286 + 64] = stor2[_6285]
                            mem[_6286 + 96] = stor3[_6285]
                            mem[_6286 + 128] = stor4[_6285]
                            mem[_6286 + 160] = stor5[_6285]
                            mem[_6286 + 192] = stor6[_6285]
                            mem[_6286 + 224] = stor7[_6285].field_0
                            mem[_6286 + 256] = bool(stor7[_6285].field_160)
                            mem[_6286 + 288] = stor8[_6285]
                            if idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]:
                                revert with 0, 50
                            mem[(32 * idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224] = _6286
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            continue 
                        if arg1 > !(stor15[address(arg5)].field_0 - arg1):
                            revert with 0, 17
                        if arg1 > !(stor15[address(arg5)].field_0 - arg1):
                            revert with 0, 17
                        if stor15[address(arg5)].field_0 < mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                            _6770 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_6770] = 7
                            mem[_6770 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                            _7535 = mem[64]
                            mem[mem[64]] = 96
                            _7699 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                            mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                            idx = 0
                            s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                            t = mem[64] + 128
                            while idx < _7699:
                                _12065 = mem[s]
                                mem[t] = mem[mem[s]]
                                mem[t + 32] = mem[_12065 + 32]
                                mem[t + 64] = mem[_12065 + 64]
                                mem[t + 96] = mem[_12065 + 96]
                                mem[t + 128] = mem[_12065 + 128]
                                mem[t + 160] = mem[_12065 + 172 len 20]
                                mem[t + 192] = mem[_12065 + 192]
                                mem[t + 224] = mem[_12065 + 236 len 20]
                                mem[t + 256] = bool(mem[_12065 + 256])
                                mem[t + 288] = mem[_12065 + 288]
                                idx = idx + 1
                                s = s + 32
                                t = t + 320
                                continue 
                            mem[_7535 + 32] = stor15[address(arg5)].field_0
                            mem[_7535 + 64] = (320 * _7699) + 128
                            _12264 = mem[_6770]
                            mem[_7535 + (320 * _7699) + 128] = mem[_6770]
                            mem[_7535 + (320 * _7699) + 160 len ceil32(_12264)] = mem[_6770 + 32 len ceil32(_12264)]
                            if ceil32(_12264) > _12264:
                                mem[_7535 + (320 * _7699) + _12264 + 160] = 0
                            return memory
                              from mem[64]
                               len ceil32(_12264) + _7535 + (320 * _7699) + -mem[64] + 160
                        _6771 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_6771] = 4
                        mem[_6771 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                        _7536 = mem[64]
                        mem[mem[64]] = 96
                        _7700 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                        mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                        idx = 0
                        s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                        t = mem[64] + 128
                        while idx < _7700:
                            _12072 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_12072 + 32]
                            mem[t + 64] = mem[_12072 + 64]
                            mem[t + 96] = mem[_12072 + 96]
                            mem[t + 128] = mem[_12072 + 128]
                            mem[t + 160] = mem[_12072 + 172 len 20]
                            mem[t + 192] = mem[_12072 + 192]
                            mem[t + 224] = mem[_12072 + 236 len 20]
                            mem[t + 256] = bool(mem[_12072 + 256])
                            mem[t + 288] = mem[_12072 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_7536 + 32] = stor15[address(arg5)].field_0
                        mem[_7536 + 64] = (320 * _7700) + 128
                        _12265 = mem[_6771]
                        mem[_7536 + (320 * _7700) + 128] = mem[_6771]
                        mem[_7536 + (320 * _7700) + 160 len ceil32(_12265)] = mem[_6771 + 32 len ceil32(_12265)]
                        if ceil32(_12265) > _12265:
                            mem[_7536 + (320 * _7700) + _12265 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_12265) + _7536 + (320 * _7700) + -mem[64] + 160
                    mem[64] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 544
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 224] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 256] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 288] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 320] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 352] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 384] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 416] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 448] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 480] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 512] = 0
                    mem[var35001] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 224
                    s = var35001
                    idx = var35002
                    while idx - 1:
                        mem[64] = mem[64] + 320
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 224] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 256] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 288] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 320] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 352] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 384] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 416] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 448] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 480] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 512] = 0
                        mem[s + 32] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 224
                        s = s + 32
                        idx = idx - 1
                        continue 
                    idx = 0
                    while idx < stor15[address(arg5)].field_0 - arg1:
                        if arg1 > !idx:
                            revert with 0, 17
                        if arg1 + idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                            revert with 0, 50
                        mem[0] = mem[(32 * arg1 + idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]
                        mem[32] = 12
                        _25822 = sha3(mem[(32 * arg1 + idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192], 12)
                        _25823 = mem[64]
                        mem[64] = mem[64] + 320
                        mem[_25823] = stor12[mem[(32 * arg1 + idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]].field_0
                        mem[_25823 + 32] = stor1[_25822]
                        mem[_25823 + 64] = stor2[_25822]
                        mem[_25823 + 96] = stor3[_25822]
                        mem[_25823 + 128] = stor4[_25822]
                        mem[_25823 + 160] = stor5[_25822]
                        mem[_25823 + 192] = stor6[_25822]
                        mem[_25823 + 224] = stor7[_25822].field_0
                        mem[_25823 + 256] = bool(stor7[_25822].field_160)
                        mem[_25823 + 288] = stor8[_25822]
                        if idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]:
                            revert with 0, 50
                        mem[(32 * idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224] = _25823
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if arg1 > !(stor15[address(arg5)].field_0 - arg1):
                        revert with 0, 17
                    if arg1 > !(stor15[address(arg5)].field_0 - arg1):
                        revert with 0, 17
                    if stor15[address(arg5)].field_0 < mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                        _27103 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_27103] = 7
                        mem[_27103 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                        _28234 = mem[64]
                        mem[mem[64]] = 96
                        _29014 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                        mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                        idx = 0
                        s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                        t = mem[64] + 128
                        while idx < _29014:
                            _37088 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_37088 + 32]
                            mem[t + 64] = mem[_37088 + 64]
                            mem[t + 96] = mem[_37088 + 96]
                            mem[t + 128] = mem[_37088 + 128]
                            mem[t + 160] = mem[_37088 + 172 len 20]
                            mem[t + 192] = mem[_37088 + 192]
                            mem[t + 224] = mem[_37088 + 236 len 20]
                            mem[t + 256] = bool(mem[_37088 + 256])
                            mem[t + 288] = mem[_37088 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_28234 + 32] = stor15[address(arg5)].field_0
                        mem[_28234 + 64] = (320 * _29014) + 128
                        _38152 = mem[_27103]
                        mem[_28234 + (320 * _29014) + 128] = mem[_27103]
                        mem[_28234 + (320 * _29014) + 160 len ceil32(_38152)] = mem[_27103 + 32 len ceil32(_38152)]
                        if ceil32(_38152) > _38152:
                            mem[_28234 + (320 * _29014) + _38152 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_38152) + _28234 + (320 * _29014) + -mem[64] + 160
                    _27104 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_27104] = 4
                    mem[_27104 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                    _28235 = mem[64]
                    mem[mem[64]] = 96
                    _29015 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                    mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                    idx = 0
                    s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                    t = mem[64] + 128
                    while idx < _29015:
                        _37095 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_37095 + 32]
                        mem[t + 64] = mem[_37095 + 64]
                        mem[t + 96] = mem[_37095 + 96]
                        mem[t + 128] = mem[_37095 + 128]
                        mem[t + 160] = mem[_37095 + 172 len 20]
                        mem[t + 192] = mem[_37095 + 192]
                        mem[t + 224] = mem[_37095 + 236 len 20]
                        mem[t + 256] = bool(mem[_37095 + 256])
                        mem[t + 288] = mem[_37095 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_28235 + 32] = stor15[address(arg5)].field_0
                    mem[_28235 + 64] = (320 * _29015) + 128
                    _38153 = mem[_27104]
                    mem[_28235 + (320 * _29015) + 128] = mem[_27104]
                    mem[_28235 + (320 * _29015) + 160 len ceil32(_38153)] = mem[_27104 + 32 len ceil32(_38153)]
                    if ceil32(_38153) > _38153:
                        mem[_28235 + (320 * _29015) + _38153 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_38153) + _28235 + (320 * _29015) + -mem[64] + 160
                if stor15[address(arg5)].field_0 < 1:
                    revert with 0, 17
                if arg3:
                    if arg2 <= stor15[address(arg5)].field_0 - 1:
                        if arg2 > test266151307():
                            revert with 0, 65
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192] = arg2
                        mem[64] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224
                        if not arg2:
                            idx = 0
                            while idx < arg2:
                                if stor15[address(arg5)].field_0 - 1 < idx:
                                    revert with 0, 17
                                if stor15[address(arg5)].field_0 + -idx - 1 >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                                    revert with 0, 50
                                mem[0] = mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]
                                mem[32] = 12
                                _6291 = sha3(mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192], 12)
                                _6292 = mem[64]
                                mem[64] = mem[64] + 320
                                mem[_6292] = stor12[mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]].field_0
                                mem[_6292 + 32] = stor1[_6291]
                                mem[_6292 + 64] = stor2[_6291]
                                mem[_6292 + 96] = stor3[_6291]
                                mem[_6292 + 128] = stor4[_6291]
                                mem[_6292 + 160] = stor5[_6291]
                                mem[_6292 + 192] = stor6[_6291]
                                mem[_6292 + 224] = stor7[_6291].field_0
                                mem[_6292 + 256] = bool(stor7[_6291].field_160)
                                mem[_6292 + 288] = stor8[_6291]
                                if idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]:
                                    revert with 0, 50
                                mem[(32 * idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224] = _6292
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                continue 
                            if stor15[address(arg5)].field_0 - 1 < arg2:
                                _5858 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_5858] = 4
                                mem[_5858 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                                _5974 = mem[64]
                                mem[mem[64]] = 96
                                _6288 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                                mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                                idx = 0
                                s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                                t = mem[64] + 128
                                while idx < _6288:
                                    _12079 = mem[s]
                                    mem[t] = mem[mem[s]]
                                    mem[t + 32] = mem[_12079 + 32]
                                    mem[t + 64] = mem[_12079 + 64]
                                    mem[t + 96] = mem[_12079 + 96]
                                    mem[t + 128] = mem[_12079 + 128]
                                    mem[t + 160] = mem[_12079 + 172 len 20]
                                    mem[t + 192] = mem[_12079 + 192]
                                    mem[t + 224] = mem[_12079 + 236 len 20]
                                    mem[t + 256] = bool(mem[_12079 + 256])
                                    mem[t + 288] = mem[_12079 + 288]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 320
                                    continue 
                                mem[_5974 + 32] = 0
                                mem[_5974 + 64] = (320 * _6288) + 128
                                _12266 = mem[_5858]
                                mem[_5974 + (320 * _6288) + 128] = mem[_5858]
                                mem[_5974 + (320 * _6288) + 160 len ceil32(_12266)] = mem[_5858 + 32 len ceil32(_12266)]
                                if ceil32(_12266) > _12266:
                                    mem[_5974 + (320 * _6288) + _12266 + 160] = 0
                                return memory
                                  from mem[64]
                                   len ceil32(_12266) + _5974 + (320 * _6288) + -mem[64] + 160
                            _6289 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_6289] = 7
                            mem[_6289 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                            _6632 = mem[64]
                            mem[mem[64]] = 96
                            _6773 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                            mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                            idx = 0
                            s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                            t = mem[64] + 128
                            while idx < _6773:
                                _12086 = mem[s]
                                mem[t] = mem[mem[s]]
                                mem[t + 32] = mem[_12086 + 32]
                                mem[t + 64] = mem[_12086 + 64]
                                mem[t + 96] = mem[_12086 + 96]
                                mem[t + 128] = mem[_12086 + 128]
                                mem[t + 160] = mem[_12086 + 172 len 20]
                                mem[t + 192] = mem[_12086 + 192]
                                mem[t + 224] = mem[_12086 + 236 len 20]
                                mem[t + 256] = bool(mem[_12086 + 256])
                                mem[t + 288] = mem[_12086 + 288]
                                idx = idx + 1
                                s = s + 32
                                t = t + 320
                                continue 
                            mem[_6632 + 32] = stor15[address(arg5)].field_0 + -arg2 - 1
                            mem[_6632 + 64] = (320 * _6773) + 128
                            _12267 = mem[_6289]
                            mem[_6632 + (320 * _6773) + 128] = mem[_6289]
                            mem[_6632 + (320 * _6773) + 160 len ceil32(_12267)] = mem[_6289 + 32 len ceil32(_12267)]
                            if ceil32(_12267) > _12267:
                                mem[_6632 + (320 * _6773) + _12267 + 160] = 0
                            return memory
                              from mem[64]
                               len ceil32(_12267) + _6632 + (320 * _6773) + -mem[64] + 160
                        mem[64] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 544
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 256] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 288] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 320] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 352] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 384] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 416] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 448] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 480] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 512] = 0
                        mem[var32001] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224
                        s = var32001
                        idx = var32002
                        while idx - 1:
                            mem[64] = mem[64] + 320
                            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224] = 0
                            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 256] = 0
                            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 288] = 0
                            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 320] = 0
                            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 352] = 0
                            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 384] = 0
                            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 416] = 0
                            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 448] = 0
                            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 480] = 0
                            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 512] = 0
                            mem[s + 32] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224
                            s = s + 32
                            idx = idx - 1
                            continue 
                        idx = 0
                        while idx < arg2:
                            if stor15[address(arg5)].field_0 - 1 < idx:
                                revert with 0, 17
                            if stor15[address(arg5)].field_0 + -idx - 1 >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                                revert with 0, 50
                            mem[0] = mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]
                            mem[32] = 12
                            _25830 = sha3(mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192], 12)
                            _25831 = mem[64]
                            mem[64] = mem[64] + 320
                            mem[_25831] = stor12[mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]].field_0
                            mem[_25831 + 32] = stor1[_25830]
                            mem[_25831 + 64] = stor2[_25830]
                            mem[_25831 + 96] = stor3[_25830]
                            mem[_25831 + 128] = stor4[_25830]
                            mem[_25831 + 160] = stor5[_25830]
                            mem[_25831 + 192] = stor6[_25830]
                            mem[_25831 + 224] = stor7[_25830].field_0
                            mem[_25831 + 256] = bool(stor7[_25830].field_160)
                            mem[_25831 + 288] = stor8[_25830]
                            if idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]:
                                revert with 0, 50
                            mem[(32 * idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224] = _25831
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            continue 
                        if stor15[address(arg5)].field_0 - 1 < arg2:
                            _24759 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_24759] = 4
                            mem[_24759 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                            _25097 = mem[64]
                            mem[mem[64]] = 96
                            _25827 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                            mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                            idx = 0
                            s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                            t = mem[64] + 128
                            while idx < _25827:
                                _37102 = mem[s]
                                mem[t] = mem[mem[s]]
                                mem[t + 32] = mem[_37102 + 32]
                                mem[t + 64] = mem[_37102 + 64]
                                mem[t + 96] = mem[_37102 + 96]
                                mem[t + 128] = mem[_37102 + 128]
                                mem[t + 160] = mem[_37102 + 172 len 20]
                                mem[t + 192] = mem[_37102 + 192]
                                mem[t + 224] = mem[_37102 + 236 len 20]
                                mem[t + 256] = bool(mem[_37102 + 256])
                                mem[t + 288] = mem[_37102 + 288]
                                idx = idx + 1
                                s = s + 32
                                t = t + 320
                                continue 
                            mem[_25097 + 32] = 0
                            mem[_25097 + 64] = (320 * _25827) + 128
                            _38154 = mem[_24759]
                            mem[_25097 + (320 * _25827) + 128] = mem[_24759]
                            mem[_25097 + (320 * _25827) + 160 len ceil32(_38154)] = mem[_24759 + 32 len ceil32(_38154)]
                            if ceil32(_38154) > _38154:
                                mem[_25097 + (320 * _25827) + _38154 + 160] = 0
                            return memory
                              from mem[64]
                               len ceil32(_38154) + _25097 + (320 * _25827) + -mem[64] + 160
                        _25828 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_25828] = 7
                        mem[_25828 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                        _26625 = mem[64]
                        mem[mem[64]] = 96
                        _27106 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                        mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                        idx = 0
                        s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                        t = mem[64] + 128
                        while idx < _27106:
                            _37109 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_37109 + 32]
                            mem[t + 64] = mem[_37109 + 64]
                            mem[t + 96] = mem[_37109 + 96]
                            mem[t + 128] = mem[_37109 + 128]
                            mem[t + 160] = mem[_37109 + 172 len 20]
                            mem[t + 192] = mem[_37109 + 192]
                            mem[t + 224] = mem[_37109 + 236 len 20]
                            mem[t + 256] = bool(mem[_37109 + 256])
                            mem[t + 288] = mem[_37109 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_26625 + 32] = stor15[address(arg5)].field_0 + -arg2 - 1
                        mem[_26625 + 64] = (320 * _27106) + 128
                        _38155 = mem[_25828]
                        mem[_26625 + (320 * _27106) + 128] = mem[_25828]
                        mem[_26625 + (320 * _27106) + 160 len ceil32(_38155)] = mem[_25828 + 32 len ceil32(_38155)]
                        if ceil32(_38155) > _38155:
                            mem[_26625 + (320 * _27106) + _38155 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_38155) + _26625 + (320 * _27106) + -mem[64] + 160
                    if 1 > !(stor15[address(arg5)].field_0 - 1):
                        revert with 0, 17
                    if stor15[address(arg5)].field_0 > test266151307():
                        revert with 0, 65
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192] = stor15[address(arg5)].field_0
                    mem[64] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 224
                    if not stor15[address(arg5)].field_0:
                        idx = 0
                        while idx < stor15[address(arg5)].field_0:
                            if stor15[address(arg5)].field_0 - 1 < idx:
                                revert with 0, 17
                            if stor15[address(arg5)].field_0 + -idx - 1 >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                                revert with 0, 50
                            mem[0] = mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]
                            mem[32] = 12
                            _6297 = sha3(mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192], 12)
                            _6298 = mem[64]
                            mem[64] = mem[64] + 320
                            mem[_6298] = stor12[mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]].field_0
                            mem[_6298 + 32] = stor1[_6297]
                            mem[_6298 + 64] = stor2[_6297]
                            mem[_6298 + 96] = stor3[_6297]
                            mem[_6298 + 128] = stor4[_6297]
                            mem[_6298 + 160] = stor5[_6297]
                            mem[_6298 + 192] = stor6[_6297]
                            mem[_6298 + 224] = stor7[_6297].field_0
                            mem[_6298 + 256] = bool(stor7[_6297].field_160)
                            mem[_6298 + 288] = stor8[_6297]
                            if idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]:
                                revert with 0, 50
                            mem[(32 * idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224] = _6298
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            continue 
                        if stor15[address(arg5)].field_0 - 1 < stor15[address(arg5)].field_0:
                            _5859 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_5859] = 4
                            mem[_5859 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                            _5976 = mem[64]
                            mem[mem[64]] = 96
                            _6294 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                            mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                            idx = 0
                            s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                            t = mem[64] + 128
                            while idx < _6294:
                                _12093 = mem[s]
                                mem[t] = mem[mem[s]]
                                mem[t + 32] = mem[_12093 + 32]
                                mem[t + 64] = mem[_12093 + 64]
                                mem[t + 96] = mem[_12093 + 96]
                                mem[t + 128] = mem[_12093 + 128]
                                mem[t + 160] = mem[_12093 + 172 len 20]
                                mem[t + 192] = mem[_12093 + 192]
                                mem[t + 224] = mem[_12093 + 236 len 20]
                                mem[t + 256] = bool(mem[_12093 + 256])
                                mem[t + 288] = mem[_12093 + 288]
                                idx = idx + 1
                                s = s + 32
                                t = t + 320
                                continue 
                            mem[_5976 + 32] = 0
                            mem[_5976 + 64] = (320 * _6294) + 128
                            _12268 = mem[_5859]
                            mem[_5976 + (320 * _6294) + 128] = mem[_5859]
                            mem[_5976 + (320 * _6294) + 160 len ceil32(_12268)] = mem[_5859 + 32 len ceil32(_12268)]
                            if ceil32(_12268) > _12268:
                                mem[_5976 + (320 * _6294) + _12268 + 160] = 0
                            return memory
                              from mem[64]
                               len ceil32(_12268) + _5976 + (320 * _6294) + -mem[64] + 160
                        _6295 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_6295] = 7
                        mem[_6295 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                        _6641 = mem[64]
                        mem[mem[64]] = 96
                        _6775 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                        mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                        idx = 0
                        s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                        t = mem[64] + 128
                        while idx < _6775:
                            _12100 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_12100 + 32]
                            mem[t + 64] = mem[_12100 + 64]
                            mem[t + 96] = mem[_12100 + 96]
                            mem[t + 128] = mem[_12100 + 128]
                            mem[t + 160] = mem[_12100 + 172 len 20]
                            mem[t + 192] = mem[_12100 + 192]
                            mem[t + 224] = mem[_12100 + 236 len 20]
                            mem[t + 256] = bool(mem[_12100 + 256])
                            mem[t + 288] = mem[_12100 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_6641 + 32] = -1
                        mem[_6641 + 64] = (320 * _6775) + 128
                        _12269 = mem[_6295]
                        mem[_6641 + (320 * _6775) + 128] = mem[_6295]
                        mem[_6641 + (320 * _6775) + 160 len ceil32(_12269)] = mem[_6295 + 32 len ceil32(_12269)]
                        if ceil32(_12269) > _12269:
                            mem[_6641 + (320 * _6775) + _12269 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_12269) + _6641 + (320 * _6775) + -mem[64] + 160
                    mem[64] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 544
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 224] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 256] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 288] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 320] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 352] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 384] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 416] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 448] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 480] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 512] = 0
                    mem[var36001] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 224
                    s = var36001
                    idx = var36002
                    while idx - 1:
                        mem[64] = mem[64] + 320
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 224] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 256] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 288] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 320] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 352] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 384] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 416] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 448] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 480] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 512] = 0
                        mem[s + 32] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 224
                        s = s + 32
                        idx = idx - 1
                        continue 
                    idx = 0
                    while idx < stor15[address(arg5)].field_0:
                        if stor15[address(arg5)].field_0 - 1 < idx:
                            revert with 0, 17
                        if stor15[address(arg5)].field_0 + -idx - 1 >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                            revert with 0, 50
                        mem[0] = mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]
                        mem[32] = 12
                        _25838 = sha3(mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192], 12)
                        _25839 = mem[64]
                        mem[64] = mem[64] + 320
                        mem[_25839] = stor12[mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]].field_0
                        mem[_25839 + 32] = stor1[_25838]
                        mem[_25839 + 64] = stor2[_25838]
                        mem[_25839 + 96] = stor3[_25838]
                        mem[_25839 + 128] = stor4[_25838]
                        mem[_25839 + 160] = stor5[_25838]
                        mem[_25839 + 192] = stor6[_25838]
                        mem[_25839 + 224] = stor7[_25838].field_0
                        mem[_25839 + 256] = bool(stor7[_25838].field_160)
                        mem[_25839 + 288] = stor8[_25838]
                        if idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]:
                            revert with 0, 50
                        mem[(32 * idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224] = _25839
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if stor15[address(arg5)].field_0 - 1 < stor15[address(arg5)].field_0:
                        _24760 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_24760] = 4
                        mem[_24760 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                        _25101 = mem[64]
                        mem[mem[64]] = 96
                        _25835 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                        mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                        idx = 0
                        s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                        t = mem[64] + 128
                        while idx < _25835:
                            _37116 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_37116 + 32]
                            mem[t + 64] = mem[_37116 + 64]
                            mem[t + 96] = mem[_37116 + 96]
                            mem[t + 128] = mem[_37116 + 128]
                            mem[t + 160] = mem[_37116 + 172 len 20]
                            mem[t + 192] = mem[_37116 + 192]
                            mem[t + 224] = mem[_37116 + 236 len 20]
                            mem[t + 256] = bool(mem[_37116 + 256])
                            mem[t + 288] = mem[_37116 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_25101 + 32] = 0
                        mem[_25101 + 64] = (320 * _25835) + 128
                        _38156 = mem[_24760]
                        mem[_25101 + (320 * _25835) + 128] = mem[_24760]
                        mem[_25101 + (320 * _25835) + 160 len ceil32(_38156)] = mem[_24760 + 32 len ceil32(_38156)]
                        if ceil32(_38156) > _38156:
                            mem[_25101 + (320 * _25835) + _38156 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_38156) + _25101 + (320 * _25835) + -mem[64] + 160
                    _25836 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_25836] = 7
                    mem[_25836 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                    _26633 = mem[64]
                    mem[mem[64]] = 96
                    _27108 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                    mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                    idx = 0
                    s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                    t = mem[64] + 128
                    while idx < _27108:
                        _37123 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_37123 + 32]
                        mem[t + 64] = mem[_37123 + 64]
                        mem[t + 96] = mem[_37123 + 96]
                        mem[t + 128] = mem[_37123 + 128]
                        mem[t + 160] = mem[_37123 + 172 len 20]
                        mem[t + 192] = mem[_37123 + 192]
                        mem[t + 224] = mem[_37123 + 236 len 20]
                        mem[t + 256] = bool(mem[_37123 + 256])
                        mem[t + 288] = mem[_37123 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_26633 + 32] = -1
                    mem[_26633 + 64] = (320 * _27108) + 128
                    _38157 = mem[_25836]
                    mem[_26633 + (320 * _27108) + 128] = mem[_25836]
                    mem[_26633 + (320 * _27108) + 160 len ceil32(_38157)] = mem[_25836 + 32 len ceil32(_38157)]
                    if ceil32(_38157) > _38157:
                        mem[_26633 + (320 * _27108) + _38157 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_38157) + _26633 + (320 * _27108) + -mem[64] + 160
                if stor15[address(arg5)].field_0 < stor15[address(arg5)].field_0 - 1:
                    revert with 0, 17
                if arg2 > 1:
                    if stor15[address(arg5)].field_0 < stor15[address(arg5)].field_0 - 1:
                        revert with 0, 17
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192] = 1
                    mem[64] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 576
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 256] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 288] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 320] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 352] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 384] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 416] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 448] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 480] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 512] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 544] = 0
                    mem[var39001] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 256
                    s = var39001
                    idx = var39002
                    while idx - 1:
                        mem[64] = mem[64] + 320
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 256] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 288] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 320] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 352] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 384] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 416] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 448] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 480] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 512] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 544] = 0
                        mem[s + 32] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 256
                        s = s + 32
                        idx = idx - 1
                        continue 
                    idx = 0
                    while idx < 1:
                        if stor15[address(arg5)].field_0 - 1 > !idx:
                            revert with 0, 17
                        if stor15[address(arg5)].field_0 + idx - 1 >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                            revert with 0, 50
                        mem[0] = mem[(32 * stor15[address(arg5)].field_0 + idx - 1) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]
                        mem[32] = 12
                        _25850 = sha3(mem[(32 * stor15[address(arg5)].field_0 + idx - 1) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192], 12)
                        _25851 = mem[64]
                        mem[64] = mem[64] + 320
                        mem[_25851] = stor12[mem[(32 * stor15[address(arg5)].field_0 + idx - 1) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]].field_0
                        mem[_25851 + 32] = stor1[_25850]
                        mem[_25851 + 64] = stor2[_25850]
                        mem[_25851 + 96] = stor3[_25850]
                        mem[_25851 + 128] = stor4[_25850]
                        mem[_25851 + 160] = stor5[_25850]
                        mem[_25851 + 192] = stor6[_25850]
                        mem[_25851 + 224] = stor7[_25850].field_0
                        mem[_25851 + 256] = bool(stor7[_25850].field_160)
                        mem[_25851 + 288] = stor8[_25850]
                        if idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]:
                            revert with 0, 50
                        mem[(32 * idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224] = _25851
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if stor15[address(arg5)].field_0 - 1 > !1:
                        revert with 0, 17
                    if stor15[address(arg5)].field_0 - 1 > !1:
                        revert with 0, 17
                    if stor15[address(arg5)].field_0 < mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                        _27111 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_27111] = 7
                        mem[_27111 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                        _28254 = mem[64]
                        mem[mem[64]] = 96
                        _29022 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                        mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                        idx = 0
                        s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                        t = mem[64] + 128
                        while idx < _29022:
                            _37144 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_37144 + 32]
                            mem[t + 64] = mem[_37144 + 64]
                            mem[t + 96] = mem[_37144 + 96]
                            mem[t + 128] = mem[_37144 + 128]
                            mem[t + 160] = mem[_37144 + 172 len 20]
                            mem[t + 192] = mem[_37144 + 192]
                            mem[t + 224] = mem[_37144 + 236 len 20]
                            mem[t + 256] = bool(mem[_37144 + 256])
                            mem[t + 288] = mem[_37144 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_28254 + 32] = stor15[address(arg5)].field_0
                        mem[_28254 + 64] = (320 * _29022) + 128
                        _38160 = mem[_27111]
                        mem[_28254 + (320 * _29022) + 128] = mem[_27111]
                        mem[_28254 + (320 * _29022) + 160 len ceil32(_38160)] = mem[_27111 + 32 len ceil32(_38160)]
                        if ceil32(_38160) > _38160:
                            mem[_28254 + (320 * _29022) + _38160 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_38160) + _28254 + (320 * _29022) + -mem[64] + 160
                    _27112 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_27112] = 4
                    mem[_27112 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                    _28255 = mem[64]
                    mem[mem[64]] = 96
                    _29023 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                    mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                    idx = 0
                    s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                    t = mem[64] + 128
                    while idx < _29023:
                        _37151 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_37151 + 32]
                        mem[t + 64] = mem[_37151 + 64]
                        mem[t + 96] = mem[_37151 + 96]
                        mem[t + 128] = mem[_37151 + 128]
                        mem[t + 160] = mem[_37151 + 172 len 20]
                        mem[t + 192] = mem[_37151 + 192]
                        mem[t + 224] = mem[_37151 + 236 len 20]
                        mem[t + 256] = bool(mem[_37151 + 256])
                        mem[t + 288] = mem[_37151 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_28255 + 32] = stor15[address(arg5)].field_0
                    mem[_28255 + 64] = (320 * _29023) + 128
                    _38161 = mem[_27112]
                    mem[_28255 + (320 * _29023) + 128] = mem[_27112]
                    mem[_28255 + (320 * _29023) + 160 len ceil32(_38161)] = mem[_27112 + 32 len ceil32(_38161)]
                    if ceil32(_38161) > _38161:
                        mem[_28255 + (320 * _29023) + _38161 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_38161) + _28255 + (320 * _29023) + -mem[64] + 160
                if arg2 > test266151307():
                    revert with 0, 65
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192] = arg2
                mem[64] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224
                if not arg2:
                    idx = 0
                    while idx < arg2:
                        if stor15[address(arg5)].field_0 - 1 > !idx:
                            revert with 0, 17
                        if stor15[address(arg5)].field_0 + idx - 1 >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                            revert with 0, 50
                        mem[0] = mem[(32 * stor15[address(arg5)].field_0 + idx - 1) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]
                        mem[32] = 12
                        _6301 = sha3(mem[(32 * stor15[address(arg5)].field_0 + idx - 1) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192], 12)
                        _6302 = mem[64]
                        mem[64] = mem[64] + 320
                        mem[_6302] = stor12[mem[(32 * stor15[address(arg5)].field_0 + idx - 1) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]].field_0
                        mem[_6302 + 32] = stor1[_6301]
                        mem[_6302 + 64] = stor2[_6301]
                        mem[_6302 + 96] = stor3[_6301]
                        mem[_6302 + 128] = stor4[_6301]
                        mem[_6302 + 160] = stor5[_6301]
                        mem[_6302 + 192] = stor6[_6301]
                        mem[_6302 + 224] = stor7[_6301].field_0
                        mem[_6302 + 256] = bool(stor7[_6301].field_160)
                        mem[_6302 + 288] = stor8[_6301]
                        if idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]:
                            revert with 0, 50
                        mem[(32 * idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224] = _6302
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if stor15[address(arg5)].field_0 - 1 > !arg2:
                        revert with 0, 17
                    if stor15[address(arg5)].field_0 - 1 > !arg2:
                        revert with 0, 17
                    if stor15[address(arg5)].field_0 + arg2 - 1 < mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                        _6776 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_6776] = 7
                        mem[_6776 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                        _7569 = mem[64]
                        mem[mem[64]] = 96
                        _7705 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                        mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                        idx = 0
                        s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                        t = mem[64] + 128
                        while idx < _7705:
                            _12107 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_12107 + 32]
                            mem[t + 64] = mem[_12107 + 64]
                            mem[t + 96] = mem[_12107 + 96]
                            mem[t + 128] = mem[_12107 + 128]
                            mem[t + 160] = mem[_12107 + 172 len 20]
                            mem[t + 192] = mem[_12107 + 192]
                            mem[t + 224] = mem[_12107 + 236 len 20]
                            mem[t + 256] = bool(mem[_12107 + 256])
                            mem[t + 288] = mem[_12107 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_7569 + 32] = stor15[address(arg5)].field_0 + arg2 - 1
                        mem[_7569 + 64] = (320 * _7705) + 128
                        _12270 = mem[_6776]
                        mem[_7569 + (320 * _7705) + 128] = mem[_6776]
                        mem[_7569 + (320 * _7705) + 160 len ceil32(_12270)] = mem[_6776 + 32 len ceil32(_12270)]
                        if ceil32(_12270) > _12270:
                            mem[_7569 + (320 * _7705) + _12270 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_12270) + _7569 + (320 * _7705) + -mem[64] + 160
                    _6777 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_6777] = 4
                    mem[_6777 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                    _7570 = mem[64]
                    mem[mem[64]] = 96
                    _7706 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                    mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                    idx = 0
                    s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                    t = mem[64] + 128
                    while idx < _7706:
                        _12114 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_12114 + 32]
                        mem[t + 64] = mem[_12114 + 64]
                        mem[t + 96] = mem[_12114 + 96]
                        mem[t + 128] = mem[_12114 + 128]
                        mem[t + 160] = mem[_12114 + 172 len 20]
                        mem[t + 192] = mem[_12114 + 192]
                        mem[t + 224] = mem[_12114 + 236 len 20]
                        mem[t + 256] = bool(mem[_12114 + 256])
                        mem[t + 288] = mem[_12114 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_7570 + 32] = stor15[address(arg5)].field_0 + arg2 - 1
                    mem[_7570 + 64] = (320 * _7706) + 128
                    _12271 = mem[_6777]
                    mem[_7570 + (320 * _7706) + 128] = mem[_6777]
                    mem[_7570 + (320 * _7706) + 160 len ceil32(_12271)] = mem[_6777 + 32 len ceil32(_12271)]
                    if ceil32(_12271) > _12271:
                        mem[_7570 + (320 * _7706) + _12271 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_12271) + _7570 + (320 * _7706) + -mem[64] + 160
                mem[64] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 544
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 256] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 288] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 320] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 352] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 384] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 416] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 448] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 480] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 512] = 0
                mem[var35001] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224
                s = var35001
                idx = var35002
                while idx - 1:
                    mem[64] = mem[64] + 320
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 256] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 288] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 320] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 352] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 384] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 416] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 448] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 480] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 512] = 0
                    mem[s + 32] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224
                    s = s + 32
                    idx = idx - 1
                    continue 
                idx = 0
                while idx < arg2:
                    if stor15[address(arg5)].field_0 - 1 > !idx:
                        revert with 0, 17
                    if stor15[address(arg5)].field_0 + idx - 1 >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                        revert with 0, 50
                    mem[0] = mem[(32 * stor15[address(arg5)].field_0 + idx - 1) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]
                    mem[32] = 12
                    _25844 = sha3(mem[(32 * stor15[address(arg5)].field_0 + idx - 1) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192], 12)
                    _25845 = mem[64]
                    mem[64] = mem[64] + 320
                    mem[_25845] = stor12[mem[(32 * stor15[address(arg5)].field_0 + idx - 1) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]].field_0
                    mem[_25845 + 32] = stor1[_25844]
                    mem[_25845 + 64] = stor2[_25844]
                    mem[_25845 + 96] = stor3[_25844]
                    mem[_25845 + 128] = stor4[_25844]
                    mem[_25845 + 160] = stor5[_25844]
                    mem[_25845 + 192] = stor6[_25844]
                    mem[_25845 + 224] = stor7[_25844].field_0
                    mem[_25845 + 256] = bool(stor7[_25844].field_160)
                    mem[_25845 + 288] = stor8[_25844]
                    if idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]:
                        revert with 0, 50
                    mem[(32 * idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224] = _25845
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
                if stor15[address(arg5)].field_0 - 1 > !arg2:
                    revert with 0, 17
                if stor15[address(arg5)].field_0 - 1 > !arg2:
                    revert with 0, 17
                if stor15[address(arg5)].field_0 + arg2 - 1 < mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                    _27109 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_27109] = 7
                    mem[_27109 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                    _28252 = mem[64]
                    mem[mem[64]] = 96
                    _29020 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                    mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                    idx = 0
                    s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                    t = mem[64] + 128
                    while idx < _29020:
                        _37130 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_37130 + 32]
                        mem[t + 64] = mem[_37130 + 64]
                        mem[t + 96] = mem[_37130 + 96]
                        mem[t + 128] = mem[_37130 + 128]
                        mem[t + 160] = mem[_37130 + 172 len 20]
                        mem[t + 192] = mem[_37130 + 192]
                        mem[t + 224] = mem[_37130 + 236 len 20]
                        mem[t + 256] = bool(mem[_37130 + 256])
                        mem[t + 288] = mem[_37130 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_28252 + 32] = stor15[address(arg5)].field_0 + arg2 - 1
                    mem[_28252 + 64] = (320 * _29020) + 128
                    _38158 = mem[_27109]
                    mem[_28252 + (320 * _29020) + 128] = mem[_27109]
                    mem[_28252 + (320 * _29020) + 160 len ceil32(_38158)] = mem[_27109 + 32 len ceil32(_38158)]
                    if ceil32(_38158) > _38158:
                        mem[_28252 + (320 * _29020) + _38158 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_38158) + _28252 + (320 * _29020) + -mem[64] + 160
                _27110 = mem[64]
                mem[64] = mem[64] + 64
                mem[_27110] = 4
                mem[_27110 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                _28253 = mem[64]
                mem[mem[64]] = 96
                _29021 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                idx = 0
                s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                t = mem[64] + 128
                while idx < _29021:
                    _37137 = mem[s]
                    mem[t] = mem[mem[s]]
                    mem[t + 32] = mem[_37137 + 32]
                    mem[t + 64] = mem[_37137 + 64]
                    mem[t + 96] = mem[_37137 + 96]
                    mem[t + 128] = mem[_37137 + 128]
                    mem[t + 160] = mem[_37137 + 172 len 20]
                    mem[t + 192] = mem[_37137 + 192]
                    mem[t + 224] = mem[_37137 + 236 len 20]
                    mem[t + 256] = bool(mem[_37137 + 256])
                    mem[t + 288] = mem[_37137 + 288]
                    idx = idx + 1
                    s = s + 32
                    t = t + 320
                    continue 
                mem[_28253 + 32] = stor15[address(arg5)].field_0 + arg2 - 1
                mem[_28253 + 64] = (320 * _29021) + 128
                _38159 = mem[_27110]
                mem[_28253 + (320 * _29021) + 128] = mem[_27110]
                mem[_28253 + (320 * _29021) + 160 len ceil32(_38159)] = mem[_27110 + 32 len ceil32(_38159)]
                if ceil32(_38159) > _38159:
                    mem[_28253 + (320 * _29021) + _38159 + 160] = 0
                return memory
                  from mem[64]
                   len ceil32(_38159) + _28253 + (320 * _29021) + -mem[64] + 160
            mem[0] = sha3(address(arg5), 15)
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192] = stor15[address(arg5)].field_0
            idx = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192
            s = 0
            while (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160 > idx:
                mem[idx + 32] = stor15[address(arg5)][s].field_256
                idx = idx + 32
                s = s + 1
                continue 
            if not stor15[address(arg5)].field_0:
                mem[64] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 288
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224] = 4
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 256] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 288] = 96
                _12930 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 384] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                idx = 0
                s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                t = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 416
                while idx < mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]:
                    _24583 = mem[s]
                    mem[t] = mem[mem[s]]
                    mem[t + 32] = mem[_24583 + 32]
                    mem[t + 64] = mem[_24583 + 64]
                    mem[t + 96] = mem[_24583 + 96]
                    mem[t + 128] = mem[_24583 + 128]
                    mem[t + 160] = mem[_24583 + 172 len 20]
                    mem[t + 192] = mem[_24583 + 192]
                    mem[t + 224] = mem[_24583 + 236 len 20]
                    mem[t + 256] = bool(mem[_24583 + 256])
                    mem[t + 288] = mem[_24583 + 288]
                    idx = idx + 1
                    s = s + 32
                    t = t + 320
                    continue 
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 320] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 352] = (320 * _12930) + 128
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (320 * _12930) + 416] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224]
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (320 * _12930) + 448 len ceil32(mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224])] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 256 len ceil32(mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224])]
                if ceil32(mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224]) > mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224]:
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (320 * _12930) + mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224] + 448] = 0
                return memory
                  from mem[64]
                   len ceil32(mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224]) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (320 * _12930) + -mem[64] + 448
            if arg1 < stor15[address(arg5)].field_0:
                if arg3:
                    if arg2 <= arg1:
                        if arg2 > test266151307():
                            revert with 0, 65
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192] = arg2
                        mem[64] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224
                        if not arg2:
                            idx = 0
                            while idx < arg2:
                                if arg1 < idx:
                                    revert with 0, 17
                                if arg1 - idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                                    revert with 0, 50
                                mem[0] = mem[(32 * arg1 - idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]
                                mem[32] = 12
                                _25856 = sha3(mem[(32 * arg1 - idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192], 12)
                                _25857 = mem[64]
                                mem[64] = mem[64] + 320
                                mem[_25857] = stor12[mem[(32 * arg1 - idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]].field_0
                                mem[_25857 + 32] = stor1[_25856]
                                mem[_25857 + 64] = stor2[_25856]
                                mem[_25857 + 96] = stor3[_25856]
                                mem[_25857 + 128] = stor4[_25856]
                                mem[_25857 + 160] = stor5[_25856]
                                mem[_25857 + 192] = stor6[_25856]
                                mem[_25857 + 224] = stor7[_25856].field_0
                                mem[_25857 + 256] = bool(stor7[_25856].field_160)
                                mem[_25857 + 288] = stor8[_25856]
                                if idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]:
                                    revert with 0, 50
                                mem[(32 * idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224] = _25857
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                continue 
                            if arg1 >= arg2:
                                _25854 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_25854] = 7
                                mem[_25854 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                                _26641 = mem[64]
                                mem[mem[64]] = 96
                                _27114 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                                mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                                idx = 0
                                s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                                t = mem[64] + 128
                                while idx < _27114:
                                    _37165 = mem[s]
                                    mem[t] = mem[mem[s]]
                                    mem[t + 32] = mem[_37165 + 32]
                                    mem[t + 64] = mem[_37165 + 64]
                                    mem[t + 96] = mem[_37165 + 96]
                                    mem[t + 128] = mem[_37165 + 128]
                                    mem[t + 160] = mem[_37165 + 172 len 20]
                                    mem[t + 192] = mem[_37165 + 192]
                                    mem[t + 224] = mem[_37165 + 236 len 20]
                                    mem[t + 256] = bool(mem[_37165 + 256])
                                    mem[t + 288] = mem[_37165 + 288]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 320
                                    continue 
                                mem[_26641 + 32] = arg1 - arg2
                                mem[_26641 + 64] = (320 * _27114) + 128
                                _38163 = mem[_25854]
                                mem[_26641 + (320 * _27114) + 128] = mem[_25854]
                                mem[_26641 + (320 * _27114) + 160 len ceil32(_38163)] = mem[_25854 + 32 len ceil32(_38163)]
                                if ceil32(_38163) > _38163:
                                    mem[_26641 + (320 * _27114) + _38163 + 160] = 0
                                return memory
                                  from mem[64]
                                   len ceil32(_38163) + _26641 + (320 * _27114) + -mem[64] + 160
                            _24761 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_24761] = 4
                            mem[_24761 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                            _25109 = mem[64]
                            mem[mem[64]] = 96
                            _25853 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                            mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                            idx = 0
                            s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                            t = mem[64] + 128
                            while idx < _25853:
                                _37158 = mem[s]
                                mem[t] = mem[mem[s]]
                                mem[t + 32] = mem[_37158 + 32]
                                mem[t + 64] = mem[_37158 + 64]
                                mem[t + 96] = mem[_37158 + 96]
                                mem[t + 128] = mem[_37158 + 128]
                                mem[t + 160] = mem[_37158 + 172 len 20]
                                mem[t + 192] = mem[_37158 + 192]
                                mem[t + 224] = mem[_37158 + 236 len 20]
                                mem[t + 256] = bool(mem[_37158 + 256])
                                mem[t + 288] = mem[_37158 + 288]
                                idx = idx + 1
                                s = s + 32
                                t = t + 320
                                continue 
                            mem[_25109 + 32] = 0
                            mem[_25109 + 64] = (320 * _25853) + 128
                            _38162 = mem[_24761]
                            mem[_25109 + (320 * _25853) + 128] = mem[_24761]
                            mem[_25109 + (320 * _25853) + 160 len ceil32(_38162)] = mem[_24761 + 32 len ceil32(_38162)]
                            var42001 = ceil32(_38162)
                            if ceil32(_38162) > _38162:
                                mem[_25109 + (320 * _25853) + _38162 + 160] = 0
                            return memory
                              from mem[64]
                               len ceil32(_38162) + _25109 + (320 * _25853) + -mem[64] + 160
                        mem[64] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 544
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 256] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 288] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 320] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 352] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 384] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 416] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 448] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 480] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 512] = 0
                        mem[var32001] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224
                        s = var32001
                        idx = var32002
                        while idx - 1:
                            mem[64] = mem[64] + 320
                            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224] = 0
                            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 256] = 0
                            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 288] = 0
                            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 320] = 0
                            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 352] = 0
                            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 384] = 0
                            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 416] = 0
                            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 448] = 0
                            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 480] = 0
                            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 512] = 0
                            mem[s + 32] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224
                            s = s + 32
                            idx = idx - 1
                            continue 
                        idx = 0
                        while idx < arg2:
                            if arg1 < idx:
                                revert with 0, 17
                            if arg1 - idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                                revert with 0, 50
                            mem[0] = mem[(32 * arg1 - idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]
                            mem[32] = 12
                            _50323 = sha3(mem[(32 * arg1 - idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192], 12)
                            _50324 = mem[64]
                            mem[64] = mem[64] + 320
                            mem[_50324] = stor12[mem[(32 * arg1 - idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]].field_0
                            mem[_50324 + 32] = stor1[_50323]
                            mem[_50324 + 64] = stor2[_50323]
                            mem[_50324 + 96] = stor3[_50323]
                            mem[_50324 + 128] = stor4[_50323]
                            mem[_50324 + 160] = stor5[_50323]
                            mem[_50324 + 192] = stor6[_50323]
                            mem[_50324 + 224] = stor7[_50323].field_0
                            mem[_50324 + 256] = bool(stor7[_50323].field_160)
                            mem[_50324 + 288] = stor8[_50323]
                            if idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]:
                                revert with 0, 50
                            mem[(32 * idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224] = _50324
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            continue 
                        if arg1 < arg2:
                            _49262 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_49262] = 4
                            mem[_49262 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                            _49610 = mem[64]
                            mem[mem[64]] = 96
                            _50320 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                            mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                            idx = 0
                            s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                            t = mem[64] + 128
                            while idx < _50320:
                                _58542 = mem[s]
                                mem[t] = mem[mem[s]]
                                mem[t + 32] = mem[_58542 + 32]
                                mem[t + 64] = mem[_58542 + 64]
                                mem[t + 96] = mem[_58542 + 96]
                                mem[t + 128] = mem[_58542 + 128]
                                mem[t + 160] = mem[_58542 + 172 len 20]
                                mem[t + 192] = mem[_58542 + 192]
                                mem[t + 224] = mem[_58542 + 236 len 20]
                                mem[t + 256] = bool(mem[_58542 + 256])
                                mem[t + 288] = mem[_58542 + 288]
                                idx = idx + 1
                                s = s + 32
                                t = t + 320
                                continue 
                            mem[_49610 + 32] = 0
                            mem[_49610 + 64] = (320 * _50320) + 128
                            _59988 = mem[_49262]
                            mem[_49610 + (320 * _50320) + 128] = mem[_49262]
                            mem[_49610 + (320 * _50320) + 160 len ceil32(_59988)] = mem[_49262 + 32 len ceil32(_59988)]
                            var49001 = ceil32(_59988)
                            if ceil32(_59988) > _59988:
                                mem[_49610 + (320 * _50320) + _59988 + 160] = 0
                            return memory
                              from mem[64]
                               len ceil32(_59988) + _49610 + (320 * _50320) + -mem[64] + 160
                        _50321 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_50321] = 7
                        mem[_50321 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                        _51144 = mem[64]
                        mem[mem[64]] = 96
                        _51649 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                        mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                        idx = 0
                        s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                        t = mem[64] + 128
                        while idx < _51649:
                            _58549 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_58549 + 32]
                            mem[t + 64] = mem[_58549 + 64]
                            mem[t + 96] = mem[_58549 + 96]
                            mem[t + 128] = mem[_58549 + 128]
                            mem[t + 160] = mem[_58549 + 172 len 20]
                            mem[t + 192] = mem[_58549 + 192]
                            mem[t + 224] = mem[_58549 + 236 len 20]
                            mem[t + 256] = bool(mem[_58549 + 256])
                            mem[t + 288] = mem[_58549 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_51144 + 32] = arg1 - arg2
                        mem[_51144 + 64] = (320 * _51649) + 128
                        _59989 = mem[_50321]
                        mem[_51144 + (320 * _51649) + 128] = mem[_50321]
                        mem[_51144 + (320 * _51649) + 160 len ceil32(_59989)] = mem[_50321 + 32 len ceil32(_59989)]
                        var52001 = ceil32(_59989)
                        if ceil32(_59989) > _59989:
                            mem[_51144 + (320 * _51649) + _59989 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_59989) + _51144 + (320 * _51649) + -mem[64] + 160
                    if 1 > !arg1:
                        revert with 0, 17
                    if arg1 + 1 > test266151307():
                        revert with 0, 65
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192] = arg1 + 1
                    mem[64] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 224
                    if not arg1 + 1:
                        idx = 0
                        while idx < arg1 + 1:
                            if arg1 < idx:
                                revert with 0, 17
                            if arg1 - idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                                revert with 0, 50
                            mem[0] = mem[(32 * arg1 - idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]
                            mem[32] = 12
                            _25862 = sha3(mem[(32 * arg1 - idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192], 12)
                            _25863 = mem[64]
                            mem[64] = mem[64] + 320
                            mem[_25863] = stor12[mem[(32 * arg1 - idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]].field_0
                            mem[_25863 + 32] = stor1[_25862]
                            mem[_25863 + 64] = stor2[_25862]
                            mem[_25863 + 96] = stor3[_25862]
                            mem[_25863 + 128] = stor4[_25862]
                            mem[_25863 + 160] = stor5[_25862]
                            mem[_25863 + 192] = stor6[_25862]
                            mem[_25863 + 224] = stor7[_25862].field_0
                            mem[_25863 + 256] = bool(stor7[_25862].field_160)
                            mem[_25863 + 288] = stor8[_25862]
                            if idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]:
                                revert with 0, 50
                            mem[(32 * idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224] = _25863
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            continue 
                        if arg1 < arg1 + 1:
                            _24762 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_24762] = 4
                            mem[_24762 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                            _25111 = mem[64]
                            mem[mem[64]] = 96
                            _25859 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                            mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                            idx = 0
                            s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                            t = mem[64] + 128
                            while idx < _25859:
                                _37172 = mem[s]
                                mem[t] = mem[mem[s]]
                                mem[t + 32] = mem[_37172 + 32]
                                mem[t + 64] = mem[_37172 + 64]
                                mem[t + 96] = mem[_37172 + 96]
                                mem[t + 128] = mem[_37172 + 128]
                                mem[t + 160] = mem[_37172 + 172 len 20]
                                mem[t + 192] = mem[_37172 + 192]
                                mem[t + 224] = mem[_37172 + 236 len 20]
                                mem[t + 256] = bool(mem[_37172 + 256])
                                mem[t + 288] = mem[_37172 + 288]
                                idx = idx + 1
                                s = s + 32
                                t = t + 320
                                continue 
                            mem[_25111 + 32] = 0
                            mem[_25111 + 64] = (320 * _25859) + 128
                            _38164 = mem[_24762]
                            mem[_25111 + (320 * _25859) + 128] = mem[_24762]
                            mem[_25111 + (320 * _25859) + 160 len ceil32(_38164)] = mem[_24762 + 32 len ceil32(_38164)]
                            var46001 = ceil32(_38164)
                            if ceil32(_38164) > _38164:
                                mem[_25111 + (320 * _25859) + _38164 + 160] = 0
                            return memory
                              from mem[64]
                               len ceil32(_38164) + _25111 + (320 * _25859) + -mem[64] + 160
                        _25860 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_25860] = 7
                        mem[_25860 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                        _26650 = mem[64]
                        mem[mem[64]] = 96
                        _27116 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                        mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                        idx = 0
                        s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                        t = mem[64] + 128
                        while idx < _27116:
                            _37179 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_37179 + 32]
                            mem[t + 64] = mem[_37179 + 64]
                            mem[t + 96] = mem[_37179 + 96]
                            mem[t + 128] = mem[_37179 + 128]
                            mem[t + 160] = mem[_37179 + 172 len 20]
                            mem[t + 192] = mem[_37179 + 192]
                            mem[t + 224] = mem[_37179 + 236 len 20]
                            mem[t + 256] = bool(mem[_37179 + 256])
                            mem[t + 288] = mem[_37179 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_26650 + 32] = -1
                        mem[_26650 + 64] = (320 * _27116) + 128
                        _38165 = mem[_25860]
                        mem[_26650 + (320 * _27116) + 128] = mem[_25860]
                        mem[_26650 + (320 * _27116) + 160 len ceil32(_38165)] = mem[_25860 + 32 len ceil32(_38165)]
                        var49001 = ceil32(_38165)
                        if ceil32(_38165) > _38165:
                            mem[_26650 + (320 * _27116) + _38165 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_38165) + _26650 + (320 * _27116) + -mem[64] + 160
                    mem[64] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 544
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 224] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 256] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 288] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 320] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 352] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 384] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 416] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 448] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 480] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 512] = 0
                    mem[var36001] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 224
                    s = var36001
                    idx = var36002
                    while idx - 1:
                        mem[64] = mem[64] + 320
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 224] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 256] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 288] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 320] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 352] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 384] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 416] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 448] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 480] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 512] = 0
                        mem[s + 32] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 224
                        s = s + 32
                        idx = idx - 1
                        continue 
                    idx = 0
                    while idx < arg1 + 1:
                        if arg1 < idx:
                            revert with 0, 17
                        if arg1 - idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                            revert with 0, 50
                        mem[0] = mem[(32 * arg1 - idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]
                        mem[32] = 12
                        _50331 = sha3(mem[(32 * arg1 - idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192], 12)
                        _50332 = mem[64]
                        mem[64] = mem[64] + 320
                        mem[_50332] = stor12[mem[(32 * arg1 - idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]].field_0
                        mem[_50332 + 32] = stor1[_50331]
                        mem[_50332 + 64] = stor2[_50331]
                        mem[_50332 + 96] = stor3[_50331]
                        mem[_50332 + 128] = stor4[_50331]
                        mem[_50332 + 160] = stor5[_50331]
                        mem[_50332 + 192] = stor6[_50331]
                        mem[_50332 + 224] = stor7[_50331].field_0
                        mem[_50332 + 256] = bool(stor7[_50331].field_160)
                        mem[_50332 + 288] = stor8[_50331]
                        if idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]:
                            revert with 0, 50
                        mem[(32 * idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224] = _50332
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if arg1 >= arg1 + 1:
                        _50329 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_50329] = 7
                        mem[_50329 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                        _51152 = mem[64]
                        mem[mem[64]] = 96
                        _51651 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                        mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                        idx = 0
                        s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                        t = mem[64] + 128
                        while idx < _51651:
                            _58563 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_58563 + 32]
                            mem[t + 64] = mem[_58563 + 64]
                            mem[t + 96] = mem[_58563 + 96]
                            mem[t + 128] = mem[_58563 + 128]
                            mem[t + 160] = mem[_58563 + 172 len 20]
                            mem[t + 192] = mem[_58563 + 192]
                            mem[t + 224] = mem[_58563 + 236 len 20]
                            mem[t + 256] = bool(mem[_58563 + 256])
                            mem[t + 288] = mem[_58563 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_51152 + 32] = -1
                        mem[_51152 + 64] = (320 * _51651) + 128
                        _59991 = mem[_50329]
                        mem[_51152 + (320 * _51651) + 128] = mem[_50329]
                        mem[_51152 + (320 * _51651) + 160 len ceil32(_59991)] = mem[_50329 + 32 len ceil32(_59991)]
                        if ceil32(_59991) > _59991:
                            mem[_51152 + (320 * _51651) + _59991 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_59991) + _51152 + (320 * _51651) + -mem[64] + 160
                    _49263 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_49263] = 4
                    mem[_49263 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                    _49614 = mem[64]
                    mem[mem[64]] = 96
                    _50328 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                    mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                    idx = 0
                    s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                    t = mem[64] + 128
                    while idx < _50328:
                        _58556 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_58556 + 32]
                        mem[t + 64] = mem[_58556 + 64]
                        mem[t + 96] = mem[_58556 + 96]
                        mem[t + 128] = mem[_58556 + 128]
                        mem[t + 160] = mem[_58556 + 172 len 20]
                        mem[t + 192] = mem[_58556 + 192]
                        mem[t + 224] = mem[_58556 + 236 len 20]
                        mem[t + 256] = bool(mem[_58556 + 256])
                        mem[t + 288] = mem[_58556 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_49614 + 32] = 0
                    mem[_49614 + 64] = (320 * _50328) + 128
                    _59990 = mem[_49263]
                    mem[_49614 + (320 * _50328) + 128] = mem[_49263]
                    mem[_49614 + (320 * _50328) + 160 len ceil32(_59990)] = mem[_49263 + 32 len ceil32(_59990)]
                    var53001 = ceil32(_59990)
                    if ceil32(_59990) > _59990:
                        mem[_49614 + (320 * _50328) + _59990 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_59990) + _49614 + (320 * _50328) + -mem[64] + 160
                if stor15[address(arg5)].field_0 < arg1:
                    revert with 0, 17
                if arg2 <= stor15[address(arg5)].field_0 - arg1:
                    if arg2 > test266151307():
                        revert with 0, 65
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192] = arg2
                    mem[64] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224
                    if not arg2:
                        idx = 0
                        while idx < arg2:
                            if arg1 > !idx:
                                revert with 0, 17
                            if arg1 + idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                                revert with 0, 50
                            mem[0] = mem[(32 * arg1 + idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]
                            mem[32] = 12
                            _25866 = sha3(mem[(32 * arg1 + idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192], 12)
                            _25867 = mem[64]
                            mem[64] = mem[64] + 320
                            mem[_25867] = stor12[mem[(32 * arg1 + idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]].field_0
                            mem[_25867 + 32] = stor1[_25866]
                            mem[_25867 + 64] = stor2[_25866]
                            mem[_25867 + 96] = stor3[_25866]
                            mem[_25867 + 128] = stor4[_25866]
                            mem[_25867 + 160] = stor5[_25866]
                            mem[_25867 + 192] = stor6[_25866]
                            mem[_25867 + 224] = stor7[_25866].field_0
                            mem[_25867 + 256] = bool(stor7[_25866].field_160)
                            mem[_25867 + 288] = stor8[_25866]
                            if idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]:
                                revert with 0, 50
                            mem[(32 * idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224] = _25867
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            continue 
                        if arg1 > !arg2:
                            revert with 0, 17
                        if arg1 > !arg2:
                            revert with 0, 17
                        if arg1 + arg2 < mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                            _27117 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_27117] = 7
                            mem[_27117 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                            _28284 = mem[64]
                            mem[mem[64]] = 96
                            _29028 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                            mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                            idx = 0
                            s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                            t = mem[64] + 128
                            while idx < _29028:
                                _37186 = mem[s]
                                mem[t] = mem[mem[s]]
                                mem[t + 32] = mem[_37186 + 32]
                                mem[t + 64] = mem[_37186 + 64]
                                mem[t + 96] = mem[_37186 + 96]
                                mem[t + 128] = mem[_37186 + 128]
                                mem[t + 160] = mem[_37186 + 172 len 20]
                                mem[t + 192] = mem[_37186 + 192]
                                mem[t + 224] = mem[_37186 + 236 len 20]
                                mem[t + 256] = bool(mem[_37186 + 256])
                                mem[t + 288] = mem[_37186 + 288]
                                idx = idx + 1
                                s = s + 32
                                t = t + 320
                                continue 
                            mem[_28284 + 32] = arg1 + arg2
                            mem[_28284 + 64] = (320 * _29028) + 128
                            _38166 = mem[_27117]
                            mem[_28284 + (320 * _29028) + 128] = mem[_27117]
                            mem[_28284 + (320 * _29028) + 160 len ceil32(_38166)] = mem[_27117 + 32 len ceil32(_38166)]
                            var51001 = ceil32(_38166)
                            if ceil32(_38166) > _38166:
                                mem[_28284 + (320 * _29028) + _38166 + 160] = 0
                            return memory
                              from mem[64]
                               len ceil32(_38166) + _28284 + (320 * _29028) + -mem[64] + 160
                        _27118 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_27118] = 4
                        mem[_27118 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                        _28285 = mem[64]
                        mem[mem[64]] = 96
                        _29029 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                        mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                        idx = 0
                        s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                        t = mem[64] + 128
                        while idx < _29029:
                            _37193 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_37193 + 32]
                            mem[t + 64] = mem[_37193 + 64]
                            mem[t + 96] = mem[_37193 + 96]
                            mem[t + 128] = mem[_37193 + 128]
                            mem[t + 160] = mem[_37193 + 172 len 20]
                            mem[t + 192] = mem[_37193 + 192]
                            mem[t + 224] = mem[_37193 + 236 len 20]
                            mem[t + 256] = bool(mem[_37193 + 256])
                            mem[t + 288] = mem[_37193 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_28285 + 32] = arg1 + arg2
                        mem[_28285 + 64] = (320 * _29029) + 128
                        _38167 = mem[_27118]
                        mem[_28285 + (320 * _29029) + 128] = mem[_27118]
                        mem[_28285 + (320 * _29029) + 160 len ceil32(_38167)] = mem[_27118 + 32 len ceil32(_38167)]
                        var51001 = ceil32(_38167)
                        if ceil32(_38167) > _38167:
                            mem[_28285 + (320 * _29029) + _38167 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_38167) + _28285 + (320 * _29029) + -mem[64] + 160
                    mem[64] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 544
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 256] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 288] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 320] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 352] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 384] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 416] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 448] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 480] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 512] = 0
                    mem[var35001] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224
                    s = var35001
                    idx = var35002
                    while idx - 1:
                        mem[64] = mem[64] + 320
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 256] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 288] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 320] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 352] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 384] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 416] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 448] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 480] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 512] = 0
                        mem[s + 32] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224
                        s = s + 32
                        idx = idx - 1
                        continue 
                    idx = 0
                    while idx < arg2:
                        if arg1 > !idx:
                            revert with 0, 17
                        if arg1 + idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                            revert with 0, 50
                        mem[0] = mem[(32 * arg1 + idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]
                        mem[32] = 12
                        _50337 = sha3(mem[(32 * arg1 + idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192], 12)
                        _50338 = mem[64]
                        mem[64] = mem[64] + 320
                        mem[_50338] = stor12[mem[(32 * arg1 + idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]].field_0
                        mem[_50338 + 32] = stor1[_50337]
                        mem[_50338 + 64] = stor2[_50337]
                        mem[_50338 + 96] = stor3[_50337]
                        mem[_50338 + 128] = stor4[_50337]
                        mem[_50338 + 160] = stor5[_50337]
                        mem[_50338 + 192] = stor6[_50337]
                        mem[_50338 + 224] = stor7[_50337].field_0
                        mem[_50338 + 256] = bool(stor7[_50337].field_160)
                        mem[_50338 + 288] = stor8[_50337]
                        if idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]:
                            revert with 0, 50
                        mem[(32 * idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224] = _50338
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if arg1 > !arg2:
                        revert with 0, 17
                    if arg1 > !arg2:
                        revert with 0, 17
                    if arg1 + arg2 < mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                        _51652 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_51652] = 7
                        mem[_51652 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                        _52357 = mem[64]
                        mem[mem[64]] = 96
                        _53121 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                        mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                        idx = 0
                        s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                        t = mem[64] + 128
                        while idx < _53121:
                            _58570 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_58570 + 32]
                            mem[t + 64] = mem[_58570 + 64]
                            mem[t + 96] = mem[_58570 + 96]
                            mem[t + 128] = mem[_58570 + 128]
                            mem[t + 160] = mem[_58570 + 172 len 20]
                            mem[t + 192] = mem[_58570 + 192]
                            mem[t + 224] = mem[_58570 + 236 len 20]
                            mem[t + 256] = bool(mem[_58570 + 256])
                            mem[t + 288] = mem[_58570 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_52357 + 32] = arg1 + arg2
                        mem[_52357 + 64] = (320 * _53121) + 128
                        _59992 = mem[_51652]
                        mem[_52357 + (320 * _53121) + 128] = mem[_51652]
                        mem[_52357 + (320 * _53121) + 160 len ceil32(_59992)] = mem[_51652 + 32 len ceil32(_59992)]
                        var58001 = ceil32(_59992)
                        if ceil32(_59992) > _59992:
                            mem[_52357 + (320 * _53121) + _59992 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_59992) + _52357 + (320 * _53121) + -mem[64] + 160
                    _51653 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_51653] = 4
                    mem[_51653 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                    _52358 = mem[64]
                    mem[mem[64]] = 96
                    _53122 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                    mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                    idx = 0
                    s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                    t = mem[64] + 128
                    while idx < _53122:
                        _58577 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_58577 + 32]
                        mem[t + 64] = mem[_58577 + 64]
                        mem[t + 96] = mem[_58577 + 96]
                        mem[t + 128] = mem[_58577 + 128]
                        mem[t + 160] = mem[_58577 + 172 len 20]
                        mem[t + 192] = mem[_58577 + 192]
                        mem[t + 224] = mem[_58577 + 236 len 20]
                        mem[t + 256] = bool(mem[_58577 + 256])
                        mem[t + 288] = mem[_58577 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_52358 + 32] = arg1 + arg2
                    mem[_52358 + 64] = (320 * _53122) + 128
                    _59993 = mem[_51653]
                    mem[_52358 + (320 * _53122) + 128] = mem[_51653]
                    mem[_52358 + (320 * _53122) + 160 len ceil32(_59993)] = mem[_51653 + 32 len ceil32(_59993)]
                    var58001 = ceil32(_59993)
                    if ceil32(_59993) > _59993:
                        mem[_52358 + (320 * _53122) + _59993 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_59993) + _52358 + (320 * _53122) + -mem[64] + 160
                if stor15[address(arg5)].field_0 < arg1:
                    revert with 0, 17
                if stor15[address(arg5)].field_0 - arg1 > test266151307():
                    revert with 0, 65
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192] = stor15[address(arg5)].field_0 - arg1
                mem[64] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 224
                if not stor15[address(arg5)].field_0 - arg1:
                    idx = 0
                    while idx < stor15[address(arg5)].field_0 - arg1:
                        if arg1 > !idx:
                            revert with 0, 17
                        if arg1 + idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                            revert with 0, 50
                        mem[0] = mem[(32 * arg1 + idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]
                        mem[32] = 12
                        _25870 = sha3(mem[(32 * arg1 + idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192], 12)
                        _25871 = mem[64]
                        mem[64] = mem[64] + 320
                        mem[_25871] = stor12[mem[(32 * arg1 + idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]].field_0
                        mem[_25871 + 32] = stor1[_25870]
                        mem[_25871 + 64] = stor2[_25870]
                        mem[_25871 + 96] = stor3[_25870]
                        mem[_25871 + 128] = stor4[_25870]
                        mem[_25871 + 160] = stor5[_25870]
                        mem[_25871 + 192] = stor6[_25870]
                        mem[_25871 + 224] = stor7[_25870].field_0
                        mem[_25871 + 256] = bool(stor7[_25870].field_160)
                        mem[_25871 + 288] = stor8[_25870]
                        if idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]:
                            revert with 0, 50
                        mem[(32 * idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224] = _25871
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if arg1 > !(stor15[address(arg5)].field_0 - arg1):
                        revert with 0, 17
                    if arg1 > !(stor15[address(arg5)].field_0 - arg1):
                        revert with 0, 17
                    if stor15[address(arg5)].field_0 < mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                        _27119 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_27119] = 7
                        mem[_27119 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                        _28290 = mem[64]
                        mem[mem[64]] = 96
                        _29030 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                        mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                        idx = 0
                        s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                        t = mem[64] + 128
                        while idx < _29030:
                            _37200 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_37200 + 32]
                            mem[t + 64] = mem[_37200 + 64]
                            mem[t + 96] = mem[_37200 + 96]
                            mem[t + 128] = mem[_37200 + 128]
                            mem[t + 160] = mem[_37200 + 172 len 20]
                            mem[t + 192] = mem[_37200 + 192]
                            mem[t + 224] = mem[_37200 + 236 len 20]
                            mem[t + 256] = bool(mem[_37200 + 256])
                            mem[t + 288] = mem[_37200 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_28290 + 32] = stor15[address(arg5)].field_0
                        mem[_28290 + 64] = (320 * _29030) + 128
                        _38168 = mem[_27119]
                        mem[_28290 + (320 * _29030) + 128] = mem[_27119]
                        mem[_28290 + (320 * _29030) + 160 len ceil32(_38168)] = mem[_27119 + 32 len ceil32(_38168)]
                        var55001 = ceil32(_38168)
                        if ceil32(_38168) > _38168:
                            mem[_28290 + (320 * _29030) + _38168 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_38168) + _28290 + (320 * _29030) + -mem[64] + 160
                    _27120 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_27120] = 4
                    mem[_27120 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                    _28291 = mem[64]
                    mem[mem[64]] = 96
                    _29031 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                    mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                    idx = 0
                    s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                    t = mem[64] + 128
                    while idx < _29031:
                        _37207 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_37207 + 32]
                        mem[t + 64] = mem[_37207 + 64]
                        mem[t + 96] = mem[_37207 + 96]
                        mem[t + 128] = mem[_37207 + 128]
                        mem[t + 160] = mem[_37207 + 172 len 20]
                        mem[t + 192] = mem[_37207 + 192]
                        mem[t + 224] = mem[_37207 + 236 len 20]
                        mem[t + 256] = bool(mem[_37207 + 256])
                        mem[t + 288] = mem[_37207 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_28291 + 32] = stor15[address(arg5)].field_0
                    mem[_28291 + 64] = (320 * _29031) + 128
                    _38169 = mem[_27120]
                    mem[_28291 + (320 * _29031) + 128] = mem[_27120]
                    mem[_28291 + (320 * _29031) + 160 len ceil32(_38169)] = mem[_27120 + 32 len ceil32(_38169)]
                    var55001 = ceil32(_38169)
                    if ceil32(_38169) > _38169:
                        mem[_28291 + (320 * _29031) + _38169 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_38169) + _28291 + (320 * _29031) + -mem[64] + 160
                mem[64] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 544
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 224] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 256] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 288] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 320] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 352] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 384] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 416] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 448] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 480] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 512] = 0
                mem[var39001] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 224
                s = var39001
                idx = var39002
                while idx - 1:
                    mem[64] = mem[64] + 320
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 224] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 256] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 288] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 320] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 352] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 384] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 416] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 448] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 480] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 512] = 0
                    mem[s + 32] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 224
                    s = s + 32
                    idx = idx - 1
                    continue 
                idx = 0
                while idx < stor15[address(arg5)].field_0 - arg1:
                    if arg1 > !idx:
                        revert with 0, 17
                    if arg1 + idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                        revert with 0, 50
                    mem[0] = mem[(32 * arg1 + idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]
                    mem[32] = 12
                    _50343 = sha3(mem[(32 * arg1 + idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192], 12)
                    _50344 = mem[64]
                    mem[64] = mem[64] + 320
                    mem[_50344] = stor12[mem[(32 * arg1 + idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]].field_0
                    mem[_50344 + 32] = stor1[_50343]
                    mem[_50344 + 64] = stor2[_50343]
                    mem[_50344 + 96] = stor3[_50343]
                    mem[_50344 + 128] = stor4[_50343]
                    mem[_50344 + 160] = stor5[_50343]
                    mem[_50344 + 192] = stor6[_50343]
                    mem[_50344 + 224] = stor7[_50343].field_0
                    mem[_50344 + 256] = bool(stor7[_50343].field_160)
                    mem[_50344 + 288] = stor8[_50343]
                    if idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]:
                        revert with 0, 50
                    mem[(32 * idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224] = _50344
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
                if arg1 > !(stor15[address(arg5)].field_0 - arg1):
                    revert with 0, 17
                if arg1 > !(stor15[address(arg5)].field_0 - arg1):
                    revert with 0, 17
                if stor15[address(arg5)].field_0 < mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                    _51654 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_51654] = 7
                    mem[_51654 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                    _52359 = mem[64]
                    mem[mem[64]] = 96
                    _53123 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                    mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                    idx = 0
                    s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                    t = mem[64] + 128
                    while idx < _53123:
                        _58584 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_58584 + 32]
                        mem[t + 64] = mem[_58584 + 64]
                        mem[t + 96] = mem[_58584 + 96]
                        mem[t + 128] = mem[_58584 + 128]
                        mem[t + 160] = mem[_58584 + 172 len 20]
                        mem[t + 192] = mem[_58584 + 192]
                        mem[t + 224] = mem[_58584 + 236 len 20]
                        mem[t + 256] = bool(mem[_58584 + 256])
                        mem[t + 288] = mem[_58584 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_52359 + 32] = stor15[address(arg5)].field_0
                    mem[_52359 + 64] = (320 * _53123) + 128
                    _59994 = mem[_51654]
                    mem[_52359 + (320 * _53123) + 128] = mem[_51654]
                    mem[_52359 + (320 * _53123) + 160 len ceil32(_59994)] = mem[_51654 + 32 len ceil32(_59994)]
                    var62001 = ceil32(_59994)
                    if ceil32(_59994) > _59994:
                        mem[_52359 + (320 * _53123) + _59994 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_59994) + _52359 + (320 * _53123) + -mem[64] + 160
                _51655 = mem[64]
                mem[64] = mem[64] + 64
                mem[_51655] = 4
                mem[_51655 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                _52360 = mem[64]
                mem[mem[64]] = 96
                _53124 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                idx = 0
                s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                t = mem[64] + 128
                while idx < _53124:
                    _58591 = mem[s]
                    mem[t] = mem[mem[s]]
                    mem[t + 32] = mem[_58591 + 32]
                    mem[t + 64] = mem[_58591 + 64]
                    mem[t + 96] = mem[_58591 + 96]
                    mem[t + 128] = mem[_58591 + 128]
                    mem[t + 160] = mem[_58591 + 172 len 20]
                    mem[t + 192] = mem[_58591 + 192]
                    mem[t + 224] = mem[_58591 + 236 len 20]
                    mem[t + 256] = bool(mem[_58591 + 256])
                    mem[t + 288] = mem[_58591 + 288]
                    idx = idx + 1
                    s = s + 32
                    t = t + 320
                    continue 
                mem[_52360 + 32] = stor15[address(arg5)].field_0
                mem[_52360 + 64] = (320 * _53124) + 128
                _59995 = mem[_51655]
                mem[_52360 + (320 * _53124) + 128] = mem[_51655]
                mem[_52360 + (320 * _53124) + 160 len ceil32(_59995)] = mem[_51655 + 32 len ceil32(_59995)]
                var62001 = ceil32(_59995)
                if ceil32(_59995) > _59995:
                    mem[_52360 + (320 * _53124) + _59995 + 160] = 0
                return memory
                  from mem[64]
                   len ceil32(_59995) + _52360 + (320 * _53124) + -mem[64] + 160
            if stor15[address(arg5)].field_0 < 1:
                revert with 0, 17
            if arg3:
                if arg2 <= stor15[address(arg5)].field_0 - 1:
                    if arg2 > test266151307():
                        revert with 0, 65
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192] = arg2
                    mem[64] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224
                    if not arg2:
                        idx = 0
                        while idx < arg2:
                            if stor15[address(arg5)].field_0 - 1 < idx:
                                revert with 0, 17
                            if stor15[address(arg5)].field_0 + -idx - 1 >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                                revert with 0, 50
                            mem[0] = mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]
                            mem[32] = 12
                            _25876 = sha3(mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192], 12)
                            _25877 = mem[64]
                            mem[64] = mem[64] + 320
                            mem[_25877] = stor12[mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]].field_0
                            mem[_25877 + 32] = stor1[_25876]
                            mem[_25877 + 64] = stor2[_25876]
                            mem[_25877 + 96] = stor3[_25876]
                            mem[_25877 + 128] = stor4[_25876]
                            mem[_25877 + 160] = stor5[_25876]
                            mem[_25877 + 192] = stor6[_25876]
                            mem[_25877 + 224] = stor7[_25876].field_0
                            mem[_25877 + 256] = bool(stor7[_25876].field_160)
                            mem[_25877 + 288] = stor8[_25876]
                            if idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]:
                                revert with 0, 50
                            mem[(32 * idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224] = _25877
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            continue 
                        if stor15[address(arg5)].field_0 - 1 < arg2:
                            _24763 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_24763] = 4
                            mem[_24763 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                            _25115 = mem[64]
                            mem[mem[64]] = 96
                            _25873 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                            mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                            idx = 0
                            s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                            t = mem[64] + 128
                            while idx < _25873:
                                _37214 = mem[s]
                                mem[t] = mem[mem[s]]
                                mem[t + 32] = mem[_37214 + 32]
                                mem[t + 64] = mem[_37214 + 64]
                                mem[t + 96] = mem[_37214 + 96]
                                mem[t + 128] = mem[_37214 + 128]
                                mem[t + 160] = mem[_37214 + 172 len 20]
                                mem[t + 192] = mem[_37214 + 192]
                                mem[t + 224] = mem[_37214 + 236 len 20]
                                mem[t + 256] = bool(mem[_37214 + 256])
                                mem[t + 288] = mem[_37214 + 288]
                                idx = idx + 1
                                s = s + 32
                                t = t + 320
                                continue 
                            mem[_25115 + 32] = 0
                            mem[_25115 + 64] = (320 * _25873) + 128
                            _38170 = mem[_24763]
                            mem[_25115 + (320 * _25873) + 128] = mem[_24763]
                            mem[_25115 + (320 * _25873) + 160 len ceil32(_38170)] = mem[_24763 + 32 len ceil32(_38170)]
                            var46001 = ceil32(_38170)
                            if ceil32(_38170) > _38170:
                                mem[_25115 + (320 * _25873) + _38170 + 160] = 0
                            return memory
                              from mem[64]
                               len ceil32(_38170) + _25115 + (320 * _25873) + -mem[64] + 160
                        _25874 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_25874] = 7
                        mem[_25874 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                        _26659 = mem[64]
                        mem[mem[64]] = 96
                        _27122 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                        mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                        idx = 0
                        s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                        t = mem[64] + 128
                        while idx < _27122:
                            _37221 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_37221 + 32]
                            mem[t + 64] = mem[_37221 + 64]
                            mem[t + 96] = mem[_37221 + 96]
                            mem[t + 128] = mem[_37221 + 128]
                            mem[t + 160] = mem[_37221 + 172 len 20]
                            mem[t + 192] = mem[_37221 + 192]
                            mem[t + 224] = mem[_37221 + 236 len 20]
                            mem[t + 256] = bool(mem[_37221 + 256])
                            mem[t + 288] = mem[_37221 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_26659 + 32] = stor15[address(arg5)].field_0 + -arg2 - 1
                        mem[_26659 + 64] = (320 * _27122) + 128
                        _38171 = mem[_25874]
                        mem[_26659 + (320 * _27122) + 128] = mem[_25874]
                        mem[_26659 + (320 * _27122) + 160 len ceil32(_38171)] = mem[_25874 + 32 len ceil32(_38171)]
                        var49001 = ceil32(_38171)
                        if ceil32(_38171) > _38171:
                            mem[_26659 + (320 * _27122) + _38171 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_38171) + _26659 + (320 * _27122) + -mem[64] + 160
                    mem[64] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 544
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 256] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 288] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 320] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 352] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 384] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 416] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 448] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 480] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 512] = 0
                    mem[var36001] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224
                    s = var36001
                    idx = var36002
                    while idx - 1:
                        mem[64] = mem[64] + 320
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 256] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 288] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 320] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 352] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 384] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 416] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 448] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 480] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 512] = 0
                        mem[s + 32] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224
                        s = s + 32
                        idx = idx - 1
                        continue 
                    idx = 0
                    while idx < arg2:
                        if stor15[address(arg5)].field_0 - 1 < idx:
                            revert with 0, 17
                        if stor15[address(arg5)].field_0 + -idx - 1 >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                            revert with 0, 50
                        mem[0] = mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]
                        mem[32] = 12
                        _50351 = sha3(mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192], 12)
                        _50352 = mem[64]
                        mem[64] = mem[64] + 320
                        mem[_50352] = stor12[mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]].field_0
                        mem[_50352 + 32] = stor1[_50351]
                        mem[_50352 + 64] = stor2[_50351]
                        mem[_50352 + 96] = stor3[_50351]
                        mem[_50352 + 128] = stor4[_50351]
                        mem[_50352 + 160] = stor5[_50351]
                        mem[_50352 + 192] = stor6[_50351]
                        mem[_50352 + 224] = stor7[_50351].field_0
                        mem[_50352 + 256] = bool(stor7[_50351].field_160)
                        mem[_50352 + 288] = stor8[_50351]
                        if idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]:
                            revert with 0, 50
                        mem[(32 * idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224] = _50352
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if stor15[address(arg5)].field_0 - 1 >= arg2:
                        _50349 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_50349] = 7
                        mem[_50349 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                        _51160 = mem[64]
                        mem[mem[64]] = 96
                        _51657 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                        mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                        idx = 0
                        s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                        t = mem[64] + 128
                        while idx < _51657:
                            _58605 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_58605 + 32]
                            mem[t + 64] = mem[_58605 + 64]
                            mem[t + 96] = mem[_58605 + 96]
                            mem[t + 128] = mem[_58605 + 128]
                            mem[t + 160] = mem[_58605 + 172 len 20]
                            mem[t + 192] = mem[_58605 + 192]
                            mem[t + 224] = mem[_58605 + 236 len 20]
                            mem[t + 256] = bool(mem[_58605 + 256])
                            mem[t + 288] = mem[_58605 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_51160 + 32] = stor15[address(arg5)].field_0 + -arg2 - 1
                        mem[_51160 + 64] = (320 * _51657) + 128
                        _59997 = mem[_50349]
                        mem[_51160 + (320 * _51657) + 128] = mem[_50349]
                        mem[_51160 + (320 * _51657) + 160 len ceil32(_59997)] = mem[_50349 + 32 len ceil32(_59997)]
                        if ceil32(_59997) > _59997:
                            mem[_51160 + (320 * _51657) + _59997 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_59997) + _51160 + (320 * _51657) + -mem[64] + 160
                    _49264 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_49264] = 4
                    mem[_49264 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                    _49624 = mem[64]
                    mem[mem[64]] = 96
                    _50348 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                    mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                    idx = 0
                    s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                    t = mem[64] + 128
                    while idx < _50348:
                        _58598 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_58598 + 32]
                        mem[t + 64] = mem[_58598 + 64]
                        mem[t + 96] = mem[_58598 + 96]
                        mem[t + 128] = mem[_58598 + 128]
                        mem[t + 160] = mem[_58598 + 172 len 20]
                        mem[t + 192] = mem[_58598 + 192]
                        mem[t + 224] = mem[_58598 + 236 len 20]
                        mem[t + 256] = bool(mem[_58598 + 256])
                        mem[t + 288] = mem[_58598 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_49624 + 32] = 0
                    mem[_49624 + 64] = (320 * _50348) + 128
                    _59996 = mem[_49264]
                    mem[_49624 + (320 * _50348) + 128] = mem[_49264]
                    mem[_49624 + (320 * _50348) + 160 len ceil32(_59996)] = mem[_49264 + 32 len ceil32(_59996)]
                    var53001 = ceil32(_59996)
                    if ceil32(_59996) > _59996:
                        mem[_49624 + (320 * _50348) + _59996 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_59996) + _49624 + (320 * _50348) + -mem[64] + 160
                if 1 > !(stor15[address(arg5)].field_0 - 1):
                    revert with 0, 17
                if stor15[address(arg5)].field_0 > test266151307():
                    revert with 0, 65
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192] = stor15[address(arg5)].field_0
                mem[64] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 224
                if not stor15[address(arg5)].field_0:
                    idx = 0
                    while idx < stor15[address(arg5)].field_0:
                        if stor15[address(arg5)].field_0 - 1 < idx:
                            revert with 0, 17
                        if stor15[address(arg5)].field_0 + -idx - 1 >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                            revert with 0, 50
                        mem[0] = mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]
                        mem[32] = 12
                        _25882 = sha3(mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192], 12)
                        _25883 = mem[64]
                        mem[64] = mem[64] + 320
                        mem[_25883] = stor12[mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]].field_0
                        mem[_25883 + 32] = stor1[_25882]
                        mem[_25883 + 64] = stor2[_25882]
                        mem[_25883 + 96] = stor3[_25882]
                        mem[_25883 + 128] = stor4[_25882]
                        mem[_25883 + 160] = stor5[_25882]
                        mem[_25883 + 192] = stor6[_25882]
                        mem[_25883 + 224] = stor7[_25882].field_0
                        mem[_25883 + 256] = bool(stor7[_25882].field_160)
                        mem[_25883 + 288] = stor8[_25882]
                        if idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]:
                            revert with 0, 50
                        mem[(32 * idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224] = _25883
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if stor15[address(arg5)].field_0 - 1 < stor15[address(arg5)].field_0:
                        _24764 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_24764] = 4
                        mem[_24764 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                        _25117 = mem[64]
                        mem[mem[64]] = 96
                        _25879 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                        mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                        idx = 0
                        s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                        t = mem[64] + 128
                        while idx < _25879:
                            _37228 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_37228 + 32]
                            mem[t + 64] = mem[_37228 + 64]
                            mem[t + 96] = mem[_37228 + 96]
                            mem[t + 128] = mem[_37228 + 128]
                            mem[t + 160] = mem[_37228 + 172 len 20]
                            mem[t + 192] = mem[_37228 + 192]
                            mem[t + 224] = mem[_37228 + 236 len 20]
                            mem[t + 256] = bool(mem[_37228 + 256])
                            mem[t + 288] = mem[_37228 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_25117 + 32] = 0
                        mem[_25117 + 64] = (320 * _25879) + 128
                        _38172 = mem[_24764]
                        mem[_25117 + (320 * _25879) + 128] = mem[_24764]
                        mem[_25117 + (320 * _25879) + 160 len ceil32(_38172)] = mem[_24764 + 32 len ceil32(_38172)]
                        var50001 = ceil32(_38172)
                        if ceil32(_38172) > _38172:
                            mem[_25117 + (320 * _25879) + _38172 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_38172) + _25117 + (320 * _25879) + -mem[64] + 160
                    _25880 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_25880] = 7
                    mem[_25880 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                    _26668 = mem[64]
                    mem[mem[64]] = 96
                    _27124 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                    mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                    idx = 0
                    s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                    t = mem[64] + 128
                    while idx < _27124:
                        _37235 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_37235 + 32]
                        mem[t + 64] = mem[_37235 + 64]
                        mem[t + 96] = mem[_37235 + 96]
                        mem[t + 128] = mem[_37235 + 128]
                        mem[t + 160] = mem[_37235 + 172 len 20]
                        mem[t + 192] = mem[_37235 + 192]
                        mem[t + 224] = mem[_37235 + 236 len 20]
                        mem[t + 256] = bool(mem[_37235 + 256])
                        mem[t + 288] = mem[_37235 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_26668 + 32] = -1
                    mem[_26668 + 64] = (320 * _27124) + 128
                    _38173 = mem[_25880]
                    mem[_26668 + (320 * _27124) + 128] = mem[_25880]
                    mem[_26668 + (320 * _27124) + 160 len ceil32(_38173)] = mem[_25880 + 32 len ceil32(_38173)]
                    var53001 = ceil32(_38173)
                    if ceil32(_38173) > _38173:
                        mem[_26668 + (320 * _27124) + _38173 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_38173) + _26668 + (320 * _27124) + -mem[64] + 160
                mem[64] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 544
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 224] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 256] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 288] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 320] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 352] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 384] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 416] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 448] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 480] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 512] = 0
                mem[var40001] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 224
                s = var40001
                idx = var40002
                while idx - 1:
                    mem[64] = mem[64] + 320
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 224] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 256] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 288] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 320] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 352] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 384] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 416] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 448] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 480] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 512] = 0
                    mem[s + 32] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 224
                    s = s + 32
                    idx = idx - 1
                    continue 
                idx = 0
                while idx < stor15[address(arg5)].field_0:
                    if stor15[address(arg5)].field_0 - 1 < idx:
                        revert with 0, 17
                    if stor15[address(arg5)].field_0 + -idx - 1 >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                        revert with 0, 50
                    mem[0] = mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]
                    mem[32] = 12
                    _50359 = sha3(mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192], 12)
                    _50360 = mem[64]
                    mem[64] = mem[64] + 320
                    mem[_50360] = stor12[mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]].field_0
                    mem[_50360 + 32] = stor1[_50359]
                    mem[_50360 + 64] = stor2[_50359]
                    mem[_50360 + 96] = stor3[_50359]
                    mem[_50360 + 128] = stor4[_50359]
                    mem[_50360 + 160] = stor5[_50359]
                    mem[_50360 + 192] = stor6[_50359]
                    mem[_50360 + 224] = stor7[_50359].field_0
                    mem[_50360 + 256] = bool(stor7[_50359].field_160)
                    mem[_50360 + 288] = stor8[_50359]
                    if idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]:
                        revert with 0, 50
                    mem[(32 * idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224] = _50360
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
                if stor15[address(arg5)].field_0 - 1 < stor15[address(arg5)].field_0:
                    _49265 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_49265] = 4
                    mem[_49265 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                    _49628 = mem[64]
                    mem[mem[64]] = 96
                    _50356 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                    mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                    idx = 0
                    s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                    t = mem[64] + 128
                    while idx < _50356:
                        _58612 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_58612 + 32]
                        mem[t + 64] = mem[_58612 + 64]
                        mem[t + 96] = mem[_58612 + 96]
                        mem[t + 128] = mem[_58612 + 128]
                        mem[t + 160] = mem[_58612 + 172 len 20]
                        mem[t + 192] = mem[_58612 + 192]
                        mem[t + 224] = mem[_58612 + 236 len 20]
                        mem[t + 256] = bool(mem[_58612 + 256])
                        mem[t + 288] = mem[_58612 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_49628 + 32] = 0
                    mem[_49628 + 64] = (320 * _50356) + 128
                    _59998 = mem[_49265]
                    mem[_49628 + (320 * _50356) + 128] = mem[_49265]
                    mem[_49628 + (320 * _50356) + 160 len ceil32(_59998)] = mem[_49265 + 32 len ceil32(_59998)]
                    var57001 = ceil32(_59998)
                    if ceil32(_59998) > _59998:
                        mem[_49628 + (320 * _50356) + _59998 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_59998) + _49628 + (320 * _50356) + -mem[64] + 160
                _50357 = mem[64]
                mem[64] = mem[64] + 64
                mem[_50357] = 7
                mem[_50357 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                _51168 = mem[64]
                mem[mem[64]] = 96
                _51659 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                idx = 0
                s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                t = mem[64] + 128
                while idx < _51659:
                    _58619 = mem[s]
                    mem[t] = mem[mem[s]]
                    mem[t + 32] = mem[_58619 + 32]
                    mem[t + 64] = mem[_58619 + 64]
                    mem[t + 96] = mem[_58619 + 96]
                    mem[t + 128] = mem[_58619 + 128]
                    mem[t + 160] = mem[_58619 + 172 len 20]
                    mem[t + 192] = mem[_58619 + 192]
                    mem[t + 224] = mem[_58619 + 236 len 20]
                    mem[t + 256] = bool(mem[_58619 + 256])
                    mem[t + 288] = mem[_58619 + 288]
                    idx = idx + 1
                    s = s + 32
                    t = t + 320
                    continue 
                mem[_51168 + 32] = -1
                mem[_51168 + 64] = (320 * _51659) + 128
                _59999 = mem[_50357]
                mem[_51168 + (320 * _51659) + 128] = mem[_50357]
                mem[_51168 + (320 * _51659) + 160 len ceil32(_59999)] = mem[_50357 + 32 len ceil32(_59999)]
                var60001 = ceil32(_59999)
                if ceil32(_59999) > _59999:
                    mem[_51168 + (320 * _51659) + _59999 + 160] = 0
                return memory
                  from mem[64]
                   len ceil32(_59999) + _51168 + (320 * _51659) + -mem[64] + 160
            if stor15[address(arg5)].field_0 < stor15[address(arg5)].field_0 - 1:
                revert with 0, 17
            if arg2 > 1:
                if stor15[address(arg5)].field_0 < stor15[address(arg5)].field_0 - 1:
                    revert with 0, 17
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192] = 1
                mem[64] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 576
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 256] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 288] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 320] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 352] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 384] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 416] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 448] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 480] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 512] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 544] = 0
                mem[var43001] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 256
                s = var43001
                idx = var43002
                while idx - 1:
                    mem[64] = mem[64] + 320
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 256] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 288] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 320] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 352] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 384] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 416] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 448] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 480] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 512] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 544] = 0
                    mem[s + 32] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 256
                    s = s + 32
                    idx = idx - 1
                    continue 
                idx = 0
                while idx < 1:
                    if stor15[address(arg5)].field_0 - 1 > !idx:
                        revert with 0, 17
                    if stor15[address(arg5)].field_0 + idx - 1 >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                        revert with 0, 50
                    mem[0] = mem[(32 * stor15[address(arg5)].field_0 + idx - 1) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]
                    mem[32] = 12
                    _50371 = sha3(mem[(32 * stor15[address(arg5)].field_0 + idx - 1) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192], 12)
                    _50372 = mem[64]
                    mem[64] = mem[64] + 320
                    mem[_50372] = stor12[mem[(32 * stor15[address(arg5)].field_0 + idx - 1) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]].field_0
                    mem[_50372 + 32] = stor1[_50371]
                    mem[_50372 + 64] = stor2[_50371]
                    mem[_50372 + 96] = stor3[_50371]
                    mem[_50372 + 128] = stor4[_50371]
                    mem[_50372 + 160] = stor5[_50371]
                    mem[_50372 + 192] = stor6[_50371]
                    mem[_50372 + 224] = stor7[_50371].field_0
                    mem[_50372 + 256] = bool(stor7[_50371].field_160)
                    mem[_50372 + 288] = stor8[_50371]
                    if idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]:
                        revert with 0, 50
                    mem[(32 * idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224] = _50372
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
                if stor15[address(arg5)].field_0 - 1 > !1:
                    revert with 0, 17
                if stor15[address(arg5)].field_0 - 1 > !1:
                    revert with 0, 17
                if stor15[address(arg5)].field_0 < mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                    _51662 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_51662] = 7
                    mem[_51662 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                    _52379 = mem[64]
                    mem[mem[64]] = 96
                    _53131 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                    mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                    idx = 0
                    s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                    t = mem[64] + 128
                    while idx < _53131:
                        _58640 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_58640 + 32]
                        mem[t + 64] = mem[_58640 + 64]
                        mem[t + 96] = mem[_58640 + 96]
                        mem[t + 128] = mem[_58640 + 128]
                        mem[t + 160] = mem[_58640 + 172 len 20]
                        mem[t + 192] = mem[_58640 + 192]
                        mem[t + 224] = mem[_58640 + 236 len 20]
                        mem[t + 256] = bool(mem[_58640 + 256])
                        mem[t + 288] = mem[_58640 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_52379 + 32] = stor15[address(arg5)].field_0
                    mem[_52379 + 64] = (320 * _53131) + 128
                    _60002 = mem[_51662]
                    mem[_52379 + (320 * _53131) + 128] = mem[_51662]
                    mem[_52379 + (320 * _53131) + 160 len ceil32(_60002)] = mem[_51662 + 32 len ceil32(_60002)]
                    if ceil32(_60002) > _60002:
                        mem[_52379 + (320 * _53131) + _60002 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_60002) + _52379 + (320 * _53131) + -mem[64] + 160
                _51663 = mem[64]
                mem[64] = mem[64] + 64
                mem[_51663] = 4
                mem[_51663 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                _52380 = mem[64]
                mem[mem[64]] = 96
                _53132 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                idx = 0
                s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                t = mem[64] + 128
                while idx < _53132:
                    _58647 = mem[s]
                    mem[t] = mem[mem[s]]
                    mem[t + 32] = mem[_58647 + 32]
                    mem[t + 64] = mem[_58647 + 64]
                    mem[t + 96] = mem[_58647 + 96]
                    mem[t + 128] = mem[_58647 + 128]
                    mem[t + 160] = mem[_58647 + 172 len 20]
                    mem[t + 192] = mem[_58647 + 192]
                    mem[t + 224] = mem[_58647 + 236 len 20]
                    mem[t + 256] = bool(mem[_58647 + 256])
                    mem[t + 288] = mem[_58647 + 288]
                    idx = idx + 1
                    s = s + 32
                    t = t + 320
                    continue 
                mem[_52380 + 32] = stor15[address(arg5)].field_0
                mem[_52380 + 64] = (320 * _53132) + 128
                _60003 = mem[_51663]
                mem[_52380 + (320 * _53132) + 128] = mem[_51663]
                mem[_52380 + (320 * _53132) + 160 len ceil32(_60003)] = mem[_51663 + 32 len ceil32(_60003)]
                if ceil32(_60003) > _60003:
                    mem[_52380 + (320 * _53132) + _60003 + 160] = 0
                return memory
                  from mem[64]
                   len ceil32(_60003) + _52380 + (320 * _53132) + -mem[64] + 160
            if arg2 > test266151307():
                revert with 0, 65
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192] = arg2
            mem[64] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224
            if not arg2:
                idx = 0
                while idx < arg2:
                    if stor15[address(arg5)].field_0 - 1 > !idx:
                        revert with 0, 17
                    if stor15[address(arg5)].field_0 + idx - 1 >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                        revert with 0, 50
                    mem[0] = mem[(32 * stor15[address(arg5)].field_0 + idx - 1) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]
                    mem[32] = 12
                    _25886 = sha3(mem[(32 * stor15[address(arg5)].field_0 + idx - 1) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192], 12)
                    _25887 = mem[64]
                    mem[64] = mem[64] + 320
                    mem[_25887] = stor12[mem[(32 * stor15[address(arg5)].field_0 + idx - 1) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]].field_0
                    mem[_25887 + 32] = stor1[_25886]
                    mem[_25887 + 64] = stor2[_25886]
                    mem[_25887 + 96] = stor3[_25886]
                    mem[_25887 + 128] = stor4[_25886]
                    mem[_25887 + 160] = stor5[_25886]
                    mem[_25887 + 192] = stor6[_25886]
                    mem[_25887 + 224] = stor7[_25886].field_0
                    mem[_25887 + 256] = bool(stor7[_25886].field_160)
                    mem[_25887 + 288] = stor8[_25886]
                    if idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]:
                        revert with 0, 50
                    mem[(32 * idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224] = _25887
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
                if stor15[address(arg5)].field_0 - 1 > !arg2:
                    revert with 0, 17
                if stor15[address(arg5)].field_0 - 1 > !arg2:
                    revert with 0, 17
                if stor15[address(arg5)].field_0 + arg2 - 1 < mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                    _27125 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_27125] = 7
                    mem[_27125 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                    _28324 = mem[64]
                    mem[mem[64]] = 96
                    _29036 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                    mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                    idx = 0
                    s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                    t = mem[64] + 128
                    while idx < _29036:
                        _37242 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_37242 + 32]
                        mem[t + 64] = mem[_37242 + 64]
                        mem[t + 96] = mem[_37242 + 96]
                        mem[t + 128] = mem[_37242 + 128]
                        mem[t + 160] = mem[_37242 + 172 len 20]
                        mem[t + 192] = mem[_37242 + 192]
                        mem[t + 224] = mem[_37242 + 236 len 20]
                        mem[t + 256] = bool(mem[_37242 + 256])
                        mem[t + 288] = mem[_37242 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_28324 + 32] = stor15[address(arg5)].field_0 + arg2 - 1
                    mem[_28324 + 64] = (320 * _29036) + 128
                    _38174 = mem[_27125]
                    mem[_28324 + (320 * _29036) + 128] = mem[_27125]
                    mem[_28324 + (320 * _29036) + 160 len ceil32(_38174)] = mem[_27125 + 32 len ceil32(_38174)]
                    var55001 = ceil32(_38174)
                    if ceil32(_38174) > _38174:
                        mem[_28324 + (320 * _29036) + _38174 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_38174) + _28324 + (320 * _29036) + -mem[64] + 160
                _27126 = mem[64]
                mem[64] = mem[64] + 64
                mem[_27126] = 4
                mem[_27126 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                _28325 = mem[64]
                mem[mem[64]] = 96
                _29037 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                idx = 0
                s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                t = mem[64] + 128
                while idx < _29037:
                    _37249 = mem[s]
                    mem[t] = mem[mem[s]]
                    mem[t + 32] = mem[_37249 + 32]
                    mem[t + 64] = mem[_37249 + 64]
                    mem[t + 96] = mem[_37249 + 96]
                    mem[t + 128] = mem[_37249 + 128]
                    mem[t + 160] = mem[_37249 + 172 len 20]
                    mem[t + 192] = mem[_37249 + 192]
                    mem[t + 224] = mem[_37249 + 236 len 20]
                    mem[t + 256] = bool(mem[_37249 + 256])
                    mem[t + 288] = mem[_37249 + 288]
                    idx = idx + 1
                    s = s + 32
                    t = t + 320
                    continue 
                mem[_28325 + 32] = stor15[address(arg5)].field_0 + arg2 - 1
                mem[_28325 + 64] = (320 * _29037) + 128
                _38175 = mem[_27126]
                mem[_28325 + (320 * _29037) + 128] = mem[_27126]
                mem[_28325 + (320 * _29037) + 160 len ceil32(_38175)] = mem[_27126 + 32 len ceil32(_38175)]
                var55001 = ceil32(_38175)
                if ceil32(_38175) > _38175:
                    mem[_28325 + (320 * _29037) + _38175 + 160] = 0
                return memory
                  from mem[64]
                   len ceil32(_38175) + _28325 + (320 * _29037) + -mem[64] + 160
            mem[64] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 544
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 256] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 288] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 320] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 352] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 384] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 416] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 448] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 480] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 512] = 0
            mem[var39001] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224
            s = var39001
            idx = var39002
            while idx - 1:
                mem[64] = mem[64] + 320
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 256] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 288] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 320] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 352] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 384] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 416] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 448] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 480] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 512] = 0
                mem[s + 32] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224
                s = s + 32
                idx = idx - 1
                continue 
            idx = 0
            while idx < arg2:
                if stor15[address(arg5)].field_0 - 1 > !idx:
                    revert with 0, 17
                if stor15[address(arg5)].field_0 + idx - 1 >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                    revert with 0, 50
                mem[0] = mem[(32 * stor15[address(arg5)].field_0 + idx - 1) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]
                mem[32] = 12
                _50365 = sha3(mem[(32 * stor15[address(arg5)].field_0 + idx - 1) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192], 12)
                _50366 = mem[64]
                mem[64] = mem[64] + 320
                mem[_50366] = stor12[mem[(32 * stor15[address(arg5)].field_0 + idx - 1) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]].field_0
                mem[_50366 + 32] = stor1[_50365]
                mem[_50366 + 64] = stor2[_50365]
                mem[_50366 + 96] = stor3[_50365]
                mem[_50366 + 128] = stor4[_50365]
                mem[_50366 + 160] = stor5[_50365]
                mem[_50366 + 192] = stor6[_50365]
                mem[_50366 + 224] = stor7[_50365].field_0
                mem[_50366 + 256] = bool(stor7[_50365].field_160)
                mem[_50366 + 288] = stor8[_50365]
                if idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]:
                    revert with 0, 50
                mem[(32 * idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224] = _50366
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
            if stor15[address(arg5)].field_0 - 1 > !arg2:
                revert with 0, 17
            if stor15[address(arg5)].field_0 - 1 > !arg2:
                revert with 0, 17
            if stor15[address(arg5)].field_0 + arg2 - 1 < mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                _51660 = mem[64]
                mem[64] = mem[64] + 64
                mem[_51660] = 7
                mem[_51660 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                _52377 = mem[64]
                mem[mem[64]] = 96
                _53129 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                idx = 0
                s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                t = mem[64] + 128
                while idx < _53129:
                    _58626 = mem[s]
                    mem[t] = mem[mem[s]]
                    mem[t + 32] = mem[_58626 + 32]
                    mem[t + 64] = mem[_58626 + 64]
                    mem[t + 96] = mem[_58626 + 96]
                    mem[t + 128] = mem[_58626 + 128]
                    mem[t + 160] = mem[_58626 + 172 len 20]
                    mem[t + 192] = mem[_58626 + 192]
                    mem[t + 224] = mem[_58626 + 236 len 20]
                    mem[t + 256] = bool(mem[_58626 + 256])
                    mem[t + 288] = mem[_58626 + 288]
                    idx = idx + 1
                    s = s + 32
                    t = t + 320
                    continue 
                mem[_52377 + 32] = stor15[address(arg5)].field_0 + arg2 - 1
                mem[_52377 + 64] = (320 * _53129) + 128
                _60000 = mem[_51660]
                mem[_52377 + (320 * _53129) + 128] = mem[_51660]
                mem[_52377 + (320 * _53129) + 160 len ceil32(_60000)] = mem[_51660 + 32 len ceil32(_60000)]
                var62001 = ceil32(_60000)
                if ceil32(_60000) > _60000:
                    mem[_52377 + (320 * _53129) + _60000 + 160] = 0
                return memory
                  from mem[64]
                   len ceil32(_60000) + _52377 + (320 * _53129) + -mem[64] + 160
            _51661 = mem[64]
            mem[64] = mem[64] + 64
            mem[_51661] = 4
            mem[_51661 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
            _52378 = mem[64]
            mem[mem[64]] = 96
            _53130 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
            mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
            idx = 0
            s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
            t = mem[64] + 128
            while idx < _53130:
                _58633 = mem[s]
                mem[t] = mem[mem[s]]
                mem[t + 32] = mem[_58633 + 32]
                mem[t + 64] = mem[_58633 + 64]
                mem[t + 96] = mem[_58633 + 96]
                mem[t + 128] = mem[_58633 + 128]
                mem[t + 160] = mem[_58633 + 172 len 20]
                mem[t + 192] = mem[_58633 + 192]
                mem[t + 224] = mem[_58633 + 236 len 20]
                mem[t + 256] = bool(mem[_58633 + 256])
                mem[t + 288] = mem[_58633 + 288]
                idx = idx + 1
                s = s + 32
                t = t + 320
                continue 
            mem[_52378 + 32] = stor15[address(arg5)].field_0 + arg2 - 1
            mem[_52378 + 64] = (320 * _53130) + 128
            _60001 = mem[_51661]
            mem[_52378 + (320 * _53130) + 128] = mem[_51661]
            mem[_52378 + (320 * _53130) + 160 len ceil32(_60001)] = mem[_51661 + 32 len ceil32(_60001)]
            var62001 = ceil32(_60001)
            if ceil32(_60001) > _60001:
                mem[_52378 + (320 * _53130) + _60001 + 160] = 0
            return memory
              from mem[64]
               len ceil32(_60001) + _52378 + (320 * _53130) + -mem[64] + 160
        mem[0] = sha3(address(arg5), 13)
        mem[(32 * stor11.length) + 160] = stor13[address(arg5)].field_0
        idx = (32 * stor11.length) + 160
        s = 0
        while (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 128 > idx:
            mem[idx + 32] = stor13[address(arg5)][s].field_256
            idx = idx + 32
            s = s + 1
            continue 
        if arg4 != 2:
            if not stor13[address(arg5)].field_0:
                mem[64] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 256
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192] = 4
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 224] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 256] = 96
                _13200 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 352] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                idx = 0
                s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192
                t = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 384
                while idx < mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                    _24602 = mem[s]
                    mem[t] = mem[mem[s]]
                    mem[t + 32] = mem[_24602 + 32]
                    mem[t + 64] = mem[_24602 + 64]
                    mem[t + 96] = mem[_24602 + 96]
                    mem[t + 128] = mem[_24602 + 128]
                    mem[t + 160] = mem[_24602 + 172 len 20]
                    mem[t + 192] = mem[_24602 + 192]
                    mem[t + 224] = mem[_24602 + 236 len 20]
                    mem[t + 256] = bool(mem[_24602 + 256])
                    mem[t + 288] = mem[_24602 + 288]
                    idx = idx + 1
                    s = s + 32
                    t = t + 320
                    continue 
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 288] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 320] = (320 * _13200) + 128
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (320 * _13200) + 384] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (320 * _13200) + 416 len ceil32(mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192])] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 224 len ceil32(mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192])]
                var32001 = ceil32(mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192])
                if ceil32(mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]) > mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]:
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (320 * _13200) + mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192] + 416] = 0
                return memory
                  from mem[64]
                   len ceil32(mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (320 * _13200) + -mem[64] + 416
            if arg1 < stor13[address(arg5)].field_0:
                if arg3:
                    if arg2 <= arg1:
                        if arg2 > test266151307():
                            revert with 0, 65
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160] = arg2
                        mem[64] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 192
                        if not arg2:
                            idx = 0
                            while idx < arg2:
                                if arg1 < idx:
                                    revert with 0, 17
                                if arg1 - idx >= mem[(32 * stor11.length) + 128]:
                                    revert with 0, 50
                                mem[0] = mem[(32 * arg1 - idx) + (32 * stor11.length) + 160]
                                mem[32] = 12
                                _25897 = sha3(mem[(32 * arg1 - idx) + (32 * stor11.length) + 160], 12)
                                _25898 = mem[64]
                                mem[64] = mem[64] + 320
                                mem[_25898] = stor12[mem[(32 * arg1 - idx) + (32 * stor11.length) + 160]].field_0
                                mem[_25898 + 32] = stor1[_25897]
                                mem[_25898 + 64] = stor2[_25897]
                                mem[_25898 + 96] = stor3[_25897]
                                mem[_25898 + 128] = stor4[_25897]
                                mem[_25898 + 160] = stor5[_25897]
                                mem[_25898 + 192] = stor6[_25897]
                                mem[_25898 + 224] = stor7[_25897].field_0
                                mem[_25898 + 256] = bool(stor7[_25897].field_160)
                                mem[_25898 + 288] = stor8[_25897]
                                if idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                                    revert with 0, 50
                                mem[(32 * idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192] = _25898
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                continue 
                            if arg1 < arg2:
                                _24766 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_24766] = 4
                                mem[_24766 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                                _25122 = mem[64]
                                mem[mem[64]] = 96
                                _25894 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                                mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                                idx = 0
                                s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192
                                t = mem[64] + 128
                                while idx < _25894:
                                    _37271 = mem[s]
                                    mem[t] = mem[mem[s]]
                                    mem[t + 32] = mem[_37271 + 32]
                                    mem[t + 64] = mem[_37271 + 64]
                                    mem[t + 96] = mem[_37271 + 96]
                                    mem[t + 128] = mem[_37271 + 128]
                                    mem[t + 160] = mem[_37271 + 172 len 20]
                                    mem[t + 192] = mem[_37271 + 192]
                                    mem[t + 224] = mem[_37271 + 236 len 20]
                                    mem[t + 256] = bool(mem[_37271 + 256])
                                    mem[t + 288] = mem[_37271 + 288]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 320
                                    continue 
                                mem[_25122 + 32] = 0
                                mem[_25122 + 64] = (320 * _25894) + 128
                                _38178 = mem[_24766]
                                mem[_25122 + (320 * _25894) + 128] = mem[_24766]
                                mem[_25122 + (320 * _25894) + 160 len ceil32(_38178)] = mem[_24766 + 32 len ceil32(_38178)]
                                var40001 = ceil32(_38178)
                                if ceil32(_38178) > _38178:
                                    mem[_25122 + (320 * _25894) + _38178 + 160] = 0
                                return memory
                                  from mem[64]
                                   len ceil32(_38178) + _25122 + (320 * _25894) + -mem[64] + 160
                            _25895 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_25895] = 7
                            mem[_25895 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                            _26679 = mem[64]
                            mem[mem[64]] = 96
                            _27131 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                            mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                            idx = 0
                            s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192
                            t = mem[64] + 128
                            while idx < _27131:
                                _37278 = mem[s]
                                mem[t] = mem[mem[s]]
                                mem[t + 32] = mem[_37278 + 32]
                                mem[t + 64] = mem[_37278 + 64]
                                mem[t + 96] = mem[_37278 + 96]
                                mem[t + 128] = mem[_37278 + 128]
                                mem[t + 160] = mem[_37278 + 172 len 20]
                                mem[t + 192] = mem[_37278 + 192]
                                mem[t + 224] = mem[_37278 + 236 len 20]
                                mem[t + 256] = bool(mem[_37278 + 256])
                                mem[t + 288] = mem[_37278 + 288]
                                idx = idx + 1
                                s = s + 32
                                t = t + 320
                                continue 
                            mem[_26679 + 32] = arg1 - arg2
                            mem[_26679 + 64] = (320 * _27131) + 128
                            _38179 = mem[_25895]
                            mem[_26679 + (320 * _27131) + 128] = mem[_25895]
                            mem[_26679 + (320 * _27131) + 160 len ceil32(_38179)] = mem[_25895 + 32 len ceil32(_38179)]
                            var43001 = ceil32(_38179)
                            if ceil32(_38179) > _38179:
                                mem[_26679 + (320 * _27131) + _38179 + 160] = 0
                            return memory
                              from mem[64]
                               len ceil32(_38179) + _26679 + (320 * _27131) + -mem[64] + 160
                        mem[64] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 512
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 192] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 224] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 256] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 288] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 320] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 352] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 384] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 416] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 448] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 480] = 0
                        mem[var30001] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 192
                        s = var30001
                        idx = var30002
                        while idx - 1:
                            mem[64] = mem[64] + 320
                            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 192] = 0
                            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 224] = 0
                            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 256] = 0
                            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 288] = 0
                            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 320] = 0
                            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 352] = 0
                            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 384] = 0
                            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 416] = 0
                            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 448] = 0
                            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 480] = 0
                            mem[s + 32] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 192
                            s = s + 32
                            idx = idx - 1
                            continue 
                        idx = 0
                        while idx < arg2:
                            if arg1 < idx:
                                revert with 0, 17
                            if arg1 - idx >= mem[(32 * stor11.length) + 128]:
                                revert with 0, 50
                            mem[0] = mem[(32 * arg1 - idx) + (32 * stor11.length) + 160]
                            mem[32] = 12
                            _50379 = sha3(mem[(32 * arg1 - idx) + (32 * stor11.length) + 160], 12)
                            _50380 = mem[64]
                            mem[64] = mem[64] + 320
                            mem[_50380] = stor12[mem[(32 * arg1 - idx) + (32 * stor11.length) + 160]].field_0
                            mem[_50380 + 32] = stor1[_50379]
                            mem[_50380 + 64] = stor2[_50379]
                            mem[_50380 + 96] = stor3[_50379]
                            mem[_50380 + 128] = stor4[_50379]
                            mem[_50380 + 160] = stor5[_50379]
                            mem[_50380 + 192] = stor6[_50379]
                            mem[_50380 + 224] = stor7[_50379].field_0
                            mem[_50380 + 256] = bool(stor7[_50379].field_160)
                            mem[_50380 + 288] = stor8[_50379]
                            if idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                                revert with 0, 50
                            mem[(32 * idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192] = _50380
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            continue 
                        if arg1 < arg2:
                            _49266 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_49266] = 4
                            mem[_49266 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                            _49638 = mem[64]
                            mem[mem[64]] = 96
                            _50376 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                            mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                            idx = 0
                            s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192
                            t = mem[64] + 128
                            while idx < _50376:
                                _58654 = mem[s]
                                mem[t] = mem[mem[s]]
                                mem[t + 32] = mem[_58654 + 32]
                                mem[t + 64] = mem[_58654 + 64]
                                mem[t + 96] = mem[_58654 + 96]
                                mem[t + 128] = mem[_58654 + 128]
                                mem[t + 160] = mem[_58654 + 172 len 20]
                                mem[t + 192] = mem[_58654 + 192]
                                mem[t + 224] = mem[_58654 + 236 len 20]
                                mem[t + 256] = bool(mem[_58654 + 256])
                                mem[t + 288] = mem[_58654 + 288]
                                idx = idx + 1
                                s = s + 32
                                t = t + 320
                                continue 
                            mem[_49638 + 32] = 0
                            mem[_49638 + 64] = (320 * _50376) + 128
                            _60004 = mem[_49266]
                            mem[_49638 + (320 * _50376) + 128] = mem[_49266]
                            mem[_49638 + (320 * _50376) + 160 len ceil32(_60004)] = mem[_49266 + 32 len ceil32(_60004)]
                            var47001 = ceil32(_60004)
                            if ceil32(_60004) > _60004:
                                mem[_49638 + (320 * _50376) + _60004 + 160] = 0
                            return memory
                              from mem[64]
                               len ceil32(_60004) + _49638 + (320 * _50376) + -mem[64] + 160
                        _50377 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_50377] = 7
                        mem[_50377 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                        _51176 = mem[64]
                        mem[mem[64]] = 96
                        _51665 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                        mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                        idx = 0
                        s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192
                        t = mem[64] + 128
                        while idx < _51665:
                            _58661 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_58661 + 32]
                            mem[t + 64] = mem[_58661 + 64]
                            mem[t + 96] = mem[_58661 + 96]
                            mem[t + 128] = mem[_58661 + 128]
                            mem[t + 160] = mem[_58661 + 172 len 20]
                            mem[t + 192] = mem[_58661 + 192]
                            mem[t + 224] = mem[_58661 + 236 len 20]
                            mem[t + 256] = bool(mem[_58661 + 256])
                            mem[t + 288] = mem[_58661 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_51176 + 32] = arg1 - arg2
                        mem[_51176 + 64] = (320 * _51665) + 128
                        _60005 = mem[_50377]
                        mem[_51176 + (320 * _51665) + 128] = mem[_50377]
                        mem[_51176 + (320 * _51665) + 160 len ceil32(_60005)] = mem[_50377 + 32 len ceil32(_60005)]
                        var50001 = ceil32(_60005)
                        if ceil32(_60005) > _60005:
                            mem[_51176 + (320 * _51665) + _60005 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_60005) + _51176 + (320 * _51665) + -mem[64] + 160
                    if 1 > !arg1:
                        revert with 0, 17
                    if arg1 + 1 > test266151307():
                        revert with 0, 65
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160] = arg1 + 1
                    mem[64] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg1 + 1) + 192
                    if not arg1 + 1:
                        idx = 0
                        while idx < arg1 + 1:
                            if arg1 < idx:
                                revert with 0, 17
                            if arg1 - idx >= mem[(32 * stor11.length) + 128]:
                                revert with 0, 50
                            mem[0] = mem[(32 * arg1 - idx) + (32 * stor11.length) + 160]
                            mem[32] = 12
                            _25903 = sha3(mem[(32 * arg1 - idx) + (32 * stor11.length) + 160], 12)
                            _25904 = mem[64]
                            mem[64] = mem[64] + 320
                            mem[_25904] = stor12[mem[(32 * arg1 - idx) + (32 * stor11.length) + 160]].field_0
                            mem[_25904 + 32] = stor1[_25903]
                            mem[_25904 + 64] = stor2[_25903]
                            mem[_25904 + 96] = stor3[_25903]
                            mem[_25904 + 128] = stor4[_25903]
                            mem[_25904 + 160] = stor5[_25903]
                            mem[_25904 + 192] = stor6[_25903]
                            mem[_25904 + 224] = stor7[_25903].field_0
                            mem[_25904 + 256] = bool(stor7[_25903].field_160)
                            mem[_25904 + 288] = stor8[_25903]
                            if idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                                revert with 0, 50
                            mem[(32 * idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192] = _25904
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            continue 
                        if arg1 < arg1 + 1:
                            _24767 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_24767] = 4
                            mem[_24767 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                            _25124 = mem[64]
                            mem[mem[64]] = 96
                            _25900 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                            mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                            idx = 0
                            s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192
                            t = mem[64] + 128
                            while idx < _25900:
                                _37285 = mem[s]
                                mem[t] = mem[mem[s]]
                                mem[t + 32] = mem[_37285 + 32]
                                mem[t + 64] = mem[_37285 + 64]
                                mem[t + 96] = mem[_37285 + 96]
                                mem[t + 128] = mem[_37285 + 128]
                                mem[t + 160] = mem[_37285 + 172 len 20]
                                mem[t + 192] = mem[_37285 + 192]
                                mem[t + 224] = mem[_37285 + 236 len 20]
                                mem[t + 256] = bool(mem[_37285 + 256])
                                mem[t + 288] = mem[_37285 + 288]
                                idx = idx + 1
                                s = s + 32
                                t = t + 320
                                continue 
                            mem[_25124 + 32] = 0
                            mem[_25124 + 64] = (320 * _25900) + 128
                            _38180 = mem[_24767]
                            mem[_25124 + (320 * _25900) + 128] = mem[_24767]
                            mem[_25124 + (320 * _25900) + 160 len ceil32(_38180)] = mem[_24767 + 32 len ceil32(_38180)]
                            var44001 = ceil32(_38180)
                            if ceil32(_38180) > _38180:
                                mem[_25124 + (320 * _25900) + _38180 + 160] = 0
                            return memory
                              from mem[64]
                               len ceil32(_38180) + _25124 + (320 * _25900) + -mem[64] + 160
                        _25901 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_25901] = 7
                        mem[_25901 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                        _26688 = mem[64]
                        mem[mem[64]] = 96
                        _27133 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                        mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                        idx = 0
                        s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192
                        t = mem[64] + 128
                        while idx < _27133:
                            _37292 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_37292 + 32]
                            mem[t + 64] = mem[_37292 + 64]
                            mem[t + 96] = mem[_37292 + 96]
                            mem[t + 128] = mem[_37292 + 128]
                            mem[t + 160] = mem[_37292 + 172 len 20]
                            mem[t + 192] = mem[_37292 + 192]
                            mem[t + 224] = mem[_37292 + 236 len 20]
                            mem[t + 256] = bool(mem[_37292 + 256])
                            mem[t + 288] = mem[_37292 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_26688 + 32] = -1
                        mem[_26688 + 64] = (320 * _27133) + 128
                        _38181 = mem[_25901]
                        mem[_26688 + (320 * _27133) + 128] = mem[_25901]
                        mem[_26688 + (320 * _27133) + 160 len ceil32(_38181)] = mem[_25901 + 32 len ceil32(_38181)]
                        var47001 = ceil32(_38181)
                        if ceil32(_38181) > _38181:
                            mem[_26688 + (320 * _27133) + _38181 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_38181) + _26688 + (320 * _27133) + -mem[64] + 160
                    mem[64] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg1 + 1) + 512
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg1 + 1) + 192] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg1 + 1) + 224] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg1 + 1) + 256] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg1 + 1) + 288] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg1 + 1) + 320] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg1 + 1) + 352] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg1 + 1) + 384] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg1 + 1) + 416] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg1 + 1) + 448] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg1 + 1) + 480] = 0
                    mem[var34001] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg1 + 1) + 192
                    s = var34001
                    idx = var34002
                    while idx - 1:
                        mem[64] = mem[64] + 320
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg1 + 1) + 192] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg1 + 1) + 224] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg1 + 1) + 256] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg1 + 1) + 288] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg1 + 1) + 320] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg1 + 1) + 352] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg1 + 1) + 384] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg1 + 1) + 416] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg1 + 1) + 448] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg1 + 1) + 480] = 0
                        mem[s + 32] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg1 + 1) + 192
                        s = s + 32
                        idx = idx - 1
                        continue 
                    idx = 0
                    while idx < arg1 + 1:
                        if arg1 < idx:
                            revert with 0, 17
                        if arg1 - idx >= mem[(32 * stor11.length) + 128]:
                            revert with 0, 50
                        mem[0] = mem[(32 * arg1 - idx) + (32 * stor11.length) + 160]
                        mem[32] = 12
                        _50387 = sha3(mem[(32 * arg1 - idx) + (32 * stor11.length) + 160], 12)
                        _50388 = mem[64]
                        mem[64] = mem[64] + 320
                        mem[_50388] = stor12[mem[(32 * arg1 - idx) + (32 * stor11.length) + 160]].field_0
                        mem[_50388 + 32] = stor1[_50387]
                        mem[_50388 + 64] = stor2[_50387]
                        mem[_50388 + 96] = stor3[_50387]
                        mem[_50388 + 128] = stor4[_50387]
                        mem[_50388 + 160] = stor5[_50387]
                        mem[_50388 + 192] = stor6[_50387]
                        mem[_50388 + 224] = stor7[_50387].field_0
                        mem[_50388 + 256] = bool(stor7[_50387].field_160)
                        mem[_50388 + 288] = stor8[_50387]
                        if idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                            revert with 0, 50
                        mem[(32 * idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192] = _50388
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if arg1 < arg1 + 1:
                        _49267 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_49267] = 4
                        mem[_49267 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                        _49642 = mem[64]
                        mem[mem[64]] = 96
                        _50384 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                        mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                        idx = 0
                        s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192
                        t = mem[64] + 128
                        while idx < _50384:
                            _58668 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_58668 + 32]
                            mem[t + 64] = mem[_58668 + 64]
                            mem[t + 96] = mem[_58668 + 96]
                            mem[t + 128] = mem[_58668 + 128]
                            mem[t + 160] = mem[_58668 + 172 len 20]
                            mem[t + 192] = mem[_58668 + 192]
                            mem[t + 224] = mem[_58668 + 236 len 20]
                            mem[t + 256] = bool(mem[_58668 + 256])
                            mem[t + 288] = mem[_58668 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_49642 + 32] = 0
                        mem[_49642 + 64] = (320 * _50384) + 128
                        _60006 = mem[_49267]
                        mem[_49642 + (320 * _50384) + 128] = mem[_49267]
                        mem[_49642 + (320 * _50384) + 160 len ceil32(_60006)] = mem[_49267 + 32 len ceil32(_60006)]
                        var51001 = ceil32(_60006)
                        if ceil32(_60006) > _60006:
                            mem[_49642 + (320 * _50384) + _60006 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_60006) + _49642 + (320 * _50384) + -mem[64] + 160
                    _50385 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_50385] = 7
                    mem[_50385 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                    _51184 = mem[64]
                    mem[mem[64]] = 96
                    _51667 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                    mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                    idx = 0
                    s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192
                    t = mem[64] + 128
                    while idx < _51667:
                        _58675 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_58675 + 32]
                        mem[t + 64] = mem[_58675 + 64]
                        mem[t + 96] = mem[_58675 + 96]
                        mem[t + 128] = mem[_58675 + 128]
                        mem[t + 160] = mem[_58675 + 172 len 20]
                        mem[t + 192] = mem[_58675 + 192]
                        mem[t + 224] = mem[_58675 + 236 len 20]
                        mem[t + 256] = bool(mem[_58675 + 256])
                        mem[t + 288] = mem[_58675 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_51184 + 32] = -1
                    mem[_51184 + 64] = (320 * _51667) + 128
                    _60007 = mem[_50385]
                    mem[_51184 + (320 * _51667) + 128] = mem[_50385]
                    mem[_51184 + (320 * _51667) + 160 len ceil32(_60007)] = mem[_50385 + 32 len ceil32(_60007)]
                    var54001 = ceil32(_60007)
                    if ceil32(_60007) > _60007:
                        mem[_51184 + (320 * _51667) + _60007 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_60007) + _51184 + (320 * _51667) + -mem[64] + 160
                if stor13[address(arg5)].field_0 < arg1:
                    revert with 0, 17
                if arg2 <= stor13[address(arg5)].field_0 - arg1:
                    if arg2 > test266151307():
                        revert with 0, 65
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160] = arg2
                    mem[64] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 192
                    if not arg2:
                        idx = 0
                        while idx < arg2:
                            if arg1 > !idx:
                                revert with 0, 17
                            if arg1 + idx >= mem[(32 * stor11.length) + 128]:
                                revert with 0, 50
                            mem[0] = mem[(32 * arg1 + idx) + (32 * stor11.length) + 160]
                            mem[32] = 12
                            _25907 = sha3(mem[(32 * arg1 + idx) + (32 * stor11.length) + 160], 12)
                            _25908 = mem[64]
                            mem[64] = mem[64] + 320
                            mem[_25908] = stor12[mem[(32 * arg1 + idx) + (32 * stor11.length) + 160]].field_0
                            mem[_25908 + 32] = stor1[_25907]
                            mem[_25908 + 64] = stor2[_25907]
                            mem[_25908 + 96] = stor3[_25907]
                            mem[_25908 + 128] = stor4[_25907]
                            mem[_25908 + 160] = stor5[_25907]
                            mem[_25908 + 192] = stor6[_25907]
                            mem[_25908 + 224] = stor7[_25907].field_0
                            mem[_25908 + 256] = bool(stor7[_25907].field_160)
                            mem[_25908 + 288] = stor8[_25907]
                            if idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                                revert with 0, 50
                            mem[(32 * idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192] = _25908
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            continue 
                        if arg1 > !arg2:
                            revert with 0, 17
                        if arg1 > !arg2:
                            revert with 0, 17
                        if arg1 + arg2 < mem[(32 * stor11.length) + 128]:
                            _27134 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_27134] = 7
                            mem[_27134 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                            _28364 = mem[64]
                            mem[mem[64]] = 96
                            _29044 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                            mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                            idx = 0
                            s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192
                            t = mem[64] + 128
                            while idx < _29044:
                                _37299 = mem[s]
                                mem[t] = mem[mem[s]]
                                mem[t + 32] = mem[_37299 + 32]
                                mem[t + 64] = mem[_37299 + 64]
                                mem[t + 96] = mem[_37299 + 96]
                                mem[t + 128] = mem[_37299 + 128]
                                mem[t + 160] = mem[_37299 + 172 len 20]
                                mem[t + 192] = mem[_37299 + 192]
                                mem[t + 224] = mem[_37299 + 236 len 20]
                                mem[t + 256] = bool(mem[_37299 + 256])
                                mem[t + 288] = mem[_37299 + 288]
                                idx = idx + 1
                                s = s + 32
                                t = t + 320
                                continue 
                            mem[_28364 + 32] = arg1 + arg2
                            mem[_28364 + 64] = (320 * _29044) + 128
                            _38182 = mem[_27134]
                            mem[_28364 + (320 * _29044) + 128] = mem[_27134]
                            mem[_28364 + (320 * _29044) + 160 len ceil32(_38182)] = mem[_27134 + 32 len ceil32(_38182)]
                            var49001 = ceil32(_38182)
                            if ceil32(_38182) > _38182:
                                mem[_28364 + (320 * _29044) + _38182 + 160] = 0
                            return memory
                              from mem[64]
                               len ceil32(_38182) + _28364 + (320 * _29044) + -mem[64] + 160
                        _27135 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_27135] = 4
                        mem[_27135 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                        _28365 = mem[64]
                        mem[mem[64]] = 96
                        _29045 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                        mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                        idx = 0
                        s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192
                        t = mem[64] + 128
                        while idx < _29045:
                            _37306 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_37306 + 32]
                            mem[t + 64] = mem[_37306 + 64]
                            mem[t + 96] = mem[_37306 + 96]
                            mem[t + 128] = mem[_37306 + 128]
                            mem[t + 160] = mem[_37306 + 172 len 20]
                            mem[t + 192] = mem[_37306 + 192]
                            mem[t + 224] = mem[_37306 + 236 len 20]
                            mem[t + 256] = bool(mem[_37306 + 256])
                            mem[t + 288] = mem[_37306 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_28365 + 32] = arg1 + arg2
                        mem[_28365 + 64] = (320 * _29045) + 128
                        _38183 = mem[_27135]
                        mem[_28365 + (320 * _29045) + 128] = mem[_27135]
                        mem[_28365 + (320 * _29045) + 160 len ceil32(_38183)] = mem[_27135 + 32 len ceil32(_38183)]
                        var49001 = ceil32(_38183)
                        if ceil32(_38183) > _38183:
                            mem[_28365 + (320 * _29045) + _38183 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_38183) + _28365 + (320 * _29045) + -mem[64] + 160
                    mem[64] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 512
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 192] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 224] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 256] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 288] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 320] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 352] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 384] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 416] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 448] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 480] = 0
                    mem[var33001] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 192
                    s = var33001
                    idx = var33002
                    while idx - 1:
                        mem[64] = mem[64] + 320
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 192] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 224] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 256] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 288] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 320] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 352] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 384] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 416] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 448] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 480] = 0
                        mem[s + 32] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 192
                        s = s + 32
                        idx = idx - 1
                        continue 
                    idx = 0
                    while idx < arg2:
                        if arg1 > !idx:
                            revert with 0, 17
                        if arg1 + idx >= mem[(32 * stor11.length) + 128]:
                            revert with 0, 50
                        mem[0] = mem[(32 * arg1 + idx) + (32 * stor11.length) + 160]
                        mem[32] = 12
                        _50393 = sha3(mem[(32 * arg1 + idx) + (32 * stor11.length) + 160], 12)
                        _50394 = mem[64]
                        mem[64] = mem[64] + 320
                        mem[_50394] = stor12[mem[(32 * arg1 + idx) + (32 * stor11.length) + 160]].field_0
                        mem[_50394 + 32] = stor1[_50393]
                        mem[_50394 + 64] = stor2[_50393]
                        mem[_50394 + 96] = stor3[_50393]
                        mem[_50394 + 128] = stor4[_50393]
                        mem[_50394 + 160] = stor5[_50393]
                        mem[_50394 + 192] = stor6[_50393]
                        mem[_50394 + 224] = stor7[_50393].field_0
                        mem[_50394 + 256] = bool(stor7[_50393].field_160)
                        mem[_50394 + 288] = stor8[_50393]
                        if idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                            revert with 0, 50
                        mem[(32 * idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192] = _50394
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if arg1 > !arg2:
                        revert with 0, 17
                    if arg1 > !arg2:
                        revert with 0, 17
                    if arg1 + arg2 < mem[(32 * stor11.length) + 128]:
                        _51668 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_51668] = 7
                        mem[_51668 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                        _52397 = mem[64]
                        mem[mem[64]] = 96
                        _53137 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                        mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                        idx = 0
                        s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192
                        t = mem[64] + 128
                        while idx < _53137:
                            _58682 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_58682 + 32]
                            mem[t + 64] = mem[_58682 + 64]
                            mem[t + 96] = mem[_58682 + 96]
                            mem[t + 128] = mem[_58682 + 128]
                            mem[t + 160] = mem[_58682 + 172 len 20]
                            mem[t + 192] = mem[_58682 + 192]
                            mem[t + 224] = mem[_58682 + 236 len 20]
                            mem[t + 256] = bool(mem[_58682 + 256])
                            mem[t + 288] = mem[_58682 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_52397 + 32] = arg1 + arg2
                        mem[_52397 + 64] = (320 * _53137) + 128
                        _60008 = mem[_51668]
                        mem[_52397 + (320 * _53137) + 128] = mem[_51668]
                        mem[_52397 + (320 * _53137) + 160 len ceil32(_60008)] = mem[_51668 + 32 len ceil32(_60008)]
                        var56001 = ceil32(_60008)
                        if ceil32(_60008) > _60008:
                            mem[_52397 + (320 * _53137) + _60008 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_60008) + _52397 + (320 * _53137) + -mem[64] + 160
                    _51669 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_51669] = 4
                    mem[_51669 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                    _52398 = mem[64]
                    mem[mem[64]] = 96
                    _53138 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                    mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                    idx = 0
                    s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192
                    t = mem[64] + 128
                    while idx < _53138:
                        _58689 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_58689 + 32]
                        mem[t + 64] = mem[_58689 + 64]
                        mem[t + 96] = mem[_58689 + 96]
                        mem[t + 128] = mem[_58689 + 128]
                        mem[t + 160] = mem[_58689 + 172 len 20]
                        mem[t + 192] = mem[_58689 + 192]
                        mem[t + 224] = mem[_58689 + 236 len 20]
                        mem[t + 256] = bool(mem[_58689 + 256])
                        mem[t + 288] = mem[_58689 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_52398 + 32] = arg1 + arg2
                    mem[_52398 + 64] = (320 * _53138) + 128
                    _60009 = mem[_51669]
                    mem[_52398 + (320 * _53138) + 128] = mem[_51669]
                    mem[_52398 + (320 * _53138) + 160 len ceil32(_60009)] = mem[_51669 + 32 len ceil32(_60009)]
                    var56001 = ceil32(_60009)
                    if ceil32(_60009) > _60009:
                        mem[_52398 + (320 * _53138) + _60009 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_60009) + _52398 + (320 * _53138) + -mem[64] + 160
                if stor13[address(arg5)].field_0 < arg1:
                    revert with 0, 17
                if stor13[address(arg5)].field_0 - arg1 > test266151307():
                    revert with 0, 65
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160] = stor13[address(arg5)].field_0 - arg1
                mem[64] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor13[address(arg5)].field_0 - arg1) + 192
                if not stor13[address(arg5)].field_0 - arg1:
                    idx = 0
                    while idx < stor13[address(arg5)].field_0 - arg1:
                        if arg1 > !idx:
                            revert with 0, 17
                        if arg1 + idx >= mem[(32 * stor11.length) + 128]:
                            revert with 0, 50
                        mem[0] = mem[(32 * arg1 + idx) + (32 * stor11.length) + 160]
                        mem[32] = 12
                        _25911 = sha3(mem[(32 * arg1 + idx) + (32 * stor11.length) + 160], 12)
                        _25912 = mem[64]
                        mem[64] = mem[64] + 320
                        mem[_25912] = stor12[mem[(32 * arg1 + idx) + (32 * stor11.length) + 160]].field_0
                        mem[_25912 + 32] = stor1[_25911]
                        mem[_25912 + 64] = stor2[_25911]
                        mem[_25912 + 96] = stor3[_25911]
                        mem[_25912 + 128] = stor4[_25911]
                        mem[_25912 + 160] = stor5[_25911]
                        mem[_25912 + 192] = stor6[_25911]
                        mem[_25912 + 224] = stor7[_25911].field_0
                        mem[_25912 + 256] = bool(stor7[_25911].field_160)
                        mem[_25912 + 288] = stor8[_25911]
                        if idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                            revert with 0, 50
                        mem[(32 * idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192] = _25912
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if arg1 > !(stor13[address(arg5)].field_0 - arg1):
                        revert with 0, 17
                    if arg1 > !(stor13[address(arg5)].field_0 - arg1):
                        revert with 0, 17
                    if stor13[address(arg5)].field_0 < mem[(32 * stor11.length) + 128]:
                        _27136 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_27136] = 7
                        mem[_27136 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                        _28370 = mem[64]
                        mem[mem[64]] = 96
                        _29046 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                        mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                        idx = 0
                        s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192
                        t = mem[64] + 128
                        while idx < _29046:
                            _37313 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_37313 + 32]
                            mem[t + 64] = mem[_37313 + 64]
                            mem[t + 96] = mem[_37313 + 96]
                            mem[t + 128] = mem[_37313 + 128]
                            mem[t + 160] = mem[_37313 + 172 len 20]
                            mem[t + 192] = mem[_37313 + 192]
                            mem[t + 224] = mem[_37313 + 236 len 20]
                            mem[t + 256] = bool(mem[_37313 + 256])
                            mem[t + 288] = mem[_37313 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_28370 + 32] = stor13[address(arg5)].field_0
                        mem[_28370 + 64] = (320 * _29046) + 128
                        _38184 = mem[_27136]
                        mem[_28370 + (320 * _29046) + 128] = mem[_27136]
                        mem[_28370 + (320 * _29046) + 160 len ceil32(_38184)] = mem[_27136 + 32 len ceil32(_38184)]
                        var53001 = ceil32(_38184)
                        if ceil32(_38184) > _38184:
                            mem[_28370 + (320 * _29046) + _38184 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_38184) + _28370 + (320 * _29046) + -mem[64] + 160
                    _27137 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_27137] = 4
                    mem[_27137 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                    _28371 = mem[64]
                    mem[mem[64]] = 96
                    _29047 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                    mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                    idx = 0
                    s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192
                    t = mem[64] + 128
                    while idx < _29047:
                        _37320 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_37320 + 32]
                        mem[t + 64] = mem[_37320 + 64]
                        mem[t + 96] = mem[_37320 + 96]
                        mem[t + 128] = mem[_37320 + 128]
                        mem[t + 160] = mem[_37320 + 172 len 20]
                        mem[t + 192] = mem[_37320 + 192]
                        mem[t + 224] = mem[_37320 + 236 len 20]
                        mem[t + 256] = bool(mem[_37320 + 256])
                        mem[t + 288] = mem[_37320 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_28371 + 32] = stor13[address(arg5)].field_0
                    mem[_28371 + 64] = (320 * _29047) + 128
                    _38185 = mem[_27137]
                    mem[_28371 + (320 * _29047) + 128] = mem[_27137]
                    mem[_28371 + (320 * _29047) + 160 len ceil32(_38185)] = mem[_27137 + 32 len ceil32(_38185)]
                    var53001 = ceil32(_38185)
                    if ceil32(_38185) > _38185:
                        mem[_28371 + (320 * _29047) + _38185 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_38185) + _28371 + (320 * _29047) + -mem[64] + 160
                mem[64] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor13[address(arg5)].field_0 - arg1) + 512
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor13[address(arg5)].field_0 - arg1) + 192] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor13[address(arg5)].field_0 - arg1) + 224] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor13[address(arg5)].field_0 - arg1) + 256] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor13[address(arg5)].field_0 - arg1) + 288] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor13[address(arg5)].field_0 - arg1) + 320] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor13[address(arg5)].field_0 - arg1) + 352] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor13[address(arg5)].field_0 - arg1) + 384] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor13[address(arg5)].field_0 - arg1) + 416] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor13[address(arg5)].field_0 - arg1) + 448] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor13[address(arg5)].field_0 - arg1) + 480] = 0
                mem[var37001] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor13[address(arg5)].field_0 - arg1) + 192
                s = var37001
                idx = var37002
                while idx - 1:
                    mem[64] = mem[64] + 320
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor13[address(arg5)].field_0 - arg1) + 192] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor13[address(arg5)].field_0 - arg1) + 224] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor13[address(arg5)].field_0 - arg1) + 256] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor13[address(arg5)].field_0 - arg1) + 288] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor13[address(arg5)].field_0 - arg1) + 320] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor13[address(arg5)].field_0 - arg1) + 352] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor13[address(arg5)].field_0 - arg1) + 384] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor13[address(arg5)].field_0 - arg1) + 416] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor13[address(arg5)].field_0 - arg1) + 448] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor13[address(arg5)].field_0 - arg1) + 480] = 0
                    mem[s + 32] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor13[address(arg5)].field_0 - arg1) + 192
                    s = s + 32
                    idx = idx - 1
                    continue 
                idx = 0
                while idx < stor13[address(arg5)].field_0 - arg1:
                    if arg1 > !idx:
                        revert with 0, 17
                    if arg1 + idx >= mem[(32 * stor11.length) + 128]:
                        revert with 0, 50
                    mem[0] = mem[(32 * arg1 + idx) + (32 * stor11.length) + 160]
                    mem[32] = 12
                    _50399 = sha3(mem[(32 * arg1 + idx) + (32 * stor11.length) + 160], 12)
                    _50400 = mem[64]
                    mem[64] = mem[64] + 320
                    mem[_50400] = stor12[mem[(32 * arg1 + idx) + (32 * stor11.length) + 160]].field_0
                    mem[_50400 + 32] = stor1[_50399]
                    mem[_50400 + 64] = stor2[_50399]
                    mem[_50400 + 96] = stor3[_50399]
                    mem[_50400 + 128] = stor4[_50399]
                    mem[_50400 + 160] = stor5[_50399]
                    mem[_50400 + 192] = stor6[_50399]
                    mem[_50400 + 224] = stor7[_50399].field_0
                    mem[_50400 + 256] = bool(stor7[_50399].field_160)
                    mem[_50400 + 288] = stor8[_50399]
                    if idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                        revert with 0, 50
                    mem[(32 * idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192] = _50400
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
                if arg1 > !(stor13[address(arg5)].field_0 - arg1):
                    revert with 0, 17
                if arg1 > !(stor13[address(arg5)].field_0 - arg1):
                    revert with 0, 17
                if stor13[address(arg5)].field_0 < mem[(32 * stor11.length) + 128]:
                    _51670 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_51670] = 7
                    mem[_51670 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                    _52399 = mem[64]
                    mem[mem[64]] = 96
                    _53139 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                    mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                    idx = 0
                    s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192
                    t = mem[64] + 128
                    while idx < _53139:
                        _58696 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_58696 + 32]
                        mem[t + 64] = mem[_58696 + 64]
                        mem[t + 96] = mem[_58696 + 96]
                        mem[t + 128] = mem[_58696 + 128]
                        mem[t + 160] = mem[_58696 + 172 len 20]
                        mem[t + 192] = mem[_58696 + 192]
                        mem[t + 224] = mem[_58696 + 236 len 20]
                        mem[t + 256] = bool(mem[_58696 + 256])
                        mem[t + 288] = mem[_58696 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_52399 + 32] = stor13[address(arg5)].field_0
                    mem[_52399 + 64] = (320 * _53139) + 128
                    _60010 = mem[_51670]
                    mem[_52399 + (320 * _53139) + 128] = mem[_51670]
                    mem[_52399 + (320 * _53139) + 160 len ceil32(_60010)] = mem[_51670 + 32 len ceil32(_60010)]
                    var60001 = ceil32(_60010)
                    if ceil32(_60010) > _60010:
                        mem[_52399 + (320 * _53139) + _60010 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_60010) + _52399 + (320 * _53139) + -mem[64] + 160
                _51671 = mem[64]
                mem[64] = mem[64] + 64
                mem[_51671] = 4
                mem[_51671 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                _52400 = mem[64]
                mem[mem[64]] = 96
                _53140 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                idx = 0
                s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192
                t = mem[64] + 128
                while idx < _53140:
                    _58703 = mem[s]
                    mem[t] = mem[mem[s]]
                    mem[t + 32] = mem[_58703 + 32]
                    mem[t + 64] = mem[_58703 + 64]
                    mem[t + 96] = mem[_58703 + 96]
                    mem[t + 128] = mem[_58703 + 128]
                    mem[t + 160] = mem[_58703 + 172 len 20]
                    mem[t + 192] = mem[_58703 + 192]
                    mem[t + 224] = mem[_58703 + 236 len 20]
                    mem[t + 256] = bool(mem[_58703 + 256])
                    mem[t + 288] = mem[_58703 + 288]
                    idx = idx + 1
                    s = s + 32
                    t = t + 320
                    continue 
                mem[_52400 + 32] = stor13[address(arg5)].field_0
                mem[_52400 + 64] = (320 * _53140) + 128
                _60011 = mem[_51671]
                mem[_52400 + (320 * _53140) + 128] = mem[_51671]
                mem[_52400 + (320 * _53140) + 160 len ceil32(_60011)] = mem[_51671 + 32 len ceil32(_60011)]
                var60001 = ceil32(_60011)
                if ceil32(_60011) > _60011:
                    mem[_52400 + (320 * _53140) + _60011 + 160] = 0
                return memory
                  from mem[64]
                   len ceil32(_60011) + _52400 + (320 * _53140) + -mem[64] + 160
            if stor13[address(arg5)].field_0 < 1:
                revert with 0, 17
            if arg3:
                if arg2 <= stor13[address(arg5)].field_0 - 1:
                    if arg2 > test266151307():
                        revert with 0, 65
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160] = arg2
                    mem[64] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 192
                    if not arg2:
                        idx = 0
                        while idx < arg2:
                            if stor13[address(arg5)].field_0 - 1 < idx:
                                revert with 0, 17
                            if stor13[address(arg5)].field_0 + -idx - 1 >= mem[(32 * stor11.length) + 128]:
                                revert with 0, 50
                            mem[0] = mem[(32 * stor13[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + 160]
                            mem[32] = 12
                            _25917 = sha3(mem[(32 * stor13[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + 160], 12)
                            _25918 = mem[64]
                            mem[64] = mem[64] + 320
                            mem[_25918] = stor12[mem[(32 * stor13[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + 160]].field_0
                            mem[_25918 + 32] = stor1[_25917]
                            mem[_25918 + 64] = stor2[_25917]
                            mem[_25918 + 96] = stor3[_25917]
                            mem[_25918 + 128] = stor4[_25917]
                            mem[_25918 + 160] = stor5[_25917]
                            mem[_25918 + 192] = stor6[_25917]
                            mem[_25918 + 224] = stor7[_25917].field_0
                            mem[_25918 + 256] = bool(stor7[_25917].field_160)
                            mem[_25918 + 288] = stor8[_25917]
                            if idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                                revert with 0, 50
                            mem[(32 * idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192] = _25918
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            continue 
                        if stor13[address(arg5)].field_0 - 1 < arg2:
                            _24768 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_24768] = 4
                            mem[_24768 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                            _25128 = mem[64]
                            mem[mem[64]] = 96
                            _25914 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                            mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                            idx = 0
                            s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192
                            t = mem[64] + 128
                            while idx < _25914:
                                _37327 = mem[s]
                                mem[t] = mem[mem[s]]
                                mem[t + 32] = mem[_37327 + 32]
                                mem[t + 64] = mem[_37327 + 64]
                                mem[t + 96] = mem[_37327 + 96]
                                mem[t + 128] = mem[_37327 + 128]
                                mem[t + 160] = mem[_37327 + 172 len 20]
                                mem[t + 192] = mem[_37327 + 192]
                                mem[t + 224] = mem[_37327 + 236 len 20]
                                mem[t + 256] = bool(mem[_37327 + 256])
                                mem[t + 288] = mem[_37327 + 288]
                                idx = idx + 1
                                s = s + 32
                                t = t + 320
                                continue 
                            mem[_25128 + 32] = 0
                            mem[_25128 + 64] = (320 * _25914) + 128
                            _38186 = mem[_24768]
                            mem[_25128 + (320 * _25914) + 128] = mem[_24768]
                            mem[_25128 + (320 * _25914) + 160 len ceil32(_38186)] = mem[_24768 + 32 len ceil32(_38186)]
                            var44001 = ceil32(_38186)
                            if ceil32(_38186) > _38186:
                                mem[_25128 + (320 * _25914) + _38186 + 160] = 0
                            return memory
                              from mem[64]
                               len ceil32(_38186) + _25128 + (320 * _25914) + -mem[64] + 160
                        _25915 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_25915] = 7
                        mem[_25915 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                        _26697 = mem[64]
                        mem[mem[64]] = 96
                        _27139 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                        mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                        idx = 0
                        s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192
                        t = mem[64] + 128
                        while idx < _27139:
                            _37334 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_37334 + 32]
                            mem[t + 64] = mem[_37334 + 64]
                            mem[t + 96] = mem[_37334 + 96]
                            mem[t + 128] = mem[_37334 + 128]
                            mem[t + 160] = mem[_37334 + 172 len 20]
                            mem[t + 192] = mem[_37334 + 192]
                            mem[t + 224] = mem[_37334 + 236 len 20]
                            mem[t + 256] = bool(mem[_37334 + 256])
                            mem[t + 288] = mem[_37334 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_26697 + 32] = stor13[address(arg5)].field_0 + -arg2 - 1
                        mem[_26697 + 64] = (320 * _27139) + 128
                        _38187 = mem[_25915]
                        mem[_26697 + (320 * _27139) + 128] = mem[_25915]
                        mem[_26697 + (320 * _27139) + 160 len ceil32(_38187)] = mem[_25915 + 32 len ceil32(_38187)]
                        var47001 = ceil32(_38187)
                        if ceil32(_38187) > _38187:
                            mem[_26697 + (320 * _27139) + _38187 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_38187) + _26697 + (320 * _27139) + -mem[64] + 160
                    mem[64] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 512
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 192] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 224] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 256] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 288] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 320] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 352] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 384] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 416] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 448] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 480] = 0
                    mem[var34001] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 192
                    s = var34001
                    idx = var34002
                    while idx - 1:
                        mem[64] = mem[64] + 320
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 192] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 224] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 256] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 288] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 320] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 352] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 384] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 416] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 448] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 480] = 0
                        mem[s + 32] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 192
                        s = s + 32
                        idx = idx - 1
                        continue 
                    idx = 0
                    while idx < arg2:
                        if stor13[address(arg5)].field_0 - 1 < idx:
                            revert with 0, 17
                        if stor13[address(arg5)].field_0 + -idx - 1 >= mem[(32 * stor11.length) + 128]:
                            revert with 0, 50
                        mem[0] = mem[(32 * stor13[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + 160]
                        mem[32] = 12
                        _50407 = sha3(mem[(32 * stor13[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + 160], 12)
                        _50408 = mem[64]
                        mem[64] = mem[64] + 320
                        mem[_50408] = stor12[mem[(32 * stor13[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + 160]].field_0
                        mem[_50408 + 32] = stor1[_50407]
                        mem[_50408 + 64] = stor2[_50407]
                        mem[_50408 + 96] = stor3[_50407]
                        mem[_50408 + 128] = stor4[_50407]
                        mem[_50408 + 160] = stor5[_50407]
                        mem[_50408 + 192] = stor6[_50407]
                        mem[_50408 + 224] = stor7[_50407].field_0
                        mem[_50408 + 256] = bool(stor7[_50407].field_160)
                        mem[_50408 + 288] = stor8[_50407]
                        if idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                            revert with 0, 50
                        mem[(32 * idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192] = _50408
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if stor13[address(arg5)].field_0 - 1 < arg2:
                        _49268 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_49268] = 4
                        mem[_49268 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                        _49652 = mem[64]
                        mem[mem[64]] = 96
                        _50404 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                        mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                        idx = 0
                        s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192
                        t = mem[64] + 128
                        while idx < _50404:
                            _58710 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_58710 + 32]
                            mem[t + 64] = mem[_58710 + 64]
                            mem[t + 96] = mem[_58710 + 96]
                            mem[t + 128] = mem[_58710 + 128]
                            mem[t + 160] = mem[_58710 + 172 len 20]
                            mem[t + 192] = mem[_58710 + 192]
                            mem[t + 224] = mem[_58710 + 236 len 20]
                            mem[t + 256] = bool(mem[_58710 + 256])
                            mem[t + 288] = mem[_58710 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_49652 + 32] = 0
                        mem[_49652 + 64] = (320 * _50404) + 128
                        _60012 = mem[_49268]
                        mem[_49652 + (320 * _50404) + 128] = mem[_49268]
                        mem[_49652 + (320 * _50404) + 160 len ceil32(_60012)] = mem[_49268 + 32 len ceil32(_60012)]
                        var51001 = ceil32(_60012)
                        if ceil32(_60012) > _60012:
                            mem[_49652 + (320 * _50404) + _60012 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_60012) + _49652 + (320 * _50404) + -mem[64] + 160
                    _50405 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_50405] = 7
                    mem[_50405 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                    _51192 = mem[64]
                    mem[mem[64]] = 96
                    _51673 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                    mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                    idx = 0
                    s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192
                    t = mem[64] + 128
                    while idx < _51673:
                        _58717 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_58717 + 32]
                        mem[t + 64] = mem[_58717 + 64]
                        mem[t + 96] = mem[_58717 + 96]
                        mem[t + 128] = mem[_58717 + 128]
                        mem[t + 160] = mem[_58717 + 172 len 20]
                        mem[t + 192] = mem[_58717 + 192]
                        mem[t + 224] = mem[_58717 + 236 len 20]
                        mem[t + 256] = bool(mem[_58717 + 256])
                        mem[t + 288] = mem[_58717 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_51192 + 32] = stor13[address(arg5)].field_0 + -arg2 - 1
                    mem[_51192 + 64] = (320 * _51673) + 128
                    _60013 = mem[_50405]
                    mem[_51192 + (320 * _51673) + 128] = mem[_50405]
                    mem[_51192 + (320 * _51673) + 160 len ceil32(_60013)] = mem[_50405 + 32 len ceil32(_60013)]
                    var54001 = ceil32(_60013)
                    if ceil32(_60013) > _60013:
                        mem[_51192 + (320 * _51673) + _60013 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_60013) + _51192 + (320 * _51673) + -mem[64] + 160
                if 1 > !(stor13[address(arg5)].field_0 - 1):
                    revert with 0, 17
                if stor13[address(arg5)].field_0 > test266151307():
                    revert with 0, 65
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160] = stor13[address(arg5)].field_0
                mem[64] = (32 * stor11.length) + (64 * stor13[address(arg5)].field_0) + 192
                if not stor13[address(arg5)].field_0:
                    idx = 0
                    while idx < stor13[address(arg5)].field_0:
                        if stor13[address(arg5)].field_0 - 1 < idx:
                            revert with 0, 17
                        if stor13[address(arg5)].field_0 + -idx - 1 >= mem[(32 * stor11.length) + 128]:
                            revert with 0, 50
                        mem[0] = mem[(32 * stor13[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + 160]
                        mem[32] = 12
                        _25923 = sha3(mem[(32 * stor13[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + 160], 12)
                        _25924 = mem[64]
                        mem[64] = mem[64] + 320
                        mem[_25924] = stor12[mem[(32 * stor13[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + 160]].field_0
                        mem[_25924 + 32] = stor1[_25923]
                        mem[_25924 + 64] = stor2[_25923]
                        mem[_25924 + 96] = stor3[_25923]
                        mem[_25924 + 128] = stor4[_25923]
                        mem[_25924 + 160] = stor5[_25923]
                        mem[_25924 + 192] = stor6[_25923]
                        mem[_25924 + 224] = stor7[_25923].field_0
                        mem[_25924 + 256] = bool(stor7[_25923].field_160)
                        mem[_25924 + 288] = stor8[_25923]
                        if idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                            revert with 0, 50
                        mem[(32 * idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192] = _25924
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if stor13[address(arg5)].field_0 - 1 < stor13[address(arg5)].field_0:
                        _24769 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_24769] = 4
                        mem[_24769 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                        _25130 = mem[64]
                        mem[mem[64]] = 96
                        _25920 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                        mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                        idx = 0
                        s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192
                        t = mem[64] + 128
                        while idx < _25920:
                            _37341 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_37341 + 32]
                            mem[t + 64] = mem[_37341 + 64]
                            mem[t + 96] = mem[_37341 + 96]
                            mem[t + 128] = mem[_37341 + 128]
                            mem[t + 160] = mem[_37341 + 172 len 20]
                            mem[t + 192] = mem[_37341 + 192]
                            mem[t + 224] = mem[_37341 + 236 len 20]
                            mem[t + 256] = bool(mem[_37341 + 256])
                            mem[t + 288] = mem[_37341 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_25130 + 32] = 0
                        mem[_25130 + 64] = (320 * _25920) + 128
                        _38188 = mem[_24769]
                        mem[_25130 + (320 * _25920) + 128] = mem[_24769]
                        mem[_25130 + (320 * _25920) + 160 len ceil32(_38188)] = mem[_24769 + 32 len ceil32(_38188)]
                        var48001 = ceil32(_38188)
                        if ceil32(_38188) > _38188:
                            mem[_25130 + (320 * _25920) + _38188 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_38188) + _25130 + (320 * _25920) + -mem[64] + 160
                    _25921 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_25921] = 7
                    mem[_25921 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                    _26706 = mem[64]
                    mem[mem[64]] = 96
                    _27141 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                    mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                    idx = 0
                    s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192
                    t = mem[64] + 128
                    while idx < _27141:
                        _37348 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_37348 + 32]
                        mem[t + 64] = mem[_37348 + 64]
                        mem[t + 96] = mem[_37348 + 96]
                        mem[t + 128] = mem[_37348 + 128]
                        mem[t + 160] = mem[_37348 + 172 len 20]
                        mem[t + 192] = mem[_37348 + 192]
                        mem[t + 224] = mem[_37348 + 236 len 20]
                        mem[t + 256] = bool(mem[_37348 + 256])
                        mem[t + 288] = mem[_37348 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_26706 + 32] = -1
                    mem[_26706 + 64] = (320 * _27141) + 128
                    _38189 = mem[_25921]
                    mem[_26706 + (320 * _27141) + 128] = mem[_25921]
                    mem[_26706 + (320 * _27141) + 160 len ceil32(_38189)] = mem[_25921 + 32 len ceil32(_38189)]
                    var51001 = ceil32(_38189)
                    if ceil32(_38189) > _38189:
                        mem[_26706 + (320 * _27141) + _38189 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_38189) + _26706 + (320 * _27141) + -mem[64] + 160
                mem[64] = (32 * stor11.length) + (64 * stor13[address(arg5)].field_0) + 512
                mem[(32 * stor11.length) + (64 * stor13[address(arg5)].field_0) + 192] = 0
                mem[(32 * stor11.length) + (64 * stor13[address(arg5)].field_0) + 224] = 0
                mem[(32 * stor11.length) + (64 * stor13[address(arg5)].field_0) + 256] = 0
                mem[(32 * stor11.length) + (64 * stor13[address(arg5)].field_0) + 288] = 0
                mem[(32 * stor11.length) + (64 * stor13[address(arg5)].field_0) + 320] = 0
                mem[(32 * stor11.length) + (64 * stor13[address(arg5)].field_0) + 352] = 0
                mem[(32 * stor11.length) + (64 * stor13[address(arg5)].field_0) + 384] = 0
                mem[(32 * stor11.length) + (64 * stor13[address(arg5)].field_0) + 416] = 0
                mem[(32 * stor11.length) + (64 * stor13[address(arg5)].field_0) + 448] = 0
                mem[(32 * stor11.length) + (64 * stor13[address(arg5)].field_0) + 480] = 0
                mem[var38001] = (32 * stor11.length) + (64 * stor13[address(arg5)].field_0) + 192
                s = var38001
                idx = var38002
                while idx - 1:
                    mem[64] = mem[64] + 320
                    mem[(32 * stor11.length) + (64 * stor13[address(arg5)].field_0) + 192] = 0
                    mem[(32 * stor11.length) + (64 * stor13[address(arg5)].field_0) + 224] = 0
                    mem[(32 * stor11.length) + (64 * stor13[address(arg5)].field_0) + 256] = 0
                    mem[(32 * stor11.length) + (64 * stor13[address(arg5)].field_0) + 288] = 0
                    mem[(32 * stor11.length) + (64 * stor13[address(arg5)].field_0) + 320] = 0
                    mem[(32 * stor11.length) + (64 * stor13[address(arg5)].field_0) + 352] = 0
                    mem[(32 * stor11.length) + (64 * stor13[address(arg5)].field_0) + 384] = 0
                    mem[(32 * stor11.length) + (64 * stor13[address(arg5)].field_0) + 416] = 0
                    mem[(32 * stor11.length) + (64 * stor13[address(arg5)].field_0) + 448] = 0
                    mem[(32 * stor11.length) + (64 * stor13[address(arg5)].field_0) + 480] = 0
                    mem[s + 32] = (32 * stor11.length) + (64 * stor13[address(arg5)].field_0) + 192
                    s = s + 32
                    idx = idx - 1
                    continue 
                idx = 0
                while idx < stor13[address(arg5)].field_0:
                    if stor13[address(arg5)].field_0 - 1 < idx:
                        revert with 0, 17
                    if stor13[address(arg5)].field_0 + -idx - 1 >= mem[(32 * stor11.length) + 128]:
                        revert with 0, 50
                    mem[0] = mem[(32 * stor13[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + 160]
                    mem[32] = 12
                    _50415 = sha3(mem[(32 * stor13[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + 160], 12)
                    _50416 = mem[64]
                    mem[64] = mem[64] + 320
                    mem[_50416] = stor12[mem[(32 * stor13[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + 160]].field_0
                    mem[_50416 + 32] = stor1[_50415]
                    mem[_50416 + 64] = stor2[_50415]
                    mem[_50416 + 96] = stor3[_50415]
                    mem[_50416 + 128] = stor4[_50415]
                    mem[_50416 + 160] = stor5[_50415]
                    mem[_50416 + 192] = stor6[_50415]
                    mem[_50416 + 224] = stor7[_50415].field_0
                    mem[_50416 + 256] = bool(stor7[_50415].field_160)
                    mem[_50416 + 288] = stor8[_50415]
                    if idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                        revert with 0, 50
                    mem[(32 * idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192] = _50416
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
                if stor13[address(arg5)].field_0 - 1 < stor13[address(arg5)].field_0:
                    _49269 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_49269] = 4
                    mem[_49269 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                    _49656 = mem[64]
                    mem[mem[64]] = 96
                    _50412 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                    mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                    idx = 0
                    s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192
                    t = mem[64] + 128
                    while idx < _50412:
                        _58724 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_58724 + 32]
                        mem[t + 64] = mem[_58724 + 64]
                        mem[t + 96] = mem[_58724 + 96]
                        mem[t + 128] = mem[_58724 + 128]
                        mem[t + 160] = mem[_58724 + 172 len 20]
                        mem[t + 192] = mem[_58724 + 192]
                        mem[t + 224] = mem[_58724 + 236 len 20]
                        mem[t + 256] = bool(mem[_58724 + 256])
                        mem[t + 288] = mem[_58724 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_49656 + 32] = 0
                    mem[_49656 + 64] = (320 * _50412) + 128
                    _60014 = mem[_49269]
                    mem[_49656 + (320 * _50412) + 128] = mem[_49269]
                    mem[_49656 + (320 * _50412) + 160 len ceil32(_60014)] = mem[_49269 + 32 len ceil32(_60014)]
                    var55001 = ceil32(_60014)
                    if ceil32(_60014) > _60014:
                        mem[_49656 + (320 * _50412) + _60014 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_60014) + _49656 + (320 * _50412) + -mem[64] + 160
                _50413 = mem[64]
                mem[64] = mem[64] + 64
                mem[_50413] = 7
                mem[_50413 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                _51200 = mem[64]
                mem[mem[64]] = 96
                _51675 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                idx = 0
                s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192
                t = mem[64] + 128
                while idx < _51675:
                    _58731 = mem[s]
                    mem[t] = mem[mem[s]]
                    mem[t + 32] = mem[_58731 + 32]
                    mem[t + 64] = mem[_58731 + 64]
                    mem[t + 96] = mem[_58731 + 96]
                    mem[t + 128] = mem[_58731 + 128]
                    mem[t + 160] = mem[_58731 + 172 len 20]
                    mem[t + 192] = mem[_58731 + 192]
                    mem[t + 224] = mem[_58731 + 236 len 20]
                    mem[t + 256] = bool(mem[_58731 + 256])
                    mem[t + 288] = mem[_58731 + 288]
                    idx = idx + 1
                    s = s + 32
                    t = t + 320
                    continue 
                mem[_51200 + 32] = -1
                mem[_51200 + 64] = (320 * _51675) + 128
                _60015 = mem[_50413]
                mem[_51200 + (320 * _51675) + 128] = mem[_50413]
                mem[_51200 + (320 * _51675) + 160 len ceil32(_60015)] = mem[_50413 + 32 len ceil32(_60015)]
                var58001 = ceil32(_60015)
                if ceil32(_60015) > _60015:
                    mem[_51200 + (320 * _51675) + _60015 + 160] = 0
                return memory
                  from mem[64]
                   len ceil32(_60015) + _51200 + (320 * _51675) + -mem[64] + 160
            if stor13[address(arg5)].field_0 < stor13[address(arg5)].field_0 - 1:
                revert with 0, 17
            if arg2 > 1:
                if stor13[address(arg5)].field_0 < stor13[address(arg5)].field_0 - 1:
                    revert with 0, 17
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160] = 1
                mem[64] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 544
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 224] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 256] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 288] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 320] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 352] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 384] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 416] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 448] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 480] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 512] = 0
                mem[var41001] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 224
                s = var41001
                idx = var41002
                while idx - 1:
                    mem[64] = mem[64] + 320
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 224] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 256] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 288] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 320] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 352] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 384] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 416] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 448] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 480] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 512] = 0
                    mem[s + 32] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 224
                    s = s + 32
                    idx = idx - 1
                    continue 
                idx = 0
                while idx < 1:
                    if stor13[address(arg5)].field_0 - 1 > !idx:
                        revert with 0, 17
                    if stor13[address(arg5)].field_0 + idx - 1 >= mem[(32 * stor11.length) + 128]:
                        revert with 0, 50
                    mem[0] = mem[(32 * stor13[address(arg5)].field_0 + idx - 1) + (32 * stor11.length) + 160]
                    mem[32] = 12
                    _50427 = sha3(mem[(32 * stor13[address(arg5)].field_0 + idx - 1) + (32 * stor11.length) + 160], 12)
                    _50428 = mem[64]
                    mem[64] = mem[64] + 320
                    mem[_50428] = stor12[mem[(32 * stor13[address(arg5)].field_0 + idx - 1) + (32 * stor11.length) + 160]].field_0
                    mem[_50428 + 32] = stor1[_50427]
                    mem[_50428 + 64] = stor2[_50427]
                    mem[_50428 + 96] = stor3[_50427]
                    mem[_50428 + 128] = stor4[_50427]
                    mem[_50428 + 160] = stor5[_50427]
                    mem[_50428 + 192] = stor6[_50427]
                    mem[_50428 + 224] = stor7[_50427].field_0
                    mem[_50428 + 256] = bool(stor7[_50427].field_160)
                    mem[_50428 + 288] = stor8[_50427]
                    if idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                        revert with 0, 50
                    mem[(32 * idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192] = _50428
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
                if stor13[address(arg5)].field_0 - 1 > !1:
                    revert with 0, 17
                if stor13[address(arg5)].field_0 - 1 > !1:
                    revert with 0, 17
                if stor13[address(arg5)].field_0 < mem[(32 * stor11.length) + 128]:
                    _51678 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_51678] = 7
                    mem[_51678 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                    _52419 = mem[64]
                    mem[mem[64]] = 96
                    _53147 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                    mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                    idx = 0
                    s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192
                    t = mem[64] + 128
                    while idx < _53147:
                        _58752 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_58752 + 32]
                        mem[t + 64] = mem[_58752 + 64]
                        mem[t + 96] = mem[_58752 + 96]
                        mem[t + 128] = mem[_58752 + 128]
                        mem[t + 160] = mem[_58752 + 172 len 20]
                        mem[t + 192] = mem[_58752 + 192]
                        mem[t + 224] = mem[_58752 + 236 len 20]
                        mem[t + 256] = bool(mem[_58752 + 256])
                        mem[t + 288] = mem[_58752 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_52419 + 32] = stor13[address(arg5)].field_0
                    mem[_52419 + 64] = (320 * _53147) + 128
                    _60018 = mem[_51678]
                    mem[_52419 + (320 * _53147) + 128] = mem[_51678]
                    mem[_52419 + (320 * _53147) + 160 len ceil32(_60018)] = mem[_51678 + 32 len ceil32(_60018)]
                    var64001 = ceil32(_60018)
                    if ceil32(_60018) > _60018:
                        mem[_52419 + (320 * _53147) + _60018 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_60018) + _52419 + (320 * _53147) + -mem[64] + 160
                _51679 = mem[64]
                mem[64] = mem[64] + 64
                mem[_51679] = 4
                mem[_51679 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                _52420 = mem[64]
                mem[mem[64]] = 96
                _53148 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                idx = 0
                s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192
                t = mem[64] + 128
                while idx < _53148:
                    _58759 = mem[s]
                    mem[t] = mem[mem[s]]
                    mem[t + 32] = mem[_58759 + 32]
                    mem[t + 64] = mem[_58759 + 64]
                    mem[t + 96] = mem[_58759 + 96]
                    mem[t + 128] = mem[_58759 + 128]
                    mem[t + 160] = mem[_58759 + 172 len 20]
                    mem[t + 192] = mem[_58759 + 192]
                    mem[t + 224] = mem[_58759 + 236 len 20]
                    mem[t + 256] = bool(mem[_58759 + 256])
                    mem[t + 288] = mem[_58759 + 288]
                    idx = idx + 1
                    s = s + 32
                    t = t + 320
                    continue 
                mem[_52420 + 32] = stor13[address(arg5)].field_0
                mem[_52420 + 64] = (320 * _53148) + 128
                _60019 = mem[_51679]
                mem[_52420 + (320 * _53148) + 128] = mem[_51679]
                mem[_52420 + (320 * _53148) + 160 len ceil32(_60019)] = mem[_51679 + 32 len ceil32(_60019)]
                var64001 = ceil32(_60019)
                if ceil32(_60019) > _60019:
                    mem[_52420 + (320 * _53148) + _60019 + 160] = 0
                return memory
                  from mem[64]
                   len ceil32(_60019) + _52420 + (320 * _53148) + -mem[64] + 160
            if arg2 > test266151307():
                revert with 0, 65
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160] = arg2
            mem[64] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 192
            if not arg2:
                idx = 0
                while idx < arg2:
                    if stor13[address(arg5)].field_0 - 1 > !idx:
                        revert with 0, 17
                    if stor13[address(arg5)].field_0 + idx - 1 >= mem[(32 * stor11.length) + 128]:
                        revert with 0, 50
                    mem[0] = mem[(32 * stor13[address(arg5)].field_0 + idx - 1) + (32 * stor11.length) + 160]
                    mem[32] = 12
                    _25927 = sha3(mem[(32 * stor13[address(arg5)].field_0 + idx - 1) + (32 * stor11.length) + 160], 12)
                    _25928 = mem[64]
                    mem[64] = mem[64] + 320
                    mem[_25928] = stor12[mem[(32 * stor13[address(arg5)].field_0 + idx - 1) + (32 * stor11.length) + 160]].field_0
                    mem[_25928 + 32] = stor1[_25927]
                    mem[_25928 + 64] = stor2[_25927]
                    mem[_25928 + 96] = stor3[_25927]
                    mem[_25928 + 128] = stor4[_25927]
                    mem[_25928 + 160] = stor5[_25927]
                    mem[_25928 + 192] = stor6[_25927]
                    mem[_25928 + 224] = stor7[_25927].field_0
                    mem[_25928 + 256] = bool(stor7[_25927].field_160)
                    mem[_25928 + 288] = stor8[_25927]
                    if idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                        revert with 0, 50
                    mem[(32 * idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192] = _25928
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
                if stor13[address(arg5)].field_0 - 1 > !arg2:
                    revert with 0, 17
                if stor13[address(arg5)].field_0 - 1 > !arg2:
                    revert with 0, 17
                if stor13[address(arg5)].field_0 + arg2 - 1 < mem[(32 * stor11.length) + 128]:
                    _27142 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_27142] = 7
                    mem[_27142 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                    _28404 = mem[64]
                    mem[mem[64]] = 96
                    _29052 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                    mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                    idx = 0
                    s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192
                    t = mem[64] + 128
                    while idx < _29052:
                        _37355 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_37355 + 32]
                        mem[t + 64] = mem[_37355 + 64]
                        mem[t + 96] = mem[_37355 + 96]
                        mem[t + 128] = mem[_37355 + 128]
                        mem[t + 160] = mem[_37355 + 172 len 20]
                        mem[t + 192] = mem[_37355 + 192]
                        mem[t + 224] = mem[_37355 + 236 len 20]
                        mem[t + 256] = bool(mem[_37355 + 256])
                        mem[t + 288] = mem[_37355 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_28404 + 32] = stor13[address(arg5)].field_0 + arg2 - 1
                    mem[_28404 + 64] = (320 * _29052) + 128
                    _38190 = mem[_27142]
                    mem[_28404 + (320 * _29052) + 128] = mem[_27142]
                    mem[_28404 + (320 * _29052) + 160 len ceil32(_38190)] = mem[_27142 + 32 len ceil32(_38190)]
                    var53001 = ceil32(_38190)
                    if ceil32(_38190) > _38190:
                        mem[_28404 + (320 * _29052) + _38190 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_38190) + _28404 + (320 * _29052) + -mem[64] + 160
                _27143 = mem[64]
                mem[64] = mem[64] + 64
                mem[_27143] = 4
                mem[_27143 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                _28405 = mem[64]
                mem[mem[64]] = 96
                _29053 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                idx = 0
                s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192
                t = mem[64] + 128
                while idx < _29053:
                    _37362 = mem[s]
                    mem[t] = mem[mem[s]]
                    mem[t + 32] = mem[_37362 + 32]
                    mem[t + 64] = mem[_37362 + 64]
                    mem[t + 96] = mem[_37362 + 96]
                    mem[t + 128] = mem[_37362 + 128]
                    mem[t + 160] = mem[_37362 + 172 len 20]
                    mem[t + 192] = mem[_37362 + 192]
                    mem[t + 224] = mem[_37362 + 236 len 20]
                    mem[t + 256] = bool(mem[_37362 + 256])
                    mem[t + 288] = mem[_37362 + 288]
                    idx = idx + 1
                    s = s + 32
                    t = t + 320
                    continue 
                mem[_28405 + 32] = stor13[address(arg5)].field_0 + arg2 - 1
                mem[_28405 + 64] = (320 * _29053) + 128
                _38191 = mem[_27143]
                mem[_28405 + (320 * _29053) + 128] = mem[_27143]
                mem[_28405 + (320 * _29053) + 160 len ceil32(_38191)] = mem[_27143 + 32 len ceil32(_38191)]
                var53001 = ceil32(_38191)
                if ceil32(_38191) > _38191:
                    mem[_28405 + (320 * _29053) + _38191 + 160] = 0
                return memory
                  from mem[64]
                   len ceil32(_38191) + _28405 + (320 * _29053) + -mem[64] + 160
            mem[64] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 512
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 192] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 224] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 256] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 288] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 320] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 352] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 384] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 416] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 448] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 480] = 0
            mem[var37001] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 192
            s = var37001
            idx = var37002
            while idx - 1:
                mem[64] = mem[64] + 320
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 192] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 224] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 256] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 288] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 320] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 352] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 384] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 416] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 448] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 480] = 0
                mem[s + 32] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 192
                s = s + 32
                idx = idx - 1
                continue 
            idx = 0
            while idx < arg2:
                if stor13[address(arg5)].field_0 - 1 > !idx:
                    revert with 0, 17
                if stor13[address(arg5)].field_0 + idx - 1 >= mem[(32 * stor11.length) + 128]:
                    revert with 0, 50
                mem[0] = mem[(32 * stor13[address(arg5)].field_0 + idx - 1) + (32 * stor11.length) + 160]
                mem[32] = 12
                _50421 = sha3(mem[(32 * stor13[address(arg5)].field_0 + idx - 1) + (32 * stor11.length) + 160], 12)
                _50422 = mem[64]
                mem[64] = mem[64] + 320
                mem[_50422] = stor12[mem[(32 * stor13[address(arg5)].field_0 + idx - 1) + (32 * stor11.length) + 160]].field_0
                mem[_50422 + 32] = stor1[_50421]
                mem[_50422 + 64] = stor2[_50421]
                mem[_50422 + 96] = stor3[_50421]
                mem[_50422 + 128] = stor4[_50421]
                mem[_50422 + 160] = stor5[_50421]
                mem[_50422 + 192] = stor6[_50421]
                mem[_50422 + 224] = stor7[_50421].field_0
                mem[_50422 + 256] = bool(stor7[_50421].field_160)
                mem[_50422 + 288] = stor8[_50421]
                if idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                    revert with 0, 50
                mem[(32 * idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192] = _50422
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
            if stor13[address(arg5)].field_0 - 1 > !arg2:
                revert with 0, 17
            if stor13[address(arg5)].field_0 - 1 > !arg2:
                revert with 0, 17
            if stor13[address(arg5)].field_0 + arg2 - 1 < mem[(32 * stor11.length) + 128]:
                _51676 = mem[64]
                mem[64] = mem[64] + 64
                mem[_51676] = 7
                mem[_51676 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                _52417 = mem[64]
                mem[mem[64]] = 96
                _53145 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                idx = 0
                s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192
                t = mem[64] + 128
                while idx < _53145:
                    _58738 = mem[s]
                    mem[t] = mem[mem[s]]
                    mem[t + 32] = mem[_58738 + 32]
                    mem[t + 64] = mem[_58738 + 64]
                    mem[t + 96] = mem[_58738 + 96]
                    mem[t + 128] = mem[_58738 + 128]
                    mem[t + 160] = mem[_58738 + 172 len 20]
                    mem[t + 192] = mem[_58738 + 192]
                    mem[t + 224] = mem[_58738 + 236 len 20]
                    mem[t + 256] = bool(mem[_58738 + 256])
                    mem[t + 288] = mem[_58738 + 288]
                    idx = idx + 1
                    s = s + 32
                    t = t + 320
                    continue 
                mem[_52417 + 32] = stor13[address(arg5)].field_0 + arg2 - 1
                mem[_52417 + 64] = (320 * _53145) + 128
                _60016 = mem[_51676]
                mem[_52417 + (320 * _53145) + 128] = mem[_51676]
                mem[_52417 + (320 * _53145) + 160 len ceil32(_60016)] = mem[_51676 + 32 len ceil32(_60016)]
                var60001 = ceil32(_60016)
                if ceil32(_60016) > _60016:
                    mem[_52417 + (320 * _53145) + _60016 + 160] = 0
                return memory
                  from mem[64]
                   len ceil32(_60016) + _52417 + (320 * _53145) + -mem[64] + 160
            _51677 = mem[64]
            mem[64] = mem[64] + 64
            mem[_51677] = 4
            mem[_51677 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
            _52418 = mem[64]
            mem[mem[64]] = 96
            _53146 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
            mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
            idx = 0
            s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192
            t = mem[64] + 128
            while idx < _53146:
                _58745 = mem[s]
                mem[t] = mem[mem[s]]
                mem[t + 32] = mem[_58745 + 32]
                mem[t + 64] = mem[_58745 + 64]
                mem[t + 96] = mem[_58745 + 96]
                mem[t + 128] = mem[_58745 + 128]
                mem[t + 160] = mem[_58745 + 172 len 20]
                mem[t + 192] = mem[_58745 + 192]
                mem[t + 224] = mem[_58745 + 236 len 20]
                mem[t + 256] = bool(mem[_58745 + 256])
                mem[t + 288] = mem[_58745 + 288]
                idx = idx + 1
                s = s + 32
                t = t + 320
                continue 
            mem[_52418 + 32] = stor13[address(arg5)].field_0 + arg2 - 1
            mem[_52418 + 64] = (320 * _53146) + 128
            _60017 = mem[_51677]
            mem[_52418 + (320 * _53146) + 128] = mem[_51677]
            mem[_52418 + (320 * _53146) + 160 len ceil32(_60017)] = mem[_51677 + 32 len ceil32(_60017)]
            var60001 = ceil32(_60017)
            if ceil32(_60017) > _60017:
                mem[_52418 + (320 * _53146) + _60017 + 160] = 0
            return memory
              from mem[64]
               len ceil32(_60017) + _52418 + (320 * _53146) + -mem[64] + 160
        mem[0] = address(arg5)
        mem[32] = 15
        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160] = stor15[address(arg5)].field_0
        if not stor15[address(arg5)].field_0:
            if not stor15[address(arg5)].field_0:
                mem[64] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 288
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224] = 4
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 256] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 288] = 96
                _13829 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 384] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                idx = 0
                s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                t = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 416
                while idx < mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]:
                    _24621 = mem[s]
                    mem[t] = mem[mem[s]]
                    mem[t + 32] = mem[_24621 + 32]
                    mem[t + 64] = mem[_24621 + 64]
                    mem[t + 96] = mem[_24621 + 96]
                    mem[t + 128] = mem[_24621 + 128]
                    mem[t + 160] = mem[_24621 + 172 len 20]
                    mem[t + 192] = mem[_24621 + 192]
                    mem[t + 224] = mem[_24621 + 236 len 20]
                    mem[t + 256] = bool(mem[_24621 + 256])
                    mem[t + 288] = mem[_24621 + 288]
                    idx = idx + 1
                    s = s + 32
                    t = t + 320
                    continue 
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 320] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 352] = (320 * _13829) + 128
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (320 * _13829) + 416] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224]
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (320 * _13829) + 448 len ceil32(mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224])] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 256 len ceil32(mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224])]
                var34001 = ceil32(mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224])
                if ceil32(mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224]) > mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224]:
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (320 * _13829) + mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224] + 448] = 0
                return memory
                  from mem[64]
                   len ceil32(mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224]) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (320 * _13829) + -mem[64] + 448
            if arg1 < stor15[address(arg5)].field_0:
                if arg3:
                    if arg2 <= arg1:
                        if arg2 > test266151307():
                            revert with 0, 65
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192] = arg2
                        mem[64] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224
                        if not arg2:
                            idx = 0
                            while idx < arg2:
                                if arg1 < idx:
                                    revert with 0, 17
                                if arg1 - idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                                    revert with 0, 50
                                mem[0] = mem[(32 * arg1 - idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]
                                mem[32] = 12
                                _25938 = sha3(mem[(32 * arg1 - idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192], 12)
                                _25939 = mem[64]
                                mem[64] = mem[64] + 320
                                mem[_25939] = stor12[mem[(32 * arg1 - idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]].field_0
                                mem[_25939 + 32] = stor1[_25938]
                                mem[_25939 + 64] = stor2[_25938]
                                mem[_25939 + 96] = stor3[_25938]
                                mem[_25939 + 128] = stor4[_25938]
                                mem[_25939 + 160] = stor5[_25938]
                                mem[_25939 + 192] = stor6[_25938]
                                mem[_25939 + 224] = stor7[_25938].field_0
                                mem[_25939 + 256] = bool(stor7[_25938].field_160)
                                mem[_25939 + 288] = stor8[_25938]
                                if idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]:
                                    revert with 0, 50
                                mem[(32 * idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224] = _25939
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                continue 
                            if arg1 < arg2:
                                _24771 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_24771] = 4
                                mem[_24771 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                                _25135 = mem[64]
                                mem[mem[64]] = 96
                                _25935 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                                mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                                idx = 0
                                s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                                t = mem[64] + 128
                                while idx < _25935:
                                    _37384 = mem[s]
                                    mem[t] = mem[mem[s]]
                                    mem[t + 32] = mem[_37384 + 32]
                                    mem[t + 64] = mem[_37384 + 64]
                                    mem[t + 96] = mem[_37384 + 96]
                                    mem[t + 128] = mem[_37384 + 128]
                                    mem[t + 160] = mem[_37384 + 172 len 20]
                                    mem[t + 192] = mem[_37384 + 192]
                                    mem[t + 224] = mem[_37384 + 236 len 20]
                                    mem[t + 256] = bool(mem[_37384 + 256])
                                    mem[t + 288] = mem[_37384 + 288]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 320
                                    continue 
                                mem[_25135 + 32] = 0
                                mem[_25135 + 64] = (320 * _25935) + 128
                                _38194 = mem[_24771]
                                mem[_25135 + (320 * _25935) + 128] = mem[_24771]
                                mem[_25135 + (320 * _25935) + 160 len ceil32(_38194)] = mem[_24771 + 32 len ceil32(_38194)]
                                var42001 = ceil32(_38194)
                                if ceil32(_38194) > _38194:
                                    mem[_25135 + (320 * _25935) + _38194 + 160] = 0
                                return memory
                                  from mem[64]
                                   len ceil32(_38194) + _25135 + (320 * _25935) + -mem[64] + 160
                            _25936 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_25936] = 7
                            mem[_25936 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                            _26717 = mem[64]
                            mem[mem[64]] = 96
                            _27148 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                            mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                            idx = 0
                            s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                            t = mem[64] + 128
                            while idx < _27148:
                                _37391 = mem[s]
                                mem[t] = mem[mem[s]]
                                mem[t + 32] = mem[_37391 + 32]
                                mem[t + 64] = mem[_37391 + 64]
                                mem[t + 96] = mem[_37391 + 96]
                                mem[t + 128] = mem[_37391 + 128]
                                mem[t + 160] = mem[_37391 + 172 len 20]
                                mem[t + 192] = mem[_37391 + 192]
                                mem[t + 224] = mem[_37391 + 236 len 20]
                                mem[t + 256] = bool(mem[_37391 + 256])
                                mem[t + 288] = mem[_37391 + 288]
                                idx = idx + 1
                                s = s + 32
                                t = t + 320
                                continue 
                            mem[_26717 + 32] = arg1 - arg2
                            mem[_26717 + 64] = (320 * _27148) + 128
                            _38195 = mem[_25936]
                            mem[_26717 + (320 * _27148) + 128] = mem[_25936]
                            mem[_26717 + (320 * _27148) + 160 len ceil32(_38195)] = mem[_25936 + 32 len ceil32(_38195)]
                            var45001 = ceil32(_38195)
                            if ceil32(_38195) > _38195:
                                mem[_26717 + (320 * _27148) + _38195 + 160] = 0
                            return memory
                              from mem[64]
                               len ceil32(_38195) + _26717 + (320 * _27148) + -mem[64] + 160
                        mem[64] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 544
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 256] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 288] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 320] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 352] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 384] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 416] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 448] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 480] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 512] = 0
                        mem[var32001] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224
                        s = var32001
                        idx = var32002
                        while idx - 1:
                            mem[64] = mem[64] + 320
                            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224] = 0
                            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 256] = 0
                            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 288] = 0
                            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 320] = 0
                            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 352] = 0
                            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 384] = 0
                            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 416] = 0
                            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 448] = 0
                            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 480] = 0
                            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 512] = 0
                            mem[s + 32] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224
                            s = s + 32
                            idx = idx - 1
                            continue 
                        idx = 0
                        while idx < arg2:
                            if arg1 < idx:
                                revert with 0, 17
                            if arg1 - idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                                revert with 0, 50
                            mem[0] = mem[(32 * arg1 - idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]
                            mem[32] = 12
                            _50435 = sha3(mem[(32 * arg1 - idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192], 12)
                            _50436 = mem[64]
                            mem[64] = mem[64] + 320
                            mem[_50436] = stor12[mem[(32 * arg1 - idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]].field_0
                            mem[_50436 + 32] = stor1[_50435]
                            mem[_50436 + 64] = stor2[_50435]
                            mem[_50436 + 96] = stor3[_50435]
                            mem[_50436 + 128] = stor4[_50435]
                            mem[_50436 + 160] = stor5[_50435]
                            mem[_50436 + 192] = stor6[_50435]
                            mem[_50436 + 224] = stor7[_50435].field_0
                            mem[_50436 + 256] = bool(stor7[_50435].field_160)
                            mem[_50436 + 288] = stor8[_50435]
                            if idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]:
                                revert with 0, 50
                            mem[(32 * idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224] = _50436
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            continue 
                        if arg1 < arg2:
                            _49270 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_49270] = 4
                            mem[_49270 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                            _49666 = mem[64]
                            mem[mem[64]] = 96
                            _50432 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                            mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                            idx = 0
                            s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                            t = mem[64] + 128
                            while idx < _50432:
                                _58766 = mem[s]
                                mem[t] = mem[mem[s]]
                                mem[t + 32] = mem[_58766 + 32]
                                mem[t + 64] = mem[_58766 + 64]
                                mem[t + 96] = mem[_58766 + 96]
                                mem[t + 128] = mem[_58766 + 128]
                                mem[t + 160] = mem[_58766 + 172 len 20]
                                mem[t + 192] = mem[_58766 + 192]
                                mem[t + 224] = mem[_58766 + 236 len 20]
                                mem[t + 256] = bool(mem[_58766 + 256])
                                mem[t + 288] = mem[_58766 + 288]
                                idx = idx + 1
                                s = s + 32
                                t = t + 320
                                continue 
                            mem[_49666 + 32] = 0
                            mem[_49666 + 64] = (320 * _50432) + 128
                            _60020 = mem[_49270]
                            mem[_49666 + (320 * _50432) + 128] = mem[_49270]
                            mem[_49666 + (320 * _50432) + 160 len ceil32(_60020)] = mem[_49270 + 32 len ceil32(_60020)]
                            var49001 = ceil32(_60020)
                            if ceil32(_60020) > _60020:
                                mem[_49666 + (320 * _50432) + _60020 + 160] = 0
                            return memory
                              from mem[64]
                               len ceil32(_60020) + _49666 + (320 * _50432) + -mem[64] + 160
                        _50433 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_50433] = 7
                        mem[_50433 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                        _51208 = mem[64]
                        mem[mem[64]] = 96
                        _51681 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                        mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                        idx = 0
                        s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                        t = mem[64] + 128
                        while idx < _51681:
                            _58773 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_58773 + 32]
                            mem[t + 64] = mem[_58773 + 64]
                            mem[t + 96] = mem[_58773 + 96]
                            mem[t + 128] = mem[_58773 + 128]
                            mem[t + 160] = mem[_58773 + 172 len 20]
                            mem[t + 192] = mem[_58773 + 192]
                            mem[t + 224] = mem[_58773 + 236 len 20]
                            mem[t + 256] = bool(mem[_58773 + 256])
                            mem[t + 288] = mem[_58773 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_51208 + 32] = arg1 - arg2
                        mem[_51208 + 64] = (320 * _51681) + 128
                        _60021 = mem[_50433]
                        mem[_51208 + (320 * _51681) + 128] = mem[_50433]
                        mem[_51208 + (320 * _51681) + 160 len ceil32(_60021)] = mem[_50433 + 32 len ceil32(_60021)]
                        var52001 = ceil32(_60021)
                        if ceil32(_60021) > _60021:
                            mem[_51208 + (320 * _51681) + _60021 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_60021) + _51208 + (320 * _51681) + -mem[64] + 160
                    if 1 > !arg1:
                        revert with 0, 17
                    if arg1 + 1 > test266151307():
                        revert with 0, 65
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192] = arg1 + 1
                    mem[64] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 224
                    if not arg1 + 1:
                        idx = 0
                        while idx < arg1 + 1:
                            if arg1 < idx:
                                revert with 0, 17
                            if arg1 - idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                                revert with 0, 50
                            mem[0] = mem[(32 * arg1 - idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]
                            mem[32] = 12
                            _25944 = sha3(mem[(32 * arg1 - idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192], 12)
                            _25945 = mem[64]
                            mem[64] = mem[64] + 320
                            mem[_25945] = stor12[mem[(32 * arg1 - idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]].field_0
                            mem[_25945 + 32] = stor1[_25944]
                            mem[_25945 + 64] = stor2[_25944]
                            mem[_25945 + 96] = stor3[_25944]
                            mem[_25945 + 128] = stor4[_25944]
                            mem[_25945 + 160] = stor5[_25944]
                            mem[_25945 + 192] = stor6[_25944]
                            mem[_25945 + 224] = stor7[_25944].field_0
                            mem[_25945 + 256] = bool(stor7[_25944].field_160)
                            mem[_25945 + 288] = stor8[_25944]
                            if idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]:
                                revert with 0, 50
                            mem[(32 * idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224] = _25945
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            continue 
                        if arg1 < arg1 + 1:
                            _24772 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_24772] = 4
                            mem[_24772 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                            _25137 = mem[64]
                            mem[mem[64]] = 96
                            _25941 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                            mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                            idx = 0
                            s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                            t = mem[64] + 128
                            while idx < _25941:
                                _37398 = mem[s]
                                mem[t] = mem[mem[s]]
                                mem[t + 32] = mem[_37398 + 32]
                                mem[t + 64] = mem[_37398 + 64]
                                mem[t + 96] = mem[_37398 + 96]
                                mem[t + 128] = mem[_37398 + 128]
                                mem[t + 160] = mem[_37398 + 172 len 20]
                                mem[t + 192] = mem[_37398 + 192]
                                mem[t + 224] = mem[_37398 + 236 len 20]
                                mem[t + 256] = bool(mem[_37398 + 256])
                                mem[t + 288] = mem[_37398 + 288]
                                idx = idx + 1
                                s = s + 32
                                t = t + 320
                                continue 
                            mem[_25137 + 32] = 0
                            mem[_25137 + 64] = (320 * _25941) + 128
                            _38196 = mem[_24772]
                            mem[_25137 + (320 * _25941) + 128] = mem[_24772]
                            mem[_25137 + (320 * _25941) + 160 len ceil32(_38196)] = mem[_24772 + 32 len ceil32(_38196)]
                            var46001 = ceil32(_38196)
                            if ceil32(_38196) > _38196:
                                mem[_25137 + (320 * _25941) + _38196 + 160] = 0
                            return memory
                              from mem[64]
                               len ceil32(_38196) + _25137 + (320 * _25941) + -mem[64] + 160
                        _25942 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_25942] = 7
                        mem[_25942 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                        _26726 = mem[64]
                        mem[mem[64]] = 96
                        _27150 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                        mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                        idx = 0
                        s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                        t = mem[64] + 128
                        while idx < _27150:
                            _37405 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_37405 + 32]
                            mem[t + 64] = mem[_37405 + 64]
                            mem[t + 96] = mem[_37405 + 96]
                            mem[t + 128] = mem[_37405 + 128]
                            mem[t + 160] = mem[_37405 + 172 len 20]
                            mem[t + 192] = mem[_37405 + 192]
                            mem[t + 224] = mem[_37405 + 236 len 20]
                            mem[t + 256] = bool(mem[_37405 + 256])
                            mem[t + 288] = mem[_37405 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_26726 + 32] = -1
                        mem[_26726 + 64] = (320 * _27150) + 128
                        _38197 = mem[_25942]
                        mem[_26726 + (320 * _27150) + 128] = mem[_25942]
                        mem[_26726 + (320 * _27150) + 160 len ceil32(_38197)] = mem[_25942 + 32 len ceil32(_38197)]
                        var49001 = ceil32(_38197)
                        if ceil32(_38197) > _38197:
                            mem[_26726 + (320 * _27150) + _38197 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_38197) + _26726 + (320 * _27150) + -mem[64] + 160
                    mem[64] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 544
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 224] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 256] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 288] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 320] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 352] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 384] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 416] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 448] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 480] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 512] = 0
                    mem[var36001] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 224
                    s = var36001
                    idx = var36002
                    while idx - 1:
                        mem[64] = mem[64] + 320
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 224] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 256] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 288] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 320] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 352] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 384] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 416] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 448] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 480] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 512] = 0
                        mem[s + 32] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 224
                        s = s + 32
                        idx = idx - 1
                        continue 
                    idx = 0
                    while idx < arg1 + 1:
                        if arg1 < idx:
                            revert with 0, 17
                        if arg1 - idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                            revert with 0, 50
                        mem[0] = mem[(32 * arg1 - idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]
                        mem[32] = 12
                        _50443 = sha3(mem[(32 * arg1 - idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192], 12)
                        _50444 = mem[64]
                        mem[64] = mem[64] + 320
                        mem[_50444] = stor12[mem[(32 * arg1 - idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]].field_0
                        mem[_50444 + 32] = stor1[_50443]
                        mem[_50444 + 64] = stor2[_50443]
                        mem[_50444 + 96] = stor3[_50443]
                        mem[_50444 + 128] = stor4[_50443]
                        mem[_50444 + 160] = stor5[_50443]
                        mem[_50444 + 192] = stor6[_50443]
                        mem[_50444 + 224] = stor7[_50443].field_0
                        mem[_50444 + 256] = bool(stor7[_50443].field_160)
                        mem[_50444 + 288] = stor8[_50443]
                        if idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]:
                            revert with 0, 50
                        mem[(32 * idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224] = _50444
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if arg1 < arg1 + 1:
                        _49271 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_49271] = 4
                        mem[_49271 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                        _49670 = mem[64]
                        mem[mem[64]] = 96
                        _50440 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                        mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                        idx = 0
                        s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                        t = mem[64] + 128
                        while idx < _50440:
                            _58780 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_58780 + 32]
                            mem[t + 64] = mem[_58780 + 64]
                            mem[t + 96] = mem[_58780 + 96]
                            mem[t + 128] = mem[_58780 + 128]
                            mem[t + 160] = mem[_58780 + 172 len 20]
                            mem[t + 192] = mem[_58780 + 192]
                            mem[t + 224] = mem[_58780 + 236 len 20]
                            mem[t + 256] = bool(mem[_58780 + 256])
                            mem[t + 288] = mem[_58780 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_49670 + 32] = 0
                        mem[_49670 + 64] = (320 * _50440) + 128
                        _60022 = mem[_49271]
                        mem[_49670 + (320 * _50440) + 128] = mem[_49271]
                        mem[_49670 + (320 * _50440) + 160 len ceil32(_60022)] = mem[_49271 + 32 len ceil32(_60022)]
                        var53001 = ceil32(_60022)
                        if ceil32(_60022) > _60022:
                            mem[_49670 + (320 * _50440) + _60022 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_60022) + _49670 + (320 * _50440) + -mem[64] + 160
                    _50441 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_50441] = 7
                    mem[_50441 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                    _51216 = mem[64]
                    mem[mem[64]] = 96
                    _51683 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                    mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                    idx = 0
                    s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                    t = mem[64] + 128
                    while idx < _51683:
                        _58787 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_58787 + 32]
                        mem[t + 64] = mem[_58787 + 64]
                        mem[t + 96] = mem[_58787 + 96]
                        mem[t + 128] = mem[_58787 + 128]
                        mem[t + 160] = mem[_58787 + 172 len 20]
                        mem[t + 192] = mem[_58787 + 192]
                        mem[t + 224] = mem[_58787 + 236 len 20]
                        mem[t + 256] = bool(mem[_58787 + 256])
                        mem[t + 288] = mem[_58787 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_51216 + 32] = -1
                    mem[_51216 + 64] = (320 * _51683) + 128
                    _60023 = mem[_50441]
                    mem[_51216 + (320 * _51683) + 128] = mem[_50441]
                    mem[_51216 + (320 * _51683) + 160 len ceil32(_60023)] = mem[_50441 + 32 len ceil32(_60023)]
                    var56001 = ceil32(_60023)
                    if ceil32(_60023) > _60023:
                        mem[_51216 + (320 * _51683) + _60023 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_60023) + _51216 + (320 * _51683) + -mem[64] + 160
                if stor15[address(arg5)].field_0 < arg1:
                    revert with 0, 17
                if arg2 <= stor15[address(arg5)].field_0 - arg1:
                    if arg2 > test266151307():
                        revert with 0, 65
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192] = arg2
                    mem[64] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224
                    if not arg2:
                        idx = 0
                        while idx < arg2:
                            if arg1 > !idx:
                                revert with 0, 17
                            if arg1 + idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                                revert with 0, 50
                            mem[0] = mem[(32 * arg1 + idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]
                            mem[32] = 12
                            _25948 = sha3(mem[(32 * arg1 + idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192], 12)
                            _25949 = mem[64]
                            mem[64] = mem[64] + 320
                            mem[_25949] = stor12[mem[(32 * arg1 + idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]].field_0
                            mem[_25949 + 32] = stor1[_25948]
                            mem[_25949 + 64] = stor2[_25948]
                            mem[_25949 + 96] = stor3[_25948]
                            mem[_25949 + 128] = stor4[_25948]
                            mem[_25949 + 160] = stor5[_25948]
                            mem[_25949 + 192] = stor6[_25948]
                            mem[_25949 + 224] = stor7[_25948].field_0
                            mem[_25949 + 256] = bool(stor7[_25948].field_160)
                            mem[_25949 + 288] = stor8[_25948]
                            if idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]:
                                revert with 0, 50
                            mem[(32 * idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224] = _25949
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            continue 
                        if arg1 > !arg2:
                            revert with 0, 17
                        if arg1 > !arg2:
                            revert with 0, 17
                        if arg1 + arg2 < mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                            _27151 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_27151] = 7
                            mem[_27151 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                            _28444 = mem[64]
                            mem[mem[64]] = 96
                            _29060 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                            mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                            idx = 0
                            s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                            t = mem[64] + 128
                            while idx < _29060:
                                _37412 = mem[s]
                                mem[t] = mem[mem[s]]
                                mem[t + 32] = mem[_37412 + 32]
                                mem[t + 64] = mem[_37412 + 64]
                                mem[t + 96] = mem[_37412 + 96]
                                mem[t + 128] = mem[_37412 + 128]
                                mem[t + 160] = mem[_37412 + 172 len 20]
                                mem[t + 192] = mem[_37412 + 192]
                                mem[t + 224] = mem[_37412 + 236 len 20]
                                mem[t + 256] = bool(mem[_37412 + 256])
                                mem[t + 288] = mem[_37412 + 288]
                                idx = idx + 1
                                s = s + 32
                                t = t + 320
                                continue 
                            mem[_28444 + 32] = arg1 + arg2
                            mem[_28444 + 64] = (320 * _29060) + 128
                            _38198 = mem[_27151]
                            mem[_28444 + (320 * _29060) + 128] = mem[_27151]
                            mem[_28444 + (320 * _29060) + 160 len ceil32(_38198)] = mem[_27151 + 32 len ceil32(_38198)]
                            var51001 = ceil32(_38198)
                            if ceil32(_38198) > _38198:
                                mem[_28444 + (320 * _29060) + _38198 + 160] = 0
                            return memory
                              from mem[64]
                               len ceil32(_38198) + _28444 + (320 * _29060) + -mem[64] + 160
                        _27152 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_27152] = 4
                        mem[_27152 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                        _28445 = mem[64]
                        mem[mem[64]] = 96
                        _29061 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                        mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                        idx = 0
                        s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                        t = mem[64] + 128
                        while idx < _29061:
                            _37419 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_37419 + 32]
                            mem[t + 64] = mem[_37419 + 64]
                            mem[t + 96] = mem[_37419 + 96]
                            mem[t + 128] = mem[_37419 + 128]
                            mem[t + 160] = mem[_37419 + 172 len 20]
                            mem[t + 192] = mem[_37419 + 192]
                            mem[t + 224] = mem[_37419 + 236 len 20]
                            mem[t + 256] = bool(mem[_37419 + 256])
                            mem[t + 288] = mem[_37419 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_28445 + 32] = arg1 + arg2
                        mem[_28445 + 64] = (320 * _29061) + 128
                        _38199 = mem[_27152]
                        mem[_28445 + (320 * _29061) + 128] = mem[_27152]
                        mem[_28445 + (320 * _29061) + 160 len ceil32(_38199)] = mem[_27152 + 32 len ceil32(_38199)]
                        var51001 = ceil32(_38199)
                        if ceil32(_38199) > _38199:
                            mem[_28445 + (320 * _29061) + _38199 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_38199) + _28445 + (320 * _29061) + -mem[64] + 160
                    mem[64] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 544
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 256] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 288] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 320] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 352] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 384] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 416] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 448] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 480] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 512] = 0
                    mem[var35001] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224
                    s = var35001
                    idx = var35002
                    while idx - 1:
                        mem[64] = mem[64] + 320
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 256] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 288] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 320] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 352] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 384] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 416] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 448] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 480] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 512] = 0
                        mem[s + 32] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224
                        s = s + 32
                        idx = idx - 1
                        continue 
                    idx = 0
                    while idx < arg2:
                        if arg1 > !idx:
                            revert with 0, 17
                        if arg1 + idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                            revert with 0, 50
                        mem[0] = mem[(32 * arg1 + idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]
                        mem[32] = 12
                        _50449 = sha3(mem[(32 * arg1 + idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192], 12)
                        _50450 = mem[64]
                        mem[64] = mem[64] + 320
                        mem[_50450] = stor12[mem[(32 * arg1 + idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]].field_0
                        mem[_50450 + 32] = stor1[_50449]
                        mem[_50450 + 64] = stor2[_50449]
                        mem[_50450 + 96] = stor3[_50449]
                        mem[_50450 + 128] = stor4[_50449]
                        mem[_50450 + 160] = stor5[_50449]
                        mem[_50450 + 192] = stor6[_50449]
                        mem[_50450 + 224] = stor7[_50449].field_0
                        mem[_50450 + 256] = bool(stor7[_50449].field_160)
                        mem[_50450 + 288] = stor8[_50449]
                        if idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]:
                            revert with 0, 50
                        mem[(32 * idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224] = _50450
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if arg1 > !arg2:
                        revert with 0, 17
                    if arg1 > !arg2:
                        revert with 0, 17
                    if arg1 + arg2 < mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                        _51684 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_51684] = 7
                        mem[_51684 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                        _52437 = mem[64]
                        mem[mem[64]] = 96
                        _53153 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                        mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                        idx = 0
                        s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                        t = mem[64] + 128
                        while idx < _53153:
                            _58794 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_58794 + 32]
                            mem[t + 64] = mem[_58794 + 64]
                            mem[t + 96] = mem[_58794 + 96]
                            mem[t + 128] = mem[_58794 + 128]
                            mem[t + 160] = mem[_58794 + 172 len 20]
                            mem[t + 192] = mem[_58794 + 192]
                            mem[t + 224] = mem[_58794 + 236 len 20]
                            mem[t + 256] = bool(mem[_58794 + 256])
                            mem[t + 288] = mem[_58794 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_52437 + 32] = arg1 + arg2
                        mem[_52437 + 64] = (320 * _53153) + 128
                        _60024 = mem[_51684]
                        mem[_52437 + (320 * _53153) + 128] = mem[_51684]
                        mem[_52437 + (320 * _53153) + 160 len ceil32(_60024)] = mem[_51684 + 32 len ceil32(_60024)]
                        var58001 = ceil32(_60024)
                        if ceil32(_60024) > _60024:
                            mem[_52437 + (320 * _53153) + _60024 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_60024) + _52437 + (320 * _53153) + -mem[64] + 160
                    _51685 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_51685] = 4
                    mem[_51685 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                    _52438 = mem[64]
                    mem[mem[64]] = 96
                    _53154 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                    mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                    idx = 0
                    s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                    t = mem[64] + 128
                    while idx < _53154:
                        _58801 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_58801 + 32]
                        mem[t + 64] = mem[_58801 + 64]
                        mem[t + 96] = mem[_58801 + 96]
                        mem[t + 128] = mem[_58801 + 128]
                        mem[t + 160] = mem[_58801 + 172 len 20]
                        mem[t + 192] = mem[_58801 + 192]
                        mem[t + 224] = mem[_58801 + 236 len 20]
                        mem[t + 256] = bool(mem[_58801 + 256])
                        mem[t + 288] = mem[_58801 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_52438 + 32] = arg1 + arg2
                    mem[_52438 + 64] = (320 * _53154) + 128
                    _60025 = mem[_51685]
                    mem[_52438 + (320 * _53154) + 128] = mem[_51685]
                    mem[_52438 + (320 * _53154) + 160 len ceil32(_60025)] = mem[_51685 + 32 len ceil32(_60025)]
                    var58001 = ceil32(_60025)
                    if ceil32(_60025) > _60025:
                        mem[_52438 + (320 * _53154) + _60025 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_60025) + _52438 + (320 * _53154) + -mem[64] + 160
                if stor15[address(arg5)].field_0 < arg1:
                    revert with 0, 17
                if stor15[address(arg5)].field_0 - arg1 > test266151307():
                    revert with 0, 65
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192] = stor15[address(arg5)].field_0 - arg1
                mem[64] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 224
                if not stor15[address(arg5)].field_0 - arg1:
                    idx = 0
                    while idx < stor15[address(arg5)].field_0 - arg1:
                        if arg1 > !idx:
                            revert with 0, 17
                        if arg1 + idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                            revert with 0, 50
                        mem[0] = mem[(32 * arg1 + idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]
                        mem[32] = 12
                        _25952 = sha3(mem[(32 * arg1 + idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192], 12)
                        _25953 = mem[64]
                        mem[64] = mem[64] + 320
                        mem[_25953] = stor12[mem[(32 * arg1 + idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]].field_0
                        mem[_25953 + 32] = stor1[_25952]
                        mem[_25953 + 64] = stor2[_25952]
                        mem[_25953 + 96] = stor3[_25952]
                        mem[_25953 + 128] = stor4[_25952]
                        mem[_25953 + 160] = stor5[_25952]
                        mem[_25953 + 192] = stor6[_25952]
                        mem[_25953 + 224] = stor7[_25952].field_0
                        mem[_25953 + 256] = bool(stor7[_25952].field_160)
                        mem[_25953 + 288] = stor8[_25952]
                        if idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]:
                            revert with 0, 50
                        mem[(32 * idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224] = _25953
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if arg1 > !(stor15[address(arg5)].field_0 - arg1):
                        revert with 0, 17
                    if arg1 > !(stor15[address(arg5)].field_0 - arg1):
                        revert with 0, 17
                    if stor15[address(arg5)].field_0 < mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                        _27153 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_27153] = 7
                        mem[_27153 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                        _28450 = mem[64]
                        mem[mem[64]] = 96
                        _29062 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                        mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                        idx = 0
                        s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                        t = mem[64] + 128
                        while idx < _29062:
                            _37426 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_37426 + 32]
                            mem[t + 64] = mem[_37426 + 64]
                            mem[t + 96] = mem[_37426 + 96]
                            mem[t + 128] = mem[_37426 + 128]
                            mem[t + 160] = mem[_37426 + 172 len 20]
                            mem[t + 192] = mem[_37426 + 192]
                            mem[t + 224] = mem[_37426 + 236 len 20]
                            mem[t + 256] = bool(mem[_37426 + 256])
                            mem[t + 288] = mem[_37426 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_28450 + 32] = stor15[address(arg5)].field_0
                        mem[_28450 + 64] = (320 * _29062) + 128
                        _38200 = mem[_27153]
                        mem[_28450 + (320 * _29062) + 128] = mem[_27153]
                        mem[_28450 + (320 * _29062) + 160 len ceil32(_38200)] = mem[_27153 + 32 len ceil32(_38200)]
                        var55001 = ceil32(_38200)
                        if ceil32(_38200) > _38200:
                            mem[_28450 + (320 * _29062) + _38200 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_38200) + _28450 + (320 * _29062) + -mem[64] + 160
                    _27154 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_27154] = 4
                    mem[_27154 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                    _28451 = mem[64]
                    mem[mem[64]] = 96
                    _29063 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                    mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                    idx = 0
                    s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                    t = mem[64] + 128
                    while idx < _29063:
                        _37433 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_37433 + 32]
                        mem[t + 64] = mem[_37433 + 64]
                        mem[t + 96] = mem[_37433 + 96]
                        mem[t + 128] = mem[_37433 + 128]
                        mem[t + 160] = mem[_37433 + 172 len 20]
                        mem[t + 192] = mem[_37433 + 192]
                        mem[t + 224] = mem[_37433 + 236 len 20]
                        mem[t + 256] = bool(mem[_37433 + 256])
                        mem[t + 288] = mem[_37433 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_28451 + 32] = stor15[address(arg5)].field_0
                    mem[_28451 + 64] = (320 * _29063) + 128
                    _38201 = mem[_27154]
                    mem[_28451 + (320 * _29063) + 128] = mem[_27154]
                    mem[_28451 + (320 * _29063) + 160 len ceil32(_38201)] = mem[_27154 + 32 len ceil32(_38201)]
                    var55001 = ceil32(_38201)
                    if ceil32(_38201) > _38201:
                        mem[_28451 + (320 * _29063) + _38201 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_38201) + _28451 + (320 * _29063) + -mem[64] + 160
                mem[64] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 544
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 224] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 256] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 288] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 320] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 352] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 384] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 416] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 448] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 480] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 512] = 0
                mem[var39001] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 224
                s = var39001
                idx = var39002
                while idx - 1:
                    mem[64] = mem[64] + 320
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 224] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 256] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 288] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 320] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 352] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 384] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 416] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 448] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 480] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 512] = 0
                    mem[s + 32] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 224
                    s = s + 32
                    idx = idx - 1
                    continue 
                idx = 0
                while idx < stor15[address(arg5)].field_0 - arg1:
                    if arg1 > !idx:
                        revert with 0, 17
                    if arg1 + idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                        revert with 0, 50
                    mem[0] = mem[(32 * arg1 + idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]
                    mem[32] = 12
                    _50455 = sha3(mem[(32 * arg1 + idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192], 12)
                    _50456 = mem[64]
                    mem[64] = mem[64] + 320
                    mem[_50456] = stor12[mem[(32 * arg1 + idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]].field_0
                    mem[_50456 + 32] = stor1[_50455]
                    mem[_50456 + 64] = stor2[_50455]
                    mem[_50456 + 96] = stor3[_50455]
                    mem[_50456 + 128] = stor4[_50455]
                    mem[_50456 + 160] = stor5[_50455]
                    mem[_50456 + 192] = stor6[_50455]
                    mem[_50456 + 224] = stor7[_50455].field_0
                    mem[_50456 + 256] = bool(stor7[_50455].field_160)
                    mem[_50456 + 288] = stor8[_50455]
                    if idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]:
                        revert with 0, 50
                    mem[(32 * idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224] = _50456
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
                if arg1 > !(stor15[address(arg5)].field_0 - arg1):
                    revert with 0, 17
                if arg1 > !(stor15[address(arg5)].field_0 - arg1):
                    revert with 0, 17
                if stor15[address(arg5)].field_0 < mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                    _51686 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_51686] = 7
                    mem[_51686 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                    _52439 = mem[64]
                    mem[mem[64]] = 96
                    _53155 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                    mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                    idx = 0
                    s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                    t = mem[64] + 128
                    while idx < _53155:
                        _58808 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_58808 + 32]
                        mem[t + 64] = mem[_58808 + 64]
                        mem[t + 96] = mem[_58808 + 96]
                        mem[t + 128] = mem[_58808 + 128]
                        mem[t + 160] = mem[_58808 + 172 len 20]
                        mem[t + 192] = mem[_58808 + 192]
                        mem[t + 224] = mem[_58808 + 236 len 20]
                        mem[t + 256] = bool(mem[_58808 + 256])
                        mem[t + 288] = mem[_58808 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_52439 + 32] = stor15[address(arg5)].field_0
                    mem[_52439 + 64] = (320 * _53155) + 128
                    _60026 = mem[_51686]
                    mem[_52439 + (320 * _53155) + 128] = mem[_51686]
                    mem[_52439 + (320 * _53155) + 160 len ceil32(_60026)] = mem[_51686 + 32 len ceil32(_60026)]
                    var62001 = ceil32(_60026)
                    if ceil32(_60026) > _60026:
                        mem[_52439 + (320 * _53155) + _60026 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_60026) + _52439 + (320 * _53155) + -mem[64] + 160
                _51687 = mem[64]
                mem[64] = mem[64] + 64
                mem[_51687] = 4
                mem[_51687 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                _52440 = mem[64]
                mem[mem[64]] = 96
                _53156 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                idx = 0
                s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                t = mem[64] + 128
                while idx < _53156:
                    _58815 = mem[s]
                    mem[t] = mem[mem[s]]
                    mem[t + 32] = mem[_58815 + 32]
                    mem[t + 64] = mem[_58815 + 64]
                    mem[t + 96] = mem[_58815 + 96]
                    mem[t + 128] = mem[_58815 + 128]
                    mem[t + 160] = mem[_58815 + 172 len 20]
                    mem[t + 192] = mem[_58815 + 192]
                    mem[t + 224] = mem[_58815 + 236 len 20]
                    mem[t + 256] = bool(mem[_58815 + 256])
                    mem[t + 288] = mem[_58815 + 288]
                    idx = idx + 1
                    s = s + 32
                    t = t + 320
                    continue 
                mem[_52440 + 32] = stor15[address(arg5)].field_0
                mem[_52440 + 64] = (320 * _53156) + 128
                _60027 = mem[_51687]
                mem[_52440 + (320 * _53156) + 128] = mem[_51687]
                mem[_52440 + (320 * _53156) + 160 len ceil32(_60027)] = mem[_51687 + 32 len ceil32(_60027)]
                var62001 = ceil32(_60027)
                if ceil32(_60027) > _60027:
                    mem[_52440 + (320 * _53156) + _60027 + 160] = 0
                return memory
                  from mem[64]
                   len ceil32(_60027) + _52440 + (320 * _53156) + -mem[64] + 160
            if stor15[address(arg5)].field_0 < 1:
                revert with 0, 17
            if arg3:
                if arg2 <= stor15[address(arg5)].field_0 - 1:
                    if arg2 > test266151307():
                        revert with 0, 65
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192] = arg2
                    mem[64] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224
                    if not arg2:
                        idx = 0
                        while idx < arg2:
                            if stor15[address(arg5)].field_0 - 1 < idx:
                                revert with 0, 17
                            if stor15[address(arg5)].field_0 + -idx - 1 >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                                revert with 0, 50
                            mem[0] = mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]
                            mem[32] = 12
                            _25958 = sha3(mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192], 12)
                            _25959 = mem[64]
                            mem[64] = mem[64] + 320
                            mem[_25959] = stor12[mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]].field_0
                            mem[_25959 + 32] = stor1[_25958]
                            mem[_25959 + 64] = stor2[_25958]
                            mem[_25959 + 96] = stor3[_25958]
                            mem[_25959 + 128] = stor4[_25958]
                            mem[_25959 + 160] = stor5[_25958]
                            mem[_25959 + 192] = stor6[_25958]
                            mem[_25959 + 224] = stor7[_25958].field_0
                            mem[_25959 + 256] = bool(stor7[_25958].field_160)
                            mem[_25959 + 288] = stor8[_25958]
                            if idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]:
                                revert with 0, 50
                            mem[(32 * idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224] = _25959
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            continue 
                        if stor15[address(arg5)].field_0 - 1 < arg2:
                            _24773 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_24773] = 4
                            mem[_24773 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                            _25141 = mem[64]
                            mem[mem[64]] = 96
                            _25955 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                            mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                            idx = 0
                            s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                            t = mem[64] + 128
                            while idx < _25955:
                                _37440 = mem[s]
                                mem[t] = mem[mem[s]]
                                mem[t + 32] = mem[_37440 + 32]
                                mem[t + 64] = mem[_37440 + 64]
                                mem[t + 96] = mem[_37440 + 96]
                                mem[t + 128] = mem[_37440 + 128]
                                mem[t + 160] = mem[_37440 + 172 len 20]
                                mem[t + 192] = mem[_37440 + 192]
                                mem[t + 224] = mem[_37440 + 236 len 20]
                                mem[t + 256] = bool(mem[_37440 + 256])
                                mem[t + 288] = mem[_37440 + 288]
                                idx = idx + 1
                                s = s + 32
                                t = t + 320
                                continue 
                            mem[_25141 + 32] = 0
                            mem[_25141 + 64] = (320 * _25955) + 128
                            _38202 = mem[_24773]
                            mem[_25141 + (320 * _25955) + 128] = mem[_24773]
                            mem[_25141 + (320 * _25955) + 160 len ceil32(_38202)] = mem[_24773 + 32 len ceil32(_38202)]
                            var46001 = ceil32(_38202)
                            if ceil32(_38202) > _38202:
                                mem[_25141 + (320 * _25955) + _38202 + 160] = 0
                            return memory
                              from mem[64]
                               len ceil32(_38202) + _25141 + (320 * _25955) + -mem[64] + 160
                        _25956 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_25956] = 7
                        mem[_25956 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                        _26735 = mem[64]
                        mem[mem[64]] = 96
                        _27156 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                        mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                        idx = 0
                        s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                        t = mem[64] + 128
                        while idx < _27156:
                            _37447 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_37447 + 32]
                            mem[t + 64] = mem[_37447 + 64]
                            mem[t + 96] = mem[_37447 + 96]
                            mem[t + 128] = mem[_37447 + 128]
                            mem[t + 160] = mem[_37447 + 172 len 20]
                            mem[t + 192] = mem[_37447 + 192]
                            mem[t + 224] = mem[_37447 + 236 len 20]
                            mem[t + 256] = bool(mem[_37447 + 256])
                            mem[t + 288] = mem[_37447 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_26735 + 32] = stor15[address(arg5)].field_0 + -arg2 - 1
                        mem[_26735 + 64] = (320 * _27156) + 128
                        _38203 = mem[_25956]
                        mem[_26735 + (320 * _27156) + 128] = mem[_25956]
                        mem[_26735 + (320 * _27156) + 160 len ceil32(_38203)] = mem[_25956 + 32 len ceil32(_38203)]
                        var49001 = ceil32(_38203)
                        if ceil32(_38203) > _38203:
                            mem[_26735 + (320 * _27156) + _38203 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_38203) + _26735 + (320 * _27156) + -mem[64] + 160
                    mem[64] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 544
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 256] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 288] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 320] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 352] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 384] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 416] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 448] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 480] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 512] = 0
                    mem[var36001] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224
                    s = var36001
                    idx = var36002
                    while idx - 1:
                        mem[64] = mem[64] + 320
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 256] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 288] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 320] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 352] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 384] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 416] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 448] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 480] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 512] = 0
                        mem[s + 32] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224
                        s = s + 32
                        idx = idx - 1
                        continue 
                    idx = 0
                    while idx < arg2:
                        if stor15[address(arg5)].field_0 - 1 < idx:
                            revert with 0, 17
                        if stor15[address(arg5)].field_0 + -idx - 1 >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                            revert with 0, 50
                        mem[0] = mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]
                        mem[32] = 12
                        _50463 = sha3(mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192], 12)
                        _50464 = mem[64]
                        mem[64] = mem[64] + 320
                        mem[_50464] = stor12[mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]].field_0
                        mem[_50464 + 32] = stor1[_50463]
                        mem[_50464 + 64] = stor2[_50463]
                        mem[_50464 + 96] = stor3[_50463]
                        mem[_50464 + 128] = stor4[_50463]
                        mem[_50464 + 160] = stor5[_50463]
                        mem[_50464 + 192] = stor6[_50463]
                        mem[_50464 + 224] = stor7[_50463].field_0
                        mem[_50464 + 256] = bool(stor7[_50463].field_160)
                        mem[_50464 + 288] = stor8[_50463]
                        if idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]:
                            revert with 0, 50
                        mem[(32 * idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224] = _50464
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if stor15[address(arg5)].field_0 - 1 < arg2:
                        _49272 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_49272] = 4
                        mem[_49272 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                        _49680 = mem[64]
                        mem[mem[64]] = 96
                        _50460 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                        mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                        idx = 0
                        s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                        t = mem[64] + 128
                        while idx < _50460:
                            _58822 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_58822 + 32]
                            mem[t + 64] = mem[_58822 + 64]
                            mem[t + 96] = mem[_58822 + 96]
                            mem[t + 128] = mem[_58822 + 128]
                            mem[t + 160] = mem[_58822 + 172 len 20]
                            mem[t + 192] = mem[_58822 + 192]
                            mem[t + 224] = mem[_58822 + 236 len 20]
                            mem[t + 256] = bool(mem[_58822 + 256])
                            mem[t + 288] = mem[_58822 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_49680 + 32] = 0
                        mem[_49680 + 64] = (320 * _50460) + 128
                        _60028 = mem[_49272]
                        mem[_49680 + (320 * _50460) + 128] = mem[_49272]
                        mem[_49680 + (320 * _50460) + 160 len ceil32(_60028)] = mem[_49272 + 32 len ceil32(_60028)]
                        var53001 = ceil32(_60028)
                        if ceil32(_60028) > _60028:
                            mem[_49680 + (320 * _50460) + _60028 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_60028) + _49680 + (320 * _50460) + -mem[64] + 160
                    _50461 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_50461] = 7
                    mem[_50461 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                    _51224 = mem[64]
                    mem[mem[64]] = 96
                    _51689 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                    mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                    idx = 0
                    s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                    t = mem[64] + 128
                    while idx < _51689:
                        _58829 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_58829 + 32]
                        mem[t + 64] = mem[_58829 + 64]
                        mem[t + 96] = mem[_58829 + 96]
                        mem[t + 128] = mem[_58829 + 128]
                        mem[t + 160] = mem[_58829 + 172 len 20]
                        mem[t + 192] = mem[_58829 + 192]
                        mem[t + 224] = mem[_58829 + 236 len 20]
                        mem[t + 256] = bool(mem[_58829 + 256])
                        mem[t + 288] = mem[_58829 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_51224 + 32] = stor15[address(arg5)].field_0 + -arg2 - 1
                    mem[_51224 + 64] = (320 * _51689) + 128
                    _60029 = mem[_50461]
                    mem[_51224 + (320 * _51689) + 128] = mem[_50461]
                    mem[_51224 + (320 * _51689) + 160 len ceil32(_60029)] = mem[_50461 + 32 len ceil32(_60029)]
                    var56001 = ceil32(_60029)
                    if ceil32(_60029) > _60029:
                        mem[_51224 + (320 * _51689) + _60029 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_60029) + _51224 + (320 * _51689) + -mem[64] + 160
                if 1 > !(stor15[address(arg5)].field_0 - 1):
                    revert with 0, 17
                if stor15[address(arg5)].field_0 > test266151307():
                    revert with 0, 65
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192] = stor15[address(arg5)].field_0
                mem[64] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 224
                if not stor15[address(arg5)].field_0:
                    idx = 0
                    while idx < stor15[address(arg5)].field_0:
                        if stor15[address(arg5)].field_0 - 1 < idx:
                            revert with 0, 17
                        if stor15[address(arg5)].field_0 + -idx - 1 >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                            revert with 0, 50
                        mem[0] = mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]
                        mem[32] = 12
                        _25964 = sha3(mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192], 12)
                        _25965 = mem[64]
                        mem[64] = mem[64] + 320
                        mem[_25965] = stor12[mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]].field_0
                        mem[_25965 + 32] = stor1[_25964]
                        mem[_25965 + 64] = stor2[_25964]
                        mem[_25965 + 96] = stor3[_25964]
                        mem[_25965 + 128] = stor4[_25964]
                        mem[_25965 + 160] = stor5[_25964]
                        mem[_25965 + 192] = stor6[_25964]
                        mem[_25965 + 224] = stor7[_25964].field_0
                        mem[_25965 + 256] = bool(stor7[_25964].field_160)
                        mem[_25965 + 288] = stor8[_25964]
                        if idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]:
                            revert with 0, 50
                        mem[(32 * idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224] = _25965
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if stor15[address(arg5)].field_0 - 1 < stor15[address(arg5)].field_0:
                        _24774 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_24774] = 4
                        mem[_24774 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                        _25143 = mem[64]
                        mem[mem[64]] = 96
                        _25961 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                        mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                        idx = 0
                        s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                        t = mem[64] + 128
                        while idx < _25961:
                            _37454 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_37454 + 32]
                            mem[t + 64] = mem[_37454 + 64]
                            mem[t + 96] = mem[_37454 + 96]
                            mem[t + 128] = mem[_37454 + 128]
                            mem[t + 160] = mem[_37454 + 172 len 20]
                            mem[t + 192] = mem[_37454 + 192]
                            mem[t + 224] = mem[_37454 + 236 len 20]
                            mem[t + 256] = bool(mem[_37454 + 256])
                            mem[t + 288] = mem[_37454 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_25143 + 32] = 0
                        mem[_25143 + 64] = (320 * _25961) + 128
                        _38204 = mem[_24774]
                        mem[_25143 + (320 * _25961) + 128] = mem[_24774]
                        mem[_25143 + (320 * _25961) + 160 len ceil32(_38204)] = mem[_24774 + 32 len ceil32(_38204)]
                        var50001 = ceil32(_38204)
                        if ceil32(_38204) > _38204:
                            mem[_25143 + (320 * _25961) + _38204 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_38204) + _25143 + (320 * _25961) + -mem[64] + 160
                    _25962 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_25962] = 7
                    mem[_25962 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                    _26744 = mem[64]
                    mem[mem[64]] = 96
                    _27158 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                    mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                    idx = 0
                    s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                    t = mem[64] + 128
                    while idx < _27158:
                        _37461 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_37461 + 32]
                        mem[t + 64] = mem[_37461 + 64]
                        mem[t + 96] = mem[_37461 + 96]
                        mem[t + 128] = mem[_37461 + 128]
                        mem[t + 160] = mem[_37461 + 172 len 20]
                        mem[t + 192] = mem[_37461 + 192]
                        mem[t + 224] = mem[_37461 + 236 len 20]
                        mem[t + 256] = bool(mem[_37461 + 256])
                        mem[t + 288] = mem[_37461 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_26744 + 32] = -1
                    mem[_26744 + 64] = (320 * _27158) + 128
                    _38205 = mem[_25962]
                    mem[_26744 + (320 * _27158) + 128] = mem[_25962]
                    mem[_26744 + (320 * _27158) + 160 len ceil32(_38205)] = mem[_25962 + 32 len ceil32(_38205)]
                    var53001 = ceil32(_38205)
                    if ceil32(_38205) > _38205:
                        mem[_26744 + (320 * _27158) + _38205 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_38205) + _26744 + (320 * _27158) + -mem[64] + 160
                mem[64] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 544
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 224] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 256] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 288] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 320] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 352] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 384] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 416] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 448] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 480] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 512] = 0
                mem[var40001] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 224
                s = var40001
                idx = var40002
                while idx - 1:
                    mem[64] = mem[64] + 320
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 224] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 256] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 288] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 320] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 352] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 384] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 416] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 448] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 480] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 512] = 0
                    mem[s + 32] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 224
                    s = s + 32
                    idx = idx - 1
                    continue 
                idx = 0
                while idx < stor15[address(arg5)].field_0:
                    if stor15[address(arg5)].field_0 - 1 < idx:
                        revert with 0, 17
                    if stor15[address(arg5)].field_0 + -idx - 1 >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                        revert with 0, 50
                    mem[0] = mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]
                    mem[32] = 12
                    _50471 = sha3(mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192], 12)
                    _50472 = mem[64]
                    mem[64] = mem[64] + 320
                    mem[_50472] = stor12[mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]].field_0
                    mem[_50472 + 32] = stor1[_50471]
                    mem[_50472 + 64] = stor2[_50471]
                    mem[_50472 + 96] = stor3[_50471]
                    mem[_50472 + 128] = stor4[_50471]
                    mem[_50472 + 160] = stor5[_50471]
                    mem[_50472 + 192] = stor6[_50471]
                    mem[_50472 + 224] = stor7[_50471].field_0
                    mem[_50472 + 256] = bool(stor7[_50471].field_160)
                    mem[_50472 + 288] = stor8[_50471]
                    if idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]:
                        revert with 0, 50
                    mem[(32 * idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224] = _50472
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
                if stor15[address(arg5)].field_0 - 1 < stor15[address(arg5)].field_0:
                    _49273 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_49273] = 4
                    mem[_49273 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                    _49684 = mem[64]
                    mem[mem[64]] = 96
                    _50468 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                    mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                    idx = 0
                    s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                    t = mem[64] + 128
                    while idx < _50468:
                        _58836 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_58836 + 32]
                        mem[t + 64] = mem[_58836 + 64]
                        mem[t + 96] = mem[_58836 + 96]
                        mem[t + 128] = mem[_58836 + 128]
                        mem[t + 160] = mem[_58836 + 172 len 20]
                        mem[t + 192] = mem[_58836 + 192]
                        mem[t + 224] = mem[_58836 + 236 len 20]
                        mem[t + 256] = bool(mem[_58836 + 256])
                        mem[t + 288] = mem[_58836 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_49684 + 32] = 0
                    mem[_49684 + 64] = (320 * _50468) + 128
                    _60030 = mem[_49273]
                    mem[_49684 + (320 * _50468) + 128] = mem[_49273]
                    mem[_49684 + (320 * _50468) + 160 len ceil32(_60030)] = mem[_49273 + 32 len ceil32(_60030)]
                    var57001 = ceil32(_60030)
                    if ceil32(_60030) > _60030:
                        mem[_49684 + (320 * _50468) + _60030 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_60030) + _49684 + (320 * _50468) + -mem[64] + 160
                _50469 = mem[64]
                mem[64] = mem[64] + 64
                mem[_50469] = 7
                mem[_50469 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                _51232 = mem[64]
                mem[mem[64]] = 96
                _51691 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                idx = 0
                s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                t = mem[64] + 128
                while idx < _51691:
                    _58843 = mem[s]
                    mem[t] = mem[mem[s]]
                    mem[t + 32] = mem[_58843 + 32]
                    mem[t + 64] = mem[_58843 + 64]
                    mem[t + 96] = mem[_58843 + 96]
                    mem[t + 128] = mem[_58843 + 128]
                    mem[t + 160] = mem[_58843 + 172 len 20]
                    mem[t + 192] = mem[_58843 + 192]
                    mem[t + 224] = mem[_58843 + 236 len 20]
                    mem[t + 256] = bool(mem[_58843 + 256])
                    mem[t + 288] = mem[_58843 + 288]
                    idx = idx + 1
                    s = s + 32
                    t = t + 320
                    continue 
                mem[_51232 + 32] = -1
                mem[_51232 + 64] = (320 * _51691) + 128
                _60031 = mem[_50469]
                mem[_51232 + (320 * _51691) + 128] = mem[_50469]
                mem[_51232 + (320 * _51691) + 160 len ceil32(_60031)] = mem[_50469 + 32 len ceil32(_60031)]
                var60001 = ceil32(_60031)
                if ceil32(_60031) > _60031:
                    mem[_51232 + (320 * _51691) + _60031 + 160] = 0
                return memory
                  from mem[64]
                   len ceil32(_60031) + _51232 + (320 * _51691) + -mem[64] + 160
            if stor15[address(arg5)].field_0 < stor15[address(arg5)].field_0 - 1:
                revert with 0, 17
            if arg2 > 1:
                if stor15[address(arg5)].field_0 < stor15[address(arg5)].field_0 - 1:
                    revert with 0, 17
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192] = 1
                mem[64] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 576
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 256] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 288] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 320] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 352] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 384] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 416] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 448] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 480] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 512] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 544] = 0
                mem[var43001] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 256
                s = var43001
                idx = var43002
                while idx - 1:
                    mem[64] = mem[64] + 320
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 256] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 288] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 320] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 352] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 384] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 416] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 448] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 480] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 512] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 544] = 0
                    mem[s + 32] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 256
                    s = s + 32
                    idx = idx - 1
                    continue 
                idx = 0
                while idx < 1:
                    if stor15[address(arg5)].field_0 - 1 > !idx:
                        revert with 0, 17
                    if stor15[address(arg5)].field_0 + idx - 1 >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                        revert with 0, 50
                    mem[0] = mem[(32 * stor15[address(arg5)].field_0 + idx - 1) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]
                    mem[32] = 12
                    _50483 = sha3(mem[(32 * stor15[address(arg5)].field_0 + idx - 1) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192], 12)
                    _50484 = mem[64]
                    mem[64] = mem[64] + 320
                    mem[_50484] = stor12[mem[(32 * stor15[address(arg5)].field_0 + idx - 1) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]].field_0
                    mem[_50484 + 32] = stor1[_50483]
                    mem[_50484 + 64] = stor2[_50483]
                    mem[_50484 + 96] = stor3[_50483]
                    mem[_50484 + 128] = stor4[_50483]
                    mem[_50484 + 160] = stor5[_50483]
                    mem[_50484 + 192] = stor6[_50483]
                    mem[_50484 + 224] = stor7[_50483].field_0
                    mem[_50484 + 256] = bool(stor7[_50483].field_160)
                    mem[_50484 + 288] = stor8[_50483]
                    if idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]:
                        revert with 0, 50
                    mem[(32 * idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224] = _50484
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
                if stor15[address(arg5)].field_0 - 1 > !1:
                    revert with 0, 17
                if stor15[address(arg5)].field_0 - 1 > !1:
                    revert with 0, 17
                if stor15[address(arg5)].field_0 < mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                    _51694 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_51694] = 7
                    mem[_51694 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                    _52459 = mem[64]
                    mem[mem[64]] = 96
                    _53163 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                    mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                    idx = 0
                    s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                    t = mem[64] + 128
                    while idx < _53163:
                        _58864 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_58864 + 32]
                        mem[t + 64] = mem[_58864 + 64]
                        mem[t + 96] = mem[_58864 + 96]
                        mem[t + 128] = mem[_58864 + 128]
                        mem[t + 160] = mem[_58864 + 172 len 20]
                        mem[t + 192] = mem[_58864 + 192]
                        mem[t + 224] = mem[_58864 + 236 len 20]
                        mem[t + 256] = bool(mem[_58864 + 256])
                        mem[t + 288] = mem[_58864 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_52459 + 32] = stor15[address(arg5)].field_0
                    mem[_52459 + 64] = (320 * _53163) + 128
                    _60034 = mem[_51694]
                    mem[_52459 + (320 * _53163) + 128] = mem[_51694]
                    mem[_52459 + (320 * _53163) + 160 len ceil32(_60034)] = mem[_51694 + 32 len ceil32(_60034)]
                    var66001 = ceil32(_60034)
                    if ceil32(_60034) > _60034:
                        mem[_52459 + (320 * _53163) + _60034 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_60034) + _52459 + (320 * _53163) + -mem[64] + 160
                _51695 = mem[64]
                mem[64] = mem[64] + 64
                mem[_51695] = 4
                mem[_51695 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                _52460 = mem[64]
                mem[mem[64]] = 96
                _53164 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                idx = 0
                s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                t = mem[64] + 128
                while idx < _53164:
                    _58871 = mem[s]
                    mem[t] = mem[mem[s]]
                    mem[t + 32] = mem[_58871 + 32]
                    mem[t + 64] = mem[_58871 + 64]
                    mem[t + 96] = mem[_58871 + 96]
                    mem[t + 128] = mem[_58871 + 128]
                    mem[t + 160] = mem[_58871 + 172 len 20]
                    mem[t + 192] = mem[_58871 + 192]
                    mem[t + 224] = mem[_58871 + 236 len 20]
                    mem[t + 256] = bool(mem[_58871 + 256])
                    mem[t + 288] = mem[_58871 + 288]
                    idx = idx + 1
                    s = s + 32
                    t = t + 320
                    continue 
                mem[_52460 + 32] = stor15[address(arg5)].field_0
                mem[_52460 + 64] = (320 * _53164) + 128
                _60035 = mem[_51695]
                mem[_52460 + (320 * _53164) + 128] = mem[_51695]
                mem[_52460 + (320 * _53164) + 160 len ceil32(_60035)] = mem[_51695 + 32 len ceil32(_60035)]
                var66001 = ceil32(_60035)
                if ceil32(_60035) > _60035:
                    mem[_52460 + (320 * _53164) + _60035 + 160] = 0
                return memory
                  from mem[64]
                   len ceil32(_60035) + _52460 + (320 * _53164) + -mem[64] + 160
            if arg2 > test266151307():
                revert with 0, 65
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192] = arg2
            mem[64] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224
            if not arg2:
                idx = 0
                while idx < arg2:
                    if stor15[address(arg5)].field_0 - 1 > !idx:
                        revert with 0, 17
                    if stor15[address(arg5)].field_0 + idx - 1 >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                        revert with 0, 50
                    mem[0] = mem[(32 * stor15[address(arg5)].field_0 + idx - 1) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]
                    mem[32] = 12
                    _25968 = sha3(mem[(32 * stor15[address(arg5)].field_0 + idx - 1) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192], 12)
                    _25969 = mem[64]
                    mem[64] = mem[64] + 320
                    mem[_25969] = stor12[mem[(32 * stor15[address(arg5)].field_0 + idx - 1) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]].field_0
                    mem[_25969 + 32] = stor1[_25968]
                    mem[_25969 + 64] = stor2[_25968]
                    mem[_25969 + 96] = stor3[_25968]
                    mem[_25969 + 128] = stor4[_25968]
                    mem[_25969 + 160] = stor5[_25968]
                    mem[_25969 + 192] = stor6[_25968]
                    mem[_25969 + 224] = stor7[_25968].field_0
                    mem[_25969 + 256] = bool(stor7[_25968].field_160)
                    mem[_25969 + 288] = stor8[_25968]
                    if idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]:
                        revert with 0, 50
                    mem[(32 * idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224] = _25969
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
                if stor15[address(arg5)].field_0 - 1 > !arg2:
                    revert with 0, 17
                if stor15[address(arg5)].field_0 - 1 > !arg2:
                    revert with 0, 17
                if stor15[address(arg5)].field_0 + arg2 - 1 < mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                    _27159 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_27159] = 7
                    mem[_27159 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                    _28484 = mem[64]
                    mem[mem[64]] = 96
                    _29068 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                    mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                    idx = 0
                    s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                    t = mem[64] + 128
                    while idx < _29068:
                        _37468 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_37468 + 32]
                        mem[t + 64] = mem[_37468 + 64]
                        mem[t + 96] = mem[_37468 + 96]
                        mem[t + 128] = mem[_37468 + 128]
                        mem[t + 160] = mem[_37468 + 172 len 20]
                        mem[t + 192] = mem[_37468 + 192]
                        mem[t + 224] = mem[_37468 + 236 len 20]
                        mem[t + 256] = bool(mem[_37468 + 256])
                        mem[t + 288] = mem[_37468 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_28484 + 32] = stor15[address(arg5)].field_0 + arg2 - 1
                    mem[_28484 + 64] = (320 * _29068) + 128
                    _38206 = mem[_27159]
                    mem[_28484 + (320 * _29068) + 128] = mem[_27159]
                    mem[_28484 + (320 * _29068) + 160 len ceil32(_38206)] = mem[_27159 + 32 len ceil32(_38206)]
                    var55001 = ceil32(_38206)
                    if ceil32(_38206) > _38206:
                        mem[_28484 + (320 * _29068) + _38206 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_38206) + _28484 + (320 * _29068) + -mem[64] + 160
                _27160 = mem[64]
                mem[64] = mem[64] + 64
                mem[_27160] = 4
                mem[_27160 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                _28485 = mem[64]
                mem[mem[64]] = 96
                _29069 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                idx = 0
                s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                t = mem[64] + 128
                while idx < _29069:
                    _37475 = mem[s]
                    mem[t] = mem[mem[s]]
                    mem[t + 32] = mem[_37475 + 32]
                    mem[t + 64] = mem[_37475 + 64]
                    mem[t + 96] = mem[_37475 + 96]
                    mem[t + 128] = mem[_37475 + 128]
                    mem[t + 160] = mem[_37475 + 172 len 20]
                    mem[t + 192] = mem[_37475 + 192]
                    mem[t + 224] = mem[_37475 + 236 len 20]
                    mem[t + 256] = bool(mem[_37475 + 256])
                    mem[t + 288] = mem[_37475 + 288]
                    idx = idx + 1
                    s = s + 32
                    t = t + 320
                    continue 
                mem[_28485 + 32] = stor15[address(arg5)].field_0 + arg2 - 1
                mem[_28485 + 64] = (320 * _29069) + 128
                _38207 = mem[_27160]
                mem[_28485 + (320 * _29069) + 128] = mem[_27160]
                mem[_28485 + (320 * _29069) + 160 len ceil32(_38207)] = mem[_27160 + 32 len ceil32(_38207)]
                var55001 = ceil32(_38207)
                if ceil32(_38207) > _38207:
                    mem[_28485 + (320 * _29069) + _38207 + 160] = 0
                return memory
                  from mem[64]
                   len ceil32(_38207) + _28485 + (320 * _29069) + -mem[64] + 160
            mem[64] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 544
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 256] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 288] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 320] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 352] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 384] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 416] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 448] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 480] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 512] = 0
            mem[var39001] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224
            s = var39001
            idx = var39002
            while idx - 1:
                mem[64] = mem[64] + 320
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 256] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 288] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 320] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 352] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 384] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 416] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 448] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 480] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 512] = 0
                mem[s + 32] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224
                s = s + 32
                idx = idx - 1
                continue 
            idx = 0
            while idx < arg2:
                if stor15[address(arg5)].field_0 - 1 > !idx:
                    revert with 0, 17
                if stor15[address(arg5)].field_0 + idx - 1 >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                    revert with 0, 50
                mem[0] = mem[(32 * stor15[address(arg5)].field_0 + idx - 1) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]
                mem[32] = 12
                _50477 = sha3(mem[(32 * stor15[address(arg5)].field_0 + idx - 1) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192], 12)
                _50478 = mem[64]
                mem[64] = mem[64] + 320
                mem[_50478] = stor12[mem[(32 * stor15[address(arg5)].field_0 + idx - 1) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]].field_0
                mem[_50478 + 32] = stor1[_50477]
                mem[_50478 + 64] = stor2[_50477]
                mem[_50478 + 96] = stor3[_50477]
                mem[_50478 + 128] = stor4[_50477]
                mem[_50478 + 160] = stor5[_50477]
                mem[_50478 + 192] = stor6[_50477]
                mem[_50478 + 224] = stor7[_50477].field_0
                mem[_50478 + 256] = bool(stor7[_50477].field_160)
                mem[_50478 + 288] = stor8[_50477]
                if idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]:
                    revert with 0, 50
                mem[(32 * idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224] = _50478
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
            if stor15[address(arg5)].field_0 - 1 > !arg2:
                revert with 0, 17
            if stor15[address(arg5)].field_0 - 1 > !arg2:
                revert with 0, 17
            if stor15[address(arg5)].field_0 + arg2 - 1 < mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                _51692 = mem[64]
                mem[64] = mem[64] + 64
                mem[_51692] = 7
                mem[_51692 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                _52457 = mem[64]
                mem[mem[64]] = 96
                _53161 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                idx = 0
                s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                t = mem[64] + 128
                while idx < _53161:
                    _58850 = mem[s]
                    mem[t] = mem[mem[s]]
                    mem[t + 32] = mem[_58850 + 32]
                    mem[t + 64] = mem[_58850 + 64]
                    mem[t + 96] = mem[_58850 + 96]
                    mem[t + 128] = mem[_58850 + 128]
                    mem[t + 160] = mem[_58850 + 172 len 20]
                    mem[t + 192] = mem[_58850 + 192]
                    mem[t + 224] = mem[_58850 + 236 len 20]
                    mem[t + 256] = bool(mem[_58850 + 256])
                    mem[t + 288] = mem[_58850 + 288]
                    idx = idx + 1
                    s = s + 32
                    t = t + 320
                    continue 
                mem[_52457 + 32] = stor15[address(arg5)].field_0 + arg2 - 1
                mem[_52457 + 64] = (320 * _53161) + 128
                _60032 = mem[_51692]
                mem[_52457 + (320 * _53161) + 128] = mem[_51692]
                mem[_52457 + (320 * _53161) + 160 len ceil32(_60032)] = mem[_51692 + 32 len ceil32(_60032)]
                var62001 = ceil32(_60032)
                if ceil32(_60032) > _60032:
                    mem[_52457 + (320 * _53161) + _60032 + 160] = 0
                return memory
                  from mem[64]
                   len ceil32(_60032) + _52457 + (320 * _53161) + -mem[64] + 160
            _51693 = mem[64]
            mem[64] = mem[64] + 64
            mem[_51693] = 4
            mem[_51693 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
            _52458 = mem[64]
            mem[mem[64]] = 96
            _53162 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
            mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
            idx = 0
            s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
            t = mem[64] + 128
            while idx < _53162:
                _58857 = mem[s]
                mem[t] = mem[mem[s]]
                mem[t + 32] = mem[_58857 + 32]
                mem[t + 64] = mem[_58857 + 64]
                mem[t + 96] = mem[_58857 + 96]
                mem[t + 128] = mem[_58857 + 128]
                mem[t + 160] = mem[_58857 + 172 len 20]
                mem[t + 192] = mem[_58857 + 192]
                mem[t + 224] = mem[_58857 + 236 len 20]
                mem[t + 256] = bool(mem[_58857 + 256])
                mem[t + 288] = mem[_58857 + 288]
                idx = idx + 1
                s = s + 32
                t = t + 320
                continue 
            mem[_52458 + 32] = stor15[address(arg5)].field_0 + arg2 - 1
            mem[_52458 + 64] = (320 * _53162) + 128
            _60033 = mem[_51693]
            mem[_52458 + (320 * _53162) + 128] = mem[_51693]
            mem[_52458 + (320 * _53162) + 160 len ceil32(_60033)] = mem[_51693 + 32 len ceil32(_60033)]
            var62001 = ceil32(_60033)
            if ceil32(_60033) > _60033:
                mem[_52458 + (320 * _53162) + _60033 + 160] = 0
            return memory
              from mem[64]
               len ceil32(_60033) + _52458 + (320 * _53162) + -mem[64] + 160
        mem[0] = sha3(address(arg5), 15)
        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192] = stor15[address(arg5)].field_0
        idx = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192
        s = 0
        while (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160 > idx:
            mem[idx + 32] = stor15[address(arg5)][s].field_256
            idx = idx + 32
            s = s + 1
            continue 
        if not stor15[address(arg5)].field_0:
            mem[64] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 288
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224] = 4
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 256] = 0x6f76657200000000000000000000000000000000000000000000000000000000
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 288] = 96
            _39695 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 384] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
            idx = 0
            s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
            t = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 416
            while idx < mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]:
                _49074 = mem[s]
                mem[t] = mem[mem[s]]
                mem[t + 32] = mem[_49074 + 32]
                mem[t + 64] = mem[_49074 + 64]
                mem[t + 96] = mem[_49074 + 96]
                mem[t + 128] = mem[_49074 + 128]
                mem[t + 160] = mem[_49074 + 172 len 20]
                mem[t + 192] = mem[_49074 + 192]
                mem[t + 224] = mem[_49074 + 236 len 20]
                mem[t + 256] = bool(mem[_49074 + 256])
                mem[t + 288] = mem[_49074 + 288]
                idx = idx + 1
                s = s + 32
                t = t + 320
                continue 
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 320] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 352] = (320 * _39695) + 128
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (320 * _39695) + 416] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224]
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (320 * _39695) + 448 len ceil32(mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224])] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 256 len ceil32(mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224])]
            var38001 = ceil32(mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224])
            if ceil32(mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224]) > mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224]:
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (320 * _39695) + mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224] + 448] = 0
            return memory
              from mem[64]
               len ceil32(mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224]) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (320 * _39695) + -mem[64] + 448
        if arg1 < stor15[address(arg5)].field_0:
            if arg3:
                if arg2 <= arg1:
                    if arg2 > test266151307():
                        revert with 0, 65
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192] = arg2
                    mem[64] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224
                    if not arg2:
                        idx = 0
                        while idx < arg2:
                            if arg1 < idx:
                                revert with 0, 17
                            if arg1 - idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                                revert with 0, 50
                            mem[0] = mem[(32 * arg1 - idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]
                            mem[32] = 12
                            _50489 = sha3(mem[(32 * arg1 - idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192], 12)
                            _50490 = mem[64]
                            mem[64] = mem[64] + 320
                            mem[_50490] = stor12[mem[(32 * arg1 - idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]].field_0
                            mem[_50490 + 32] = stor1[_50489]
                            mem[_50490 + 64] = stor2[_50489]
                            mem[_50490 + 96] = stor3[_50489]
                            mem[_50490 + 128] = stor4[_50489]
                            mem[_50490 + 160] = stor5[_50489]
                            mem[_50490 + 192] = stor6[_50489]
                            mem[_50490 + 224] = stor7[_50489].field_0
                            mem[_50490 + 256] = bool(stor7[_50489].field_160)
                            mem[_50490 + 288] = stor8[_50489]
                            if idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]:
                                revert with 0, 50
                            mem[(32 * idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224] = _50490
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            continue 
                        if arg1 < arg2:
                            _49274 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_49274] = 4
                            mem[_49274 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                            _49692 = mem[64]
                            mem[mem[64]] = 96
                            _50486 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                            mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                            idx = 0
                            s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                            t = mem[64] + 128
                            while idx < _50486:
                                _58878 = mem[s]
                                mem[t] = mem[mem[s]]
                                mem[t + 32] = mem[_58878 + 32]
                                mem[t + 64] = mem[_58878 + 64]
                                mem[t + 96] = mem[_58878 + 96]
                                mem[t + 128] = mem[_58878 + 128]
                                mem[t + 160] = mem[_58878 + 172 len 20]
                                mem[t + 192] = mem[_58878 + 192]
                                mem[t + 224] = mem[_58878 + 236 len 20]
                                mem[t + 256] = bool(mem[_58878 + 256])
                                mem[t + 288] = mem[_58878 + 288]
                                idx = idx + 1
                                s = s + 32
                                t = t + 320
                                continue 
                            mem[_49692 + 32] = 0
                            mem[_49692 + 64] = (320 * _50486) + 128
                            _60036 = mem[_49274]
                            mem[_49692 + (320 * _50486) + 128] = mem[_49274]
                            mem[_49692 + (320 * _50486) + 160 len ceil32(_60036)] = mem[_49274 + 32 len ceil32(_60036)]
                            var46001 = ceil32(_60036)
                            if ceil32(_60036) > _60036:
                                mem[_49692 + (320 * _50486) + _60036 + 160] = 0
                            return memory
                              from mem[64]
                               len ceil32(_60036) + _49692 + (320 * _50486) + -mem[64] + 160
                        _50487 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_50487] = 7
                        mem[_50487 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                        _51240 = mem[64]
                        mem[mem[64]] = 96
                        _51697 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                        mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                        idx = 0
                        s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                        t = mem[64] + 128
                        while idx < _51697:
                            _58885 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_58885 + 32]
                            mem[t + 64] = mem[_58885 + 64]
                            mem[t + 96] = mem[_58885 + 96]
                            mem[t + 128] = mem[_58885 + 128]
                            mem[t + 160] = mem[_58885 + 172 len 20]
                            mem[t + 192] = mem[_58885 + 192]
                            mem[t + 224] = mem[_58885 + 236 len 20]
                            mem[t + 256] = bool(mem[_58885 + 256])
                            mem[t + 288] = mem[_58885 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_51240 + 32] = arg1 - arg2
                        mem[_51240 + 64] = (320 * _51697) + 128
                        _60037 = mem[_50487]
                        mem[_51240 + (320 * _51697) + 128] = mem[_50487]
                        mem[_51240 + (320 * _51697) + 160 len ceil32(_60037)] = mem[_50487 + 32 len ceil32(_60037)]
                        var49001 = ceil32(_60037)
                        if ceil32(_60037) > _60037:
                            mem[_51240 + (320 * _51697) + _60037 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_60037) + _51240 + (320 * _51697) + -mem[64] + 160
                    mem[64] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 544
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 256] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 288] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 320] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 352] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 384] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 416] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 448] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 480] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 512] = 0
                    mem[var36001] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224
                    s = var36001
                    idx = var36002
                    while idx - 1:
                        mem[64] = mem[64] + 320
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 256] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 288] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 320] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 352] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 384] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 416] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 448] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 480] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 512] = 0
                        mem[s + 32] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224
                        s = s + 32
                        idx = idx - 1
                        continue 
                    idx = 0
                    while idx < arg2:
                        if arg1 < idx:
                            revert with 0, 17
                        if arg1 - idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                            revert with 0, 50
                        mem[0] = mem[(32 * arg1 - idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]
                        mem[32] = 12
                        _65829 = sha3(mem[(32 * arg1 - idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192], 12)
                        _65830 = mem[64]
                        mem[64] = mem[64] + 320
                        mem[_65830] = stor12[mem[(32 * arg1 - idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]].field_0
                        mem[_65830 + 32] = stor1[_65829]
                        mem[_65830 + 64] = stor2[_65829]
                        mem[_65830 + 96] = stor3[_65829]
                        mem[_65830 + 128] = stor4[_65829]
                        mem[_65830 + 160] = stor5[_65829]
                        mem[_65830 + 192] = stor6[_65829]
                        mem[_65830 + 224] = stor7[_65829].field_0
                        mem[_65830 + 256] = bool(stor7[_65829].field_160)
                        mem[_65830 + 288] = stor8[_65829]
                        if idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]:
                            revert with 0, 50
                        mem[(32 * idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224] = _65830
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if arg1 < arg2:
                        _65240 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_65240] = 4
                        mem[_65240 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                        _65425 = mem[64]
                        mem[mem[64]] = 96
                        _65826 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                        mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                        idx = 0
                        s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                        t = mem[64] + 128
                        while idx < _65826:
                            _68568 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_68568 + 32]
                            mem[t + 64] = mem[_68568 + 64]
                            mem[t + 96] = mem[_68568 + 96]
                            mem[t + 128] = mem[_68568 + 128]
                            mem[t + 160] = mem[_68568 + 172 len 20]
                            mem[t + 192] = mem[_68568 + 192]
                            mem[t + 224] = mem[_68568 + 236 len 20]
                            mem[t + 256] = bool(mem[_68568 + 256])
                            mem[t + 288] = mem[_68568 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_65425 + 32] = 0
                        mem[_65425 + 64] = (320 * _65826) + 128
                        _69257 = mem[_65240]
                        mem[_65425 + (320 * _65826) + 128] = mem[_65240]
                        mem[_65425 + (320 * _65826) + 160 len ceil32(_69257)] = mem[_65240 + 32 len ceil32(_69257)]
                        var53001 = ceil32(_69257)
                        if ceil32(_69257) > _69257:
                            mem[_65425 + (320 * _65826) + _69257 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_69257) + _65425 + (320 * _65826) + -mem[64] + 160
                    _65827 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_65827] = 7
                    mem[_65827 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                    _66252 = mem[64]
                    mem[mem[64]] = 96
                    _66460 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                    mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                    idx = 0
                    s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                    t = mem[64] + 128
                    while idx < _66460:
                        _68575 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_68575 + 32]
                        mem[t + 64] = mem[_68575 + 64]
                        mem[t + 96] = mem[_68575 + 96]
                        mem[t + 128] = mem[_68575 + 128]
                        mem[t + 160] = mem[_68575 + 172 len 20]
                        mem[t + 192] = mem[_68575 + 192]
                        mem[t + 224] = mem[_68575 + 236 len 20]
                        mem[t + 256] = bool(mem[_68575 + 256])
                        mem[t + 288] = mem[_68575 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_66252 + 32] = arg1 - arg2
                    mem[_66252 + 64] = (320 * _66460) + 128
                    _69258 = mem[_65827]
                    mem[_66252 + (320 * _66460) + 128] = mem[_65827]
                    mem[_66252 + (320 * _66460) + 160 len ceil32(_69258)] = mem[_65827 + 32 len ceil32(_69258)]
                    var56001 = ceil32(_69258)
                    if ceil32(_69258) > _69258:
                        mem[_66252 + (320 * _66460) + _69258 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_69258) + _66252 + (320 * _66460) + -mem[64] + 160
                if 1 > !arg1:
                    revert with 0, 17
                if arg1 + 1 > test266151307():
                    revert with 0, 65
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192] = arg1 + 1
                mem[64] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 224
                if not arg1 + 1:
                    idx = 0
                    while idx < arg1 + 1:
                        if arg1 < idx:
                            revert with 0, 17
                        if arg1 - idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                            revert with 0, 50
                        mem[0] = mem[(32 * arg1 - idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]
                        mem[32] = 12
                        _50495 = sha3(mem[(32 * arg1 - idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192], 12)
                        _50496 = mem[64]
                        mem[64] = mem[64] + 320
                        mem[_50496] = stor12[mem[(32 * arg1 - idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]].field_0
                        mem[_50496 + 32] = stor1[_50495]
                        mem[_50496 + 64] = stor2[_50495]
                        mem[_50496 + 96] = stor3[_50495]
                        mem[_50496 + 128] = stor4[_50495]
                        mem[_50496 + 160] = stor5[_50495]
                        mem[_50496 + 192] = stor6[_50495]
                        mem[_50496 + 224] = stor7[_50495].field_0
                        mem[_50496 + 256] = bool(stor7[_50495].field_160)
                        mem[_50496 + 288] = stor8[_50495]
                        if idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]:
                            revert with 0, 50
                        mem[(32 * idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224] = _50496
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if arg1 < arg1 + 1:
                        _49275 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_49275] = 4
                        mem[_49275 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                        _49694 = mem[64]
                        mem[mem[64]] = 96
                        _50492 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                        mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                        idx = 0
                        s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                        t = mem[64] + 128
                        while idx < _50492:
                            _58892 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_58892 + 32]
                            mem[t + 64] = mem[_58892 + 64]
                            mem[t + 96] = mem[_58892 + 96]
                            mem[t + 128] = mem[_58892 + 128]
                            mem[t + 160] = mem[_58892 + 172 len 20]
                            mem[t + 192] = mem[_58892 + 192]
                            mem[t + 224] = mem[_58892 + 236 len 20]
                            mem[t + 256] = bool(mem[_58892 + 256])
                            mem[t + 288] = mem[_58892 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_49694 + 32] = 0
                        mem[_49694 + 64] = (320 * _50492) + 128
                        _60038 = mem[_49275]
                        mem[_49694 + (320 * _50492) + 128] = mem[_49275]
                        mem[_49694 + (320 * _50492) + 160 len ceil32(_60038)] = mem[_49275 + 32 len ceil32(_60038)]
                        var50001 = ceil32(_60038)
                        if ceil32(_60038) > _60038:
                            mem[_49694 + (320 * _50492) + _60038 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_60038) + _49694 + (320 * _50492) + -mem[64] + 160
                    _50493 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_50493] = 7
                    mem[_50493 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                    _51249 = mem[64]
                    mem[mem[64]] = 96
                    _51699 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                    mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                    idx = 0
                    s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                    t = mem[64] + 128
                    while idx < _51699:
                        _58899 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_58899 + 32]
                        mem[t + 64] = mem[_58899 + 64]
                        mem[t + 96] = mem[_58899 + 96]
                        mem[t + 128] = mem[_58899 + 128]
                        mem[t + 160] = mem[_58899 + 172 len 20]
                        mem[t + 192] = mem[_58899 + 192]
                        mem[t + 224] = mem[_58899 + 236 len 20]
                        mem[t + 256] = bool(mem[_58899 + 256])
                        mem[t + 288] = mem[_58899 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_51249 + 32] = -1
                    mem[_51249 + 64] = (320 * _51699) + 128
                    _60039 = mem[_50493]
                    mem[_51249 + (320 * _51699) + 128] = mem[_50493]
                    mem[_51249 + (320 * _51699) + 160 len ceil32(_60039)] = mem[_50493 + 32 len ceil32(_60039)]
                    var53001 = ceil32(_60039)
                    if ceil32(_60039) > _60039:
                        mem[_51249 + (320 * _51699) + _60039 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_60039) + _51249 + (320 * _51699) + -mem[64] + 160
                mem[64] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 544
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 224] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 256] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 288] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 320] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 352] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 384] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 416] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 448] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 480] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 512] = 0
                mem[var40001] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 224
                s = var40001
                idx = var40002
                while idx - 1:
                    mem[64] = mem[64] + 320
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 224] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 256] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 288] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 320] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 352] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 384] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 416] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 448] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 480] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 512] = 0
                    mem[s + 32] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 224
                    s = s + 32
                    idx = idx - 1
                    continue 
                idx = 0
                while idx < arg1 + 1:
                    if arg1 < idx:
                        revert with 0, 17
                    if arg1 - idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                        revert with 0, 50
                    mem[0] = mem[(32 * arg1 - idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]
                    mem[32] = 12
                    _65837 = sha3(mem[(32 * arg1 - idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192], 12)
                    _65838 = mem[64]
                    mem[64] = mem[64] + 320
                    mem[_65838] = stor12[mem[(32 * arg1 - idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]].field_0
                    mem[_65838 + 32] = stor1[_65837]
                    mem[_65838 + 64] = stor2[_65837]
                    mem[_65838 + 96] = stor3[_65837]
                    mem[_65838 + 128] = stor4[_65837]
                    mem[_65838 + 160] = stor5[_65837]
                    mem[_65838 + 192] = stor6[_65837]
                    mem[_65838 + 224] = stor7[_65837].field_0
                    mem[_65838 + 256] = bool(stor7[_65837].field_160)
                    mem[_65838 + 288] = stor8[_65837]
                    if idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]:
                        revert with 0, 50
                    mem[(32 * idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224] = _65838
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
                if arg1 < arg1 + 1:
                    _65241 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_65241] = 4
                    mem[_65241 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                    _65429 = mem[64]
                    mem[mem[64]] = 96
                    _65834 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                    mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                    idx = 0
                    s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                    t = mem[64] + 128
                    while idx < _65834:
                        _68582 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_68582 + 32]
                        mem[t + 64] = mem[_68582 + 64]
                        mem[t + 96] = mem[_68582 + 96]
                        mem[t + 128] = mem[_68582 + 128]
                        mem[t + 160] = mem[_68582 + 172 len 20]
                        mem[t + 192] = mem[_68582 + 192]
                        mem[t + 224] = mem[_68582 + 236 len 20]
                        mem[t + 256] = bool(mem[_68582 + 256])
                        mem[t + 288] = mem[_68582 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_65429 + 32] = 0
                    mem[_65429 + 64] = (320 * _65834) + 128
                    _69259 = mem[_65241]
                    mem[_65429 + (320 * _65834) + 128] = mem[_65241]
                    mem[_65429 + (320 * _65834) + 160 len ceil32(_69259)] = mem[_65241 + 32 len ceil32(_69259)]
                    var57001 = ceil32(_69259)
                    if ceil32(_69259) > _69259:
                        mem[_65429 + (320 * _65834) + _69259 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_69259) + _65429 + (320 * _65834) + -mem[64] + 160
                _65835 = mem[64]
                mem[64] = mem[64] + 64
                mem[_65835] = 7
                mem[_65835 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                _66260 = mem[64]
                mem[mem[64]] = 96
                _66462 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                idx = 0
                s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                t = mem[64] + 128
                while idx < _66462:
                    _68589 = mem[s]
                    mem[t] = mem[mem[s]]
                    mem[t + 32] = mem[_68589 + 32]
                    mem[t + 64] = mem[_68589 + 64]
                    mem[t + 96] = mem[_68589 + 96]
                    mem[t + 128] = mem[_68589 + 128]
                    mem[t + 160] = mem[_68589 + 172 len 20]
                    mem[t + 192] = mem[_68589 + 192]
                    mem[t + 224] = mem[_68589 + 236 len 20]
                    mem[t + 256] = bool(mem[_68589 + 256])
                    mem[t + 288] = mem[_68589 + 288]
                    idx = idx + 1
                    s = s + 32
                    t = t + 320
                    continue 
                mem[_66260 + 32] = -1
                mem[_66260 + 64] = (320 * _66462) + 128
                _69260 = mem[_65835]
                mem[_66260 + (320 * _66462) + 128] = mem[_65835]
                mem[_66260 + (320 * _66462) + 160 len ceil32(_69260)] = mem[_65835 + 32 len ceil32(_69260)]
                var60001 = ceil32(_69260)
                if ceil32(_69260) > _69260:
                    mem[_66260 + (320 * _66462) + _69260 + 160] = 0
                return memory
                  from mem[64]
                   len ceil32(_69260) + _66260 + (320 * _66462) + -mem[64] + 160
            if stor15[address(arg5)].field_0 < arg1:
                revert with 0, 17
            if arg2 <= stor15[address(arg5)].field_0 - arg1:
                if arg2 > test266151307():
                    revert with 0, 65
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192] = arg2
                mem[64] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224
                if not arg2:
                    idx = 0
                    while idx < arg2:
                        if arg1 > !idx:
                            revert with 0, 17
                        if arg1 + idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                            revert with 0, 50
                        mem[0] = mem[(32 * arg1 + idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]
                        mem[32] = 12
                        _50499 = sha3(mem[(32 * arg1 + idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192], 12)
                        _50500 = mem[64]
                        mem[64] = mem[64] + 320
                        mem[_50500] = stor12[mem[(32 * arg1 + idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]].field_0
                        mem[_50500 + 32] = stor1[_50499]
                        mem[_50500 + 64] = stor2[_50499]
                        mem[_50500 + 96] = stor3[_50499]
                        mem[_50500 + 128] = stor4[_50499]
                        mem[_50500 + 160] = stor5[_50499]
                        mem[_50500 + 192] = stor6[_50499]
                        mem[_50500 + 224] = stor7[_50499].field_0
                        mem[_50500 + 256] = bool(stor7[_50499].field_160)
                        mem[_50500 + 288] = stor8[_50499]
                        if idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]:
                            revert with 0, 50
                        mem[(32 * idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224] = _50500
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if arg1 > !arg2:
                        revert with 0, 17
                    if arg1 > !arg2:
                        revert with 0, 17
                    if arg1 + arg2 < mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                        _51700 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_51700] = 7
                        mem[_51700 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                        _52489 = mem[64]
                        mem[mem[64]] = 96
                        _53169 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                        mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                        idx = 0
                        s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                        t = mem[64] + 128
                        while idx < _53169:
                            _58906 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_58906 + 32]
                            mem[t + 64] = mem[_58906 + 64]
                            mem[t + 96] = mem[_58906 + 96]
                            mem[t + 128] = mem[_58906 + 128]
                            mem[t + 160] = mem[_58906 + 172 len 20]
                            mem[t + 192] = mem[_58906 + 192]
                            mem[t + 224] = mem[_58906 + 236 len 20]
                            mem[t + 256] = bool(mem[_58906 + 256])
                            mem[t + 288] = mem[_58906 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_52489 + 32] = arg1 + arg2
                        mem[_52489 + 64] = (320 * _53169) + 128
                        _60040 = mem[_51700]
                        mem[_52489 + (320 * _53169) + 128] = mem[_51700]
                        mem[_52489 + (320 * _53169) + 160 len ceil32(_60040)] = mem[_51700 + 32 len ceil32(_60040)]
                        var55001 = ceil32(_60040)
                        if ceil32(_60040) > _60040:
                            mem[_52489 + (320 * _53169) + _60040 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_60040) + _52489 + (320 * _53169) + -mem[64] + 160
                    _51701 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_51701] = 4
                    mem[_51701 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                    _52490 = mem[64]
                    mem[mem[64]] = 96
                    _53170 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                    mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                    idx = 0
                    s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                    t = mem[64] + 128
                    while idx < _53170:
                        _58913 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_58913 + 32]
                        mem[t + 64] = mem[_58913 + 64]
                        mem[t + 96] = mem[_58913 + 96]
                        mem[t + 128] = mem[_58913 + 128]
                        mem[t + 160] = mem[_58913 + 172 len 20]
                        mem[t + 192] = mem[_58913 + 192]
                        mem[t + 224] = mem[_58913 + 236 len 20]
                        mem[t + 256] = bool(mem[_58913 + 256])
                        mem[t + 288] = mem[_58913 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_52490 + 32] = arg1 + arg2
                    mem[_52490 + 64] = (320 * _53170) + 128
                    _60041 = mem[_51701]
                    mem[_52490 + (320 * _53170) + 128] = mem[_51701]
                    mem[_52490 + (320 * _53170) + 160 len ceil32(_60041)] = mem[_51701 + 32 len ceil32(_60041)]
                    var55001 = ceil32(_60041)
                    if ceil32(_60041) > _60041:
                        mem[_52490 + (320 * _53170) + _60041 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_60041) + _52490 + (320 * _53170) + -mem[64] + 160
                mem[64] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 544
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 256] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 288] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 320] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 352] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 384] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 416] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 448] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 480] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 512] = 0
                mem[var39001] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224
                s = var39001
                idx = var39002
                while idx - 1:
                    mem[64] = mem[64] + 320
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 256] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 288] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 320] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 352] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 384] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 416] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 448] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 480] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 512] = 0
                    mem[s + 32] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224
                    s = s + 32
                    idx = idx - 1
                    continue 
                idx = 0
                while idx < arg2:
                    if arg1 > !idx:
                        revert with 0, 17
                    if arg1 + idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                        revert with 0, 50
                    mem[0] = mem[(32 * arg1 + idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]
                    mem[32] = 12
                    _65843 = sha3(mem[(32 * arg1 + idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192], 12)
                    _65844 = mem[64]
                    mem[64] = mem[64] + 320
                    mem[_65844] = stor12[mem[(32 * arg1 + idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]].field_0
                    mem[_65844 + 32] = stor1[_65843]
                    mem[_65844 + 64] = stor2[_65843]
                    mem[_65844 + 96] = stor3[_65843]
                    mem[_65844 + 128] = stor4[_65843]
                    mem[_65844 + 160] = stor5[_65843]
                    mem[_65844 + 192] = stor6[_65843]
                    mem[_65844 + 224] = stor7[_65843].field_0
                    mem[_65844 + 256] = bool(stor7[_65843].field_160)
                    mem[_65844 + 288] = stor8[_65843]
                    if idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]:
                        revert with 0, 50
                    mem[(32 * idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224] = _65844
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
                if arg1 > !arg2:
                    revert with 0, 17
                if arg1 > !arg2:
                    revert with 0, 17
                if arg1 + arg2 < mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                    _66463 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_66463] = 7
                    mem[_66463 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                    _66680 = mem[64]
                    mem[mem[64]] = 96
                    _66964 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                    mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                    idx = 0
                    s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                    t = mem[64] + 128
                    while idx < _66964:
                        _68596 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_68596 + 32]
                        mem[t + 64] = mem[_68596 + 64]
                        mem[t + 96] = mem[_68596 + 96]
                        mem[t + 128] = mem[_68596 + 128]
                        mem[t + 160] = mem[_68596 + 172 len 20]
                        mem[t + 192] = mem[_68596 + 192]
                        mem[t + 224] = mem[_68596 + 236 len 20]
                        mem[t + 256] = bool(mem[_68596 + 256])
                        mem[t + 288] = mem[_68596 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_66680 + 32] = arg1 + arg2
                    mem[_66680 + 64] = (320 * _66964) + 128
                    _69261 = mem[_66463]
                    mem[_66680 + (320 * _66964) + 128] = mem[_66463]
                    mem[_66680 + (320 * _66964) + 160 len ceil32(_69261)] = mem[_66463 + 32 len ceil32(_69261)]
                    var62001 = ceil32(_69261)
                    if ceil32(_69261) > _69261:
                        mem[_66680 + (320 * _66964) + _69261 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_69261) + _66680 + (320 * _66964) + -mem[64] + 160
                _66464 = mem[64]
                mem[64] = mem[64] + 64
                mem[_66464] = 4
                mem[_66464 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                _66681 = mem[64]
                mem[mem[64]] = 96
                _66965 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                idx = 0
                s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                t = mem[64] + 128
                while idx < _66965:
                    _68603 = mem[s]
                    mem[t] = mem[mem[s]]
                    mem[t + 32] = mem[_68603 + 32]
                    mem[t + 64] = mem[_68603 + 64]
                    mem[t + 96] = mem[_68603 + 96]
                    mem[t + 128] = mem[_68603 + 128]
                    mem[t + 160] = mem[_68603 + 172 len 20]
                    mem[t + 192] = mem[_68603 + 192]
                    mem[t + 224] = mem[_68603 + 236 len 20]
                    mem[t + 256] = bool(mem[_68603 + 256])
                    mem[t + 288] = mem[_68603 + 288]
                    idx = idx + 1
                    s = s + 32
                    t = t + 320
                    continue 
                mem[_66681 + 32] = arg1 + arg2
                mem[_66681 + 64] = (320 * _66965) + 128
                _69262 = mem[_66464]
                mem[_66681 + (320 * _66965) + 128] = mem[_66464]
                mem[_66681 + (320 * _66965) + 160 len ceil32(_69262)] = mem[_66464 + 32 len ceil32(_69262)]
                var62001 = ceil32(_69262)
                if ceil32(_69262) > _69262:
                    mem[_66681 + (320 * _66965) + _69262 + 160] = 0
                return memory
                  from mem[64]
                   len ceil32(_69262) + _66681 + (320 * _66965) + -mem[64] + 160
            if stor15[address(arg5)].field_0 < arg1:
                revert with 0, 17
            if stor15[address(arg5)].field_0 - arg1 > test266151307():
                revert with 0, 65
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192] = stor15[address(arg5)].field_0 - arg1
            mem[64] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 224
            if not stor15[address(arg5)].field_0 - arg1:
                idx = 0
                while idx < stor15[address(arg5)].field_0 - arg1:
                    if arg1 > !idx:
                        revert with 0, 17
                    if arg1 + idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                        revert with 0, 50
                    mem[0] = mem[(32 * arg1 + idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]
                    mem[32] = 12
                    _50503 = sha3(mem[(32 * arg1 + idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192], 12)
                    _50504 = mem[64]
                    mem[64] = mem[64] + 320
                    mem[_50504] = stor12[mem[(32 * arg1 + idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]].field_0
                    mem[_50504 + 32] = stor1[_50503]
                    mem[_50504 + 64] = stor2[_50503]
                    mem[_50504 + 96] = stor3[_50503]
                    mem[_50504 + 128] = stor4[_50503]
                    mem[_50504 + 160] = stor5[_50503]
                    mem[_50504 + 192] = stor6[_50503]
                    mem[_50504 + 224] = stor7[_50503].field_0
                    mem[_50504 + 256] = bool(stor7[_50503].field_160)
                    mem[_50504 + 288] = stor8[_50503]
                    if idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]:
                        revert with 0, 50
                    mem[(32 * idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224] = _50504
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
                if arg1 > !(stor15[address(arg5)].field_0 - arg1):
                    revert with 0, 17
                if arg1 > !(stor15[address(arg5)].field_0 - arg1):
                    revert with 0, 17
                if stor15[address(arg5)].field_0 < mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                    _51702 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_51702] = 7
                    mem[_51702 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                    _52495 = mem[64]
                    mem[mem[64]] = 96
                    _53171 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                    mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                    idx = 0
                    s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                    t = mem[64] + 128
                    while idx < _53171:
                        _58920 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_58920 + 32]
                        mem[t + 64] = mem[_58920 + 64]
                        mem[t + 96] = mem[_58920 + 96]
                        mem[t + 128] = mem[_58920 + 128]
                        mem[t + 160] = mem[_58920 + 172 len 20]
                        mem[t + 192] = mem[_58920 + 192]
                        mem[t + 224] = mem[_58920 + 236 len 20]
                        mem[t + 256] = bool(mem[_58920 + 256])
                        mem[t + 288] = mem[_58920 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_52495 + 32] = stor15[address(arg5)].field_0
                    mem[_52495 + 64] = (320 * _53171) + 128
                    _60042 = mem[_51702]
                    mem[_52495 + (320 * _53171) + 128] = mem[_51702]
                    mem[_52495 + (320 * _53171) + 160 len ceil32(_60042)] = mem[_51702 + 32 len ceil32(_60042)]
                    var59001 = ceil32(_60042)
                    if ceil32(_60042) > _60042:
                        mem[_52495 + (320 * _53171) + _60042 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_60042) + _52495 + (320 * _53171) + -mem[64] + 160
                _51703 = mem[64]
                mem[64] = mem[64] + 64
                mem[_51703] = 4
                mem[_51703 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                _52496 = mem[64]
                mem[mem[64]] = 96
                _53172 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                idx = 0
                s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                t = mem[64] + 128
                while idx < _53172:
                    _58927 = mem[s]
                    mem[t] = mem[mem[s]]
                    mem[t + 32] = mem[_58927 + 32]
                    mem[t + 64] = mem[_58927 + 64]
                    mem[t + 96] = mem[_58927 + 96]
                    mem[t + 128] = mem[_58927 + 128]
                    mem[t + 160] = mem[_58927 + 172 len 20]
                    mem[t + 192] = mem[_58927 + 192]
                    mem[t + 224] = mem[_58927 + 236 len 20]
                    mem[t + 256] = bool(mem[_58927 + 256])
                    mem[t + 288] = mem[_58927 + 288]
                    idx = idx + 1
                    s = s + 32
                    t = t + 320
                    continue 
                mem[_52496 + 32] = stor15[address(arg5)].field_0
                mem[_52496 + 64] = (320 * _53172) + 128
                _60043 = mem[_51703]
                mem[_52496 + (320 * _53172) + 128] = mem[_51703]
                mem[_52496 + (320 * _53172) + 160 len ceil32(_60043)] = mem[_51703 + 32 len ceil32(_60043)]
                var59001 = ceil32(_60043)
                if ceil32(_60043) > _60043:
                    mem[_52496 + (320 * _53172) + _60043 + 160] = 0
                return memory
                  from mem[64]
                   len ceil32(_60043) + _52496 + (320 * _53172) + -mem[64] + 160
            mem[64] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 544
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 224] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 256] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 288] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 320] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 352] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 384] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 416] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 448] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 480] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 512] = 0
            mem[var43001] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 224
            s = var43001
            idx = var43002
            while idx - 1:
                mem[64] = mem[64] + 320
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 224] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 256] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 288] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 320] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 352] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 384] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 416] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 448] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 480] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 512] = 0
                mem[s + 32] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 224
                s = s + 32
                idx = idx - 1
                continue 
            idx = 0
            while idx < stor15[address(arg5)].field_0 - arg1:
                if arg1 > !idx:
                    revert with 0, 17
                if arg1 + idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                    revert with 0, 50
                mem[0] = mem[(32 * arg1 + idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]
                mem[32] = 12
                _65849 = sha3(mem[(32 * arg1 + idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192], 12)
                _65850 = mem[64]
                mem[64] = mem[64] + 320
                mem[_65850] = stor12[mem[(32 * arg1 + idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]].field_0
                mem[_65850 + 32] = stor1[_65849]
                mem[_65850 + 64] = stor2[_65849]
                mem[_65850 + 96] = stor3[_65849]
                mem[_65850 + 128] = stor4[_65849]
                mem[_65850 + 160] = stor5[_65849]
                mem[_65850 + 192] = stor6[_65849]
                mem[_65850 + 224] = stor7[_65849].field_0
                mem[_65850 + 256] = bool(stor7[_65849].field_160)
                mem[_65850 + 288] = stor8[_65849]
                if idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]:
                    revert with 0, 50
                mem[(32 * idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224] = _65850
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
            if arg1 > !(stor15[address(arg5)].field_0 - arg1):
                revert with 0, 17
            if arg1 > !(stor15[address(arg5)].field_0 - arg1):
                revert with 0, 17
            if stor15[address(arg5)].field_0 < mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                _66465 = mem[64]
                mem[64] = mem[64] + 64
                mem[_66465] = 7
                mem[_66465 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                _66682 = mem[64]
                mem[mem[64]] = 96
                _66966 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                idx = 0
                s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                t = mem[64] + 128
                while idx < _66966:
                    _68610 = mem[s]
                    mem[t] = mem[mem[s]]
                    mem[t + 32] = mem[_68610 + 32]
                    mem[t + 64] = mem[_68610 + 64]
                    mem[t + 96] = mem[_68610 + 96]
                    mem[t + 128] = mem[_68610 + 128]
                    mem[t + 160] = mem[_68610 + 172 len 20]
                    mem[t + 192] = mem[_68610 + 192]
                    mem[t + 224] = mem[_68610 + 236 len 20]
                    mem[t + 256] = bool(mem[_68610 + 256])
                    mem[t + 288] = mem[_68610 + 288]
                    idx = idx + 1
                    s = s + 32
                    t = t + 320
                    continue 
                mem[_66682 + 32] = stor15[address(arg5)].field_0
                mem[_66682 + 64] = (320 * _66966) + 128
                _69263 = mem[_66465]
                mem[_66682 + (320 * _66966) + 128] = mem[_66465]
                mem[_66682 + (320 * _66966) + 160 len ceil32(_69263)] = mem[_66465 + 32 len ceil32(_69263)]
                var66001 = ceil32(_69263)
                if ceil32(_69263) > _69263:
                    mem[_66682 + (320 * _66966) + _69263 + 160] = 0
                return memory
                  from mem[64]
                   len ceil32(_69263) + _66682 + (320 * _66966) + -mem[64] + 160
            _66466 = mem[64]
            mem[64] = mem[64] + 64
            mem[_66466] = 4
            mem[_66466 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
            _66683 = mem[64]
            mem[mem[64]] = 96
            _66967 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
            mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
            idx = 0
            s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
            t = mem[64] + 128
            while idx < _66967:
                _68617 = mem[s]
                mem[t] = mem[mem[s]]
                mem[t + 32] = mem[_68617 + 32]
                mem[t + 64] = mem[_68617 + 64]
                mem[t + 96] = mem[_68617 + 96]
                mem[t + 128] = mem[_68617 + 128]
                mem[t + 160] = mem[_68617 + 172 len 20]
                mem[t + 192] = mem[_68617 + 192]
                mem[t + 224] = mem[_68617 + 236 len 20]
                mem[t + 256] = bool(mem[_68617 + 256])
                mem[t + 288] = mem[_68617 + 288]
                idx = idx + 1
                s = s + 32
                t = t + 320
                continue 
            mem[_66683 + 32] = stor15[address(arg5)].field_0
            mem[_66683 + 64] = (320 * _66967) + 128
            _69264 = mem[_66466]
            mem[_66683 + (320 * _66967) + 128] = mem[_66466]
            mem[_66683 + (320 * _66967) + 160 len ceil32(_69264)] = mem[_66466 + 32 len ceil32(_69264)]
            var66001 = ceil32(_69264)
            if ceil32(_69264) > _69264:
                mem[_66683 + (320 * _66967) + _69264 + 160] = 0
            return memory
              from mem[64]
               len ceil32(_69264) + _66683 + (320 * _66967) + -mem[64] + 160
        if stor15[address(arg5)].field_0 < 1:
            revert with 0, 17
        if arg3:
            if arg2 <= stor15[address(arg5)].field_0 - 1:
                if arg2 > test266151307():
                    revert with 0, 65
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192] = arg2
                mem[64] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224
                if not arg2:
                    idx = 0
                    while idx < arg2:
                        if stor15[address(arg5)].field_0 - 1 < idx:
                            revert with 0, 17
                        if stor15[address(arg5)].field_0 + -idx - 1 >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                            revert with 0, 50
                        mem[0] = mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]
                        mem[32] = 12
                        _50509 = sha3(mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192], 12)
                        _50510 = mem[64]
                        mem[64] = mem[64] + 320
                        mem[_50510] = stor12[mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]].field_0
                        mem[_50510 + 32] = stor1[_50509]
                        mem[_50510 + 64] = stor2[_50509]
                        mem[_50510 + 96] = stor3[_50509]
                        mem[_50510 + 128] = stor4[_50509]
                        mem[_50510 + 160] = stor5[_50509]
                        mem[_50510 + 192] = stor6[_50509]
                        mem[_50510 + 224] = stor7[_50509].field_0
                        mem[_50510 + 256] = bool(stor7[_50509].field_160)
                        mem[_50510 + 288] = stor8[_50509]
                        if idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]:
                            revert with 0, 50
                        mem[(32 * idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224] = _50510
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if stor15[address(arg5)].field_0 - 1 < arg2:
                        _49276 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_49276] = 4
                        mem[_49276 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                        _49698 = mem[64]
                        mem[mem[64]] = 96
                        _50506 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                        mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                        idx = 0
                        s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                        t = mem[64] + 128
                        while idx < _50506:
                            _58934 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_58934 + 32]
                            mem[t + 64] = mem[_58934 + 64]
                            mem[t + 96] = mem[_58934 + 96]
                            mem[t + 128] = mem[_58934 + 128]
                            mem[t + 160] = mem[_58934 + 172 len 20]
                            mem[t + 192] = mem[_58934 + 192]
                            mem[t + 224] = mem[_58934 + 236 len 20]
                            mem[t + 256] = bool(mem[_58934 + 256])
                            mem[t + 288] = mem[_58934 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_49698 + 32] = 0
                        mem[_49698 + 64] = (320 * _50506) + 128
                        _60044 = mem[_49276]
                        mem[_49698 + (320 * _50506) + 128] = mem[_49276]
                        mem[_49698 + (320 * _50506) + 160 len ceil32(_60044)] = mem[_49276 + 32 len ceil32(_60044)]
                        var50001 = ceil32(_60044)
                        if ceil32(_60044) > _60044:
                            mem[_49698 + (320 * _50506) + _60044 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_60044) + _49698 + (320 * _50506) + -mem[64] + 160
                    _50507 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_50507] = 7
                    mem[_50507 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                    _51258 = mem[64]
                    mem[mem[64]] = 96
                    _51705 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                    mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                    idx = 0
                    s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                    t = mem[64] + 128
                    while idx < _51705:
                        _58941 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_58941 + 32]
                        mem[t + 64] = mem[_58941 + 64]
                        mem[t + 96] = mem[_58941 + 96]
                        mem[t + 128] = mem[_58941 + 128]
                        mem[t + 160] = mem[_58941 + 172 len 20]
                        mem[t + 192] = mem[_58941 + 192]
                        mem[t + 224] = mem[_58941 + 236 len 20]
                        mem[t + 256] = bool(mem[_58941 + 256])
                        mem[t + 288] = mem[_58941 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_51258 + 32] = stor15[address(arg5)].field_0 + -arg2 - 1
                    mem[_51258 + 64] = (320 * _51705) + 128
                    _60045 = mem[_50507]
                    mem[_51258 + (320 * _51705) + 128] = mem[_50507]
                    mem[_51258 + (320 * _51705) + 160 len ceil32(_60045)] = mem[_50507 + 32 len ceil32(_60045)]
                    var53001 = ceil32(_60045)
                    if ceil32(_60045) > _60045:
                        mem[_51258 + (320 * _51705) + _60045 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_60045) + _51258 + (320 * _51705) + -mem[64] + 160
                mem[64] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 544
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 256] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 288] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 320] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 352] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 384] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 416] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 448] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 480] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 512] = 0
                mem[var40001] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224
                s = var40001
                idx = var40002
                while idx - 1:
                    mem[64] = mem[64] + 320
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 256] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 288] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 320] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 352] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 384] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 416] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 448] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 480] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 512] = 0
                    mem[s + 32] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224
                    s = s + 32
                    idx = idx - 1
                    continue 
                idx = 0
                while idx < arg2:
                    if stor15[address(arg5)].field_0 - 1 < idx:
                        revert with 0, 17
                    if stor15[address(arg5)].field_0 + -idx - 1 >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                        revert with 0, 50
                    mem[0] = mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]
                    mem[32] = 12
                    _65857 = sha3(mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192], 12)
                    _65858 = mem[64]
                    mem[64] = mem[64] + 320
                    mem[_65858] = stor12[mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]].field_0
                    mem[_65858 + 32] = stor1[_65857]
                    mem[_65858 + 64] = stor2[_65857]
                    mem[_65858 + 96] = stor3[_65857]
                    mem[_65858 + 128] = stor4[_65857]
                    mem[_65858 + 160] = stor5[_65857]
                    mem[_65858 + 192] = stor6[_65857]
                    mem[_65858 + 224] = stor7[_65857].field_0
                    mem[_65858 + 256] = bool(stor7[_65857].field_160)
                    mem[_65858 + 288] = stor8[_65857]
                    if idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]:
                        revert with 0, 50
                    mem[(32 * idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224] = _65858
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
                if stor15[address(arg5)].field_0 - 1 < arg2:
                    _65242 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_65242] = 4
                    mem[_65242 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                    _65439 = mem[64]
                    mem[mem[64]] = 96
                    _65854 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                    mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                    idx = 0
                    s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                    t = mem[64] + 128
                    while idx < _65854:
                        _68624 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_68624 + 32]
                        mem[t + 64] = mem[_68624 + 64]
                        mem[t + 96] = mem[_68624 + 96]
                        mem[t + 128] = mem[_68624 + 128]
                        mem[t + 160] = mem[_68624 + 172 len 20]
                        mem[t + 192] = mem[_68624 + 192]
                        mem[t + 224] = mem[_68624 + 236 len 20]
                        mem[t + 256] = bool(mem[_68624 + 256])
                        mem[t + 288] = mem[_68624 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_65439 + 32] = 0
                    mem[_65439 + 64] = (320 * _65854) + 128
                    _69265 = mem[_65242]
                    mem[_65439 + (320 * _65854) + 128] = mem[_65242]
                    mem[_65439 + (320 * _65854) + 160 len ceil32(_69265)] = mem[_65242 + 32 len ceil32(_69265)]
                    var57001 = ceil32(_69265)
                    if ceil32(_69265) > _69265:
                        mem[_65439 + (320 * _65854) + _69265 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_69265) + _65439 + (320 * _65854) + -mem[64] + 160
                _65855 = mem[64]
                mem[64] = mem[64] + 64
                mem[_65855] = 7
                mem[_65855 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                _66268 = mem[64]
                mem[mem[64]] = 96
                _66468 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                idx = 0
                s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                t = mem[64] + 128
                while idx < _66468:
                    _68631 = mem[s]
                    mem[t] = mem[mem[s]]
                    mem[t + 32] = mem[_68631 + 32]
                    mem[t + 64] = mem[_68631 + 64]
                    mem[t + 96] = mem[_68631 + 96]
                    mem[t + 128] = mem[_68631 + 128]
                    mem[t + 160] = mem[_68631 + 172 len 20]
                    mem[t + 192] = mem[_68631 + 192]
                    mem[t + 224] = mem[_68631 + 236 len 20]
                    mem[t + 256] = bool(mem[_68631 + 256])
                    mem[t + 288] = mem[_68631 + 288]
                    idx = idx + 1
                    s = s + 32
                    t = t + 320
                    continue 
                mem[_66268 + 32] = stor15[address(arg5)].field_0 + -arg2 - 1
                mem[_66268 + 64] = (320 * _66468) + 128
                _69266 = mem[_65855]
                mem[_66268 + (320 * _66468) + 128] = mem[_65855]
                mem[_66268 + (320 * _66468) + 160 len ceil32(_69266)] = mem[_65855 + 32 len ceil32(_69266)]
                var60001 = ceil32(_69266)
                if ceil32(_69266) > _69266:
                    mem[_66268 + (320 * _66468) + _69266 + 160] = 0
                return memory
                  from mem[64]
                   len ceil32(_69266) + _66268 + (320 * _66468) + -mem[64] + 160
            if 1 > !(stor15[address(arg5)].field_0 - 1):
                revert with 0, 17
            if stor15[address(arg5)].field_0 > test266151307():
                revert with 0, 65
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192] = stor15[address(arg5)].field_0
            mem[64] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 224
            if not stor15[address(arg5)].field_0:
                idx = 0
                while idx < stor15[address(arg5)].field_0:
                    if stor15[address(arg5)].field_0 - 1 < idx:
                        revert with 0, 17
                    if stor15[address(arg5)].field_0 + -idx - 1 >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                        revert with 0, 50
                    mem[0] = mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]
                    mem[32] = 12
                    _50515 = sha3(mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192], 12)
                    _50516 = mem[64]
                    mem[64] = mem[64] + 320
                    mem[_50516] = stor12[mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]].field_0
                    mem[_50516 + 32] = stor1[_50515]
                    mem[_50516 + 64] = stor2[_50515]
                    mem[_50516 + 96] = stor3[_50515]
                    mem[_50516 + 128] = stor4[_50515]
                    mem[_50516 + 160] = stor5[_50515]
                    mem[_50516 + 192] = stor6[_50515]
                    mem[_50516 + 224] = stor7[_50515].field_0
                    mem[_50516 + 256] = bool(stor7[_50515].field_160)
                    mem[_50516 + 288] = stor8[_50515]
                    if idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]:
                        revert with 0, 50
                    mem[(32 * idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224] = _50516
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
                if stor15[address(arg5)].field_0 - 1 < stor15[address(arg5)].field_0:
                    _49277 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_49277] = 4
                    mem[_49277 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                    _49700 = mem[64]
                    mem[mem[64]] = 96
                    _50512 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                    mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                    idx = 0
                    s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                    t = mem[64] + 128
                    while idx < _50512:
                        _58948 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_58948 + 32]
                        mem[t + 64] = mem[_58948 + 64]
                        mem[t + 96] = mem[_58948 + 96]
                        mem[t + 128] = mem[_58948 + 128]
                        mem[t + 160] = mem[_58948 + 172 len 20]
                        mem[t + 192] = mem[_58948 + 192]
                        mem[t + 224] = mem[_58948 + 236 len 20]
                        mem[t + 256] = bool(mem[_58948 + 256])
                        mem[t + 288] = mem[_58948 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_49700 + 32] = 0
                    mem[_49700 + 64] = (320 * _50512) + 128
                    _60046 = mem[_49277]
                    mem[_49700 + (320 * _50512) + 128] = mem[_49277]
                    mem[_49700 + (320 * _50512) + 160 len ceil32(_60046)] = mem[_49277 + 32 len ceil32(_60046)]
                    var54001 = ceil32(_60046)
                    if ceil32(_60046) > _60046:
                        mem[_49700 + (320 * _50512) + _60046 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_60046) + _49700 + (320 * _50512) + -mem[64] + 160
                _50513 = mem[64]
                mem[64] = mem[64] + 64
                mem[_50513] = 7
                mem[_50513 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                _51267 = mem[64]
                mem[mem[64]] = 96
                _51707 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                idx = 0
                s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                t = mem[64] + 128
                while idx < _51707:
                    _58955 = mem[s]
                    mem[t] = mem[mem[s]]
                    mem[t + 32] = mem[_58955 + 32]
                    mem[t + 64] = mem[_58955 + 64]
                    mem[t + 96] = mem[_58955 + 96]
                    mem[t + 128] = mem[_58955 + 128]
                    mem[t + 160] = mem[_58955 + 172 len 20]
                    mem[t + 192] = mem[_58955 + 192]
                    mem[t + 224] = mem[_58955 + 236 len 20]
                    mem[t + 256] = bool(mem[_58955 + 256])
                    mem[t + 288] = mem[_58955 + 288]
                    idx = idx + 1
                    s = s + 32
                    t = t + 320
                    continue 
                mem[_51267 + 32] = -1
                mem[_51267 + 64] = (320 * _51707) + 128
                _60047 = mem[_50513]
                mem[_51267 + (320 * _51707) + 128] = mem[_50513]
                mem[_51267 + (320 * _51707) + 160 len ceil32(_60047)] = mem[_50513 + 32 len ceil32(_60047)]
                var57001 = ceil32(_60047)
                if ceil32(_60047) > _60047:
                    mem[_51267 + (320 * _51707) + _60047 + 160] = 0
                return memory
                  from mem[64]
                   len ceil32(_60047) + _51267 + (320 * _51707) + -mem[64] + 160
            mem[64] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 544
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 224] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 256] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 288] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 320] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 352] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 384] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 416] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 448] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 480] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 512] = 0
            mem[var44001] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 224
            s = var44001
            idx = var44002
            while idx - 1:
                mem[64] = mem[64] + 320
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 224] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 256] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 288] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 320] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 352] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 384] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 416] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 448] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 480] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 512] = 0
                mem[s + 32] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 224
                s = s + 32
                idx = idx - 1
                continue 
            idx = 0
            while idx < stor15[address(arg5)].field_0:
                if stor15[address(arg5)].field_0 - 1 < idx:
                    revert with 0, 17
                if stor15[address(arg5)].field_0 + -idx - 1 >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                    revert with 0, 50
                mem[0] = mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]
                mem[32] = 12
                _65865 = sha3(mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192], 12)
                _65866 = mem[64]
                mem[64] = mem[64] + 320
                mem[_65866] = stor12[mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]].field_0
                mem[_65866 + 32] = stor1[_65865]
                mem[_65866 + 64] = stor2[_65865]
                mem[_65866 + 96] = stor3[_65865]
                mem[_65866 + 128] = stor4[_65865]
                mem[_65866 + 160] = stor5[_65865]
                mem[_65866 + 192] = stor6[_65865]
                mem[_65866 + 224] = stor7[_65865].field_0
                mem[_65866 + 256] = bool(stor7[_65865].field_160)
                mem[_65866 + 288] = stor8[_65865]
                if idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]:
                    revert with 0, 50
                mem[(32 * idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224] = _65866
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
            if stor15[address(arg5)].field_0 - 1 < stor15[address(arg5)].field_0:
                _65243 = mem[64]
                mem[64] = mem[64] + 64
                mem[_65243] = 4
                mem[_65243 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                _65443 = mem[64]
                mem[mem[64]] = 96
                _65862 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                idx = 0
                s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                t = mem[64] + 128
                while idx < _65862:
                    _68638 = mem[s]
                    mem[t] = mem[mem[s]]
                    mem[t + 32] = mem[_68638 + 32]
                    mem[t + 64] = mem[_68638 + 64]
                    mem[t + 96] = mem[_68638 + 96]
                    mem[t + 128] = mem[_68638 + 128]
                    mem[t + 160] = mem[_68638 + 172 len 20]
                    mem[t + 192] = mem[_68638 + 192]
                    mem[t + 224] = mem[_68638 + 236 len 20]
                    mem[t + 256] = bool(mem[_68638 + 256])
                    mem[t + 288] = mem[_68638 + 288]
                    idx = idx + 1
                    s = s + 32
                    t = t + 320
                    continue 
                mem[_65443 + 32] = 0
                mem[_65443 + 64] = (320 * _65862) + 128
                _69267 = mem[_65243]
                mem[_65443 + (320 * _65862) + 128] = mem[_65243]
                mem[_65443 + (320 * _65862) + 160 len ceil32(_69267)] = mem[_65243 + 32 len ceil32(_69267)]
                var61001 = ceil32(_69267)
                if ceil32(_69267) > _69267:
                    mem[_65443 + (320 * _65862) + _69267 + 160] = 0
                return memory
                  from mem[64]
                   len ceil32(_69267) + _65443 + (320 * _65862) + -mem[64] + 160
            _65863 = mem[64]
            mem[64] = mem[64] + 64
            mem[_65863] = 7
            mem[_65863 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
            _66276 = mem[64]
            mem[mem[64]] = 96
            _66470 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
            mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
            idx = 0
            s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
            t = mem[64] + 128
            while idx < _66470:
                _68645 = mem[s]
                mem[t] = mem[mem[s]]
                mem[t + 32] = mem[_68645 + 32]
                mem[t + 64] = mem[_68645 + 64]
                mem[t + 96] = mem[_68645 + 96]
                mem[t + 128] = mem[_68645 + 128]
                mem[t + 160] = mem[_68645 + 172 len 20]
                mem[t + 192] = mem[_68645 + 192]
                mem[t + 224] = mem[_68645 + 236 len 20]
                mem[t + 256] = bool(mem[_68645 + 256])
                mem[t + 288] = mem[_68645 + 288]
                idx = idx + 1
                s = s + 32
                t = t + 320
                continue 
            mem[_66276 + 32] = -1
            mem[_66276 + 64] = (320 * _66470) + 128
            _69268 = mem[_65863]
            mem[_66276 + (320 * _66470) + 128] = mem[_65863]
            mem[_66276 + (320 * _66470) + 160 len ceil32(_69268)] = mem[_65863 + 32 len ceil32(_69268)]
            var64001 = ceil32(_69268)
            if ceil32(_69268) > _69268:
                mem[_66276 + (320 * _66470) + _69268 + 160] = 0
            return memory
              from mem[64]
               len ceil32(_69268) + _66276 + (320 * _66470) + -mem[64] + 160
        if stor15[address(arg5)].field_0 < stor15[address(arg5)].field_0 - 1:
            revert with 0, 17
        if arg2 > 1:
            if stor15[address(arg5)].field_0 < stor15[address(arg5)].field_0 - 1:
                revert with 0, 17
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192] = 1
            mem[64] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 576
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 256] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 288] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 320] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 352] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 384] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 416] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 448] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 480] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 512] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 544] = 0
            mem[var47001] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 256
            s = var47001
            idx = var47002
            while idx - 1:
                mem[64] = mem[64] + 320
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 256] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 288] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 320] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 352] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 384] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 416] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 448] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 480] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 512] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 544] = 0
                mem[s + 32] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 256
                s = s + 32
                idx = idx - 1
                continue 
            idx = 0
            while idx < 1:
                if stor15[address(arg5)].field_0 - 1 > !idx:
                    revert with 0, 17
                if stor15[address(arg5)].field_0 + idx - 1 >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                    revert with 0, 50
                mem[0] = mem[(32 * stor15[address(arg5)].field_0 + idx - 1) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]
                mem[32] = 12
                _65877 = sha3(mem[(32 * stor15[address(arg5)].field_0 + idx - 1) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192], 12)
                _65878 = mem[64]
                mem[64] = mem[64] + 320
                mem[_65878] = stor12[mem[(32 * stor15[address(arg5)].field_0 + idx - 1) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]].field_0
                mem[_65878 + 32] = stor1[_65877]
                mem[_65878 + 64] = stor2[_65877]
                mem[_65878 + 96] = stor3[_65877]
                mem[_65878 + 128] = stor4[_65877]
                mem[_65878 + 160] = stor5[_65877]
                mem[_65878 + 192] = stor6[_65877]
                mem[_65878 + 224] = stor7[_65877].field_0
                mem[_65878 + 256] = bool(stor7[_65877].field_160)
                mem[_65878 + 288] = stor8[_65877]
                if idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]:
                    revert with 0, 50
                mem[(32 * idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224] = _65878
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
            if stor15[address(arg5)].field_0 - 1 > !1:
                revert with 0, 17
            if stor15[address(arg5)].field_0 - 1 > !1:
                revert with 0, 17
            if stor15[address(arg5)].field_0 < mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                _66473 = mem[64]
                mem[64] = mem[64] + 64
                mem[_66473] = 7
                mem[_66473 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                _66702 = mem[64]
                mem[mem[64]] = 96
                _66974 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                idx = 0
                s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                t = mem[64] + 128
                while idx < _66974:
                    _68666 = mem[s]
                    mem[t] = mem[mem[s]]
                    mem[t + 32] = mem[_68666 + 32]
                    mem[t + 64] = mem[_68666 + 64]
                    mem[t + 96] = mem[_68666 + 96]
                    mem[t + 128] = mem[_68666 + 128]
                    mem[t + 160] = mem[_68666 + 172 len 20]
                    mem[t + 192] = mem[_68666 + 192]
                    mem[t + 224] = mem[_68666 + 236 len 20]
                    mem[t + 256] = bool(mem[_68666 + 256])
                    mem[t + 288] = mem[_68666 + 288]
                    idx = idx + 1
                    s = s + 32
                    t = t + 320
                    continue 
                mem[_66702 + 32] = stor15[address(arg5)].field_0
                mem[_66702 + 64] = (320 * _66974) + 128
                _69271 = mem[_66473]
                mem[_66702 + (320 * _66974) + 128] = mem[_66473]
                mem[_66702 + (320 * _66974) + 160 len ceil32(_69271)] = mem[_66473 + 32 len ceil32(_69271)]
                if ceil32(_69271) > _69271:
                    mem[_66702 + (320 * _66974) + _69271 + 160] = 0
                return memory
                  from mem[64]
                   len ceil32(_69271) + _66702 + (320 * _66974) + -mem[64] + 160
            _66474 = mem[64]
            mem[64] = mem[64] + 64
            mem[_66474] = 4
            mem[_66474 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
            _66703 = mem[64]
            mem[mem[64]] = 96
            _66975 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
            mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
            idx = 0
            s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
            t = mem[64] + 128
            while idx < _66975:
                _68673 = mem[s]
                mem[t] = mem[mem[s]]
                mem[t + 32] = mem[_68673 + 32]
                mem[t + 64] = mem[_68673 + 64]
                mem[t + 96] = mem[_68673 + 96]
                mem[t + 128] = mem[_68673 + 128]
                mem[t + 160] = mem[_68673 + 172 len 20]
                mem[t + 192] = mem[_68673 + 192]
                mem[t + 224] = mem[_68673 + 236 len 20]
                mem[t + 256] = bool(mem[_68673 + 256])
                mem[t + 288] = mem[_68673 + 288]
                idx = idx + 1
                s = s + 32
                t = t + 320
                continue 
            mem[_66703 + 32] = stor15[address(arg5)].field_0
            mem[_66703 + 64] = (320 * _66975) + 128
            _69272 = mem[_66474]
            mem[_66703 + (320 * _66975) + 128] = mem[_66474]
            mem[_66703 + (320 * _66975) + 160 len ceil32(_69272)] = mem[_66474 + 32 len ceil32(_69272)]
            if ceil32(_69272) > _69272:
                mem[_66703 + (320 * _66975) + _69272 + 160] = 0
            return memory
              from mem[64]
               len ceil32(_69272) + _66703 + (320 * _66975) + -mem[64] + 160
        if arg2 > test266151307():
            revert with 0, 65
        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192] = arg2
        mem[64] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224
        if not arg2:
            idx = 0
            while idx < arg2:
                if stor15[address(arg5)].field_0 - 1 > !idx:
                    revert with 0, 17
                if stor15[address(arg5)].field_0 + idx - 1 >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                    revert with 0, 50
                mem[0] = mem[(32 * stor15[address(arg5)].field_0 + idx - 1) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]
                mem[32] = 12
                _50519 = sha3(mem[(32 * stor15[address(arg5)].field_0 + idx - 1) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192], 12)
                _50520 = mem[64]
                mem[64] = mem[64] + 320
                mem[_50520] = stor12[mem[(32 * stor15[address(arg5)].field_0 + idx - 1) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]].field_0
                mem[_50520 + 32] = stor1[_50519]
                mem[_50520 + 64] = stor2[_50519]
                mem[_50520 + 96] = stor3[_50519]
                mem[_50520 + 128] = stor4[_50519]
                mem[_50520 + 160] = stor5[_50519]
                mem[_50520 + 192] = stor6[_50519]
                mem[_50520 + 224] = stor7[_50519].field_0
                mem[_50520 + 256] = bool(stor7[_50519].field_160)
                mem[_50520 + 288] = stor8[_50519]
                if idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]:
                    revert with 0, 50
                mem[(32 * idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224] = _50520
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
            if stor15[address(arg5)].field_0 - 1 > !arg2:
                revert with 0, 17
            if stor15[address(arg5)].field_0 - 1 > !arg2:
                revert with 0, 17
            if stor15[address(arg5)].field_0 + arg2 - 1 < mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                _51708 = mem[64]
                mem[64] = mem[64] + 64
                mem[_51708] = 7
                mem[_51708 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                _52529 = mem[64]
                mem[mem[64]] = 96
                _53177 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                idx = 0
                s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                t = mem[64] + 128
                while idx < _53177:
                    _58962 = mem[s]
                    mem[t] = mem[mem[s]]
                    mem[t + 32] = mem[_58962 + 32]
                    mem[t + 64] = mem[_58962 + 64]
                    mem[t + 96] = mem[_58962 + 96]
                    mem[t + 128] = mem[_58962 + 128]
                    mem[t + 160] = mem[_58962 + 172 len 20]
                    mem[t + 192] = mem[_58962 + 192]
                    mem[t + 224] = mem[_58962 + 236 len 20]
                    mem[t + 256] = bool(mem[_58962 + 256])
                    mem[t + 288] = mem[_58962 + 288]
                    idx = idx + 1
                    s = s + 32
                    t = t + 320
                    continue 
                mem[_52529 + 32] = stor15[address(arg5)].field_0 + arg2 - 1
                mem[_52529 + 64] = (320 * _53177) + 128
                _60048 = mem[_51708]
                mem[_52529 + (320 * _53177) + 128] = mem[_51708]
                mem[_52529 + (320 * _53177) + 160 len ceil32(_60048)] = mem[_51708 + 32 len ceil32(_60048)]
                var59001 = ceil32(_60048)
                if ceil32(_60048) > _60048:
                    mem[_52529 + (320 * _53177) + _60048 + 160] = 0
                return memory
                  from mem[64]
                   len ceil32(_60048) + _52529 + (320 * _53177) + -mem[64] + 160
            _51709 = mem[64]
            mem[64] = mem[64] + 64
            mem[_51709] = 4
            mem[_51709 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
            _52530 = mem[64]
            mem[mem[64]] = 96
            _53178 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
            mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
            idx = 0
            s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
            t = mem[64] + 128
            while idx < _53178:
                _58969 = mem[s]
                mem[t] = mem[mem[s]]
                mem[t + 32] = mem[_58969 + 32]
                mem[t + 64] = mem[_58969 + 64]
                mem[t + 96] = mem[_58969 + 96]
                mem[t + 128] = mem[_58969 + 128]
                mem[t + 160] = mem[_58969 + 172 len 20]
                mem[t + 192] = mem[_58969 + 192]
                mem[t + 224] = mem[_58969 + 236 len 20]
                mem[t + 256] = bool(mem[_58969 + 256])
                mem[t + 288] = mem[_58969 + 288]
                idx = idx + 1
                s = s + 32
                t = t + 320
                continue 
            mem[_52530 + 32] = stor15[address(arg5)].field_0 + arg2 - 1
            mem[_52530 + 64] = (320 * _53178) + 128
            _60049 = mem[_51709]
            mem[_52530 + (320 * _53178) + 128] = mem[_51709]
            mem[_52530 + (320 * _53178) + 160 len ceil32(_60049)] = mem[_51709 + 32 len ceil32(_60049)]
            var59001 = ceil32(_60049)
            if ceil32(_60049) > _60049:
                mem[_52530 + (320 * _53178) + _60049 + 160] = 0
            return memory
              from mem[64]
               len ceil32(_60049) + _52530 + (320 * _53178) + -mem[64] + 160
        mem[64] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 544
        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224] = 0
        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 256] = 0
        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 288] = 0
        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 320] = 0
        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 352] = 0
        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 384] = 0
        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 416] = 0
        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 448] = 0
        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 480] = 0
        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 512] = 0
        mem[var43001] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224
        s = var43001
        idx = var43002
        while idx - 1:
            mem[64] = mem[64] + 320
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 256] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 288] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 320] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 352] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 384] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 416] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 448] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 480] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 512] = 0
            mem[s + 32] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224
            s = s + 32
            idx = idx - 1
            continue 
        idx = 0
        while idx < arg2:
            if stor15[address(arg5)].field_0 - 1 > !idx:
                revert with 0, 17
            if stor15[address(arg5)].field_0 + idx - 1 >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                revert with 0, 50
            mem[0] = mem[(32 * stor15[address(arg5)].field_0 + idx - 1) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]
            mem[32] = 12
            _65871 = sha3(mem[(32 * stor15[address(arg5)].field_0 + idx - 1) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192], 12)
            _65872 = mem[64]
            mem[64] = mem[64] + 320
            mem[_65872] = stor12[mem[(32 * stor15[address(arg5)].field_0 + idx - 1) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]].field_0
            mem[_65872 + 32] = stor1[_65871]
            mem[_65872 + 64] = stor2[_65871]
            mem[_65872 + 96] = stor3[_65871]
            mem[_65872 + 128] = stor4[_65871]
            mem[_65872 + 160] = stor5[_65871]
            mem[_65872 + 192] = stor6[_65871]
            mem[_65872 + 224] = stor7[_65871].field_0
            mem[_65872 + 256] = bool(stor7[_65871].field_160)
            mem[_65872 + 288] = stor8[_65871]
            if idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]:
                revert with 0, 50
            mem[(32 * idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224] = _65872
            if idx == -1:
                revert with 0, 17
            idx = idx + 1
            continue 
        if stor15[address(arg5)].field_0 - 1 > !arg2:
            revert with 0, 17
        if stor15[address(arg5)].field_0 - 1 > !arg2:
            revert with 0, 17
        if stor15[address(arg5)].field_0 + arg2 - 1 < mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
            _66471 = mem[64]
            mem[64] = mem[64] + 64
            mem[_66471] = 7
            mem[_66471 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
            _66700 = mem[64]
            mem[mem[64]] = 96
            _66972 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
            mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
            idx = 0
            s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
            t = mem[64] + 128
            while idx < _66972:
                _68652 = mem[s]
                mem[t] = mem[mem[s]]
                mem[t + 32] = mem[_68652 + 32]
                mem[t + 64] = mem[_68652 + 64]
                mem[t + 96] = mem[_68652 + 96]
                mem[t + 128] = mem[_68652 + 128]
                mem[t + 160] = mem[_68652 + 172 len 20]
                mem[t + 192] = mem[_68652 + 192]
                mem[t + 224] = mem[_68652 + 236 len 20]
                mem[t + 256] = bool(mem[_68652 + 256])
                mem[t + 288] = mem[_68652 + 288]
                idx = idx + 1
                s = s + 32
                t = t + 320
                continue 
            mem[_66700 + 32] = stor15[address(arg5)].field_0 + arg2 - 1
            mem[_66700 + 64] = (320 * _66972) + 128
            _69269 = mem[_66471]
            mem[_66700 + (320 * _66972) + 128] = mem[_66471]
            mem[_66700 + (320 * _66972) + 160 len ceil32(_69269)] = mem[_66471 + 32 len ceil32(_69269)]
            var66001 = ceil32(_69269)
            if ceil32(_69269) > _69269:
                mem[_66700 + (320 * _66972) + _69269 + 160] = 0
            return memory
              from mem[64]
               len ceil32(_69269) + _66700 + (320 * _66972) + -mem[64] + 160
        _66472 = mem[64]
        mem[64] = mem[64] + 64
        mem[_66472] = 4
        mem[_66472 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
        _66701 = mem[64]
        mem[mem[64]] = 96
        _66973 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
        mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
        idx = 0
        s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
        t = mem[64] + 128
        while idx < _66973:
            _68659 = mem[s]
            mem[t] = mem[mem[s]]
            mem[t + 32] = mem[_68659 + 32]
            mem[t + 64] = mem[_68659 + 64]
            mem[t + 96] = mem[_68659 + 96]
            mem[t + 128] = mem[_68659 + 128]
            mem[t + 160] = mem[_68659 + 172 len 20]
            mem[t + 192] = mem[_68659 + 192]
            mem[t + 224] = mem[_68659 + 236 len 20]
            mem[t + 256] = bool(mem[_68659 + 256])
            mem[t + 288] = mem[_68659 + 288]
            idx = idx + 1
            s = s + 32
            t = t + 320
            continue 
        mem[_66701 + 32] = stor15[address(arg5)].field_0 + arg2 - 1
        mem[_66701 + 64] = (320 * _66973) + 128
        _69270 = mem[_66472]
        mem[_66701 + (320 * _66973) + 128] = mem[_66472]
        mem[_66701 + (320 * _66973) + 160 len ceil32(_69270)] = mem[_66472 + 32 len ceil32(_69270)]
        var66001 = ceil32(_69270)
        if ceil32(_69270) > _69270:
            mem[_66701 + (320 * _66973) + _69270 + 160] = 0
        return memory
          from mem[64]
           len ceil32(_69270) + _66701 + (320 * _66973) + -mem[64] + 160
    mem[0] = 11
    mem[128] = uint256(stor11.field_0)
    idx = 128
    s = 0
    while (32 * stor11.length) + 96 > idx:
        mem[idx + 32] = stor11[s].field_256
        idx = idx + 32
        s = s + 1
        continue 
    if arg4 != 1:
        if arg4 != 2:
            if not stor11.length:
                mem[64] = (32 * stor11.length) + 224
                mem[(32 * stor11.length) + 160] = 4
                mem[(32 * stor11.length) + 192] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                mem[(32 * stor11.length) + 224] = 96
                _13471 = mem[(32 * stor11.length) + 128]
                mem[(32 * stor11.length) + 320] = mem[(32 * stor11.length) + 128]
                idx = 0
                s = (32 * stor11.length) + 160
                t = (32 * stor11.length) + 352
                while idx < mem[(32 * stor11.length) + 128]:
                    _24640 = mem[s]
                    mem[t] = mem[mem[s]]
                    mem[t + 32] = mem[_24640 + 32]
                    mem[t + 64] = mem[_24640 + 64]
                    mem[t + 96] = mem[_24640 + 96]
                    mem[t + 128] = mem[_24640 + 128]
                    mem[t + 160] = mem[_24640 + 172 len 20]
                    mem[t + 192] = mem[_24640 + 192]
                    mem[t + 224] = mem[_24640 + 236 len 20]
                    mem[t + 256] = bool(mem[_24640 + 256])
                    mem[t + 288] = mem[_24640 + 288]
                    idx = idx + 1
                    s = s + 32
                    t = t + 320
                    continue 
                mem[(32 * stor11.length) + 256] = 0
                mem[(32 * stor11.length) + 288] = (320 * _13471) + 128
                mem[(32 * stor11.length) + (320 * _13471) + 352] = mem[(32 * stor11.length) + 160]
                mem[(32 * stor11.length) + (320 * _13471) + 384 len ceil32(mem[(32 * stor11.length) + 160])] = mem[(32 * stor11.length) + 192 len ceil32(mem[(32 * stor11.length) + 160])]
                var30001 = ceil32(mem[(32 * stor11.length) + 160])
                if ceil32(mem[(32 * stor11.length) + 160]) > mem[(32 * stor11.length) + 160]:
                    mem[(32 * stor11.length) + (320 * _13471) + mem[(32 * stor11.length) + 160] + 384] = 0
                return memory
                  from mem[64]
                   len ceil32(mem[(32 * stor11.length) + 160]) + (32 * stor11.length) + (320 * _13471) + -mem[64] + 384
            if arg1 < stor11.length:
                if arg3:
                    if arg2 <= arg1:
                        if arg2 > test266151307():
                            revert with 0, 65
                        mem[(32 * stor11.length) + 128] = arg2
                        mem[64] = (32 * stor11.length) + (32 * arg2) + 160
                        if not arg2:
                            idx = 0
                            while idx < arg2:
                                if arg1 < idx:
                                    revert with 0, 17
                                if arg1 - idx >= mem[96]:
                                    revert with 0, 50
                                mem[0] = mem[(32 * arg1 - idx) + 128]
                                mem[32] = 12
                                _25979 = sha3(mem[(32 * arg1 - idx) + 128], 12)
                                _25980 = mem[64]
                                mem[64] = mem[64] + 320
                                mem[_25980] = stor12[mem[(32 * arg1 - idx) + 128]].field_0
                                mem[_25980 + 32] = stor1[_25979]
                                mem[_25980 + 64] = stor2[_25979]
                                mem[_25980 + 96] = stor3[_25979]
                                mem[_25980 + 128] = stor4[_25979]
                                mem[_25980 + 160] = stor5[_25979]
                                mem[_25980 + 192] = stor6[_25979]
                                mem[_25980 + 224] = stor7[_25979].field_0
                                mem[_25980 + 256] = bool(stor7[_25979].field_160)
                                mem[_25980 + 288] = stor8[_25979]
                                if idx >= mem[(32 * stor11.length) + 128]:
                                    revert with 0, 50
                                mem[(32 * idx) + (32 * stor11.length) + 160] = _25980
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                continue 
                            if arg1 < arg2:
                                _24776 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_24776] = 4
                                mem[_24776 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                                _25148 = mem[64]
                                mem[mem[64]] = 96
                                _25976 = mem[(32 * stor11.length) + 128]
                                mem[mem[64] + 96] = mem[(32 * stor11.length) + 128]
                                idx = 0
                                s = (32 * stor11.length) + 160
                                t = mem[64] + 128
                                while idx < _25976:
                                    _37498 = mem[s]
                                    mem[t] = mem[mem[s]]
                                    mem[t + 32] = mem[_37498 + 32]
                                    mem[t + 64] = mem[_37498 + 64]
                                    mem[t + 96] = mem[_37498 + 96]
                                    mem[t + 128] = mem[_37498 + 128]
                                    mem[t + 160] = mem[_37498 + 172 len 20]
                                    mem[t + 192] = mem[_37498 + 192]
                                    mem[t + 224] = mem[_37498 + 236 len 20]
                                    mem[t + 256] = bool(mem[_37498 + 256])
                                    mem[t + 288] = mem[_37498 + 288]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 320
                                    continue 
                                mem[_25148 + 32] = 0
                                mem[_25148 + 64] = (320 * _25976) + 128
                                _38212 = mem[_24776]
                                mem[_25148 + (320 * _25976) + 128] = mem[_24776]
                                mem[_25148 + (320 * _25976) + 160 len ceil32(_38212)] = mem[_24776 + 32 len ceil32(_38212)]
                                var38001 = ceil32(_38212)
                                if ceil32(_38212) > _38212:
                                    mem[_25148 + (320 * _25976) + _38212 + 160] = 0
                                return memory
                                  from mem[64]
                                   len ceil32(_38212) + _25148 + (320 * _25976) + -mem[64] + 160
                            _25977 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_25977] = 7
                            mem[_25977 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                            _26755 = mem[64]
                            mem[mem[64]] = 96
                            _27165 = mem[(32 * stor11.length) + 128]
                            mem[mem[64] + 96] = mem[(32 * stor11.length) + 128]
                            idx = 0
                            s = (32 * stor11.length) + 160
                            t = mem[64] + 128
                            while idx < _27165:
                                _37505 = mem[s]
                                mem[t] = mem[mem[s]]
                                mem[t + 32] = mem[_37505 + 32]
                                mem[t + 64] = mem[_37505 + 64]
                                mem[t + 96] = mem[_37505 + 96]
                                mem[t + 128] = mem[_37505 + 128]
                                mem[t + 160] = mem[_37505 + 172 len 20]
                                mem[t + 192] = mem[_37505 + 192]
                                mem[t + 224] = mem[_37505 + 236 len 20]
                                mem[t + 256] = bool(mem[_37505 + 256])
                                mem[t + 288] = mem[_37505 + 288]
                                idx = idx + 1
                                s = s + 32
                                t = t + 320
                                continue 
                            mem[_26755 + 32] = arg1 - arg2
                            mem[_26755 + 64] = (320 * _27165) + 128
                            _38213 = mem[_25977]
                            mem[_26755 + (320 * _27165) + 128] = mem[_25977]
                            mem[_26755 + (320 * _27165) + 160 len ceil32(_38213)] = mem[_25977 + 32 len ceil32(_38213)]
                            var41001 = ceil32(_38213)
                            if ceil32(_38213) > _38213:
                                mem[_26755 + (320 * _27165) + _38213 + 160] = 0
                            return memory
                              from mem[64]
                               len ceil32(_38213) + _26755 + (320 * _27165) + -mem[64] + 160
                        mem[64] = (32 * stor11.length) + (32 * arg2) + 480
                        mem[(32 * stor11.length) + (32 * arg2) + 160] = 0
                        mem[(32 * stor11.length) + (32 * arg2) + 192] = 0
                        mem[(32 * stor11.length) + (32 * arg2) + 224] = 0
                        mem[(32 * stor11.length) + (32 * arg2) + 256] = 0
                        mem[(32 * stor11.length) + (32 * arg2) + 288] = 0
                        mem[(32 * stor11.length) + (32 * arg2) + 320] = 0
                        mem[(32 * stor11.length) + (32 * arg2) + 352] = 0
                        mem[(32 * stor11.length) + (32 * arg2) + 384] = 0
                        mem[(32 * stor11.length) + (32 * arg2) + 416] = 0
                        mem[(32 * stor11.length) + (32 * arg2) + 448] = 0
                        mem[var28001] = (32 * stor11.length) + (32 * arg2) + 160
                        s = var28001
                        idx = var28002
                        while idx - 1:
                            mem[64] = mem[64] + 320
                            mem[(32 * stor11.length) + (32 * arg2) + 160] = 0
                            mem[(32 * stor11.length) + (32 * arg2) + 192] = 0
                            mem[(32 * stor11.length) + (32 * arg2) + 224] = 0
                            mem[(32 * stor11.length) + (32 * arg2) + 256] = 0
                            mem[(32 * stor11.length) + (32 * arg2) + 288] = 0
                            mem[(32 * stor11.length) + (32 * arg2) + 320] = 0
                            mem[(32 * stor11.length) + (32 * arg2) + 352] = 0
                            mem[(32 * stor11.length) + (32 * arg2) + 384] = 0
                            mem[(32 * stor11.length) + (32 * arg2) + 416] = 0
                            mem[(32 * stor11.length) + (32 * arg2) + 448] = 0
                            mem[s + 32] = (32 * stor11.length) + (32 * arg2) + 160
                            s = s + 32
                            idx = idx - 1
                            continue 
                        idx = 0
                        while idx < arg2:
                            if arg1 < idx:
                                revert with 0, 17
                            if arg1 - idx >= mem[96]:
                                revert with 0, 50
                            mem[0] = mem[(32 * arg1 - idx) + 128]
                            mem[32] = 12
                            _50532 = sha3(mem[(32 * arg1 - idx) + 128], 12)
                            _50533 = mem[64]
                            mem[64] = mem[64] + 320
                            mem[_50533] = stor12[mem[(32 * arg1 - idx) + 128]].field_0
                            mem[_50533 + 32] = stor1[_50532]
                            mem[_50533 + 64] = stor2[_50532]
                            mem[_50533 + 96] = stor3[_50532]
                            mem[_50533 + 128] = stor4[_50532]
                            mem[_50533 + 160] = stor5[_50532]
                            mem[_50533 + 192] = stor6[_50532]
                            mem[_50533 + 224] = stor7[_50532].field_0
                            mem[_50533 + 256] = bool(stor7[_50532].field_160)
                            mem[_50533 + 288] = stor8[_50532]
                            if idx >= mem[(32 * stor11.length) + 128]:
                                revert with 0, 50
                            mem[(32 * idx) + (32 * stor11.length) + 160] = _50533
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            continue 
                        if arg1 < arg2:
                            _49279 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_49279] = 4
                            mem[_49279 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                            _49707 = mem[64]
                            mem[mem[64]] = 96
                            _50529 = mem[(32 * stor11.length) + 128]
                            mem[mem[64] + 96] = mem[(32 * stor11.length) + 128]
                            idx = 0
                            s = (32 * stor11.length) + 160
                            t = mem[64] + 128
                            while idx < _50529:
                                _58991 = mem[s]
                                mem[t] = mem[mem[s]]
                                mem[t + 32] = mem[_58991 + 32]
                                mem[t + 64] = mem[_58991 + 64]
                                mem[t + 96] = mem[_58991 + 96]
                                mem[t + 128] = mem[_58991 + 128]
                                mem[t + 160] = mem[_58991 + 172 len 20]
                                mem[t + 192] = mem[_58991 + 192]
                                mem[t + 224] = mem[_58991 + 236 len 20]
                                mem[t + 256] = bool(mem[_58991 + 256])
                                mem[t + 288] = mem[_58991 + 288]
                                idx = idx + 1
                                s = s + 32
                                t = t + 320
                                continue 
                            mem[_49707 + 32] = 0
                            mem[_49707 + 64] = (320 * _50529) + 128
                            _60052 = mem[_49279]
                            mem[_49707 + (320 * _50529) + 128] = mem[_49279]
                            mem[_49707 + (320 * _50529) + 160 len ceil32(_60052)] = mem[_49279 + 32 len ceil32(_60052)]
                            var45001 = ceil32(_60052)
                            if ceil32(_60052) > _60052:
                                mem[_49707 + (320 * _50529) + _60052 + 160] = 0
                            return memory
                              from mem[64]
                               len ceil32(_60052) + _49707 + (320 * _50529) + -mem[64] + 160
                        _50530 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_50530] = 7
                        mem[_50530 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                        _51278 = mem[64]
                        mem[mem[64]] = 96
                        _51714 = mem[(32 * stor11.length) + 128]
                        mem[mem[64] + 96] = mem[(32 * stor11.length) + 128]
                        idx = 0
                        s = (32 * stor11.length) + 160
                        t = mem[64] + 128
                        while idx < _51714:
                            _58998 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_58998 + 32]
                            mem[t + 64] = mem[_58998 + 64]
                            mem[t + 96] = mem[_58998 + 96]
                            mem[t + 128] = mem[_58998 + 128]
                            mem[t + 160] = mem[_58998 + 172 len 20]
                            mem[t + 192] = mem[_58998 + 192]
                            mem[t + 224] = mem[_58998 + 236 len 20]
                            mem[t + 256] = bool(mem[_58998 + 256])
                            mem[t + 288] = mem[_58998 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_51278 + 32] = arg1 - arg2
                        mem[_51278 + 64] = (320 * _51714) + 128
                        _60053 = mem[_50530]
                        mem[_51278 + (320 * _51714) + 128] = mem[_50530]
                        mem[_51278 + (320 * _51714) + 160 len ceil32(_60053)] = mem[_50530 + 32 len ceil32(_60053)]
                        var48001 = ceil32(_60053)
                        if ceil32(_60053) > _60053:
                            mem[_51278 + (320 * _51714) + _60053 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_60053) + _51278 + (320 * _51714) + -mem[64] + 160
                    if 1 > !arg1:
                        revert with 0, 17
                    if arg1 + 1 > test266151307():
                        revert with 0, 65
                    mem[(32 * stor11.length) + 128] = arg1 + 1
                    mem[64] = (32 * stor11.length) + (32 * arg1 + 1) + 160
                    if not arg1 + 1:
                        idx = 0
                        while idx < arg1 + 1:
                            if arg1 < idx:
                                revert with 0, 17
                            if arg1 - idx >= mem[96]:
                                revert with 0, 50
                            mem[0] = mem[(32 * arg1 - idx) + 128]
                            mem[32] = 12
                            _25985 = sha3(mem[(32 * arg1 - idx) + 128], 12)
                            _25986 = mem[64]
                            mem[64] = mem[64] + 320
                            mem[_25986] = stor12[mem[(32 * arg1 - idx) + 128]].field_0
                            mem[_25986 + 32] = stor1[_25985]
                            mem[_25986 + 64] = stor2[_25985]
                            mem[_25986 + 96] = stor3[_25985]
                            mem[_25986 + 128] = stor4[_25985]
                            mem[_25986 + 160] = stor5[_25985]
                            mem[_25986 + 192] = stor6[_25985]
                            mem[_25986 + 224] = stor7[_25985].field_0
                            mem[_25986 + 256] = bool(stor7[_25985].field_160)
                            mem[_25986 + 288] = stor8[_25985]
                            if idx >= mem[(32 * stor11.length) + 128]:
                                revert with 0, 50
                            mem[(32 * idx) + (32 * stor11.length) + 160] = _25986
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            continue 
                        if arg1 < arg1 + 1:
                            _24777 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_24777] = 4
                            mem[_24777 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                            _25150 = mem[64]
                            mem[mem[64]] = 96
                            _25982 = mem[(32 * stor11.length) + 128]
                            mem[mem[64] + 96] = mem[(32 * stor11.length) + 128]
                            idx = 0
                            s = (32 * stor11.length) + 160
                            t = mem[64] + 128
                            while idx < _25982:
                                _37512 = mem[s]
                                mem[t] = mem[mem[s]]
                                mem[t + 32] = mem[_37512 + 32]
                                mem[t + 64] = mem[_37512 + 64]
                                mem[t + 96] = mem[_37512 + 96]
                                mem[t + 128] = mem[_37512 + 128]
                                mem[t + 160] = mem[_37512 + 172 len 20]
                                mem[t + 192] = mem[_37512 + 192]
                                mem[t + 224] = mem[_37512 + 236 len 20]
                                mem[t + 256] = bool(mem[_37512 + 256])
                                mem[t + 288] = mem[_37512 + 288]
                                idx = idx + 1
                                s = s + 32
                                t = t + 320
                                continue 
                            mem[_25150 + 32] = 0
                            mem[_25150 + 64] = (320 * _25982) + 128
                            _38214 = mem[_24777]
                            mem[_25150 + (320 * _25982) + 128] = mem[_24777]
                            mem[_25150 + (320 * _25982) + 160 len ceil32(_38214)] = mem[_24777 + 32 len ceil32(_38214)]
                            var42001 = ceil32(_38214)
                            if ceil32(_38214) > _38214:
                                mem[_25150 + (320 * _25982) + _38214 + 160] = 0
                            return memory
                              from mem[64]
                               len ceil32(_38214) + _25150 + (320 * _25982) + -mem[64] + 160
                        _25983 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_25983] = 7
                        mem[_25983 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                        _26764 = mem[64]
                        mem[mem[64]] = 96
                        _27167 = mem[(32 * stor11.length) + 128]
                        mem[mem[64] + 96] = mem[(32 * stor11.length) + 128]
                        idx = 0
                        s = (32 * stor11.length) + 160
                        t = mem[64] + 128
                        while idx < _27167:
                            _37519 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_37519 + 32]
                            mem[t + 64] = mem[_37519 + 64]
                            mem[t + 96] = mem[_37519 + 96]
                            mem[t + 128] = mem[_37519 + 128]
                            mem[t + 160] = mem[_37519 + 172 len 20]
                            mem[t + 192] = mem[_37519 + 192]
                            mem[t + 224] = mem[_37519 + 236 len 20]
                            mem[t + 256] = bool(mem[_37519 + 256])
                            mem[t + 288] = mem[_37519 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_26764 + 32] = -1
                        mem[_26764 + 64] = (320 * _27167) + 128
                        _38215 = mem[_25983]
                        mem[_26764 + (320 * _27167) + 128] = mem[_25983]
                        mem[_26764 + (320 * _27167) + 160 len ceil32(_38215)] = mem[_25983 + 32 len ceil32(_38215)]
                        var45001 = ceil32(_38215)
                        if ceil32(_38215) > _38215:
                            mem[_26764 + (320 * _27167) + _38215 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_38215) + _26764 + (320 * _27167) + -mem[64] + 160
                    mem[64] = (32 * stor11.length) + (32 * arg1 + 1) + 480
                    mem[(32 * stor11.length) + (32 * arg1 + 1) + 160] = 0
                    mem[(32 * stor11.length) + (32 * arg1 + 1) + 192] = 0
                    mem[(32 * stor11.length) + (32 * arg1 + 1) + 224] = 0
                    mem[(32 * stor11.length) + (32 * arg1 + 1) + 256] = 0
                    mem[(32 * stor11.length) + (32 * arg1 + 1) + 288] = 0
                    mem[(32 * stor11.length) + (32 * arg1 + 1) + 320] = 0
                    mem[(32 * stor11.length) + (32 * arg1 + 1) + 352] = 0
                    mem[(32 * stor11.length) + (32 * arg1 + 1) + 384] = 0
                    mem[(32 * stor11.length) + (32 * arg1 + 1) + 416] = 0
                    mem[(32 * stor11.length) + (32 * arg1 + 1) + 448] = 0
                    mem[var32001] = (32 * stor11.length) + (32 * arg1 + 1) + 160
                    s = var32001
                    idx = var32002
                    while idx - 1:
                        mem[64] = mem[64] + 320
                        mem[(32 * stor11.length) + (32 * arg1 + 1) + 160] = 0
                        mem[(32 * stor11.length) + (32 * arg1 + 1) + 192] = 0
                        mem[(32 * stor11.length) + (32 * arg1 + 1) + 224] = 0
                        mem[(32 * stor11.length) + (32 * arg1 + 1) + 256] = 0
                        mem[(32 * stor11.length) + (32 * arg1 + 1) + 288] = 0
                        mem[(32 * stor11.length) + (32 * arg1 + 1) + 320] = 0
                        mem[(32 * stor11.length) + (32 * arg1 + 1) + 352] = 0
                        mem[(32 * stor11.length) + (32 * arg1 + 1) + 384] = 0
                        mem[(32 * stor11.length) + (32 * arg1 + 1) + 416] = 0
                        mem[(32 * stor11.length) + (32 * arg1 + 1) + 448] = 0
                        mem[s + 32] = (32 * stor11.length) + (32 * arg1 + 1) + 160
                        s = s + 32
                        idx = idx - 1
                        continue 
                    idx = 0
                    while idx < arg1 + 1:
                        if arg1 < idx:
                            revert with 0, 17
                        if arg1 - idx >= mem[96]:
                            revert with 0, 50
                        mem[0] = mem[(32 * arg1 - idx) + 128]
                        mem[32] = 12
                        _50540 = sha3(mem[(32 * arg1 - idx) + 128], 12)
                        _50541 = mem[64]
                        mem[64] = mem[64] + 320
                        mem[_50541] = stor12[mem[(32 * arg1 - idx) + 128]].field_0
                        mem[_50541 + 32] = stor1[_50540]
                        mem[_50541 + 64] = stor2[_50540]
                        mem[_50541 + 96] = stor3[_50540]
                        mem[_50541 + 128] = stor4[_50540]
                        mem[_50541 + 160] = stor5[_50540]
                        mem[_50541 + 192] = stor6[_50540]
                        mem[_50541 + 224] = stor7[_50540].field_0
                        mem[_50541 + 256] = bool(stor7[_50540].field_160)
                        mem[_50541 + 288] = stor8[_50540]
                        if idx >= mem[(32 * stor11.length) + 128]:
                            revert with 0, 50
                        mem[(32 * idx) + (32 * stor11.length) + 160] = _50541
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if arg1 < arg1 + 1:
                        _49280 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_49280] = 4
                        mem[_49280 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                        _49711 = mem[64]
                        mem[mem[64]] = 96
                        _50537 = mem[(32 * stor11.length) + 128]
                        mem[mem[64] + 96] = mem[(32 * stor11.length) + 128]
                        idx = 0
                        s = (32 * stor11.length) + 160
                        t = mem[64] + 128
                        while idx < _50537:
                            _59005 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_59005 + 32]
                            mem[t + 64] = mem[_59005 + 64]
                            mem[t + 96] = mem[_59005 + 96]
                            mem[t + 128] = mem[_59005 + 128]
                            mem[t + 160] = mem[_59005 + 172 len 20]
                            mem[t + 192] = mem[_59005 + 192]
                            mem[t + 224] = mem[_59005 + 236 len 20]
                            mem[t + 256] = bool(mem[_59005 + 256])
                            mem[t + 288] = mem[_59005 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_49711 + 32] = 0
                        mem[_49711 + 64] = (320 * _50537) + 128
                        _60054 = mem[_49280]
                        mem[_49711 + (320 * _50537) + 128] = mem[_49280]
                        mem[_49711 + (320 * _50537) + 160 len ceil32(_60054)] = mem[_49280 + 32 len ceil32(_60054)]
                        var49001 = ceil32(_60054)
                        if ceil32(_60054) > _60054:
                            mem[_49711 + (320 * _50537) + _60054 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_60054) + _49711 + (320 * _50537) + -mem[64] + 160
                    _50538 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_50538] = 7
                    mem[_50538 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                    _51286 = mem[64]
                    mem[mem[64]] = 96
                    _51716 = mem[(32 * stor11.length) + 128]
                    mem[mem[64] + 96] = mem[(32 * stor11.length) + 128]
                    idx = 0
                    s = (32 * stor11.length) + 160
                    t = mem[64] + 128
                    while idx < _51716:
                        _59012 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_59012 + 32]
                        mem[t + 64] = mem[_59012 + 64]
                        mem[t + 96] = mem[_59012 + 96]
                        mem[t + 128] = mem[_59012 + 128]
                        mem[t + 160] = mem[_59012 + 172 len 20]
                        mem[t + 192] = mem[_59012 + 192]
                        mem[t + 224] = mem[_59012 + 236 len 20]
                        mem[t + 256] = bool(mem[_59012 + 256])
                        mem[t + 288] = mem[_59012 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_51286 + 32] = -1
                    mem[_51286 + 64] = (320 * _51716) + 128
                    _60055 = mem[_50538]
                    mem[_51286 + (320 * _51716) + 128] = mem[_50538]
                    mem[_51286 + (320 * _51716) + 160 len ceil32(_60055)] = mem[_50538 + 32 len ceil32(_60055)]
                    var52001 = ceil32(_60055)
                    if ceil32(_60055) > _60055:
                        mem[_51286 + (320 * _51716) + _60055 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_60055) + _51286 + (320 * _51716) + -mem[64] + 160
                if stor11.length < arg1:
                    revert with 0, 17
                if arg2 <= stor11.length - arg1:
                    if arg2 > test266151307():
                        revert with 0, 65
                    mem[(32 * stor11.length) + 128] = arg2
                    mem[64] = (32 * stor11.length) + (32 * arg2) + 160
                    if not arg2:
                        idx = 0
                        while idx < arg2:
                            if arg1 > !idx:
                                revert with 0, 17
                            if arg1 + idx >= mem[96]:
                                revert with 0, 50
                            mem[0] = mem[(32 * arg1 + idx) + 128]
                            mem[32] = 12
                            _25989 = sha3(mem[(32 * arg1 + idx) + 128], 12)
                            _25990 = mem[64]
                            mem[64] = mem[64] + 320
                            mem[_25990] = stor12[mem[(32 * arg1 + idx) + 128]].field_0
                            mem[_25990 + 32] = stor1[_25989]
                            mem[_25990 + 64] = stor2[_25989]
                            mem[_25990 + 96] = stor3[_25989]
                            mem[_25990 + 128] = stor4[_25989]
                            mem[_25990 + 160] = stor5[_25989]
                            mem[_25990 + 192] = stor6[_25989]
                            mem[_25990 + 224] = stor7[_25989].field_0
                            mem[_25990 + 256] = bool(stor7[_25989].field_160)
                            mem[_25990 + 288] = stor8[_25989]
                            if idx >= mem[(32 * stor11.length) + 128]:
                                revert with 0, 50
                            mem[(32 * idx) + (32 * stor11.length) + 160] = _25990
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            continue 
                        if arg1 > !arg2:
                            revert with 0, 17
                        if arg1 > !arg2:
                            revert with 0, 17
                        if arg1 + arg2 < mem[96]:
                            _27168 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_27168] = 7
                            mem[_27168 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                            _28524 = mem[64]
                            mem[mem[64]] = 96
                            _29076 = mem[(32 * stor11.length) + 128]
                            mem[mem[64] + 96] = mem[(32 * stor11.length) + 128]
                            idx = 0
                            s = (32 * stor11.length) + 160
                            t = mem[64] + 128
                            while idx < _29076:
                                _37526 = mem[s]
                                mem[t] = mem[mem[s]]
                                mem[t + 32] = mem[_37526 + 32]
                                mem[t + 64] = mem[_37526 + 64]
                                mem[t + 96] = mem[_37526 + 96]
                                mem[t + 128] = mem[_37526 + 128]
                                mem[t + 160] = mem[_37526 + 172 len 20]
                                mem[t + 192] = mem[_37526 + 192]
                                mem[t + 224] = mem[_37526 + 236 len 20]
                                mem[t + 256] = bool(mem[_37526 + 256])
                                mem[t + 288] = mem[_37526 + 288]
                                idx = idx + 1
                                s = s + 32
                                t = t + 320
                                continue 
                            mem[_28524 + 32] = arg1 + arg2
                            mem[_28524 + 64] = (320 * _29076) + 128
                            _38216 = mem[_27168]
                            mem[_28524 + (320 * _29076) + 128] = mem[_27168]
                            mem[_28524 + (320 * _29076) + 160 len ceil32(_38216)] = mem[_27168 + 32 len ceil32(_38216)]
                            var47001 = ceil32(_38216)
                            if ceil32(_38216) > _38216:
                                mem[_28524 + (320 * _29076) + _38216 + 160] = 0
                            return memory
                              from mem[64]
                               len ceil32(_38216) + _28524 + (320 * _29076) + -mem[64] + 160
                        _27169 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_27169] = 4
                        mem[_27169 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                        _28525 = mem[64]
                        mem[mem[64]] = 96
                        _29077 = mem[(32 * stor11.length) + 128]
                        mem[mem[64] + 96] = mem[(32 * stor11.length) + 128]
                        idx = 0
                        s = (32 * stor11.length) + 160
                        t = mem[64] + 128
                        while idx < _29077:
                            _37533 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_37533 + 32]
                            mem[t + 64] = mem[_37533 + 64]
                            mem[t + 96] = mem[_37533 + 96]
                            mem[t + 128] = mem[_37533 + 128]
                            mem[t + 160] = mem[_37533 + 172 len 20]
                            mem[t + 192] = mem[_37533 + 192]
                            mem[t + 224] = mem[_37533 + 236 len 20]
                            mem[t + 256] = bool(mem[_37533 + 256])
                            mem[t + 288] = mem[_37533 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_28525 + 32] = arg1 + arg2
                        mem[_28525 + 64] = (320 * _29077) + 128
                        _38217 = mem[_27169]
                        mem[_28525 + (320 * _29077) + 128] = mem[_27169]
                        mem[_28525 + (320 * _29077) + 160 len ceil32(_38217)] = mem[_27169 + 32 len ceil32(_38217)]
                        var47001 = ceil32(_38217)
                        if ceil32(_38217) > _38217:
                            mem[_28525 + (320 * _29077) + _38217 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_38217) + _28525 + (320 * _29077) + -mem[64] + 160
                    mem[64] = (32 * stor11.length) + (32 * arg2) + 480
                    mem[(32 * stor11.length) + (32 * arg2) + 160] = 0
                    mem[(32 * stor11.length) + (32 * arg2) + 192] = 0
                    mem[(32 * stor11.length) + (32 * arg2) + 224] = 0
                    mem[(32 * stor11.length) + (32 * arg2) + 256] = 0
                    mem[(32 * stor11.length) + (32 * arg2) + 288] = 0
                    mem[(32 * stor11.length) + (32 * arg2) + 320] = 0
                    mem[(32 * stor11.length) + (32 * arg2) + 352] = 0
                    mem[(32 * stor11.length) + (32 * arg2) + 384] = 0
                    mem[(32 * stor11.length) + (32 * arg2) + 416] = 0
                    mem[(32 * stor11.length) + (32 * arg2) + 448] = 0
                    mem[var31001] = (32 * stor11.length) + (32 * arg2) + 160
                    s = var31001
                    idx = var31002
                    while idx - 1:
                        mem[64] = mem[64] + 320
                        mem[(32 * stor11.length) + (32 * arg2) + 160] = 0
                        mem[(32 * stor11.length) + (32 * arg2) + 192] = 0
                        mem[(32 * stor11.length) + (32 * arg2) + 224] = 0
                        mem[(32 * stor11.length) + (32 * arg2) + 256] = 0
                        mem[(32 * stor11.length) + (32 * arg2) + 288] = 0
                        mem[(32 * stor11.length) + (32 * arg2) + 320] = 0
                        mem[(32 * stor11.length) + (32 * arg2) + 352] = 0
                        mem[(32 * stor11.length) + (32 * arg2) + 384] = 0
                        mem[(32 * stor11.length) + (32 * arg2) + 416] = 0
                        mem[(32 * stor11.length) + (32 * arg2) + 448] = 0
                        mem[s + 32] = (32 * stor11.length) + (32 * arg2) + 160
                        s = s + 32
                        idx = idx - 1
                        continue 
                    idx = 0
                    while idx < arg2:
                        if arg1 > !idx:
                            revert with 0, 17
                        if arg1 + idx >= mem[96]:
                            revert with 0, 50
                        mem[0] = mem[(32 * arg1 + idx) + 128]
                        mem[32] = 12
                        _50546 = sha3(mem[(32 * arg1 + idx) + 128], 12)
                        _50547 = mem[64]
                        mem[64] = mem[64] + 320
                        mem[_50547] = stor12[mem[(32 * arg1 + idx) + 128]].field_0
                        mem[_50547 + 32] = stor1[_50546]
                        mem[_50547 + 64] = stor2[_50546]
                        mem[_50547 + 96] = stor3[_50546]
                        mem[_50547 + 128] = stor4[_50546]
                        mem[_50547 + 160] = stor5[_50546]
                        mem[_50547 + 192] = stor6[_50546]
                        mem[_50547 + 224] = stor7[_50546].field_0
                        mem[_50547 + 256] = bool(stor7[_50546].field_160)
                        mem[_50547 + 288] = stor8[_50546]
                        if idx >= mem[(32 * stor11.length) + 128]:
                            revert with 0, 50
                        mem[(32 * idx) + (32 * stor11.length) + 160] = _50547
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if arg1 > !arg2:
                        revert with 0, 17
                    if arg1 > !arg2:
                        revert with 0, 17
                    if arg1 + arg2 < mem[96]:
                        _51717 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_51717] = 7
                        mem[_51717 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                        _52557 = mem[64]
                        mem[mem[64]] = 96
                        _53185 = mem[(32 * stor11.length) + 128]
                        mem[mem[64] + 96] = mem[(32 * stor11.length) + 128]
                        idx = 0
                        s = (32 * stor11.length) + 160
                        t = mem[64] + 128
                        while idx < _53185:
                            _59019 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_59019 + 32]
                            mem[t + 64] = mem[_59019 + 64]
                            mem[t + 96] = mem[_59019 + 96]
                            mem[t + 128] = mem[_59019 + 128]
                            mem[t + 160] = mem[_59019 + 172 len 20]
                            mem[t + 192] = mem[_59019 + 192]
                            mem[t + 224] = mem[_59019 + 236 len 20]
                            mem[t + 256] = bool(mem[_59019 + 256])
                            mem[t + 288] = mem[_59019 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_52557 + 32] = arg1 + arg2
                        mem[_52557 + 64] = (320 * _53185) + 128
                        _60056 = mem[_51717]
                        mem[_52557 + (320 * _53185) + 128] = mem[_51717]
                        mem[_52557 + (320 * _53185) + 160 len ceil32(_60056)] = mem[_51717 + 32 len ceil32(_60056)]
                        var54001 = ceil32(_60056)
                        if ceil32(_60056) > _60056:
                            mem[_52557 + (320 * _53185) + _60056 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_60056) + _52557 + (320 * _53185) + -mem[64] + 160
                    _51718 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_51718] = 4
                    mem[_51718 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                    _52558 = mem[64]
                    mem[mem[64]] = 96
                    _53186 = mem[(32 * stor11.length) + 128]
                    mem[mem[64] + 96] = mem[(32 * stor11.length) + 128]
                    idx = 0
                    s = (32 * stor11.length) + 160
                    t = mem[64] + 128
                    while idx < _53186:
                        _59026 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_59026 + 32]
                        mem[t + 64] = mem[_59026 + 64]
                        mem[t + 96] = mem[_59026 + 96]
                        mem[t + 128] = mem[_59026 + 128]
                        mem[t + 160] = mem[_59026 + 172 len 20]
                        mem[t + 192] = mem[_59026 + 192]
                        mem[t + 224] = mem[_59026 + 236 len 20]
                        mem[t + 256] = bool(mem[_59026 + 256])
                        mem[t + 288] = mem[_59026 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_52558 + 32] = arg1 + arg2
                    mem[_52558 + 64] = (320 * _53186) + 128
                    _60057 = mem[_51718]
                    mem[_52558 + (320 * _53186) + 128] = mem[_51718]
                    mem[_52558 + (320 * _53186) + 160 len ceil32(_60057)] = mem[_51718 + 32 len ceil32(_60057)]
                    var54001 = ceil32(_60057)
                    if ceil32(_60057) > _60057:
                        mem[_52558 + (320 * _53186) + _60057 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_60057) + _52558 + (320 * _53186) + -mem[64] + 160
                if stor11.length < arg1:
                    revert with 0, 17
                if stor11.length - arg1 > test266151307():
                    revert with 0, 65
                mem[(32 * stor11.length) + 128] = stor11.length - arg1
                mem[64] = (32 * stor11.length) + (32 * stor11.length - arg1) + 160
                if not stor11.length - arg1:
                    idx = 0
                    while idx < stor11.length - arg1:
                        if arg1 > !idx:
                            revert with 0, 17
                        if arg1 + idx >= mem[96]:
                            revert with 0, 50
                        mem[0] = mem[(32 * arg1 + idx) + 128]
                        mem[32] = 12
                        _25993 = sha3(mem[(32 * arg1 + idx) + 128], 12)
                        _25994 = mem[64]
                        mem[64] = mem[64] + 320
                        mem[_25994] = stor12[mem[(32 * arg1 + idx) + 128]].field_0
                        mem[_25994 + 32] = stor1[_25993]
                        mem[_25994 + 64] = stor2[_25993]
                        mem[_25994 + 96] = stor3[_25993]
                        mem[_25994 + 128] = stor4[_25993]
                        mem[_25994 + 160] = stor5[_25993]
                        mem[_25994 + 192] = stor6[_25993]
                        mem[_25994 + 224] = stor7[_25993].field_0
                        mem[_25994 + 256] = bool(stor7[_25993].field_160)
                        mem[_25994 + 288] = stor8[_25993]
                        if idx >= mem[(32 * stor11.length) + 128]:
                            revert with 0, 50
                        mem[(32 * idx) + (32 * stor11.length) + 160] = _25994
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if arg1 > !(stor11.length - arg1):
                        revert with 0, 17
                    if arg1 > !(stor11.length - arg1):
                        revert with 0, 17
                    if stor11.length < mem[96]:
                        _27170 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_27170] = 7
                        mem[_27170 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                        _28530 = mem[64]
                        mem[mem[64]] = 96
                        _29078 = mem[(32 * stor11.length) + 128]
                        mem[mem[64] + 96] = mem[(32 * stor11.length) + 128]
                        idx = 0
                        s = (32 * stor11.length) + 160
                        t = mem[64] + 128
                        while idx < _29078:
                            _37540 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_37540 + 32]
                            mem[t + 64] = mem[_37540 + 64]
                            mem[t + 96] = mem[_37540 + 96]
                            mem[t + 128] = mem[_37540 + 128]
                            mem[t + 160] = mem[_37540 + 172 len 20]
                            mem[t + 192] = mem[_37540 + 192]
                            mem[t + 224] = mem[_37540 + 236 len 20]
                            mem[t + 256] = bool(mem[_37540 + 256])
                            mem[t + 288] = mem[_37540 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_28530 + 32] = stor11.length
                        mem[_28530 + 64] = (320 * _29078) + 128
                        _38218 = mem[_27170]
                        mem[_28530 + (320 * _29078) + 128] = mem[_27170]
                        mem[_28530 + (320 * _29078) + 160 len ceil32(_38218)] = mem[_27170 + 32 len ceil32(_38218)]
                        var51001 = ceil32(_38218)
                        if ceil32(_38218) > _38218:
                            mem[_28530 + (320 * _29078) + _38218 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_38218) + _28530 + (320 * _29078) + -mem[64] + 160
                    _27171 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_27171] = 4
                    mem[_27171 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                    _28531 = mem[64]
                    mem[mem[64]] = 96
                    _29079 = mem[(32 * stor11.length) + 128]
                    mem[mem[64] + 96] = mem[(32 * stor11.length) + 128]
                    idx = 0
                    s = (32 * stor11.length) + 160
                    t = mem[64] + 128
                    while idx < _29079:
                        _37547 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_37547 + 32]
                        mem[t + 64] = mem[_37547 + 64]
                        mem[t + 96] = mem[_37547 + 96]
                        mem[t + 128] = mem[_37547 + 128]
                        mem[t + 160] = mem[_37547 + 172 len 20]
                        mem[t + 192] = mem[_37547 + 192]
                        mem[t + 224] = mem[_37547 + 236 len 20]
                        mem[t + 256] = bool(mem[_37547 + 256])
                        mem[t + 288] = mem[_37547 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_28531 + 32] = stor11.length
                    mem[_28531 + 64] = (320 * _29079) + 128
                    _38219 = mem[_27171]
                    mem[_28531 + (320 * _29079) + 128] = mem[_27171]
                    mem[_28531 + (320 * _29079) + 160 len ceil32(_38219)] = mem[_27171 + 32 len ceil32(_38219)]
                    var51001 = ceil32(_38219)
                    if ceil32(_38219) > _38219:
                        mem[_28531 + (320 * _29079) + _38219 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_38219) + _28531 + (320 * _29079) + -mem[64] + 160
                mem[64] = (32 * stor11.length) + (32 * stor11.length - arg1) + 480
                mem[(32 * stor11.length) + (32 * stor11.length - arg1) + 160] = 0
                mem[(32 * stor11.length) + (32 * stor11.length - arg1) + 192] = 0
                mem[(32 * stor11.length) + (32 * stor11.length - arg1) + 224] = 0
                mem[(32 * stor11.length) + (32 * stor11.length - arg1) + 256] = 0
                mem[(32 * stor11.length) + (32 * stor11.length - arg1) + 288] = 0
                mem[(32 * stor11.length) + (32 * stor11.length - arg1) + 320] = 0
                mem[(32 * stor11.length) + (32 * stor11.length - arg1) + 352] = 0
                mem[(32 * stor11.length) + (32 * stor11.length - arg1) + 384] = 0
                mem[(32 * stor11.length) + (32 * stor11.length - arg1) + 416] = 0
                mem[(32 * stor11.length) + (32 * stor11.length - arg1) + 448] = 0
                mem[var35001] = (32 * stor11.length) + (32 * stor11.length - arg1) + 160
                s = var35001
                idx = var35002
                while idx - 1:
                    mem[64] = mem[64] + 320
                    mem[(32 * stor11.length) + (32 * stor11.length - arg1) + 160] = 0
                    mem[(32 * stor11.length) + (32 * stor11.length - arg1) + 192] = 0
                    mem[(32 * stor11.length) + (32 * stor11.length - arg1) + 224] = 0
                    mem[(32 * stor11.length) + (32 * stor11.length - arg1) + 256] = 0
                    mem[(32 * stor11.length) + (32 * stor11.length - arg1) + 288] = 0
                    mem[(32 * stor11.length) + (32 * stor11.length - arg1) + 320] = 0
                    mem[(32 * stor11.length) + (32 * stor11.length - arg1) + 352] = 0
                    mem[(32 * stor11.length) + (32 * stor11.length - arg1) + 384] = 0
                    mem[(32 * stor11.length) + (32 * stor11.length - arg1) + 416] = 0
                    mem[(32 * stor11.length) + (32 * stor11.length - arg1) + 448] = 0
                    mem[s + 32] = (32 * stor11.length) + (32 * stor11.length - arg1) + 160
                    s = s + 32
                    idx = idx - 1
                    continue 
                idx = 0
                while idx < stor11.length - arg1:
                    if arg1 > !idx:
                        revert with 0, 17
                    if arg1 + idx >= mem[96]:
                        revert with 0, 50
                    mem[0] = mem[(32 * arg1 + idx) + 128]
                    mem[32] = 12
                    _50552 = sha3(mem[(32 * arg1 + idx) + 128], 12)
                    _50553 = mem[64]
                    mem[64] = mem[64] + 320
                    mem[_50553] = stor12[mem[(32 * arg1 + idx) + 128]].field_0
                    mem[_50553 + 32] = stor1[_50552]
                    mem[_50553 + 64] = stor2[_50552]
                    mem[_50553 + 96] = stor3[_50552]
                    mem[_50553 + 128] = stor4[_50552]
                    mem[_50553 + 160] = stor5[_50552]
                    mem[_50553 + 192] = stor6[_50552]
                    mem[_50553 + 224] = stor7[_50552].field_0
                    mem[_50553 + 256] = bool(stor7[_50552].field_160)
                    mem[_50553 + 288] = stor8[_50552]
                    if idx >= mem[(32 * stor11.length) + 128]:
                        revert with 0, 50
                    mem[(32 * idx) + (32 * stor11.length) + 160] = _50553
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
                if arg1 > !(stor11.length - arg1):
                    revert with 0, 17
                if arg1 > !(stor11.length - arg1):
                    revert with 0, 17
                if stor11.length < mem[96]:
                    _51719 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_51719] = 7
                    mem[_51719 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                    _52559 = mem[64]
                    mem[mem[64]] = 96
                    _53187 = mem[(32 * stor11.length) + 128]
                    mem[mem[64] + 96] = mem[(32 * stor11.length) + 128]
                    idx = 0
                    s = (32 * stor11.length) + 160
                    t = mem[64] + 128
                    while idx < _53187:
                        _59033 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_59033 + 32]
                        mem[t + 64] = mem[_59033 + 64]
                        mem[t + 96] = mem[_59033 + 96]
                        mem[t + 128] = mem[_59033 + 128]
                        mem[t + 160] = mem[_59033 + 172 len 20]
                        mem[t + 192] = mem[_59033 + 192]
                        mem[t + 224] = mem[_59033 + 236 len 20]
                        mem[t + 256] = bool(mem[_59033 + 256])
                        mem[t + 288] = mem[_59033 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_52559 + 32] = stor11.length
                    mem[_52559 + 64] = (320 * _53187) + 128
                    _60058 = mem[_51719]
                    mem[_52559 + (320 * _53187) + 128] = mem[_51719]
                    mem[_52559 + (320 * _53187) + 160 len ceil32(_60058)] = mem[_51719 + 32 len ceil32(_60058)]
                    var58001 = ceil32(_60058)
                    if ceil32(_60058) > _60058:
                        mem[_52559 + (320 * _53187) + _60058 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_60058) + _52559 + (320 * _53187) + -mem[64] + 160
                _51720 = mem[64]
                mem[64] = mem[64] + 64
                mem[_51720] = 4
                mem[_51720 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                _52560 = mem[64]
                mem[mem[64]] = 96
                _53188 = mem[(32 * stor11.length) + 128]
                mem[mem[64] + 96] = mem[(32 * stor11.length) + 128]
                idx = 0
                s = (32 * stor11.length) + 160
                t = mem[64] + 128
                while idx < _53188:
                    _59040 = mem[s]
                    mem[t] = mem[mem[s]]
                    mem[t + 32] = mem[_59040 + 32]
                    mem[t + 64] = mem[_59040 + 64]
                    mem[t + 96] = mem[_59040 + 96]
                    mem[t + 128] = mem[_59040 + 128]
                    mem[t + 160] = mem[_59040 + 172 len 20]
                    mem[t + 192] = mem[_59040 + 192]
                    mem[t + 224] = mem[_59040 + 236 len 20]
                    mem[t + 256] = bool(mem[_59040 + 256])
                    mem[t + 288] = mem[_59040 + 288]
                    idx = idx + 1
                    s = s + 32
                    t = t + 320
                    continue 
                mem[_52560 + 32] = stor11.length
                mem[_52560 + 64] = (320 * _53188) + 128
                _60059 = mem[_51720]
                mem[_52560 + (320 * _53188) + 128] = mem[_51720]
                mem[_52560 + (320 * _53188) + 160 len ceil32(_60059)] = mem[_51720 + 32 len ceil32(_60059)]
                var58001 = ceil32(_60059)
                if ceil32(_60059) > _60059:
                    mem[_52560 + (320 * _53188) + _60059 + 160] = 0
                return memory
                  from mem[64]
                   len ceil32(_60059) + _52560 + (320 * _53188) + -mem[64] + 160
            if stor11.length < 1:
                revert with 0, 17
            if arg3:
                if arg2 <= stor11.length - 1:
                    if arg2 > test266151307():
                        revert with 0, 65
                    mem[(32 * stor11.length) + 128] = arg2
                    mem[64] = (32 * stor11.length) + (32 * arg2) + 160
                    if not arg2:
                        idx = 0
                        while idx < arg2:
                            if stor11.length - 1 < idx:
                                revert with 0, 17
                            if stor11.length + -idx - 1 >= mem[96]:
                                revert with 0, 50
                            mem[0] = mem[(32 * stor11.length + -idx - 1) + 128]
                            mem[32] = 12
                            _25999 = sha3(mem[(32 * stor11.length + -idx - 1) + 128], 12)
                            _26000 = mem[64]
                            mem[64] = mem[64] + 320
                            mem[_26000] = stor12[mem[(32 * stor11.length + -idx - 1) + 128]].field_0
                            mem[_26000 + 32] = stor1[_25999]
                            mem[_26000 + 64] = stor2[_25999]
                            mem[_26000 + 96] = stor3[_25999]
                            mem[_26000 + 128] = stor4[_25999]
                            mem[_26000 + 160] = stor5[_25999]
                            mem[_26000 + 192] = stor6[_25999]
                            mem[_26000 + 224] = stor7[_25999].field_0
                            mem[_26000 + 256] = bool(stor7[_25999].field_160)
                            mem[_26000 + 288] = stor8[_25999]
                            if idx >= mem[(32 * stor11.length) + 128]:
                                revert with 0, 50
                            mem[(32 * idx) + (32 * stor11.length) + 160] = _26000
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            continue 
                        if stor11.length - 1 < arg2:
                            _24778 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_24778] = 4
                            mem[_24778 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                            _25154 = mem[64]
                            mem[mem[64]] = 96
                            _25996 = mem[(32 * stor11.length) + 128]
                            mem[mem[64] + 96] = mem[(32 * stor11.length) + 128]
                            idx = 0
                            s = (32 * stor11.length) + 160
                            t = mem[64] + 128
                            while idx < _25996:
                                _37554 = mem[s]
                                mem[t] = mem[mem[s]]
                                mem[t + 32] = mem[_37554 + 32]
                                mem[t + 64] = mem[_37554 + 64]
                                mem[t + 96] = mem[_37554 + 96]
                                mem[t + 128] = mem[_37554 + 128]
                                mem[t + 160] = mem[_37554 + 172 len 20]
                                mem[t + 192] = mem[_37554 + 192]
                                mem[t + 224] = mem[_37554 + 236 len 20]
                                mem[t + 256] = bool(mem[_37554 + 256])
                                mem[t + 288] = mem[_37554 + 288]
                                idx = idx + 1
                                s = s + 32
                                t = t + 320
                                continue 
                            mem[_25154 + 32] = 0
                            mem[_25154 + 64] = (320 * _25996) + 128
                            _38220 = mem[_24778]
                            mem[_25154 + (320 * _25996) + 128] = mem[_24778]
                            mem[_25154 + (320 * _25996) + 160 len ceil32(_38220)] = mem[_24778 + 32 len ceil32(_38220)]
                            var42001 = ceil32(_38220)
                            if ceil32(_38220) > _38220:
                                mem[_25154 + (320 * _25996) + _38220 + 160] = 0
                            return memory
                              from mem[64]
                               len ceil32(_38220) + _25154 + (320 * _25996) + -mem[64] + 160
                        _25997 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_25997] = 7
                        mem[_25997 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                        _26773 = mem[64]
                        mem[mem[64]] = 96
                        _27173 = mem[(32 * stor11.length) + 128]
                        mem[mem[64] + 96] = mem[(32 * stor11.length) + 128]
                        idx = 0
                        s = (32 * stor11.length) + 160
                        t = mem[64] + 128
                        while idx < _27173:
                            _37561 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_37561 + 32]
                            mem[t + 64] = mem[_37561 + 64]
                            mem[t + 96] = mem[_37561 + 96]
                            mem[t + 128] = mem[_37561 + 128]
                            mem[t + 160] = mem[_37561 + 172 len 20]
                            mem[t + 192] = mem[_37561 + 192]
                            mem[t + 224] = mem[_37561 + 236 len 20]
                            mem[t + 256] = bool(mem[_37561 + 256])
                            mem[t + 288] = mem[_37561 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_26773 + 32] = stor11.length + -arg2 - 1
                        mem[_26773 + 64] = (320 * _27173) + 128
                        _38221 = mem[_25997]
                        mem[_26773 + (320 * _27173) + 128] = mem[_25997]
                        mem[_26773 + (320 * _27173) + 160 len ceil32(_38221)] = mem[_25997 + 32 len ceil32(_38221)]
                        var45001 = ceil32(_38221)
                        if ceil32(_38221) > _38221:
                            mem[_26773 + (320 * _27173) + _38221 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_38221) + _26773 + (320 * _27173) + -mem[64] + 160
                    mem[64] = (32 * stor11.length) + (32 * arg2) + 480
                    mem[(32 * stor11.length) + (32 * arg2) + 160] = 0
                    mem[(32 * stor11.length) + (32 * arg2) + 192] = 0
                    mem[(32 * stor11.length) + (32 * arg2) + 224] = 0
                    mem[(32 * stor11.length) + (32 * arg2) + 256] = 0
                    mem[(32 * stor11.length) + (32 * arg2) + 288] = 0
                    mem[(32 * stor11.length) + (32 * arg2) + 320] = 0
                    mem[(32 * stor11.length) + (32 * arg2) + 352] = 0
                    mem[(32 * stor11.length) + (32 * arg2) + 384] = 0
                    mem[(32 * stor11.length) + (32 * arg2) + 416] = 0
                    mem[(32 * stor11.length) + (32 * arg2) + 448] = 0
                    mem[var32001] = (32 * stor11.length) + (32 * arg2) + 160
                    s = var32001
                    idx = var32002
                    while idx - 1:
                        mem[64] = mem[64] + 320
                        mem[(32 * stor11.length) + (32 * arg2) + 160] = 0
                        mem[(32 * stor11.length) + (32 * arg2) + 192] = 0
                        mem[(32 * stor11.length) + (32 * arg2) + 224] = 0
                        mem[(32 * stor11.length) + (32 * arg2) + 256] = 0
                        mem[(32 * stor11.length) + (32 * arg2) + 288] = 0
                        mem[(32 * stor11.length) + (32 * arg2) + 320] = 0
                        mem[(32 * stor11.length) + (32 * arg2) + 352] = 0
                        mem[(32 * stor11.length) + (32 * arg2) + 384] = 0
                        mem[(32 * stor11.length) + (32 * arg2) + 416] = 0
                        mem[(32 * stor11.length) + (32 * arg2) + 448] = 0
                        mem[s + 32] = (32 * stor11.length) + (32 * arg2) + 160
                        s = s + 32
                        idx = idx - 1
                        continue 
                    idx = 0
                    while idx < arg2:
                        if stor11.length - 1 < idx:
                            revert with 0, 17
                        if stor11.length + -idx - 1 >= mem[96]:
                            revert with 0, 50
                        mem[0] = mem[(32 * stor11.length + -idx - 1) + 128]
                        mem[32] = 12
                        _50560 = sha3(mem[(32 * stor11.length + -idx - 1) + 128], 12)
                        _50561 = mem[64]
                        mem[64] = mem[64] + 320
                        mem[_50561] = stor12[mem[(32 * stor11.length + -idx - 1) + 128]].field_0
                        mem[_50561 + 32] = stor1[_50560]
                        mem[_50561 + 64] = stor2[_50560]
                        mem[_50561 + 96] = stor3[_50560]
                        mem[_50561 + 128] = stor4[_50560]
                        mem[_50561 + 160] = stor5[_50560]
                        mem[_50561 + 192] = stor6[_50560]
                        mem[_50561 + 224] = stor7[_50560].field_0
                        mem[_50561 + 256] = bool(stor7[_50560].field_160)
                        mem[_50561 + 288] = stor8[_50560]
                        if idx >= mem[(32 * stor11.length) + 128]:
                            revert with 0, 50
                        mem[(32 * idx) + (32 * stor11.length) + 160] = _50561
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if stor11.length - 1 < arg2:
                        _49281 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_49281] = 4
                        mem[_49281 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                        _49721 = mem[64]
                        mem[mem[64]] = 96
                        _50557 = mem[(32 * stor11.length) + 128]
                        mem[mem[64] + 96] = mem[(32 * stor11.length) + 128]
                        idx = 0
                        s = (32 * stor11.length) + 160
                        t = mem[64] + 128
                        while idx < _50557:
                            _59047 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_59047 + 32]
                            mem[t + 64] = mem[_59047 + 64]
                            mem[t + 96] = mem[_59047 + 96]
                            mem[t + 128] = mem[_59047 + 128]
                            mem[t + 160] = mem[_59047 + 172 len 20]
                            mem[t + 192] = mem[_59047 + 192]
                            mem[t + 224] = mem[_59047 + 236 len 20]
                            mem[t + 256] = bool(mem[_59047 + 256])
                            mem[t + 288] = mem[_59047 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_49721 + 32] = 0
                        mem[_49721 + 64] = (320 * _50557) + 128
                        _60060 = mem[_49281]
                        mem[_49721 + (320 * _50557) + 128] = mem[_49281]
                        mem[_49721 + (320 * _50557) + 160 len ceil32(_60060)] = mem[_49281 + 32 len ceil32(_60060)]
                        var49001 = ceil32(_60060)
                        if ceil32(_60060) > _60060:
                            mem[_49721 + (320 * _50557) + _60060 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_60060) + _49721 + (320 * _50557) + -mem[64] + 160
                    _50558 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_50558] = 7
                    mem[_50558 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                    _51294 = mem[64]
                    mem[mem[64]] = 96
                    _51722 = mem[(32 * stor11.length) + 128]
                    mem[mem[64] + 96] = mem[(32 * stor11.length) + 128]
                    idx = 0
                    s = (32 * stor11.length) + 160
                    t = mem[64] + 128
                    while idx < _51722:
                        _59054 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_59054 + 32]
                        mem[t + 64] = mem[_59054 + 64]
                        mem[t + 96] = mem[_59054 + 96]
                        mem[t + 128] = mem[_59054 + 128]
                        mem[t + 160] = mem[_59054 + 172 len 20]
                        mem[t + 192] = mem[_59054 + 192]
                        mem[t + 224] = mem[_59054 + 236 len 20]
                        mem[t + 256] = bool(mem[_59054 + 256])
                        mem[t + 288] = mem[_59054 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_51294 + 32] = stor11.length + -arg2 - 1
                    mem[_51294 + 64] = (320 * _51722) + 128
                    _60061 = mem[_50558]
                    mem[_51294 + (320 * _51722) + 128] = mem[_50558]
                    mem[_51294 + (320 * _51722) + 160 len ceil32(_60061)] = mem[_50558 + 32 len ceil32(_60061)]
                    var52001 = ceil32(_60061)
                    if ceil32(_60061) > _60061:
                        mem[_51294 + (320 * _51722) + _60061 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_60061) + _51294 + (320 * _51722) + -mem[64] + 160
                if 1 > !(stor11.length - 1):
                    revert with 0, 17
                if stor11.length > test266151307():
                    revert with 0, 65
                mem[(32 * stor11.length) + 128] = stor11.length
                mem[64] = (64 * stor11.length) + 160
                if not stor11.length:
                    idx = 0
                    while idx < stor11.length:
                        if stor11.length - 1 < idx:
                            revert with 0, 17
                        if stor11.length + -idx - 1 >= mem[96]:
                            revert with 0, 50
                        mem[0] = mem[(32 * stor11.length + -idx - 1) + 128]
                        mem[32] = 12
                        _26005 = sha3(mem[(32 * stor11.length + -idx - 1) + 128], 12)
                        _26006 = mem[64]
                        mem[64] = mem[64] + 320
                        mem[_26006] = stor12[mem[(32 * stor11.length + -idx - 1) + 128]].field_0
                        mem[_26006 + 32] = stor1[_26005]
                        mem[_26006 + 64] = stor2[_26005]
                        mem[_26006 + 96] = stor3[_26005]
                        mem[_26006 + 128] = stor4[_26005]
                        mem[_26006 + 160] = stor5[_26005]
                        mem[_26006 + 192] = stor6[_26005]
                        mem[_26006 + 224] = stor7[_26005].field_0
                        mem[_26006 + 256] = bool(stor7[_26005].field_160)
                        mem[_26006 + 288] = stor8[_26005]
                        if idx >= mem[(32 * stor11.length) + 128]:
                            revert with 0, 50
                        mem[(32 * idx) + (32 * stor11.length) + 160] = _26006
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if stor11.length - 1 < stor11.length:
                        _24779 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_24779] = 4
                        mem[_24779 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                        _25156 = mem[64]
                        mem[mem[64]] = 96
                        _26002 = mem[(32 * stor11.length) + 128]
                        mem[mem[64] + 96] = mem[(32 * stor11.length) + 128]
                        idx = 0
                        s = (32 * stor11.length) + 160
                        t = mem[64] + 128
                        while idx < _26002:
                            _37568 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_37568 + 32]
                            mem[t + 64] = mem[_37568 + 64]
                            mem[t + 96] = mem[_37568 + 96]
                            mem[t + 128] = mem[_37568 + 128]
                            mem[t + 160] = mem[_37568 + 172 len 20]
                            mem[t + 192] = mem[_37568 + 192]
                            mem[t + 224] = mem[_37568 + 236 len 20]
                            mem[t + 256] = bool(mem[_37568 + 256])
                            mem[t + 288] = mem[_37568 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_25156 + 32] = 0
                        mem[_25156 + 64] = (320 * _26002) + 128
                        _38222 = mem[_24779]
                        mem[_25156 + (320 * _26002) + 128] = mem[_24779]
                        mem[_25156 + (320 * _26002) + 160 len ceil32(_38222)] = mem[_24779 + 32 len ceil32(_38222)]
                        var46001 = ceil32(_38222)
                        if ceil32(_38222) > _38222:
                            mem[_25156 + (320 * _26002) + _38222 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_38222) + _25156 + (320 * _26002) + -mem[64] + 160
                    _26003 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_26003] = 7
                    mem[_26003 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                    _26782 = mem[64]
                    mem[mem[64]] = 96
                    _27175 = mem[(32 * stor11.length) + 128]
                    mem[mem[64] + 96] = mem[(32 * stor11.length) + 128]
                    idx = 0
                    s = (32 * stor11.length) + 160
                    t = mem[64] + 128
                    while idx < _27175:
                        _37575 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_37575 + 32]
                        mem[t + 64] = mem[_37575 + 64]
                        mem[t + 96] = mem[_37575 + 96]
                        mem[t + 128] = mem[_37575 + 128]
                        mem[t + 160] = mem[_37575 + 172 len 20]
                        mem[t + 192] = mem[_37575 + 192]
                        mem[t + 224] = mem[_37575 + 236 len 20]
                        mem[t + 256] = bool(mem[_37575 + 256])
                        mem[t + 288] = mem[_37575 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_26782 + 32] = -1
                    mem[_26782 + 64] = (320 * _27175) + 128
                    _38223 = mem[_26003]
                    mem[_26782 + (320 * _27175) + 128] = mem[_26003]
                    mem[_26782 + (320 * _27175) + 160 len ceil32(_38223)] = mem[_26003 + 32 len ceil32(_38223)]
                    var49001 = ceil32(_38223)
                    if ceil32(_38223) > _38223:
                        mem[_26782 + (320 * _27175) + _38223 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_38223) + _26782 + (320 * _27175) + -mem[64] + 160
                mem[64] = (64 * stor11.length) + 480
                mem[(64 * stor11.length) + 160] = 0
                mem[(64 * stor11.length) + 192] = 0
                mem[(64 * stor11.length) + 224] = 0
                mem[(64 * stor11.length) + 256] = 0
                mem[(64 * stor11.length) + 288] = 0
                mem[(64 * stor11.length) + 320] = 0
                mem[(64 * stor11.length) + 352] = 0
                mem[(64 * stor11.length) + 384] = 0
                mem[(64 * stor11.length) + 416] = 0
                mem[(64 * stor11.length) + 448] = 0
                mem[var36001] = (64 * stor11.length) + 160
                s = var36001
                idx = var36002
                while idx - 1:
                    mem[64] = mem[64] + 320
                    mem[(64 * stor11.length) + 160] = 0
                    mem[(64 * stor11.length) + 192] = 0
                    mem[(64 * stor11.length) + 224] = 0
                    mem[(64 * stor11.length) + 256] = 0
                    mem[(64 * stor11.length) + 288] = 0
                    mem[(64 * stor11.length) + 320] = 0
                    mem[(64 * stor11.length) + 352] = 0
                    mem[(64 * stor11.length) + 384] = 0
                    mem[(64 * stor11.length) + 416] = 0
                    mem[(64 * stor11.length) + 448] = 0
                    mem[s + 32] = (64 * stor11.length) + 160
                    s = s + 32
                    idx = idx - 1
                    continue 
                idx = 0
                while idx < stor11.length:
                    if stor11.length - 1 < idx:
                        revert with 0, 17
                    if stor11.length + -idx - 1 >= mem[96]:
                        revert with 0, 50
                    mem[0] = mem[(32 * stor11.length + -idx - 1) + 128]
                    mem[32] = 12
                    _50568 = sha3(mem[(32 * stor11.length + -idx - 1) + 128], 12)
                    _50569 = mem[64]
                    mem[64] = mem[64] + 320
                    mem[_50569] = stor12[mem[(32 * stor11.length + -idx - 1) + 128]].field_0
                    mem[_50569 + 32] = stor1[_50568]
                    mem[_50569 + 64] = stor2[_50568]
                    mem[_50569 + 96] = stor3[_50568]
                    mem[_50569 + 128] = stor4[_50568]
                    mem[_50569 + 160] = stor5[_50568]
                    mem[_50569 + 192] = stor6[_50568]
                    mem[_50569 + 224] = stor7[_50568].field_0
                    mem[_50569 + 256] = bool(stor7[_50568].field_160)
                    mem[_50569 + 288] = stor8[_50568]
                    if idx >= mem[(32 * stor11.length) + 128]:
                        revert with 0, 50
                    mem[(32 * idx) + (32 * stor11.length) + 160] = _50569
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
                if stor11.length - 1 < stor11.length:
                    _49282 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_49282] = 4
                    mem[_49282 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                    _49725 = mem[64]
                    mem[mem[64]] = 96
                    _50565 = mem[(32 * stor11.length) + 128]
                    mem[mem[64] + 96] = mem[(32 * stor11.length) + 128]
                    idx = 0
                    s = (32 * stor11.length) + 160
                    t = mem[64] + 128
                    while idx < _50565:
                        _59061 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_59061 + 32]
                        mem[t + 64] = mem[_59061 + 64]
                        mem[t + 96] = mem[_59061 + 96]
                        mem[t + 128] = mem[_59061 + 128]
                        mem[t + 160] = mem[_59061 + 172 len 20]
                        mem[t + 192] = mem[_59061 + 192]
                        mem[t + 224] = mem[_59061 + 236 len 20]
                        mem[t + 256] = bool(mem[_59061 + 256])
                        mem[t + 288] = mem[_59061 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_49725 + 32] = 0
                    mem[_49725 + 64] = (320 * _50565) + 128
                    _60062 = mem[_49282]
                    mem[_49725 + (320 * _50565) + 128] = mem[_49282]
                    mem[_49725 + (320 * _50565) + 160 len ceil32(_60062)] = mem[_49282 + 32 len ceil32(_60062)]
                    var53001 = ceil32(_60062)
                    if ceil32(_60062) > _60062:
                        mem[_49725 + (320 * _50565) + _60062 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_60062) + _49725 + (320 * _50565) + -mem[64] + 160
                _50566 = mem[64]
                mem[64] = mem[64] + 64
                mem[_50566] = 7
                mem[_50566 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                _51302 = mem[64]
                mem[mem[64]] = 96
                _51724 = mem[(32 * stor11.length) + 128]
                mem[mem[64] + 96] = mem[(32 * stor11.length) + 128]
                idx = 0
                s = (32 * stor11.length) + 160
                t = mem[64] + 128
                while idx < _51724:
                    _59068 = mem[s]
                    mem[t] = mem[mem[s]]
                    mem[t + 32] = mem[_59068 + 32]
                    mem[t + 64] = mem[_59068 + 64]
                    mem[t + 96] = mem[_59068 + 96]
                    mem[t + 128] = mem[_59068 + 128]
                    mem[t + 160] = mem[_59068 + 172 len 20]
                    mem[t + 192] = mem[_59068 + 192]
                    mem[t + 224] = mem[_59068 + 236 len 20]
                    mem[t + 256] = bool(mem[_59068 + 256])
                    mem[t + 288] = mem[_59068 + 288]
                    idx = idx + 1
                    s = s + 32
                    t = t + 320
                    continue 
                mem[_51302 + 32] = -1
                mem[_51302 + 64] = (320 * _51724) + 128
                _60063 = mem[_50566]
                mem[_51302 + (320 * _51724) + 128] = mem[_50566]
                mem[_51302 + (320 * _51724) + 160 len ceil32(_60063)] = mem[_50566 + 32 len ceil32(_60063)]
                var56001 = ceil32(_60063)
                if ceil32(_60063) > _60063:
                    mem[_51302 + (320 * _51724) + _60063 + 160] = 0
                return memory
                  from mem[64]
                   len ceil32(_60063) + _51302 + (320 * _51724) + -mem[64] + 160
            if stor11.length < stor11.length - 1:
                revert with 0, 17
            if arg2 > 1:
                if stor11.length < stor11.length - 1:
                    revert with 0, 17
                mem[(32 * stor11.length) + 128] = 1
                mem[64] = (32 * stor11.length) + 512
                mem[(32 * stor11.length) + 192] = 0
                mem[(32 * stor11.length) + 224] = 0
                mem[(32 * stor11.length) + 256] = 0
                mem[(32 * stor11.length) + 288] = 0
                mem[(32 * stor11.length) + 320] = 0
                mem[(32 * stor11.length) + 352] = 0
                mem[(32 * stor11.length) + 384] = 0
                mem[(32 * stor11.length) + 416] = 0
                mem[(32 * stor11.length) + 448] = 0
                mem[(32 * stor11.length) + 480] = 0
                mem[var39001] = (32 * stor11.length) + 192
                s = var39001
                idx = var39002
                while idx - 1:
                    mem[64] = mem[64] + 320
                    mem[(32 * stor11.length) + 192] = 0
                    mem[(32 * stor11.length) + 224] = 0
                    mem[(32 * stor11.length) + 256] = 0
                    mem[(32 * stor11.length) + 288] = 0
                    mem[(32 * stor11.length) + 320] = 0
                    mem[(32 * stor11.length) + 352] = 0
                    mem[(32 * stor11.length) + 384] = 0
                    mem[(32 * stor11.length) + 416] = 0
                    mem[(32 * stor11.length) + 448] = 0
                    mem[(32 * stor11.length) + 480] = 0
                    mem[s + 32] = (32 * stor11.length) + 192
                    s = s + 32
                    idx = idx - 1
                    continue 
                idx = 0
                while idx < 1:
                    if stor11.length - 1 > !idx:
                        revert with 0, 17
                    if stor11.length + idx - 1 >= mem[96]:
                        revert with 0, 50
                    mem[0] = mem[(32 * stor11.length + idx - 1) + 128]
                    mem[32] = 12
                    _50580 = sha3(mem[(32 * stor11.length + idx - 1) + 128], 12)
                    _50581 = mem[64]
                    mem[64] = mem[64] + 320
                    mem[_50581] = stor12[mem[(32 * stor11.length + idx - 1) + 128]].field_0
                    mem[_50581 + 32] = stor1[_50580]
                    mem[_50581 + 64] = stor2[_50580]
                    mem[_50581 + 96] = stor3[_50580]
                    mem[_50581 + 128] = stor4[_50580]
                    mem[_50581 + 160] = stor5[_50580]
                    mem[_50581 + 192] = stor6[_50580]
                    mem[_50581 + 224] = stor7[_50580].field_0
                    mem[_50581 + 256] = bool(stor7[_50580].field_160)
                    mem[_50581 + 288] = stor8[_50580]
                    if idx >= mem[(32 * stor11.length) + 128]:
                        revert with 0, 50
                    mem[(32 * idx) + (32 * stor11.length) + 160] = _50581
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
                if stor11.length - 1 > !1:
                    revert with 0, 17
                if stor11.length - 1 > !1:
                    revert with 0, 17
                if stor11.length < mem[96]:
                    _51727 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_51727] = 7
                    mem[_51727 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                    _52579 = mem[64]
                    mem[mem[64]] = 96
                    _53195 = mem[(32 * stor11.length) + 128]
                    mem[mem[64] + 96] = mem[(32 * stor11.length) + 128]
                    idx = 0
                    s = (32 * stor11.length) + 160
                    t = mem[64] + 128
                    while idx < _53195:
                        _59089 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_59089 + 32]
                        mem[t + 64] = mem[_59089 + 64]
                        mem[t + 96] = mem[_59089 + 96]
                        mem[t + 128] = mem[_59089 + 128]
                        mem[t + 160] = mem[_59089 + 172 len 20]
                        mem[t + 192] = mem[_59089 + 192]
                        mem[t + 224] = mem[_59089 + 236 len 20]
                        mem[t + 256] = bool(mem[_59089 + 256])
                        mem[t + 288] = mem[_59089 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_52579 + 32] = stor11.length
                    mem[_52579 + 64] = (320 * _53195) + 128
                    _60066 = mem[_51727]
                    mem[_52579 + (320 * _53195) + 128] = mem[_51727]
                    mem[_52579 + (320 * _53195) + 160 len ceil32(_60066)] = mem[_51727 + 32 len ceil32(_60066)]
                    var62001 = ceil32(_60066)
                    if ceil32(_60066) > _60066:
                        mem[_52579 + (320 * _53195) + _60066 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_60066) + _52579 + (320 * _53195) + -mem[64] + 160
                _51728 = mem[64]
                mem[64] = mem[64] + 64
                mem[_51728] = 4
                mem[_51728 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                _52580 = mem[64]
                mem[mem[64]] = 96
                _53196 = mem[(32 * stor11.length) + 128]
                mem[mem[64] + 96] = mem[(32 * stor11.length) + 128]
                idx = 0
                s = (32 * stor11.length) + 160
                t = mem[64] + 128
                while idx < _53196:
                    _59096 = mem[s]
                    mem[t] = mem[mem[s]]
                    mem[t + 32] = mem[_59096 + 32]
                    mem[t + 64] = mem[_59096 + 64]
                    mem[t + 96] = mem[_59096 + 96]
                    mem[t + 128] = mem[_59096 + 128]
                    mem[t + 160] = mem[_59096 + 172 len 20]
                    mem[t + 192] = mem[_59096 + 192]
                    mem[t + 224] = mem[_59096 + 236 len 20]
                    mem[t + 256] = bool(mem[_59096 + 256])
                    mem[t + 288] = mem[_59096 + 288]
                    idx = idx + 1
                    s = s + 32
                    t = t + 320
                    continue 
                mem[_52580 + 32] = stor11.length
                mem[_52580 + 64] = (320 * _53196) + 128
                _60067 = mem[_51728]
                mem[_52580 + (320 * _53196) + 128] = mem[_51728]
                mem[_52580 + (320 * _53196) + 160 len ceil32(_60067)] = mem[_51728 + 32 len ceil32(_60067)]
                var62001 = ceil32(_60067)
                if ceil32(_60067) > _60067:
                    mem[_52580 + (320 * _53196) + _60067 + 160] = 0
                return memory
                  from mem[64]
                   len ceil32(_60067) + _52580 + (320 * _53196) + -mem[64] + 160
            if arg2 > test266151307():
                revert with 0, 65
            mem[(32 * stor11.length) + 128] = arg2
            mem[64] = (32 * stor11.length) + (32 * arg2) + 160
            if not arg2:
                idx = 0
                while idx < arg2:
                    if stor11.length - 1 > !idx:
                        revert with 0, 17
                    if stor11.length + idx - 1 >= mem[96]:
                        revert with 0, 50
                    mem[0] = mem[(32 * stor11.length + idx - 1) + 128]
                    mem[32] = 12
                    _26009 = sha3(mem[(32 * stor11.length + idx - 1) + 128], 12)
                    _26010 = mem[64]
                    mem[64] = mem[64] + 320
                    mem[_26010] = stor12[mem[(32 * stor11.length + idx - 1) + 128]].field_0
                    mem[_26010 + 32] = stor1[_26009]
                    mem[_26010 + 64] = stor2[_26009]
                    mem[_26010 + 96] = stor3[_26009]
                    mem[_26010 + 128] = stor4[_26009]
                    mem[_26010 + 160] = stor5[_26009]
                    mem[_26010 + 192] = stor6[_26009]
                    mem[_26010 + 224] = stor7[_26009].field_0
                    mem[_26010 + 256] = bool(stor7[_26009].field_160)
                    mem[_26010 + 288] = stor8[_26009]
                    if idx >= mem[(32 * stor11.length) + 128]:
                        revert with 0, 50
                    mem[(32 * idx) + (32 * stor11.length) + 160] = _26010
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
                if stor11.length - 1 > !arg2:
                    revert with 0, 17
                if stor11.length - 1 > !arg2:
                    revert with 0, 17
                if stor11.length + arg2 - 1 < mem[96]:
                    _27176 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_27176] = 7
                    mem[_27176 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                    _28564 = mem[64]
                    mem[mem[64]] = 96
                    _29084 = mem[(32 * stor11.length) + 128]
                    mem[mem[64] + 96] = mem[(32 * stor11.length) + 128]
                    idx = 0
                    s = (32 * stor11.length) + 160
                    t = mem[64] + 128
                    while idx < _29084:
                        _37582 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_37582 + 32]
                        mem[t + 64] = mem[_37582 + 64]
                        mem[t + 96] = mem[_37582 + 96]
                        mem[t + 128] = mem[_37582 + 128]
                        mem[t + 160] = mem[_37582 + 172 len 20]
                        mem[t + 192] = mem[_37582 + 192]
                        mem[t + 224] = mem[_37582 + 236 len 20]
                        mem[t + 256] = bool(mem[_37582 + 256])
                        mem[t + 288] = mem[_37582 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_28564 + 32] = stor11.length + arg2 - 1
                    mem[_28564 + 64] = (320 * _29084) + 128
                    _38224 = mem[_27176]
                    mem[_28564 + (320 * _29084) + 128] = mem[_27176]
                    mem[_28564 + (320 * _29084) + 160 len ceil32(_38224)] = mem[_27176 + 32 len ceil32(_38224)]
                    var51001 = ceil32(_38224)
                    if ceil32(_38224) > _38224:
                        mem[_28564 + (320 * _29084) + _38224 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_38224) + _28564 + (320 * _29084) + -mem[64] + 160
                _27177 = mem[64]
                mem[64] = mem[64] + 64
                mem[_27177] = 4
                mem[_27177 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                _28565 = mem[64]
                mem[mem[64]] = 96
                _29085 = mem[(32 * stor11.length) + 128]
                mem[mem[64] + 96] = mem[(32 * stor11.length) + 128]
                idx = 0
                s = (32 * stor11.length) + 160
                t = mem[64] + 128
                while idx < _29085:
                    _37589 = mem[s]
                    mem[t] = mem[mem[s]]
                    mem[t + 32] = mem[_37589 + 32]
                    mem[t + 64] = mem[_37589 + 64]
                    mem[t + 96] = mem[_37589 + 96]
                    mem[t + 128] = mem[_37589 + 128]
                    mem[t + 160] = mem[_37589 + 172 len 20]
                    mem[t + 192] = mem[_37589 + 192]
                    mem[t + 224] = mem[_37589 + 236 len 20]
                    mem[t + 256] = bool(mem[_37589 + 256])
                    mem[t + 288] = mem[_37589 + 288]
                    idx = idx + 1
                    s = s + 32
                    t = t + 320
                    continue 
                mem[_28565 + 32] = stor11.length + arg2 - 1
                mem[_28565 + 64] = (320 * _29085) + 128
                _38225 = mem[_27177]
                mem[_28565 + (320 * _29085) + 128] = mem[_27177]
                mem[_28565 + (320 * _29085) + 160 len ceil32(_38225)] = mem[_27177 + 32 len ceil32(_38225)]
                var51001 = ceil32(_38225)
                if ceil32(_38225) > _38225:
                    mem[_28565 + (320 * _29085) + _38225 + 160] = 0
                return memory
                  from mem[64]
                   len ceil32(_38225) + _28565 + (320 * _29085) + -mem[64] + 160
            mem[64] = (32 * stor11.length) + (32 * arg2) + 480
            mem[(32 * stor11.length) + (32 * arg2) + 160] = 0
            mem[(32 * stor11.length) + (32 * arg2) + 192] = 0
            mem[(32 * stor11.length) + (32 * arg2) + 224] = 0
            mem[(32 * stor11.length) + (32 * arg2) + 256] = 0
            mem[(32 * stor11.length) + (32 * arg2) + 288] = 0
            mem[(32 * stor11.length) + (32 * arg2) + 320] = 0
            mem[(32 * stor11.length) + (32 * arg2) + 352] = 0
            mem[(32 * stor11.length) + (32 * arg2) + 384] = 0
            mem[(32 * stor11.length) + (32 * arg2) + 416] = 0
            mem[(32 * stor11.length) + (32 * arg2) + 448] = 0
            mem[var35001] = (32 * stor11.length) + (32 * arg2) + 160
            s = var35001
            idx = var35002
            while idx - 1:
                mem[64] = mem[64] + 320
                mem[(32 * stor11.length) + (32 * arg2) + 160] = 0
                mem[(32 * stor11.length) + (32 * arg2) + 192] = 0
                mem[(32 * stor11.length) + (32 * arg2) + 224] = 0
                mem[(32 * stor11.length) + (32 * arg2) + 256] = 0
                mem[(32 * stor11.length) + (32 * arg2) + 288] = 0
                mem[(32 * stor11.length) + (32 * arg2) + 320] = 0
                mem[(32 * stor11.length) + (32 * arg2) + 352] = 0
                mem[(32 * stor11.length) + (32 * arg2) + 384] = 0
                mem[(32 * stor11.length) + (32 * arg2) + 416] = 0
                mem[(32 * stor11.length) + (32 * arg2) + 448] = 0
                mem[s + 32] = (32 * stor11.length) + (32 * arg2) + 160
                s = s + 32
                idx = idx - 1
                continue 
            idx = 0
            while idx < arg2:
                if stor11.length - 1 > !idx:
                    revert with 0, 17
                if stor11.length + idx - 1 >= mem[96]:
                    revert with 0, 50
                mem[0] = mem[(32 * stor11.length + idx - 1) + 128]
                mem[32] = 12
                _50574 = sha3(mem[(32 * stor11.length + idx - 1) + 128], 12)
                _50575 = mem[64]
                mem[64] = mem[64] + 320
                mem[_50575] = stor12[mem[(32 * stor11.length + idx - 1) + 128]].field_0
                mem[_50575 + 32] = stor1[_50574]
                mem[_50575 + 64] = stor2[_50574]
                mem[_50575 + 96] = stor3[_50574]
                mem[_50575 + 128] = stor4[_50574]
                mem[_50575 + 160] = stor5[_50574]
                mem[_50575 + 192] = stor6[_50574]
                mem[_50575 + 224] = stor7[_50574].field_0
                mem[_50575 + 256] = bool(stor7[_50574].field_160)
                mem[_50575 + 288] = stor8[_50574]
                if idx >= mem[(32 * stor11.length) + 128]:
                    revert with 0, 50
                mem[(32 * idx) + (32 * stor11.length) + 160] = _50575
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
            if stor11.length - 1 > !arg2:
                revert with 0, 17
            if stor11.length - 1 > !arg2:
                revert with 0, 17
            if stor11.length + arg2 - 1 < mem[96]:
                _51725 = mem[64]
                mem[64] = mem[64] + 64
                mem[_51725] = 7
                mem[_51725 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                _52577 = mem[64]
                mem[mem[64]] = 96
                _53193 = mem[(32 * stor11.length) + 128]
                mem[mem[64] + 96] = mem[(32 * stor11.length) + 128]
                idx = 0
                s = (32 * stor11.length) + 160
                t = mem[64] + 128
                while idx < _53193:
                    _59075 = mem[s]
                    mem[t] = mem[mem[s]]
                    mem[t + 32] = mem[_59075 + 32]
                    mem[t + 64] = mem[_59075 + 64]
                    mem[t + 96] = mem[_59075 + 96]
                    mem[t + 128] = mem[_59075 + 128]
                    mem[t + 160] = mem[_59075 + 172 len 20]
                    mem[t + 192] = mem[_59075 + 192]
                    mem[t + 224] = mem[_59075 + 236 len 20]
                    mem[t + 256] = bool(mem[_59075 + 256])
                    mem[t + 288] = mem[_59075 + 288]
                    idx = idx + 1
                    s = s + 32
                    t = t + 320
                    continue 
                mem[_52577 + 32] = stor11.length + arg2 - 1
                mem[_52577 + 64] = (320 * _53193) + 128
                _60064 = mem[_51725]
                mem[_52577 + (320 * _53193) + 128] = mem[_51725]
                mem[_52577 + (320 * _53193) + 160 len ceil32(_60064)] = mem[_51725 + 32 len ceil32(_60064)]
                var58001 = ceil32(_60064)
                if ceil32(_60064) > _60064:
                    mem[_52577 + (320 * _53193) + _60064 + 160] = 0
                return memory
                  from mem[64]
                   len ceil32(_60064) + _52577 + (320 * _53193) + -mem[64] + 160
            _51726 = mem[64]
            mem[64] = mem[64] + 64
            mem[_51726] = 4
            mem[_51726 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
            _52578 = mem[64]
            mem[mem[64]] = 96
            _53194 = mem[(32 * stor11.length) + 128]
            mem[mem[64] + 96] = mem[(32 * stor11.length) + 128]
            idx = 0
            s = (32 * stor11.length) + 160
            t = mem[64] + 128
            while idx < _53194:
                _59082 = mem[s]
                mem[t] = mem[mem[s]]
                mem[t + 32] = mem[_59082 + 32]
                mem[t + 64] = mem[_59082 + 64]
                mem[t + 96] = mem[_59082 + 96]
                mem[t + 128] = mem[_59082 + 128]
                mem[t + 160] = mem[_59082 + 172 len 20]
                mem[t + 192] = mem[_59082 + 192]
                mem[t + 224] = mem[_59082 + 236 len 20]
                mem[t + 256] = bool(mem[_59082 + 256])
                mem[t + 288] = mem[_59082 + 288]
                idx = idx + 1
                s = s + 32
                t = t + 320
                continue 
            mem[_52578 + 32] = stor11.length + arg2 - 1
            mem[_52578 + 64] = (320 * _53194) + 128
            _60065 = mem[_51726]
            mem[_52578 + (320 * _53194) + 128] = mem[_51726]
            mem[_52578 + (320 * _53194) + 160 len ceil32(_60065)] = mem[_51726 + 32 len ceil32(_60065)]
            var58001 = ceil32(_60065)
            if ceil32(_60065) > _60065:
                mem[_52578 + (320 * _53194) + _60065 + 160] = 0
            return memory
              from mem[64]
               len ceil32(_60065) + _52578 + (320 * _53194) + -mem[64] + 160
        mem[0] = address(arg5)
        mem[32] = 15
        mem[(32 * stor11.length) + 128] = stor15[address(arg5)].field_0
        if not stor15[address(arg5)].field_0:
            if not stor15[address(arg5)].field_0:
                mem[64] = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 256
                mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192] = 4
                mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 224] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 256] = 96
                _13870 = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 352] = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                idx = 0
                s = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192
                t = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 384
                while idx < mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]:
                    _24659 = mem[s]
                    mem[t] = mem[mem[s]]
                    mem[t + 32] = mem[_24659 + 32]
                    mem[t + 64] = mem[_24659 + 64]
                    mem[t + 96] = mem[_24659 + 96]
                    mem[t + 128] = mem[_24659 + 128]
                    mem[t + 160] = mem[_24659 + 172 len 20]
                    mem[t + 192] = mem[_24659 + 192]
                    mem[t + 224] = mem[_24659 + 236 len 20]
                    mem[t + 256] = bool(mem[_24659 + 256])
                    mem[t + 288] = mem[_24659 + 288]
                    idx = idx + 1
                    s = s + 32
                    t = t + 320
                    continue 
                mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 288] = 0
                mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 320] = (320 * _13870) + 128
                mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (320 * _13870) + 384] = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192]
                mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (320 * _13870) + 416 len ceil32(mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192])] = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 224 len ceil32(mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192])]
                var32001 = ceil32(mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192])
                if ceil32(mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192]) > mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192]:
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (320 * _13870) + mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192] + 416] = 0
                return memory
                  from mem[64]
                   len ceil32(mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192]) + (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (320 * _13870) + -mem[64] + 416
            if arg1 < stor15[address(arg5)].field_0:
                if arg3:
                    if arg2 <= arg1:
                        if arg2 > test266151307():
                            revert with 0, 65
                        mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160] = arg2
                        mem[64] = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 192
                        if not arg2:
                            idx = 0
                            while idx < arg2:
                                if arg1 < idx:
                                    revert with 0, 17
                                if arg1 - idx >= mem[(32 * stor11.length) + 128]:
                                    revert with 0, 50
                                mem[0] = mem[(32 * arg1 - idx) + (32 * stor11.length) + 160]
                                mem[32] = 12
                                _26020 = sha3(mem[(32 * arg1 - idx) + (32 * stor11.length) + 160], 12)
                                _26021 = mem[64]
                                mem[64] = mem[64] + 320
                                mem[_26021] = stor12[mem[(32 * arg1 - idx) + (32 * stor11.length) + 160]].field_0
                                mem[_26021 + 32] = stor1[_26020]
                                mem[_26021 + 64] = stor2[_26020]
                                mem[_26021 + 96] = stor3[_26020]
                                mem[_26021 + 128] = stor4[_26020]
                                mem[_26021 + 160] = stor5[_26020]
                                mem[_26021 + 192] = stor6[_26020]
                                mem[_26021 + 224] = stor7[_26020].field_0
                                mem[_26021 + 256] = bool(stor7[_26020].field_160)
                                mem[_26021 + 288] = stor8[_26020]
                                if idx >= mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]:
                                    revert with 0, 50
                                mem[(32 * idx) + (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192] = _26021
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                continue 
                            if arg1 < arg2:
                                _24781 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_24781] = 4
                                mem[_24781 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                                _25161 = mem[64]
                                mem[mem[64]] = 96
                                _26017 = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                                mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                                idx = 0
                                s = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192
                                t = mem[64] + 128
                                while idx < _26017:
                                    _37611 = mem[s]
                                    mem[t] = mem[mem[s]]
                                    mem[t + 32] = mem[_37611 + 32]
                                    mem[t + 64] = mem[_37611 + 64]
                                    mem[t + 96] = mem[_37611 + 96]
                                    mem[t + 128] = mem[_37611 + 128]
                                    mem[t + 160] = mem[_37611 + 172 len 20]
                                    mem[t + 192] = mem[_37611 + 192]
                                    mem[t + 224] = mem[_37611 + 236 len 20]
                                    mem[t + 256] = bool(mem[_37611 + 256])
                                    mem[t + 288] = mem[_37611 + 288]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 320
                                    continue 
                                mem[_25161 + 32] = 0
                                mem[_25161 + 64] = (320 * _26017) + 128
                                _38228 = mem[_24781]
                                mem[_25161 + (320 * _26017) + 128] = mem[_24781]
                                mem[_25161 + (320 * _26017) + 160 len ceil32(_38228)] = mem[_24781 + 32 len ceil32(_38228)]
                                var40001 = ceil32(_38228)
                                if ceil32(_38228) > _38228:
                                    mem[_25161 + (320 * _26017) + _38228 + 160] = 0
                                return memory
                                  from mem[64]
                                   len ceil32(_38228) + _25161 + (320 * _26017) + -mem[64] + 160
                            _26018 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_26018] = 7
                            mem[_26018 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                            _26793 = mem[64]
                            mem[mem[64]] = 96
                            _27182 = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                            mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                            idx = 0
                            s = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192
                            t = mem[64] + 128
                            while idx < _27182:
                                _37618 = mem[s]
                                mem[t] = mem[mem[s]]
                                mem[t + 32] = mem[_37618 + 32]
                                mem[t + 64] = mem[_37618 + 64]
                                mem[t + 96] = mem[_37618 + 96]
                                mem[t + 128] = mem[_37618 + 128]
                                mem[t + 160] = mem[_37618 + 172 len 20]
                                mem[t + 192] = mem[_37618 + 192]
                                mem[t + 224] = mem[_37618 + 236 len 20]
                                mem[t + 256] = bool(mem[_37618 + 256])
                                mem[t + 288] = mem[_37618 + 288]
                                idx = idx + 1
                                s = s + 32
                                t = t + 320
                                continue 
                            mem[_26793 + 32] = arg1 - arg2
                            mem[_26793 + 64] = (320 * _27182) + 128
                            _38229 = mem[_26018]
                            mem[_26793 + (320 * _27182) + 128] = mem[_26018]
                            mem[_26793 + (320 * _27182) + 160 len ceil32(_38229)] = mem[_26018 + 32 len ceil32(_38229)]
                            var43001 = ceil32(_38229)
                            if ceil32(_38229) > _38229:
                                mem[_26793 + (320 * _27182) + _38229 + 160] = 0
                            return memory
                              from mem[64]
                               len ceil32(_38229) + _26793 + (320 * _27182) + -mem[64] + 160
                        mem[64] = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 512
                        mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 192] = 0
                        mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224] = 0
                        mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 256] = 0
                        mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 288] = 0
                        mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 320] = 0
                        mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 352] = 0
                        mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 384] = 0
                        mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 416] = 0
                        mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 448] = 0
                        mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 480] = 0
                        mem[var30001] = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 192
                        s = var30001
                        idx = var30002
                        while idx - 1:
                            mem[64] = mem[64] + 320
                            mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 192] = 0
                            mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224] = 0
                            mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 256] = 0
                            mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 288] = 0
                            mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 320] = 0
                            mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 352] = 0
                            mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 384] = 0
                            mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 416] = 0
                            mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 448] = 0
                            mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 480] = 0
                            mem[s + 32] = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 192
                            s = s + 32
                            idx = idx - 1
                            continue 
                        idx = 0
                        while idx < arg2:
                            if arg1 < idx:
                                revert with 0, 17
                            if arg1 - idx >= mem[(32 * stor11.length) + 128]:
                                revert with 0, 50
                            mem[0] = mem[(32 * arg1 - idx) + (32 * stor11.length) + 160]
                            mem[32] = 12
                            _50588 = sha3(mem[(32 * arg1 - idx) + (32 * stor11.length) + 160], 12)
                            _50589 = mem[64]
                            mem[64] = mem[64] + 320
                            mem[_50589] = stor12[mem[(32 * arg1 - idx) + (32 * stor11.length) + 160]].field_0
                            mem[_50589 + 32] = stor1[_50588]
                            mem[_50589 + 64] = stor2[_50588]
                            mem[_50589 + 96] = stor3[_50588]
                            mem[_50589 + 128] = stor4[_50588]
                            mem[_50589 + 160] = stor5[_50588]
                            mem[_50589 + 192] = stor6[_50588]
                            mem[_50589 + 224] = stor7[_50588].field_0
                            mem[_50589 + 256] = bool(stor7[_50588].field_160)
                            mem[_50589 + 288] = stor8[_50588]
                            if idx >= mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]:
                                revert with 0, 50
                            mem[(32 * idx) + (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192] = _50589
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            continue 
                        if arg1 < arg2:
                            _49283 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_49283] = 4
                            mem[_49283 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                            _49735 = mem[64]
                            mem[mem[64]] = 96
                            _50585 = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                            mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                            idx = 0
                            s = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192
                            t = mem[64] + 128
                            while idx < _50585:
                                _59103 = mem[s]
                                mem[t] = mem[mem[s]]
                                mem[t + 32] = mem[_59103 + 32]
                                mem[t + 64] = mem[_59103 + 64]
                                mem[t + 96] = mem[_59103 + 96]
                                mem[t + 128] = mem[_59103 + 128]
                                mem[t + 160] = mem[_59103 + 172 len 20]
                                mem[t + 192] = mem[_59103 + 192]
                                mem[t + 224] = mem[_59103 + 236 len 20]
                                mem[t + 256] = bool(mem[_59103 + 256])
                                mem[t + 288] = mem[_59103 + 288]
                                idx = idx + 1
                                s = s + 32
                                t = t + 320
                                continue 
                            mem[_49735 + 32] = 0
                            mem[_49735 + 64] = (320 * _50585) + 128
                            _60068 = mem[_49283]
                            mem[_49735 + (320 * _50585) + 128] = mem[_49283]
                            mem[_49735 + (320 * _50585) + 160 len ceil32(_60068)] = mem[_49283 + 32 len ceil32(_60068)]
                            var47001 = ceil32(_60068)
                            if ceil32(_60068) > _60068:
                                mem[_49735 + (320 * _50585) + _60068 + 160] = 0
                            return memory
                              from mem[64]
                               len ceil32(_60068) + _49735 + (320 * _50585) + -mem[64] + 160
                        _50586 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_50586] = 7
                        mem[_50586 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                        _51310 = mem[64]
                        mem[mem[64]] = 96
                        _51730 = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                        mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                        idx = 0
                        s = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192
                        t = mem[64] + 128
                        while idx < _51730:
                            _59110 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_59110 + 32]
                            mem[t + 64] = mem[_59110 + 64]
                            mem[t + 96] = mem[_59110 + 96]
                            mem[t + 128] = mem[_59110 + 128]
                            mem[t + 160] = mem[_59110 + 172 len 20]
                            mem[t + 192] = mem[_59110 + 192]
                            mem[t + 224] = mem[_59110 + 236 len 20]
                            mem[t + 256] = bool(mem[_59110 + 256])
                            mem[t + 288] = mem[_59110 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_51310 + 32] = arg1 - arg2
                        mem[_51310 + 64] = (320 * _51730) + 128
                        _60069 = mem[_50586]
                        mem[_51310 + (320 * _51730) + 128] = mem[_50586]
                        mem[_51310 + (320 * _51730) + 160 len ceil32(_60069)] = mem[_50586 + 32 len ceil32(_60069)]
                        var50001 = ceil32(_60069)
                        if ceil32(_60069) > _60069:
                            mem[_51310 + (320 * _51730) + _60069 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_60069) + _51310 + (320 * _51730) + -mem[64] + 160
                    if 1 > !arg1:
                        revert with 0, 17
                    if arg1 + 1 > test266151307():
                        revert with 0, 65
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160] = arg1 + 1
                    mem[64] = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 192
                    if not arg1 + 1:
                        idx = 0
                        while idx < arg1 + 1:
                            if arg1 < idx:
                                revert with 0, 17
                            if arg1 - idx >= mem[(32 * stor11.length) + 128]:
                                revert with 0, 50
                            mem[0] = mem[(32 * arg1 - idx) + (32 * stor11.length) + 160]
                            mem[32] = 12
                            _26026 = sha3(mem[(32 * arg1 - idx) + (32 * stor11.length) + 160], 12)
                            _26027 = mem[64]
                            mem[64] = mem[64] + 320
                            mem[_26027] = stor12[mem[(32 * arg1 - idx) + (32 * stor11.length) + 160]].field_0
                            mem[_26027 + 32] = stor1[_26026]
                            mem[_26027 + 64] = stor2[_26026]
                            mem[_26027 + 96] = stor3[_26026]
                            mem[_26027 + 128] = stor4[_26026]
                            mem[_26027 + 160] = stor5[_26026]
                            mem[_26027 + 192] = stor6[_26026]
                            mem[_26027 + 224] = stor7[_26026].field_0
                            mem[_26027 + 256] = bool(stor7[_26026].field_160)
                            mem[_26027 + 288] = stor8[_26026]
                            if idx >= mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]:
                                revert with 0, 50
                            mem[(32 * idx) + (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192] = _26027
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            continue 
                        if arg1 < arg1 + 1:
                            _24782 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_24782] = 4
                            mem[_24782 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                            _25163 = mem[64]
                            mem[mem[64]] = 96
                            _26023 = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                            mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                            idx = 0
                            s = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192
                            t = mem[64] + 128
                            while idx < _26023:
                                _37625 = mem[s]
                                mem[t] = mem[mem[s]]
                                mem[t + 32] = mem[_37625 + 32]
                                mem[t + 64] = mem[_37625 + 64]
                                mem[t + 96] = mem[_37625 + 96]
                                mem[t + 128] = mem[_37625 + 128]
                                mem[t + 160] = mem[_37625 + 172 len 20]
                                mem[t + 192] = mem[_37625 + 192]
                                mem[t + 224] = mem[_37625 + 236 len 20]
                                mem[t + 256] = bool(mem[_37625 + 256])
                                mem[t + 288] = mem[_37625 + 288]
                                idx = idx + 1
                                s = s + 32
                                t = t + 320
                                continue 
                            mem[_25163 + 32] = 0
                            mem[_25163 + 64] = (320 * _26023) + 128
                            _38230 = mem[_24782]
                            mem[_25163 + (320 * _26023) + 128] = mem[_24782]
                            mem[_25163 + (320 * _26023) + 160 len ceil32(_38230)] = mem[_24782 + 32 len ceil32(_38230)]
                            var44001 = ceil32(_38230)
                            if ceil32(_38230) > _38230:
                                mem[_25163 + (320 * _26023) + _38230 + 160] = 0
                            return memory
                              from mem[64]
                               len ceil32(_38230) + _25163 + (320 * _26023) + -mem[64] + 160
                        _26024 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_26024] = 7
                        mem[_26024 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                        _26802 = mem[64]
                        mem[mem[64]] = 96
                        _27184 = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                        mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                        idx = 0
                        s = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192
                        t = mem[64] + 128
                        while idx < _27184:
                            _37632 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_37632 + 32]
                            mem[t + 64] = mem[_37632 + 64]
                            mem[t + 96] = mem[_37632 + 96]
                            mem[t + 128] = mem[_37632 + 128]
                            mem[t + 160] = mem[_37632 + 172 len 20]
                            mem[t + 192] = mem[_37632 + 192]
                            mem[t + 224] = mem[_37632 + 236 len 20]
                            mem[t + 256] = bool(mem[_37632 + 256])
                            mem[t + 288] = mem[_37632 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_26802 + 32] = -1
                        mem[_26802 + 64] = (320 * _27184) + 128
                        _38231 = mem[_26024]
                        mem[_26802 + (320 * _27184) + 128] = mem[_26024]
                        mem[_26802 + (320 * _27184) + 160 len ceil32(_38231)] = mem[_26024 + 32 len ceil32(_38231)]
                        var47001 = ceil32(_38231)
                        if ceil32(_38231) > _38231:
                            mem[_26802 + (320 * _27184) + _38231 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_38231) + _26802 + (320 * _27184) + -mem[64] + 160
                    mem[64] = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 512
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 192] = 0
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 224] = 0
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 256] = 0
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 288] = 0
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 320] = 0
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 352] = 0
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 384] = 0
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 416] = 0
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 448] = 0
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 480] = 0
                    mem[var34001] = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 192
                    s = var34001
                    idx = var34002
                    while idx - 1:
                        mem[64] = mem[64] + 320
                        mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 192] = 0
                        mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 224] = 0
                        mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 256] = 0
                        mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 288] = 0
                        mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 320] = 0
                        mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 352] = 0
                        mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 384] = 0
                        mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 416] = 0
                        mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 448] = 0
                        mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 480] = 0
                        mem[s + 32] = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 192
                        s = s + 32
                        idx = idx - 1
                        continue 
                    idx = 0
                    while idx < arg1 + 1:
                        if arg1 < idx:
                            revert with 0, 17
                        if arg1 - idx >= mem[(32 * stor11.length) + 128]:
                            revert with 0, 50
                        mem[0] = mem[(32 * arg1 - idx) + (32 * stor11.length) + 160]
                        mem[32] = 12
                        _50596 = sha3(mem[(32 * arg1 - idx) + (32 * stor11.length) + 160], 12)
                        _50597 = mem[64]
                        mem[64] = mem[64] + 320
                        mem[_50597] = stor12[mem[(32 * arg1 - idx) + (32 * stor11.length) + 160]].field_0
                        mem[_50597 + 32] = stor1[_50596]
                        mem[_50597 + 64] = stor2[_50596]
                        mem[_50597 + 96] = stor3[_50596]
                        mem[_50597 + 128] = stor4[_50596]
                        mem[_50597 + 160] = stor5[_50596]
                        mem[_50597 + 192] = stor6[_50596]
                        mem[_50597 + 224] = stor7[_50596].field_0
                        mem[_50597 + 256] = bool(stor7[_50596].field_160)
                        mem[_50597 + 288] = stor8[_50596]
                        if idx >= mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]:
                            revert with 0, 50
                        mem[(32 * idx) + (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192] = _50597
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if arg1 < arg1 + 1:
                        _49284 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_49284] = 4
                        mem[_49284 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                        _49739 = mem[64]
                        mem[mem[64]] = 96
                        _50593 = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                        mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                        idx = 0
                        s = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192
                        t = mem[64] + 128
                        while idx < _50593:
                            _59117 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_59117 + 32]
                            mem[t + 64] = mem[_59117 + 64]
                            mem[t + 96] = mem[_59117 + 96]
                            mem[t + 128] = mem[_59117 + 128]
                            mem[t + 160] = mem[_59117 + 172 len 20]
                            mem[t + 192] = mem[_59117 + 192]
                            mem[t + 224] = mem[_59117 + 236 len 20]
                            mem[t + 256] = bool(mem[_59117 + 256])
                            mem[t + 288] = mem[_59117 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_49739 + 32] = 0
                        mem[_49739 + 64] = (320 * _50593) + 128
                        _60070 = mem[_49284]
                        mem[_49739 + (320 * _50593) + 128] = mem[_49284]
                        mem[_49739 + (320 * _50593) + 160 len ceil32(_60070)] = mem[_49284 + 32 len ceil32(_60070)]
                        var51001 = ceil32(_60070)
                        if ceil32(_60070) > _60070:
                            mem[_49739 + (320 * _50593) + _60070 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_60070) + _49739 + (320 * _50593) + -mem[64] + 160
                    _50594 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_50594] = 7
                    mem[_50594 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                    _51318 = mem[64]
                    mem[mem[64]] = 96
                    _51732 = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                    mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                    idx = 0
                    s = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192
                    t = mem[64] + 128
                    while idx < _51732:
                        _59124 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_59124 + 32]
                        mem[t + 64] = mem[_59124 + 64]
                        mem[t + 96] = mem[_59124 + 96]
                        mem[t + 128] = mem[_59124 + 128]
                        mem[t + 160] = mem[_59124 + 172 len 20]
                        mem[t + 192] = mem[_59124 + 192]
                        mem[t + 224] = mem[_59124 + 236 len 20]
                        mem[t + 256] = bool(mem[_59124 + 256])
                        mem[t + 288] = mem[_59124 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_51318 + 32] = -1
                    mem[_51318 + 64] = (320 * _51732) + 128
                    _60071 = mem[_50594]
                    mem[_51318 + (320 * _51732) + 128] = mem[_50594]
                    mem[_51318 + (320 * _51732) + 160 len ceil32(_60071)] = mem[_50594 + 32 len ceil32(_60071)]
                    var54001 = ceil32(_60071)
                    if ceil32(_60071) > _60071:
                        mem[_51318 + (320 * _51732) + _60071 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_60071) + _51318 + (320 * _51732) + -mem[64] + 160
                if stor15[address(arg5)].field_0 < arg1:
                    revert with 0, 17
                if arg2 <= stor15[address(arg5)].field_0 - arg1:
                    if arg2 > test266151307():
                        revert with 0, 65
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160] = arg2
                    mem[64] = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 192
                    if not arg2:
                        idx = 0
                        while idx < arg2:
                            if arg1 > !idx:
                                revert with 0, 17
                            if arg1 + idx >= mem[(32 * stor11.length) + 128]:
                                revert with 0, 50
                            mem[0] = mem[(32 * arg1 + idx) + (32 * stor11.length) + 160]
                            mem[32] = 12
                            _26030 = sha3(mem[(32 * arg1 + idx) + (32 * stor11.length) + 160], 12)
                            _26031 = mem[64]
                            mem[64] = mem[64] + 320
                            mem[_26031] = stor12[mem[(32 * arg1 + idx) + (32 * stor11.length) + 160]].field_0
                            mem[_26031 + 32] = stor1[_26030]
                            mem[_26031 + 64] = stor2[_26030]
                            mem[_26031 + 96] = stor3[_26030]
                            mem[_26031 + 128] = stor4[_26030]
                            mem[_26031 + 160] = stor5[_26030]
                            mem[_26031 + 192] = stor6[_26030]
                            mem[_26031 + 224] = stor7[_26030].field_0
                            mem[_26031 + 256] = bool(stor7[_26030].field_160)
                            mem[_26031 + 288] = stor8[_26030]
                            if idx >= mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]:
                                revert with 0, 50
                            mem[(32 * idx) + (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192] = _26031
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            continue 
                        if arg1 > !arg2:
                            revert with 0, 17
                        if arg1 > !arg2:
                            revert with 0, 17
                        if arg1 + arg2 < mem[(32 * stor11.length) + 128]:
                            _27185 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_27185] = 7
                            mem[_27185 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                            _28604 = mem[64]
                            mem[mem[64]] = 96
                            _29092 = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                            mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                            idx = 0
                            s = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192
                            t = mem[64] + 128
                            while idx < _29092:
                                _37639 = mem[s]
                                mem[t] = mem[mem[s]]
                                mem[t + 32] = mem[_37639 + 32]
                                mem[t + 64] = mem[_37639 + 64]
                                mem[t + 96] = mem[_37639 + 96]
                                mem[t + 128] = mem[_37639 + 128]
                                mem[t + 160] = mem[_37639 + 172 len 20]
                                mem[t + 192] = mem[_37639 + 192]
                                mem[t + 224] = mem[_37639 + 236 len 20]
                                mem[t + 256] = bool(mem[_37639 + 256])
                                mem[t + 288] = mem[_37639 + 288]
                                idx = idx + 1
                                s = s + 32
                                t = t + 320
                                continue 
                            mem[_28604 + 32] = arg1 + arg2
                            mem[_28604 + 64] = (320 * _29092) + 128
                            _38232 = mem[_27185]
                            mem[_28604 + (320 * _29092) + 128] = mem[_27185]
                            mem[_28604 + (320 * _29092) + 160 len ceil32(_38232)] = mem[_27185 + 32 len ceil32(_38232)]
                            var49001 = ceil32(_38232)
                            if ceil32(_38232) > _38232:
                                mem[_28604 + (320 * _29092) + _38232 + 160] = 0
                            return memory
                              from mem[64]
                               len ceil32(_38232) + _28604 + (320 * _29092) + -mem[64] + 160
                        _27186 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_27186] = 4
                        mem[_27186 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                        _28605 = mem[64]
                        mem[mem[64]] = 96
                        _29093 = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                        mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                        idx = 0
                        s = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192
                        t = mem[64] + 128
                        while idx < _29093:
                            _37646 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_37646 + 32]
                            mem[t + 64] = mem[_37646 + 64]
                            mem[t + 96] = mem[_37646 + 96]
                            mem[t + 128] = mem[_37646 + 128]
                            mem[t + 160] = mem[_37646 + 172 len 20]
                            mem[t + 192] = mem[_37646 + 192]
                            mem[t + 224] = mem[_37646 + 236 len 20]
                            mem[t + 256] = bool(mem[_37646 + 256])
                            mem[t + 288] = mem[_37646 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_28605 + 32] = arg1 + arg2
                        mem[_28605 + 64] = (320 * _29093) + 128
                        _38233 = mem[_27186]
                        mem[_28605 + (320 * _29093) + 128] = mem[_27186]
                        mem[_28605 + (320 * _29093) + 160 len ceil32(_38233)] = mem[_27186 + 32 len ceil32(_38233)]
                        var49001 = ceil32(_38233)
                        if ceil32(_38233) > _38233:
                            mem[_28605 + (320 * _29093) + _38233 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_38233) + _28605 + (320 * _29093) + -mem[64] + 160
                    mem[64] = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 512
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 192] = 0
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224] = 0
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 256] = 0
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 288] = 0
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 320] = 0
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 352] = 0
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 384] = 0
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 416] = 0
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 448] = 0
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 480] = 0
                    mem[var33001] = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 192
                    s = var33001
                    idx = var33002
                    while idx - 1:
                        mem[64] = mem[64] + 320
                        mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 192] = 0
                        mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224] = 0
                        mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 256] = 0
                        mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 288] = 0
                        mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 320] = 0
                        mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 352] = 0
                        mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 384] = 0
                        mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 416] = 0
                        mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 448] = 0
                        mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 480] = 0
                        mem[s + 32] = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 192
                        s = s + 32
                        idx = idx - 1
                        continue 
                    idx = 0
                    while idx < arg2:
                        if arg1 > !idx:
                            revert with 0, 17
                        if arg1 + idx >= mem[(32 * stor11.length) + 128]:
                            revert with 0, 50
                        mem[0] = mem[(32 * arg1 + idx) + (32 * stor11.length) + 160]
                        mem[32] = 12
                        _50602 = sha3(mem[(32 * arg1 + idx) + (32 * stor11.length) + 160], 12)
                        _50603 = mem[64]
                        mem[64] = mem[64] + 320
                        mem[_50603] = stor12[mem[(32 * arg1 + idx) + (32 * stor11.length) + 160]].field_0
                        mem[_50603 + 32] = stor1[_50602]
                        mem[_50603 + 64] = stor2[_50602]
                        mem[_50603 + 96] = stor3[_50602]
                        mem[_50603 + 128] = stor4[_50602]
                        mem[_50603 + 160] = stor5[_50602]
                        mem[_50603 + 192] = stor6[_50602]
                        mem[_50603 + 224] = stor7[_50602].field_0
                        mem[_50603 + 256] = bool(stor7[_50602].field_160)
                        mem[_50603 + 288] = stor8[_50602]
                        if idx >= mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]:
                            revert with 0, 50
                        mem[(32 * idx) + (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192] = _50603
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if arg1 > !arg2:
                        revert with 0, 17
                    if arg1 > !arg2:
                        revert with 0, 17
                    if arg1 + arg2 < mem[(32 * stor11.length) + 128]:
                        _51733 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_51733] = 7
                        mem[_51733 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                        _52597 = mem[64]
                        mem[mem[64]] = 96
                        _53201 = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                        mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                        idx = 0
                        s = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192
                        t = mem[64] + 128
                        while idx < _53201:
                            _59131 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_59131 + 32]
                            mem[t + 64] = mem[_59131 + 64]
                            mem[t + 96] = mem[_59131 + 96]
                            mem[t + 128] = mem[_59131 + 128]
                            mem[t + 160] = mem[_59131 + 172 len 20]
                            mem[t + 192] = mem[_59131 + 192]
                            mem[t + 224] = mem[_59131 + 236 len 20]
                            mem[t + 256] = bool(mem[_59131 + 256])
                            mem[t + 288] = mem[_59131 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_52597 + 32] = arg1 + arg2
                        mem[_52597 + 64] = (320 * _53201) + 128
                        _60072 = mem[_51733]
                        mem[_52597 + (320 * _53201) + 128] = mem[_51733]
                        mem[_52597 + (320 * _53201) + 160 len ceil32(_60072)] = mem[_51733 + 32 len ceil32(_60072)]
                        var56001 = ceil32(_60072)
                        if ceil32(_60072) > _60072:
                            mem[_52597 + (320 * _53201) + _60072 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_60072) + _52597 + (320 * _53201) + -mem[64] + 160
                    _51734 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_51734] = 4
                    mem[_51734 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                    _52598 = mem[64]
                    mem[mem[64]] = 96
                    _53202 = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                    mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                    idx = 0
                    s = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192
                    t = mem[64] + 128
                    while idx < _53202:
                        _59138 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_59138 + 32]
                        mem[t + 64] = mem[_59138 + 64]
                        mem[t + 96] = mem[_59138 + 96]
                        mem[t + 128] = mem[_59138 + 128]
                        mem[t + 160] = mem[_59138 + 172 len 20]
                        mem[t + 192] = mem[_59138 + 192]
                        mem[t + 224] = mem[_59138 + 236 len 20]
                        mem[t + 256] = bool(mem[_59138 + 256])
                        mem[t + 288] = mem[_59138 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_52598 + 32] = arg1 + arg2
                    mem[_52598 + 64] = (320 * _53202) + 128
                    _60073 = mem[_51734]
                    mem[_52598 + (320 * _53202) + 128] = mem[_51734]
                    mem[_52598 + (320 * _53202) + 160 len ceil32(_60073)] = mem[_51734 + 32 len ceil32(_60073)]
                    var56001 = ceil32(_60073)
                    if ceil32(_60073) > _60073:
                        mem[_52598 + (320 * _53202) + _60073 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_60073) + _52598 + (320 * _53202) + -mem[64] + 160
                if stor15[address(arg5)].field_0 < arg1:
                    revert with 0, 17
                if stor15[address(arg5)].field_0 - arg1 > test266151307():
                    revert with 0, 65
                mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160] = stor15[address(arg5)].field_0 - arg1
                mem[64] = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 192
                if not stor15[address(arg5)].field_0 - arg1:
                    idx = 0
                    while idx < stor15[address(arg5)].field_0 - arg1:
                        if arg1 > !idx:
                            revert with 0, 17
                        if arg1 + idx >= mem[(32 * stor11.length) + 128]:
                            revert with 0, 50
                        mem[0] = mem[(32 * arg1 + idx) + (32 * stor11.length) + 160]
                        mem[32] = 12
                        _26034 = sha3(mem[(32 * arg1 + idx) + (32 * stor11.length) + 160], 12)
                        _26035 = mem[64]
                        mem[64] = mem[64] + 320
                        mem[_26035] = stor12[mem[(32 * arg1 + idx) + (32 * stor11.length) + 160]].field_0
                        mem[_26035 + 32] = stor1[_26034]
                        mem[_26035 + 64] = stor2[_26034]
                        mem[_26035 + 96] = stor3[_26034]
                        mem[_26035 + 128] = stor4[_26034]
                        mem[_26035 + 160] = stor5[_26034]
                        mem[_26035 + 192] = stor6[_26034]
                        mem[_26035 + 224] = stor7[_26034].field_0
                        mem[_26035 + 256] = bool(stor7[_26034].field_160)
                        mem[_26035 + 288] = stor8[_26034]
                        if idx >= mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]:
                            revert with 0, 50
                        mem[(32 * idx) + (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192] = _26035
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if arg1 > !(stor15[address(arg5)].field_0 - arg1):
                        revert with 0, 17
                    if arg1 > !(stor15[address(arg5)].field_0 - arg1):
                        revert with 0, 17
                    if stor15[address(arg5)].field_0 < mem[(32 * stor11.length) + 128]:
                        _27187 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_27187] = 7
                        mem[_27187 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                        _28610 = mem[64]
                        mem[mem[64]] = 96
                        _29094 = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                        mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                        idx = 0
                        s = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192
                        t = mem[64] + 128
                        while idx < _29094:
                            _37653 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_37653 + 32]
                            mem[t + 64] = mem[_37653 + 64]
                            mem[t + 96] = mem[_37653 + 96]
                            mem[t + 128] = mem[_37653 + 128]
                            mem[t + 160] = mem[_37653 + 172 len 20]
                            mem[t + 192] = mem[_37653 + 192]
                            mem[t + 224] = mem[_37653 + 236 len 20]
                            mem[t + 256] = bool(mem[_37653 + 256])
                            mem[t + 288] = mem[_37653 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_28610 + 32] = stor15[address(arg5)].field_0
                        mem[_28610 + 64] = (320 * _29094) + 128
                        _38234 = mem[_27187]
                        mem[_28610 + (320 * _29094) + 128] = mem[_27187]
                        mem[_28610 + (320 * _29094) + 160 len ceil32(_38234)] = mem[_27187 + 32 len ceil32(_38234)]
                        var53001 = ceil32(_38234)
                        if ceil32(_38234) > _38234:
                            mem[_28610 + (320 * _29094) + _38234 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_38234) + _28610 + (320 * _29094) + -mem[64] + 160
                    _27188 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_27188] = 4
                    mem[_27188 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                    _28611 = mem[64]
                    mem[mem[64]] = 96
                    _29095 = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                    mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                    idx = 0
                    s = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192
                    t = mem[64] + 128
                    while idx < _29095:
                        _37660 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_37660 + 32]
                        mem[t + 64] = mem[_37660 + 64]
                        mem[t + 96] = mem[_37660 + 96]
                        mem[t + 128] = mem[_37660 + 128]
                        mem[t + 160] = mem[_37660 + 172 len 20]
                        mem[t + 192] = mem[_37660 + 192]
                        mem[t + 224] = mem[_37660 + 236 len 20]
                        mem[t + 256] = bool(mem[_37660 + 256])
                        mem[t + 288] = mem[_37660 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_28611 + 32] = stor15[address(arg5)].field_0
                    mem[_28611 + 64] = (320 * _29095) + 128
                    _38235 = mem[_27188]
                    mem[_28611 + (320 * _29095) + 128] = mem[_27188]
                    mem[_28611 + (320 * _29095) + 160 len ceil32(_38235)] = mem[_27188 + 32 len ceil32(_38235)]
                    var53001 = ceil32(_38235)
                    if ceil32(_38235) > _38235:
                        mem[_28611 + (320 * _29095) + _38235 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_38235) + _28611 + (320 * _29095) + -mem[64] + 160
                mem[64] = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 512
                mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 192] = 0
                mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 224] = 0
                mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 256] = 0
                mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 288] = 0
                mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 320] = 0
                mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 352] = 0
                mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 384] = 0
                mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 416] = 0
                mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 448] = 0
                mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 480] = 0
                mem[var37001] = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 192
                s = var37001
                idx = var37002
                while idx - 1:
                    mem[64] = mem[64] + 320
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 192] = 0
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 224] = 0
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 256] = 0
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 288] = 0
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 320] = 0
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 352] = 0
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 384] = 0
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 416] = 0
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 448] = 0
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 480] = 0
                    mem[s + 32] = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 192
                    s = s + 32
                    idx = idx - 1
                    continue 
                idx = 0
                while idx < stor15[address(arg5)].field_0 - arg1:
                    if arg1 > !idx:
                        revert with 0, 17
                    if arg1 + idx >= mem[(32 * stor11.length) + 128]:
                        revert with 0, 50
                    mem[0] = mem[(32 * arg1 + idx) + (32 * stor11.length) + 160]
                    mem[32] = 12
                    _50608 = sha3(mem[(32 * arg1 + idx) + (32 * stor11.length) + 160], 12)
                    _50609 = mem[64]
                    mem[64] = mem[64] + 320
                    mem[_50609] = stor12[mem[(32 * arg1 + idx) + (32 * stor11.length) + 160]].field_0
                    mem[_50609 + 32] = stor1[_50608]
                    mem[_50609 + 64] = stor2[_50608]
                    mem[_50609 + 96] = stor3[_50608]
                    mem[_50609 + 128] = stor4[_50608]
                    mem[_50609 + 160] = stor5[_50608]
                    mem[_50609 + 192] = stor6[_50608]
                    mem[_50609 + 224] = stor7[_50608].field_0
                    mem[_50609 + 256] = bool(stor7[_50608].field_160)
                    mem[_50609 + 288] = stor8[_50608]
                    if idx >= mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]:
                        revert with 0, 50
                    mem[(32 * idx) + (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192] = _50609
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
                if arg1 > !(stor15[address(arg5)].field_0 - arg1):
                    revert with 0, 17
                if arg1 > !(stor15[address(arg5)].field_0 - arg1):
                    revert with 0, 17
                if stor15[address(arg5)].field_0 < mem[(32 * stor11.length) + 128]:
                    _51735 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_51735] = 7
                    mem[_51735 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                    _52599 = mem[64]
                    mem[mem[64]] = 96
                    _53203 = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                    mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                    idx = 0
                    s = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192
                    t = mem[64] + 128
                    while idx < _53203:
                        _59145 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_59145 + 32]
                        mem[t + 64] = mem[_59145 + 64]
                        mem[t + 96] = mem[_59145 + 96]
                        mem[t + 128] = mem[_59145 + 128]
                        mem[t + 160] = mem[_59145 + 172 len 20]
                        mem[t + 192] = mem[_59145 + 192]
                        mem[t + 224] = mem[_59145 + 236 len 20]
                        mem[t + 256] = bool(mem[_59145 + 256])
                        mem[t + 288] = mem[_59145 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_52599 + 32] = stor15[address(arg5)].field_0
                    mem[_52599 + 64] = (320 * _53203) + 128
                    _60074 = mem[_51735]
                    mem[_52599 + (320 * _53203) + 128] = mem[_51735]
                    mem[_52599 + (320 * _53203) + 160 len ceil32(_60074)] = mem[_51735 + 32 len ceil32(_60074)]
                    var60001 = ceil32(_60074)
                    if ceil32(_60074) > _60074:
                        mem[_52599 + (320 * _53203) + _60074 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_60074) + _52599 + (320 * _53203) + -mem[64] + 160
                _51736 = mem[64]
                mem[64] = mem[64] + 64
                mem[_51736] = 4
                mem[_51736 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                _52600 = mem[64]
                mem[mem[64]] = 96
                _53204 = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                idx = 0
                s = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192
                t = mem[64] + 128
                while idx < _53204:
                    _59152 = mem[s]
                    mem[t] = mem[mem[s]]
                    mem[t + 32] = mem[_59152 + 32]
                    mem[t + 64] = mem[_59152 + 64]
                    mem[t + 96] = mem[_59152 + 96]
                    mem[t + 128] = mem[_59152 + 128]
                    mem[t + 160] = mem[_59152 + 172 len 20]
                    mem[t + 192] = mem[_59152 + 192]
                    mem[t + 224] = mem[_59152 + 236 len 20]
                    mem[t + 256] = bool(mem[_59152 + 256])
                    mem[t + 288] = mem[_59152 + 288]
                    idx = idx + 1
                    s = s + 32
                    t = t + 320
                    continue 
                mem[_52600 + 32] = stor15[address(arg5)].field_0
                mem[_52600 + 64] = (320 * _53204) + 128
                _60075 = mem[_51736]
                mem[_52600 + (320 * _53204) + 128] = mem[_51736]
                mem[_52600 + (320 * _53204) + 160 len ceil32(_60075)] = mem[_51736 + 32 len ceil32(_60075)]
                var60001 = ceil32(_60075)
                if ceil32(_60075) > _60075:
                    mem[_52600 + (320 * _53204) + _60075 + 160] = 0
                return memory
                  from mem[64]
                   len ceil32(_60075) + _52600 + (320 * _53204) + -mem[64] + 160
            if stor15[address(arg5)].field_0 < 1:
                revert with 0, 17
            if arg3:
                if arg2 <= stor15[address(arg5)].field_0 - 1:
                    if arg2 > test266151307():
                        revert with 0, 65
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160] = arg2
                    mem[64] = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 192
                    if not arg2:
                        idx = 0
                        while idx < arg2:
                            if stor15[address(arg5)].field_0 - 1 < idx:
                                revert with 0, 17
                            if stor15[address(arg5)].field_0 + -idx - 1 >= mem[(32 * stor11.length) + 128]:
                                revert with 0, 50
                            mem[0] = mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + 160]
                            mem[32] = 12
                            _26040 = sha3(mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + 160], 12)
                            _26041 = mem[64]
                            mem[64] = mem[64] + 320
                            mem[_26041] = stor12[mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + 160]].field_0
                            mem[_26041 + 32] = stor1[_26040]
                            mem[_26041 + 64] = stor2[_26040]
                            mem[_26041 + 96] = stor3[_26040]
                            mem[_26041 + 128] = stor4[_26040]
                            mem[_26041 + 160] = stor5[_26040]
                            mem[_26041 + 192] = stor6[_26040]
                            mem[_26041 + 224] = stor7[_26040].field_0
                            mem[_26041 + 256] = bool(stor7[_26040].field_160)
                            mem[_26041 + 288] = stor8[_26040]
                            if idx >= mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]:
                                revert with 0, 50
                            mem[(32 * idx) + (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192] = _26041
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            continue 
                        if stor15[address(arg5)].field_0 - 1 < arg2:
                            _24783 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_24783] = 4
                            mem[_24783 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                            _25167 = mem[64]
                            mem[mem[64]] = 96
                            _26037 = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                            mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                            idx = 0
                            s = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192
                            t = mem[64] + 128
                            while idx < _26037:
                                _37667 = mem[s]
                                mem[t] = mem[mem[s]]
                                mem[t + 32] = mem[_37667 + 32]
                                mem[t + 64] = mem[_37667 + 64]
                                mem[t + 96] = mem[_37667 + 96]
                                mem[t + 128] = mem[_37667 + 128]
                                mem[t + 160] = mem[_37667 + 172 len 20]
                                mem[t + 192] = mem[_37667 + 192]
                                mem[t + 224] = mem[_37667 + 236 len 20]
                                mem[t + 256] = bool(mem[_37667 + 256])
                                mem[t + 288] = mem[_37667 + 288]
                                idx = idx + 1
                                s = s + 32
                                t = t + 320
                                continue 
                            mem[_25167 + 32] = 0
                            mem[_25167 + 64] = (320 * _26037) + 128
                            _38236 = mem[_24783]
                            mem[_25167 + (320 * _26037) + 128] = mem[_24783]
                            mem[_25167 + (320 * _26037) + 160 len ceil32(_38236)] = mem[_24783 + 32 len ceil32(_38236)]
                            var44001 = ceil32(_38236)
                            if ceil32(_38236) > _38236:
                                mem[_25167 + (320 * _26037) + _38236 + 160] = 0
                            return memory
                              from mem[64]
                               len ceil32(_38236) + _25167 + (320 * _26037) + -mem[64] + 160
                        _26038 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_26038] = 7
                        mem[_26038 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                        _26811 = mem[64]
                        mem[mem[64]] = 96
                        _27190 = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                        mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                        idx = 0
                        s = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192
                        t = mem[64] + 128
                        while idx < _27190:
                            _37674 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_37674 + 32]
                            mem[t + 64] = mem[_37674 + 64]
                            mem[t + 96] = mem[_37674 + 96]
                            mem[t + 128] = mem[_37674 + 128]
                            mem[t + 160] = mem[_37674 + 172 len 20]
                            mem[t + 192] = mem[_37674 + 192]
                            mem[t + 224] = mem[_37674 + 236 len 20]
                            mem[t + 256] = bool(mem[_37674 + 256])
                            mem[t + 288] = mem[_37674 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_26811 + 32] = stor15[address(arg5)].field_0 + -arg2 - 1
                        mem[_26811 + 64] = (320 * _27190) + 128
                        _38237 = mem[_26038]
                        mem[_26811 + (320 * _27190) + 128] = mem[_26038]
                        mem[_26811 + (320 * _27190) + 160 len ceil32(_38237)] = mem[_26038 + 32 len ceil32(_38237)]
                        var47001 = ceil32(_38237)
                        if ceil32(_38237) > _38237:
                            mem[_26811 + (320 * _27190) + _38237 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_38237) + _26811 + (320 * _27190) + -mem[64] + 160
                    mem[64] = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 512
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 192] = 0
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224] = 0
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 256] = 0
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 288] = 0
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 320] = 0
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 352] = 0
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 384] = 0
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 416] = 0
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 448] = 0
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 480] = 0
                    mem[var34001] = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 192
                    s = var34001
                    idx = var34002
                    while idx - 1:
                        mem[64] = mem[64] + 320
                        mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 192] = 0
                        mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224] = 0
                        mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 256] = 0
                        mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 288] = 0
                        mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 320] = 0
                        mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 352] = 0
                        mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 384] = 0
                        mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 416] = 0
                        mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 448] = 0
                        mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 480] = 0
                        mem[s + 32] = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 192
                        s = s + 32
                        idx = idx - 1
                        continue 
                    idx = 0
                    while idx < arg2:
                        if stor15[address(arg5)].field_0 - 1 < idx:
                            revert with 0, 17
                        if stor15[address(arg5)].field_0 + -idx - 1 >= mem[(32 * stor11.length) + 128]:
                            revert with 0, 50
                        mem[0] = mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + 160]
                        mem[32] = 12
                        _50616 = sha3(mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + 160], 12)
                        _50617 = mem[64]
                        mem[64] = mem[64] + 320
                        mem[_50617] = stor12[mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + 160]].field_0
                        mem[_50617 + 32] = stor1[_50616]
                        mem[_50617 + 64] = stor2[_50616]
                        mem[_50617 + 96] = stor3[_50616]
                        mem[_50617 + 128] = stor4[_50616]
                        mem[_50617 + 160] = stor5[_50616]
                        mem[_50617 + 192] = stor6[_50616]
                        mem[_50617 + 224] = stor7[_50616].field_0
                        mem[_50617 + 256] = bool(stor7[_50616].field_160)
                        mem[_50617 + 288] = stor8[_50616]
                        if idx >= mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]:
                            revert with 0, 50
                        mem[(32 * idx) + (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192] = _50617
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if stor15[address(arg5)].field_0 - 1 < arg2:
                        _49285 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_49285] = 4
                        mem[_49285 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                        _49749 = mem[64]
                        mem[mem[64]] = 96
                        _50613 = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                        mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                        idx = 0
                        s = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192
                        t = mem[64] + 128
                        while idx < _50613:
                            _59159 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_59159 + 32]
                            mem[t + 64] = mem[_59159 + 64]
                            mem[t + 96] = mem[_59159 + 96]
                            mem[t + 128] = mem[_59159 + 128]
                            mem[t + 160] = mem[_59159 + 172 len 20]
                            mem[t + 192] = mem[_59159 + 192]
                            mem[t + 224] = mem[_59159 + 236 len 20]
                            mem[t + 256] = bool(mem[_59159 + 256])
                            mem[t + 288] = mem[_59159 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_49749 + 32] = 0
                        mem[_49749 + 64] = (320 * _50613) + 128
                        _60076 = mem[_49285]
                        mem[_49749 + (320 * _50613) + 128] = mem[_49285]
                        mem[_49749 + (320 * _50613) + 160 len ceil32(_60076)] = mem[_49285 + 32 len ceil32(_60076)]
                        var51001 = ceil32(_60076)
                        if ceil32(_60076) > _60076:
                            mem[_49749 + (320 * _50613) + _60076 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_60076) + _49749 + (320 * _50613) + -mem[64] + 160
                    _50614 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_50614] = 7
                    mem[_50614 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                    _51326 = mem[64]
                    mem[mem[64]] = 96
                    _51738 = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                    mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                    idx = 0
                    s = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192
                    t = mem[64] + 128
                    while idx < _51738:
                        _59166 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_59166 + 32]
                        mem[t + 64] = mem[_59166 + 64]
                        mem[t + 96] = mem[_59166 + 96]
                        mem[t + 128] = mem[_59166 + 128]
                        mem[t + 160] = mem[_59166 + 172 len 20]
                        mem[t + 192] = mem[_59166 + 192]
                        mem[t + 224] = mem[_59166 + 236 len 20]
                        mem[t + 256] = bool(mem[_59166 + 256])
                        mem[t + 288] = mem[_59166 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_51326 + 32] = stor15[address(arg5)].field_0 + -arg2 - 1
                    mem[_51326 + 64] = (320 * _51738) + 128
                    _60077 = mem[_50614]
                    mem[_51326 + (320 * _51738) + 128] = mem[_50614]
                    mem[_51326 + (320 * _51738) + 160 len ceil32(_60077)] = mem[_50614 + 32 len ceil32(_60077)]
                    var54001 = ceil32(_60077)
                    if ceil32(_60077) > _60077:
                        mem[_51326 + (320 * _51738) + _60077 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_60077) + _51326 + (320 * _51738) + -mem[64] + 160
                if 1 > !(stor15[address(arg5)].field_0 - 1):
                    revert with 0, 17
                if stor15[address(arg5)].field_0 > test266151307():
                    revert with 0, 65
                mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160] = stor15[address(arg5)].field_0
                mem[64] = (32 * stor11.length) + (64 * stor15[address(arg5)].field_0) + 192
                if not stor15[address(arg5)].field_0:
                    idx = 0
                    while idx < stor15[address(arg5)].field_0:
                        if stor15[address(arg5)].field_0 - 1 < idx:
                            revert with 0, 17
                        if stor15[address(arg5)].field_0 + -idx - 1 >= mem[(32 * stor11.length) + 128]:
                            revert with 0, 50
                        mem[0] = mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + 160]
                        mem[32] = 12
                        _26046 = sha3(mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + 160], 12)
                        _26047 = mem[64]
                        mem[64] = mem[64] + 320
                        mem[_26047] = stor12[mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + 160]].field_0
                        mem[_26047 + 32] = stor1[_26046]
                        mem[_26047 + 64] = stor2[_26046]
                        mem[_26047 + 96] = stor3[_26046]
                        mem[_26047 + 128] = stor4[_26046]
                        mem[_26047 + 160] = stor5[_26046]
                        mem[_26047 + 192] = stor6[_26046]
                        mem[_26047 + 224] = stor7[_26046].field_0
                        mem[_26047 + 256] = bool(stor7[_26046].field_160)
                        mem[_26047 + 288] = stor8[_26046]
                        if idx >= mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]:
                            revert with 0, 50
                        mem[(32 * idx) + (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192] = _26047
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if stor15[address(arg5)].field_0 - 1 < stor15[address(arg5)].field_0:
                        _24784 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_24784] = 4
                        mem[_24784 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                        _25169 = mem[64]
                        mem[mem[64]] = 96
                        _26043 = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                        mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                        idx = 0
                        s = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192
                        t = mem[64] + 128
                        while idx < _26043:
                            _37681 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_37681 + 32]
                            mem[t + 64] = mem[_37681 + 64]
                            mem[t + 96] = mem[_37681 + 96]
                            mem[t + 128] = mem[_37681 + 128]
                            mem[t + 160] = mem[_37681 + 172 len 20]
                            mem[t + 192] = mem[_37681 + 192]
                            mem[t + 224] = mem[_37681 + 236 len 20]
                            mem[t + 256] = bool(mem[_37681 + 256])
                            mem[t + 288] = mem[_37681 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_25169 + 32] = 0
                        mem[_25169 + 64] = (320 * _26043) + 128
                        _38238 = mem[_24784]
                        mem[_25169 + (320 * _26043) + 128] = mem[_24784]
                        mem[_25169 + (320 * _26043) + 160 len ceil32(_38238)] = mem[_24784 + 32 len ceil32(_38238)]
                        var48001 = ceil32(_38238)
                        if ceil32(_38238) > _38238:
                            mem[_25169 + (320 * _26043) + _38238 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_38238) + _25169 + (320 * _26043) + -mem[64] + 160
                    _26044 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_26044] = 7
                    mem[_26044 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                    _26820 = mem[64]
                    mem[mem[64]] = 96
                    _27192 = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                    mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                    idx = 0
                    s = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192
                    t = mem[64] + 128
                    while idx < _27192:
                        _37688 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_37688 + 32]
                        mem[t + 64] = mem[_37688 + 64]
                        mem[t + 96] = mem[_37688 + 96]
                        mem[t + 128] = mem[_37688 + 128]
                        mem[t + 160] = mem[_37688 + 172 len 20]
                        mem[t + 192] = mem[_37688 + 192]
                        mem[t + 224] = mem[_37688 + 236 len 20]
                        mem[t + 256] = bool(mem[_37688 + 256])
                        mem[t + 288] = mem[_37688 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_26820 + 32] = -1
                    mem[_26820 + 64] = (320 * _27192) + 128
                    _38239 = mem[_26044]
                    mem[_26820 + (320 * _27192) + 128] = mem[_26044]
                    mem[_26820 + (320 * _27192) + 160 len ceil32(_38239)] = mem[_26044 + 32 len ceil32(_38239)]
                    var51001 = ceil32(_38239)
                    if ceil32(_38239) > _38239:
                        mem[_26820 + (320 * _27192) + _38239 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_38239) + _26820 + (320 * _27192) + -mem[64] + 160
                mem[64] = (32 * stor11.length) + (64 * stor15[address(arg5)].field_0) + 512
                mem[(32 * stor11.length) + (64 * stor15[address(arg5)].field_0) + 192] = 0
                mem[(32 * stor11.length) + (64 * stor15[address(arg5)].field_0) + 224] = 0
                mem[(32 * stor11.length) + (64 * stor15[address(arg5)].field_0) + 256] = 0
                mem[(32 * stor11.length) + (64 * stor15[address(arg5)].field_0) + 288] = 0
                mem[(32 * stor11.length) + (64 * stor15[address(arg5)].field_0) + 320] = 0
                mem[(32 * stor11.length) + (64 * stor15[address(arg5)].field_0) + 352] = 0
                mem[(32 * stor11.length) + (64 * stor15[address(arg5)].field_0) + 384] = 0
                mem[(32 * stor11.length) + (64 * stor15[address(arg5)].field_0) + 416] = 0
                mem[(32 * stor11.length) + (64 * stor15[address(arg5)].field_0) + 448] = 0
                mem[(32 * stor11.length) + (64 * stor15[address(arg5)].field_0) + 480] = 0
                mem[var38001] = (32 * stor11.length) + (64 * stor15[address(arg5)].field_0) + 192
                s = var38001
                idx = var38002
                while idx - 1:
                    mem[64] = mem[64] + 320
                    mem[(32 * stor11.length) + (64 * stor15[address(arg5)].field_0) + 192] = 0
                    mem[(32 * stor11.length) + (64 * stor15[address(arg5)].field_0) + 224] = 0
                    mem[(32 * stor11.length) + (64 * stor15[address(arg5)].field_0) + 256] = 0
                    mem[(32 * stor11.length) + (64 * stor15[address(arg5)].field_0) + 288] = 0
                    mem[(32 * stor11.length) + (64 * stor15[address(arg5)].field_0) + 320] = 0
                    mem[(32 * stor11.length) + (64 * stor15[address(arg5)].field_0) + 352] = 0
                    mem[(32 * stor11.length) + (64 * stor15[address(arg5)].field_0) + 384] = 0
                    mem[(32 * stor11.length) + (64 * stor15[address(arg5)].field_0) + 416] = 0
                    mem[(32 * stor11.length) + (64 * stor15[address(arg5)].field_0) + 448] = 0
                    mem[(32 * stor11.length) + (64 * stor15[address(arg5)].field_0) + 480] = 0
                    mem[s + 32] = (32 * stor11.length) + (64 * stor15[address(arg5)].field_0) + 192
                    s = s + 32
                    idx = idx - 1
                    continue 
                idx = 0
                while idx < stor15[address(arg5)].field_0:
                    if stor15[address(arg5)].field_0 - 1 < idx:
                        revert with 0, 17
                    if stor15[address(arg5)].field_0 + -idx - 1 >= mem[(32 * stor11.length) + 128]:
                        revert with 0, 50
                    mem[0] = mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + 160]
                    mem[32] = 12
                    _50624 = sha3(mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + 160], 12)
                    _50625 = mem[64]
                    mem[64] = mem[64] + 320
                    mem[_50625] = stor12[mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + 160]].field_0
                    mem[_50625 + 32] = stor1[_50624]
                    mem[_50625 + 64] = stor2[_50624]
                    mem[_50625 + 96] = stor3[_50624]
                    mem[_50625 + 128] = stor4[_50624]
                    mem[_50625 + 160] = stor5[_50624]
                    mem[_50625 + 192] = stor6[_50624]
                    mem[_50625 + 224] = stor7[_50624].field_0
                    mem[_50625 + 256] = bool(stor7[_50624].field_160)
                    mem[_50625 + 288] = stor8[_50624]
                    if idx >= mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]:
                        revert with 0, 50
                    mem[(32 * idx) + (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192] = _50625
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
                if stor15[address(arg5)].field_0 - 1 < stor15[address(arg5)].field_0:
                    _49286 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_49286] = 4
                    mem[_49286 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                    _49753 = mem[64]
                    mem[mem[64]] = 96
                    _50621 = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                    mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                    idx = 0
                    s = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192
                    t = mem[64] + 128
                    while idx < _50621:
                        _59173 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_59173 + 32]
                        mem[t + 64] = mem[_59173 + 64]
                        mem[t + 96] = mem[_59173 + 96]
                        mem[t + 128] = mem[_59173 + 128]
                        mem[t + 160] = mem[_59173 + 172 len 20]
                        mem[t + 192] = mem[_59173 + 192]
                        mem[t + 224] = mem[_59173 + 236 len 20]
                        mem[t + 256] = bool(mem[_59173 + 256])
                        mem[t + 288] = mem[_59173 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_49753 + 32] = 0
                    mem[_49753 + 64] = (320 * _50621) + 128
                    _60078 = mem[_49286]
                    mem[_49753 + (320 * _50621) + 128] = mem[_49286]
                    mem[_49753 + (320 * _50621) + 160 len ceil32(_60078)] = mem[_49286 + 32 len ceil32(_60078)]
                    var55001 = ceil32(_60078)
                    if ceil32(_60078) > _60078:
                        mem[_49753 + (320 * _50621) + _60078 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_60078) + _49753 + (320 * _50621) + -mem[64] + 160
                _50622 = mem[64]
                mem[64] = mem[64] + 64
                mem[_50622] = 7
                mem[_50622 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                _51334 = mem[64]
                mem[mem[64]] = 96
                _51740 = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                idx = 0
                s = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192
                t = mem[64] + 128
                while idx < _51740:
                    _59180 = mem[s]
                    mem[t] = mem[mem[s]]
                    mem[t + 32] = mem[_59180 + 32]
                    mem[t + 64] = mem[_59180 + 64]
                    mem[t + 96] = mem[_59180 + 96]
                    mem[t + 128] = mem[_59180 + 128]
                    mem[t + 160] = mem[_59180 + 172 len 20]
                    mem[t + 192] = mem[_59180 + 192]
                    mem[t + 224] = mem[_59180 + 236 len 20]
                    mem[t + 256] = bool(mem[_59180 + 256])
                    mem[t + 288] = mem[_59180 + 288]
                    idx = idx + 1
                    s = s + 32
                    t = t + 320
                    continue 
                mem[_51334 + 32] = -1
                mem[_51334 + 64] = (320 * _51740) + 128
                _60079 = mem[_50622]
                mem[_51334 + (320 * _51740) + 128] = mem[_50622]
                mem[_51334 + (320 * _51740) + 160 len ceil32(_60079)] = mem[_50622 + 32 len ceil32(_60079)]
                var58001 = ceil32(_60079)
                if ceil32(_60079) > _60079:
                    mem[_51334 + (320 * _51740) + _60079 + 160] = 0
                return memory
                  from mem[64]
                   len ceil32(_60079) + _51334 + (320 * _51740) + -mem[64] + 160
            if stor15[address(arg5)].field_0 < stor15[address(arg5)].field_0 - 1:
                revert with 0, 17
            if arg2 > 1:
                if stor15[address(arg5)].field_0 < stor15[address(arg5)].field_0 - 1:
                    revert with 0, 17
                mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160] = 1
                mem[64] = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 544
                mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 224] = 0
                mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 256] = 0
                mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 288] = 0
                mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 320] = 0
                mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 352] = 0
                mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 384] = 0
                mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 416] = 0
                mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 448] = 0
                mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 480] = 0
                mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 512] = 0
                mem[var41001] = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 224
                s = var41001
                idx = var41002
                while idx - 1:
                    mem[64] = mem[64] + 320
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 224] = 0
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 256] = 0
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 288] = 0
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 320] = 0
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 352] = 0
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 384] = 0
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 416] = 0
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 448] = 0
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 480] = 0
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 512] = 0
                    mem[s + 32] = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 224
                    s = s + 32
                    idx = idx - 1
                    continue 
                idx = 0
                while idx < 1:
                    if stor15[address(arg5)].field_0 - 1 > !idx:
                        revert with 0, 17
                    if stor15[address(arg5)].field_0 + idx - 1 >= mem[(32 * stor11.length) + 128]:
                        revert with 0, 50
                    mem[0] = mem[(32 * stor15[address(arg5)].field_0 + idx - 1) + (32 * stor11.length) + 160]
                    mem[32] = 12
                    _50636 = sha3(mem[(32 * stor15[address(arg5)].field_0 + idx - 1) + (32 * stor11.length) + 160], 12)
                    _50637 = mem[64]
                    mem[64] = mem[64] + 320
                    mem[_50637] = stor12[mem[(32 * stor15[address(arg5)].field_0 + idx - 1) + (32 * stor11.length) + 160]].field_0
                    mem[_50637 + 32] = stor1[_50636]
                    mem[_50637 + 64] = stor2[_50636]
                    mem[_50637 + 96] = stor3[_50636]
                    mem[_50637 + 128] = stor4[_50636]
                    mem[_50637 + 160] = stor5[_50636]
                    mem[_50637 + 192] = stor6[_50636]
                    mem[_50637 + 224] = stor7[_50636].field_0
                    mem[_50637 + 256] = bool(stor7[_50636].field_160)
                    mem[_50637 + 288] = stor8[_50636]
                    if idx >= mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]:
                        revert with 0, 50
                    mem[(32 * idx) + (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192] = _50637
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
                if stor15[address(arg5)].field_0 - 1 > !1:
                    revert with 0, 17
                if stor15[address(arg5)].field_0 - 1 > !1:
                    revert with 0, 17
                if stor15[address(arg5)].field_0 < mem[(32 * stor11.length) + 128]:
                    _51743 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_51743] = 7
                    mem[_51743 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                    _52619 = mem[64]
                    mem[mem[64]] = 96
                    _53211 = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                    mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                    idx = 0
                    s = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192
                    t = mem[64] + 128
                    while idx < _53211:
                        _59201 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_59201 + 32]
                        mem[t + 64] = mem[_59201 + 64]
                        mem[t + 96] = mem[_59201 + 96]
                        mem[t + 128] = mem[_59201 + 128]
                        mem[t + 160] = mem[_59201 + 172 len 20]
                        mem[t + 192] = mem[_59201 + 192]
                        mem[t + 224] = mem[_59201 + 236 len 20]
                        mem[t + 256] = bool(mem[_59201 + 256])
                        mem[t + 288] = mem[_59201 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_52619 + 32] = stor15[address(arg5)].field_0
                    mem[_52619 + 64] = (320 * _53211) + 128
                    _60082 = mem[_51743]
                    mem[_52619 + (320 * _53211) + 128] = mem[_51743]
                    mem[_52619 + (320 * _53211) + 160 len ceil32(_60082)] = mem[_51743 + 32 len ceil32(_60082)]
                    var64001 = ceil32(_60082)
                    if ceil32(_60082) > _60082:
                        mem[_52619 + (320 * _53211) + _60082 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_60082) + _52619 + (320 * _53211) + -mem[64] + 160
                _51744 = mem[64]
                mem[64] = mem[64] + 64
                mem[_51744] = 4
                mem[_51744 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                _52620 = mem[64]
                mem[mem[64]] = 96
                _53212 = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                idx = 0
                s = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192
                t = mem[64] + 128
                while idx < _53212:
                    _59208 = mem[s]
                    mem[t] = mem[mem[s]]
                    mem[t + 32] = mem[_59208 + 32]
                    mem[t + 64] = mem[_59208 + 64]
                    mem[t + 96] = mem[_59208 + 96]
                    mem[t + 128] = mem[_59208 + 128]
                    mem[t + 160] = mem[_59208 + 172 len 20]
                    mem[t + 192] = mem[_59208 + 192]
                    mem[t + 224] = mem[_59208 + 236 len 20]
                    mem[t + 256] = bool(mem[_59208 + 256])
                    mem[t + 288] = mem[_59208 + 288]
                    idx = idx + 1
                    s = s + 32
                    t = t + 320
                    continue 
                mem[_52620 + 32] = stor15[address(arg5)].field_0
                mem[_52620 + 64] = (320 * _53212) + 128
                _60083 = mem[_51744]
                mem[_52620 + (320 * _53212) + 128] = mem[_51744]
                mem[_52620 + (320 * _53212) + 160 len ceil32(_60083)] = mem[_51744 + 32 len ceil32(_60083)]
                var64001 = ceil32(_60083)
                if ceil32(_60083) > _60083:
                    mem[_52620 + (320 * _53212) + _60083 + 160] = 0
                return memory
                  from mem[64]
                   len ceil32(_60083) + _52620 + (320 * _53212) + -mem[64] + 160
            if arg2 > test266151307():
                revert with 0, 65
            mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160] = arg2
            mem[64] = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 192
            if not arg2:
                idx = 0
                while idx < arg2:
                    if stor15[address(arg5)].field_0 - 1 > !idx:
                        revert with 0, 17
                    if stor15[address(arg5)].field_0 + idx - 1 >= mem[(32 * stor11.length) + 128]:
                        revert with 0, 50
                    mem[0] = mem[(32 * stor15[address(arg5)].field_0 + idx - 1) + (32 * stor11.length) + 160]
                    mem[32] = 12
                    _26050 = sha3(mem[(32 * stor15[address(arg5)].field_0 + idx - 1) + (32 * stor11.length) + 160], 12)
                    _26051 = mem[64]
                    mem[64] = mem[64] + 320
                    mem[_26051] = stor12[mem[(32 * stor15[address(arg5)].field_0 + idx - 1) + (32 * stor11.length) + 160]].field_0
                    mem[_26051 + 32] = stor1[_26050]
                    mem[_26051 + 64] = stor2[_26050]
                    mem[_26051 + 96] = stor3[_26050]
                    mem[_26051 + 128] = stor4[_26050]
                    mem[_26051 + 160] = stor5[_26050]
                    mem[_26051 + 192] = stor6[_26050]
                    mem[_26051 + 224] = stor7[_26050].field_0
                    mem[_26051 + 256] = bool(stor7[_26050].field_160)
                    mem[_26051 + 288] = stor8[_26050]
                    if idx >= mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]:
                        revert with 0, 50
                    mem[(32 * idx) + (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192] = _26051
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
                if stor15[address(arg5)].field_0 - 1 > !arg2:
                    revert with 0, 17
                if stor15[address(arg5)].field_0 - 1 > !arg2:
                    revert with 0, 17
                if stor15[address(arg5)].field_0 + arg2 - 1 < mem[(32 * stor11.length) + 128]:
                    _27193 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_27193] = 7
                    mem[_27193 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                    _28644 = mem[64]
                    mem[mem[64]] = 96
                    _29100 = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                    mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                    idx = 0
                    s = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192
                    t = mem[64] + 128
                    while idx < _29100:
                        _37695 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_37695 + 32]
                        mem[t + 64] = mem[_37695 + 64]
                        mem[t + 96] = mem[_37695 + 96]
                        mem[t + 128] = mem[_37695 + 128]
                        mem[t + 160] = mem[_37695 + 172 len 20]
                        mem[t + 192] = mem[_37695 + 192]
                        mem[t + 224] = mem[_37695 + 236 len 20]
                        mem[t + 256] = bool(mem[_37695 + 256])
                        mem[t + 288] = mem[_37695 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_28644 + 32] = stor15[address(arg5)].field_0 + arg2 - 1
                    mem[_28644 + 64] = (320 * _29100) + 128
                    _38240 = mem[_27193]
                    mem[_28644 + (320 * _29100) + 128] = mem[_27193]
                    mem[_28644 + (320 * _29100) + 160 len ceil32(_38240)] = mem[_27193 + 32 len ceil32(_38240)]
                    var53001 = ceil32(_38240)
                    if ceil32(_38240) > _38240:
                        mem[_28644 + (320 * _29100) + _38240 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_38240) + _28644 + (320 * _29100) + -mem[64] + 160
                _27194 = mem[64]
                mem[64] = mem[64] + 64
                mem[_27194] = 4
                mem[_27194 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                _28645 = mem[64]
                mem[mem[64]] = 96
                _29101 = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                idx = 0
                s = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192
                t = mem[64] + 128
                while idx < _29101:
                    _37702 = mem[s]
                    mem[t] = mem[mem[s]]
                    mem[t + 32] = mem[_37702 + 32]
                    mem[t + 64] = mem[_37702 + 64]
                    mem[t + 96] = mem[_37702 + 96]
                    mem[t + 128] = mem[_37702 + 128]
                    mem[t + 160] = mem[_37702 + 172 len 20]
                    mem[t + 192] = mem[_37702 + 192]
                    mem[t + 224] = mem[_37702 + 236 len 20]
                    mem[t + 256] = bool(mem[_37702 + 256])
                    mem[t + 288] = mem[_37702 + 288]
                    idx = idx + 1
                    s = s + 32
                    t = t + 320
                    continue 
                mem[_28645 + 32] = stor15[address(arg5)].field_0 + arg2 - 1
                mem[_28645 + 64] = (320 * _29101) + 128
                _38241 = mem[_27194]
                mem[_28645 + (320 * _29101) + 128] = mem[_27194]
                mem[_28645 + (320 * _29101) + 160 len ceil32(_38241)] = mem[_27194 + 32 len ceil32(_38241)]
                var53001 = ceil32(_38241)
                if ceil32(_38241) > _38241:
                    mem[_28645 + (320 * _29101) + _38241 + 160] = 0
                return memory
                  from mem[64]
                   len ceil32(_38241) + _28645 + (320 * _29101) + -mem[64] + 160
            mem[64] = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 512
            mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 192] = 0
            mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224] = 0
            mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 256] = 0
            mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 288] = 0
            mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 320] = 0
            mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 352] = 0
            mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 384] = 0
            mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 416] = 0
            mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 448] = 0
            mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 480] = 0
            mem[var37001] = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 192
            s = var37001
            idx = var37002
            while idx - 1:
                mem[64] = mem[64] + 320
                mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 192] = 0
                mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224] = 0
                mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 256] = 0
                mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 288] = 0
                mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 320] = 0
                mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 352] = 0
                mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 384] = 0
                mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 416] = 0
                mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 448] = 0
                mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 480] = 0
                mem[s + 32] = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 192
                s = s + 32
                idx = idx - 1
                continue 
            idx = 0
            while idx < arg2:
                if stor15[address(arg5)].field_0 - 1 > !idx:
                    revert with 0, 17
                if stor15[address(arg5)].field_0 + idx - 1 >= mem[(32 * stor11.length) + 128]:
                    revert with 0, 50
                mem[0] = mem[(32 * stor15[address(arg5)].field_0 + idx - 1) + (32 * stor11.length) + 160]
                mem[32] = 12
                _50630 = sha3(mem[(32 * stor15[address(arg5)].field_0 + idx - 1) + (32 * stor11.length) + 160], 12)
                _50631 = mem[64]
                mem[64] = mem[64] + 320
                mem[_50631] = stor12[mem[(32 * stor15[address(arg5)].field_0 + idx - 1) + (32 * stor11.length) + 160]].field_0
                mem[_50631 + 32] = stor1[_50630]
                mem[_50631 + 64] = stor2[_50630]
                mem[_50631 + 96] = stor3[_50630]
                mem[_50631 + 128] = stor4[_50630]
                mem[_50631 + 160] = stor5[_50630]
                mem[_50631 + 192] = stor6[_50630]
                mem[_50631 + 224] = stor7[_50630].field_0
                mem[_50631 + 256] = bool(stor7[_50630].field_160)
                mem[_50631 + 288] = stor8[_50630]
                if idx >= mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]:
                    revert with 0, 50
                mem[(32 * idx) + (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192] = _50631
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
            if stor15[address(arg5)].field_0 - 1 > !arg2:
                revert with 0, 17
            if stor15[address(arg5)].field_0 - 1 > !arg2:
                revert with 0, 17
            if stor15[address(arg5)].field_0 + arg2 - 1 < mem[(32 * stor11.length) + 128]:
                _51741 = mem[64]
                mem[64] = mem[64] + 64
                mem[_51741] = 7
                mem[_51741 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                _52617 = mem[64]
                mem[mem[64]] = 96
                _53209 = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                idx = 0
                s = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192
                t = mem[64] + 128
                while idx < _53209:
                    _59187 = mem[s]
                    mem[t] = mem[mem[s]]
                    mem[t + 32] = mem[_59187 + 32]
                    mem[t + 64] = mem[_59187 + 64]
                    mem[t + 96] = mem[_59187 + 96]
                    mem[t + 128] = mem[_59187 + 128]
                    mem[t + 160] = mem[_59187 + 172 len 20]
                    mem[t + 192] = mem[_59187 + 192]
                    mem[t + 224] = mem[_59187 + 236 len 20]
                    mem[t + 256] = bool(mem[_59187 + 256])
                    mem[t + 288] = mem[_59187 + 288]
                    idx = idx + 1
                    s = s + 32
                    t = t + 320
                    continue 
                mem[_52617 + 32] = stor15[address(arg5)].field_0 + arg2 - 1
                mem[_52617 + 64] = (320 * _53209) + 128
                _60080 = mem[_51741]
                mem[_52617 + (320 * _53209) + 128] = mem[_51741]
                mem[_52617 + (320 * _53209) + 160 len ceil32(_60080)] = mem[_51741 + 32 len ceil32(_60080)]
                var60001 = ceil32(_60080)
                if ceil32(_60080) > _60080:
                    mem[_52617 + (320 * _53209) + _60080 + 160] = 0
                return memory
                  from mem[64]
                   len ceil32(_60080) + _52617 + (320 * _53209) + -mem[64] + 160
            _51742 = mem[64]
            mem[64] = mem[64] + 64
            mem[_51742] = 4
            mem[_51742 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
            _52618 = mem[64]
            mem[mem[64]] = 96
            _53210 = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
            mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
            idx = 0
            s = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192
            t = mem[64] + 128
            while idx < _53210:
                _59194 = mem[s]
                mem[t] = mem[mem[s]]
                mem[t + 32] = mem[_59194 + 32]
                mem[t + 64] = mem[_59194 + 64]
                mem[t + 96] = mem[_59194 + 96]
                mem[t + 128] = mem[_59194 + 128]
                mem[t + 160] = mem[_59194 + 172 len 20]
                mem[t + 192] = mem[_59194 + 192]
                mem[t + 224] = mem[_59194 + 236 len 20]
                mem[t + 256] = bool(mem[_59194 + 256])
                mem[t + 288] = mem[_59194 + 288]
                idx = idx + 1
                s = s + 32
                t = t + 320
                continue 
            mem[_52618 + 32] = stor15[address(arg5)].field_0 + arg2 - 1
            mem[_52618 + 64] = (320 * _53210) + 128
            _60081 = mem[_51742]
            mem[_52618 + (320 * _53210) + 128] = mem[_51742]
            mem[_52618 + (320 * _53210) + 160 len ceil32(_60081)] = mem[_51742 + 32 len ceil32(_60081)]
            var60001 = ceil32(_60081)
            if ceil32(_60081) > _60081:
                mem[_52618 + (320 * _53210) + _60081 + 160] = 0
            return memory
              from mem[64]
               len ceil32(_60081) + _52618 + (320 * _53210) + -mem[64] + 160
        mem[0] = sha3(address(arg5), 15)
        mem[(32 * stor11.length) + 160] = stor15[address(arg5)].field_0
        idx = (32 * stor11.length) + 160
        s = 0
        while (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 128 > idx:
            mem[idx + 32] = stor15[address(arg5)][s].field_256
            idx = idx + 32
            s = s + 1
            continue 
        if not stor15[address(arg5)].field_0:
            mem[64] = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 256
            mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192] = 4
            mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 224] = 0x6f76657200000000000000000000000000000000000000000000000000000000
            mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 256] = 96
            _39705 = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
            mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 352] = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
            idx = 0
            s = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192
            t = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 384
            while idx < mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]:
                _49133 = mem[s]
                mem[t] = mem[mem[s]]
                mem[t + 32] = mem[_49133 + 32]
                mem[t + 64] = mem[_49133 + 64]
                mem[t + 96] = mem[_49133 + 96]
                mem[t + 128] = mem[_49133 + 128]
                mem[t + 160] = mem[_49133 + 172 len 20]
                mem[t + 192] = mem[_49133 + 192]
                mem[t + 224] = mem[_49133 + 236 len 20]
                mem[t + 256] = bool(mem[_49133 + 256])
                mem[t + 288] = mem[_49133 + 288]
                idx = idx + 1
                s = s + 32
                t = t + 320
                continue 
            mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 288] = 0
            mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 320] = (320 * _39705) + 128
            mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (320 * _39705) + 384] = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192]
            mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (320 * _39705) + 416 len ceil32(mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192])] = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 224 len ceil32(mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192])]
            var36001 = ceil32(mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192])
            if ceil32(mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192]) > mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192]:
                mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (320 * _39705) + mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192] + 416] = 0
            return memory
              from mem[64]
               len ceil32(mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192]) + (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (320 * _39705) + -mem[64] + 416
        if arg1 < stor15[address(arg5)].field_0:
            if arg3:
                if arg2 <= arg1:
                    if arg2 > test266151307():
                        revert with 0, 65
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160] = arg2
                    mem[64] = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 192
                    if not arg2:
                        idx = 0
                        while idx < arg2:
                            if arg1 < idx:
                                revert with 0, 17
                            if arg1 - idx >= mem[(32 * stor11.length) + 128]:
                                revert with 0, 50
                            mem[0] = mem[(32 * arg1 - idx) + (32 * stor11.length) + 160]
                            mem[32] = 12
                            _50642 = sha3(mem[(32 * arg1 - idx) + (32 * stor11.length) + 160], 12)
                            _50643 = mem[64]
                            mem[64] = mem[64] + 320
                            mem[_50643] = stor12[mem[(32 * arg1 - idx) + (32 * stor11.length) + 160]].field_0
                            mem[_50643 + 32] = stor1[_50642]
                            mem[_50643 + 64] = stor2[_50642]
                            mem[_50643 + 96] = stor3[_50642]
                            mem[_50643 + 128] = stor4[_50642]
                            mem[_50643 + 160] = stor5[_50642]
                            mem[_50643 + 192] = stor6[_50642]
                            mem[_50643 + 224] = stor7[_50642].field_0
                            mem[_50643 + 256] = bool(stor7[_50642].field_160)
                            mem[_50643 + 288] = stor8[_50642]
                            if idx >= mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]:
                                revert with 0, 50
                            mem[(32 * idx) + (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192] = _50643
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            continue 
                        if arg1 < arg2:
                            _49287 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_49287] = 4
                            mem[_49287 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                            _49761 = mem[64]
                            mem[mem[64]] = 96
                            _50639 = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                            mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                            idx = 0
                            s = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192
                            t = mem[64] + 128
                            while idx < _50639:
                                _59215 = mem[s]
                                mem[t] = mem[mem[s]]
                                mem[t + 32] = mem[_59215 + 32]
                                mem[t + 64] = mem[_59215 + 64]
                                mem[t + 96] = mem[_59215 + 96]
                                mem[t + 128] = mem[_59215 + 128]
                                mem[t + 160] = mem[_59215 + 172 len 20]
                                mem[t + 192] = mem[_59215 + 192]
                                mem[t + 224] = mem[_59215 + 236 len 20]
                                mem[t + 256] = bool(mem[_59215 + 256])
                                mem[t + 288] = mem[_59215 + 288]
                                idx = idx + 1
                                s = s + 32
                                t = t + 320
                                continue 
                            mem[_49761 + 32] = 0
                            mem[_49761 + 64] = (320 * _50639) + 128
                            _60084 = mem[_49287]
                            mem[_49761 + (320 * _50639) + 128] = mem[_49287]
                            mem[_49761 + (320 * _50639) + 160 len ceil32(_60084)] = mem[_49287 + 32 len ceil32(_60084)]
                            var44001 = ceil32(_60084)
                            if ceil32(_60084) > _60084:
                                mem[_49761 + (320 * _50639) + _60084 + 160] = 0
                            return memory
                              from mem[64]
                               len ceil32(_60084) + _49761 + (320 * _50639) + -mem[64] + 160
                        _50640 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_50640] = 7
                        mem[_50640 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                        _51342 = mem[64]
                        mem[mem[64]] = 96
                        _51746 = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                        mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                        idx = 0
                        s = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192
                        t = mem[64] + 128
                        while idx < _51746:
                            _59222 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_59222 + 32]
                            mem[t + 64] = mem[_59222 + 64]
                            mem[t + 96] = mem[_59222 + 96]
                            mem[t + 128] = mem[_59222 + 128]
                            mem[t + 160] = mem[_59222 + 172 len 20]
                            mem[t + 192] = mem[_59222 + 192]
                            mem[t + 224] = mem[_59222 + 236 len 20]
                            mem[t + 256] = bool(mem[_59222 + 256])
                            mem[t + 288] = mem[_59222 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_51342 + 32] = arg1 - arg2
                        mem[_51342 + 64] = (320 * _51746) + 128
                        _60085 = mem[_50640]
                        mem[_51342 + (320 * _51746) + 128] = mem[_50640]
                        mem[_51342 + (320 * _51746) + 160 len ceil32(_60085)] = mem[_50640 + 32 len ceil32(_60085)]
                        var47001 = ceil32(_60085)
                        if ceil32(_60085) > _60085:
                            mem[_51342 + (320 * _51746) + _60085 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_60085) + _51342 + (320 * _51746) + -mem[64] + 160
                    mem[64] = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 512
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 192] = 0
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224] = 0
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 256] = 0
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 288] = 0
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 320] = 0
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 352] = 0
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 384] = 0
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 416] = 0
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 448] = 0
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 480] = 0
                    mem[var34001] = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 192
                    s = var34001
                    idx = var34002
                    while idx - 1:
                        mem[64] = mem[64] + 320
                        mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 192] = 0
                        mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224] = 0
                        mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 256] = 0
                        mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 288] = 0
                        mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 320] = 0
                        mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 352] = 0
                        mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 384] = 0
                        mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 416] = 0
                        mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 448] = 0
                        mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 480] = 0
                        mem[s + 32] = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 192
                        s = s + 32
                        idx = idx - 1
                        continue 
                    idx = 0
                    while idx < arg2:
                        if arg1 < idx:
                            revert with 0, 17
                        if arg1 - idx >= mem[(32 * stor11.length) + 128]:
                            revert with 0, 50
                        mem[0] = mem[(32 * arg1 - idx) + (32 * stor11.length) + 160]
                        mem[32] = 12
                        _65917 = sha3(mem[(32 * arg1 - idx) + (32 * stor11.length) + 160], 12)
                        _65918 = mem[64]
                        mem[64] = mem[64] + 320
                        mem[_65918] = stor12[mem[(32 * arg1 - idx) + (32 * stor11.length) + 160]].field_0
                        mem[_65918 + 32] = stor1[_65917]
                        mem[_65918 + 64] = stor2[_65917]
                        mem[_65918 + 96] = stor3[_65917]
                        mem[_65918 + 128] = stor4[_65917]
                        mem[_65918 + 160] = stor5[_65917]
                        mem[_65918 + 192] = stor6[_65917]
                        mem[_65918 + 224] = stor7[_65917].field_0
                        mem[_65918 + 256] = bool(stor7[_65917].field_160)
                        mem[_65918 + 288] = stor8[_65917]
                        if idx >= mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]:
                            revert with 0, 50
                        mem[(32 * idx) + (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192] = _65918
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if arg1 < arg2:
                        _65244 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_65244] = 4
                        mem[_65244 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                        _65485 = mem[64]
                        mem[mem[64]] = 96
                        _65914 = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                        mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                        idx = 0
                        s = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192
                        t = mem[64] + 128
                        while idx < _65914:
                            _68680 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_68680 + 32]
                            mem[t + 64] = mem[_68680 + 64]
                            mem[t + 96] = mem[_68680 + 96]
                            mem[t + 128] = mem[_68680 + 128]
                            mem[t + 160] = mem[_68680 + 172 len 20]
                            mem[t + 192] = mem[_68680 + 192]
                            mem[t + 224] = mem[_68680 + 236 len 20]
                            mem[t + 256] = bool(mem[_68680 + 256])
                            mem[t + 288] = mem[_68680 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_65485 + 32] = 0
                        mem[_65485 + 64] = (320 * _65914) + 128
                        _69273 = mem[_65244]
                        mem[_65485 + (320 * _65914) + 128] = mem[_65244]
                        mem[_65485 + (320 * _65914) + 160 len ceil32(_69273)] = mem[_65244 + 32 len ceil32(_69273)]
                        var51001 = ceil32(_69273)
                        if ceil32(_69273) > _69273:
                            mem[_65485 + (320 * _65914) + _69273 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_69273) + _65485 + (320 * _65914) + -mem[64] + 160
                    _65915 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_65915] = 7
                    mem[_65915 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                    _66284 = mem[64]
                    mem[mem[64]] = 96
                    _66476 = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                    mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                    idx = 0
                    s = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192
                    t = mem[64] + 128
                    while idx < _66476:
                        _68687 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_68687 + 32]
                        mem[t + 64] = mem[_68687 + 64]
                        mem[t + 96] = mem[_68687 + 96]
                        mem[t + 128] = mem[_68687 + 128]
                        mem[t + 160] = mem[_68687 + 172 len 20]
                        mem[t + 192] = mem[_68687 + 192]
                        mem[t + 224] = mem[_68687 + 236 len 20]
                        mem[t + 256] = bool(mem[_68687 + 256])
                        mem[t + 288] = mem[_68687 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_66284 + 32] = arg1 - arg2
                    mem[_66284 + 64] = (320 * _66476) + 128
                    _69274 = mem[_65915]
                    mem[_66284 + (320 * _66476) + 128] = mem[_65915]
                    mem[_66284 + (320 * _66476) + 160 len ceil32(_69274)] = mem[_65915 + 32 len ceil32(_69274)]
                    var54001 = ceil32(_69274)
                    if ceil32(_69274) > _69274:
                        mem[_66284 + (320 * _66476) + _69274 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_69274) + _66284 + (320 * _66476) + -mem[64] + 160
                if 1 > !arg1:
                    revert with 0, 17
                if arg1 + 1 > test266151307():
                    revert with 0, 65
                mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160] = arg1 + 1
                mem[64] = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 192
                if not arg1 + 1:
                    idx = 0
                    while idx < arg1 + 1:
                        if arg1 < idx:
                            revert with 0, 17
                        if arg1 - idx >= mem[(32 * stor11.length) + 128]:
                            revert with 0, 50
                        mem[0] = mem[(32 * arg1 - idx) + (32 * stor11.length) + 160]
                        mem[32] = 12
                        _50648 = sha3(mem[(32 * arg1 - idx) + (32 * stor11.length) + 160], 12)
                        _50649 = mem[64]
                        mem[64] = mem[64] + 320
                        mem[_50649] = stor12[mem[(32 * arg1 - idx) + (32 * stor11.length) + 160]].field_0
                        mem[_50649 + 32] = stor1[_50648]
                        mem[_50649 + 64] = stor2[_50648]
                        mem[_50649 + 96] = stor3[_50648]
                        mem[_50649 + 128] = stor4[_50648]
                        mem[_50649 + 160] = stor5[_50648]
                        mem[_50649 + 192] = stor6[_50648]
                        mem[_50649 + 224] = stor7[_50648].field_0
                        mem[_50649 + 256] = bool(stor7[_50648].field_160)
                        mem[_50649 + 288] = stor8[_50648]
                        if idx >= mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]:
                            revert with 0, 50
                        mem[(32 * idx) + (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192] = _50649
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if arg1 < arg1 + 1:
                        _49288 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_49288] = 4
                        mem[_49288 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                        _49763 = mem[64]
                        mem[mem[64]] = 96
                        _50645 = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                        mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                        idx = 0
                        s = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192
                        t = mem[64] + 128
                        while idx < _50645:
                            _59229 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_59229 + 32]
                            mem[t + 64] = mem[_59229 + 64]
                            mem[t + 96] = mem[_59229 + 96]
                            mem[t + 128] = mem[_59229 + 128]
                            mem[t + 160] = mem[_59229 + 172 len 20]
                            mem[t + 192] = mem[_59229 + 192]
                            mem[t + 224] = mem[_59229 + 236 len 20]
                            mem[t + 256] = bool(mem[_59229 + 256])
                            mem[t + 288] = mem[_59229 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_49763 + 32] = 0
                        mem[_49763 + 64] = (320 * _50645) + 128
                        _60086 = mem[_49288]
                        mem[_49763 + (320 * _50645) + 128] = mem[_49288]
                        mem[_49763 + (320 * _50645) + 160 len ceil32(_60086)] = mem[_49288 + 32 len ceil32(_60086)]
                        var48001 = ceil32(_60086)
                        if ceil32(_60086) > _60086:
                            mem[_49763 + (320 * _50645) + _60086 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_60086) + _49763 + (320 * _50645) + -mem[64] + 160
                    _50646 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_50646] = 7
                    mem[_50646 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                    _51351 = mem[64]
                    mem[mem[64]] = 96
                    _51748 = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                    mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                    idx = 0
                    s = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192
                    t = mem[64] + 128
                    while idx < _51748:
                        _59236 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_59236 + 32]
                        mem[t + 64] = mem[_59236 + 64]
                        mem[t + 96] = mem[_59236 + 96]
                        mem[t + 128] = mem[_59236 + 128]
                        mem[t + 160] = mem[_59236 + 172 len 20]
                        mem[t + 192] = mem[_59236 + 192]
                        mem[t + 224] = mem[_59236 + 236 len 20]
                        mem[t + 256] = bool(mem[_59236 + 256])
                        mem[t + 288] = mem[_59236 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_51351 + 32] = -1
                    mem[_51351 + 64] = (320 * _51748) + 128
                    _60087 = mem[_50646]
                    mem[_51351 + (320 * _51748) + 128] = mem[_50646]
                    mem[_51351 + (320 * _51748) + 160 len ceil32(_60087)] = mem[_50646 + 32 len ceil32(_60087)]
                    var51001 = ceil32(_60087)
                    if ceil32(_60087) > _60087:
                        mem[_51351 + (320 * _51748) + _60087 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_60087) + _51351 + (320 * _51748) + -mem[64] + 160
                mem[64] = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 512
                mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 192] = 0
                mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 224] = 0
                mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 256] = 0
                mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 288] = 0
                mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 320] = 0
                mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 352] = 0
                mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 384] = 0
                mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 416] = 0
                mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 448] = 0
                mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 480] = 0
                mem[var38001] = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 192
                s = var38001
                idx = var38002
                while idx - 1:
                    mem[64] = mem[64] + 320
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 192] = 0
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 224] = 0
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 256] = 0
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 288] = 0
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 320] = 0
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 352] = 0
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 384] = 0
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 416] = 0
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 448] = 0
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 480] = 0
                    mem[s + 32] = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 192
                    s = s + 32
                    idx = idx - 1
                    continue 
                idx = 0
                while idx < arg1 + 1:
                    if arg1 < idx:
                        revert with 0, 17
                    if arg1 - idx >= mem[(32 * stor11.length) + 128]:
                        revert with 0, 50
                    mem[0] = mem[(32 * arg1 - idx) + (32 * stor11.length) + 160]
                    mem[32] = 12
                    _65925 = sha3(mem[(32 * arg1 - idx) + (32 * stor11.length) + 160], 12)
                    _65926 = mem[64]
                    mem[64] = mem[64] + 320
                    mem[_65926] = stor12[mem[(32 * arg1 - idx) + (32 * stor11.length) + 160]].field_0
                    mem[_65926 + 32] = stor1[_65925]
                    mem[_65926 + 64] = stor2[_65925]
                    mem[_65926 + 96] = stor3[_65925]
                    mem[_65926 + 128] = stor4[_65925]
                    mem[_65926 + 160] = stor5[_65925]
                    mem[_65926 + 192] = stor6[_65925]
                    mem[_65926 + 224] = stor7[_65925].field_0
                    mem[_65926 + 256] = bool(stor7[_65925].field_160)
                    mem[_65926 + 288] = stor8[_65925]
                    if idx >= mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]:
                        revert with 0, 50
                    mem[(32 * idx) + (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192] = _65926
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
                if arg1 < arg1 + 1:
                    _65245 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_65245] = 4
                    mem[_65245 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                    _65489 = mem[64]
                    mem[mem[64]] = 96
                    _65922 = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                    mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                    idx = 0
                    s = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192
                    t = mem[64] + 128
                    while idx < _65922:
                        _68694 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_68694 + 32]
                        mem[t + 64] = mem[_68694 + 64]
                        mem[t + 96] = mem[_68694 + 96]
                        mem[t + 128] = mem[_68694 + 128]
                        mem[t + 160] = mem[_68694 + 172 len 20]
                        mem[t + 192] = mem[_68694 + 192]
                        mem[t + 224] = mem[_68694 + 236 len 20]
                        mem[t + 256] = bool(mem[_68694 + 256])
                        mem[t + 288] = mem[_68694 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_65489 + 32] = 0
                    mem[_65489 + 64] = (320 * _65922) + 128
                    _69275 = mem[_65245]
                    mem[_65489 + (320 * _65922) + 128] = mem[_65245]
                    mem[_65489 + (320 * _65922) + 160 len ceil32(_69275)] = mem[_65245 + 32 len ceil32(_69275)]
                    var55001 = ceil32(_69275)
                    if ceil32(_69275) > _69275:
                        mem[_65489 + (320 * _65922) + _69275 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_69275) + _65489 + (320 * _65922) + -mem[64] + 160
                _65923 = mem[64]
                mem[64] = mem[64] + 64
                mem[_65923] = 7
                mem[_65923 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                _66292 = mem[64]
                mem[mem[64]] = 96
                _66478 = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                idx = 0
                s = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192
                t = mem[64] + 128
                while idx < _66478:
                    _68701 = mem[s]
                    mem[t] = mem[mem[s]]
                    mem[t + 32] = mem[_68701 + 32]
                    mem[t + 64] = mem[_68701 + 64]
                    mem[t + 96] = mem[_68701 + 96]
                    mem[t + 128] = mem[_68701 + 128]
                    mem[t + 160] = mem[_68701 + 172 len 20]
                    mem[t + 192] = mem[_68701 + 192]
                    mem[t + 224] = mem[_68701 + 236 len 20]
                    mem[t + 256] = bool(mem[_68701 + 256])
                    mem[t + 288] = mem[_68701 + 288]
                    idx = idx + 1
                    s = s + 32
                    t = t + 320
                    continue 
                mem[_66292 + 32] = -1
                mem[_66292 + 64] = (320 * _66478) + 128
                _69276 = mem[_65923]
                mem[_66292 + (320 * _66478) + 128] = mem[_65923]
                mem[_66292 + (320 * _66478) + 160 len ceil32(_69276)] = mem[_65923 + 32 len ceil32(_69276)]
                var58001 = ceil32(_69276)
                if ceil32(_69276) > _69276:
                    mem[_66292 + (320 * _66478) + _69276 + 160] = 0
                return memory
                  from mem[64]
                   len ceil32(_69276) + _66292 + (320 * _66478) + -mem[64] + 160
            if stor15[address(arg5)].field_0 < arg1:
                revert with 0, 17
            if arg2 <= stor15[address(arg5)].field_0 - arg1:
                if arg2 > test266151307():
                    revert with 0, 65
                mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160] = arg2
                mem[64] = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 192
                if not arg2:
                    idx = 0
                    while idx < arg2:
                        if arg1 > !idx:
                            revert with 0, 17
                        if arg1 + idx >= mem[(32 * stor11.length) + 128]:
                            revert with 0, 50
                        mem[0] = mem[(32 * arg1 + idx) + (32 * stor11.length) + 160]
                        mem[32] = 12
                        _50652 = sha3(mem[(32 * arg1 + idx) + (32 * stor11.length) + 160], 12)
                        _50653 = mem[64]
                        mem[64] = mem[64] + 320
                        mem[_50653] = stor12[mem[(32 * arg1 + idx) + (32 * stor11.length) + 160]].field_0
                        mem[_50653 + 32] = stor1[_50652]
                        mem[_50653 + 64] = stor2[_50652]
                        mem[_50653 + 96] = stor3[_50652]
                        mem[_50653 + 128] = stor4[_50652]
                        mem[_50653 + 160] = stor5[_50652]
                        mem[_50653 + 192] = stor6[_50652]
                        mem[_50653 + 224] = stor7[_50652].field_0
                        mem[_50653 + 256] = bool(stor7[_50652].field_160)
                        mem[_50653 + 288] = stor8[_50652]
                        if idx >= mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]:
                            revert with 0, 50
                        mem[(32 * idx) + (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192] = _50653
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if arg1 > !arg2:
                        revert with 0, 17
                    if arg1 > !arg2:
                        revert with 0, 17
                    if arg1 + arg2 < mem[(32 * stor11.length) + 128]:
                        _51749 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_51749] = 7
                        mem[_51749 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                        _52649 = mem[64]
                        mem[mem[64]] = 96
                        _53217 = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                        mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                        idx = 0
                        s = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192
                        t = mem[64] + 128
                        while idx < _53217:
                            _59243 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_59243 + 32]
                            mem[t + 64] = mem[_59243 + 64]
                            mem[t + 96] = mem[_59243 + 96]
                            mem[t + 128] = mem[_59243 + 128]
                            mem[t + 160] = mem[_59243 + 172 len 20]
                            mem[t + 192] = mem[_59243 + 192]
                            mem[t + 224] = mem[_59243 + 236 len 20]
                            mem[t + 256] = bool(mem[_59243 + 256])
                            mem[t + 288] = mem[_59243 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_52649 + 32] = arg1 + arg2
                        mem[_52649 + 64] = (320 * _53217) + 128
                        _60088 = mem[_51749]
                        mem[_52649 + (320 * _53217) + 128] = mem[_51749]
                        mem[_52649 + (320 * _53217) + 160 len ceil32(_60088)] = mem[_51749 + 32 len ceil32(_60088)]
                        var53001 = ceil32(_60088)
                        if ceil32(_60088) > _60088:
                            mem[_52649 + (320 * _53217) + _60088 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_60088) + _52649 + (320 * _53217) + -mem[64] + 160
                    _51750 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_51750] = 4
                    mem[_51750 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                    _52650 = mem[64]
                    mem[mem[64]] = 96
                    _53218 = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                    mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                    idx = 0
                    s = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192
                    t = mem[64] + 128
                    while idx < _53218:
                        _59250 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_59250 + 32]
                        mem[t + 64] = mem[_59250 + 64]
                        mem[t + 96] = mem[_59250 + 96]
                        mem[t + 128] = mem[_59250 + 128]
                        mem[t + 160] = mem[_59250 + 172 len 20]
                        mem[t + 192] = mem[_59250 + 192]
                        mem[t + 224] = mem[_59250 + 236 len 20]
                        mem[t + 256] = bool(mem[_59250 + 256])
                        mem[t + 288] = mem[_59250 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_52650 + 32] = arg1 + arg2
                    mem[_52650 + 64] = (320 * _53218) + 128
                    _60089 = mem[_51750]
                    mem[_52650 + (320 * _53218) + 128] = mem[_51750]
                    mem[_52650 + (320 * _53218) + 160 len ceil32(_60089)] = mem[_51750 + 32 len ceil32(_60089)]
                    var53001 = ceil32(_60089)
                    if ceil32(_60089) > _60089:
                        mem[_52650 + (320 * _53218) + _60089 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_60089) + _52650 + (320 * _53218) + -mem[64] + 160
                mem[64] = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 512
                mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 192] = 0
                mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224] = 0
                mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 256] = 0
                mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 288] = 0
                mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 320] = 0
                mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 352] = 0
                mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 384] = 0
                mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 416] = 0
                mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 448] = 0
                mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 480] = 0
                mem[var37001] = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 192
                s = var37001
                idx = var37002
                while idx - 1:
                    mem[64] = mem[64] + 320
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 192] = 0
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224] = 0
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 256] = 0
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 288] = 0
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 320] = 0
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 352] = 0
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 384] = 0
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 416] = 0
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 448] = 0
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 480] = 0
                    mem[s + 32] = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 192
                    s = s + 32
                    idx = idx - 1
                    continue 
                idx = 0
                while idx < arg2:
                    if arg1 > !idx:
                        revert with 0, 17
                    if arg1 + idx >= mem[(32 * stor11.length) + 128]:
                        revert with 0, 50
                    mem[0] = mem[(32 * arg1 + idx) + (32 * stor11.length) + 160]
                    mem[32] = 12
                    _65931 = sha3(mem[(32 * arg1 + idx) + (32 * stor11.length) + 160], 12)
                    _65932 = mem[64]
                    mem[64] = mem[64] + 320
                    mem[_65932] = stor12[mem[(32 * arg1 + idx) + (32 * stor11.length) + 160]].field_0
                    mem[_65932 + 32] = stor1[_65931]
                    mem[_65932 + 64] = stor2[_65931]
                    mem[_65932 + 96] = stor3[_65931]
                    mem[_65932 + 128] = stor4[_65931]
                    mem[_65932 + 160] = stor5[_65931]
                    mem[_65932 + 192] = stor6[_65931]
                    mem[_65932 + 224] = stor7[_65931].field_0
                    mem[_65932 + 256] = bool(stor7[_65931].field_160)
                    mem[_65932 + 288] = stor8[_65931]
                    if idx >= mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]:
                        revert with 0, 50
                    mem[(32 * idx) + (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192] = _65932
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
                if arg1 > !arg2:
                    revert with 0, 17
                if arg1 > !arg2:
                    revert with 0, 17
                if arg1 + arg2 < mem[(32 * stor11.length) + 128]:
                    _66479 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_66479] = 7
                    mem[_66479 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                    _66720 = mem[64]
                    mem[mem[64]] = 96
                    _66980 = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                    mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                    idx = 0
                    s = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192
                    t = mem[64] + 128
                    while idx < _66980:
                        _68708 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_68708 + 32]
                        mem[t + 64] = mem[_68708 + 64]
                        mem[t + 96] = mem[_68708 + 96]
                        mem[t + 128] = mem[_68708 + 128]
                        mem[t + 160] = mem[_68708 + 172 len 20]
                        mem[t + 192] = mem[_68708 + 192]
                        mem[t + 224] = mem[_68708 + 236 len 20]
                        mem[t + 256] = bool(mem[_68708 + 256])
                        mem[t + 288] = mem[_68708 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_66720 + 32] = arg1 + arg2
                    mem[_66720 + 64] = (320 * _66980) + 128
                    _69277 = mem[_66479]
                    mem[_66720 + (320 * _66980) + 128] = mem[_66479]
                    mem[_66720 + (320 * _66980) + 160 len ceil32(_69277)] = mem[_66479 + 32 len ceil32(_69277)]
                    var60001 = ceil32(_69277)
                    if ceil32(_69277) > _69277:
                        mem[_66720 + (320 * _66980) + _69277 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_69277) + _66720 + (320 * _66980) + -mem[64] + 160
                _66480 = mem[64]
                mem[64] = mem[64] + 64
                mem[_66480] = 4
                mem[_66480 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                _66721 = mem[64]
                mem[mem[64]] = 96
                _66981 = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                idx = 0
                s = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192
                t = mem[64] + 128
                while idx < _66981:
                    _68715 = mem[s]
                    mem[t] = mem[mem[s]]
                    mem[t + 32] = mem[_68715 + 32]
                    mem[t + 64] = mem[_68715 + 64]
                    mem[t + 96] = mem[_68715 + 96]
                    mem[t + 128] = mem[_68715 + 128]
                    mem[t + 160] = mem[_68715 + 172 len 20]
                    mem[t + 192] = mem[_68715 + 192]
                    mem[t + 224] = mem[_68715 + 236 len 20]
                    mem[t + 256] = bool(mem[_68715 + 256])
                    mem[t + 288] = mem[_68715 + 288]
                    idx = idx + 1
                    s = s + 32
                    t = t + 320
                    continue 
                mem[_66721 + 32] = arg1 + arg2
                mem[_66721 + 64] = (320 * _66981) + 128
                _69278 = mem[_66480]
                mem[_66721 + (320 * _66981) + 128] = mem[_66480]
                mem[_66721 + (320 * _66981) + 160 len ceil32(_69278)] = mem[_66480 + 32 len ceil32(_69278)]
                var60001 = ceil32(_69278)
                if ceil32(_69278) > _69278:
                    mem[_66721 + (320 * _66981) + _69278 + 160] = 0
                return memory
                  from mem[64]
                   len ceil32(_69278) + _66721 + (320 * _66981) + -mem[64] + 160
            if stor15[address(arg5)].field_0 < arg1:
                revert with 0, 17
            if stor15[address(arg5)].field_0 - arg1 > test266151307():
                revert with 0, 65
            mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160] = stor15[address(arg5)].field_0 - arg1
            mem[64] = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 192
            if not stor15[address(arg5)].field_0 - arg1:
                idx = 0
                while idx < stor15[address(arg5)].field_0 - arg1:
                    if arg1 > !idx:
                        revert with 0, 17
                    if arg1 + idx >= mem[(32 * stor11.length) + 128]:
                        revert with 0, 50
                    mem[0] = mem[(32 * arg1 + idx) + (32 * stor11.length) + 160]
                    mem[32] = 12
                    _50656 = sha3(mem[(32 * arg1 + idx) + (32 * stor11.length) + 160], 12)
                    _50657 = mem[64]
                    mem[64] = mem[64] + 320
                    mem[_50657] = stor12[mem[(32 * arg1 + idx) + (32 * stor11.length) + 160]].field_0
                    mem[_50657 + 32] = stor1[_50656]
                    mem[_50657 + 64] = stor2[_50656]
                    mem[_50657 + 96] = stor3[_50656]
                    mem[_50657 + 128] = stor4[_50656]
                    mem[_50657 + 160] = stor5[_50656]
                    mem[_50657 + 192] = stor6[_50656]
                    mem[_50657 + 224] = stor7[_50656].field_0
                    mem[_50657 + 256] = bool(stor7[_50656].field_160)
                    mem[_50657 + 288] = stor8[_50656]
                    if idx >= mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]:
                        revert with 0, 50
                    mem[(32 * idx) + (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192] = _50657
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
                if arg1 > !(stor15[address(arg5)].field_0 - arg1):
                    revert with 0, 17
                if arg1 > !(stor15[address(arg5)].field_0 - arg1):
                    revert with 0, 17
                if stor15[address(arg5)].field_0 < mem[(32 * stor11.length) + 128]:
                    _51751 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_51751] = 7
                    mem[_51751 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                    _52655 = mem[64]
                    mem[mem[64]] = 96
                    _53219 = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                    mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                    idx = 0
                    s = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192
                    t = mem[64] + 128
                    while idx < _53219:
                        _59257 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_59257 + 32]
                        mem[t + 64] = mem[_59257 + 64]
                        mem[t + 96] = mem[_59257 + 96]
                        mem[t + 128] = mem[_59257 + 128]
                        mem[t + 160] = mem[_59257 + 172 len 20]
                        mem[t + 192] = mem[_59257 + 192]
                        mem[t + 224] = mem[_59257 + 236 len 20]
                        mem[t + 256] = bool(mem[_59257 + 256])
                        mem[t + 288] = mem[_59257 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_52655 + 32] = stor15[address(arg5)].field_0
                    mem[_52655 + 64] = (320 * _53219) + 128
                    _60090 = mem[_51751]
                    mem[_52655 + (320 * _53219) + 128] = mem[_51751]
                    mem[_52655 + (320 * _53219) + 160 len ceil32(_60090)] = mem[_51751 + 32 len ceil32(_60090)]
                    var57001 = ceil32(_60090)
                    if ceil32(_60090) > _60090:
                        mem[_52655 + (320 * _53219) + _60090 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_60090) + _52655 + (320 * _53219) + -mem[64] + 160
                _51752 = mem[64]
                mem[64] = mem[64] + 64
                mem[_51752] = 4
                mem[_51752 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                _52656 = mem[64]
                mem[mem[64]] = 96
                _53220 = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                idx = 0
                s = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192
                t = mem[64] + 128
                while idx < _53220:
                    _59264 = mem[s]
                    mem[t] = mem[mem[s]]
                    mem[t + 32] = mem[_59264 + 32]
                    mem[t + 64] = mem[_59264 + 64]
                    mem[t + 96] = mem[_59264 + 96]
                    mem[t + 128] = mem[_59264 + 128]
                    mem[t + 160] = mem[_59264 + 172 len 20]
                    mem[t + 192] = mem[_59264 + 192]
                    mem[t + 224] = mem[_59264 + 236 len 20]
                    mem[t + 256] = bool(mem[_59264 + 256])
                    mem[t + 288] = mem[_59264 + 288]
                    idx = idx + 1
                    s = s + 32
                    t = t + 320
                    continue 
                mem[_52656 + 32] = stor15[address(arg5)].field_0
                mem[_52656 + 64] = (320 * _53220) + 128
                _60091 = mem[_51752]
                mem[_52656 + (320 * _53220) + 128] = mem[_51752]
                mem[_52656 + (320 * _53220) + 160 len ceil32(_60091)] = mem[_51752 + 32 len ceil32(_60091)]
                var57001 = ceil32(_60091)
                if ceil32(_60091) > _60091:
                    mem[_52656 + (320 * _53220) + _60091 + 160] = 0
                return memory
                  from mem[64]
                   len ceil32(_60091) + _52656 + (320 * _53220) + -mem[64] + 160
            mem[64] = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 512
            mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 192] = 0
            mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 224] = 0
            mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 256] = 0
            mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 288] = 0
            mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 320] = 0
            mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 352] = 0
            mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 384] = 0
            mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 416] = 0
            mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 448] = 0
            mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 480] = 0
            mem[var41001] = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 192
            s = var41001
            idx = var41002
            while idx - 1:
                mem[64] = mem[64] + 320
                mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 192] = 0
                mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 224] = 0
                mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 256] = 0
                mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 288] = 0
                mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 320] = 0
                mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 352] = 0
                mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 384] = 0
                mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 416] = 0
                mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 448] = 0
                mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 480] = 0
                mem[s + 32] = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 192
                s = s + 32
                idx = idx - 1
                continue 
            idx = 0
            while idx < stor15[address(arg5)].field_0 - arg1:
                if arg1 > !idx:
                    revert with 0, 17
                if arg1 + idx >= mem[(32 * stor11.length) + 128]:
                    revert with 0, 50
                mem[0] = mem[(32 * arg1 + idx) + (32 * stor11.length) + 160]
                mem[32] = 12
                _65937 = sha3(mem[(32 * arg1 + idx) + (32 * stor11.length) + 160], 12)
                _65938 = mem[64]
                mem[64] = mem[64] + 320
                mem[_65938] = stor12[mem[(32 * arg1 + idx) + (32 * stor11.length) + 160]].field_0
                mem[_65938 + 32] = stor1[_65937]
                mem[_65938 + 64] = stor2[_65937]
                mem[_65938 + 96] = stor3[_65937]
                mem[_65938 + 128] = stor4[_65937]
                mem[_65938 + 160] = stor5[_65937]
                mem[_65938 + 192] = stor6[_65937]
                mem[_65938 + 224] = stor7[_65937].field_0
                mem[_65938 + 256] = bool(stor7[_65937].field_160)
                mem[_65938 + 288] = stor8[_65937]
                if idx >= mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]:
                    revert with 0, 50
                mem[(32 * idx) + (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192] = _65938
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
            if arg1 > !(stor15[address(arg5)].field_0 - arg1):
                revert with 0, 17
            if arg1 > !(stor15[address(arg5)].field_0 - arg1):
                revert with 0, 17
            if stor15[address(arg5)].field_0 < mem[(32 * stor11.length) + 128]:
                _66481 = mem[64]
                mem[64] = mem[64] + 64
                mem[_66481] = 7
                mem[_66481 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                _66722 = mem[64]
                mem[mem[64]] = 96
                _66982 = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                idx = 0
                s = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192
                t = mem[64] + 128
                while idx < _66982:
                    _68722 = mem[s]
                    mem[t] = mem[mem[s]]
                    mem[t + 32] = mem[_68722 + 32]
                    mem[t + 64] = mem[_68722 + 64]
                    mem[t + 96] = mem[_68722 + 96]
                    mem[t + 128] = mem[_68722 + 128]
                    mem[t + 160] = mem[_68722 + 172 len 20]
                    mem[t + 192] = mem[_68722 + 192]
                    mem[t + 224] = mem[_68722 + 236 len 20]
                    mem[t + 256] = bool(mem[_68722 + 256])
                    mem[t + 288] = mem[_68722 + 288]
                    idx = idx + 1
                    s = s + 32
                    t = t + 320
                    continue 
                mem[_66722 + 32] = stor15[address(arg5)].field_0
                mem[_66722 + 64] = (320 * _66982) + 128
                _69279 = mem[_66481]
                mem[_66722 + (320 * _66982) + 128] = mem[_66481]
                mem[_66722 + (320 * _66982) + 160 len ceil32(_69279)] = mem[_66481 + 32 len ceil32(_69279)]
                var64001 = ceil32(_69279)
                if ceil32(_69279) > _69279:
                    mem[_66722 + (320 * _66982) + _69279 + 160] = 0
                return memory
                  from mem[64]
                   len ceil32(_69279) + _66722 + (320 * _66982) + -mem[64] + 160
            _66482 = mem[64]
            mem[64] = mem[64] + 64
            mem[_66482] = 4
            mem[_66482 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
            _66723 = mem[64]
            mem[mem[64]] = 96
            _66983 = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
            mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
            idx = 0
            s = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192
            t = mem[64] + 128
            while idx < _66983:
                _68729 = mem[s]
                mem[t] = mem[mem[s]]
                mem[t + 32] = mem[_68729 + 32]
                mem[t + 64] = mem[_68729 + 64]
                mem[t + 96] = mem[_68729 + 96]
                mem[t + 128] = mem[_68729 + 128]
                mem[t + 160] = mem[_68729 + 172 len 20]
                mem[t + 192] = mem[_68729 + 192]
                mem[t + 224] = mem[_68729 + 236 len 20]
                mem[t + 256] = bool(mem[_68729 + 256])
                mem[t + 288] = mem[_68729 + 288]
                idx = idx + 1
                s = s + 32
                t = t + 320
                continue 
            mem[_66723 + 32] = stor15[address(arg5)].field_0
            mem[_66723 + 64] = (320 * _66983) + 128
            _69280 = mem[_66482]
            mem[_66723 + (320 * _66983) + 128] = mem[_66482]
            mem[_66723 + (320 * _66983) + 160 len ceil32(_69280)] = mem[_66482 + 32 len ceil32(_69280)]
            var64001 = ceil32(_69280)
            if ceil32(_69280) > _69280:
                mem[_66723 + (320 * _66983) + _69280 + 160] = 0
            return memory
              from mem[64]
               len ceil32(_69280) + _66723 + (320 * _66983) + -mem[64] + 160
        if stor15[address(arg5)].field_0 < 1:
            revert with 0, 17
        if arg3:
            if arg2 <= stor15[address(arg5)].field_0 - 1:
                if arg2 > test266151307():
                    revert with 0, 65
                mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160] = arg2
                mem[64] = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 192
                if not arg2:
                    idx = 0
                    while idx < arg2:
                        if stor15[address(arg5)].field_0 - 1 < idx:
                            revert with 0, 17
                        if stor15[address(arg5)].field_0 + -idx - 1 >= mem[(32 * stor11.length) + 128]:
                            revert with 0, 50
                        mem[0] = mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + 160]
                        mem[32] = 12
                        _50662 = sha3(mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + 160], 12)
                        _50663 = mem[64]
                        mem[64] = mem[64] + 320
                        mem[_50663] = stor12[mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + 160]].field_0
                        mem[_50663 + 32] = stor1[_50662]
                        mem[_50663 + 64] = stor2[_50662]
                        mem[_50663 + 96] = stor3[_50662]
                        mem[_50663 + 128] = stor4[_50662]
                        mem[_50663 + 160] = stor5[_50662]
                        mem[_50663 + 192] = stor6[_50662]
                        mem[_50663 + 224] = stor7[_50662].field_0
                        mem[_50663 + 256] = bool(stor7[_50662].field_160)
                        mem[_50663 + 288] = stor8[_50662]
                        if idx >= mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]:
                            revert with 0, 50
                        mem[(32 * idx) + (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192] = _50663
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if stor15[address(arg5)].field_0 - 1 < arg2:
                        _49289 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_49289] = 4
                        mem[_49289 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                        _49767 = mem[64]
                        mem[mem[64]] = 96
                        _50659 = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                        mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                        idx = 0
                        s = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192
                        t = mem[64] + 128
                        while idx < _50659:
                            _59271 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_59271 + 32]
                            mem[t + 64] = mem[_59271 + 64]
                            mem[t + 96] = mem[_59271 + 96]
                            mem[t + 128] = mem[_59271 + 128]
                            mem[t + 160] = mem[_59271 + 172 len 20]
                            mem[t + 192] = mem[_59271 + 192]
                            mem[t + 224] = mem[_59271 + 236 len 20]
                            mem[t + 256] = bool(mem[_59271 + 256])
                            mem[t + 288] = mem[_59271 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_49767 + 32] = 0
                        mem[_49767 + 64] = (320 * _50659) + 128
                        _60092 = mem[_49289]
                        mem[_49767 + (320 * _50659) + 128] = mem[_49289]
                        mem[_49767 + (320 * _50659) + 160 len ceil32(_60092)] = mem[_49289 + 32 len ceil32(_60092)]
                        var48001 = ceil32(_60092)
                        if ceil32(_60092) > _60092:
                            mem[_49767 + (320 * _50659) + _60092 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_60092) + _49767 + (320 * _50659) + -mem[64] + 160
                    _50660 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_50660] = 7
                    mem[_50660 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                    _51360 = mem[64]
                    mem[mem[64]] = 96
                    _51754 = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                    mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                    idx = 0
                    s = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192
                    t = mem[64] + 128
                    while idx < _51754:
                        _59278 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_59278 + 32]
                        mem[t + 64] = mem[_59278 + 64]
                        mem[t + 96] = mem[_59278 + 96]
                        mem[t + 128] = mem[_59278 + 128]
                        mem[t + 160] = mem[_59278 + 172 len 20]
                        mem[t + 192] = mem[_59278 + 192]
                        mem[t + 224] = mem[_59278 + 236 len 20]
                        mem[t + 256] = bool(mem[_59278 + 256])
                        mem[t + 288] = mem[_59278 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_51360 + 32] = stor15[address(arg5)].field_0 + -arg2 - 1
                    mem[_51360 + 64] = (320 * _51754) + 128
                    _60093 = mem[_50660]
                    mem[_51360 + (320 * _51754) + 128] = mem[_50660]
                    mem[_51360 + (320 * _51754) + 160 len ceil32(_60093)] = mem[_50660 + 32 len ceil32(_60093)]
                    var51001 = ceil32(_60093)
                    if ceil32(_60093) > _60093:
                        mem[_51360 + (320 * _51754) + _60093 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_60093) + _51360 + (320 * _51754) + -mem[64] + 160
                mem[64] = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 512
                mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 192] = 0
                mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224] = 0
                mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 256] = 0
                mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 288] = 0
                mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 320] = 0
                mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 352] = 0
                mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 384] = 0
                mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 416] = 0
                mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 448] = 0
                mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 480] = 0
                mem[var38001] = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 192
                s = var38001
                idx = var38002
                while idx - 1:
                    mem[64] = mem[64] + 320
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 192] = 0
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224] = 0
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 256] = 0
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 288] = 0
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 320] = 0
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 352] = 0
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 384] = 0
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 416] = 0
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 448] = 0
                    mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 480] = 0
                    mem[s + 32] = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 192
                    s = s + 32
                    idx = idx - 1
                    continue 
                idx = 0
                while idx < arg2:
                    if stor15[address(arg5)].field_0 - 1 < idx:
                        revert with 0, 17
                    if stor15[address(arg5)].field_0 + -idx - 1 >= mem[(32 * stor11.length) + 128]:
                        revert with 0, 50
                    mem[0] = mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + 160]
                    mem[32] = 12
                    _65945 = sha3(mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + 160], 12)
                    _65946 = mem[64]
                    mem[64] = mem[64] + 320
                    mem[_65946] = stor12[mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + 160]].field_0
                    mem[_65946 + 32] = stor1[_65945]
                    mem[_65946 + 64] = stor2[_65945]
                    mem[_65946 + 96] = stor3[_65945]
                    mem[_65946 + 128] = stor4[_65945]
                    mem[_65946 + 160] = stor5[_65945]
                    mem[_65946 + 192] = stor6[_65945]
                    mem[_65946 + 224] = stor7[_65945].field_0
                    mem[_65946 + 256] = bool(stor7[_65945].field_160)
                    mem[_65946 + 288] = stor8[_65945]
                    if idx >= mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]:
                        revert with 0, 50
                    mem[(32 * idx) + (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192] = _65946
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
                if stor15[address(arg5)].field_0 - 1 < arg2:
                    _65246 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_65246] = 4
                    mem[_65246 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                    _65499 = mem[64]
                    mem[mem[64]] = 96
                    _65942 = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                    mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                    idx = 0
                    s = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192
                    t = mem[64] + 128
                    while idx < _65942:
                        _68736 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_68736 + 32]
                        mem[t + 64] = mem[_68736 + 64]
                        mem[t + 96] = mem[_68736 + 96]
                        mem[t + 128] = mem[_68736 + 128]
                        mem[t + 160] = mem[_68736 + 172 len 20]
                        mem[t + 192] = mem[_68736 + 192]
                        mem[t + 224] = mem[_68736 + 236 len 20]
                        mem[t + 256] = bool(mem[_68736 + 256])
                        mem[t + 288] = mem[_68736 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_65499 + 32] = 0
                    mem[_65499 + 64] = (320 * _65942) + 128
                    _69281 = mem[_65246]
                    mem[_65499 + (320 * _65942) + 128] = mem[_65246]
                    mem[_65499 + (320 * _65942) + 160 len ceil32(_69281)] = mem[_65246 + 32 len ceil32(_69281)]
                    var55001 = ceil32(_69281)
                    if ceil32(_69281) > _69281:
                        mem[_65499 + (320 * _65942) + _69281 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_69281) + _65499 + (320 * _65942) + -mem[64] + 160
                _65943 = mem[64]
                mem[64] = mem[64] + 64
                mem[_65943] = 7
                mem[_65943 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                _66300 = mem[64]
                mem[mem[64]] = 96
                _66484 = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                idx = 0
                s = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192
                t = mem[64] + 128
                while idx < _66484:
                    _68743 = mem[s]
                    mem[t] = mem[mem[s]]
                    mem[t + 32] = mem[_68743 + 32]
                    mem[t + 64] = mem[_68743 + 64]
                    mem[t + 96] = mem[_68743 + 96]
                    mem[t + 128] = mem[_68743 + 128]
                    mem[t + 160] = mem[_68743 + 172 len 20]
                    mem[t + 192] = mem[_68743 + 192]
                    mem[t + 224] = mem[_68743 + 236 len 20]
                    mem[t + 256] = bool(mem[_68743 + 256])
                    mem[t + 288] = mem[_68743 + 288]
                    idx = idx + 1
                    s = s + 32
                    t = t + 320
                    continue 
                mem[_66300 + 32] = stor15[address(arg5)].field_0 + -arg2 - 1
                mem[_66300 + 64] = (320 * _66484) + 128
                _69282 = mem[_65943]
                mem[_66300 + (320 * _66484) + 128] = mem[_65943]
                mem[_66300 + (320 * _66484) + 160 len ceil32(_69282)] = mem[_65943 + 32 len ceil32(_69282)]
                var58001 = ceil32(_69282)
                if ceil32(_69282) > _69282:
                    mem[_66300 + (320 * _66484) + _69282 + 160] = 0
                return memory
                  from mem[64]
                   len ceil32(_69282) + _66300 + (320 * _66484) + -mem[64] + 160
            if 1 > !(stor15[address(arg5)].field_0 - 1):
                revert with 0, 17
            if stor15[address(arg5)].field_0 > test266151307():
                revert with 0, 65
            mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160] = stor15[address(arg5)].field_0
            mem[64] = (32 * stor11.length) + (64 * stor15[address(arg5)].field_0) + 192
            if not stor15[address(arg5)].field_0:
                idx = 0
                while idx < stor15[address(arg5)].field_0:
                    if stor15[address(arg5)].field_0 - 1 < idx:
                        revert with 0, 17
                    if stor15[address(arg5)].field_0 + -idx - 1 >= mem[(32 * stor11.length) + 128]:
                        revert with 0, 50
                    mem[0] = mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + 160]
                    mem[32] = 12
                    _50668 = sha3(mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + 160], 12)
                    _50669 = mem[64]
                    mem[64] = mem[64] + 320
                    mem[_50669] = stor12[mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + 160]].field_0
                    mem[_50669 + 32] = stor1[_50668]
                    mem[_50669 + 64] = stor2[_50668]
                    mem[_50669 + 96] = stor3[_50668]
                    mem[_50669 + 128] = stor4[_50668]
                    mem[_50669 + 160] = stor5[_50668]
                    mem[_50669 + 192] = stor6[_50668]
                    mem[_50669 + 224] = stor7[_50668].field_0
                    mem[_50669 + 256] = bool(stor7[_50668].field_160)
                    mem[_50669 + 288] = stor8[_50668]
                    if idx >= mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]:
                        revert with 0, 50
                    mem[(32 * idx) + (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192] = _50669
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
                if stor15[address(arg5)].field_0 - 1 < stor15[address(arg5)].field_0:
                    _49290 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_49290] = 4
                    mem[_49290 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                    _49769 = mem[64]
                    mem[mem[64]] = 96
                    _50665 = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                    mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                    idx = 0
                    s = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192
                    t = mem[64] + 128
                    while idx < _50665:
                        _59285 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_59285 + 32]
                        mem[t + 64] = mem[_59285 + 64]
                        mem[t + 96] = mem[_59285 + 96]
                        mem[t + 128] = mem[_59285 + 128]
                        mem[t + 160] = mem[_59285 + 172 len 20]
                        mem[t + 192] = mem[_59285 + 192]
                        mem[t + 224] = mem[_59285 + 236 len 20]
                        mem[t + 256] = bool(mem[_59285 + 256])
                        mem[t + 288] = mem[_59285 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_49769 + 32] = 0
                    mem[_49769 + 64] = (320 * _50665) + 128
                    _60094 = mem[_49290]
                    mem[_49769 + (320 * _50665) + 128] = mem[_49290]
                    mem[_49769 + (320 * _50665) + 160 len ceil32(_60094)] = mem[_49290 + 32 len ceil32(_60094)]
                    var52001 = ceil32(_60094)
                    if ceil32(_60094) > _60094:
                        mem[_49769 + (320 * _50665) + _60094 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_60094) + _49769 + (320 * _50665) + -mem[64] + 160
                _50666 = mem[64]
                mem[64] = mem[64] + 64
                mem[_50666] = 7
                mem[_50666 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                _51369 = mem[64]
                mem[mem[64]] = 96
                _51756 = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                idx = 0
                s = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192
                t = mem[64] + 128
                while idx < _51756:
                    _59292 = mem[s]
                    mem[t] = mem[mem[s]]
                    mem[t + 32] = mem[_59292 + 32]
                    mem[t + 64] = mem[_59292 + 64]
                    mem[t + 96] = mem[_59292 + 96]
                    mem[t + 128] = mem[_59292 + 128]
                    mem[t + 160] = mem[_59292 + 172 len 20]
                    mem[t + 192] = mem[_59292 + 192]
                    mem[t + 224] = mem[_59292 + 236 len 20]
                    mem[t + 256] = bool(mem[_59292 + 256])
                    mem[t + 288] = mem[_59292 + 288]
                    idx = idx + 1
                    s = s + 32
                    t = t + 320
                    continue 
                mem[_51369 + 32] = -1
                mem[_51369 + 64] = (320 * _51756) + 128
                _60095 = mem[_50666]
                mem[_51369 + (320 * _51756) + 128] = mem[_50666]
                mem[_51369 + (320 * _51756) + 160 len ceil32(_60095)] = mem[_50666 + 32 len ceil32(_60095)]
                var55001 = ceil32(_60095)
                if ceil32(_60095) > _60095:
                    mem[_51369 + (320 * _51756) + _60095 + 160] = 0
                return memory
                  from mem[64]
                   len ceil32(_60095) + _51369 + (320 * _51756) + -mem[64] + 160
            mem[64] = (32 * stor11.length) + (64 * stor15[address(arg5)].field_0) + 512
            mem[(32 * stor11.length) + (64 * stor15[address(arg5)].field_0) + 192] = 0
            mem[(32 * stor11.length) + (64 * stor15[address(arg5)].field_0) + 224] = 0
            mem[(32 * stor11.length) + (64 * stor15[address(arg5)].field_0) + 256] = 0
            mem[(32 * stor11.length) + (64 * stor15[address(arg5)].field_0) + 288] = 0
            mem[(32 * stor11.length) + (64 * stor15[address(arg5)].field_0) + 320] = 0
            mem[(32 * stor11.length) + (64 * stor15[address(arg5)].field_0) + 352] = 0
            mem[(32 * stor11.length) + (64 * stor15[address(arg5)].field_0) + 384] = 0
            mem[(32 * stor11.length) + (64 * stor15[address(arg5)].field_0) + 416] = 0
            mem[(32 * stor11.length) + (64 * stor15[address(arg5)].field_0) + 448] = 0
            mem[(32 * stor11.length) + (64 * stor15[address(arg5)].field_0) + 480] = 0
            mem[var42001] = (32 * stor11.length) + (64 * stor15[address(arg5)].field_0) + 192
            s = var42001
            idx = var42002
            while idx - 1:
                mem[64] = mem[64] + 320
                mem[(32 * stor11.length) + (64 * stor15[address(arg5)].field_0) + 192] = 0
                mem[(32 * stor11.length) + (64 * stor15[address(arg5)].field_0) + 224] = 0
                mem[(32 * stor11.length) + (64 * stor15[address(arg5)].field_0) + 256] = 0
                mem[(32 * stor11.length) + (64 * stor15[address(arg5)].field_0) + 288] = 0
                mem[(32 * stor11.length) + (64 * stor15[address(arg5)].field_0) + 320] = 0
                mem[(32 * stor11.length) + (64 * stor15[address(arg5)].field_0) + 352] = 0
                mem[(32 * stor11.length) + (64 * stor15[address(arg5)].field_0) + 384] = 0
                mem[(32 * stor11.length) + (64 * stor15[address(arg5)].field_0) + 416] = 0
                mem[(32 * stor11.length) + (64 * stor15[address(arg5)].field_0) + 448] = 0
                mem[(32 * stor11.length) + (64 * stor15[address(arg5)].field_0) + 480] = 0
                mem[s + 32] = (32 * stor11.length) + (64 * stor15[address(arg5)].field_0) + 192
                s = s + 32
                idx = idx - 1
                continue 
            idx = 0
            while idx < stor15[address(arg5)].field_0:
                if stor15[address(arg5)].field_0 - 1 < idx:
                    revert with 0, 17
                if stor15[address(arg5)].field_0 + -idx - 1 >= mem[(32 * stor11.length) + 128]:
                    revert with 0, 50
                mem[0] = mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + 160]
                mem[32] = 12
                _65953 = sha3(mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + 160], 12)
                _65954 = mem[64]
                mem[64] = mem[64] + 320
                mem[_65954] = stor12[mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + 160]].field_0
                mem[_65954 + 32] = stor1[_65953]
                mem[_65954 + 64] = stor2[_65953]
                mem[_65954 + 96] = stor3[_65953]
                mem[_65954 + 128] = stor4[_65953]
                mem[_65954 + 160] = stor5[_65953]
                mem[_65954 + 192] = stor6[_65953]
                mem[_65954 + 224] = stor7[_65953].field_0
                mem[_65954 + 256] = bool(stor7[_65953].field_160)
                mem[_65954 + 288] = stor8[_65953]
                if idx >= mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]:
                    revert with 0, 50
                mem[(32 * idx) + (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192] = _65954
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
            if stor15[address(arg5)].field_0 - 1 < stor15[address(arg5)].field_0:
                _65247 = mem[64]
                mem[64] = mem[64] + 64
                mem[_65247] = 4
                mem[_65247 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                _65503 = mem[64]
                mem[mem[64]] = 96
                _65950 = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                idx = 0
                s = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192
                t = mem[64] + 128
                while idx < _65950:
                    _68750 = mem[s]
                    mem[t] = mem[mem[s]]
                    mem[t + 32] = mem[_68750 + 32]
                    mem[t + 64] = mem[_68750 + 64]
                    mem[t + 96] = mem[_68750 + 96]
                    mem[t + 128] = mem[_68750 + 128]
                    mem[t + 160] = mem[_68750 + 172 len 20]
                    mem[t + 192] = mem[_68750 + 192]
                    mem[t + 224] = mem[_68750 + 236 len 20]
                    mem[t + 256] = bool(mem[_68750 + 256])
                    mem[t + 288] = mem[_68750 + 288]
                    idx = idx + 1
                    s = s + 32
                    t = t + 320
                    continue 
                mem[_65503 + 32] = 0
                mem[_65503 + 64] = (320 * _65950) + 128
                _69283 = mem[_65247]
                mem[_65503 + (320 * _65950) + 128] = mem[_65247]
                mem[_65503 + (320 * _65950) + 160 len ceil32(_69283)] = mem[_65247 + 32 len ceil32(_69283)]
                var59001 = ceil32(_69283)
                if ceil32(_69283) > _69283:
                    mem[_65503 + (320 * _65950) + _69283 + 160] = 0
                return memory
                  from mem[64]
                   len ceil32(_69283) + _65503 + (320 * _65950) + -mem[64] + 160
            _65951 = mem[64]
            mem[64] = mem[64] + 64
            mem[_65951] = 7
            mem[_65951 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
            _66308 = mem[64]
            mem[mem[64]] = 96
            _66486 = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
            mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
            idx = 0
            s = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192
            t = mem[64] + 128
            while idx < _66486:
                _68757 = mem[s]
                mem[t] = mem[mem[s]]
                mem[t + 32] = mem[_68757 + 32]
                mem[t + 64] = mem[_68757 + 64]
                mem[t + 96] = mem[_68757 + 96]
                mem[t + 128] = mem[_68757 + 128]
                mem[t + 160] = mem[_68757 + 172 len 20]
                mem[t + 192] = mem[_68757 + 192]
                mem[t + 224] = mem[_68757 + 236 len 20]
                mem[t + 256] = bool(mem[_68757 + 256])
                mem[t + 288] = mem[_68757 + 288]
                idx = idx + 1
                s = s + 32
                t = t + 320
                continue 
            mem[_66308 + 32] = -1
            mem[_66308 + 64] = (320 * _66486) + 128
            _69284 = mem[_65951]
            mem[_66308 + (320 * _66486) + 128] = mem[_65951]
            mem[_66308 + (320 * _66486) + 160 len ceil32(_69284)] = mem[_65951 + 32 len ceil32(_69284)]
            var62001 = ceil32(_69284)
            if ceil32(_69284) > _69284:
                mem[_66308 + (320 * _66486) + _69284 + 160] = 0
            return memory
              from mem[64]
               len ceil32(_69284) + _66308 + (320 * _66486) + -mem[64] + 160
        if stor15[address(arg5)].field_0 < stor15[address(arg5)].field_0 - 1:
            revert with 0, 17
        if arg2 > 1:
            if stor15[address(arg5)].field_0 < stor15[address(arg5)].field_0 - 1:
                revert with 0, 17
            mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160] = 1
            mem[64] = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 544
            mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 224] = 0
            mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 256] = 0
            mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 288] = 0
            mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 320] = 0
            mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 352] = 0
            mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 384] = 0
            mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 416] = 0
            mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 448] = 0
            mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 480] = 0
            mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 512] = 0
            mem[var45001] = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 224
            s = var45001
            idx = var45002
            while idx - 1:
                mem[64] = mem[64] + 320
                mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 224] = 0
                mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 256] = 0
                mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 288] = 0
                mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 320] = 0
                mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 352] = 0
                mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 384] = 0
                mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 416] = 0
                mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 448] = 0
                mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 480] = 0
                mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 512] = 0
                mem[s + 32] = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 224
                s = s + 32
                idx = idx - 1
                continue 
            idx = 0
            while idx < 1:
                if stor15[address(arg5)].field_0 - 1 > !idx:
                    revert with 0, 17
                if stor15[address(arg5)].field_0 + idx - 1 >= mem[(32 * stor11.length) + 128]:
                    revert with 0, 50
                mem[0] = mem[(32 * stor15[address(arg5)].field_0 + idx - 1) + (32 * stor11.length) + 160]
                mem[32] = 12
                _65965 = sha3(mem[(32 * stor15[address(arg5)].field_0 + idx - 1) + (32 * stor11.length) + 160], 12)
                _65966 = mem[64]
                mem[64] = mem[64] + 320
                mem[_65966] = stor12[mem[(32 * stor15[address(arg5)].field_0 + idx - 1) + (32 * stor11.length) + 160]].field_0
                mem[_65966 + 32] = stor1[_65965]
                mem[_65966 + 64] = stor2[_65965]
                mem[_65966 + 96] = stor3[_65965]
                mem[_65966 + 128] = stor4[_65965]
                mem[_65966 + 160] = stor5[_65965]
                mem[_65966 + 192] = stor6[_65965]
                mem[_65966 + 224] = stor7[_65965].field_0
                mem[_65966 + 256] = bool(stor7[_65965].field_160)
                mem[_65966 + 288] = stor8[_65965]
                if idx >= mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]:
                    revert with 0, 50
                mem[(32 * idx) + (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192] = _65966
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
            if stor15[address(arg5)].field_0 - 1 > !1:
                revert with 0, 17
            if stor15[address(arg5)].field_0 - 1 > !1:
                revert with 0, 17
            if stor15[address(arg5)].field_0 < mem[(32 * stor11.length) + 128]:
                _66489 = mem[64]
                mem[64] = mem[64] + 64
                mem[_66489] = 7
                mem[_66489 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                _66742 = mem[64]
                mem[mem[64]] = 96
                _66990 = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                idx = 0
                s = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192
                t = mem[64] + 128
                while idx < _66990:
                    _68778 = mem[s]
                    mem[t] = mem[mem[s]]
                    mem[t + 32] = mem[_68778 + 32]
                    mem[t + 64] = mem[_68778 + 64]
                    mem[t + 96] = mem[_68778 + 96]
                    mem[t + 128] = mem[_68778 + 128]
                    mem[t + 160] = mem[_68778 + 172 len 20]
                    mem[t + 192] = mem[_68778 + 192]
                    mem[t + 224] = mem[_68778 + 236 len 20]
                    mem[t + 256] = bool(mem[_68778 + 256])
                    mem[t + 288] = mem[_68778 + 288]
                    idx = idx + 1
                    s = s + 32
                    t = t + 320
                    continue 
                mem[_66742 + 32] = stor15[address(arg5)].field_0
                mem[_66742 + 64] = (320 * _66990) + 128
                _69287 = mem[_66489]
                mem[_66742 + (320 * _66990) + 128] = mem[_66489]
                mem[_66742 + (320 * _66990) + 160 len ceil32(_69287)] = mem[_66489 + 32 len ceil32(_69287)]
                var68001 = ceil32(_69287)
                if ceil32(_69287) > _69287:
                    mem[_66742 + (320 * _66990) + _69287 + 160] = 0
                return memory
                  from mem[64]
                   len ceil32(_69287) + _66742 + (320 * _66990) + -mem[64] + 160
            _66490 = mem[64]
            mem[64] = mem[64] + 64
            mem[_66490] = 4
            mem[_66490 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
            _66743 = mem[64]
            mem[mem[64]] = 96
            _66991 = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
            mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
            idx = 0
            s = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192
            t = mem[64] + 128
            while idx < _66991:
                _68785 = mem[s]
                mem[t] = mem[mem[s]]
                mem[t + 32] = mem[_68785 + 32]
                mem[t + 64] = mem[_68785 + 64]
                mem[t + 96] = mem[_68785 + 96]
                mem[t + 128] = mem[_68785 + 128]
                mem[t + 160] = mem[_68785 + 172 len 20]
                mem[t + 192] = mem[_68785 + 192]
                mem[t + 224] = mem[_68785 + 236 len 20]
                mem[t + 256] = bool(mem[_68785 + 256])
                mem[t + 288] = mem[_68785 + 288]
                idx = idx + 1
                s = s + 32
                t = t + 320
                continue 
            mem[_66743 + 32] = stor15[address(arg5)].field_0
            mem[_66743 + 64] = (320 * _66991) + 128
            _69288 = mem[_66490]
            mem[_66743 + (320 * _66991) + 128] = mem[_66490]
            mem[_66743 + (320 * _66991) + 160 len ceil32(_69288)] = mem[_66490 + 32 len ceil32(_69288)]
            var68001 = ceil32(_69288)
            if ceil32(_69288) > _69288:
                mem[_66743 + (320 * _66991) + _69288 + 160] = 0
            return memory
              from mem[64]
               len ceil32(_69288) + _66743 + (320 * _66991) + -mem[64] + 160
        if arg2 > test266151307():
            revert with 0, 65
        mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160] = arg2
        mem[64] = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 192
        if not arg2:
            idx = 0
            while idx < arg2:
                if stor15[address(arg5)].field_0 - 1 > !idx:
                    revert with 0, 17
                if stor15[address(arg5)].field_0 + idx - 1 >= mem[(32 * stor11.length) + 128]:
                    revert with 0, 50
                mem[0] = mem[(32 * stor15[address(arg5)].field_0 + idx - 1) + (32 * stor11.length) + 160]
                mem[32] = 12
                _50672 = sha3(mem[(32 * stor15[address(arg5)].field_0 + idx - 1) + (32 * stor11.length) + 160], 12)
                _50673 = mem[64]
                mem[64] = mem[64] + 320
                mem[_50673] = stor12[mem[(32 * stor15[address(arg5)].field_0 + idx - 1) + (32 * stor11.length) + 160]].field_0
                mem[_50673 + 32] = stor1[_50672]
                mem[_50673 + 64] = stor2[_50672]
                mem[_50673 + 96] = stor3[_50672]
                mem[_50673 + 128] = stor4[_50672]
                mem[_50673 + 160] = stor5[_50672]
                mem[_50673 + 192] = stor6[_50672]
                mem[_50673 + 224] = stor7[_50672].field_0
                mem[_50673 + 256] = bool(stor7[_50672].field_160)
                mem[_50673 + 288] = stor8[_50672]
                if idx >= mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]:
                    revert with 0, 50
                mem[(32 * idx) + (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192] = _50673
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
            if stor15[address(arg5)].field_0 - 1 > !arg2:
                revert with 0, 17
            if stor15[address(arg5)].field_0 - 1 > !arg2:
                revert with 0, 17
            if stor15[address(arg5)].field_0 + arg2 - 1 < mem[(32 * stor11.length) + 128]:
                _51757 = mem[64]
                mem[64] = mem[64] + 64
                mem[_51757] = 7
                mem[_51757 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                _52689 = mem[64]
                mem[mem[64]] = 96
                _53225 = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
                idx = 0
                s = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192
                t = mem[64] + 128
                while idx < _53225:
                    _59299 = mem[s]
                    mem[t] = mem[mem[s]]
                    mem[t + 32] = mem[_59299 + 32]
                    mem[t + 64] = mem[_59299 + 64]
                    mem[t + 96] = mem[_59299 + 96]
                    mem[t + 128] = mem[_59299 + 128]
                    mem[t + 160] = mem[_59299 + 172 len 20]
                    mem[t + 192] = mem[_59299 + 192]
                    mem[t + 224] = mem[_59299 + 236 len 20]
                    mem[t + 256] = bool(mem[_59299 + 256])
                    mem[t + 288] = mem[_59299 + 288]
                    idx = idx + 1
                    s = s + 32
                    t = t + 320
                    continue 
                mem[_52689 + 32] = stor15[address(arg5)].field_0 + arg2 - 1
                mem[_52689 + 64] = (320 * _53225) + 128
                _60096 = mem[_51757]
                mem[_52689 + (320 * _53225) + 128] = mem[_51757]
                mem[_52689 + (320 * _53225) + 160 len ceil32(_60096)] = mem[_51757 + 32 len ceil32(_60096)]
                var57001 = ceil32(_60096)
                if ceil32(_60096) > _60096:
                    mem[_52689 + (320 * _53225) + _60096 + 160] = 0
                return memory
                  from mem[64]
                   len ceil32(_60096) + _52689 + (320 * _53225) + -mem[64] + 160
            _51758 = mem[64]
            mem[64] = mem[64] + 64
            mem[_51758] = 4
            mem[_51758 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
            _52690 = mem[64]
            mem[mem[64]] = 96
            _53226 = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
            mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
            idx = 0
            s = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192
            t = mem[64] + 128
            while idx < _53226:
                _59306 = mem[s]
                mem[t] = mem[mem[s]]
                mem[t + 32] = mem[_59306 + 32]
                mem[t + 64] = mem[_59306 + 64]
                mem[t + 96] = mem[_59306 + 96]
                mem[t + 128] = mem[_59306 + 128]
                mem[t + 160] = mem[_59306 + 172 len 20]
                mem[t + 192] = mem[_59306 + 192]
                mem[t + 224] = mem[_59306 + 236 len 20]
                mem[t + 256] = bool(mem[_59306 + 256])
                mem[t + 288] = mem[_59306 + 288]
                idx = idx + 1
                s = s + 32
                t = t + 320
                continue 
            mem[_52690 + 32] = stor15[address(arg5)].field_0 + arg2 - 1
            mem[_52690 + 64] = (320 * _53226) + 128
            _60097 = mem[_51758]
            mem[_52690 + (320 * _53226) + 128] = mem[_51758]
            mem[_52690 + (320 * _53226) + 160 len ceil32(_60097)] = mem[_51758 + 32 len ceil32(_60097)]
            var57001 = ceil32(_60097)
            if ceil32(_60097) > _60097:
                mem[_52690 + (320 * _53226) + _60097 + 160] = 0
            return memory
              from mem[64]
               len ceil32(_60097) + _52690 + (320 * _53226) + -mem[64] + 160
        mem[64] = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 512
        mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 192] = 0
        mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224] = 0
        mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 256] = 0
        mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 288] = 0
        mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 320] = 0
        mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 352] = 0
        mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 384] = 0
        mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 416] = 0
        mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 448] = 0
        mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 480] = 0
        mem[var41001] = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 192
        s = var41001
        idx = var41002
        while idx - 1:
            mem[64] = mem[64] + 320
            mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 192] = 0
            mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224] = 0
            mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 256] = 0
            mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 288] = 0
            mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 320] = 0
            mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 352] = 0
            mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 384] = 0
            mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 416] = 0
            mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 448] = 0
            mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 480] = 0
            mem[s + 32] = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 192
            s = s + 32
            idx = idx - 1
            continue 
        idx = 0
        while idx < arg2:
            if stor15[address(arg5)].field_0 - 1 > !idx:
                revert with 0, 17
            if stor15[address(arg5)].field_0 + idx - 1 >= mem[(32 * stor11.length) + 128]:
                revert with 0, 50
            mem[0] = mem[(32 * stor15[address(arg5)].field_0 + idx - 1) + (32 * stor11.length) + 160]
            mem[32] = 12
            _65959 = sha3(mem[(32 * stor15[address(arg5)].field_0 + idx - 1) + (32 * stor11.length) + 160], 12)
            _65960 = mem[64]
            mem[64] = mem[64] + 320
            mem[_65960] = stor12[mem[(32 * stor15[address(arg5)].field_0 + idx - 1) + (32 * stor11.length) + 160]].field_0
            mem[_65960 + 32] = stor1[_65959]
            mem[_65960 + 64] = stor2[_65959]
            mem[_65960 + 96] = stor3[_65959]
            mem[_65960 + 128] = stor4[_65959]
            mem[_65960 + 160] = stor5[_65959]
            mem[_65960 + 192] = stor6[_65959]
            mem[_65960 + 224] = stor7[_65959].field_0
            mem[_65960 + 256] = bool(stor7[_65959].field_160)
            mem[_65960 + 288] = stor8[_65959]
            if idx >= mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]:
                revert with 0, 50
            mem[(32 * idx) + (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192] = _65960
            if idx == -1:
                revert with 0, 17
            idx = idx + 1
            continue 
        if stor15[address(arg5)].field_0 - 1 > !arg2:
            revert with 0, 17
        if stor15[address(arg5)].field_0 - 1 > !arg2:
            revert with 0, 17
        if stor15[address(arg5)].field_0 + arg2 - 1 < mem[(32 * stor11.length) + 128]:
            _66487 = mem[64]
            mem[64] = mem[64] + 64
            mem[_66487] = 7
            mem[_66487 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
            _66740 = mem[64]
            mem[mem[64]] = 96
            _66988 = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
            mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
            idx = 0
            s = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192
            t = mem[64] + 128
            while idx < _66988:
                _68764 = mem[s]
                mem[t] = mem[mem[s]]
                mem[t + 32] = mem[_68764 + 32]
                mem[t + 64] = mem[_68764 + 64]
                mem[t + 96] = mem[_68764 + 96]
                mem[t + 128] = mem[_68764 + 128]
                mem[t + 160] = mem[_68764 + 172 len 20]
                mem[t + 192] = mem[_68764 + 192]
                mem[t + 224] = mem[_68764 + 236 len 20]
                mem[t + 256] = bool(mem[_68764 + 256])
                mem[t + 288] = mem[_68764 + 288]
                idx = idx + 1
                s = s + 32
                t = t + 320
                continue 
            mem[_66740 + 32] = stor15[address(arg5)].field_0 + arg2 - 1
            mem[_66740 + 64] = (320 * _66988) + 128
            _69285 = mem[_66487]
            mem[_66740 + (320 * _66988) + 128] = mem[_66487]
            mem[_66740 + (320 * _66988) + 160 len ceil32(_69285)] = mem[_66487 + 32 len ceil32(_69285)]
            var64001 = ceil32(_69285)
            if ceil32(_69285) > _69285:
                mem[_66740 + (320 * _66988) + _69285 + 160] = 0
            return memory
              from mem[64]
               len ceil32(_69285) + _66740 + (320 * _66988) + -mem[64] + 160
        _66488 = mem[64]
        mem[64] = mem[64] + 64
        mem[_66488] = 4
        mem[_66488 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
        _66741 = mem[64]
        mem[mem[64]] = 96
        _66989 = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
        mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 160]
        idx = 0
        s = (32 * stor11.length) + (32 * stor15[address(arg5)].field_0) + 192
        t = mem[64] + 128
        while idx < _66989:
            _68771 = mem[s]
            mem[t] = mem[mem[s]]
            mem[t + 32] = mem[_68771 + 32]
            mem[t + 64] = mem[_68771 + 64]
            mem[t + 96] = mem[_68771 + 96]
            mem[t + 128] = mem[_68771 + 128]
            mem[t + 160] = mem[_68771 + 172 len 20]
            mem[t + 192] = mem[_68771 + 192]
            mem[t + 224] = mem[_68771 + 236 len 20]
            mem[t + 256] = bool(mem[_68771 + 256])
            mem[t + 288] = mem[_68771 + 288]
            idx = idx + 1
            s = s + 32
            t = t + 320
            continue 
        mem[_66741 + 32] = stor15[address(arg5)].field_0 + arg2 - 1
        mem[_66741 + 64] = (320 * _66989) + 128
        _69286 = mem[_66488]
        mem[_66741 + (320 * _66989) + 128] = mem[_66488]
        mem[_66741 + (320 * _66989) + 160 len ceil32(_69286)] = mem[_66488 + 32 len ceil32(_69286)]
        var64001 = ceil32(_69286)
        if ceil32(_69286) > _69286:
            mem[_66741 + (320 * _66989) + _69286 + 160] = 0
        return memory
          from mem[64]
           len ceil32(_69286) + _66741 + (320 * _66989) + -mem[64] + 160
    mem[0] = address(arg5)
    mem[32] = 13
    mem[(32 * stor11.length) + 128] = stor13[address(arg5)].field_0
    if not stor13[address(arg5)].field_0:
        if arg4 != 2:
            if not stor13[address(arg5)].field_0:
                mem[64] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 256
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192] = 4
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 224] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 256] = 96
                _13872 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 352] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                idx = 0
                s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192
                t = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 384
                while idx < mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                    _24678 = mem[s]
                    mem[t] = mem[mem[s]]
                    mem[t + 32] = mem[_24678 + 32]
                    mem[t + 64] = mem[_24678 + 64]
                    mem[t + 96] = mem[_24678 + 96]
                    mem[t + 128] = mem[_24678 + 128]
                    mem[t + 160] = mem[_24678 + 172 len 20]
                    mem[t + 192] = mem[_24678 + 192]
                    mem[t + 224] = mem[_24678 + 236 len 20]
                    mem[t + 256] = bool(mem[_24678 + 256])
                    mem[t + 288] = mem[_24678 + 288]
                    idx = idx + 1
                    s = s + 32
                    t = t + 320
                    continue 
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 288] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 320] = (320 * _13872) + 128
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (320 * _13872) + 384] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (320 * _13872) + 416 len ceil32(mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192])] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 224 len ceil32(mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192])]
                var32001 = ceil32(mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192])
                if ceil32(mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]) > mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]:
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (320 * _13872) + mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192] + 416] = 0
                return memory
                  from mem[64]
                   len ceil32(mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (320 * _13872) + -mem[64] + 416
            if arg1 < stor13[address(arg5)].field_0:
                if arg3:
                    if arg2 <= arg1:
                        if arg2 > test266151307():
                            revert with 0, 65
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160] = arg2
                        mem[64] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 192
                        if not arg2:
                            idx = 0
                            while idx < arg2:
                                if arg1 < idx:
                                    revert with 0, 17
                                if arg1 - idx >= mem[(32 * stor11.length) + 128]:
                                    revert with 0, 50
                                mem[0] = mem[(32 * arg1 - idx) + (32 * stor11.length) + 160]
                                mem[32] = 12
                                _26061 = sha3(mem[(32 * arg1 - idx) + (32 * stor11.length) + 160], 12)
                                _26062 = mem[64]
                                mem[64] = mem[64] + 320
                                mem[_26062] = stor12[mem[(32 * arg1 - idx) + (32 * stor11.length) + 160]].field_0
                                mem[_26062 + 32] = stor1[_26061]
                                mem[_26062 + 64] = stor2[_26061]
                                mem[_26062 + 96] = stor3[_26061]
                                mem[_26062 + 128] = stor4[_26061]
                                mem[_26062 + 160] = stor5[_26061]
                                mem[_26062 + 192] = stor6[_26061]
                                mem[_26062 + 224] = stor7[_26061].field_0
                                mem[_26062 + 256] = bool(stor7[_26061].field_160)
                                mem[_26062 + 288] = stor8[_26061]
                                if idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                                    revert with 0, 50
                                mem[(32 * idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192] = _26062
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                continue 
                            if arg1 < arg2:
                                _24786 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_24786] = 4
                                mem[_24786 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                                _25174 = mem[64]
                                mem[mem[64]] = 96
                                _26058 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                                mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                                idx = 0
                                s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192
                                t = mem[64] + 128
                                while idx < _26058:
                                    _37725 = mem[s]
                                    mem[t] = mem[mem[s]]
                                    mem[t + 32] = mem[_37725 + 32]
                                    mem[t + 64] = mem[_37725 + 64]
                                    mem[t + 96] = mem[_37725 + 96]
                                    mem[t + 128] = mem[_37725 + 128]
                                    mem[t + 160] = mem[_37725 + 172 len 20]
                                    mem[t + 192] = mem[_37725 + 192]
                                    mem[t + 224] = mem[_37725 + 236 len 20]
                                    mem[t + 256] = bool(mem[_37725 + 256])
                                    mem[t + 288] = mem[_37725 + 288]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 320
                                    continue 
                                mem[_25174 + 32] = 0
                                mem[_25174 + 64] = (320 * _26058) + 128
                                _38246 = mem[_24786]
                                mem[_25174 + (320 * _26058) + 128] = mem[_24786]
                                mem[_25174 + (320 * _26058) + 160 len ceil32(_38246)] = mem[_24786 + 32 len ceil32(_38246)]
                                var40001 = ceil32(_38246)
                                if ceil32(_38246) > _38246:
                                    mem[_25174 + (320 * _26058) + _38246 + 160] = 0
                                return memory
                                  from mem[64]
                                   len ceil32(_38246) + _25174 + (320 * _26058) + -mem[64] + 160
                            _26059 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_26059] = 7
                            mem[_26059 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                            _26831 = mem[64]
                            mem[mem[64]] = 96
                            _27199 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                            mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                            idx = 0
                            s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192
                            t = mem[64] + 128
                            while idx < _27199:
                                _37732 = mem[s]
                                mem[t] = mem[mem[s]]
                                mem[t + 32] = mem[_37732 + 32]
                                mem[t + 64] = mem[_37732 + 64]
                                mem[t + 96] = mem[_37732 + 96]
                                mem[t + 128] = mem[_37732 + 128]
                                mem[t + 160] = mem[_37732 + 172 len 20]
                                mem[t + 192] = mem[_37732 + 192]
                                mem[t + 224] = mem[_37732 + 236 len 20]
                                mem[t + 256] = bool(mem[_37732 + 256])
                                mem[t + 288] = mem[_37732 + 288]
                                idx = idx + 1
                                s = s + 32
                                t = t + 320
                                continue 
                            mem[_26831 + 32] = arg1 - arg2
                            mem[_26831 + 64] = (320 * _27199) + 128
                            _38247 = mem[_26059]
                            mem[_26831 + (320 * _27199) + 128] = mem[_26059]
                            mem[_26831 + (320 * _27199) + 160 len ceil32(_38247)] = mem[_26059 + 32 len ceil32(_38247)]
                            var43001 = ceil32(_38247)
                            if ceil32(_38247) > _38247:
                                mem[_26831 + (320 * _27199) + _38247 + 160] = 0
                            return memory
                              from mem[64]
                               len ceil32(_38247) + _26831 + (320 * _27199) + -mem[64] + 160
                        mem[64] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 512
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 192] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 224] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 256] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 288] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 320] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 352] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 384] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 416] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 448] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 480] = 0
                        mem[var30001] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 192
                        s = var30001
                        idx = var30002
                        while idx - 1:
                            mem[64] = mem[64] + 320
                            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 192] = 0
                            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 224] = 0
                            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 256] = 0
                            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 288] = 0
                            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 320] = 0
                            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 352] = 0
                            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 384] = 0
                            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 416] = 0
                            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 448] = 0
                            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 480] = 0
                            mem[s + 32] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 192
                            s = s + 32
                            idx = idx - 1
                            continue 
                        idx = 0
                        while idx < arg2:
                            if arg1 < idx:
                                revert with 0, 17
                            if arg1 - idx >= mem[(32 * stor11.length) + 128]:
                                revert with 0, 50
                            mem[0] = mem[(32 * arg1 - idx) + (32 * stor11.length) + 160]
                            mem[32] = 12
                            _50685 = sha3(mem[(32 * arg1 - idx) + (32 * stor11.length) + 160], 12)
                            _50686 = mem[64]
                            mem[64] = mem[64] + 320
                            mem[_50686] = stor12[mem[(32 * arg1 - idx) + (32 * stor11.length) + 160]].field_0
                            mem[_50686 + 32] = stor1[_50685]
                            mem[_50686 + 64] = stor2[_50685]
                            mem[_50686 + 96] = stor3[_50685]
                            mem[_50686 + 128] = stor4[_50685]
                            mem[_50686 + 160] = stor5[_50685]
                            mem[_50686 + 192] = stor6[_50685]
                            mem[_50686 + 224] = stor7[_50685].field_0
                            mem[_50686 + 256] = bool(stor7[_50685].field_160)
                            mem[_50686 + 288] = stor8[_50685]
                            if idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                                revert with 0, 50
                            mem[(32 * idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192] = _50686
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            continue 
                        if arg1 < arg2:
                            _49292 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_49292] = 4
                            mem[_49292 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                            _49776 = mem[64]
                            mem[mem[64]] = 96
                            _50682 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                            mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                            idx = 0
                            s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192
                            t = mem[64] + 128
                            while idx < _50682:
                                _59328 = mem[s]
                                mem[t] = mem[mem[s]]
                                mem[t + 32] = mem[_59328 + 32]
                                mem[t + 64] = mem[_59328 + 64]
                                mem[t + 96] = mem[_59328 + 96]
                                mem[t + 128] = mem[_59328 + 128]
                                mem[t + 160] = mem[_59328 + 172 len 20]
                                mem[t + 192] = mem[_59328 + 192]
                                mem[t + 224] = mem[_59328 + 236 len 20]
                                mem[t + 256] = bool(mem[_59328 + 256])
                                mem[t + 288] = mem[_59328 + 288]
                                idx = idx + 1
                                s = s + 32
                                t = t + 320
                                continue 
                            mem[_49776 + 32] = 0
                            mem[_49776 + 64] = (320 * _50682) + 128
                            _60100 = mem[_49292]
                            mem[_49776 + (320 * _50682) + 128] = mem[_49292]
                            mem[_49776 + (320 * _50682) + 160 len ceil32(_60100)] = mem[_49292 + 32 len ceil32(_60100)]
                            var47001 = ceil32(_60100)
                            if ceil32(_60100) > _60100:
                                mem[_49776 + (320 * _50682) + _60100 + 160] = 0
                            return memory
                              from mem[64]
                               len ceil32(_60100) + _49776 + (320 * _50682) + -mem[64] + 160
                        _50683 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_50683] = 7
                        mem[_50683 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                        _51380 = mem[64]
                        mem[mem[64]] = 96
                        _51763 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                        mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                        idx = 0
                        s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192
                        t = mem[64] + 128
                        while idx < _51763:
                            _59335 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_59335 + 32]
                            mem[t + 64] = mem[_59335 + 64]
                            mem[t + 96] = mem[_59335 + 96]
                            mem[t + 128] = mem[_59335 + 128]
                            mem[t + 160] = mem[_59335 + 172 len 20]
                            mem[t + 192] = mem[_59335 + 192]
                            mem[t + 224] = mem[_59335 + 236 len 20]
                            mem[t + 256] = bool(mem[_59335 + 256])
                            mem[t + 288] = mem[_59335 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_51380 + 32] = arg1 - arg2
                        mem[_51380 + 64] = (320 * _51763) + 128
                        _60101 = mem[_50683]
                        mem[_51380 + (320 * _51763) + 128] = mem[_50683]
                        mem[_51380 + (320 * _51763) + 160 len ceil32(_60101)] = mem[_50683 + 32 len ceil32(_60101)]
                        var50001 = ceil32(_60101)
                        if ceil32(_60101) > _60101:
                            mem[_51380 + (320 * _51763) + _60101 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_60101) + _51380 + (320 * _51763) + -mem[64] + 160
                    if 1 > !arg1:
                        revert with 0, 17
                    if arg1 + 1 > test266151307():
                        revert with 0, 65
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160] = arg1 + 1
                    mem[64] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg1 + 1) + 192
                    if not arg1 + 1:
                        idx = 0
                        while idx < arg1 + 1:
                            if arg1 < idx:
                                revert with 0, 17
                            if arg1 - idx >= mem[(32 * stor11.length) + 128]:
                                revert with 0, 50
                            mem[0] = mem[(32 * arg1 - idx) + (32 * stor11.length) + 160]
                            mem[32] = 12
                            _26067 = sha3(mem[(32 * arg1 - idx) + (32 * stor11.length) + 160], 12)
                            _26068 = mem[64]
                            mem[64] = mem[64] + 320
                            mem[_26068] = stor12[mem[(32 * arg1 - idx) + (32 * stor11.length) + 160]].field_0
                            mem[_26068 + 32] = stor1[_26067]
                            mem[_26068 + 64] = stor2[_26067]
                            mem[_26068 + 96] = stor3[_26067]
                            mem[_26068 + 128] = stor4[_26067]
                            mem[_26068 + 160] = stor5[_26067]
                            mem[_26068 + 192] = stor6[_26067]
                            mem[_26068 + 224] = stor7[_26067].field_0
                            mem[_26068 + 256] = bool(stor7[_26067].field_160)
                            mem[_26068 + 288] = stor8[_26067]
                            if idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                                revert with 0, 50
                            mem[(32 * idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192] = _26068
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            continue 
                        if arg1 < arg1 + 1:
                            _24787 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_24787] = 4
                            mem[_24787 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                            _25176 = mem[64]
                            mem[mem[64]] = 96
                            _26064 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                            mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                            idx = 0
                            s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192
                            t = mem[64] + 128
                            while idx < _26064:
                                _37739 = mem[s]
                                mem[t] = mem[mem[s]]
                                mem[t + 32] = mem[_37739 + 32]
                                mem[t + 64] = mem[_37739 + 64]
                                mem[t + 96] = mem[_37739 + 96]
                                mem[t + 128] = mem[_37739 + 128]
                                mem[t + 160] = mem[_37739 + 172 len 20]
                                mem[t + 192] = mem[_37739 + 192]
                                mem[t + 224] = mem[_37739 + 236 len 20]
                                mem[t + 256] = bool(mem[_37739 + 256])
                                mem[t + 288] = mem[_37739 + 288]
                                idx = idx + 1
                                s = s + 32
                                t = t + 320
                                continue 
                            mem[_25176 + 32] = 0
                            mem[_25176 + 64] = (320 * _26064) + 128
                            _38248 = mem[_24787]
                            mem[_25176 + (320 * _26064) + 128] = mem[_24787]
                            mem[_25176 + (320 * _26064) + 160 len ceil32(_38248)] = mem[_24787 + 32 len ceil32(_38248)]
                            var44001 = ceil32(_38248)
                            if ceil32(_38248) > _38248:
                                mem[_25176 + (320 * _26064) + _38248 + 160] = 0
                            return memory
                              from mem[64]
                               len ceil32(_38248) + _25176 + (320 * _26064) + -mem[64] + 160
                        _26065 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_26065] = 7
                        mem[_26065 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                        _26840 = mem[64]
                        mem[mem[64]] = 96
                        _27201 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                        mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                        idx = 0
                        s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192
                        t = mem[64] + 128
                        while idx < _27201:
                            _37746 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_37746 + 32]
                            mem[t + 64] = mem[_37746 + 64]
                            mem[t + 96] = mem[_37746 + 96]
                            mem[t + 128] = mem[_37746 + 128]
                            mem[t + 160] = mem[_37746 + 172 len 20]
                            mem[t + 192] = mem[_37746 + 192]
                            mem[t + 224] = mem[_37746 + 236 len 20]
                            mem[t + 256] = bool(mem[_37746 + 256])
                            mem[t + 288] = mem[_37746 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_26840 + 32] = -1
                        mem[_26840 + 64] = (320 * _27201) + 128
                        _38249 = mem[_26065]
                        mem[_26840 + (320 * _27201) + 128] = mem[_26065]
                        mem[_26840 + (320 * _27201) + 160 len ceil32(_38249)] = mem[_26065 + 32 len ceil32(_38249)]
                        var47001 = ceil32(_38249)
                        if ceil32(_38249) > _38249:
                            mem[_26840 + (320 * _27201) + _38249 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_38249) + _26840 + (320 * _27201) + -mem[64] + 160
                    mem[64] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg1 + 1) + 512
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg1 + 1) + 192] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg1 + 1) + 224] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg1 + 1) + 256] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg1 + 1) + 288] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg1 + 1) + 320] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg1 + 1) + 352] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg1 + 1) + 384] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg1 + 1) + 416] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg1 + 1) + 448] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg1 + 1) + 480] = 0
                    mem[var34001] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg1 + 1) + 192
                    s = var34001
                    idx = var34002
                    while idx - 1:
                        mem[64] = mem[64] + 320
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg1 + 1) + 192] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg1 + 1) + 224] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg1 + 1) + 256] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg1 + 1) + 288] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg1 + 1) + 320] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg1 + 1) + 352] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg1 + 1) + 384] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg1 + 1) + 416] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg1 + 1) + 448] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg1 + 1) + 480] = 0
                        mem[s + 32] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg1 + 1) + 192
                        s = s + 32
                        idx = idx - 1
                        continue 
                    idx = 0
                    while idx < arg1 + 1:
                        if arg1 < idx:
                            revert with 0, 17
                        if arg1 - idx >= mem[(32 * stor11.length) + 128]:
                            revert with 0, 50
                        mem[0] = mem[(32 * arg1 - idx) + (32 * stor11.length) + 160]
                        mem[32] = 12
                        _50693 = sha3(mem[(32 * arg1 - idx) + (32 * stor11.length) + 160], 12)
                        _50694 = mem[64]
                        mem[64] = mem[64] + 320
                        mem[_50694] = stor12[mem[(32 * arg1 - idx) + (32 * stor11.length) + 160]].field_0
                        mem[_50694 + 32] = stor1[_50693]
                        mem[_50694 + 64] = stor2[_50693]
                        mem[_50694 + 96] = stor3[_50693]
                        mem[_50694 + 128] = stor4[_50693]
                        mem[_50694 + 160] = stor5[_50693]
                        mem[_50694 + 192] = stor6[_50693]
                        mem[_50694 + 224] = stor7[_50693].field_0
                        mem[_50694 + 256] = bool(stor7[_50693].field_160)
                        mem[_50694 + 288] = stor8[_50693]
                        if idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                            revert with 0, 50
                        mem[(32 * idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192] = _50694
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if arg1 < arg1 + 1:
                        _49293 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_49293] = 4
                        mem[_49293 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                        _49780 = mem[64]
                        mem[mem[64]] = 96
                        _50690 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                        mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                        idx = 0
                        s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192
                        t = mem[64] + 128
                        while idx < _50690:
                            _59342 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_59342 + 32]
                            mem[t + 64] = mem[_59342 + 64]
                            mem[t + 96] = mem[_59342 + 96]
                            mem[t + 128] = mem[_59342 + 128]
                            mem[t + 160] = mem[_59342 + 172 len 20]
                            mem[t + 192] = mem[_59342 + 192]
                            mem[t + 224] = mem[_59342 + 236 len 20]
                            mem[t + 256] = bool(mem[_59342 + 256])
                            mem[t + 288] = mem[_59342 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_49780 + 32] = 0
                        mem[_49780 + 64] = (320 * _50690) + 128
                        _60102 = mem[_49293]
                        mem[_49780 + (320 * _50690) + 128] = mem[_49293]
                        mem[_49780 + (320 * _50690) + 160 len ceil32(_60102)] = mem[_49293 + 32 len ceil32(_60102)]
                        var51001 = ceil32(_60102)
                        if ceil32(_60102) > _60102:
                            mem[_49780 + (320 * _50690) + _60102 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_60102) + _49780 + (320 * _50690) + -mem[64] + 160
                    _50691 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_50691] = 7
                    mem[_50691 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                    _51388 = mem[64]
                    mem[mem[64]] = 96
                    _51765 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                    mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                    idx = 0
                    s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192
                    t = mem[64] + 128
                    while idx < _51765:
                        _59349 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_59349 + 32]
                        mem[t + 64] = mem[_59349 + 64]
                        mem[t + 96] = mem[_59349 + 96]
                        mem[t + 128] = mem[_59349 + 128]
                        mem[t + 160] = mem[_59349 + 172 len 20]
                        mem[t + 192] = mem[_59349 + 192]
                        mem[t + 224] = mem[_59349 + 236 len 20]
                        mem[t + 256] = bool(mem[_59349 + 256])
                        mem[t + 288] = mem[_59349 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_51388 + 32] = -1
                    mem[_51388 + 64] = (320 * _51765) + 128
                    _60103 = mem[_50691]
                    mem[_51388 + (320 * _51765) + 128] = mem[_50691]
                    mem[_51388 + (320 * _51765) + 160 len ceil32(_60103)] = mem[_50691 + 32 len ceil32(_60103)]
                    var54001 = ceil32(_60103)
                    if ceil32(_60103) > _60103:
                        mem[_51388 + (320 * _51765) + _60103 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_60103) + _51388 + (320 * _51765) + -mem[64] + 160
                if stor13[address(arg5)].field_0 < arg1:
                    revert with 0, 17
                if arg2 <= stor13[address(arg5)].field_0 - arg1:
                    if arg2 > test266151307():
                        revert with 0, 65
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160] = arg2
                    mem[64] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 192
                    if not arg2:
                        idx = 0
                        while idx < arg2:
                            if arg1 > !idx:
                                revert with 0, 17
                            if arg1 + idx >= mem[(32 * stor11.length) + 128]:
                                revert with 0, 50
                            mem[0] = mem[(32 * arg1 + idx) + (32 * stor11.length) + 160]
                            mem[32] = 12
                            _26071 = sha3(mem[(32 * arg1 + idx) + (32 * stor11.length) + 160], 12)
                            _26072 = mem[64]
                            mem[64] = mem[64] + 320
                            mem[_26072] = stor12[mem[(32 * arg1 + idx) + (32 * stor11.length) + 160]].field_0
                            mem[_26072 + 32] = stor1[_26071]
                            mem[_26072 + 64] = stor2[_26071]
                            mem[_26072 + 96] = stor3[_26071]
                            mem[_26072 + 128] = stor4[_26071]
                            mem[_26072 + 160] = stor5[_26071]
                            mem[_26072 + 192] = stor6[_26071]
                            mem[_26072 + 224] = stor7[_26071].field_0
                            mem[_26072 + 256] = bool(stor7[_26071].field_160)
                            mem[_26072 + 288] = stor8[_26071]
                            if idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                                revert with 0, 50
                            mem[(32 * idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192] = _26072
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            continue 
                        if arg1 > !arg2:
                            revert with 0, 17
                        if arg1 > !arg2:
                            revert with 0, 17
                        if arg1 + arg2 < mem[(32 * stor11.length) + 128]:
                            _27202 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_27202] = 7
                            mem[_27202 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                            _28684 = mem[64]
                            mem[mem[64]] = 96
                            _29108 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                            mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                            idx = 0
                            s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192
                            t = mem[64] + 128
                            while idx < _29108:
                                _37753 = mem[s]
                                mem[t] = mem[mem[s]]
                                mem[t + 32] = mem[_37753 + 32]
                                mem[t + 64] = mem[_37753 + 64]
                                mem[t + 96] = mem[_37753 + 96]
                                mem[t + 128] = mem[_37753 + 128]
                                mem[t + 160] = mem[_37753 + 172 len 20]
                                mem[t + 192] = mem[_37753 + 192]
                                mem[t + 224] = mem[_37753 + 236 len 20]
                                mem[t + 256] = bool(mem[_37753 + 256])
                                mem[t + 288] = mem[_37753 + 288]
                                idx = idx + 1
                                s = s + 32
                                t = t + 320
                                continue 
                            mem[_28684 + 32] = arg1 + arg2
                            mem[_28684 + 64] = (320 * _29108) + 128
                            _38250 = mem[_27202]
                            mem[_28684 + (320 * _29108) + 128] = mem[_27202]
                            mem[_28684 + (320 * _29108) + 160 len ceil32(_38250)] = mem[_27202 + 32 len ceil32(_38250)]
                            var49001 = ceil32(_38250)
                            if ceil32(_38250) > _38250:
                                mem[_28684 + (320 * _29108) + _38250 + 160] = 0
                            return memory
                              from mem[64]
                               len ceil32(_38250) + _28684 + (320 * _29108) + -mem[64] + 160
                        _27203 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_27203] = 4
                        mem[_27203 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                        _28685 = mem[64]
                        mem[mem[64]] = 96
                        _29109 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                        mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                        idx = 0
                        s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192
                        t = mem[64] + 128
                        while idx < _29109:
                            _37760 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_37760 + 32]
                            mem[t + 64] = mem[_37760 + 64]
                            mem[t + 96] = mem[_37760 + 96]
                            mem[t + 128] = mem[_37760 + 128]
                            mem[t + 160] = mem[_37760 + 172 len 20]
                            mem[t + 192] = mem[_37760 + 192]
                            mem[t + 224] = mem[_37760 + 236 len 20]
                            mem[t + 256] = bool(mem[_37760 + 256])
                            mem[t + 288] = mem[_37760 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_28685 + 32] = arg1 + arg2
                        mem[_28685 + 64] = (320 * _29109) + 128
                        _38251 = mem[_27203]
                        mem[_28685 + (320 * _29109) + 128] = mem[_27203]
                        mem[_28685 + (320 * _29109) + 160 len ceil32(_38251)] = mem[_27203 + 32 len ceil32(_38251)]
                        var49001 = ceil32(_38251)
                        if ceil32(_38251) > _38251:
                            mem[_28685 + (320 * _29109) + _38251 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_38251) + _28685 + (320 * _29109) + -mem[64] + 160
                    mem[64] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 512
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 192] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 224] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 256] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 288] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 320] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 352] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 384] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 416] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 448] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 480] = 0
                    mem[var33001] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 192
                    s = var33001
                    idx = var33002
                    while idx - 1:
                        mem[64] = mem[64] + 320
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 192] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 224] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 256] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 288] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 320] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 352] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 384] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 416] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 448] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 480] = 0
                        mem[s + 32] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 192
                        s = s + 32
                        idx = idx - 1
                        continue 
                    idx = 0
                    while idx < arg2:
                        if arg1 > !idx:
                            revert with 0, 17
                        if arg1 + idx >= mem[(32 * stor11.length) + 128]:
                            revert with 0, 50
                        mem[0] = mem[(32 * arg1 + idx) + (32 * stor11.length) + 160]
                        mem[32] = 12
                        _50699 = sha3(mem[(32 * arg1 + idx) + (32 * stor11.length) + 160], 12)
                        _50700 = mem[64]
                        mem[64] = mem[64] + 320
                        mem[_50700] = stor12[mem[(32 * arg1 + idx) + (32 * stor11.length) + 160]].field_0
                        mem[_50700 + 32] = stor1[_50699]
                        mem[_50700 + 64] = stor2[_50699]
                        mem[_50700 + 96] = stor3[_50699]
                        mem[_50700 + 128] = stor4[_50699]
                        mem[_50700 + 160] = stor5[_50699]
                        mem[_50700 + 192] = stor6[_50699]
                        mem[_50700 + 224] = stor7[_50699].field_0
                        mem[_50700 + 256] = bool(stor7[_50699].field_160)
                        mem[_50700 + 288] = stor8[_50699]
                        if idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                            revert with 0, 50
                        mem[(32 * idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192] = _50700
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if arg1 > !arg2:
                        revert with 0, 17
                    if arg1 > !arg2:
                        revert with 0, 17
                    if arg1 + arg2 < mem[(32 * stor11.length) + 128]:
                        _51766 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_51766] = 7
                        mem[_51766 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                        _52717 = mem[64]
                        mem[mem[64]] = 96
                        _53233 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                        mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                        idx = 0
                        s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192
                        t = mem[64] + 128
                        while idx < _53233:
                            _59356 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_59356 + 32]
                            mem[t + 64] = mem[_59356 + 64]
                            mem[t + 96] = mem[_59356 + 96]
                            mem[t + 128] = mem[_59356 + 128]
                            mem[t + 160] = mem[_59356 + 172 len 20]
                            mem[t + 192] = mem[_59356 + 192]
                            mem[t + 224] = mem[_59356 + 236 len 20]
                            mem[t + 256] = bool(mem[_59356 + 256])
                            mem[t + 288] = mem[_59356 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_52717 + 32] = arg1 + arg2
                        mem[_52717 + 64] = (320 * _53233) + 128
                        _60104 = mem[_51766]
                        mem[_52717 + (320 * _53233) + 128] = mem[_51766]
                        mem[_52717 + (320 * _53233) + 160 len ceil32(_60104)] = mem[_51766 + 32 len ceil32(_60104)]
                        var56001 = ceil32(_60104)
                        if ceil32(_60104) > _60104:
                            mem[_52717 + (320 * _53233) + _60104 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_60104) + _52717 + (320 * _53233) + -mem[64] + 160
                    _51767 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_51767] = 4
                    mem[_51767 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                    _52718 = mem[64]
                    mem[mem[64]] = 96
                    _53234 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                    mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                    idx = 0
                    s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192
                    t = mem[64] + 128
                    while idx < _53234:
                        _59363 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_59363 + 32]
                        mem[t + 64] = mem[_59363 + 64]
                        mem[t + 96] = mem[_59363 + 96]
                        mem[t + 128] = mem[_59363 + 128]
                        mem[t + 160] = mem[_59363 + 172 len 20]
                        mem[t + 192] = mem[_59363 + 192]
                        mem[t + 224] = mem[_59363 + 236 len 20]
                        mem[t + 256] = bool(mem[_59363 + 256])
                        mem[t + 288] = mem[_59363 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_52718 + 32] = arg1 + arg2
                    mem[_52718 + 64] = (320 * _53234) + 128
                    _60105 = mem[_51767]
                    mem[_52718 + (320 * _53234) + 128] = mem[_51767]
                    mem[_52718 + (320 * _53234) + 160 len ceil32(_60105)] = mem[_51767 + 32 len ceil32(_60105)]
                    var56001 = ceil32(_60105)
                    if ceil32(_60105) > _60105:
                        mem[_52718 + (320 * _53234) + _60105 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_60105) + _52718 + (320 * _53234) + -mem[64] + 160
                if stor13[address(arg5)].field_0 < arg1:
                    revert with 0, 17
                if stor13[address(arg5)].field_0 - arg1 > test266151307():
                    revert with 0, 65
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160] = stor13[address(arg5)].field_0 - arg1
                mem[64] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor13[address(arg5)].field_0 - arg1) + 192
                if not stor13[address(arg5)].field_0 - arg1:
                    idx = 0
                    while idx < stor13[address(arg5)].field_0 - arg1:
                        if arg1 > !idx:
                            revert with 0, 17
                        if arg1 + idx >= mem[(32 * stor11.length) + 128]:
                            revert with 0, 50
                        mem[0] = mem[(32 * arg1 + idx) + (32 * stor11.length) + 160]
                        mem[32] = 12
                        _26075 = sha3(mem[(32 * arg1 + idx) + (32 * stor11.length) + 160], 12)
                        _26076 = mem[64]
                        mem[64] = mem[64] + 320
                        mem[_26076] = stor12[mem[(32 * arg1 + idx) + (32 * stor11.length) + 160]].field_0
                        mem[_26076 + 32] = stor1[_26075]
                        mem[_26076 + 64] = stor2[_26075]
                        mem[_26076 + 96] = stor3[_26075]
                        mem[_26076 + 128] = stor4[_26075]
                        mem[_26076 + 160] = stor5[_26075]
                        mem[_26076 + 192] = stor6[_26075]
                        mem[_26076 + 224] = stor7[_26075].field_0
                        mem[_26076 + 256] = bool(stor7[_26075].field_160)
                        mem[_26076 + 288] = stor8[_26075]
                        if idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                            revert with 0, 50
                        mem[(32 * idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192] = _26076
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if arg1 > !(stor13[address(arg5)].field_0 - arg1):
                        revert with 0, 17
                    if arg1 > !(stor13[address(arg5)].field_0 - arg1):
                        revert with 0, 17
                    if stor13[address(arg5)].field_0 < mem[(32 * stor11.length) + 128]:
                        _27204 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_27204] = 7
                        mem[_27204 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                        _28690 = mem[64]
                        mem[mem[64]] = 96
                        _29110 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                        mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                        idx = 0
                        s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192
                        t = mem[64] + 128
                        while idx < _29110:
                            _37767 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_37767 + 32]
                            mem[t + 64] = mem[_37767 + 64]
                            mem[t + 96] = mem[_37767 + 96]
                            mem[t + 128] = mem[_37767 + 128]
                            mem[t + 160] = mem[_37767 + 172 len 20]
                            mem[t + 192] = mem[_37767 + 192]
                            mem[t + 224] = mem[_37767 + 236 len 20]
                            mem[t + 256] = bool(mem[_37767 + 256])
                            mem[t + 288] = mem[_37767 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_28690 + 32] = stor13[address(arg5)].field_0
                        mem[_28690 + 64] = (320 * _29110) + 128
                        _38252 = mem[_27204]
                        mem[_28690 + (320 * _29110) + 128] = mem[_27204]
                        mem[_28690 + (320 * _29110) + 160 len ceil32(_38252)] = mem[_27204 + 32 len ceil32(_38252)]
                        var53001 = ceil32(_38252)
                        if ceil32(_38252) > _38252:
                            mem[_28690 + (320 * _29110) + _38252 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_38252) + _28690 + (320 * _29110) + -mem[64] + 160
                    _27205 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_27205] = 4
                    mem[_27205 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                    _28691 = mem[64]
                    mem[mem[64]] = 96
                    _29111 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                    mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                    idx = 0
                    s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192
                    t = mem[64] + 128
                    while idx < _29111:
                        _37774 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_37774 + 32]
                        mem[t + 64] = mem[_37774 + 64]
                        mem[t + 96] = mem[_37774 + 96]
                        mem[t + 128] = mem[_37774 + 128]
                        mem[t + 160] = mem[_37774 + 172 len 20]
                        mem[t + 192] = mem[_37774 + 192]
                        mem[t + 224] = mem[_37774 + 236 len 20]
                        mem[t + 256] = bool(mem[_37774 + 256])
                        mem[t + 288] = mem[_37774 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_28691 + 32] = stor13[address(arg5)].field_0
                    mem[_28691 + 64] = (320 * _29111) + 128
                    _38253 = mem[_27205]
                    mem[_28691 + (320 * _29111) + 128] = mem[_27205]
                    mem[_28691 + (320 * _29111) + 160 len ceil32(_38253)] = mem[_27205 + 32 len ceil32(_38253)]
                    var53001 = ceil32(_38253)
                    if ceil32(_38253) > _38253:
                        mem[_28691 + (320 * _29111) + _38253 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_38253) + _28691 + (320 * _29111) + -mem[64] + 160
                mem[64] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor13[address(arg5)].field_0 - arg1) + 512
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor13[address(arg5)].field_0 - arg1) + 192] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor13[address(arg5)].field_0 - arg1) + 224] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor13[address(arg5)].field_0 - arg1) + 256] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor13[address(arg5)].field_0 - arg1) + 288] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor13[address(arg5)].field_0 - arg1) + 320] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor13[address(arg5)].field_0 - arg1) + 352] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor13[address(arg5)].field_0 - arg1) + 384] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor13[address(arg5)].field_0 - arg1) + 416] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor13[address(arg5)].field_0 - arg1) + 448] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor13[address(arg5)].field_0 - arg1) + 480] = 0
                mem[var37001] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor13[address(arg5)].field_0 - arg1) + 192
                s = var37001
                idx = var37002
                while idx - 1:
                    mem[64] = mem[64] + 320
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor13[address(arg5)].field_0 - arg1) + 192] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor13[address(arg5)].field_0 - arg1) + 224] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor13[address(arg5)].field_0 - arg1) + 256] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor13[address(arg5)].field_0 - arg1) + 288] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor13[address(arg5)].field_0 - arg1) + 320] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor13[address(arg5)].field_0 - arg1) + 352] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor13[address(arg5)].field_0 - arg1) + 384] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor13[address(arg5)].field_0 - arg1) + 416] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor13[address(arg5)].field_0 - arg1) + 448] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor13[address(arg5)].field_0 - arg1) + 480] = 0
                    mem[s + 32] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor13[address(arg5)].field_0 - arg1) + 192
                    s = s + 32
                    idx = idx - 1
                    continue 
                idx = 0
                while idx < stor13[address(arg5)].field_0 - arg1:
                    if arg1 > !idx:
                        revert with 0, 17
                    if arg1 + idx >= mem[(32 * stor11.length) + 128]:
                        revert with 0, 50
                    mem[0] = mem[(32 * arg1 + idx) + (32 * stor11.length) + 160]
                    mem[32] = 12
                    _50705 = sha3(mem[(32 * arg1 + idx) + (32 * stor11.length) + 160], 12)
                    _50706 = mem[64]
                    mem[64] = mem[64] + 320
                    mem[_50706] = stor12[mem[(32 * arg1 + idx) + (32 * stor11.length) + 160]].field_0
                    mem[_50706 + 32] = stor1[_50705]
                    mem[_50706 + 64] = stor2[_50705]
                    mem[_50706 + 96] = stor3[_50705]
                    mem[_50706 + 128] = stor4[_50705]
                    mem[_50706 + 160] = stor5[_50705]
                    mem[_50706 + 192] = stor6[_50705]
                    mem[_50706 + 224] = stor7[_50705].field_0
                    mem[_50706 + 256] = bool(stor7[_50705].field_160)
                    mem[_50706 + 288] = stor8[_50705]
                    if idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                        revert with 0, 50
                    mem[(32 * idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192] = _50706
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
                if arg1 > !(stor13[address(arg5)].field_0 - arg1):
                    revert with 0, 17
                if arg1 > !(stor13[address(arg5)].field_0 - arg1):
                    revert with 0, 17
                if stor13[address(arg5)].field_0 < mem[(32 * stor11.length) + 128]:
                    _51768 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_51768] = 7
                    mem[_51768 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                    _52719 = mem[64]
                    mem[mem[64]] = 96
                    _53235 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                    mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                    idx = 0
                    s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192
                    t = mem[64] + 128
                    while idx < _53235:
                        _59370 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_59370 + 32]
                        mem[t + 64] = mem[_59370 + 64]
                        mem[t + 96] = mem[_59370 + 96]
                        mem[t + 128] = mem[_59370 + 128]
                        mem[t + 160] = mem[_59370 + 172 len 20]
                        mem[t + 192] = mem[_59370 + 192]
                        mem[t + 224] = mem[_59370 + 236 len 20]
                        mem[t + 256] = bool(mem[_59370 + 256])
                        mem[t + 288] = mem[_59370 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_52719 + 32] = stor13[address(arg5)].field_0
                    mem[_52719 + 64] = (320 * _53235) + 128
                    _60106 = mem[_51768]
                    mem[_52719 + (320 * _53235) + 128] = mem[_51768]
                    mem[_52719 + (320 * _53235) + 160 len ceil32(_60106)] = mem[_51768 + 32 len ceil32(_60106)]
                    var60001 = ceil32(_60106)
                    if ceil32(_60106) > _60106:
                        mem[_52719 + (320 * _53235) + _60106 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_60106) + _52719 + (320 * _53235) + -mem[64] + 160
                _51769 = mem[64]
                mem[64] = mem[64] + 64
                mem[_51769] = 4
                mem[_51769 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                _52720 = mem[64]
                mem[mem[64]] = 96
                _53236 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                idx = 0
                s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192
                t = mem[64] + 128
                while idx < _53236:
                    _59377 = mem[s]
                    mem[t] = mem[mem[s]]
                    mem[t + 32] = mem[_59377 + 32]
                    mem[t + 64] = mem[_59377 + 64]
                    mem[t + 96] = mem[_59377 + 96]
                    mem[t + 128] = mem[_59377 + 128]
                    mem[t + 160] = mem[_59377 + 172 len 20]
                    mem[t + 192] = mem[_59377 + 192]
                    mem[t + 224] = mem[_59377 + 236 len 20]
                    mem[t + 256] = bool(mem[_59377 + 256])
                    mem[t + 288] = mem[_59377 + 288]
                    idx = idx + 1
                    s = s + 32
                    t = t + 320
                    continue 
                mem[_52720 + 32] = stor13[address(arg5)].field_0
                mem[_52720 + 64] = (320 * _53236) + 128
                _60107 = mem[_51769]
                mem[_52720 + (320 * _53236) + 128] = mem[_51769]
                mem[_52720 + (320 * _53236) + 160 len ceil32(_60107)] = mem[_51769 + 32 len ceil32(_60107)]
                var60001 = ceil32(_60107)
                if ceil32(_60107) > _60107:
                    mem[_52720 + (320 * _53236) + _60107 + 160] = 0
                return memory
                  from mem[64]
                   len ceil32(_60107) + _52720 + (320 * _53236) + -mem[64] + 160
            if stor13[address(arg5)].field_0 < 1:
                revert with 0, 17
            if arg3:
                if arg2 <= stor13[address(arg5)].field_0 - 1:
                    if arg2 > test266151307():
                        revert with 0, 65
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160] = arg2
                    mem[64] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 192
                    if not arg2:
                        idx = 0
                        while idx < arg2:
                            if stor13[address(arg5)].field_0 - 1 < idx:
                                revert with 0, 17
                            if stor13[address(arg5)].field_0 + -idx - 1 >= mem[(32 * stor11.length) + 128]:
                                revert with 0, 50
                            mem[0] = mem[(32 * stor13[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + 160]
                            mem[32] = 12
                            _26081 = sha3(mem[(32 * stor13[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + 160], 12)
                            _26082 = mem[64]
                            mem[64] = mem[64] + 320
                            mem[_26082] = stor12[mem[(32 * stor13[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + 160]].field_0
                            mem[_26082 + 32] = stor1[_26081]
                            mem[_26082 + 64] = stor2[_26081]
                            mem[_26082 + 96] = stor3[_26081]
                            mem[_26082 + 128] = stor4[_26081]
                            mem[_26082 + 160] = stor5[_26081]
                            mem[_26082 + 192] = stor6[_26081]
                            mem[_26082 + 224] = stor7[_26081].field_0
                            mem[_26082 + 256] = bool(stor7[_26081].field_160)
                            mem[_26082 + 288] = stor8[_26081]
                            if idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                                revert with 0, 50
                            mem[(32 * idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192] = _26082
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            continue 
                        if stor13[address(arg5)].field_0 - 1 < arg2:
                            _24788 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_24788] = 4
                            mem[_24788 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                            _25180 = mem[64]
                            mem[mem[64]] = 96
                            _26078 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                            mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                            idx = 0
                            s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192
                            t = mem[64] + 128
                            while idx < _26078:
                                _37781 = mem[s]
                                mem[t] = mem[mem[s]]
                                mem[t + 32] = mem[_37781 + 32]
                                mem[t + 64] = mem[_37781 + 64]
                                mem[t + 96] = mem[_37781 + 96]
                                mem[t + 128] = mem[_37781 + 128]
                                mem[t + 160] = mem[_37781 + 172 len 20]
                                mem[t + 192] = mem[_37781 + 192]
                                mem[t + 224] = mem[_37781 + 236 len 20]
                                mem[t + 256] = bool(mem[_37781 + 256])
                                mem[t + 288] = mem[_37781 + 288]
                                idx = idx + 1
                                s = s + 32
                                t = t + 320
                                continue 
                            mem[_25180 + 32] = 0
                            mem[_25180 + 64] = (320 * _26078) + 128
                            _38254 = mem[_24788]
                            mem[_25180 + (320 * _26078) + 128] = mem[_24788]
                            mem[_25180 + (320 * _26078) + 160 len ceil32(_38254)] = mem[_24788 + 32 len ceil32(_38254)]
                            var44001 = ceil32(_38254)
                            if ceil32(_38254) > _38254:
                                mem[_25180 + (320 * _26078) + _38254 + 160] = 0
                            return memory
                              from mem[64]
                               len ceil32(_38254) + _25180 + (320 * _26078) + -mem[64] + 160
                        _26079 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_26079] = 7
                        mem[_26079 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                        _26849 = mem[64]
                        mem[mem[64]] = 96
                        _27207 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                        mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                        idx = 0
                        s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192
                        t = mem[64] + 128
                        while idx < _27207:
                            _37788 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_37788 + 32]
                            mem[t + 64] = mem[_37788 + 64]
                            mem[t + 96] = mem[_37788 + 96]
                            mem[t + 128] = mem[_37788 + 128]
                            mem[t + 160] = mem[_37788 + 172 len 20]
                            mem[t + 192] = mem[_37788 + 192]
                            mem[t + 224] = mem[_37788 + 236 len 20]
                            mem[t + 256] = bool(mem[_37788 + 256])
                            mem[t + 288] = mem[_37788 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_26849 + 32] = stor13[address(arg5)].field_0 + -arg2 - 1
                        mem[_26849 + 64] = (320 * _27207) + 128
                        _38255 = mem[_26079]
                        mem[_26849 + (320 * _27207) + 128] = mem[_26079]
                        mem[_26849 + (320 * _27207) + 160 len ceil32(_38255)] = mem[_26079 + 32 len ceil32(_38255)]
                        var47001 = ceil32(_38255)
                        if ceil32(_38255) > _38255:
                            mem[_26849 + (320 * _27207) + _38255 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_38255) + _26849 + (320 * _27207) + -mem[64] + 160
                    mem[64] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 512
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 192] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 224] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 256] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 288] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 320] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 352] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 384] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 416] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 448] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 480] = 0
                    mem[var34001] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 192
                    s = var34001
                    idx = var34002
                    while idx - 1:
                        mem[64] = mem[64] + 320
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 192] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 224] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 256] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 288] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 320] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 352] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 384] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 416] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 448] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 480] = 0
                        mem[s + 32] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 192
                        s = s + 32
                        idx = idx - 1
                        continue 
                    idx = 0
                    while idx < arg2:
                        if stor13[address(arg5)].field_0 - 1 < idx:
                            revert with 0, 17
                        if stor13[address(arg5)].field_0 + -idx - 1 >= mem[(32 * stor11.length) + 128]:
                            revert with 0, 50
                        mem[0] = mem[(32 * stor13[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + 160]
                        mem[32] = 12
                        _50713 = sha3(mem[(32 * stor13[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + 160], 12)
                        _50714 = mem[64]
                        mem[64] = mem[64] + 320
                        mem[_50714] = stor12[mem[(32 * stor13[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + 160]].field_0
                        mem[_50714 + 32] = stor1[_50713]
                        mem[_50714 + 64] = stor2[_50713]
                        mem[_50714 + 96] = stor3[_50713]
                        mem[_50714 + 128] = stor4[_50713]
                        mem[_50714 + 160] = stor5[_50713]
                        mem[_50714 + 192] = stor6[_50713]
                        mem[_50714 + 224] = stor7[_50713].field_0
                        mem[_50714 + 256] = bool(stor7[_50713].field_160)
                        mem[_50714 + 288] = stor8[_50713]
                        if idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                            revert with 0, 50
                        mem[(32 * idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192] = _50714
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if stor13[address(arg5)].field_0 - 1 < arg2:
                        _49294 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_49294] = 4
                        mem[_49294 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                        _49790 = mem[64]
                        mem[mem[64]] = 96
                        _50710 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                        mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                        idx = 0
                        s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192
                        t = mem[64] + 128
                        while idx < _50710:
                            _59384 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_59384 + 32]
                            mem[t + 64] = mem[_59384 + 64]
                            mem[t + 96] = mem[_59384 + 96]
                            mem[t + 128] = mem[_59384 + 128]
                            mem[t + 160] = mem[_59384 + 172 len 20]
                            mem[t + 192] = mem[_59384 + 192]
                            mem[t + 224] = mem[_59384 + 236 len 20]
                            mem[t + 256] = bool(mem[_59384 + 256])
                            mem[t + 288] = mem[_59384 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_49790 + 32] = 0
                        mem[_49790 + 64] = (320 * _50710) + 128
                        _60108 = mem[_49294]
                        mem[_49790 + (320 * _50710) + 128] = mem[_49294]
                        mem[_49790 + (320 * _50710) + 160 len ceil32(_60108)] = mem[_49294 + 32 len ceil32(_60108)]
                        var51001 = ceil32(_60108)
                        if ceil32(_60108) > _60108:
                            mem[_49790 + (320 * _50710) + _60108 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_60108) + _49790 + (320 * _50710) + -mem[64] + 160
                    _50711 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_50711] = 7
                    mem[_50711 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                    _51396 = mem[64]
                    mem[mem[64]] = 96
                    _51771 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                    mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                    idx = 0
                    s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192
                    t = mem[64] + 128
                    while idx < _51771:
                        _59391 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_59391 + 32]
                        mem[t + 64] = mem[_59391 + 64]
                        mem[t + 96] = mem[_59391 + 96]
                        mem[t + 128] = mem[_59391 + 128]
                        mem[t + 160] = mem[_59391 + 172 len 20]
                        mem[t + 192] = mem[_59391 + 192]
                        mem[t + 224] = mem[_59391 + 236 len 20]
                        mem[t + 256] = bool(mem[_59391 + 256])
                        mem[t + 288] = mem[_59391 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_51396 + 32] = stor13[address(arg5)].field_0 + -arg2 - 1
                    mem[_51396 + 64] = (320 * _51771) + 128
                    _60109 = mem[_50711]
                    mem[_51396 + (320 * _51771) + 128] = mem[_50711]
                    mem[_51396 + (320 * _51771) + 160 len ceil32(_60109)] = mem[_50711 + 32 len ceil32(_60109)]
                    var54001 = ceil32(_60109)
                    if ceil32(_60109) > _60109:
                        mem[_51396 + (320 * _51771) + _60109 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_60109) + _51396 + (320 * _51771) + -mem[64] + 160
                if 1 > !(stor13[address(arg5)].field_0 - 1):
                    revert with 0, 17
                if stor13[address(arg5)].field_0 > test266151307():
                    revert with 0, 65
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160] = stor13[address(arg5)].field_0
                mem[64] = (32 * stor11.length) + (64 * stor13[address(arg5)].field_0) + 192
                if not stor13[address(arg5)].field_0:
                    idx = 0
                    while idx < stor13[address(arg5)].field_0:
                        if stor13[address(arg5)].field_0 - 1 < idx:
                            revert with 0, 17
                        if stor13[address(arg5)].field_0 + -idx - 1 >= mem[(32 * stor11.length) + 128]:
                            revert with 0, 50
                        mem[0] = mem[(32 * stor13[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + 160]
                        mem[32] = 12
                        _26087 = sha3(mem[(32 * stor13[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + 160], 12)
                        _26088 = mem[64]
                        mem[64] = mem[64] + 320
                        mem[_26088] = stor12[mem[(32 * stor13[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + 160]].field_0
                        mem[_26088 + 32] = stor1[_26087]
                        mem[_26088 + 64] = stor2[_26087]
                        mem[_26088 + 96] = stor3[_26087]
                        mem[_26088 + 128] = stor4[_26087]
                        mem[_26088 + 160] = stor5[_26087]
                        mem[_26088 + 192] = stor6[_26087]
                        mem[_26088 + 224] = stor7[_26087].field_0
                        mem[_26088 + 256] = bool(stor7[_26087].field_160)
                        mem[_26088 + 288] = stor8[_26087]
                        if idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                            revert with 0, 50
                        mem[(32 * idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192] = _26088
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if stor13[address(arg5)].field_0 - 1 < stor13[address(arg5)].field_0:
                        _24789 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_24789] = 4
                        mem[_24789 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                        _25182 = mem[64]
                        mem[mem[64]] = 96
                        _26084 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                        mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                        idx = 0
                        s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192
                        t = mem[64] + 128
                        while idx < _26084:
                            _37795 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_37795 + 32]
                            mem[t + 64] = mem[_37795 + 64]
                            mem[t + 96] = mem[_37795 + 96]
                            mem[t + 128] = mem[_37795 + 128]
                            mem[t + 160] = mem[_37795 + 172 len 20]
                            mem[t + 192] = mem[_37795 + 192]
                            mem[t + 224] = mem[_37795 + 236 len 20]
                            mem[t + 256] = bool(mem[_37795 + 256])
                            mem[t + 288] = mem[_37795 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_25182 + 32] = 0
                        mem[_25182 + 64] = (320 * _26084) + 128
                        _38256 = mem[_24789]
                        mem[_25182 + (320 * _26084) + 128] = mem[_24789]
                        mem[_25182 + (320 * _26084) + 160 len ceil32(_38256)] = mem[_24789 + 32 len ceil32(_38256)]
                        var48001 = ceil32(_38256)
                        if ceil32(_38256) > _38256:
                            mem[_25182 + (320 * _26084) + _38256 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_38256) + _25182 + (320 * _26084) + -mem[64] + 160
                    _26085 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_26085] = 7
                    mem[_26085 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                    _26858 = mem[64]
                    mem[mem[64]] = 96
                    _27209 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                    mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                    idx = 0
                    s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192
                    t = mem[64] + 128
                    while idx < _27209:
                        _37802 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_37802 + 32]
                        mem[t + 64] = mem[_37802 + 64]
                        mem[t + 96] = mem[_37802 + 96]
                        mem[t + 128] = mem[_37802 + 128]
                        mem[t + 160] = mem[_37802 + 172 len 20]
                        mem[t + 192] = mem[_37802 + 192]
                        mem[t + 224] = mem[_37802 + 236 len 20]
                        mem[t + 256] = bool(mem[_37802 + 256])
                        mem[t + 288] = mem[_37802 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_26858 + 32] = -1
                    mem[_26858 + 64] = (320 * _27209) + 128
                    _38257 = mem[_26085]
                    mem[_26858 + (320 * _27209) + 128] = mem[_26085]
                    mem[_26858 + (320 * _27209) + 160 len ceil32(_38257)] = mem[_26085 + 32 len ceil32(_38257)]
                    var51001 = ceil32(_38257)
                    if ceil32(_38257) > _38257:
                        mem[_26858 + (320 * _27209) + _38257 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_38257) + _26858 + (320 * _27209) + -mem[64] + 160
                mem[64] = (32 * stor11.length) + (64 * stor13[address(arg5)].field_0) + 512
                mem[(32 * stor11.length) + (64 * stor13[address(arg5)].field_0) + 192] = 0
                mem[(32 * stor11.length) + (64 * stor13[address(arg5)].field_0) + 224] = 0
                mem[(32 * stor11.length) + (64 * stor13[address(arg5)].field_0) + 256] = 0
                mem[(32 * stor11.length) + (64 * stor13[address(arg5)].field_0) + 288] = 0
                mem[(32 * stor11.length) + (64 * stor13[address(arg5)].field_0) + 320] = 0
                mem[(32 * stor11.length) + (64 * stor13[address(arg5)].field_0) + 352] = 0
                mem[(32 * stor11.length) + (64 * stor13[address(arg5)].field_0) + 384] = 0
                mem[(32 * stor11.length) + (64 * stor13[address(arg5)].field_0) + 416] = 0
                mem[(32 * stor11.length) + (64 * stor13[address(arg5)].field_0) + 448] = 0
                mem[(32 * stor11.length) + (64 * stor13[address(arg5)].field_0) + 480] = 0
                mem[var38001] = (32 * stor11.length) + (64 * stor13[address(arg5)].field_0) + 192
                s = var38001
                idx = var38002
                while idx - 1:
                    mem[64] = mem[64] + 320
                    mem[(32 * stor11.length) + (64 * stor13[address(arg5)].field_0) + 192] = 0
                    mem[(32 * stor11.length) + (64 * stor13[address(arg5)].field_0) + 224] = 0
                    mem[(32 * stor11.length) + (64 * stor13[address(arg5)].field_0) + 256] = 0
                    mem[(32 * stor11.length) + (64 * stor13[address(arg5)].field_0) + 288] = 0
                    mem[(32 * stor11.length) + (64 * stor13[address(arg5)].field_0) + 320] = 0
                    mem[(32 * stor11.length) + (64 * stor13[address(arg5)].field_0) + 352] = 0
                    mem[(32 * stor11.length) + (64 * stor13[address(arg5)].field_0) + 384] = 0
                    mem[(32 * stor11.length) + (64 * stor13[address(arg5)].field_0) + 416] = 0
                    mem[(32 * stor11.length) + (64 * stor13[address(arg5)].field_0) + 448] = 0
                    mem[(32 * stor11.length) + (64 * stor13[address(arg5)].field_0) + 480] = 0
                    mem[s + 32] = (32 * stor11.length) + (64 * stor13[address(arg5)].field_0) + 192
                    s = s + 32
                    idx = idx - 1
                    continue 
                idx = 0
                while idx < stor13[address(arg5)].field_0:
                    if stor13[address(arg5)].field_0 - 1 < idx:
                        revert with 0, 17
                    if stor13[address(arg5)].field_0 + -idx - 1 >= mem[(32 * stor11.length) + 128]:
                        revert with 0, 50
                    mem[0] = mem[(32 * stor13[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + 160]
                    mem[32] = 12
                    _50721 = sha3(mem[(32 * stor13[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + 160], 12)
                    _50722 = mem[64]
                    mem[64] = mem[64] + 320
                    mem[_50722] = stor12[mem[(32 * stor13[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + 160]].field_0
                    mem[_50722 + 32] = stor1[_50721]
                    mem[_50722 + 64] = stor2[_50721]
                    mem[_50722 + 96] = stor3[_50721]
                    mem[_50722 + 128] = stor4[_50721]
                    mem[_50722 + 160] = stor5[_50721]
                    mem[_50722 + 192] = stor6[_50721]
                    mem[_50722 + 224] = stor7[_50721].field_0
                    mem[_50722 + 256] = bool(stor7[_50721].field_160)
                    mem[_50722 + 288] = stor8[_50721]
                    if idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                        revert with 0, 50
                    mem[(32 * idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192] = _50722
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
                if stor13[address(arg5)].field_0 - 1 < stor13[address(arg5)].field_0:
                    _49295 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_49295] = 4
                    mem[_49295 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                    _49794 = mem[64]
                    mem[mem[64]] = 96
                    _50718 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                    mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                    idx = 0
                    s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192
                    t = mem[64] + 128
                    while idx < _50718:
                        _59398 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_59398 + 32]
                        mem[t + 64] = mem[_59398 + 64]
                        mem[t + 96] = mem[_59398 + 96]
                        mem[t + 128] = mem[_59398 + 128]
                        mem[t + 160] = mem[_59398 + 172 len 20]
                        mem[t + 192] = mem[_59398 + 192]
                        mem[t + 224] = mem[_59398 + 236 len 20]
                        mem[t + 256] = bool(mem[_59398 + 256])
                        mem[t + 288] = mem[_59398 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_49794 + 32] = 0
                    mem[_49794 + 64] = (320 * _50718) + 128
                    _60110 = mem[_49295]
                    mem[_49794 + (320 * _50718) + 128] = mem[_49295]
                    mem[_49794 + (320 * _50718) + 160 len ceil32(_60110)] = mem[_49295 + 32 len ceil32(_60110)]
                    var55001 = ceil32(_60110)
                    if ceil32(_60110) > _60110:
                        mem[_49794 + (320 * _50718) + _60110 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_60110) + _49794 + (320 * _50718) + -mem[64] + 160
                _50719 = mem[64]
                mem[64] = mem[64] + 64
                mem[_50719] = 7
                mem[_50719 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                _51404 = mem[64]
                mem[mem[64]] = 96
                _51773 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                idx = 0
                s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192
                t = mem[64] + 128
                while idx < _51773:
                    _59405 = mem[s]
                    mem[t] = mem[mem[s]]
                    mem[t + 32] = mem[_59405 + 32]
                    mem[t + 64] = mem[_59405 + 64]
                    mem[t + 96] = mem[_59405 + 96]
                    mem[t + 128] = mem[_59405 + 128]
                    mem[t + 160] = mem[_59405 + 172 len 20]
                    mem[t + 192] = mem[_59405 + 192]
                    mem[t + 224] = mem[_59405 + 236 len 20]
                    mem[t + 256] = bool(mem[_59405 + 256])
                    mem[t + 288] = mem[_59405 + 288]
                    idx = idx + 1
                    s = s + 32
                    t = t + 320
                    continue 
                mem[_51404 + 32] = -1
                mem[_51404 + 64] = (320 * _51773) + 128
                _60111 = mem[_50719]
                mem[_51404 + (320 * _51773) + 128] = mem[_50719]
                mem[_51404 + (320 * _51773) + 160 len ceil32(_60111)] = mem[_50719 + 32 len ceil32(_60111)]
                var58001 = ceil32(_60111)
                if ceil32(_60111) > _60111:
                    mem[_51404 + (320 * _51773) + _60111 + 160] = 0
                return memory
                  from mem[64]
                   len ceil32(_60111) + _51404 + (320 * _51773) + -mem[64] + 160
            if stor13[address(arg5)].field_0 < stor13[address(arg5)].field_0 - 1:
                revert with 0, 17
            if arg2 > 1:
                if stor13[address(arg5)].field_0 < stor13[address(arg5)].field_0 - 1:
                    revert with 0, 17
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160] = 1
                mem[64] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 544
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 224] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 256] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 288] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 320] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 352] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 384] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 416] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 448] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 480] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 512] = 0
                mem[var41001] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 224
                s = var41001
                idx = var41002
                while idx - 1:
                    mem[64] = mem[64] + 320
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 224] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 256] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 288] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 320] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 352] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 384] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 416] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 448] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 480] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 512] = 0
                    mem[s + 32] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 224
                    s = s + 32
                    idx = idx - 1
                    continue 
                idx = 0
                while idx < 1:
                    if stor13[address(arg5)].field_0 - 1 > !idx:
                        revert with 0, 17
                    if stor13[address(arg5)].field_0 + idx - 1 >= mem[(32 * stor11.length) + 128]:
                        revert with 0, 50
                    mem[0] = mem[(32 * stor13[address(arg5)].field_0 + idx - 1) + (32 * stor11.length) + 160]
                    mem[32] = 12
                    _50733 = sha3(mem[(32 * stor13[address(arg5)].field_0 + idx - 1) + (32 * stor11.length) + 160], 12)
                    _50734 = mem[64]
                    mem[64] = mem[64] + 320
                    mem[_50734] = stor12[mem[(32 * stor13[address(arg5)].field_0 + idx - 1) + (32 * stor11.length) + 160]].field_0
                    mem[_50734 + 32] = stor1[_50733]
                    mem[_50734 + 64] = stor2[_50733]
                    mem[_50734 + 96] = stor3[_50733]
                    mem[_50734 + 128] = stor4[_50733]
                    mem[_50734 + 160] = stor5[_50733]
                    mem[_50734 + 192] = stor6[_50733]
                    mem[_50734 + 224] = stor7[_50733].field_0
                    mem[_50734 + 256] = bool(stor7[_50733].field_160)
                    mem[_50734 + 288] = stor8[_50733]
                    if idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                        revert with 0, 50
                    mem[(32 * idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192] = _50734
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
                if stor13[address(arg5)].field_0 - 1 > !1:
                    revert with 0, 17
                if stor13[address(arg5)].field_0 - 1 > !1:
                    revert with 0, 17
                if stor13[address(arg5)].field_0 < mem[(32 * stor11.length) + 128]:
                    _51776 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_51776] = 7
                    mem[_51776 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                    _52739 = mem[64]
                    mem[mem[64]] = 96
                    _53243 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                    mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                    idx = 0
                    s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192
                    t = mem[64] + 128
                    while idx < _53243:
                        _59426 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_59426 + 32]
                        mem[t + 64] = mem[_59426 + 64]
                        mem[t + 96] = mem[_59426 + 96]
                        mem[t + 128] = mem[_59426 + 128]
                        mem[t + 160] = mem[_59426 + 172 len 20]
                        mem[t + 192] = mem[_59426 + 192]
                        mem[t + 224] = mem[_59426 + 236 len 20]
                        mem[t + 256] = bool(mem[_59426 + 256])
                        mem[t + 288] = mem[_59426 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_52739 + 32] = stor13[address(arg5)].field_0
                    mem[_52739 + 64] = (320 * _53243) + 128
                    _60114 = mem[_51776]
                    mem[_52739 + (320 * _53243) + 128] = mem[_51776]
                    mem[_52739 + (320 * _53243) + 160 len ceil32(_60114)] = mem[_51776 + 32 len ceil32(_60114)]
                    var64001 = ceil32(_60114)
                    if ceil32(_60114) > _60114:
                        mem[_52739 + (320 * _53243) + _60114 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_60114) + _52739 + (320 * _53243) + -mem[64] + 160
                _51777 = mem[64]
                mem[64] = mem[64] + 64
                mem[_51777] = 4
                mem[_51777 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                _52740 = mem[64]
                mem[mem[64]] = 96
                _53244 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                idx = 0
                s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192
                t = mem[64] + 128
                while idx < _53244:
                    _59433 = mem[s]
                    mem[t] = mem[mem[s]]
                    mem[t + 32] = mem[_59433 + 32]
                    mem[t + 64] = mem[_59433 + 64]
                    mem[t + 96] = mem[_59433 + 96]
                    mem[t + 128] = mem[_59433 + 128]
                    mem[t + 160] = mem[_59433 + 172 len 20]
                    mem[t + 192] = mem[_59433 + 192]
                    mem[t + 224] = mem[_59433 + 236 len 20]
                    mem[t + 256] = bool(mem[_59433 + 256])
                    mem[t + 288] = mem[_59433 + 288]
                    idx = idx + 1
                    s = s + 32
                    t = t + 320
                    continue 
                mem[_52740 + 32] = stor13[address(arg5)].field_0
                mem[_52740 + 64] = (320 * _53244) + 128
                _60115 = mem[_51777]
                mem[_52740 + (320 * _53244) + 128] = mem[_51777]
                mem[_52740 + (320 * _53244) + 160 len ceil32(_60115)] = mem[_51777 + 32 len ceil32(_60115)]
                var64001 = ceil32(_60115)
                if ceil32(_60115) > _60115:
                    mem[_52740 + (320 * _53244) + _60115 + 160] = 0
                return memory
                  from mem[64]
                   len ceil32(_60115) + _52740 + (320 * _53244) + -mem[64] + 160
            if arg2 > test266151307():
                revert with 0, 65
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160] = arg2
            mem[64] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 192
            if not arg2:
                idx = 0
                while idx < arg2:
                    if stor13[address(arg5)].field_0 - 1 > !idx:
                        revert with 0, 17
                    if stor13[address(arg5)].field_0 + idx - 1 >= mem[(32 * stor11.length) + 128]:
                        revert with 0, 50
                    mem[0] = mem[(32 * stor13[address(arg5)].field_0 + idx - 1) + (32 * stor11.length) + 160]
                    mem[32] = 12
                    _26091 = sha3(mem[(32 * stor13[address(arg5)].field_0 + idx - 1) + (32 * stor11.length) + 160], 12)
                    _26092 = mem[64]
                    mem[64] = mem[64] + 320
                    mem[_26092] = stor12[mem[(32 * stor13[address(arg5)].field_0 + idx - 1) + (32 * stor11.length) + 160]].field_0
                    mem[_26092 + 32] = stor1[_26091]
                    mem[_26092 + 64] = stor2[_26091]
                    mem[_26092 + 96] = stor3[_26091]
                    mem[_26092 + 128] = stor4[_26091]
                    mem[_26092 + 160] = stor5[_26091]
                    mem[_26092 + 192] = stor6[_26091]
                    mem[_26092 + 224] = stor7[_26091].field_0
                    mem[_26092 + 256] = bool(stor7[_26091].field_160)
                    mem[_26092 + 288] = stor8[_26091]
                    if idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                        revert with 0, 50
                    mem[(32 * idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192] = _26092
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
                if stor13[address(arg5)].field_0 - 1 > !arg2:
                    revert with 0, 17
                if stor13[address(arg5)].field_0 - 1 > !arg2:
                    revert with 0, 17
                if stor13[address(arg5)].field_0 + arg2 - 1 < mem[(32 * stor11.length) + 128]:
                    _27210 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_27210] = 7
                    mem[_27210 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                    _28724 = mem[64]
                    mem[mem[64]] = 96
                    _29116 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                    mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                    idx = 0
                    s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192
                    t = mem[64] + 128
                    while idx < _29116:
                        _37809 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_37809 + 32]
                        mem[t + 64] = mem[_37809 + 64]
                        mem[t + 96] = mem[_37809 + 96]
                        mem[t + 128] = mem[_37809 + 128]
                        mem[t + 160] = mem[_37809 + 172 len 20]
                        mem[t + 192] = mem[_37809 + 192]
                        mem[t + 224] = mem[_37809 + 236 len 20]
                        mem[t + 256] = bool(mem[_37809 + 256])
                        mem[t + 288] = mem[_37809 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_28724 + 32] = stor13[address(arg5)].field_0 + arg2 - 1
                    mem[_28724 + 64] = (320 * _29116) + 128
                    _38258 = mem[_27210]
                    mem[_28724 + (320 * _29116) + 128] = mem[_27210]
                    mem[_28724 + (320 * _29116) + 160 len ceil32(_38258)] = mem[_27210 + 32 len ceil32(_38258)]
                    var53001 = ceil32(_38258)
                    if ceil32(_38258) > _38258:
                        mem[_28724 + (320 * _29116) + _38258 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_38258) + _28724 + (320 * _29116) + -mem[64] + 160
                _27211 = mem[64]
                mem[64] = mem[64] + 64
                mem[_27211] = 4
                mem[_27211 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                _28725 = mem[64]
                mem[mem[64]] = 96
                _29117 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                idx = 0
                s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192
                t = mem[64] + 128
                while idx < _29117:
                    _37816 = mem[s]
                    mem[t] = mem[mem[s]]
                    mem[t + 32] = mem[_37816 + 32]
                    mem[t + 64] = mem[_37816 + 64]
                    mem[t + 96] = mem[_37816 + 96]
                    mem[t + 128] = mem[_37816 + 128]
                    mem[t + 160] = mem[_37816 + 172 len 20]
                    mem[t + 192] = mem[_37816 + 192]
                    mem[t + 224] = mem[_37816 + 236 len 20]
                    mem[t + 256] = bool(mem[_37816 + 256])
                    mem[t + 288] = mem[_37816 + 288]
                    idx = idx + 1
                    s = s + 32
                    t = t + 320
                    continue 
                mem[_28725 + 32] = stor13[address(arg5)].field_0 + arg2 - 1
                mem[_28725 + 64] = (320 * _29117) + 128
                _38259 = mem[_27211]
                mem[_28725 + (320 * _29117) + 128] = mem[_27211]
                mem[_28725 + (320 * _29117) + 160 len ceil32(_38259)] = mem[_27211 + 32 len ceil32(_38259)]
                var53001 = ceil32(_38259)
                if ceil32(_38259) > _38259:
                    mem[_28725 + (320 * _29117) + _38259 + 160] = 0
                return memory
                  from mem[64]
                   len ceil32(_38259) + _28725 + (320 * _29117) + -mem[64] + 160
            mem[64] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 512
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 192] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 224] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 256] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 288] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 320] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 352] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 384] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 416] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 448] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 480] = 0
            mem[var37001] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 192
            s = var37001
            idx = var37002
            while idx - 1:
                mem[64] = mem[64] + 320
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 192] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 224] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 256] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 288] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 320] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 352] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 384] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 416] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 448] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 480] = 0
                mem[s + 32] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 192
                s = s + 32
                idx = idx - 1
                continue 
            idx = 0
            while idx < arg2:
                if stor13[address(arg5)].field_0 - 1 > !idx:
                    revert with 0, 17
                if stor13[address(arg5)].field_0 + idx - 1 >= mem[(32 * stor11.length) + 128]:
                    revert with 0, 50
                mem[0] = mem[(32 * stor13[address(arg5)].field_0 + idx - 1) + (32 * stor11.length) + 160]
                mem[32] = 12
                _50727 = sha3(mem[(32 * stor13[address(arg5)].field_0 + idx - 1) + (32 * stor11.length) + 160], 12)
                _50728 = mem[64]
                mem[64] = mem[64] + 320
                mem[_50728] = stor12[mem[(32 * stor13[address(arg5)].field_0 + idx - 1) + (32 * stor11.length) + 160]].field_0
                mem[_50728 + 32] = stor1[_50727]
                mem[_50728 + 64] = stor2[_50727]
                mem[_50728 + 96] = stor3[_50727]
                mem[_50728 + 128] = stor4[_50727]
                mem[_50728 + 160] = stor5[_50727]
                mem[_50728 + 192] = stor6[_50727]
                mem[_50728 + 224] = stor7[_50727].field_0
                mem[_50728 + 256] = bool(stor7[_50727].field_160)
                mem[_50728 + 288] = stor8[_50727]
                if idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                    revert with 0, 50
                mem[(32 * idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192] = _50728
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
            if stor13[address(arg5)].field_0 - 1 > !arg2:
                revert with 0, 17
            if stor13[address(arg5)].field_0 - 1 > !arg2:
                revert with 0, 17
            if stor13[address(arg5)].field_0 + arg2 - 1 < mem[(32 * stor11.length) + 128]:
                _51774 = mem[64]
                mem[64] = mem[64] + 64
                mem[_51774] = 7
                mem[_51774 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                _52737 = mem[64]
                mem[mem[64]] = 96
                _53241 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                idx = 0
                s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192
                t = mem[64] + 128
                while idx < _53241:
                    _59412 = mem[s]
                    mem[t] = mem[mem[s]]
                    mem[t + 32] = mem[_59412 + 32]
                    mem[t + 64] = mem[_59412 + 64]
                    mem[t + 96] = mem[_59412 + 96]
                    mem[t + 128] = mem[_59412 + 128]
                    mem[t + 160] = mem[_59412 + 172 len 20]
                    mem[t + 192] = mem[_59412 + 192]
                    mem[t + 224] = mem[_59412 + 236 len 20]
                    mem[t + 256] = bool(mem[_59412 + 256])
                    mem[t + 288] = mem[_59412 + 288]
                    idx = idx + 1
                    s = s + 32
                    t = t + 320
                    continue 
                mem[_52737 + 32] = stor13[address(arg5)].field_0 + arg2 - 1
                mem[_52737 + 64] = (320 * _53241) + 128
                _60112 = mem[_51774]
                mem[_52737 + (320 * _53241) + 128] = mem[_51774]
                mem[_52737 + (320 * _53241) + 160 len ceil32(_60112)] = mem[_51774 + 32 len ceil32(_60112)]
                var60001 = ceil32(_60112)
                if ceil32(_60112) > _60112:
                    mem[_52737 + (320 * _53241) + _60112 + 160] = 0
                return memory
                  from mem[64]
                   len ceil32(_60112) + _52737 + (320 * _53241) + -mem[64] + 160
            _51775 = mem[64]
            mem[64] = mem[64] + 64
            mem[_51775] = 4
            mem[_51775 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
            _52738 = mem[64]
            mem[mem[64]] = 96
            _53242 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
            mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
            idx = 0
            s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192
            t = mem[64] + 128
            while idx < _53242:
                _59419 = mem[s]
                mem[t] = mem[mem[s]]
                mem[t + 32] = mem[_59419 + 32]
                mem[t + 64] = mem[_59419 + 64]
                mem[t + 96] = mem[_59419 + 96]
                mem[t + 128] = mem[_59419 + 128]
                mem[t + 160] = mem[_59419 + 172 len 20]
                mem[t + 192] = mem[_59419 + 192]
                mem[t + 224] = mem[_59419 + 236 len 20]
                mem[t + 256] = bool(mem[_59419 + 256])
                mem[t + 288] = mem[_59419 + 288]
                idx = idx + 1
                s = s + 32
                t = t + 320
                continue 
            mem[_52738 + 32] = stor13[address(arg5)].field_0 + arg2 - 1
            mem[_52738 + 64] = (320 * _53242) + 128
            _60113 = mem[_51775]
            mem[_52738 + (320 * _53242) + 128] = mem[_51775]
            mem[_52738 + (320 * _53242) + 160 len ceil32(_60113)] = mem[_51775 + 32 len ceil32(_60113)]
            var60001 = ceil32(_60113)
            if ceil32(_60113) > _60113:
                mem[_52738 + (320 * _53242) + _60113 + 160] = 0
            return memory
              from mem[64]
               len ceil32(_60113) + _52738 + (320 * _53242) + -mem[64] + 160
        mem[0] = address(arg5)
        mem[32] = 15
        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160] = stor15[address(arg5)].field_0
        if not stor15[address(arg5)].field_0:
            if not stor15[address(arg5)].field_0:
                mem[64] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 288
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224] = 4
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 256] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 288] = 96
                _14350 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 384] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                idx = 0
                s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                t = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 416
                while idx < mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]:
                    _24697 = mem[s]
                    mem[t] = mem[mem[s]]
                    mem[t + 32] = mem[_24697 + 32]
                    mem[t + 64] = mem[_24697 + 64]
                    mem[t + 96] = mem[_24697 + 96]
                    mem[t + 128] = mem[_24697 + 128]
                    mem[t + 160] = mem[_24697 + 172 len 20]
                    mem[t + 192] = mem[_24697 + 192]
                    mem[t + 224] = mem[_24697 + 236 len 20]
                    mem[t + 256] = bool(mem[_24697 + 256])
                    mem[t + 288] = mem[_24697 + 288]
                    idx = idx + 1
                    s = s + 32
                    t = t + 320
                    continue 
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 320] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 352] = (320 * _14350) + 128
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (320 * _14350) + 416] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224]
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (320 * _14350) + 448 len ceil32(mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224])] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 256 len ceil32(mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224])]
                var34001 = ceil32(mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224])
                if ceil32(mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224]) > mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224]:
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (320 * _14350) + mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224] + 448] = 0
                return memory
                  from mem[64]
                   len ceil32(mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224]) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (320 * _14350) + -mem[64] + 448
            if arg1 < stor15[address(arg5)].field_0:
                if arg3:
                    if arg2 <= arg1:
                        if arg2 > test266151307():
                            revert with 0, 65
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192] = arg2
                        mem[64] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224
                        if not arg2:
                            idx = 0
                            while idx < arg2:
                                if arg1 < idx:
                                    revert with 0, 17
                                if arg1 - idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                                    revert with 0, 50
                                mem[0] = mem[(32 * arg1 - idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]
                                mem[32] = 12
                                _26102 = sha3(mem[(32 * arg1 - idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192], 12)
                                _26103 = mem[64]
                                mem[64] = mem[64] + 320
                                mem[_26103] = stor12[mem[(32 * arg1 - idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]].field_0
                                mem[_26103 + 32] = stor1[_26102]
                                mem[_26103 + 64] = stor2[_26102]
                                mem[_26103 + 96] = stor3[_26102]
                                mem[_26103 + 128] = stor4[_26102]
                                mem[_26103 + 160] = stor5[_26102]
                                mem[_26103 + 192] = stor6[_26102]
                                mem[_26103 + 224] = stor7[_26102].field_0
                                mem[_26103 + 256] = bool(stor7[_26102].field_160)
                                mem[_26103 + 288] = stor8[_26102]
                                if idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]:
                                    revert with 0, 50
                                mem[(32 * idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224] = _26103
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                continue 
                            if arg1 < arg2:
                                _24791 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_24791] = 4
                                mem[_24791 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                                _25187 = mem[64]
                                mem[mem[64]] = 96
                                _26099 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                                mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                                idx = 0
                                s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                                t = mem[64] + 128
                                while idx < _26099:
                                    _37838 = mem[s]
                                    mem[t] = mem[mem[s]]
                                    mem[t + 32] = mem[_37838 + 32]
                                    mem[t + 64] = mem[_37838 + 64]
                                    mem[t + 96] = mem[_37838 + 96]
                                    mem[t + 128] = mem[_37838 + 128]
                                    mem[t + 160] = mem[_37838 + 172 len 20]
                                    mem[t + 192] = mem[_37838 + 192]
                                    mem[t + 224] = mem[_37838 + 236 len 20]
                                    mem[t + 256] = bool(mem[_37838 + 256])
                                    mem[t + 288] = mem[_37838 + 288]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 320
                                    continue 
                                mem[_25187 + 32] = 0
                                mem[_25187 + 64] = (320 * _26099) + 128
                                _38262 = mem[_24791]
                                mem[_25187 + (320 * _26099) + 128] = mem[_24791]
                                mem[_25187 + (320 * _26099) + 160 len ceil32(_38262)] = mem[_24791 + 32 len ceil32(_38262)]
                                var42001 = ceil32(_38262)
                                if ceil32(_38262) > _38262:
                                    mem[_25187 + (320 * _26099) + _38262 + 160] = 0
                                return memory
                                  from mem[64]
                                   len ceil32(_38262) + _25187 + (320 * _26099) + -mem[64] + 160
                            _26100 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_26100] = 7
                            mem[_26100 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                            _26869 = mem[64]
                            mem[mem[64]] = 96
                            _27216 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                            mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                            idx = 0
                            s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                            t = mem[64] + 128
                            while idx < _27216:
                                _37845 = mem[s]
                                mem[t] = mem[mem[s]]
                                mem[t + 32] = mem[_37845 + 32]
                                mem[t + 64] = mem[_37845 + 64]
                                mem[t + 96] = mem[_37845 + 96]
                                mem[t + 128] = mem[_37845 + 128]
                                mem[t + 160] = mem[_37845 + 172 len 20]
                                mem[t + 192] = mem[_37845 + 192]
                                mem[t + 224] = mem[_37845 + 236 len 20]
                                mem[t + 256] = bool(mem[_37845 + 256])
                                mem[t + 288] = mem[_37845 + 288]
                                idx = idx + 1
                                s = s + 32
                                t = t + 320
                                continue 
                            mem[_26869 + 32] = arg1 - arg2
                            mem[_26869 + 64] = (320 * _27216) + 128
                            _38263 = mem[_26100]
                            mem[_26869 + (320 * _27216) + 128] = mem[_26100]
                            mem[_26869 + (320 * _27216) + 160 len ceil32(_38263)] = mem[_26100 + 32 len ceil32(_38263)]
                            var45001 = ceil32(_38263)
                            if ceil32(_38263) > _38263:
                                mem[_26869 + (320 * _27216) + _38263 + 160] = 0
                            return memory
                              from mem[64]
                               len ceil32(_38263) + _26869 + (320 * _27216) + -mem[64] + 160
                        mem[64] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 544
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 256] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 288] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 320] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 352] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 384] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 416] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 448] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 480] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 512] = 0
                        mem[var32001] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224
                        s = var32001
                        idx = var32002
                        while idx - 1:
                            mem[64] = mem[64] + 320
                            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224] = 0
                            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 256] = 0
                            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 288] = 0
                            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 320] = 0
                            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 352] = 0
                            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 384] = 0
                            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 416] = 0
                            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 448] = 0
                            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 480] = 0
                            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 512] = 0
                            mem[s + 32] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224
                            s = s + 32
                            idx = idx - 1
                            continue 
                        idx = 0
                        while idx < arg2:
                            if arg1 < idx:
                                revert with 0, 17
                            if arg1 - idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                                revert with 0, 50
                            mem[0] = mem[(32 * arg1 - idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]
                            mem[32] = 12
                            _50741 = sha3(mem[(32 * arg1 - idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192], 12)
                            _50742 = mem[64]
                            mem[64] = mem[64] + 320
                            mem[_50742] = stor12[mem[(32 * arg1 - idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]].field_0
                            mem[_50742 + 32] = stor1[_50741]
                            mem[_50742 + 64] = stor2[_50741]
                            mem[_50742 + 96] = stor3[_50741]
                            mem[_50742 + 128] = stor4[_50741]
                            mem[_50742 + 160] = stor5[_50741]
                            mem[_50742 + 192] = stor6[_50741]
                            mem[_50742 + 224] = stor7[_50741].field_0
                            mem[_50742 + 256] = bool(stor7[_50741].field_160)
                            mem[_50742 + 288] = stor8[_50741]
                            if idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]:
                                revert with 0, 50
                            mem[(32 * idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224] = _50742
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            continue 
                        if arg1 < arg2:
                            _49296 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_49296] = 4
                            mem[_49296 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                            _49804 = mem[64]
                            mem[mem[64]] = 96
                            _50738 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                            mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                            idx = 0
                            s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                            t = mem[64] + 128
                            while idx < _50738:
                                _59440 = mem[s]
                                mem[t] = mem[mem[s]]
                                mem[t + 32] = mem[_59440 + 32]
                                mem[t + 64] = mem[_59440 + 64]
                                mem[t + 96] = mem[_59440 + 96]
                                mem[t + 128] = mem[_59440 + 128]
                                mem[t + 160] = mem[_59440 + 172 len 20]
                                mem[t + 192] = mem[_59440 + 192]
                                mem[t + 224] = mem[_59440 + 236 len 20]
                                mem[t + 256] = bool(mem[_59440 + 256])
                                mem[t + 288] = mem[_59440 + 288]
                                idx = idx + 1
                                s = s + 32
                                t = t + 320
                                continue 
                            mem[_49804 + 32] = 0
                            mem[_49804 + 64] = (320 * _50738) + 128
                            _60116 = mem[_49296]
                            mem[_49804 + (320 * _50738) + 128] = mem[_49296]
                            mem[_49804 + (320 * _50738) + 160 len ceil32(_60116)] = mem[_49296 + 32 len ceil32(_60116)]
                            var49001 = ceil32(_60116)
                            if ceil32(_60116) > _60116:
                                mem[_49804 + (320 * _50738) + _60116 + 160] = 0
                            return memory
                              from mem[64]
                               len ceil32(_60116) + _49804 + (320 * _50738) + -mem[64] + 160
                        _50739 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_50739] = 7
                        mem[_50739 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                        _51412 = mem[64]
                        mem[mem[64]] = 96
                        _51779 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                        mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                        idx = 0
                        s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                        t = mem[64] + 128
                        while idx < _51779:
                            _59447 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_59447 + 32]
                            mem[t + 64] = mem[_59447 + 64]
                            mem[t + 96] = mem[_59447 + 96]
                            mem[t + 128] = mem[_59447 + 128]
                            mem[t + 160] = mem[_59447 + 172 len 20]
                            mem[t + 192] = mem[_59447 + 192]
                            mem[t + 224] = mem[_59447 + 236 len 20]
                            mem[t + 256] = bool(mem[_59447 + 256])
                            mem[t + 288] = mem[_59447 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_51412 + 32] = arg1 - arg2
                        mem[_51412 + 64] = (320 * _51779) + 128
                        _60117 = mem[_50739]
                        mem[_51412 + (320 * _51779) + 128] = mem[_50739]
                        mem[_51412 + (320 * _51779) + 160 len ceil32(_60117)] = mem[_50739 + 32 len ceil32(_60117)]
                        var52001 = ceil32(_60117)
                        if ceil32(_60117) > _60117:
                            mem[_51412 + (320 * _51779) + _60117 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_60117) + _51412 + (320 * _51779) + -mem[64] + 160
                    if 1 > !arg1:
                        revert with 0, 17
                    if arg1 + 1 > test266151307():
                        revert with 0, 65
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192] = arg1 + 1
                    mem[64] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 224
                    if not arg1 + 1:
                        idx = 0
                        while idx < arg1 + 1:
                            if arg1 < idx:
                                revert with 0, 17
                            if arg1 - idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                                revert with 0, 50
                            mem[0] = mem[(32 * arg1 - idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]
                            mem[32] = 12
                            _26108 = sha3(mem[(32 * arg1 - idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192], 12)
                            _26109 = mem[64]
                            mem[64] = mem[64] + 320
                            mem[_26109] = stor12[mem[(32 * arg1 - idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]].field_0
                            mem[_26109 + 32] = stor1[_26108]
                            mem[_26109 + 64] = stor2[_26108]
                            mem[_26109 + 96] = stor3[_26108]
                            mem[_26109 + 128] = stor4[_26108]
                            mem[_26109 + 160] = stor5[_26108]
                            mem[_26109 + 192] = stor6[_26108]
                            mem[_26109 + 224] = stor7[_26108].field_0
                            mem[_26109 + 256] = bool(stor7[_26108].field_160)
                            mem[_26109 + 288] = stor8[_26108]
                            if idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]:
                                revert with 0, 50
                            mem[(32 * idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224] = _26109
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            continue 
                        if arg1 < arg1 + 1:
                            _24792 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_24792] = 4
                            mem[_24792 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                            _25189 = mem[64]
                            mem[mem[64]] = 96
                            _26105 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                            mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                            idx = 0
                            s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                            t = mem[64] + 128
                            while idx < _26105:
                                _37852 = mem[s]
                                mem[t] = mem[mem[s]]
                                mem[t + 32] = mem[_37852 + 32]
                                mem[t + 64] = mem[_37852 + 64]
                                mem[t + 96] = mem[_37852 + 96]
                                mem[t + 128] = mem[_37852 + 128]
                                mem[t + 160] = mem[_37852 + 172 len 20]
                                mem[t + 192] = mem[_37852 + 192]
                                mem[t + 224] = mem[_37852 + 236 len 20]
                                mem[t + 256] = bool(mem[_37852 + 256])
                                mem[t + 288] = mem[_37852 + 288]
                                idx = idx + 1
                                s = s + 32
                                t = t + 320
                                continue 
                            mem[_25189 + 32] = 0
                            mem[_25189 + 64] = (320 * _26105) + 128
                            _38264 = mem[_24792]
                            mem[_25189 + (320 * _26105) + 128] = mem[_24792]
                            mem[_25189 + (320 * _26105) + 160 len ceil32(_38264)] = mem[_24792 + 32 len ceil32(_38264)]
                            var46001 = ceil32(_38264)
                            if ceil32(_38264) > _38264:
                                mem[_25189 + (320 * _26105) + _38264 + 160] = 0
                            return memory
                              from mem[64]
                               len ceil32(_38264) + _25189 + (320 * _26105) + -mem[64] + 160
                        _26106 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_26106] = 7
                        mem[_26106 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                        _26878 = mem[64]
                        mem[mem[64]] = 96
                        _27218 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                        mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                        idx = 0
                        s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                        t = mem[64] + 128
                        while idx < _27218:
                            _37859 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_37859 + 32]
                            mem[t + 64] = mem[_37859 + 64]
                            mem[t + 96] = mem[_37859 + 96]
                            mem[t + 128] = mem[_37859 + 128]
                            mem[t + 160] = mem[_37859 + 172 len 20]
                            mem[t + 192] = mem[_37859 + 192]
                            mem[t + 224] = mem[_37859 + 236 len 20]
                            mem[t + 256] = bool(mem[_37859 + 256])
                            mem[t + 288] = mem[_37859 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_26878 + 32] = -1
                        mem[_26878 + 64] = (320 * _27218) + 128
                        _38265 = mem[_26106]
                        mem[_26878 + (320 * _27218) + 128] = mem[_26106]
                        mem[_26878 + (320 * _27218) + 160 len ceil32(_38265)] = mem[_26106 + 32 len ceil32(_38265)]
                        var49001 = ceil32(_38265)
                        if ceil32(_38265) > _38265:
                            mem[_26878 + (320 * _27218) + _38265 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_38265) + _26878 + (320 * _27218) + -mem[64] + 160
                    mem[64] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 544
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 224] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 256] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 288] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 320] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 352] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 384] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 416] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 448] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 480] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 512] = 0
                    mem[var36001] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 224
                    s = var36001
                    idx = var36002
                    while idx - 1:
                        mem[64] = mem[64] + 320
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 224] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 256] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 288] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 320] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 352] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 384] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 416] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 448] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 480] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 512] = 0
                        mem[s + 32] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 224
                        s = s + 32
                        idx = idx - 1
                        continue 
                    idx = 0
                    while idx < arg1 + 1:
                        if arg1 < idx:
                            revert with 0, 17
                        if arg1 - idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                            revert with 0, 50
                        mem[0] = mem[(32 * arg1 - idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]
                        mem[32] = 12
                        _50749 = sha3(mem[(32 * arg1 - idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192], 12)
                        _50750 = mem[64]
                        mem[64] = mem[64] + 320
                        mem[_50750] = stor12[mem[(32 * arg1 - idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]].field_0
                        mem[_50750 + 32] = stor1[_50749]
                        mem[_50750 + 64] = stor2[_50749]
                        mem[_50750 + 96] = stor3[_50749]
                        mem[_50750 + 128] = stor4[_50749]
                        mem[_50750 + 160] = stor5[_50749]
                        mem[_50750 + 192] = stor6[_50749]
                        mem[_50750 + 224] = stor7[_50749].field_0
                        mem[_50750 + 256] = bool(stor7[_50749].field_160)
                        mem[_50750 + 288] = stor8[_50749]
                        if idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]:
                            revert with 0, 50
                        mem[(32 * idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224] = _50750
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if arg1 < arg1 + 1:
                        _49297 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_49297] = 4
                        mem[_49297 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                        _49808 = mem[64]
                        mem[mem[64]] = 96
                        _50746 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                        mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                        idx = 0
                        s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                        t = mem[64] + 128
                        while idx < _50746:
                            _59454 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_59454 + 32]
                            mem[t + 64] = mem[_59454 + 64]
                            mem[t + 96] = mem[_59454 + 96]
                            mem[t + 128] = mem[_59454 + 128]
                            mem[t + 160] = mem[_59454 + 172 len 20]
                            mem[t + 192] = mem[_59454 + 192]
                            mem[t + 224] = mem[_59454 + 236 len 20]
                            mem[t + 256] = bool(mem[_59454 + 256])
                            mem[t + 288] = mem[_59454 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_49808 + 32] = 0
                        mem[_49808 + 64] = (320 * _50746) + 128
                        _60118 = mem[_49297]
                        mem[_49808 + (320 * _50746) + 128] = mem[_49297]
                        mem[_49808 + (320 * _50746) + 160 len ceil32(_60118)] = mem[_49297 + 32 len ceil32(_60118)]
                        var53001 = ceil32(_60118)
                        if ceil32(_60118) > _60118:
                            mem[_49808 + (320 * _50746) + _60118 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_60118) + _49808 + (320 * _50746) + -mem[64] + 160
                    _50747 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_50747] = 7
                    mem[_50747 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                    _51420 = mem[64]
                    mem[mem[64]] = 96
                    _51781 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                    mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                    idx = 0
                    s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                    t = mem[64] + 128
                    while idx < _51781:
                        _59461 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_59461 + 32]
                        mem[t + 64] = mem[_59461 + 64]
                        mem[t + 96] = mem[_59461 + 96]
                        mem[t + 128] = mem[_59461 + 128]
                        mem[t + 160] = mem[_59461 + 172 len 20]
                        mem[t + 192] = mem[_59461 + 192]
                        mem[t + 224] = mem[_59461 + 236 len 20]
                        mem[t + 256] = bool(mem[_59461 + 256])
                        mem[t + 288] = mem[_59461 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_51420 + 32] = -1
                    mem[_51420 + 64] = (320 * _51781) + 128
                    _60119 = mem[_50747]
                    mem[_51420 + (320 * _51781) + 128] = mem[_50747]
                    mem[_51420 + (320 * _51781) + 160 len ceil32(_60119)] = mem[_50747 + 32 len ceil32(_60119)]
                    var56001 = ceil32(_60119)
                    if ceil32(_60119) > _60119:
                        mem[_51420 + (320 * _51781) + _60119 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_60119) + _51420 + (320 * _51781) + -mem[64] + 160
                if stor15[address(arg5)].field_0 < arg1:
                    revert with 0, 17
                if arg2 <= stor15[address(arg5)].field_0 - arg1:
                    if arg2 > test266151307():
                        revert with 0, 65
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192] = arg2
                    mem[64] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224
                    if not arg2:
                        idx = 0
                        while idx < arg2:
                            if arg1 > !idx:
                                revert with 0, 17
                            if arg1 + idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                                revert with 0, 50
                            mem[0] = mem[(32 * arg1 + idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]
                            mem[32] = 12
                            _26112 = sha3(mem[(32 * arg1 + idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192], 12)
                            _26113 = mem[64]
                            mem[64] = mem[64] + 320
                            mem[_26113] = stor12[mem[(32 * arg1 + idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]].field_0
                            mem[_26113 + 32] = stor1[_26112]
                            mem[_26113 + 64] = stor2[_26112]
                            mem[_26113 + 96] = stor3[_26112]
                            mem[_26113 + 128] = stor4[_26112]
                            mem[_26113 + 160] = stor5[_26112]
                            mem[_26113 + 192] = stor6[_26112]
                            mem[_26113 + 224] = stor7[_26112].field_0
                            mem[_26113 + 256] = bool(stor7[_26112].field_160)
                            mem[_26113 + 288] = stor8[_26112]
                            if idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]:
                                revert with 0, 50
                            mem[(32 * idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224] = _26113
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            continue 
                        if arg1 > !arg2:
                            revert with 0, 17
                        if arg1 > !arg2:
                            revert with 0, 17
                        if arg1 + arg2 < mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                            _27219 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_27219] = 7
                            mem[_27219 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                            _28764 = mem[64]
                            mem[mem[64]] = 96
                            _29124 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                            mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                            idx = 0
                            s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                            t = mem[64] + 128
                            while idx < _29124:
                                _37866 = mem[s]
                                mem[t] = mem[mem[s]]
                                mem[t + 32] = mem[_37866 + 32]
                                mem[t + 64] = mem[_37866 + 64]
                                mem[t + 96] = mem[_37866 + 96]
                                mem[t + 128] = mem[_37866 + 128]
                                mem[t + 160] = mem[_37866 + 172 len 20]
                                mem[t + 192] = mem[_37866 + 192]
                                mem[t + 224] = mem[_37866 + 236 len 20]
                                mem[t + 256] = bool(mem[_37866 + 256])
                                mem[t + 288] = mem[_37866 + 288]
                                idx = idx + 1
                                s = s + 32
                                t = t + 320
                                continue 
                            mem[_28764 + 32] = arg1 + arg2
                            mem[_28764 + 64] = (320 * _29124) + 128
                            _38266 = mem[_27219]
                            mem[_28764 + (320 * _29124) + 128] = mem[_27219]
                            mem[_28764 + (320 * _29124) + 160 len ceil32(_38266)] = mem[_27219 + 32 len ceil32(_38266)]
                            var51001 = ceil32(_38266)
                            if ceil32(_38266) > _38266:
                                mem[_28764 + (320 * _29124) + _38266 + 160] = 0
                            return memory
                              from mem[64]
                               len ceil32(_38266) + _28764 + (320 * _29124) + -mem[64] + 160
                        _27220 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_27220] = 4
                        mem[_27220 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                        _28765 = mem[64]
                        mem[mem[64]] = 96
                        _29125 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                        mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                        idx = 0
                        s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                        t = mem[64] + 128
                        while idx < _29125:
                            _37873 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_37873 + 32]
                            mem[t + 64] = mem[_37873 + 64]
                            mem[t + 96] = mem[_37873 + 96]
                            mem[t + 128] = mem[_37873 + 128]
                            mem[t + 160] = mem[_37873 + 172 len 20]
                            mem[t + 192] = mem[_37873 + 192]
                            mem[t + 224] = mem[_37873 + 236 len 20]
                            mem[t + 256] = bool(mem[_37873 + 256])
                            mem[t + 288] = mem[_37873 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_28765 + 32] = arg1 + arg2
                        mem[_28765 + 64] = (320 * _29125) + 128
                        _38267 = mem[_27220]
                        mem[_28765 + (320 * _29125) + 128] = mem[_27220]
                        mem[_28765 + (320 * _29125) + 160 len ceil32(_38267)] = mem[_27220 + 32 len ceil32(_38267)]
                        var51001 = ceil32(_38267)
                        if ceil32(_38267) > _38267:
                            mem[_28765 + (320 * _29125) + _38267 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_38267) + _28765 + (320 * _29125) + -mem[64] + 160
                    mem[64] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 544
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 256] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 288] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 320] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 352] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 384] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 416] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 448] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 480] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 512] = 0
                    mem[var35001] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224
                    s = var35001
                    idx = var35002
                    while idx - 1:
                        mem[64] = mem[64] + 320
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 256] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 288] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 320] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 352] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 384] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 416] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 448] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 480] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 512] = 0
                        mem[s + 32] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224
                        s = s + 32
                        idx = idx - 1
                        continue 
                    idx = 0
                    while idx < arg2:
                        if arg1 > !idx:
                            revert with 0, 17
                        if arg1 + idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                            revert with 0, 50
                        mem[0] = mem[(32 * arg1 + idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]
                        mem[32] = 12
                        _50755 = sha3(mem[(32 * arg1 + idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192], 12)
                        _50756 = mem[64]
                        mem[64] = mem[64] + 320
                        mem[_50756] = stor12[mem[(32 * arg1 + idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]].field_0
                        mem[_50756 + 32] = stor1[_50755]
                        mem[_50756 + 64] = stor2[_50755]
                        mem[_50756 + 96] = stor3[_50755]
                        mem[_50756 + 128] = stor4[_50755]
                        mem[_50756 + 160] = stor5[_50755]
                        mem[_50756 + 192] = stor6[_50755]
                        mem[_50756 + 224] = stor7[_50755].field_0
                        mem[_50756 + 256] = bool(stor7[_50755].field_160)
                        mem[_50756 + 288] = stor8[_50755]
                        if idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]:
                            revert with 0, 50
                        mem[(32 * idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224] = _50756
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if arg1 > !arg2:
                        revert with 0, 17
                    if arg1 > !arg2:
                        revert with 0, 17
                    if arg1 + arg2 < mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                        _51782 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_51782] = 7
                        mem[_51782 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                        _52757 = mem[64]
                        mem[mem[64]] = 96
                        _53249 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                        mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                        idx = 0
                        s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                        t = mem[64] + 128
                        while idx < _53249:
                            _59468 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_59468 + 32]
                            mem[t + 64] = mem[_59468 + 64]
                            mem[t + 96] = mem[_59468 + 96]
                            mem[t + 128] = mem[_59468 + 128]
                            mem[t + 160] = mem[_59468 + 172 len 20]
                            mem[t + 192] = mem[_59468 + 192]
                            mem[t + 224] = mem[_59468 + 236 len 20]
                            mem[t + 256] = bool(mem[_59468 + 256])
                            mem[t + 288] = mem[_59468 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_52757 + 32] = arg1 + arg2
                        mem[_52757 + 64] = (320 * _53249) + 128
                        _60120 = mem[_51782]
                        mem[_52757 + (320 * _53249) + 128] = mem[_51782]
                        mem[_52757 + (320 * _53249) + 160 len ceil32(_60120)] = mem[_51782 + 32 len ceil32(_60120)]
                        var58001 = ceil32(_60120)
                        if ceil32(_60120) > _60120:
                            mem[_52757 + (320 * _53249) + _60120 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_60120) + _52757 + (320 * _53249) + -mem[64] + 160
                    _51783 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_51783] = 4
                    mem[_51783 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                    _52758 = mem[64]
                    mem[mem[64]] = 96
                    _53250 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                    mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                    idx = 0
                    s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                    t = mem[64] + 128
                    while idx < _53250:
                        _59475 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_59475 + 32]
                        mem[t + 64] = mem[_59475 + 64]
                        mem[t + 96] = mem[_59475 + 96]
                        mem[t + 128] = mem[_59475 + 128]
                        mem[t + 160] = mem[_59475 + 172 len 20]
                        mem[t + 192] = mem[_59475 + 192]
                        mem[t + 224] = mem[_59475 + 236 len 20]
                        mem[t + 256] = bool(mem[_59475 + 256])
                        mem[t + 288] = mem[_59475 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_52758 + 32] = arg1 + arg2
                    mem[_52758 + 64] = (320 * _53250) + 128
                    _60121 = mem[_51783]
                    mem[_52758 + (320 * _53250) + 128] = mem[_51783]
                    mem[_52758 + (320 * _53250) + 160 len ceil32(_60121)] = mem[_51783 + 32 len ceil32(_60121)]
                    var58001 = ceil32(_60121)
                    if ceil32(_60121) > _60121:
                        mem[_52758 + (320 * _53250) + _60121 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_60121) + _52758 + (320 * _53250) + -mem[64] + 160
                if stor15[address(arg5)].field_0 < arg1:
                    revert with 0, 17
                if stor15[address(arg5)].field_0 - arg1 > test266151307():
                    revert with 0, 65
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192] = stor15[address(arg5)].field_0 - arg1
                mem[64] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 224
                if not stor15[address(arg5)].field_0 - arg1:
                    idx = 0
                    while idx < stor15[address(arg5)].field_0 - arg1:
                        if arg1 > !idx:
                            revert with 0, 17
                        if arg1 + idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                            revert with 0, 50
                        mem[0] = mem[(32 * arg1 + idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]
                        mem[32] = 12
                        _26116 = sha3(mem[(32 * arg1 + idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192], 12)
                        _26117 = mem[64]
                        mem[64] = mem[64] + 320
                        mem[_26117] = stor12[mem[(32 * arg1 + idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]].field_0
                        mem[_26117 + 32] = stor1[_26116]
                        mem[_26117 + 64] = stor2[_26116]
                        mem[_26117 + 96] = stor3[_26116]
                        mem[_26117 + 128] = stor4[_26116]
                        mem[_26117 + 160] = stor5[_26116]
                        mem[_26117 + 192] = stor6[_26116]
                        mem[_26117 + 224] = stor7[_26116].field_0
                        mem[_26117 + 256] = bool(stor7[_26116].field_160)
                        mem[_26117 + 288] = stor8[_26116]
                        if idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]:
                            revert with 0, 50
                        mem[(32 * idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224] = _26117
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if arg1 > !(stor15[address(arg5)].field_0 - arg1):
                        revert with 0, 17
                    if arg1 > !(stor15[address(arg5)].field_0 - arg1):
                        revert with 0, 17
                    if stor15[address(arg5)].field_0 < mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                        _27221 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_27221] = 7
                        mem[_27221 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                        _28770 = mem[64]
                        mem[mem[64]] = 96
                        _29126 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                        mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                        idx = 0
                        s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                        t = mem[64] + 128
                        while idx < _29126:
                            _37880 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_37880 + 32]
                            mem[t + 64] = mem[_37880 + 64]
                            mem[t + 96] = mem[_37880 + 96]
                            mem[t + 128] = mem[_37880 + 128]
                            mem[t + 160] = mem[_37880 + 172 len 20]
                            mem[t + 192] = mem[_37880 + 192]
                            mem[t + 224] = mem[_37880 + 236 len 20]
                            mem[t + 256] = bool(mem[_37880 + 256])
                            mem[t + 288] = mem[_37880 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_28770 + 32] = stor15[address(arg5)].field_0
                        mem[_28770 + 64] = (320 * _29126) + 128
                        _38268 = mem[_27221]
                        mem[_28770 + (320 * _29126) + 128] = mem[_27221]
                        mem[_28770 + (320 * _29126) + 160 len ceil32(_38268)] = mem[_27221 + 32 len ceil32(_38268)]
                        var55001 = ceil32(_38268)
                        if ceil32(_38268) > _38268:
                            mem[_28770 + (320 * _29126) + _38268 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_38268) + _28770 + (320 * _29126) + -mem[64] + 160
                    _27222 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_27222] = 4
                    mem[_27222 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                    _28771 = mem[64]
                    mem[mem[64]] = 96
                    _29127 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                    mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                    idx = 0
                    s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                    t = mem[64] + 128
                    while idx < _29127:
                        _37887 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_37887 + 32]
                        mem[t + 64] = mem[_37887 + 64]
                        mem[t + 96] = mem[_37887 + 96]
                        mem[t + 128] = mem[_37887 + 128]
                        mem[t + 160] = mem[_37887 + 172 len 20]
                        mem[t + 192] = mem[_37887 + 192]
                        mem[t + 224] = mem[_37887 + 236 len 20]
                        mem[t + 256] = bool(mem[_37887 + 256])
                        mem[t + 288] = mem[_37887 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_28771 + 32] = stor15[address(arg5)].field_0
                    mem[_28771 + 64] = (320 * _29127) + 128
                    _38269 = mem[_27222]
                    mem[_28771 + (320 * _29127) + 128] = mem[_27222]
                    mem[_28771 + (320 * _29127) + 160 len ceil32(_38269)] = mem[_27222 + 32 len ceil32(_38269)]
                    var55001 = ceil32(_38269)
                    if ceil32(_38269) > _38269:
                        mem[_28771 + (320 * _29127) + _38269 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_38269) + _28771 + (320 * _29127) + -mem[64] + 160
                mem[64] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 544
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 224] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 256] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 288] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 320] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 352] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 384] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 416] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 448] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 480] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 512] = 0
                mem[var39001] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 224
                s = var39001
                idx = var39002
                while idx - 1:
                    mem[64] = mem[64] + 320
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 224] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 256] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 288] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 320] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 352] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 384] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 416] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 448] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 480] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 512] = 0
                    mem[s + 32] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 224
                    s = s + 32
                    idx = idx - 1
                    continue 
                idx = 0
                while idx < stor15[address(arg5)].field_0 - arg1:
                    if arg1 > !idx:
                        revert with 0, 17
                    if arg1 + idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                        revert with 0, 50
                    mem[0] = mem[(32 * arg1 + idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]
                    mem[32] = 12
                    _50761 = sha3(mem[(32 * arg1 + idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192], 12)
                    _50762 = mem[64]
                    mem[64] = mem[64] + 320
                    mem[_50762] = stor12[mem[(32 * arg1 + idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]].field_0
                    mem[_50762 + 32] = stor1[_50761]
                    mem[_50762 + 64] = stor2[_50761]
                    mem[_50762 + 96] = stor3[_50761]
                    mem[_50762 + 128] = stor4[_50761]
                    mem[_50762 + 160] = stor5[_50761]
                    mem[_50762 + 192] = stor6[_50761]
                    mem[_50762 + 224] = stor7[_50761].field_0
                    mem[_50762 + 256] = bool(stor7[_50761].field_160)
                    mem[_50762 + 288] = stor8[_50761]
                    if idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]:
                        revert with 0, 50
                    mem[(32 * idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224] = _50762
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
                if arg1 > !(stor15[address(arg5)].field_0 - arg1):
                    revert with 0, 17
                if arg1 > !(stor15[address(arg5)].field_0 - arg1):
                    revert with 0, 17
                if stor15[address(arg5)].field_0 < mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                    _51784 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_51784] = 7
                    mem[_51784 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                    _52759 = mem[64]
                    mem[mem[64]] = 96
                    _53251 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                    mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                    idx = 0
                    s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                    t = mem[64] + 128
                    while idx < _53251:
                        _59482 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_59482 + 32]
                        mem[t + 64] = mem[_59482 + 64]
                        mem[t + 96] = mem[_59482 + 96]
                        mem[t + 128] = mem[_59482 + 128]
                        mem[t + 160] = mem[_59482 + 172 len 20]
                        mem[t + 192] = mem[_59482 + 192]
                        mem[t + 224] = mem[_59482 + 236 len 20]
                        mem[t + 256] = bool(mem[_59482 + 256])
                        mem[t + 288] = mem[_59482 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_52759 + 32] = stor15[address(arg5)].field_0
                    mem[_52759 + 64] = (320 * _53251) + 128
                    _60122 = mem[_51784]
                    mem[_52759 + (320 * _53251) + 128] = mem[_51784]
                    mem[_52759 + (320 * _53251) + 160 len ceil32(_60122)] = mem[_51784 + 32 len ceil32(_60122)]
                    var62001 = ceil32(_60122)
                    if ceil32(_60122) > _60122:
                        mem[_52759 + (320 * _53251) + _60122 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_60122) + _52759 + (320 * _53251) + -mem[64] + 160
                _51785 = mem[64]
                mem[64] = mem[64] + 64
                mem[_51785] = 4
                mem[_51785 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                _52760 = mem[64]
                mem[mem[64]] = 96
                _53252 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                idx = 0
                s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                t = mem[64] + 128
                while idx < _53252:
                    _59489 = mem[s]
                    mem[t] = mem[mem[s]]
                    mem[t + 32] = mem[_59489 + 32]
                    mem[t + 64] = mem[_59489 + 64]
                    mem[t + 96] = mem[_59489 + 96]
                    mem[t + 128] = mem[_59489 + 128]
                    mem[t + 160] = mem[_59489 + 172 len 20]
                    mem[t + 192] = mem[_59489 + 192]
                    mem[t + 224] = mem[_59489 + 236 len 20]
                    mem[t + 256] = bool(mem[_59489 + 256])
                    mem[t + 288] = mem[_59489 + 288]
                    idx = idx + 1
                    s = s + 32
                    t = t + 320
                    continue 
                mem[_52760 + 32] = stor15[address(arg5)].field_0
                mem[_52760 + 64] = (320 * _53252) + 128
                _60123 = mem[_51785]
                mem[_52760 + (320 * _53252) + 128] = mem[_51785]
                mem[_52760 + (320 * _53252) + 160 len ceil32(_60123)] = mem[_51785 + 32 len ceil32(_60123)]
                var62001 = ceil32(_60123)
                if ceil32(_60123) > _60123:
                    mem[_52760 + (320 * _53252) + _60123 + 160] = 0
                return memory
                  from mem[64]
                   len ceil32(_60123) + _52760 + (320 * _53252) + -mem[64] + 160
            if stor15[address(arg5)].field_0 < 1:
                revert with 0, 17
            if arg3:
                if arg2 <= stor15[address(arg5)].field_0 - 1:
                    if arg2 > test266151307():
                        revert with 0, 65
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192] = arg2
                    mem[64] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224
                    if not arg2:
                        idx = 0
                        while idx < arg2:
                            if stor15[address(arg5)].field_0 - 1 < idx:
                                revert with 0, 17
                            if stor15[address(arg5)].field_0 + -idx - 1 >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                                revert with 0, 50
                            mem[0] = mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]
                            mem[32] = 12
                            _26122 = sha3(mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192], 12)
                            _26123 = mem[64]
                            mem[64] = mem[64] + 320
                            mem[_26123] = stor12[mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]].field_0
                            mem[_26123 + 32] = stor1[_26122]
                            mem[_26123 + 64] = stor2[_26122]
                            mem[_26123 + 96] = stor3[_26122]
                            mem[_26123 + 128] = stor4[_26122]
                            mem[_26123 + 160] = stor5[_26122]
                            mem[_26123 + 192] = stor6[_26122]
                            mem[_26123 + 224] = stor7[_26122].field_0
                            mem[_26123 + 256] = bool(stor7[_26122].field_160)
                            mem[_26123 + 288] = stor8[_26122]
                            if idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]:
                                revert with 0, 50
                            mem[(32 * idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224] = _26123
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            continue 
                        if stor15[address(arg5)].field_0 - 1 < arg2:
                            _24793 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_24793] = 4
                            mem[_24793 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                            _25193 = mem[64]
                            mem[mem[64]] = 96
                            _26119 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                            mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                            idx = 0
                            s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                            t = mem[64] + 128
                            while idx < _26119:
                                _37894 = mem[s]
                                mem[t] = mem[mem[s]]
                                mem[t + 32] = mem[_37894 + 32]
                                mem[t + 64] = mem[_37894 + 64]
                                mem[t + 96] = mem[_37894 + 96]
                                mem[t + 128] = mem[_37894 + 128]
                                mem[t + 160] = mem[_37894 + 172 len 20]
                                mem[t + 192] = mem[_37894 + 192]
                                mem[t + 224] = mem[_37894 + 236 len 20]
                                mem[t + 256] = bool(mem[_37894 + 256])
                                mem[t + 288] = mem[_37894 + 288]
                                idx = idx + 1
                                s = s + 32
                                t = t + 320
                                continue 
                            mem[_25193 + 32] = 0
                            mem[_25193 + 64] = (320 * _26119) + 128
                            _38270 = mem[_24793]
                            mem[_25193 + (320 * _26119) + 128] = mem[_24793]
                            mem[_25193 + (320 * _26119) + 160 len ceil32(_38270)] = mem[_24793 + 32 len ceil32(_38270)]
                            var46001 = ceil32(_38270)
                            if ceil32(_38270) > _38270:
                                mem[_25193 + (320 * _26119) + _38270 + 160] = 0
                            return memory
                              from mem[64]
                               len ceil32(_38270) + _25193 + (320 * _26119) + -mem[64] + 160
                        _26120 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_26120] = 7
                        mem[_26120 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                        _26887 = mem[64]
                        mem[mem[64]] = 96
                        _27224 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                        mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                        idx = 0
                        s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                        t = mem[64] + 128
                        while idx < _27224:
                            _37901 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_37901 + 32]
                            mem[t + 64] = mem[_37901 + 64]
                            mem[t + 96] = mem[_37901 + 96]
                            mem[t + 128] = mem[_37901 + 128]
                            mem[t + 160] = mem[_37901 + 172 len 20]
                            mem[t + 192] = mem[_37901 + 192]
                            mem[t + 224] = mem[_37901 + 236 len 20]
                            mem[t + 256] = bool(mem[_37901 + 256])
                            mem[t + 288] = mem[_37901 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_26887 + 32] = stor15[address(arg5)].field_0 + -arg2 - 1
                        mem[_26887 + 64] = (320 * _27224) + 128
                        _38271 = mem[_26120]
                        mem[_26887 + (320 * _27224) + 128] = mem[_26120]
                        mem[_26887 + (320 * _27224) + 160 len ceil32(_38271)] = mem[_26120 + 32 len ceil32(_38271)]
                        var49001 = ceil32(_38271)
                        if ceil32(_38271) > _38271:
                            mem[_26887 + (320 * _27224) + _38271 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_38271) + _26887 + (320 * _27224) + -mem[64] + 160
                    mem[64] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 544
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 256] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 288] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 320] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 352] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 384] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 416] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 448] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 480] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 512] = 0
                    mem[var36001] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224
                    s = var36001
                    idx = var36002
                    while idx - 1:
                        mem[64] = mem[64] + 320
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 256] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 288] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 320] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 352] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 384] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 416] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 448] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 480] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 512] = 0
                        mem[s + 32] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224
                        s = s + 32
                        idx = idx - 1
                        continue 
                    idx = 0
                    while idx < arg2:
                        if stor15[address(arg5)].field_0 - 1 < idx:
                            revert with 0, 17
                        if stor15[address(arg5)].field_0 + -idx - 1 >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                            revert with 0, 50
                        mem[0] = mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]
                        mem[32] = 12
                        _50769 = sha3(mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192], 12)
                        _50770 = mem[64]
                        mem[64] = mem[64] + 320
                        mem[_50770] = stor12[mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]].field_0
                        mem[_50770 + 32] = stor1[_50769]
                        mem[_50770 + 64] = stor2[_50769]
                        mem[_50770 + 96] = stor3[_50769]
                        mem[_50770 + 128] = stor4[_50769]
                        mem[_50770 + 160] = stor5[_50769]
                        mem[_50770 + 192] = stor6[_50769]
                        mem[_50770 + 224] = stor7[_50769].field_0
                        mem[_50770 + 256] = bool(stor7[_50769].field_160)
                        mem[_50770 + 288] = stor8[_50769]
                        if idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]:
                            revert with 0, 50
                        mem[(32 * idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224] = _50770
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if stor15[address(arg5)].field_0 - 1 < arg2:
                        _49298 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_49298] = 4
                        mem[_49298 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                        _49818 = mem[64]
                        mem[mem[64]] = 96
                        _50766 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                        mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                        idx = 0
                        s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                        t = mem[64] + 128
                        while idx < _50766:
                            _59496 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_59496 + 32]
                            mem[t + 64] = mem[_59496 + 64]
                            mem[t + 96] = mem[_59496 + 96]
                            mem[t + 128] = mem[_59496 + 128]
                            mem[t + 160] = mem[_59496 + 172 len 20]
                            mem[t + 192] = mem[_59496 + 192]
                            mem[t + 224] = mem[_59496 + 236 len 20]
                            mem[t + 256] = bool(mem[_59496 + 256])
                            mem[t + 288] = mem[_59496 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_49818 + 32] = 0
                        mem[_49818 + 64] = (320 * _50766) + 128
                        _60124 = mem[_49298]
                        mem[_49818 + (320 * _50766) + 128] = mem[_49298]
                        mem[_49818 + (320 * _50766) + 160 len ceil32(_60124)] = mem[_49298 + 32 len ceil32(_60124)]
                        var53001 = ceil32(_60124)
                        if ceil32(_60124) > _60124:
                            mem[_49818 + (320 * _50766) + _60124 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_60124) + _49818 + (320 * _50766) + -mem[64] + 160
                    _50767 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_50767] = 7
                    mem[_50767 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                    _51428 = mem[64]
                    mem[mem[64]] = 96
                    _51787 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                    mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                    idx = 0
                    s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                    t = mem[64] + 128
                    while idx < _51787:
                        _59503 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_59503 + 32]
                        mem[t + 64] = mem[_59503 + 64]
                        mem[t + 96] = mem[_59503 + 96]
                        mem[t + 128] = mem[_59503 + 128]
                        mem[t + 160] = mem[_59503 + 172 len 20]
                        mem[t + 192] = mem[_59503 + 192]
                        mem[t + 224] = mem[_59503 + 236 len 20]
                        mem[t + 256] = bool(mem[_59503 + 256])
                        mem[t + 288] = mem[_59503 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_51428 + 32] = stor15[address(arg5)].field_0 + -arg2 - 1
                    mem[_51428 + 64] = (320 * _51787) + 128
                    _60125 = mem[_50767]
                    mem[_51428 + (320 * _51787) + 128] = mem[_50767]
                    mem[_51428 + (320 * _51787) + 160 len ceil32(_60125)] = mem[_50767 + 32 len ceil32(_60125)]
                    var56001 = ceil32(_60125)
                    if ceil32(_60125) > _60125:
                        mem[_51428 + (320 * _51787) + _60125 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_60125) + _51428 + (320 * _51787) + -mem[64] + 160
                if 1 > !(stor15[address(arg5)].field_0 - 1):
                    revert with 0, 17
                if stor15[address(arg5)].field_0 > test266151307():
                    revert with 0, 65
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192] = stor15[address(arg5)].field_0
                mem[64] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 224
                if not stor15[address(arg5)].field_0:
                    idx = 0
                    while idx < stor15[address(arg5)].field_0:
                        if stor15[address(arg5)].field_0 - 1 < idx:
                            revert with 0, 17
                        if stor15[address(arg5)].field_0 + -idx - 1 >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                            revert with 0, 50
                        mem[0] = mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]
                        mem[32] = 12
                        _26128 = sha3(mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192], 12)
                        _26129 = mem[64]
                        mem[64] = mem[64] + 320
                        mem[_26129] = stor12[mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]].field_0
                        mem[_26129 + 32] = stor1[_26128]
                        mem[_26129 + 64] = stor2[_26128]
                        mem[_26129 + 96] = stor3[_26128]
                        mem[_26129 + 128] = stor4[_26128]
                        mem[_26129 + 160] = stor5[_26128]
                        mem[_26129 + 192] = stor6[_26128]
                        mem[_26129 + 224] = stor7[_26128].field_0
                        mem[_26129 + 256] = bool(stor7[_26128].field_160)
                        mem[_26129 + 288] = stor8[_26128]
                        if idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]:
                            revert with 0, 50
                        mem[(32 * idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224] = _26129
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if stor15[address(arg5)].field_0 - 1 < stor15[address(arg5)].field_0:
                        _24794 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_24794] = 4
                        mem[_24794 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                        _25195 = mem[64]
                        mem[mem[64]] = 96
                        _26125 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                        mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                        idx = 0
                        s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                        t = mem[64] + 128
                        while idx < _26125:
                            _37908 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_37908 + 32]
                            mem[t + 64] = mem[_37908 + 64]
                            mem[t + 96] = mem[_37908 + 96]
                            mem[t + 128] = mem[_37908 + 128]
                            mem[t + 160] = mem[_37908 + 172 len 20]
                            mem[t + 192] = mem[_37908 + 192]
                            mem[t + 224] = mem[_37908 + 236 len 20]
                            mem[t + 256] = bool(mem[_37908 + 256])
                            mem[t + 288] = mem[_37908 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_25195 + 32] = 0
                        mem[_25195 + 64] = (320 * _26125) + 128
                        _38272 = mem[_24794]
                        mem[_25195 + (320 * _26125) + 128] = mem[_24794]
                        mem[_25195 + (320 * _26125) + 160 len ceil32(_38272)] = mem[_24794 + 32 len ceil32(_38272)]
                        var50001 = ceil32(_38272)
                        if ceil32(_38272) > _38272:
                            mem[_25195 + (320 * _26125) + _38272 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_38272) + _25195 + (320 * _26125) + -mem[64] + 160
                    _26126 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_26126] = 7
                    mem[_26126 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                    _26896 = mem[64]
                    mem[mem[64]] = 96
                    _27226 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                    mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                    idx = 0
                    s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                    t = mem[64] + 128
                    while idx < _27226:
                        _37915 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_37915 + 32]
                        mem[t + 64] = mem[_37915 + 64]
                        mem[t + 96] = mem[_37915 + 96]
                        mem[t + 128] = mem[_37915 + 128]
                        mem[t + 160] = mem[_37915 + 172 len 20]
                        mem[t + 192] = mem[_37915 + 192]
                        mem[t + 224] = mem[_37915 + 236 len 20]
                        mem[t + 256] = bool(mem[_37915 + 256])
                        mem[t + 288] = mem[_37915 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_26896 + 32] = -1
                    mem[_26896 + 64] = (320 * _27226) + 128
                    _38273 = mem[_26126]
                    mem[_26896 + (320 * _27226) + 128] = mem[_26126]
                    mem[_26896 + (320 * _27226) + 160 len ceil32(_38273)] = mem[_26126 + 32 len ceil32(_38273)]
                    var53001 = ceil32(_38273)
                    if ceil32(_38273) > _38273:
                        mem[_26896 + (320 * _27226) + _38273 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_38273) + _26896 + (320 * _27226) + -mem[64] + 160
                mem[64] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 544
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 224] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 256] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 288] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 320] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 352] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 384] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 416] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 448] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 480] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 512] = 0
                mem[var40001] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 224
                s = var40001
                idx = var40002
                while idx - 1:
                    mem[64] = mem[64] + 320
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 224] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 256] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 288] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 320] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 352] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 384] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 416] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 448] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 480] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 512] = 0
                    mem[s + 32] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 224
                    s = s + 32
                    idx = idx - 1
                    continue 
                idx = 0
                while idx < stor15[address(arg5)].field_0:
                    if stor15[address(arg5)].field_0 - 1 < idx:
                        revert with 0, 17
                    if stor15[address(arg5)].field_0 + -idx - 1 >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                        revert with 0, 50
                    mem[0] = mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]
                    mem[32] = 12
                    _50777 = sha3(mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192], 12)
                    _50778 = mem[64]
                    mem[64] = mem[64] + 320
                    mem[_50778] = stor12[mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]].field_0
                    mem[_50778 + 32] = stor1[_50777]
                    mem[_50778 + 64] = stor2[_50777]
                    mem[_50778 + 96] = stor3[_50777]
                    mem[_50778 + 128] = stor4[_50777]
                    mem[_50778 + 160] = stor5[_50777]
                    mem[_50778 + 192] = stor6[_50777]
                    mem[_50778 + 224] = stor7[_50777].field_0
                    mem[_50778 + 256] = bool(stor7[_50777].field_160)
                    mem[_50778 + 288] = stor8[_50777]
                    if idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]:
                        revert with 0, 50
                    mem[(32 * idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224] = _50778
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
                if stor15[address(arg5)].field_0 - 1 < stor15[address(arg5)].field_0:
                    _49299 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_49299] = 4
                    mem[_49299 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                    _49822 = mem[64]
                    mem[mem[64]] = 96
                    _50774 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                    mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                    idx = 0
                    s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                    t = mem[64] + 128
                    while idx < _50774:
                        _59510 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_59510 + 32]
                        mem[t + 64] = mem[_59510 + 64]
                        mem[t + 96] = mem[_59510 + 96]
                        mem[t + 128] = mem[_59510 + 128]
                        mem[t + 160] = mem[_59510 + 172 len 20]
                        mem[t + 192] = mem[_59510 + 192]
                        mem[t + 224] = mem[_59510 + 236 len 20]
                        mem[t + 256] = bool(mem[_59510 + 256])
                        mem[t + 288] = mem[_59510 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_49822 + 32] = 0
                    mem[_49822 + 64] = (320 * _50774) + 128
                    _60126 = mem[_49299]
                    mem[_49822 + (320 * _50774) + 128] = mem[_49299]
                    mem[_49822 + (320 * _50774) + 160 len ceil32(_60126)] = mem[_49299 + 32 len ceil32(_60126)]
                    var57001 = ceil32(_60126)
                    if ceil32(_60126) > _60126:
                        mem[_49822 + (320 * _50774) + _60126 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_60126) + _49822 + (320 * _50774) + -mem[64] + 160
                _50775 = mem[64]
                mem[64] = mem[64] + 64
                mem[_50775] = 7
                mem[_50775 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                _51436 = mem[64]
                mem[mem[64]] = 96
                _51789 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                idx = 0
                s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                t = mem[64] + 128
                while idx < _51789:
                    _59517 = mem[s]
                    mem[t] = mem[mem[s]]
                    mem[t + 32] = mem[_59517 + 32]
                    mem[t + 64] = mem[_59517 + 64]
                    mem[t + 96] = mem[_59517 + 96]
                    mem[t + 128] = mem[_59517 + 128]
                    mem[t + 160] = mem[_59517 + 172 len 20]
                    mem[t + 192] = mem[_59517 + 192]
                    mem[t + 224] = mem[_59517 + 236 len 20]
                    mem[t + 256] = bool(mem[_59517 + 256])
                    mem[t + 288] = mem[_59517 + 288]
                    idx = idx + 1
                    s = s + 32
                    t = t + 320
                    continue 
                mem[_51436 + 32] = -1
                mem[_51436 + 64] = (320 * _51789) + 128
                _60127 = mem[_50775]
                mem[_51436 + (320 * _51789) + 128] = mem[_50775]
                mem[_51436 + (320 * _51789) + 160 len ceil32(_60127)] = mem[_50775 + 32 len ceil32(_60127)]
                var60001 = ceil32(_60127)
                if ceil32(_60127) > _60127:
                    mem[_51436 + (320 * _51789) + _60127 + 160] = 0
                return memory
                  from mem[64]
                   len ceil32(_60127) + _51436 + (320 * _51789) + -mem[64] + 160
            if stor15[address(arg5)].field_0 < stor15[address(arg5)].field_0 - 1:
                revert with 0, 17
            if arg2 > 1:
                if stor15[address(arg5)].field_0 < stor15[address(arg5)].field_0 - 1:
                    revert with 0, 17
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192] = 1
                mem[64] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 576
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 256] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 288] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 320] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 352] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 384] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 416] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 448] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 480] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 512] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 544] = 0
                mem[var43001] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 256
                s = var43001
                idx = var43002
                while idx - 1:
                    mem[64] = mem[64] + 320
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 256] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 288] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 320] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 352] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 384] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 416] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 448] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 480] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 512] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 544] = 0
                    mem[s + 32] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 256
                    s = s + 32
                    idx = idx - 1
                    continue 
                idx = 0
                while idx < 1:
                    if stor15[address(arg5)].field_0 - 1 > !idx:
                        revert with 0, 17
                    if stor15[address(arg5)].field_0 + idx - 1 >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                        revert with 0, 50
                    mem[0] = mem[(32 * stor15[address(arg5)].field_0 + idx - 1) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]
                    mem[32] = 12
                    _50789 = sha3(mem[(32 * stor15[address(arg5)].field_0 + idx - 1) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192], 12)
                    _50790 = mem[64]
                    mem[64] = mem[64] + 320
                    mem[_50790] = stor12[mem[(32 * stor15[address(arg5)].field_0 + idx - 1) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]].field_0
                    mem[_50790 + 32] = stor1[_50789]
                    mem[_50790 + 64] = stor2[_50789]
                    mem[_50790 + 96] = stor3[_50789]
                    mem[_50790 + 128] = stor4[_50789]
                    mem[_50790 + 160] = stor5[_50789]
                    mem[_50790 + 192] = stor6[_50789]
                    mem[_50790 + 224] = stor7[_50789].field_0
                    mem[_50790 + 256] = bool(stor7[_50789].field_160)
                    mem[_50790 + 288] = stor8[_50789]
                    if idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]:
                        revert with 0, 50
                    mem[(32 * idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224] = _50790
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
                if stor15[address(arg5)].field_0 - 1 > !1:
                    revert with 0, 17
                if stor15[address(arg5)].field_0 - 1 > !1:
                    revert with 0, 17
                if stor15[address(arg5)].field_0 < mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                    _51792 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_51792] = 7
                    mem[_51792 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                    _52779 = mem[64]
                    mem[mem[64]] = 96
                    _53259 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                    mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                    idx = 0
                    s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                    t = mem[64] + 128
                    while idx < _53259:
                        _59538 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_59538 + 32]
                        mem[t + 64] = mem[_59538 + 64]
                        mem[t + 96] = mem[_59538 + 96]
                        mem[t + 128] = mem[_59538 + 128]
                        mem[t + 160] = mem[_59538 + 172 len 20]
                        mem[t + 192] = mem[_59538 + 192]
                        mem[t + 224] = mem[_59538 + 236 len 20]
                        mem[t + 256] = bool(mem[_59538 + 256])
                        mem[t + 288] = mem[_59538 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_52779 + 32] = stor15[address(arg5)].field_0
                    mem[_52779 + 64] = (320 * _53259) + 128
                    _60130 = mem[_51792]
                    mem[_52779 + (320 * _53259) + 128] = mem[_51792]
                    mem[_52779 + (320 * _53259) + 160 len ceil32(_60130)] = mem[_51792 + 32 len ceil32(_60130)]
                    var66001 = ceil32(_60130)
                    if ceil32(_60130) > _60130:
                        mem[_52779 + (320 * _53259) + _60130 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_60130) + _52779 + (320 * _53259) + -mem[64] + 160
                _51793 = mem[64]
                mem[64] = mem[64] + 64
                mem[_51793] = 4
                mem[_51793 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                _52780 = mem[64]
                mem[mem[64]] = 96
                _53260 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                idx = 0
                s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                t = mem[64] + 128
                while idx < _53260:
                    _59545 = mem[s]
                    mem[t] = mem[mem[s]]
                    mem[t + 32] = mem[_59545 + 32]
                    mem[t + 64] = mem[_59545 + 64]
                    mem[t + 96] = mem[_59545 + 96]
                    mem[t + 128] = mem[_59545 + 128]
                    mem[t + 160] = mem[_59545 + 172 len 20]
                    mem[t + 192] = mem[_59545 + 192]
                    mem[t + 224] = mem[_59545 + 236 len 20]
                    mem[t + 256] = bool(mem[_59545 + 256])
                    mem[t + 288] = mem[_59545 + 288]
                    idx = idx + 1
                    s = s + 32
                    t = t + 320
                    continue 
                mem[_52780 + 32] = stor15[address(arg5)].field_0
                mem[_52780 + 64] = (320 * _53260) + 128
                _60131 = mem[_51793]
                mem[_52780 + (320 * _53260) + 128] = mem[_51793]
                mem[_52780 + (320 * _53260) + 160 len ceil32(_60131)] = mem[_51793 + 32 len ceil32(_60131)]
                var66001 = ceil32(_60131)
                if ceil32(_60131) > _60131:
                    mem[_52780 + (320 * _53260) + _60131 + 160] = 0
                return memory
                  from mem[64]
                   len ceil32(_60131) + _52780 + (320 * _53260) + -mem[64] + 160
            if arg2 > test266151307():
                revert with 0, 65
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192] = arg2
            mem[64] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224
            if not arg2:
                idx = 0
                while idx < arg2:
                    if stor15[address(arg5)].field_0 - 1 > !idx:
                        revert with 0, 17
                    if stor15[address(arg5)].field_0 + idx - 1 >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                        revert with 0, 50
                    mem[0] = mem[(32 * stor15[address(arg5)].field_0 + idx - 1) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]
                    mem[32] = 12
                    _26132 = sha3(mem[(32 * stor15[address(arg5)].field_0 + idx - 1) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192], 12)
                    _26133 = mem[64]
                    mem[64] = mem[64] + 320
                    mem[_26133] = stor12[mem[(32 * stor15[address(arg5)].field_0 + idx - 1) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]].field_0
                    mem[_26133 + 32] = stor1[_26132]
                    mem[_26133 + 64] = stor2[_26132]
                    mem[_26133 + 96] = stor3[_26132]
                    mem[_26133 + 128] = stor4[_26132]
                    mem[_26133 + 160] = stor5[_26132]
                    mem[_26133 + 192] = stor6[_26132]
                    mem[_26133 + 224] = stor7[_26132].field_0
                    mem[_26133 + 256] = bool(stor7[_26132].field_160)
                    mem[_26133 + 288] = stor8[_26132]
                    if idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]:
                        revert with 0, 50
                    mem[(32 * idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224] = _26133
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
                if stor15[address(arg5)].field_0 - 1 > !arg2:
                    revert with 0, 17
                if stor15[address(arg5)].field_0 - 1 > !arg2:
                    revert with 0, 17
                if stor15[address(arg5)].field_0 + arg2 - 1 < mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                    _27227 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_27227] = 7
                    mem[_27227 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                    _28804 = mem[64]
                    mem[mem[64]] = 96
                    _29132 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                    mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                    idx = 0
                    s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                    t = mem[64] + 128
                    while idx < _29132:
                        _37922 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_37922 + 32]
                        mem[t + 64] = mem[_37922 + 64]
                        mem[t + 96] = mem[_37922 + 96]
                        mem[t + 128] = mem[_37922 + 128]
                        mem[t + 160] = mem[_37922 + 172 len 20]
                        mem[t + 192] = mem[_37922 + 192]
                        mem[t + 224] = mem[_37922 + 236 len 20]
                        mem[t + 256] = bool(mem[_37922 + 256])
                        mem[t + 288] = mem[_37922 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_28804 + 32] = stor15[address(arg5)].field_0 + arg2 - 1
                    mem[_28804 + 64] = (320 * _29132) + 128
                    _38274 = mem[_27227]
                    mem[_28804 + (320 * _29132) + 128] = mem[_27227]
                    mem[_28804 + (320 * _29132) + 160 len ceil32(_38274)] = mem[_27227 + 32 len ceil32(_38274)]
                    var55001 = ceil32(_38274)
                    if ceil32(_38274) > _38274:
                        mem[_28804 + (320 * _29132) + _38274 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_38274) + _28804 + (320 * _29132) + -mem[64] + 160
                _27228 = mem[64]
                mem[64] = mem[64] + 64
                mem[_27228] = 4
                mem[_27228 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                _28805 = mem[64]
                mem[mem[64]] = 96
                _29133 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                idx = 0
                s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                t = mem[64] + 128
                while idx < _29133:
                    _37929 = mem[s]
                    mem[t] = mem[mem[s]]
                    mem[t + 32] = mem[_37929 + 32]
                    mem[t + 64] = mem[_37929 + 64]
                    mem[t + 96] = mem[_37929 + 96]
                    mem[t + 128] = mem[_37929 + 128]
                    mem[t + 160] = mem[_37929 + 172 len 20]
                    mem[t + 192] = mem[_37929 + 192]
                    mem[t + 224] = mem[_37929 + 236 len 20]
                    mem[t + 256] = bool(mem[_37929 + 256])
                    mem[t + 288] = mem[_37929 + 288]
                    idx = idx + 1
                    s = s + 32
                    t = t + 320
                    continue 
                mem[_28805 + 32] = stor15[address(arg5)].field_0 + arg2 - 1
                mem[_28805 + 64] = (320 * _29133) + 128
                _38275 = mem[_27228]
                mem[_28805 + (320 * _29133) + 128] = mem[_27228]
                mem[_28805 + (320 * _29133) + 160 len ceil32(_38275)] = mem[_27228 + 32 len ceil32(_38275)]
                var55001 = ceil32(_38275)
                if ceil32(_38275) > _38275:
                    mem[_28805 + (320 * _29133) + _38275 + 160] = 0
                return memory
                  from mem[64]
                   len ceil32(_38275) + _28805 + (320 * _29133) + -mem[64] + 160
            mem[64] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 544
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 256] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 288] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 320] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 352] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 384] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 416] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 448] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 480] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 512] = 0
            mem[var39001] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224
            s = var39001
            idx = var39002
            while idx - 1:
                mem[64] = mem[64] + 320
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 256] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 288] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 320] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 352] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 384] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 416] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 448] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 480] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 512] = 0
                mem[s + 32] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224
                s = s + 32
                idx = idx - 1
                continue 
            idx = 0
            while idx < arg2:
                if stor15[address(arg5)].field_0 - 1 > !idx:
                    revert with 0, 17
                if stor15[address(arg5)].field_0 + idx - 1 >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                    revert with 0, 50
                mem[0] = mem[(32 * stor15[address(arg5)].field_0 + idx - 1) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]
                mem[32] = 12
                _50783 = sha3(mem[(32 * stor15[address(arg5)].field_0 + idx - 1) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192], 12)
                _50784 = mem[64]
                mem[64] = mem[64] + 320
                mem[_50784] = stor12[mem[(32 * stor15[address(arg5)].field_0 + idx - 1) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]].field_0
                mem[_50784 + 32] = stor1[_50783]
                mem[_50784 + 64] = stor2[_50783]
                mem[_50784 + 96] = stor3[_50783]
                mem[_50784 + 128] = stor4[_50783]
                mem[_50784 + 160] = stor5[_50783]
                mem[_50784 + 192] = stor6[_50783]
                mem[_50784 + 224] = stor7[_50783].field_0
                mem[_50784 + 256] = bool(stor7[_50783].field_160)
                mem[_50784 + 288] = stor8[_50783]
                if idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]:
                    revert with 0, 50
                mem[(32 * idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224] = _50784
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
            if stor15[address(arg5)].field_0 - 1 > !arg2:
                revert with 0, 17
            if stor15[address(arg5)].field_0 - 1 > !arg2:
                revert with 0, 17
            if stor15[address(arg5)].field_0 + arg2 - 1 < mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                _51790 = mem[64]
                mem[64] = mem[64] + 64
                mem[_51790] = 7
                mem[_51790 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                _52777 = mem[64]
                mem[mem[64]] = 96
                _53257 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                idx = 0
                s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                t = mem[64] + 128
                while idx < _53257:
                    _59524 = mem[s]
                    mem[t] = mem[mem[s]]
                    mem[t + 32] = mem[_59524 + 32]
                    mem[t + 64] = mem[_59524 + 64]
                    mem[t + 96] = mem[_59524 + 96]
                    mem[t + 128] = mem[_59524 + 128]
                    mem[t + 160] = mem[_59524 + 172 len 20]
                    mem[t + 192] = mem[_59524 + 192]
                    mem[t + 224] = mem[_59524 + 236 len 20]
                    mem[t + 256] = bool(mem[_59524 + 256])
                    mem[t + 288] = mem[_59524 + 288]
                    idx = idx + 1
                    s = s + 32
                    t = t + 320
                    continue 
                mem[_52777 + 32] = stor15[address(arg5)].field_0 + arg2 - 1
                mem[_52777 + 64] = (320 * _53257) + 128
                _60128 = mem[_51790]
                mem[_52777 + (320 * _53257) + 128] = mem[_51790]
                mem[_52777 + (320 * _53257) + 160 len ceil32(_60128)] = mem[_51790 + 32 len ceil32(_60128)]
                var62001 = ceil32(_60128)
                if ceil32(_60128) > _60128:
                    mem[_52777 + (320 * _53257) + _60128 + 160] = 0
                return memory
                  from mem[64]
                   len ceil32(_60128) + _52777 + (320 * _53257) + -mem[64] + 160
            _51791 = mem[64]
            mem[64] = mem[64] + 64
            mem[_51791] = 4
            mem[_51791 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
            _52778 = mem[64]
            mem[mem[64]] = 96
            _53258 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
            mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
            idx = 0
            s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
            t = mem[64] + 128
            while idx < _53258:
                _59531 = mem[s]
                mem[t] = mem[mem[s]]
                mem[t + 32] = mem[_59531 + 32]
                mem[t + 64] = mem[_59531 + 64]
                mem[t + 96] = mem[_59531 + 96]
                mem[t + 128] = mem[_59531 + 128]
                mem[t + 160] = mem[_59531 + 172 len 20]
                mem[t + 192] = mem[_59531 + 192]
                mem[t + 224] = mem[_59531 + 236 len 20]
                mem[t + 256] = bool(mem[_59531 + 256])
                mem[t + 288] = mem[_59531 + 288]
                idx = idx + 1
                s = s + 32
                t = t + 320
                continue 
            mem[_52778 + 32] = stor15[address(arg5)].field_0 + arg2 - 1
            mem[_52778 + 64] = (320 * _53258) + 128
            _60129 = mem[_51791]
            mem[_52778 + (320 * _53258) + 128] = mem[_51791]
            mem[_52778 + (320 * _53258) + 160 len ceil32(_60129)] = mem[_51791 + 32 len ceil32(_60129)]
            var62001 = ceil32(_60129)
            if ceil32(_60129) > _60129:
                mem[_52778 + (320 * _53258) + _60129 + 160] = 0
            return memory
              from mem[64]
               len ceil32(_60129) + _52778 + (320 * _53258) + -mem[64] + 160
        mem[0] = sha3(address(arg5), 15)
        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192] = stor15[address(arg5)].field_0
        idx = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192
        s = 0
        while (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160 > idx:
            mem[idx + 32] = stor15[address(arg5)][s].field_256
            idx = idx + 32
            s = s + 1
            continue 
        if not stor15[address(arg5)].field_0:
            mem[64] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 288
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224] = 4
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 256] = 0x6f76657200000000000000000000000000000000000000000000000000000000
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 288] = 96
            _39715 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 384] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
            idx = 0
            s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
            t = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 416
            while idx < mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]:
                _49192 = mem[s]
                mem[t] = mem[mem[s]]
                mem[t + 32] = mem[_49192 + 32]
                mem[t + 64] = mem[_49192 + 64]
                mem[t + 96] = mem[_49192 + 96]
                mem[t + 128] = mem[_49192 + 128]
                mem[t + 160] = mem[_49192 + 172 len 20]
                mem[t + 192] = mem[_49192 + 192]
                mem[t + 224] = mem[_49192 + 236 len 20]
                mem[t + 256] = bool(mem[_49192 + 256])
                mem[t + 288] = mem[_49192 + 288]
                idx = idx + 1
                s = s + 32
                t = t + 320
                continue 
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 320] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 352] = (320 * _39715) + 128
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (320 * _39715) + 416] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224]
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (320 * _39715) + 448 len ceil32(mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224])] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 256 len ceil32(mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224])]
            var38001 = ceil32(mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224])
            if ceil32(mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224]) > mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224]:
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (320 * _39715) + mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224] + 448] = 0
            return memory
              from mem[64]
               len ceil32(mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224]) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (320 * _39715) + -mem[64] + 448
        if arg1 < stor15[address(arg5)].field_0:
            if arg3:
                if arg2 <= arg1:
                    if arg2 > test266151307():
                        revert with 0, 65
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192] = arg2
                    mem[64] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224
                    if not arg2:
                        idx = 0
                        while idx < arg2:
                            if arg1 < idx:
                                revert with 0, 17
                            if arg1 - idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                                revert with 0, 50
                            mem[0] = mem[(32 * arg1 - idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]
                            mem[32] = 12
                            _50795 = sha3(mem[(32 * arg1 - idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192], 12)
                            _50796 = mem[64]
                            mem[64] = mem[64] + 320
                            mem[_50796] = stor12[mem[(32 * arg1 - idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]].field_0
                            mem[_50796 + 32] = stor1[_50795]
                            mem[_50796 + 64] = stor2[_50795]
                            mem[_50796 + 96] = stor3[_50795]
                            mem[_50796 + 128] = stor4[_50795]
                            mem[_50796 + 160] = stor5[_50795]
                            mem[_50796 + 192] = stor6[_50795]
                            mem[_50796 + 224] = stor7[_50795].field_0
                            mem[_50796 + 256] = bool(stor7[_50795].field_160)
                            mem[_50796 + 288] = stor8[_50795]
                            if idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]:
                                revert with 0, 50
                            mem[(32 * idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224] = _50796
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            continue 
                        if arg1 < arg2:
                            _49300 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_49300] = 4
                            mem[_49300 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                            _49830 = mem[64]
                            mem[mem[64]] = 96
                            _50792 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                            mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                            idx = 0
                            s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                            t = mem[64] + 128
                            while idx < _50792:
                                _59552 = mem[s]
                                mem[t] = mem[mem[s]]
                                mem[t + 32] = mem[_59552 + 32]
                                mem[t + 64] = mem[_59552 + 64]
                                mem[t + 96] = mem[_59552 + 96]
                                mem[t + 128] = mem[_59552 + 128]
                                mem[t + 160] = mem[_59552 + 172 len 20]
                                mem[t + 192] = mem[_59552 + 192]
                                mem[t + 224] = mem[_59552 + 236 len 20]
                                mem[t + 256] = bool(mem[_59552 + 256])
                                mem[t + 288] = mem[_59552 + 288]
                                idx = idx + 1
                                s = s + 32
                                t = t + 320
                                continue 
                            mem[_49830 + 32] = 0
                            mem[_49830 + 64] = (320 * _50792) + 128
                            _60132 = mem[_49300]
                            mem[_49830 + (320 * _50792) + 128] = mem[_49300]
                            mem[_49830 + (320 * _50792) + 160 len ceil32(_60132)] = mem[_49300 + 32 len ceil32(_60132)]
                            var46001 = ceil32(_60132)
                            if ceil32(_60132) > _60132:
                                mem[_49830 + (320 * _50792) + _60132 + 160] = 0
                            return memory
                              from mem[64]
                               len ceil32(_60132) + _49830 + (320 * _50792) + -mem[64] + 160
                        _50793 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_50793] = 7
                        mem[_50793 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                        _51444 = mem[64]
                        mem[mem[64]] = 96
                        _51795 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                        mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                        idx = 0
                        s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                        t = mem[64] + 128
                        while idx < _51795:
                            _59559 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_59559 + 32]
                            mem[t + 64] = mem[_59559 + 64]
                            mem[t + 96] = mem[_59559 + 96]
                            mem[t + 128] = mem[_59559 + 128]
                            mem[t + 160] = mem[_59559 + 172 len 20]
                            mem[t + 192] = mem[_59559 + 192]
                            mem[t + 224] = mem[_59559 + 236 len 20]
                            mem[t + 256] = bool(mem[_59559 + 256])
                            mem[t + 288] = mem[_59559 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_51444 + 32] = arg1 - arg2
                        mem[_51444 + 64] = (320 * _51795) + 128
                        _60133 = mem[_50793]
                        mem[_51444 + (320 * _51795) + 128] = mem[_50793]
                        mem[_51444 + (320 * _51795) + 160 len ceil32(_60133)] = mem[_50793 + 32 len ceil32(_60133)]
                        var49001 = ceil32(_60133)
                        if ceil32(_60133) > _60133:
                            mem[_51444 + (320 * _51795) + _60133 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_60133) + _51444 + (320 * _51795) + -mem[64] + 160
                    mem[64] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 544
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 256] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 288] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 320] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 352] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 384] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 416] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 448] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 480] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 512] = 0
                    mem[var36001] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224
                    s = var36001
                    idx = var36002
                    while idx - 1:
                        mem[64] = mem[64] + 320
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 256] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 288] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 320] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 352] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 384] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 416] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 448] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 480] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 512] = 0
                        mem[s + 32] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224
                        s = s + 32
                        idx = idx - 1
                        continue 
                    idx = 0
                    while idx < arg2:
                        if arg1 < idx:
                            revert with 0, 17
                        if arg1 - idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                            revert with 0, 50
                        mem[0] = mem[(32 * arg1 - idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]
                        mem[32] = 12
                        _66005 = sha3(mem[(32 * arg1 - idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192], 12)
                        _66006 = mem[64]
                        mem[64] = mem[64] + 320
                        mem[_66006] = stor12[mem[(32 * arg1 - idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]].field_0
                        mem[_66006 + 32] = stor1[_66005]
                        mem[_66006 + 64] = stor2[_66005]
                        mem[_66006 + 96] = stor3[_66005]
                        mem[_66006 + 128] = stor4[_66005]
                        mem[_66006 + 160] = stor5[_66005]
                        mem[_66006 + 192] = stor6[_66005]
                        mem[_66006 + 224] = stor7[_66005].field_0
                        mem[_66006 + 256] = bool(stor7[_66005].field_160)
                        mem[_66006 + 288] = stor8[_66005]
                        if idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]:
                            revert with 0, 50
                        mem[(32 * idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224] = _66006
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if arg1 < arg2:
                        _65248 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_65248] = 4
                        mem[_65248 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                        _65545 = mem[64]
                        mem[mem[64]] = 96
                        _66002 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                        mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                        idx = 0
                        s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                        t = mem[64] + 128
                        while idx < _66002:
                            _68792 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_68792 + 32]
                            mem[t + 64] = mem[_68792 + 64]
                            mem[t + 96] = mem[_68792 + 96]
                            mem[t + 128] = mem[_68792 + 128]
                            mem[t + 160] = mem[_68792 + 172 len 20]
                            mem[t + 192] = mem[_68792 + 192]
                            mem[t + 224] = mem[_68792 + 236 len 20]
                            mem[t + 256] = bool(mem[_68792 + 256])
                            mem[t + 288] = mem[_68792 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_65545 + 32] = 0
                        mem[_65545 + 64] = (320 * _66002) + 128
                        _69289 = mem[_65248]
                        mem[_65545 + (320 * _66002) + 128] = mem[_65248]
                        mem[_65545 + (320 * _66002) + 160 len ceil32(_69289)] = mem[_65248 + 32 len ceil32(_69289)]
                        var53001 = ceil32(_69289)
                        if ceil32(_69289) > _69289:
                            mem[_65545 + (320 * _66002) + _69289 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_69289) + _65545 + (320 * _66002) + -mem[64] + 160
                    _66003 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_66003] = 7
                    mem[_66003 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                    _66316 = mem[64]
                    mem[mem[64]] = 96
                    _66492 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                    mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                    idx = 0
                    s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                    t = mem[64] + 128
                    while idx < _66492:
                        _68799 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_68799 + 32]
                        mem[t + 64] = mem[_68799 + 64]
                        mem[t + 96] = mem[_68799 + 96]
                        mem[t + 128] = mem[_68799 + 128]
                        mem[t + 160] = mem[_68799 + 172 len 20]
                        mem[t + 192] = mem[_68799 + 192]
                        mem[t + 224] = mem[_68799 + 236 len 20]
                        mem[t + 256] = bool(mem[_68799 + 256])
                        mem[t + 288] = mem[_68799 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_66316 + 32] = arg1 - arg2
                    mem[_66316 + 64] = (320 * _66492) + 128
                    _69290 = mem[_66003]
                    mem[_66316 + (320 * _66492) + 128] = mem[_66003]
                    mem[_66316 + (320 * _66492) + 160 len ceil32(_69290)] = mem[_66003 + 32 len ceil32(_69290)]
                    var56001 = ceil32(_69290)
                    if ceil32(_69290) > _69290:
                        mem[_66316 + (320 * _66492) + _69290 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_69290) + _66316 + (320 * _66492) + -mem[64] + 160
                if 1 > !arg1:
                    revert with 0, 17
                if arg1 + 1 > test266151307():
                    revert with 0, 65
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192] = arg1 + 1
                mem[64] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 224
                if not arg1 + 1:
                    idx = 0
                    while idx < arg1 + 1:
                        if arg1 < idx:
                            revert with 0, 17
                        if arg1 - idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                            revert with 0, 50
                        mem[0] = mem[(32 * arg1 - idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]
                        mem[32] = 12
                        _50801 = sha3(mem[(32 * arg1 - idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192], 12)
                        _50802 = mem[64]
                        mem[64] = mem[64] + 320
                        mem[_50802] = stor12[mem[(32 * arg1 - idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]].field_0
                        mem[_50802 + 32] = stor1[_50801]
                        mem[_50802 + 64] = stor2[_50801]
                        mem[_50802 + 96] = stor3[_50801]
                        mem[_50802 + 128] = stor4[_50801]
                        mem[_50802 + 160] = stor5[_50801]
                        mem[_50802 + 192] = stor6[_50801]
                        mem[_50802 + 224] = stor7[_50801].field_0
                        mem[_50802 + 256] = bool(stor7[_50801].field_160)
                        mem[_50802 + 288] = stor8[_50801]
                        if idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]:
                            revert with 0, 50
                        mem[(32 * idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224] = _50802
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if arg1 < arg1 + 1:
                        _49301 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_49301] = 4
                        mem[_49301 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                        _49832 = mem[64]
                        mem[mem[64]] = 96
                        _50798 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                        mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                        idx = 0
                        s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                        t = mem[64] + 128
                        while idx < _50798:
                            _59566 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_59566 + 32]
                            mem[t + 64] = mem[_59566 + 64]
                            mem[t + 96] = mem[_59566 + 96]
                            mem[t + 128] = mem[_59566 + 128]
                            mem[t + 160] = mem[_59566 + 172 len 20]
                            mem[t + 192] = mem[_59566 + 192]
                            mem[t + 224] = mem[_59566 + 236 len 20]
                            mem[t + 256] = bool(mem[_59566 + 256])
                            mem[t + 288] = mem[_59566 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_49832 + 32] = 0
                        mem[_49832 + 64] = (320 * _50798) + 128
                        _60134 = mem[_49301]
                        mem[_49832 + (320 * _50798) + 128] = mem[_49301]
                        mem[_49832 + (320 * _50798) + 160 len ceil32(_60134)] = mem[_49301 + 32 len ceil32(_60134)]
                        var50001 = ceil32(_60134)
                        if ceil32(_60134) > _60134:
                            mem[_49832 + (320 * _50798) + _60134 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_60134) + _49832 + (320 * _50798) + -mem[64] + 160
                    _50799 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_50799] = 7
                    mem[_50799 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                    _51453 = mem[64]
                    mem[mem[64]] = 96
                    _51797 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                    mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                    idx = 0
                    s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                    t = mem[64] + 128
                    while idx < _51797:
                        _59573 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_59573 + 32]
                        mem[t + 64] = mem[_59573 + 64]
                        mem[t + 96] = mem[_59573 + 96]
                        mem[t + 128] = mem[_59573 + 128]
                        mem[t + 160] = mem[_59573 + 172 len 20]
                        mem[t + 192] = mem[_59573 + 192]
                        mem[t + 224] = mem[_59573 + 236 len 20]
                        mem[t + 256] = bool(mem[_59573 + 256])
                        mem[t + 288] = mem[_59573 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_51453 + 32] = -1
                    mem[_51453 + 64] = (320 * _51797) + 128
                    _60135 = mem[_50799]
                    mem[_51453 + (320 * _51797) + 128] = mem[_50799]
                    mem[_51453 + (320 * _51797) + 160 len ceil32(_60135)] = mem[_50799 + 32 len ceil32(_60135)]
                    var53001 = ceil32(_60135)
                    if ceil32(_60135) > _60135:
                        mem[_51453 + (320 * _51797) + _60135 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_60135) + _51453 + (320 * _51797) + -mem[64] + 160
                mem[64] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 544
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 224] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 256] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 288] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 320] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 352] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 384] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 416] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 448] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 480] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 512] = 0
                mem[var40001] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 224
                s = var40001
                idx = var40002
                while idx - 1:
                    mem[64] = mem[64] + 320
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 224] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 256] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 288] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 320] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 352] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 384] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 416] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 448] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 480] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 512] = 0
                    mem[s + 32] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 224
                    s = s + 32
                    idx = idx - 1
                    continue 
                idx = 0
                while idx < arg1 + 1:
                    if arg1 < idx:
                        revert with 0, 17
                    if arg1 - idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                        revert with 0, 50
                    mem[0] = mem[(32 * arg1 - idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]
                    mem[32] = 12
                    _66013 = sha3(mem[(32 * arg1 - idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192], 12)
                    _66014 = mem[64]
                    mem[64] = mem[64] + 320
                    mem[_66014] = stor12[mem[(32 * arg1 - idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]].field_0
                    mem[_66014 + 32] = stor1[_66013]
                    mem[_66014 + 64] = stor2[_66013]
                    mem[_66014 + 96] = stor3[_66013]
                    mem[_66014 + 128] = stor4[_66013]
                    mem[_66014 + 160] = stor5[_66013]
                    mem[_66014 + 192] = stor6[_66013]
                    mem[_66014 + 224] = stor7[_66013].field_0
                    mem[_66014 + 256] = bool(stor7[_66013].field_160)
                    mem[_66014 + 288] = stor8[_66013]
                    if idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]:
                        revert with 0, 50
                    mem[(32 * idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224] = _66014
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
                if arg1 < arg1 + 1:
                    _65249 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_65249] = 4
                    mem[_65249 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                    _65549 = mem[64]
                    mem[mem[64]] = 96
                    _66010 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                    mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                    idx = 0
                    s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                    t = mem[64] + 128
                    while idx < _66010:
                        _68806 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_68806 + 32]
                        mem[t + 64] = mem[_68806 + 64]
                        mem[t + 96] = mem[_68806 + 96]
                        mem[t + 128] = mem[_68806 + 128]
                        mem[t + 160] = mem[_68806 + 172 len 20]
                        mem[t + 192] = mem[_68806 + 192]
                        mem[t + 224] = mem[_68806 + 236 len 20]
                        mem[t + 256] = bool(mem[_68806 + 256])
                        mem[t + 288] = mem[_68806 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_65549 + 32] = 0
                    mem[_65549 + 64] = (320 * _66010) + 128
                    _69291 = mem[_65249]
                    mem[_65549 + (320 * _66010) + 128] = mem[_65249]
                    mem[_65549 + (320 * _66010) + 160 len ceil32(_69291)] = mem[_65249 + 32 len ceil32(_69291)]
                    var57001 = ceil32(_69291)
                    if ceil32(_69291) > _69291:
                        mem[_65549 + (320 * _66010) + _69291 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_69291) + _65549 + (320 * _66010) + -mem[64] + 160
                _66011 = mem[64]
                mem[64] = mem[64] + 64
                mem[_66011] = 7
                mem[_66011 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                _66324 = mem[64]
                mem[mem[64]] = 96
                _66494 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                idx = 0
                s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                t = mem[64] + 128
                while idx < _66494:
                    _68813 = mem[s]
                    mem[t] = mem[mem[s]]
                    mem[t + 32] = mem[_68813 + 32]
                    mem[t + 64] = mem[_68813 + 64]
                    mem[t + 96] = mem[_68813 + 96]
                    mem[t + 128] = mem[_68813 + 128]
                    mem[t + 160] = mem[_68813 + 172 len 20]
                    mem[t + 192] = mem[_68813 + 192]
                    mem[t + 224] = mem[_68813 + 236 len 20]
                    mem[t + 256] = bool(mem[_68813 + 256])
                    mem[t + 288] = mem[_68813 + 288]
                    idx = idx + 1
                    s = s + 32
                    t = t + 320
                    continue 
                mem[_66324 + 32] = -1
                mem[_66324 + 64] = (320 * _66494) + 128
                _69292 = mem[_66011]
                mem[_66324 + (320 * _66494) + 128] = mem[_66011]
                mem[_66324 + (320 * _66494) + 160 len ceil32(_69292)] = mem[_66011 + 32 len ceil32(_69292)]
                var60001 = ceil32(_69292)
                if ceil32(_69292) > _69292:
                    mem[_66324 + (320 * _66494) + _69292 + 160] = 0
                return memory
                  from mem[64]
                   len ceil32(_69292) + _66324 + (320 * _66494) + -mem[64] + 160
            if stor15[address(arg5)].field_0 < arg1:
                revert with 0, 17
            if arg2 <= stor15[address(arg5)].field_0 - arg1:
                if arg2 > test266151307():
                    revert with 0, 65
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192] = arg2
                mem[64] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224
                if not arg2:
                    idx = 0
                    while idx < arg2:
                        if arg1 > !idx:
                            revert with 0, 17
                        if arg1 + idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                            revert with 0, 50
                        mem[0] = mem[(32 * arg1 + idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]
                        mem[32] = 12
                        _50805 = sha3(mem[(32 * arg1 + idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192], 12)
                        _50806 = mem[64]
                        mem[64] = mem[64] + 320
                        mem[_50806] = stor12[mem[(32 * arg1 + idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]].field_0
                        mem[_50806 + 32] = stor1[_50805]
                        mem[_50806 + 64] = stor2[_50805]
                        mem[_50806 + 96] = stor3[_50805]
                        mem[_50806 + 128] = stor4[_50805]
                        mem[_50806 + 160] = stor5[_50805]
                        mem[_50806 + 192] = stor6[_50805]
                        mem[_50806 + 224] = stor7[_50805].field_0
                        mem[_50806 + 256] = bool(stor7[_50805].field_160)
                        mem[_50806 + 288] = stor8[_50805]
                        if idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]:
                            revert with 0, 50
                        mem[(32 * idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224] = _50806
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if arg1 > !arg2:
                        revert with 0, 17
                    if arg1 > !arg2:
                        revert with 0, 17
                    if arg1 + arg2 < mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                        _51798 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_51798] = 7
                        mem[_51798 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                        _52809 = mem[64]
                        mem[mem[64]] = 96
                        _53265 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                        mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                        idx = 0
                        s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                        t = mem[64] + 128
                        while idx < _53265:
                            _59580 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_59580 + 32]
                            mem[t + 64] = mem[_59580 + 64]
                            mem[t + 96] = mem[_59580 + 96]
                            mem[t + 128] = mem[_59580 + 128]
                            mem[t + 160] = mem[_59580 + 172 len 20]
                            mem[t + 192] = mem[_59580 + 192]
                            mem[t + 224] = mem[_59580 + 236 len 20]
                            mem[t + 256] = bool(mem[_59580 + 256])
                            mem[t + 288] = mem[_59580 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_52809 + 32] = arg1 + arg2
                        mem[_52809 + 64] = (320 * _53265) + 128
                        _60136 = mem[_51798]
                        mem[_52809 + (320 * _53265) + 128] = mem[_51798]
                        mem[_52809 + (320 * _53265) + 160 len ceil32(_60136)] = mem[_51798 + 32 len ceil32(_60136)]
                        var55001 = ceil32(_60136)
                        if ceil32(_60136) > _60136:
                            mem[_52809 + (320 * _53265) + _60136 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_60136) + _52809 + (320 * _53265) + -mem[64] + 160
                    _51799 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_51799] = 4
                    mem[_51799 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                    _52810 = mem[64]
                    mem[mem[64]] = 96
                    _53266 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                    mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                    idx = 0
                    s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                    t = mem[64] + 128
                    while idx < _53266:
                        _59587 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_59587 + 32]
                        mem[t + 64] = mem[_59587 + 64]
                        mem[t + 96] = mem[_59587 + 96]
                        mem[t + 128] = mem[_59587 + 128]
                        mem[t + 160] = mem[_59587 + 172 len 20]
                        mem[t + 192] = mem[_59587 + 192]
                        mem[t + 224] = mem[_59587 + 236 len 20]
                        mem[t + 256] = bool(mem[_59587 + 256])
                        mem[t + 288] = mem[_59587 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_52810 + 32] = arg1 + arg2
                    mem[_52810 + 64] = (320 * _53266) + 128
                    _60137 = mem[_51799]
                    mem[_52810 + (320 * _53266) + 128] = mem[_51799]
                    mem[_52810 + (320 * _53266) + 160 len ceil32(_60137)] = mem[_51799 + 32 len ceil32(_60137)]
                    var55001 = ceil32(_60137)
                    if ceil32(_60137) > _60137:
                        mem[_52810 + (320 * _53266) + _60137 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_60137) + _52810 + (320 * _53266) + -mem[64] + 160
                mem[64] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 544
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 256] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 288] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 320] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 352] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 384] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 416] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 448] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 480] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 512] = 0
                mem[var39001] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224
                s = var39001
                idx = var39002
                while idx - 1:
                    mem[64] = mem[64] + 320
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 256] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 288] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 320] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 352] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 384] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 416] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 448] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 480] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 512] = 0
                    mem[s + 32] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224
                    s = s + 32
                    idx = idx - 1
                    continue 
                idx = 0
                while idx < arg2:
                    if arg1 > !idx:
                        revert with 0, 17
                    if arg1 + idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                        revert with 0, 50
                    mem[0] = mem[(32 * arg1 + idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]
                    mem[32] = 12
                    _66019 = sha3(mem[(32 * arg1 + idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192], 12)
                    _66020 = mem[64]
                    mem[64] = mem[64] + 320
                    mem[_66020] = stor12[mem[(32 * arg1 + idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]].field_0
                    mem[_66020 + 32] = stor1[_66019]
                    mem[_66020 + 64] = stor2[_66019]
                    mem[_66020 + 96] = stor3[_66019]
                    mem[_66020 + 128] = stor4[_66019]
                    mem[_66020 + 160] = stor5[_66019]
                    mem[_66020 + 192] = stor6[_66019]
                    mem[_66020 + 224] = stor7[_66019].field_0
                    mem[_66020 + 256] = bool(stor7[_66019].field_160)
                    mem[_66020 + 288] = stor8[_66019]
                    if idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]:
                        revert with 0, 50
                    mem[(32 * idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224] = _66020
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
                if arg1 > !arg2:
                    revert with 0, 17
                if arg1 > !arg2:
                    revert with 0, 17
                if arg1 + arg2 < mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                    _66495 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_66495] = 7
                    mem[_66495 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                    _66760 = mem[64]
                    mem[mem[64]] = 96
                    _66996 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                    mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                    idx = 0
                    s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                    t = mem[64] + 128
                    while idx < _66996:
                        _68820 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_68820 + 32]
                        mem[t + 64] = mem[_68820 + 64]
                        mem[t + 96] = mem[_68820 + 96]
                        mem[t + 128] = mem[_68820 + 128]
                        mem[t + 160] = mem[_68820 + 172 len 20]
                        mem[t + 192] = mem[_68820 + 192]
                        mem[t + 224] = mem[_68820 + 236 len 20]
                        mem[t + 256] = bool(mem[_68820 + 256])
                        mem[t + 288] = mem[_68820 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_66760 + 32] = arg1 + arg2
                    mem[_66760 + 64] = (320 * _66996) + 128
                    _69293 = mem[_66495]
                    mem[_66760 + (320 * _66996) + 128] = mem[_66495]
                    mem[_66760 + (320 * _66996) + 160 len ceil32(_69293)] = mem[_66495 + 32 len ceil32(_69293)]
                    var62001 = ceil32(_69293)
                    if ceil32(_69293) > _69293:
                        mem[_66760 + (320 * _66996) + _69293 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_69293) + _66760 + (320 * _66996) + -mem[64] + 160
                _66496 = mem[64]
                mem[64] = mem[64] + 64
                mem[_66496] = 4
                mem[_66496 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                _66761 = mem[64]
                mem[mem[64]] = 96
                _66997 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                idx = 0
                s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                t = mem[64] + 128
                while idx < _66997:
                    _68827 = mem[s]
                    mem[t] = mem[mem[s]]
                    mem[t + 32] = mem[_68827 + 32]
                    mem[t + 64] = mem[_68827 + 64]
                    mem[t + 96] = mem[_68827 + 96]
                    mem[t + 128] = mem[_68827 + 128]
                    mem[t + 160] = mem[_68827 + 172 len 20]
                    mem[t + 192] = mem[_68827 + 192]
                    mem[t + 224] = mem[_68827 + 236 len 20]
                    mem[t + 256] = bool(mem[_68827 + 256])
                    mem[t + 288] = mem[_68827 + 288]
                    idx = idx + 1
                    s = s + 32
                    t = t + 320
                    continue 
                mem[_66761 + 32] = arg1 + arg2
                mem[_66761 + 64] = (320 * _66997) + 128
                _69294 = mem[_66496]
                mem[_66761 + (320 * _66997) + 128] = mem[_66496]
                mem[_66761 + (320 * _66997) + 160 len ceil32(_69294)] = mem[_66496 + 32 len ceil32(_69294)]
                var62001 = ceil32(_69294)
                if ceil32(_69294) > _69294:
                    mem[_66761 + (320 * _66997) + _69294 + 160] = 0
                return memory
                  from mem[64]
                   len ceil32(_69294) + _66761 + (320 * _66997) + -mem[64] + 160
            if stor15[address(arg5)].field_0 < arg1:
                revert with 0, 17
            if stor15[address(arg5)].field_0 - arg1 > test266151307():
                revert with 0, 65
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192] = stor15[address(arg5)].field_0 - arg1
            mem[64] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 224
            if not stor15[address(arg5)].field_0 - arg1:
                idx = 0
                while idx < stor15[address(arg5)].field_0 - arg1:
                    if arg1 > !idx:
                        revert with 0, 17
                    if arg1 + idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                        revert with 0, 50
                    mem[0] = mem[(32 * arg1 + idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]
                    mem[32] = 12
                    _50809 = sha3(mem[(32 * arg1 + idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192], 12)
                    _50810 = mem[64]
                    mem[64] = mem[64] + 320
                    mem[_50810] = stor12[mem[(32 * arg1 + idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]].field_0
                    mem[_50810 + 32] = stor1[_50809]
                    mem[_50810 + 64] = stor2[_50809]
                    mem[_50810 + 96] = stor3[_50809]
                    mem[_50810 + 128] = stor4[_50809]
                    mem[_50810 + 160] = stor5[_50809]
                    mem[_50810 + 192] = stor6[_50809]
                    mem[_50810 + 224] = stor7[_50809].field_0
                    mem[_50810 + 256] = bool(stor7[_50809].field_160)
                    mem[_50810 + 288] = stor8[_50809]
                    if idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]:
                        revert with 0, 50
                    mem[(32 * idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224] = _50810
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
                if arg1 > !(stor15[address(arg5)].field_0 - arg1):
                    revert with 0, 17
                if arg1 > !(stor15[address(arg5)].field_0 - arg1):
                    revert with 0, 17
                if stor15[address(arg5)].field_0 < mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                    _51800 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_51800] = 7
                    mem[_51800 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                    _52815 = mem[64]
                    mem[mem[64]] = 96
                    _53267 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                    mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                    idx = 0
                    s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                    t = mem[64] + 128
                    while idx < _53267:
                        _59594 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_59594 + 32]
                        mem[t + 64] = mem[_59594 + 64]
                        mem[t + 96] = mem[_59594 + 96]
                        mem[t + 128] = mem[_59594 + 128]
                        mem[t + 160] = mem[_59594 + 172 len 20]
                        mem[t + 192] = mem[_59594 + 192]
                        mem[t + 224] = mem[_59594 + 236 len 20]
                        mem[t + 256] = bool(mem[_59594 + 256])
                        mem[t + 288] = mem[_59594 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_52815 + 32] = stor15[address(arg5)].field_0
                    mem[_52815 + 64] = (320 * _53267) + 128
                    _60138 = mem[_51800]
                    mem[_52815 + (320 * _53267) + 128] = mem[_51800]
                    mem[_52815 + (320 * _53267) + 160 len ceil32(_60138)] = mem[_51800 + 32 len ceil32(_60138)]
                    var59001 = ceil32(_60138)
                    if ceil32(_60138) > _60138:
                        mem[_52815 + (320 * _53267) + _60138 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_60138) + _52815 + (320 * _53267) + -mem[64] + 160
                _51801 = mem[64]
                mem[64] = mem[64] + 64
                mem[_51801] = 4
                mem[_51801 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                _52816 = mem[64]
                mem[mem[64]] = 96
                _53268 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                idx = 0
                s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                t = mem[64] + 128
                while idx < _53268:
                    _59601 = mem[s]
                    mem[t] = mem[mem[s]]
                    mem[t + 32] = mem[_59601 + 32]
                    mem[t + 64] = mem[_59601 + 64]
                    mem[t + 96] = mem[_59601 + 96]
                    mem[t + 128] = mem[_59601 + 128]
                    mem[t + 160] = mem[_59601 + 172 len 20]
                    mem[t + 192] = mem[_59601 + 192]
                    mem[t + 224] = mem[_59601 + 236 len 20]
                    mem[t + 256] = bool(mem[_59601 + 256])
                    mem[t + 288] = mem[_59601 + 288]
                    idx = idx + 1
                    s = s + 32
                    t = t + 320
                    continue 
                mem[_52816 + 32] = stor15[address(arg5)].field_0
                mem[_52816 + 64] = (320 * _53268) + 128
                _60139 = mem[_51801]
                mem[_52816 + (320 * _53268) + 128] = mem[_51801]
                mem[_52816 + (320 * _53268) + 160 len ceil32(_60139)] = mem[_51801 + 32 len ceil32(_60139)]
                var59001 = ceil32(_60139)
                if ceil32(_60139) > _60139:
                    mem[_52816 + (320 * _53268) + _60139 + 160] = 0
                return memory
                  from mem[64]
                   len ceil32(_60139) + _52816 + (320 * _53268) + -mem[64] + 160
            mem[64] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 544
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 224] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 256] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 288] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 320] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 352] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 384] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 416] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 448] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 480] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 512] = 0
            mem[var43001] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 224
            s = var43001
            idx = var43002
            while idx - 1:
                mem[64] = mem[64] + 320
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 224] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 256] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 288] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 320] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 352] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 384] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 416] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 448] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 480] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 512] = 0
                mem[s + 32] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 224
                s = s + 32
                idx = idx - 1
                continue 
            idx = 0
            while idx < stor15[address(arg5)].field_0 - arg1:
                if arg1 > !idx:
                    revert with 0, 17
                if arg1 + idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                    revert with 0, 50
                mem[0] = mem[(32 * arg1 + idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]
                mem[32] = 12
                _66025 = sha3(mem[(32 * arg1 + idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192], 12)
                _66026 = mem[64]
                mem[64] = mem[64] + 320
                mem[_66026] = stor12[mem[(32 * arg1 + idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]].field_0
                mem[_66026 + 32] = stor1[_66025]
                mem[_66026 + 64] = stor2[_66025]
                mem[_66026 + 96] = stor3[_66025]
                mem[_66026 + 128] = stor4[_66025]
                mem[_66026 + 160] = stor5[_66025]
                mem[_66026 + 192] = stor6[_66025]
                mem[_66026 + 224] = stor7[_66025].field_0
                mem[_66026 + 256] = bool(stor7[_66025].field_160)
                mem[_66026 + 288] = stor8[_66025]
                if idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]:
                    revert with 0, 50
                mem[(32 * idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224] = _66026
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
            if arg1 > !(stor15[address(arg5)].field_0 - arg1):
                revert with 0, 17
            if arg1 > !(stor15[address(arg5)].field_0 - arg1):
                revert with 0, 17
            if stor15[address(arg5)].field_0 < mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                _66497 = mem[64]
                mem[64] = mem[64] + 64
                mem[_66497] = 7
                mem[_66497 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                _66762 = mem[64]
                mem[mem[64]] = 96
                _66998 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                idx = 0
                s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                t = mem[64] + 128
                while idx < _66998:
                    _68834 = mem[s]
                    mem[t] = mem[mem[s]]
                    mem[t + 32] = mem[_68834 + 32]
                    mem[t + 64] = mem[_68834 + 64]
                    mem[t + 96] = mem[_68834 + 96]
                    mem[t + 128] = mem[_68834 + 128]
                    mem[t + 160] = mem[_68834 + 172 len 20]
                    mem[t + 192] = mem[_68834 + 192]
                    mem[t + 224] = mem[_68834 + 236 len 20]
                    mem[t + 256] = bool(mem[_68834 + 256])
                    mem[t + 288] = mem[_68834 + 288]
                    idx = idx + 1
                    s = s + 32
                    t = t + 320
                    continue 
                mem[_66762 + 32] = stor15[address(arg5)].field_0
                mem[_66762 + 64] = (320 * _66998) + 128
                _69295 = mem[_66497]
                mem[_66762 + (320 * _66998) + 128] = mem[_66497]
                mem[_66762 + (320 * _66998) + 160 len ceil32(_69295)] = mem[_66497 + 32 len ceil32(_69295)]
                var66001 = ceil32(_69295)
                if ceil32(_69295) > _69295:
                    mem[_66762 + (320 * _66998) + _69295 + 160] = 0
                return memory
                  from mem[64]
                   len ceil32(_69295) + _66762 + (320 * _66998) + -mem[64] + 160
            _66498 = mem[64]
            mem[64] = mem[64] + 64
            mem[_66498] = 4
            mem[_66498 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
            _66763 = mem[64]
            mem[mem[64]] = 96
            _66999 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
            mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
            idx = 0
            s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
            t = mem[64] + 128
            while idx < _66999:
                _68841 = mem[s]
                mem[t] = mem[mem[s]]
                mem[t + 32] = mem[_68841 + 32]
                mem[t + 64] = mem[_68841 + 64]
                mem[t + 96] = mem[_68841 + 96]
                mem[t + 128] = mem[_68841 + 128]
                mem[t + 160] = mem[_68841 + 172 len 20]
                mem[t + 192] = mem[_68841 + 192]
                mem[t + 224] = mem[_68841 + 236 len 20]
                mem[t + 256] = bool(mem[_68841 + 256])
                mem[t + 288] = mem[_68841 + 288]
                idx = idx + 1
                s = s + 32
                t = t + 320
                continue 
            mem[_66763 + 32] = stor15[address(arg5)].field_0
            mem[_66763 + 64] = (320 * _66999) + 128
            _69296 = mem[_66498]
            mem[_66763 + (320 * _66999) + 128] = mem[_66498]
            mem[_66763 + (320 * _66999) + 160 len ceil32(_69296)] = mem[_66498 + 32 len ceil32(_69296)]
            var66001 = ceil32(_69296)
            if ceil32(_69296) > _69296:
                mem[_66763 + (320 * _66999) + _69296 + 160] = 0
            return memory
              from mem[64]
               len ceil32(_69296) + _66763 + (320 * _66999) + -mem[64] + 160
        if stor15[address(arg5)].field_0 < 1:
            revert with 0, 17
        if arg3:
            if arg2 <= stor15[address(arg5)].field_0 - 1:
                if arg2 > test266151307():
                    revert with 0, 65
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192] = arg2
                mem[64] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224
                if not arg2:
                    idx = 0
                    while idx < arg2:
                        if stor15[address(arg5)].field_0 - 1 < idx:
                            revert with 0, 17
                        if stor15[address(arg5)].field_0 + -idx - 1 >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                            revert with 0, 50
                        mem[0] = mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]
                        mem[32] = 12
                        _50815 = sha3(mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192], 12)
                        _50816 = mem[64]
                        mem[64] = mem[64] + 320
                        mem[_50816] = stor12[mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]].field_0
                        mem[_50816 + 32] = stor1[_50815]
                        mem[_50816 + 64] = stor2[_50815]
                        mem[_50816 + 96] = stor3[_50815]
                        mem[_50816 + 128] = stor4[_50815]
                        mem[_50816 + 160] = stor5[_50815]
                        mem[_50816 + 192] = stor6[_50815]
                        mem[_50816 + 224] = stor7[_50815].field_0
                        mem[_50816 + 256] = bool(stor7[_50815].field_160)
                        mem[_50816 + 288] = stor8[_50815]
                        if idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]:
                            revert with 0, 50
                        mem[(32 * idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224] = _50816
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if stor15[address(arg5)].field_0 - 1 < arg2:
                        _49302 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_49302] = 4
                        mem[_49302 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                        _49836 = mem[64]
                        mem[mem[64]] = 96
                        _50812 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                        mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                        idx = 0
                        s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                        t = mem[64] + 128
                        while idx < _50812:
                            _59608 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_59608 + 32]
                            mem[t + 64] = mem[_59608 + 64]
                            mem[t + 96] = mem[_59608 + 96]
                            mem[t + 128] = mem[_59608 + 128]
                            mem[t + 160] = mem[_59608 + 172 len 20]
                            mem[t + 192] = mem[_59608 + 192]
                            mem[t + 224] = mem[_59608 + 236 len 20]
                            mem[t + 256] = bool(mem[_59608 + 256])
                            mem[t + 288] = mem[_59608 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_49836 + 32] = 0
                        mem[_49836 + 64] = (320 * _50812) + 128
                        _60140 = mem[_49302]
                        mem[_49836 + (320 * _50812) + 128] = mem[_49302]
                        mem[_49836 + (320 * _50812) + 160 len ceil32(_60140)] = mem[_49302 + 32 len ceil32(_60140)]
                        var50001 = ceil32(_60140)
                        if ceil32(_60140) > _60140:
                            mem[_49836 + (320 * _50812) + _60140 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_60140) + _49836 + (320 * _50812) + -mem[64] + 160
                    _50813 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_50813] = 7
                    mem[_50813 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                    _51462 = mem[64]
                    mem[mem[64]] = 96
                    _51803 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                    mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                    idx = 0
                    s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                    t = mem[64] + 128
                    while idx < _51803:
                        _59615 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_59615 + 32]
                        mem[t + 64] = mem[_59615 + 64]
                        mem[t + 96] = mem[_59615 + 96]
                        mem[t + 128] = mem[_59615 + 128]
                        mem[t + 160] = mem[_59615 + 172 len 20]
                        mem[t + 192] = mem[_59615 + 192]
                        mem[t + 224] = mem[_59615 + 236 len 20]
                        mem[t + 256] = bool(mem[_59615 + 256])
                        mem[t + 288] = mem[_59615 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_51462 + 32] = stor15[address(arg5)].field_0 + -arg2 - 1
                    mem[_51462 + 64] = (320 * _51803) + 128
                    _60141 = mem[_50813]
                    mem[_51462 + (320 * _51803) + 128] = mem[_50813]
                    mem[_51462 + (320 * _51803) + 160 len ceil32(_60141)] = mem[_50813 + 32 len ceil32(_60141)]
                    var53001 = ceil32(_60141)
                    if ceil32(_60141) > _60141:
                        mem[_51462 + (320 * _51803) + _60141 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_60141) + _51462 + (320 * _51803) + -mem[64] + 160
                mem[64] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 544
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 256] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 288] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 320] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 352] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 384] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 416] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 448] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 480] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 512] = 0
                mem[var40001] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224
                s = var40001
                idx = var40002
                while idx - 1:
                    mem[64] = mem[64] + 320
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 256] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 288] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 320] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 352] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 384] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 416] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 448] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 480] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 512] = 0
                    mem[s + 32] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224
                    s = s + 32
                    idx = idx - 1
                    continue 
                idx = 0
                while idx < arg2:
                    if stor15[address(arg5)].field_0 - 1 < idx:
                        revert with 0, 17
                    if stor15[address(arg5)].field_0 + -idx - 1 >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                        revert with 0, 50
                    mem[0] = mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]
                    mem[32] = 12
                    _66033 = sha3(mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192], 12)
                    _66034 = mem[64]
                    mem[64] = mem[64] + 320
                    mem[_66034] = stor12[mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]].field_0
                    mem[_66034 + 32] = stor1[_66033]
                    mem[_66034 + 64] = stor2[_66033]
                    mem[_66034 + 96] = stor3[_66033]
                    mem[_66034 + 128] = stor4[_66033]
                    mem[_66034 + 160] = stor5[_66033]
                    mem[_66034 + 192] = stor6[_66033]
                    mem[_66034 + 224] = stor7[_66033].field_0
                    mem[_66034 + 256] = bool(stor7[_66033].field_160)
                    mem[_66034 + 288] = stor8[_66033]
                    if idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]:
                        revert with 0, 50
                    mem[(32 * idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224] = _66034
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
                if stor15[address(arg5)].field_0 - 1 < arg2:
                    _65250 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_65250] = 4
                    mem[_65250 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                    _65559 = mem[64]
                    mem[mem[64]] = 96
                    _66030 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                    mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                    idx = 0
                    s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                    t = mem[64] + 128
                    while idx < _66030:
                        _68848 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_68848 + 32]
                        mem[t + 64] = mem[_68848 + 64]
                        mem[t + 96] = mem[_68848 + 96]
                        mem[t + 128] = mem[_68848 + 128]
                        mem[t + 160] = mem[_68848 + 172 len 20]
                        mem[t + 192] = mem[_68848 + 192]
                        mem[t + 224] = mem[_68848 + 236 len 20]
                        mem[t + 256] = bool(mem[_68848 + 256])
                        mem[t + 288] = mem[_68848 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_65559 + 32] = 0
                    mem[_65559 + 64] = (320 * _66030) + 128
                    _69297 = mem[_65250]
                    mem[_65559 + (320 * _66030) + 128] = mem[_65250]
                    mem[_65559 + (320 * _66030) + 160 len ceil32(_69297)] = mem[_65250 + 32 len ceil32(_69297)]
                    var57001 = ceil32(_69297)
                    if ceil32(_69297) > _69297:
                        mem[_65559 + (320 * _66030) + _69297 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_69297) + _65559 + (320 * _66030) + -mem[64] + 160
                _66031 = mem[64]
                mem[64] = mem[64] + 64
                mem[_66031] = 7
                mem[_66031 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                _66332 = mem[64]
                mem[mem[64]] = 96
                _66500 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                idx = 0
                s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                t = mem[64] + 128
                while idx < _66500:
                    _68855 = mem[s]
                    mem[t] = mem[mem[s]]
                    mem[t + 32] = mem[_68855 + 32]
                    mem[t + 64] = mem[_68855 + 64]
                    mem[t + 96] = mem[_68855 + 96]
                    mem[t + 128] = mem[_68855 + 128]
                    mem[t + 160] = mem[_68855 + 172 len 20]
                    mem[t + 192] = mem[_68855 + 192]
                    mem[t + 224] = mem[_68855 + 236 len 20]
                    mem[t + 256] = bool(mem[_68855 + 256])
                    mem[t + 288] = mem[_68855 + 288]
                    idx = idx + 1
                    s = s + 32
                    t = t + 320
                    continue 
                mem[_66332 + 32] = stor15[address(arg5)].field_0 + -arg2 - 1
                mem[_66332 + 64] = (320 * _66500) + 128
                _69298 = mem[_66031]
                mem[_66332 + (320 * _66500) + 128] = mem[_66031]
                mem[_66332 + (320 * _66500) + 160 len ceil32(_69298)] = mem[_66031 + 32 len ceil32(_69298)]
                var60001 = ceil32(_69298)
                if ceil32(_69298) > _69298:
                    mem[_66332 + (320 * _66500) + _69298 + 160] = 0
                return memory
                  from mem[64]
                   len ceil32(_69298) + _66332 + (320 * _66500) + -mem[64] + 160
            if 1 > !(stor15[address(arg5)].field_0 - 1):
                revert with 0, 17
            if stor15[address(arg5)].field_0 > test266151307():
                revert with 0, 65
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192] = stor15[address(arg5)].field_0
            mem[64] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 224
            if not stor15[address(arg5)].field_0:
                idx = 0
                while idx < stor15[address(arg5)].field_0:
                    if stor15[address(arg5)].field_0 - 1 < idx:
                        revert with 0, 17
                    if stor15[address(arg5)].field_0 + -idx - 1 >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                        revert with 0, 50
                    mem[0] = mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]
                    mem[32] = 12
                    _50821 = sha3(mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192], 12)
                    _50822 = mem[64]
                    mem[64] = mem[64] + 320
                    mem[_50822] = stor12[mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]].field_0
                    mem[_50822 + 32] = stor1[_50821]
                    mem[_50822 + 64] = stor2[_50821]
                    mem[_50822 + 96] = stor3[_50821]
                    mem[_50822 + 128] = stor4[_50821]
                    mem[_50822 + 160] = stor5[_50821]
                    mem[_50822 + 192] = stor6[_50821]
                    mem[_50822 + 224] = stor7[_50821].field_0
                    mem[_50822 + 256] = bool(stor7[_50821].field_160)
                    mem[_50822 + 288] = stor8[_50821]
                    if idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]:
                        revert with 0, 50
                    mem[(32 * idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224] = _50822
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
                if stor15[address(arg5)].field_0 - 1 < stor15[address(arg5)].field_0:
                    _49303 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_49303] = 4
                    mem[_49303 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                    _49838 = mem[64]
                    mem[mem[64]] = 96
                    _50818 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                    mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                    idx = 0
                    s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                    t = mem[64] + 128
                    while idx < _50818:
                        _59622 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_59622 + 32]
                        mem[t + 64] = mem[_59622 + 64]
                        mem[t + 96] = mem[_59622 + 96]
                        mem[t + 128] = mem[_59622 + 128]
                        mem[t + 160] = mem[_59622 + 172 len 20]
                        mem[t + 192] = mem[_59622 + 192]
                        mem[t + 224] = mem[_59622 + 236 len 20]
                        mem[t + 256] = bool(mem[_59622 + 256])
                        mem[t + 288] = mem[_59622 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_49838 + 32] = 0
                    mem[_49838 + 64] = (320 * _50818) + 128
                    _60142 = mem[_49303]
                    mem[_49838 + (320 * _50818) + 128] = mem[_49303]
                    mem[_49838 + (320 * _50818) + 160 len ceil32(_60142)] = mem[_49303 + 32 len ceil32(_60142)]
                    var54001 = ceil32(_60142)
                    if ceil32(_60142) > _60142:
                        mem[_49838 + (320 * _50818) + _60142 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_60142) + _49838 + (320 * _50818) + -mem[64] + 160
                _50819 = mem[64]
                mem[64] = mem[64] + 64
                mem[_50819] = 7
                mem[_50819 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                _51471 = mem[64]
                mem[mem[64]] = 96
                _51805 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                idx = 0
                s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                t = mem[64] + 128
                while idx < _51805:
                    _59629 = mem[s]
                    mem[t] = mem[mem[s]]
                    mem[t + 32] = mem[_59629 + 32]
                    mem[t + 64] = mem[_59629 + 64]
                    mem[t + 96] = mem[_59629 + 96]
                    mem[t + 128] = mem[_59629 + 128]
                    mem[t + 160] = mem[_59629 + 172 len 20]
                    mem[t + 192] = mem[_59629 + 192]
                    mem[t + 224] = mem[_59629 + 236 len 20]
                    mem[t + 256] = bool(mem[_59629 + 256])
                    mem[t + 288] = mem[_59629 + 288]
                    idx = idx + 1
                    s = s + 32
                    t = t + 320
                    continue 
                mem[_51471 + 32] = -1
                mem[_51471 + 64] = (320 * _51805) + 128
                _60143 = mem[_50819]
                mem[_51471 + (320 * _51805) + 128] = mem[_50819]
                mem[_51471 + (320 * _51805) + 160 len ceil32(_60143)] = mem[_50819 + 32 len ceil32(_60143)]
                var57001 = ceil32(_60143)
                if ceil32(_60143) > _60143:
                    mem[_51471 + (320 * _51805) + _60143 + 160] = 0
                return memory
                  from mem[64]
                   len ceil32(_60143) + _51471 + (320 * _51805) + -mem[64] + 160
            mem[64] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 544
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 224] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 256] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 288] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 320] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 352] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 384] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 416] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 448] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 480] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 512] = 0
            mem[var44001] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 224
            s = var44001
            idx = var44002
            while idx - 1:
                mem[64] = mem[64] + 320
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 224] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 256] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 288] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 320] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 352] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 384] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 416] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 448] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 480] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 512] = 0
                mem[s + 32] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 224
                s = s + 32
                idx = idx - 1
                continue 
            idx = 0
            while idx < stor15[address(arg5)].field_0:
                if stor15[address(arg5)].field_0 - 1 < idx:
                    revert with 0, 17
                if stor15[address(arg5)].field_0 + -idx - 1 >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                    revert with 0, 50
                mem[0] = mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]
                mem[32] = 12
                _66041 = sha3(mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192], 12)
                _66042 = mem[64]
                mem[64] = mem[64] + 320
                mem[_66042] = stor12[mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]].field_0
                mem[_66042 + 32] = stor1[_66041]
                mem[_66042 + 64] = stor2[_66041]
                mem[_66042 + 96] = stor3[_66041]
                mem[_66042 + 128] = stor4[_66041]
                mem[_66042 + 160] = stor5[_66041]
                mem[_66042 + 192] = stor6[_66041]
                mem[_66042 + 224] = stor7[_66041].field_0
                mem[_66042 + 256] = bool(stor7[_66041].field_160)
                mem[_66042 + 288] = stor8[_66041]
                if idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]:
                    revert with 0, 50
                mem[(32 * idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224] = _66042
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
            if stor15[address(arg5)].field_0 - 1 < stor15[address(arg5)].field_0:
                _65251 = mem[64]
                mem[64] = mem[64] + 64
                mem[_65251] = 4
                mem[_65251 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                _65563 = mem[64]
                mem[mem[64]] = 96
                _66038 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                idx = 0
                s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                t = mem[64] + 128
                while idx < _66038:
                    _68862 = mem[s]
                    mem[t] = mem[mem[s]]
                    mem[t + 32] = mem[_68862 + 32]
                    mem[t + 64] = mem[_68862 + 64]
                    mem[t + 96] = mem[_68862 + 96]
                    mem[t + 128] = mem[_68862 + 128]
                    mem[t + 160] = mem[_68862 + 172 len 20]
                    mem[t + 192] = mem[_68862 + 192]
                    mem[t + 224] = mem[_68862 + 236 len 20]
                    mem[t + 256] = bool(mem[_68862 + 256])
                    mem[t + 288] = mem[_68862 + 288]
                    idx = idx + 1
                    s = s + 32
                    t = t + 320
                    continue 
                mem[_65563 + 32] = 0
                mem[_65563 + 64] = (320 * _66038) + 128
                _69299 = mem[_65251]
                mem[_65563 + (320 * _66038) + 128] = mem[_65251]
                mem[_65563 + (320 * _66038) + 160 len ceil32(_69299)] = mem[_65251 + 32 len ceil32(_69299)]
                var61001 = ceil32(_69299)
                if ceil32(_69299) > _69299:
                    mem[_65563 + (320 * _66038) + _69299 + 160] = 0
                return memory
                  from mem[64]
                   len ceil32(_69299) + _65563 + (320 * _66038) + -mem[64] + 160
            _66039 = mem[64]
            mem[64] = mem[64] + 64
            mem[_66039] = 7
            mem[_66039 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
            _66340 = mem[64]
            mem[mem[64]] = 96
            _66502 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
            mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
            idx = 0
            s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
            t = mem[64] + 128
            while idx < _66502:
                _68869 = mem[s]
                mem[t] = mem[mem[s]]
                mem[t + 32] = mem[_68869 + 32]
                mem[t + 64] = mem[_68869 + 64]
                mem[t + 96] = mem[_68869 + 96]
                mem[t + 128] = mem[_68869 + 128]
                mem[t + 160] = mem[_68869 + 172 len 20]
                mem[t + 192] = mem[_68869 + 192]
                mem[t + 224] = mem[_68869 + 236 len 20]
                mem[t + 256] = bool(mem[_68869 + 256])
                mem[t + 288] = mem[_68869 + 288]
                idx = idx + 1
                s = s + 32
                t = t + 320
                continue 
            mem[_66340 + 32] = -1
            mem[_66340 + 64] = (320 * _66502) + 128
            _69300 = mem[_66039]
            mem[_66340 + (320 * _66502) + 128] = mem[_66039]
            mem[_66340 + (320 * _66502) + 160 len ceil32(_69300)] = mem[_66039 + 32 len ceil32(_69300)]
            var64001 = ceil32(_69300)
            if ceil32(_69300) > _69300:
                mem[_66340 + (320 * _66502) + _69300 + 160] = 0
            return memory
              from mem[64]
               len ceil32(_69300) + _66340 + (320 * _66502) + -mem[64] + 160
        if stor15[address(arg5)].field_0 < stor15[address(arg5)].field_0 - 1:
            revert with 0, 17
        if arg2 > 1:
            if stor15[address(arg5)].field_0 < stor15[address(arg5)].field_0 - 1:
                revert with 0, 17
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192] = 1
            mem[64] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 576
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 256] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 288] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 320] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 352] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 384] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 416] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 448] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 480] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 512] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 544] = 0
            mem[var47001] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 256
            s = var47001
            idx = var47002
            while idx - 1:
                mem[64] = mem[64] + 320
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 256] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 288] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 320] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 352] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 384] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 416] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 448] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 480] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 512] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 544] = 0
                mem[s + 32] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 256
                s = s + 32
                idx = idx - 1
                continue 
            idx = 0
            while idx < 1:
                if stor15[address(arg5)].field_0 - 1 > !idx:
                    revert with 0, 17
                if stor15[address(arg5)].field_0 + idx - 1 >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                    revert with 0, 50
                mem[0] = mem[(32 * stor15[address(arg5)].field_0 + idx - 1) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]
                mem[32] = 12
                _66053 = sha3(mem[(32 * stor15[address(arg5)].field_0 + idx - 1) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192], 12)
                _66054 = mem[64]
                mem[64] = mem[64] + 320
                mem[_66054] = stor12[mem[(32 * stor15[address(arg5)].field_0 + idx - 1) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]].field_0
                mem[_66054 + 32] = stor1[_66053]
                mem[_66054 + 64] = stor2[_66053]
                mem[_66054 + 96] = stor3[_66053]
                mem[_66054 + 128] = stor4[_66053]
                mem[_66054 + 160] = stor5[_66053]
                mem[_66054 + 192] = stor6[_66053]
                mem[_66054 + 224] = stor7[_66053].field_0
                mem[_66054 + 256] = bool(stor7[_66053].field_160)
                mem[_66054 + 288] = stor8[_66053]
                if idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]:
                    revert with 0, 50
                mem[(32 * idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224] = _66054
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
            if stor15[address(arg5)].field_0 - 1 > !1:
                revert with 0, 17
            if stor15[address(arg5)].field_0 - 1 > !1:
                revert with 0, 17
            if stor15[address(arg5)].field_0 < mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                _66505 = mem[64]
                mem[64] = mem[64] + 64
                mem[_66505] = 7
                mem[_66505 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                _66782 = mem[64]
                mem[mem[64]] = 96
                _67006 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                idx = 0
                s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                t = mem[64] + 128
                while idx < _67006:
                    _68890 = mem[s]
                    mem[t] = mem[mem[s]]
                    mem[t + 32] = mem[_68890 + 32]
                    mem[t + 64] = mem[_68890 + 64]
                    mem[t + 96] = mem[_68890 + 96]
                    mem[t + 128] = mem[_68890 + 128]
                    mem[t + 160] = mem[_68890 + 172 len 20]
                    mem[t + 192] = mem[_68890 + 192]
                    mem[t + 224] = mem[_68890 + 236 len 20]
                    mem[t + 256] = bool(mem[_68890 + 256])
                    mem[t + 288] = mem[_68890 + 288]
                    idx = idx + 1
                    s = s + 32
                    t = t + 320
                    continue 
                mem[_66782 + 32] = stor15[address(arg5)].field_0
                mem[_66782 + 64] = (320 * _67006) + 128
                _69303 = mem[_66505]
                mem[_66782 + (320 * _67006) + 128] = mem[_66505]
                mem[_66782 + (320 * _67006) + 160 len ceil32(_69303)] = mem[_66505 + 32 len ceil32(_69303)]
                var70001 = ceil32(_69303)
                if ceil32(_69303) > _69303:
                    mem[_66782 + (320 * _67006) + _69303 + 160] = 0
                return memory
                  from mem[64]
                   len ceil32(_69303) + _66782 + (320 * _67006) + -mem[64] + 160
            _66506 = mem[64]
            mem[64] = mem[64] + 64
            mem[_66506] = 4
            mem[_66506 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
            _66783 = mem[64]
            mem[mem[64]] = 96
            _67007 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
            mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
            idx = 0
            s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
            t = mem[64] + 128
            while idx < _67007:
                _68897 = mem[s]
                mem[t] = mem[mem[s]]
                mem[t + 32] = mem[_68897 + 32]
                mem[t + 64] = mem[_68897 + 64]
                mem[t + 96] = mem[_68897 + 96]
                mem[t + 128] = mem[_68897 + 128]
                mem[t + 160] = mem[_68897 + 172 len 20]
                mem[t + 192] = mem[_68897 + 192]
                mem[t + 224] = mem[_68897 + 236 len 20]
                mem[t + 256] = bool(mem[_68897 + 256])
                mem[t + 288] = mem[_68897 + 288]
                idx = idx + 1
                s = s + 32
                t = t + 320
                continue 
            mem[_66783 + 32] = stor15[address(arg5)].field_0
            mem[_66783 + 64] = (320 * _67007) + 128
            _69304 = mem[_66506]
            mem[_66783 + (320 * _67007) + 128] = mem[_66506]
            mem[_66783 + (320 * _67007) + 160 len ceil32(_69304)] = mem[_66506 + 32 len ceil32(_69304)]
            var70001 = ceil32(_69304)
            if ceil32(_69304) > _69304:
                mem[_66783 + (320 * _67007) + _69304 + 160] = 0
            return memory
              from mem[64]
               len ceil32(_69304) + _66783 + (320 * _67007) + -mem[64] + 160
        if arg2 > test266151307():
            revert with 0, 65
        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192] = arg2
        mem[64] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224
        if not arg2:
            idx = 0
            while idx < arg2:
                if stor15[address(arg5)].field_0 - 1 > !idx:
                    revert with 0, 17
                if stor15[address(arg5)].field_0 + idx - 1 >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                    revert with 0, 50
                mem[0] = mem[(32 * stor15[address(arg5)].field_0 + idx - 1) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]
                mem[32] = 12
                _50825 = sha3(mem[(32 * stor15[address(arg5)].field_0 + idx - 1) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192], 12)
                _50826 = mem[64]
                mem[64] = mem[64] + 320
                mem[_50826] = stor12[mem[(32 * stor15[address(arg5)].field_0 + idx - 1) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]].field_0
                mem[_50826 + 32] = stor1[_50825]
                mem[_50826 + 64] = stor2[_50825]
                mem[_50826 + 96] = stor3[_50825]
                mem[_50826 + 128] = stor4[_50825]
                mem[_50826 + 160] = stor5[_50825]
                mem[_50826 + 192] = stor6[_50825]
                mem[_50826 + 224] = stor7[_50825].field_0
                mem[_50826 + 256] = bool(stor7[_50825].field_160)
                mem[_50826 + 288] = stor8[_50825]
                if idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]:
                    revert with 0, 50
                mem[(32 * idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224] = _50826
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
            if stor15[address(arg5)].field_0 - 1 > !arg2:
                revert with 0, 17
            if stor15[address(arg5)].field_0 - 1 > !arg2:
                revert with 0, 17
            if stor15[address(arg5)].field_0 + arg2 - 1 < mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                _51806 = mem[64]
                mem[64] = mem[64] + 64
                mem[_51806] = 7
                mem[_51806 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                _52849 = mem[64]
                mem[mem[64]] = 96
                _53273 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                idx = 0
                s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                t = mem[64] + 128
                while idx < _53273:
                    _59636 = mem[s]
                    mem[t] = mem[mem[s]]
                    mem[t + 32] = mem[_59636 + 32]
                    mem[t + 64] = mem[_59636 + 64]
                    mem[t + 96] = mem[_59636 + 96]
                    mem[t + 128] = mem[_59636 + 128]
                    mem[t + 160] = mem[_59636 + 172 len 20]
                    mem[t + 192] = mem[_59636 + 192]
                    mem[t + 224] = mem[_59636 + 236 len 20]
                    mem[t + 256] = bool(mem[_59636 + 256])
                    mem[t + 288] = mem[_59636 + 288]
                    idx = idx + 1
                    s = s + 32
                    t = t + 320
                    continue 
                mem[_52849 + 32] = stor15[address(arg5)].field_0 + arg2 - 1
                mem[_52849 + 64] = (320 * _53273) + 128
                _60144 = mem[_51806]
                mem[_52849 + (320 * _53273) + 128] = mem[_51806]
                mem[_52849 + (320 * _53273) + 160 len ceil32(_60144)] = mem[_51806 + 32 len ceil32(_60144)]
                var59001 = ceil32(_60144)
                if ceil32(_60144) > _60144:
                    mem[_52849 + (320 * _53273) + _60144 + 160] = 0
                return memory
                  from mem[64]
                   len ceil32(_60144) + _52849 + (320 * _53273) + -mem[64] + 160
            _51807 = mem[64]
            mem[64] = mem[64] + 64
            mem[_51807] = 4
            mem[_51807 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
            _52850 = mem[64]
            mem[mem[64]] = 96
            _53274 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
            mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
            idx = 0
            s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
            t = mem[64] + 128
            while idx < _53274:
                _59643 = mem[s]
                mem[t] = mem[mem[s]]
                mem[t + 32] = mem[_59643 + 32]
                mem[t + 64] = mem[_59643 + 64]
                mem[t + 96] = mem[_59643 + 96]
                mem[t + 128] = mem[_59643 + 128]
                mem[t + 160] = mem[_59643 + 172 len 20]
                mem[t + 192] = mem[_59643 + 192]
                mem[t + 224] = mem[_59643 + 236 len 20]
                mem[t + 256] = bool(mem[_59643 + 256])
                mem[t + 288] = mem[_59643 + 288]
                idx = idx + 1
                s = s + 32
                t = t + 320
                continue 
            mem[_52850 + 32] = stor15[address(arg5)].field_0 + arg2 - 1
            mem[_52850 + 64] = (320 * _53274) + 128
            _60145 = mem[_51807]
            mem[_52850 + (320 * _53274) + 128] = mem[_51807]
            mem[_52850 + (320 * _53274) + 160 len ceil32(_60145)] = mem[_51807 + 32 len ceil32(_60145)]
            var59001 = ceil32(_60145)
            if ceil32(_60145) > _60145:
                mem[_52850 + (320 * _53274) + _60145 + 160] = 0
            return memory
              from mem[64]
               len ceil32(_60145) + _52850 + (320 * _53274) + -mem[64] + 160
        mem[64] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 544
        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224] = 0
        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 256] = 0
        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 288] = 0
        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 320] = 0
        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 352] = 0
        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 384] = 0
        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 416] = 0
        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 448] = 0
        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 480] = 0
        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 512] = 0
        mem[var43001] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224
        s = var43001
        idx = var43002
        while idx - 1:
            mem[64] = mem[64] + 320
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 256] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 288] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 320] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 352] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 384] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 416] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 448] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 480] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 512] = 0
            mem[s + 32] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224
            s = s + 32
            idx = idx - 1
            continue 
        idx = 0
        while idx < arg2:
            if stor15[address(arg5)].field_0 - 1 > !idx:
                revert with 0, 17
            if stor15[address(arg5)].field_0 + idx - 1 >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                revert with 0, 50
            mem[0] = mem[(32 * stor15[address(arg5)].field_0 + idx - 1) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]
            mem[32] = 12
            _66047 = sha3(mem[(32 * stor15[address(arg5)].field_0 + idx - 1) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192], 12)
            _66048 = mem[64]
            mem[64] = mem[64] + 320
            mem[_66048] = stor12[mem[(32 * stor15[address(arg5)].field_0 + idx - 1) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]].field_0
            mem[_66048 + 32] = stor1[_66047]
            mem[_66048 + 64] = stor2[_66047]
            mem[_66048 + 96] = stor3[_66047]
            mem[_66048 + 128] = stor4[_66047]
            mem[_66048 + 160] = stor5[_66047]
            mem[_66048 + 192] = stor6[_66047]
            mem[_66048 + 224] = stor7[_66047].field_0
            mem[_66048 + 256] = bool(stor7[_66047].field_160)
            mem[_66048 + 288] = stor8[_66047]
            if idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]:
                revert with 0, 50
            mem[(32 * idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224] = _66048
            if idx == -1:
                revert with 0, 17
            idx = idx + 1
            continue 
        if stor15[address(arg5)].field_0 - 1 > !arg2:
            revert with 0, 17
        if stor15[address(arg5)].field_0 - 1 > !arg2:
            revert with 0, 17
        if stor15[address(arg5)].field_0 + arg2 - 1 < mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
            _66503 = mem[64]
            mem[64] = mem[64] + 64
            mem[_66503] = 7
            mem[_66503 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
            _66780 = mem[64]
            mem[mem[64]] = 96
            _67004 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
            mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
            idx = 0
            s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
            t = mem[64] + 128
            while idx < _67004:
                _68876 = mem[s]
                mem[t] = mem[mem[s]]
                mem[t + 32] = mem[_68876 + 32]
                mem[t + 64] = mem[_68876 + 64]
                mem[t + 96] = mem[_68876 + 96]
                mem[t + 128] = mem[_68876 + 128]
                mem[t + 160] = mem[_68876 + 172 len 20]
                mem[t + 192] = mem[_68876 + 192]
                mem[t + 224] = mem[_68876 + 236 len 20]
                mem[t + 256] = bool(mem[_68876 + 256])
                mem[t + 288] = mem[_68876 + 288]
                idx = idx + 1
                s = s + 32
                t = t + 320
                continue 
            mem[_66780 + 32] = stor15[address(arg5)].field_0 + arg2 - 1
            mem[_66780 + 64] = (320 * _67004) + 128
            _69301 = mem[_66503]
            mem[_66780 + (320 * _67004) + 128] = mem[_66503]
            mem[_66780 + (320 * _67004) + 160 len ceil32(_69301)] = mem[_66503 + 32 len ceil32(_69301)]
            var66001 = ceil32(_69301)
            if ceil32(_69301) > _69301:
                mem[_66780 + (320 * _67004) + _69301 + 160] = 0
            return memory
              from mem[64]
               len ceil32(_69301) + _66780 + (320 * _67004) + -mem[64] + 160
        _66504 = mem[64]
        mem[64] = mem[64] + 64
        mem[_66504] = 4
        mem[_66504 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
        _66781 = mem[64]
        mem[mem[64]] = 96
        _67005 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
        mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
        idx = 0
        s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
        t = mem[64] + 128
        while idx < _67005:
            _68883 = mem[s]
            mem[t] = mem[mem[s]]
            mem[t + 32] = mem[_68883 + 32]
            mem[t + 64] = mem[_68883 + 64]
            mem[t + 96] = mem[_68883 + 96]
            mem[t + 128] = mem[_68883 + 128]
            mem[t + 160] = mem[_68883 + 172 len 20]
            mem[t + 192] = mem[_68883 + 192]
            mem[t + 224] = mem[_68883 + 236 len 20]
            mem[t + 256] = bool(mem[_68883 + 256])
            mem[t + 288] = mem[_68883 + 288]
            idx = idx + 1
            s = s + 32
            t = t + 320
            continue 
        mem[_66781 + 32] = stor15[address(arg5)].field_0 + arg2 - 1
        mem[_66781 + 64] = (320 * _67005) + 128
        _69302 = mem[_66504]
        mem[_66781 + (320 * _67005) + 128] = mem[_66504]
        mem[_66781 + (320 * _67005) + 160 len ceil32(_69302)] = mem[_66504 + 32 len ceil32(_69302)]
        var66001 = ceil32(_69302)
        if ceil32(_69302) > _69302:
            mem[_66781 + (320 * _67005) + _69302 + 160] = 0
        return memory
          from mem[64]
           len ceil32(_69302) + _66781 + (320 * _67005) + -mem[64] + 160
    mem[0] = sha3(address(arg5), 13)
    mem[(32 * stor11.length) + 160] = stor13[address(arg5)].field_0
    idx = (32 * stor11.length) + 160
    s = 0
    while (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 128 > idx:
        mem[idx + 32] = stor13[address(arg5)][s].field_256
        idx = idx + 32
        s = s + 1
        continue 
    if arg4 != 2:
        if not stor13[address(arg5)].field_0:
            mem[64] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 256
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192] = 4
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 224] = 0x6f76657200000000000000000000000000000000000000000000000000000000
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 256] = 96
            _40360 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 352] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
            idx = 0
            s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192
            t = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 384
            while idx < mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                _49211 = mem[s]
                mem[t] = mem[mem[s]]
                mem[t + 32] = mem[_49211 + 32]
                mem[t + 64] = mem[_49211 + 64]
                mem[t + 96] = mem[_49211 + 96]
                mem[t + 128] = mem[_49211 + 128]
                mem[t + 160] = mem[_49211 + 172 len 20]
                mem[t + 192] = mem[_49211 + 192]
                mem[t + 224] = mem[_49211 + 236 len 20]
                mem[t + 256] = bool(mem[_49211 + 256])
                mem[t + 288] = mem[_49211 + 288]
                idx = idx + 1
                s = s + 32
                t = t + 320
                continue 
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 288] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 320] = (320 * _40360) + 128
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (320 * _40360) + 384] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (320 * _40360) + 416 len ceil32(mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192])] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 224 len ceil32(mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192])]
            var36001 = ceil32(mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192])
            if ceil32(mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]) > mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]:
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (320 * _40360) + mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192] + 416] = 0
            return memory
              from mem[64]
               len ceil32(mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (320 * _40360) + -mem[64] + 416
        if arg1 < stor13[address(arg5)].field_0:
            if arg3:
                if arg2 <= arg1:
                    if arg2 > test266151307():
                        revert with 0, 65
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160] = arg2
                    mem[64] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 192
                    if not arg2:
                        idx = 0
                        while idx < arg2:
                            if arg1 < idx:
                                revert with 0, 17
                            if arg1 - idx >= mem[(32 * stor11.length) + 128]:
                                revert with 0, 50
                            mem[0] = mem[(32 * arg1 - idx) + (32 * stor11.length) + 160]
                            mem[32] = 12
                            _50836 = sha3(mem[(32 * arg1 - idx) + (32 * stor11.length) + 160], 12)
                            _50837 = mem[64]
                            mem[64] = mem[64] + 320
                            mem[_50837] = stor12[mem[(32 * arg1 - idx) + (32 * stor11.length) + 160]].field_0
                            mem[_50837 + 32] = stor1[_50836]
                            mem[_50837 + 64] = stor2[_50836]
                            mem[_50837 + 96] = stor3[_50836]
                            mem[_50837 + 128] = stor4[_50836]
                            mem[_50837 + 160] = stor5[_50836]
                            mem[_50837 + 192] = stor6[_50836]
                            mem[_50837 + 224] = stor7[_50836].field_0
                            mem[_50837 + 256] = bool(stor7[_50836].field_160)
                            mem[_50837 + 288] = stor8[_50836]
                            if idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                                revert with 0, 50
                            mem[(32 * idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192] = _50837
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            continue 
                        if arg1 < arg2:
                            _49305 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_49305] = 4
                            mem[_49305 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                            _49843 = mem[64]
                            mem[mem[64]] = 96
                            _50833 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                            mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                            idx = 0
                            s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192
                            t = mem[64] + 128
                            while idx < _50833:
                                _59665 = mem[s]
                                mem[t] = mem[mem[s]]
                                mem[t + 32] = mem[_59665 + 32]
                                mem[t + 64] = mem[_59665 + 64]
                                mem[t + 96] = mem[_59665 + 96]
                                mem[t + 128] = mem[_59665 + 128]
                                mem[t + 160] = mem[_59665 + 172 len 20]
                                mem[t + 192] = mem[_59665 + 192]
                                mem[t + 224] = mem[_59665 + 236 len 20]
                                mem[t + 256] = bool(mem[_59665 + 256])
                                mem[t + 288] = mem[_59665 + 288]
                                idx = idx + 1
                                s = s + 32
                                t = t + 320
                                continue 
                            mem[_49843 + 32] = 0
                            mem[_49843 + 64] = (320 * _50833) + 128
                            _60148 = mem[_49305]
                            mem[_49843 + (320 * _50833) + 128] = mem[_49305]
                            mem[_49843 + (320 * _50833) + 160 len ceil32(_60148)] = mem[_49305 + 32 len ceil32(_60148)]
                            var44001 = ceil32(_60148)
                            if ceil32(_60148) > _60148:
                                mem[_49843 + (320 * _50833) + _60148 + 160] = 0
                            return memory
                              from mem[64]
                               len ceil32(_60148) + _49843 + (320 * _50833) + -mem[64] + 160
                        _50834 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_50834] = 7
                        mem[_50834 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                        _51482 = mem[64]
                        mem[mem[64]] = 96
                        _51812 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                        mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                        idx = 0
                        s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192
                        t = mem[64] + 128
                        while idx < _51812:
                            _59672 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_59672 + 32]
                            mem[t + 64] = mem[_59672 + 64]
                            mem[t + 96] = mem[_59672 + 96]
                            mem[t + 128] = mem[_59672 + 128]
                            mem[t + 160] = mem[_59672 + 172 len 20]
                            mem[t + 192] = mem[_59672 + 192]
                            mem[t + 224] = mem[_59672 + 236 len 20]
                            mem[t + 256] = bool(mem[_59672 + 256])
                            mem[t + 288] = mem[_59672 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_51482 + 32] = arg1 - arg2
                        mem[_51482 + 64] = (320 * _51812) + 128
                        _60149 = mem[_50834]
                        mem[_51482 + (320 * _51812) + 128] = mem[_50834]
                        mem[_51482 + (320 * _51812) + 160 len ceil32(_60149)] = mem[_50834 + 32 len ceil32(_60149)]
                        var47001 = ceil32(_60149)
                        if ceil32(_60149) > _60149:
                            mem[_51482 + (320 * _51812) + _60149 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_60149) + _51482 + (320 * _51812) + -mem[64] + 160
                    mem[64] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 512
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 192] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 224] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 256] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 288] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 320] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 352] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 384] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 416] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 448] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 480] = 0
                    mem[var34001] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 192
                    s = var34001
                    idx = var34002
                    while idx - 1:
                        mem[64] = mem[64] + 320
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 192] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 224] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 256] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 288] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 320] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 352] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 384] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 416] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 448] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 480] = 0
                        mem[s + 32] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 192
                        s = s + 32
                        idx = idx - 1
                        continue 
                    idx = 0
                    while idx < arg2:
                        if arg1 < idx:
                            revert with 0, 17
                        if arg1 - idx >= mem[(32 * stor11.length) + 128]:
                            revert with 0, 50
                        mem[0] = mem[(32 * arg1 - idx) + (32 * stor11.length) + 160]
                        mem[32] = 12
                        _66061 = sha3(mem[(32 * arg1 - idx) + (32 * stor11.length) + 160], 12)
                        _66062 = mem[64]
                        mem[64] = mem[64] + 320
                        mem[_66062] = stor12[mem[(32 * arg1 - idx) + (32 * stor11.length) + 160]].field_0
                        mem[_66062 + 32] = stor1[_66061]
                        mem[_66062 + 64] = stor2[_66061]
                        mem[_66062 + 96] = stor3[_66061]
                        mem[_66062 + 128] = stor4[_66061]
                        mem[_66062 + 160] = stor5[_66061]
                        mem[_66062 + 192] = stor6[_66061]
                        mem[_66062 + 224] = stor7[_66061].field_0
                        mem[_66062 + 256] = bool(stor7[_66061].field_160)
                        mem[_66062 + 288] = stor8[_66061]
                        if idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                            revert with 0, 50
                        mem[(32 * idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192] = _66062
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if arg1 < arg2:
                        _65252 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_65252] = 4
                        mem[_65252 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                        _65573 = mem[64]
                        mem[mem[64]] = 96
                        _66058 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                        mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                        idx = 0
                        s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192
                        t = mem[64] + 128
                        while idx < _66058:
                            _68904 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_68904 + 32]
                            mem[t + 64] = mem[_68904 + 64]
                            mem[t + 96] = mem[_68904 + 96]
                            mem[t + 128] = mem[_68904 + 128]
                            mem[t + 160] = mem[_68904 + 172 len 20]
                            mem[t + 192] = mem[_68904 + 192]
                            mem[t + 224] = mem[_68904 + 236 len 20]
                            mem[t + 256] = bool(mem[_68904 + 256])
                            mem[t + 288] = mem[_68904 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_65573 + 32] = 0
                        mem[_65573 + 64] = (320 * _66058) + 128
                        _69305 = mem[_65252]
                        mem[_65573 + (320 * _66058) + 128] = mem[_65252]
                        mem[_65573 + (320 * _66058) + 160 len ceil32(_69305)] = mem[_65252 + 32 len ceil32(_69305)]
                        var51001 = ceil32(_69305)
                        if ceil32(_69305) > _69305:
                            mem[_65573 + (320 * _66058) + _69305 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_69305) + _65573 + (320 * _66058) + -mem[64] + 160
                    _66059 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_66059] = 7
                    mem[_66059 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                    _66348 = mem[64]
                    mem[mem[64]] = 96
                    _66508 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                    mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                    idx = 0
                    s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192
                    t = mem[64] + 128
                    while idx < _66508:
                        _68911 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_68911 + 32]
                        mem[t + 64] = mem[_68911 + 64]
                        mem[t + 96] = mem[_68911 + 96]
                        mem[t + 128] = mem[_68911 + 128]
                        mem[t + 160] = mem[_68911 + 172 len 20]
                        mem[t + 192] = mem[_68911 + 192]
                        mem[t + 224] = mem[_68911 + 236 len 20]
                        mem[t + 256] = bool(mem[_68911 + 256])
                        mem[t + 288] = mem[_68911 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_66348 + 32] = arg1 - arg2
                    mem[_66348 + 64] = (320 * _66508) + 128
                    _69306 = mem[_66059]
                    mem[_66348 + (320 * _66508) + 128] = mem[_66059]
                    mem[_66348 + (320 * _66508) + 160 len ceil32(_69306)] = mem[_66059 + 32 len ceil32(_69306)]
                    var54001 = ceil32(_69306)
                    if ceil32(_69306) > _69306:
                        mem[_66348 + (320 * _66508) + _69306 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_69306) + _66348 + (320 * _66508) + -mem[64] + 160
                if 1 > !arg1:
                    revert with 0, 17
                if arg1 + 1 > test266151307():
                    revert with 0, 65
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160] = arg1 + 1
                mem[64] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg1 + 1) + 192
                if not arg1 + 1:
                    idx = 0
                    while idx < arg1 + 1:
                        if arg1 < idx:
                            revert with 0, 17
                        if arg1 - idx >= mem[(32 * stor11.length) + 128]:
                            revert with 0, 50
                        mem[0] = mem[(32 * arg1 - idx) + (32 * stor11.length) + 160]
                        mem[32] = 12
                        _50842 = sha3(mem[(32 * arg1 - idx) + (32 * stor11.length) + 160], 12)
                        _50843 = mem[64]
                        mem[64] = mem[64] + 320
                        mem[_50843] = stor12[mem[(32 * arg1 - idx) + (32 * stor11.length) + 160]].field_0
                        mem[_50843 + 32] = stor1[_50842]
                        mem[_50843 + 64] = stor2[_50842]
                        mem[_50843 + 96] = stor3[_50842]
                        mem[_50843 + 128] = stor4[_50842]
                        mem[_50843 + 160] = stor5[_50842]
                        mem[_50843 + 192] = stor6[_50842]
                        mem[_50843 + 224] = stor7[_50842].field_0
                        mem[_50843 + 256] = bool(stor7[_50842].field_160)
                        mem[_50843 + 288] = stor8[_50842]
                        if idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                            revert with 0, 50
                        mem[(32 * idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192] = _50843
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if arg1 < arg1 + 1:
                        _49306 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_49306] = 4
                        mem[_49306 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                        _49845 = mem[64]
                        mem[mem[64]] = 96
                        _50839 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                        mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                        idx = 0
                        s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192
                        t = mem[64] + 128
                        while idx < _50839:
                            _59679 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_59679 + 32]
                            mem[t + 64] = mem[_59679 + 64]
                            mem[t + 96] = mem[_59679 + 96]
                            mem[t + 128] = mem[_59679 + 128]
                            mem[t + 160] = mem[_59679 + 172 len 20]
                            mem[t + 192] = mem[_59679 + 192]
                            mem[t + 224] = mem[_59679 + 236 len 20]
                            mem[t + 256] = bool(mem[_59679 + 256])
                            mem[t + 288] = mem[_59679 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_49845 + 32] = 0
                        mem[_49845 + 64] = (320 * _50839) + 128
                        _60150 = mem[_49306]
                        mem[_49845 + (320 * _50839) + 128] = mem[_49306]
                        mem[_49845 + (320 * _50839) + 160 len ceil32(_60150)] = mem[_49306 + 32 len ceil32(_60150)]
                        var48001 = ceil32(_60150)
                        if ceil32(_60150) > _60150:
                            mem[_49845 + (320 * _50839) + _60150 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_60150) + _49845 + (320 * _50839) + -mem[64] + 160
                    _50840 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_50840] = 7
                    mem[_50840 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                    _51491 = mem[64]
                    mem[mem[64]] = 96
                    _51814 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                    mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                    idx = 0
                    s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192
                    t = mem[64] + 128
                    while idx < _51814:
                        _59686 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_59686 + 32]
                        mem[t + 64] = mem[_59686 + 64]
                        mem[t + 96] = mem[_59686 + 96]
                        mem[t + 128] = mem[_59686 + 128]
                        mem[t + 160] = mem[_59686 + 172 len 20]
                        mem[t + 192] = mem[_59686 + 192]
                        mem[t + 224] = mem[_59686 + 236 len 20]
                        mem[t + 256] = bool(mem[_59686 + 256])
                        mem[t + 288] = mem[_59686 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_51491 + 32] = -1
                    mem[_51491 + 64] = (320 * _51814) + 128
                    _60151 = mem[_50840]
                    mem[_51491 + (320 * _51814) + 128] = mem[_50840]
                    mem[_51491 + (320 * _51814) + 160 len ceil32(_60151)] = mem[_50840 + 32 len ceil32(_60151)]
                    var51001 = ceil32(_60151)
                    if ceil32(_60151) > _60151:
                        mem[_51491 + (320 * _51814) + _60151 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_60151) + _51491 + (320 * _51814) + -mem[64] + 160
                mem[64] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg1 + 1) + 512
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg1 + 1) + 192] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg1 + 1) + 224] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg1 + 1) + 256] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg1 + 1) + 288] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg1 + 1) + 320] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg1 + 1) + 352] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg1 + 1) + 384] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg1 + 1) + 416] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg1 + 1) + 448] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg1 + 1) + 480] = 0
                mem[var38001] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg1 + 1) + 192
                s = var38001
                idx = var38002
                while idx - 1:
                    mem[64] = mem[64] + 320
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg1 + 1) + 192] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg1 + 1) + 224] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg1 + 1) + 256] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg1 + 1) + 288] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg1 + 1) + 320] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg1 + 1) + 352] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg1 + 1) + 384] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg1 + 1) + 416] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg1 + 1) + 448] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg1 + 1) + 480] = 0
                    mem[s + 32] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg1 + 1) + 192
                    s = s + 32
                    idx = idx - 1
                    continue 
                idx = 0
                while idx < arg1 + 1:
                    if arg1 < idx:
                        revert with 0, 17
                    if arg1 - idx >= mem[(32 * stor11.length) + 128]:
                        revert with 0, 50
                    mem[0] = mem[(32 * arg1 - idx) + (32 * stor11.length) + 160]
                    mem[32] = 12
                    _66069 = sha3(mem[(32 * arg1 - idx) + (32 * stor11.length) + 160], 12)
                    _66070 = mem[64]
                    mem[64] = mem[64] + 320
                    mem[_66070] = stor12[mem[(32 * arg1 - idx) + (32 * stor11.length) + 160]].field_0
                    mem[_66070 + 32] = stor1[_66069]
                    mem[_66070 + 64] = stor2[_66069]
                    mem[_66070 + 96] = stor3[_66069]
                    mem[_66070 + 128] = stor4[_66069]
                    mem[_66070 + 160] = stor5[_66069]
                    mem[_66070 + 192] = stor6[_66069]
                    mem[_66070 + 224] = stor7[_66069].field_0
                    mem[_66070 + 256] = bool(stor7[_66069].field_160)
                    mem[_66070 + 288] = stor8[_66069]
                    if idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                        revert with 0, 50
                    mem[(32 * idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192] = _66070
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
                if arg1 < arg1 + 1:
                    _65253 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_65253] = 4
                    mem[_65253 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                    _65577 = mem[64]
                    mem[mem[64]] = 96
                    _66066 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                    mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                    idx = 0
                    s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192
                    t = mem[64] + 128
                    while idx < _66066:
                        _68918 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_68918 + 32]
                        mem[t + 64] = mem[_68918 + 64]
                        mem[t + 96] = mem[_68918 + 96]
                        mem[t + 128] = mem[_68918 + 128]
                        mem[t + 160] = mem[_68918 + 172 len 20]
                        mem[t + 192] = mem[_68918 + 192]
                        mem[t + 224] = mem[_68918 + 236 len 20]
                        mem[t + 256] = bool(mem[_68918 + 256])
                        mem[t + 288] = mem[_68918 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_65577 + 32] = 0
                    mem[_65577 + 64] = (320 * _66066) + 128
                    _69307 = mem[_65253]
                    mem[_65577 + (320 * _66066) + 128] = mem[_65253]
                    mem[_65577 + (320 * _66066) + 160 len ceil32(_69307)] = mem[_65253 + 32 len ceil32(_69307)]
                    var55001 = ceil32(_69307)
                    if ceil32(_69307) > _69307:
                        mem[_65577 + (320 * _66066) + _69307 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_69307) + _65577 + (320 * _66066) + -mem[64] + 160
                _66067 = mem[64]
                mem[64] = mem[64] + 64
                mem[_66067] = 7
                mem[_66067 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                _66356 = mem[64]
                mem[mem[64]] = 96
                _66510 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                idx = 0
                s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192
                t = mem[64] + 128
                while idx < _66510:
                    _68925 = mem[s]
                    mem[t] = mem[mem[s]]
                    mem[t + 32] = mem[_68925 + 32]
                    mem[t + 64] = mem[_68925 + 64]
                    mem[t + 96] = mem[_68925 + 96]
                    mem[t + 128] = mem[_68925 + 128]
                    mem[t + 160] = mem[_68925 + 172 len 20]
                    mem[t + 192] = mem[_68925 + 192]
                    mem[t + 224] = mem[_68925 + 236 len 20]
                    mem[t + 256] = bool(mem[_68925 + 256])
                    mem[t + 288] = mem[_68925 + 288]
                    idx = idx + 1
                    s = s + 32
                    t = t + 320
                    continue 
                mem[_66356 + 32] = -1
                mem[_66356 + 64] = (320 * _66510) + 128
                _69308 = mem[_66067]
                mem[_66356 + (320 * _66510) + 128] = mem[_66067]
                mem[_66356 + (320 * _66510) + 160 len ceil32(_69308)] = mem[_66067 + 32 len ceil32(_69308)]
                var58001 = ceil32(_69308)
                if ceil32(_69308) > _69308:
                    mem[_66356 + (320 * _66510) + _69308 + 160] = 0
                return memory
                  from mem[64]
                   len ceil32(_69308) + _66356 + (320 * _66510) + -mem[64] + 160
            if stor13[address(arg5)].field_0 < arg1:
                revert with 0, 17
            if arg2 <= stor13[address(arg5)].field_0 - arg1:
                if arg2 > test266151307():
                    revert with 0, 65
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160] = arg2
                mem[64] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 192
                if not arg2:
                    idx = 0
                    while idx < arg2:
                        if arg1 > !idx:
                            revert with 0, 17
                        if arg1 + idx >= mem[(32 * stor11.length) + 128]:
                            revert with 0, 50
                        mem[0] = mem[(32 * arg1 + idx) + (32 * stor11.length) + 160]
                        mem[32] = 12
                        _50846 = sha3(mem[(32 * arg1 + idx) + (32 * stor11.length) + 160], 12)
                        _50847 = mem[64]
                        mem[64] = mem[64] + 320
                        mem[_50847] = stor12[mem[(32 * arg1 + idx) + (32 * stor11.length) + 160]].field_0
                        mem[_50847 + 32] = stor1[_50846]
                        mem[_50847 + 64] = stor2[_50846]
                        mem[_50847 + 96] = stor3[_50846]
                        mem[_50847 + 128] = stor4[_50846]
                        mem[_50847 + 160] = stor5[_50846]
                        mem[_50847 + 192] = stor6[_50846]
                        mem[_50847 + 224] = stor7[_50846].field_0
                        mem[_50847 + 256] = bool(stor7[_50846].field_160)
                        mem[_50847 + 288] = stor8[_50846]
                        if idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                            revert with 0, 50
                        mem[(32 * idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192] = _50847
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if arg1 > !arg2:
                        revert with 0, 17
                    if arg1 > !arg2:
                        revert with 0, 17
                    if arg1 + arg2 < mem[(32 * stor11.length) + 128]:
                        _51815 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_51815] = 7
                        mem[_51815 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                        _52889 = mem[64]
                        mem[mem[64]] = 96
                        _53281 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                        mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                        idx = 0
                        s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192
                        t = mem[64] + 128
                        while idx < _53281:
                            _59693 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_59693 + 32]
                            mem[t + 64] = mem[_59693 + 64]
                            mem[t + 96] = mem[_59693 + 96]
                            mem[t + 128] = mem[_59693 + 128]
                            mem[t + 160] = mem[_59693 + 172 len 20]
                            mem[t + 192] = mem[_59693 + 192]
                            mem[t + 224] = mem[_59693 + 236 len 20]
                            mem[t + 256] = bool(mem[_59693 + 256])
                            mem[t + 288] = mem[_59693 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_52889 + 32] = arg1 + arg2
                        mem[_52889 + 64] = (320 * _53281) + 128
                        _60152 = mem[_51815]
                        mem[_52889 + (320 * _53281) + 128] = mem[_51815]
                        mem[_52889 + (320 * _53281) + 160 len ceil32(_60152)] = mem[_51815 + 32 len ceil32(_60152)]
                        var53001 = ceil32(_60152)
                        if ceil32(_60152) > _60152:
                            mem[_52889 + (320 * _53281) + _60152 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_60152) + _52889 + (320 * _53281) + -mem[64] + 160
                    _51816 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_51816] = 4
                    mem[_51816 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                    _52890 = mem[64]
                    mem[mem[64]] = 96
                    _53282 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                    mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                    idx = 0
                    s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192
                    t = mem[64] + 128
                    while idx < _53282:
                        _59700 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_59700 + 32]
                        mem[t + 64] = mem[_59700 + 64]
                        mem[t + 96] = mem[_59700 + 96]
                        mem[t + 128] = mem[_59700 + 128]
                        mem[t + 160] = mem[_59700 + 172 len 20]
                        mem[t + 192] = mem[_59700 + 192]
                        mem[t + 224] = mem[_59700 + 236 len 20]
                        mem[t + 256] = bool(mem[_59700 + 256])
                        mem[t + 288] = mem[_59700 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_52890 + 32] = arg1 + arg2
                    mem[_52890 + 64] = (320 * _53282) + 128
                    _60153 = mem[_51816]
                    mem[_52890 + (320 * _53282) + 128] = mem[_51816]
                    mem[_52890 + (320 * _53282) + 160 len ceil32(_60153)] = mem[_51816 + 32 len ceil32(_60153)]
                    var53001 = ceil32(_60153)
                    if ceil32(_60153) > _60153:
                        mem[_52890 + (320 * _53282) + _60153 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_60153) + _52890 + (320 * _53282) + -mem[64] + 160
                mem[64] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 512
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 192] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 224] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 256] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 288] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 320] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 352] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 384] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 416] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 448] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 480] = 0
                mem[var37001] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 192
                s = var37001
                idx = var37002
                while idx - 1:
                    mem[64] = mem[64] + 320
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 192] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 224] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 256] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 288] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 320] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 352] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 384] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 416] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 448] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 480] = 0
                    mem[s + 32] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 192
                    s = s + 32
                    idx = idx - 1
                    continue 
                idx = 0
                while idx < arg2:
                    if arg1 > !idx:
                        revert with 0, 17
                    if arg1 + idx >= mem[(32 * stor11.length) + 128]:
                        revert with 0, 50
                    mem[0] = mem[(32 * arg1 + idx) + (32 * stor11.length) + 160]
                    mem[32] = 12
                    _66075 = sha3(mem[(32 * arg1 + idx) + (32 * stor11.length) + 160], 12)
                    _66076 = mem[64]
                    mem[64] = mem[64] + 320
                    mem[_66076] = stor12[mem[(32 * arg1 + idx) + (32 * stor11.length) + 160]].field_0
                    mem[_66076 + 32] = stor1[_66075]
                    mem[_66076 + 64] = stor2[_66075]
                    mem[_66076 + 96] = stor3[_66075]
                    mem[_66076 + 128] = stor4[_66075]
                    mem[_66076 + 160] = stor5[_66075]
                    mem[_66076 + 192] = stor6[_66075]
                    mem[_66076 + 224] = stor7[_66075].field_0
                    mem[_66076 + 256] = bool(stor7[_66075].field_160)
                    mem[_66076 + 288] = stor8[_66075]
                    if idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                        revert with 0, 50
                    mem[(32 * idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192] = _66076
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
                if arg1 > !arg2:
                    revert with 0, 17
                if arg1 > !arg2:
                    revert with 0, 17
                if arg1 + arg2 < mem[(32 * stor11.length) + 128]:
                    _66511 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_66511] = 7
                    mem[_66511 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                    _66800 = mem[64]
                    mem[mem[64]] = 96
                    _67012 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                    mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                    idx = 0
                    s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192
                    t = mem[64] + 128
                    while idx < _67012:
                        _68932 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_68932 + 32]
                        mem[t + 64] = mem[_68932 + 64]
                        mem[t + 96] = mem[_68932 + 96]
                        mem[t + 128] = mem[_68932 + 128]
                        mem[t + 160] = mem[_68932 + 172 len 20]
                        mem[t + 192] = mem[_68932 + 192]
                        mem[t + 224] = mem[_68932 + 236 len 20]
                        mem[t + 256] = bool(mem[_68932 + 256])
                        mem[t + 288] = mem[_68932 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_66800 + 32] = arg1 + arg2
                    mem[_66800 + 64] = (320 * _67012) + 128
                    _69309 = mem[_66511]
                    mem[_66800 + (320 * _67012) + 128] = mem[_66511]
                    mem[_66800 + (320 * _67012) + 160 len ceil32(_69309)] = mem[_66511 + 32 len ceil32(_69309)]
                    var60001 = ceil32(_69309)
                    if ceil32(_69309) > _69309:
                        mem[_66800 + (320 * _67012) + _69309 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_69309) + _66800 + (320 * _67012) + -mem[64] + 160
                _66512 = mem[64]
                mem[64] = mem[64] + 64
                mem[_66512] = 4
                mem[_66512 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                _66801 = mem[64]
                mem[mem[64]] = 96
                _67013 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                idx = 0
                s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192
                t = mem[64] + 128
                while idx < _67013:
                    _68939 = mem[s]
                    mem[t] = mem[mem[s]]
                    mem[t + 32] = mem[_68939 + 32]
                    mem[t + 64] = mem[_68939 + 64]
                    mem[t + 96] = mem[_68939 + 96]
                    mem[t + 128] = mem[_68939 + 128]
                    mem[t + 160] = mem[_68939 + 172 len 20]
                    mem[t + 192] = mem[_68939 + 192]
                    mem[t + 224] = mem[_68939 + 236 len 20]
                    mem[t + 256] = bool(mem[_68939 + 256])
                    mem[t + 288] = mem[_68939 + 288]
                    idx = idx + 1
                    s = s + 32
                    t = t + 320
                    continue 
                mem[_66801 + 32] = arg1 + arg2
                mem[_66801 + 64] = (320 * _67013) + 128
                _69310 = mem[_66512]
                mem[_66801 + (320 * _67013) + 128] = mem[_66512]
                mem[_66801 + (320 * _67013) + 160 len ceil32(_69310)] = mem[_66512 + 32 len ceil32(_69310)]
                var60001 = ceil32(_69310)
                if ceil32(_69310) > _69310:
                    mem[_66801 + (320 * _67013) + _69310 + 160] = 0
                return memory
                  from mem[64]
                   len ceil32(_69310) + _66801 + (320 * _67013) + -mem[64] + 160
            if stor13[address(arg5)].field_0 < arg1:
                revert with 0, 17
            if stor13[address(arg5)].field_0 - arg1 > test266151307():
                revert with 0, 65
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160] = stor13[address(arg5)].field_0 - arg1
            mem[64] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor13[address(arg5)].field_0 - arg1) + 192
            if not stor13[address(arg5)].field_0 - arg1:
                idx = 0
                while idx < stor13[address(arg5)].field_0 - arg1:
                    if arg1 > !idx:
                        revert with 0, 17
                    if arg1 + idx >= mem[(32 * stor11.length) + 128]:
                        revert with 0, 50
                    mem[0] = mem[(32 * arg1 + idx) + (32 * stor11.length) + 160]
                    mem[32] = 12
                    _50850 = sha3(mem[(32 * arg1 + idx) + (32 * stor11.length) + 160], 12)
                    _50851 = mem[64]
                    mem[64] = mem[64] + 320
                    mem[_50851] = stor12[mem[(32 * arg1 + idx) + (32 * stor11.length) + 160]].field_0
                    mem[_50851 + 32] = stor1[_50850]
                    mem[_50851 + 64] = stor2[_50850]
                    mem[_50851 + 96] = stor3[_50850]
                    mem[_50851 + 128] = stor4[_50850]
                    mem[_50851 + 160] = stor5[_50850]
                    mem[_50851 + 192] = stor6[_50850]
                    mem[_50851 + 224] = stor7[_50850].field_0
                    mem[_50851 + 256] = bool(stor7[_50850].field_160)
                    mem[_50851 + 288] = stor8[_50850]
                    if idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                        revert with 0, 50
                    mem[(32 * idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192] = _50851
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
                if arg1 > !(stor13[address(arg5)].field_0 - arg1):
                    revert with 0, 17
                if arg1 > !(stor13[address(arg5)].field_0 - arg1):
                    revert with 0, 17
                if stor13[address(arg5)].field_0 < mem[(32 * stor11.length) + 128]:
                    _51817 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_51817] = 7
                    mem[_51817 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                    _52895 = mem[64]
                    mem[mem[64]] = 96
                    _53283 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                    mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                    idx = 0
                    s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192
                    t = mem[64] + 128
                    while idx < _53283:
                        _59707 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_59707 + 32]
                        mem[t + 64] = mem[_59707 + 64]
                        mem[t + 96] = mem[_59707 + 96]
                        mem[t + 128] = mem[_59707 + 128]
                        mem[t + 160] = mem[_59707 + 172 len 20]
                        mem[t + 192] = mem[_59707 + 192]
                        mem[t + 224] = mem[_59707 + 236 len 20]
                        mem[t + 256] = bool(mem[_59707 + 256])
                        mem[t + 288] = mem[_59707 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_52895 + 32] = stor13[address(arg5)].field_0
                    mem[_52895 + 64] = (320 * _53283) + 128
                    _60154 = mem[_51817]
                    mem[_52895 + (320 * _53283) + 128] = mem[_51817]
                    mem[_52895 + (320 * _53283) + 160 len ceil32(_60154)] = mem[_51817 + 32 len ceil32(_60154)]
                    var57001 = ceil32(_60154)
                    if ceil32(_60154) > _60154:
                        mem[_52895 + (320 * _53283) + _60154 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_60154) + _52895 + (320 * _53283) + -mem[64] + 160
                _51818 = mem[64]
                mem[64] = mem[64] + 64
                mem[_51818] = 4
                mem[_51818 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                _52896 = mem[64]
                mem[mem[64]] = 96
                _53284 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                idx = 0
                s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192
                t = mem[64] + 128
                while idx < _53284:
                    _59714 = mem[s]
                    mem[t] = mem[mem[s]]
                    mem[t + 32] = mem[_59714 + 32]
                    mem[t + 64] = mem[_59714 + 64]
                    mem[t + 96] = mem[_59714 + 96]
                    mem[t + 128] = mem[_59714 + 128]
                    mem[t + 160] = mem[_59714 + 172 len 20]
                    mem[t + 192] = mem[_59714 + 192]
                    mem[t + 224] = mem[_59714 + 236 len 20]
                    mem[t + 256] = bool(mem[_59714 + 256])
                    mem[t + 288] = mem[_59714 + 288]
                    idx = idx + 1
                    s = s + 32
                    t = t + 320
                    continue 
                mem[_52896 + 32] = stor13[address(arg5)].field_0
                mem[_52896 + 64] = (320 * _53284) + 128
                _60155 = mem[_51818]
                mem[_52896 + (320 * _53284) + 128] = mem[_51818]
                mem[_52896 + (320 * _53284) + 160 len ceil32(_60155)] = mem[_51818 + 32 len ceil32(_60155)]
                var57001 = ceil32(_60155)
                if ceil32(_60155) > _60155:
                    mem[_52896 + (320 * _53284) + _60155 + 160] = 0
                return memory
                  from mem[64]
                   len ceil32(_60155) + _52896 + (320 * _53284) + -mem[64] + 160
            mem[64] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor13[address(arg5)].field_0 - arg1) + 512
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor13[address(arg5)].field_0 - arg1) + 192] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor13[address(arg5)].field_0 - arg1) + 224] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor13[address(arg5)].field_0 - arg1) + 256] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor13[address(arg5)].field_0 - arg1) + 288] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor13[address(arg5)].field_0 - arg1) + 320] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor13[address(arg5)].field_0 - arg1) + 352] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor13[address(arg5)].field_0 - arg1) + 384] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor13[address(arg5)].field_0 - arg1) + 416] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor13[address(arg5)].field_0 - arg1) + 448] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor13[address(arg5)].field_0 - arg1) + 480] = 0
            mem[var41001] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor13[address(arg5)].field_0 - arg1) + 192
            s = var41001
            idx = var41002
            while idx - 1:
                mem[64] = mem[64] + 320
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor13[address(arg5)].field_0 - arg1) + 192] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor13[address(arg5)].field_0 - arg1) + 224] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor13[address(arg5)].field_0 - arg1) + 256] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor13[address(arg5)].field_0 - arg1) + 288] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor13[address(arg5)].field_0 - arg1) + 320] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor13[address(arg5)].field_0 - arg1) + 352] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor13[address(arg5)].field_0 - arg1) + 384] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor13[address(arg5)].field_0 - arg1) + 416] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor13[address(arg5)].field_0 - arg1) + 448] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor13[address(arg5)].field_0 - arg1) + 480] = 0
                mem[s + 32] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor13[address(arg5)].field_0 - arg1) + 192
                s = s + 32
                idx = idx - 1
                continue 
            idx = 0
            while idx < stor13[address(arg5)].field_0 - arg1:
                if arg1 > !idx:
                    revert with 0, 17
                if arg1 + idx >= mem[(32 * stor11.length) + 128]:
                    revert with 0, 50
                mem[0] = mem[(32 * arg1 + idx) + (32 * stor11.length) + 160]
                mem[32] = 12
                _66081 = sha3(mem[(32 * arg1 + idx) + (32 * stor11.length) + 160], 12)
                _66082 = mem[64]
                mem[64] = mem[64] + 320
                mem[_66082] = stor12[mem[(32 * arg1 + idx) + (32 * stor11.length) + 160]].field_0
                mem[_66082 + 32] = stor1[_66081]
                mem[_66082 + 64] = stor2[_66081]
                mem[_66082 + 96] = stor3[_66081]
                mem[_66082 + 128] = stor4[_66081]
                mem[_66082 + 160] = stor5[_66081]
                mem[_66082 + 192] = stor6[_66081]
                mem[_66082 + 224] = stor7[_66081].field_0
                mem[_66082 + 256] = bool(stor7[_66081].field_160)
                mem[_66082 + 288] = stor8[_66081]
                if idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                    revert with 0, 50
                mem[(32 * idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192] = _66082
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
            if arg1 > !(stor13[address(arg5)].field_0 - arg1):
                revert with 0, 17
            if arg1 > !(stor13[address(arg5)].field_0 - arg1):
                revert with 0, 17
            if stor13[address(arg5)].field_0 < mem[(32 * stor11.length) + 128]:
                _66513 = mem[64]
                mem[64] = mem[64] + 64
                mem[_66513] = 7
                mem[_66513 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                _66802 = mem[64]
                mem[mem[64]] = 96
                _67014 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                idx = 0
                s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192
                t = mem[64] + 128
                while idx < _67014:
                    _68946 = mem[s]
                    mem[t] = mem[mem[s]]
                    mem[t + 32] = mem[_68946 + 32]
                    mem[t + 64] = mem[_68946 + 64]
                    mem[t + 96] = mem[_68946 + 96]
                    mem[t + 128] = mem[_68946 + 128]
                    mem[t + 160] = mem[_68946 + 172 len 20]
                    mem[t + 192] = mem[_68946 + 192]
                    mem[t + 224] = mem[_68946 + 236 len 20]
                    mem[t + 256] = bool(mem[_68946 + 256])
                    mem[t + 288] = mem[_68946 + 288]
                    idx = idx + 1
                    s = s + 32
                    t = t + 320
                    continue 
                mem[_66802 + 32] = stor13[address(arg5)].field_0
                mem[_66802 + 64] = (320 * _67014) + 128
                _69311 = mem[_66513]
                mem[_66802 + (320 * _67014) + 128] = mem[_66513]
                mem[_66802 + (320 * _67014) + 160 len ceil32(_69311)] = mem[_66513 + 32 len ceil32(_69311)]
                var64001 = ceil32(_69311)
                if ceil32(_69311) > _69311:
                    mem[_66802 + (320 * _67014) + _69311 + 160] = 0
                return memory
                  from mem[64]
                   len ceil32(_69311) + _66802 + (320 * _67014) + -mem[64] + 160
            _66514 = mem[64]
            mem[64] = mem[64] + 64
            mem[_66514] = 4
            mem[_66514 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
            _66803 = mem[64]
            mem[mem[64]] = 96
            _67015 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
            mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
            idx = 0
            s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192
            t = mem[64] + 128
            while idx < _67015:
                _68953 = mem[s]
                mem[t] = mem[mem[s]]
                mem[t + 32] = mem[_68953 + 32]
                mem[t + 64] = mem[_68953 + 64]
                mem[t + 96] = mem[_68953 + 96]
                mem[t + 128] = mem[_68953 + 128]
                mem[t + 160] = mem[_68953 + 172 len 20]
                mem[t + 192] = mem[_68953 + 192]
                mem[t + 224] = mem[_68953 + 236 len 20]
                mem[t + 256] = bool(mem[_68953 + 256])
                mem[t + 288] = mem[_68953 + 288]
                idx = idx + 1
                s = s + 32
                t = t + 320
                continue 
            mem[_66803 + 32] = stor13[address(arg5)].field_0
            mem[_66803 + 64] = (320 * _67015) + 128
            _69312 = mem[_66514]
            mem[_66803 + (320 * _67015) + 128] = mem[_66514]
            mem[_66803 + (320 * _67015) + 160 len ceil32(_69312)] = mem[_66514 + 32 len ceil32(_69312)]
            var64001 = ceil32(_69312)
            if ceil32(_69312) > _69312:
                mem[_66803 + (320 * _67015) + _69312 + 160] = 0
            return memory
              from mem[64]
               len ceil32(_69312) + _66803 + (320 * _67015) + -mem[64] + 160
        if stor13[address(arg5)].field_0 < 1:
            revert with 0, 17
        if arg3:
            if arg2 <= stor13[address(arg5)].field_0 - 1:
                if arg2 > test266151307():
                    revert with 0, 65
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160] = arg2
                mem[64] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 192
                if not arg2:
                    idx = 0
                    while idx < arg2:
                        if stor13[address(arg5)].field_0 - 1 < idx:
                            revert with 0, 17
                        if stor13[address(arg5)].field_0 + -idx - 1 >= mem[(32 * stor11.length) + 128]:
                            revert with 0, 50
                        mem[0] = mem[(32 * stor13[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + 160]
                        mem[32] = 12
                        _50856 = sha3(mem[(32 * stor13[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + 160], 12)
                        _50857 = mem[64]
                        mem[64] = mem[64] + 320
                        mem[_50857] = stor12[mem[(32 * stor13[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + 160]].field_0
                        mem[_50857 + 32] = stor1[_50856]
                        mem[_50857 + 64] = stor2[_50856]
                        mem[_50857 + 96] = stor3[_50856]
                        mem[_50857 + 128] = stor4[_50856]
                        mem[_50857 + 160] = stor5[_50856]
                        mem[_50857 + 192] = stor6[_50856]
                        mem[_50857 + 224] = stor7[_50856].field_0
                        mem[_50857 + 256] = bool(stor7[_50856].field_160)
                        mem[_50857 + 288] = stor8[_50856]
                        if idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                            revert with 0, 50
                        mem[(32 * idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192] = _50857
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if stor13[address(arg5)].field_0 - 1 < arg2:
                        _49307 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_49307] = 4
                        mem[_49307 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                        _49849 = mem[64]
                        mem[mem[64]] = 96
                        _50853 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                        mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                        idx = 0
                        s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192
                        t = mem[64] + 128
                        while idx < _50853:
                            _59721 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_59721 + 32]
                            mem[t + 64] = mem[_59721 + 64]
                            mem[t + 96] = mem[_59721 + 96]
                            mem[t + 128] = mem[_59721 + 128]
                            mem[t + 160] = mem[_59721 + 172 len 20]
                            mem[t + 192] = mem[_59721 + 192]
                            mem[t + 224] = mem[_59721 + 236 len 20]
                            mem[t + 256] = bool(mem[_59721 + 256])
                            mem[t + 288] = mem[_59721 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_49849 + 32] = 0
                        mem[_49849 + 64] = (320 * _50853) + 128
                        _60156 = mem[_49307]
                        mem[_49849 + (320 * _50853) + 128] = mem[_49307]
                        mem[_49849 + (320 * _50853) + 160 len ceil32(_60156)] = mem[_49307 + 32 len ceil32(_60156)]
                        var48001 = ceil32(_60156)
                        if ceil32(_60156) > _60156:
                            mem[_49849 + (320 * _50853) + _60156 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_60156) + _49849 + (320 * _50853) + -mem[64] + 160
                    _50854 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_50854] = 7
                    mem[_50854 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                    _51500 = mem[64]
                    mem[mem[64]] = 96
                    _51820 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                    mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                    idx = 0
                    s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192
                    t = mem[64] + 128
                    while idx < _51820:
                        _59728 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_59728 + 32]
                        mem[t + 64] = mem[_59728 + 64]
                        mem[t + 96] = mem[_59728 + 96]
                        mem[t + 128] = mem[_59728 + 128]
                        mem[t + 160] = mem[_59728 + 172 len 20]
                        mem[t + 192] = mem[_59728 + 192]
                        mem[t + 224] = mem[_59728 + 236 len 20]
                        mem[t + 256] = bool(mem[_59728 + 256])
                        mem[t + 288] = mem[_59728 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_51500 + 32] = stor13[address(arg5)].field_0 + -arg2 - 1
                    mem[_51500 + 64] = (320 * _51820) + 128
                    _60157 = mem[_50854]
                    mem[_51500 + (320 * _51820) + 128] = mem[_50854]
                    mem[_51500 + (320 * _51820) + 160 len ceil32(_60157)] = mem[_50854 + 32 len ceil32(_60157)]
                    var51001 = ceil32(_60157)
                    if ceil32(_60157) > _60157:
                        mem[_51500 + (320 * _51820) + _60157 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_60157) + _51500 + (320 * _51820) + -mem[64] + 160
                mem[64] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 512
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 192] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 224] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 256] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 288] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 320] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 352] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 384] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 416] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 448] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 480] = 0
                mem[var38001] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 192
                s = var38001
                idx = var38002
                while idx - 1:
                    mem[64] = mem[64] + 320
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 192] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 224] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 256] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 288] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 320] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 352] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 384] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 416] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 448] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 480] = 0
                    mem[s + 32] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 192
                    s = s + 32
                    idx = idx - 1
                    continue 
                idx = 0
                while idx < arg2:
                    if stor13[address(arg5)].field_0 - 1 < idx:
                        revert with 0, 17
                    if stor13[address(arg5)].field_0 + -idx - 1 >= mem[(32 * stor11.length) + 128]:
                        revert with 0, 50
                    mem[0] = mem[(32 * stor13[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + 160]
                    mem[32] = 12
                    _66089 = sha3(mem[(32 * stor13[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + 160], 12)
                    _66090 = mem[64]
                    mem[64] = mem[64] + 320
                    mem[_66090] = stor12[mem[(32 * stor13[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + 160]].field_0
                    mem[_66090 + 32] = stor1[_66089]
                    mem[_66090 + 64] = stor2[_66089]
                    mem[_66090 + 96] = stor3[_66089]
                    mem[_66090 + 128] = stor4[_66089]
                    mem[_66090 + 160] = stor5[_66089]
                    mem[_66090 + 192] = stor6[_66089]
                    mem[_66090 + 224] = stor7[_66089].field_0
                    mem[_66090 + 256] = bool(stor7[_66089].field_160)
                    mem[_66090 + 288] = stor8[_66089]
                    if idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                        revert with 0, 50
                    mem[(32 * idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192] = _66090
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
                if stor13[address(arg5)].field_0 - 1 < arg2:
                    _65254 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_65254] = 4
                    mem[_65254 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                    _65587 = mem[64]
                    mem[mem[64]] = 96
                    _66086 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                    mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                    idx = 0
                    s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192
                    t = mem[64] + 128
                    while idx < _66086:
                        _68960 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_68960 + 32]
                        mem[t + 64] = mem[_68960 + 64]
                        mem[t + 96] = mem[_68960 + 96]
                        mem[t + 128] = mem[_68960 + 128]
                        mem[t + 160] = mem[_68960 + 172 len 20]
                        mem[t + 192] = mem[_68960 + 192]
                        mem[t + 224] = mem[_68960 + 236 len 20]
                        mem[t + 256] = bool(mem[_68960 + 256])
                        mem[t + 288] = mem[_68960 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_65587 + 32] = 0
                    mem[_65587 + 64] = (320 * _66086) + 128
                    _69313 = mem[_65254]
                    mem[_65587 + (320 * _66086) + 128] = mem[_65254]
                    mem[_65587 + (320 * _66086) + 160 len ceil32(_69313)] = mem[_65254 + 32 len ceil32(_69313)]
                    var55001 = ceil32(_69313)
                    if ceil32(_69313) > _69313:
                        mem[_65587 + (320 * _66086) + _69313 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_69313) + _65587 + (320 * _66086) + -mem[64] + 160
                _66087 = mem[64]
                mem[64] = mem[64] + 64
                mem[_66087] = 7
                mem[_66087 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                _66364 = mem[64]
                mem[mem[64]] = 96
                _66516 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                idx = 0
                s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192
                t = mem[64] + 128
                while idx < _66516:
                    _68967 = mem[s]
                    mem[t] = mem[mem[s]]
                    mem[t + 32] = mem[_68967 + 32]
                    mem[t + 64] = mem[_68967 + 64]
                    mem[t + 96] = mem[_68967 + 96]
                    mem[t + 128] = mem[_68967 + 128]
                    mem[t + 160] = mem[_68967 + 172 len 20]
                    mem[t + 192] = mem[_68967 + 192]
                    mem[t + 224] = mem[_68967 + 236 len 20]
                    mem[t + 256] = bool(mem[_68967 + 256])
                    mem[t + 288] = mem[_68967 + 288]
                    idx = idx + 1
                    s = s + 32
                    t = t + 320
                    continue 
                mem[_66364 + 32] = stor13[address(arg5)].field_0 + -arg2 - 1
                mem[_66364 + 64] = (320 * _66516) + 128
                _69314 = mem[_66087]
                mem[_66364 + (320 * _66516) + 128] = mem[_66087]
                mem[_66364 + (320 * _66516) + 160 len ceil32(_69314)] = mem[_66087 + 32 len ceil32(_69314)]
                var58001 = ceil32(_69314)
                if ceil32(_69314) > _69314:
                    mem[_66364 + (320 * _66516) + _69314 + 160] = 0
                return memory
                  from mem[64]
                   len ceil32(_69314) + _66364 + (320 * _66516) + -mem[64] + 160
            if 1 > !(stor13[address(arg5)].field_0 - 1):
                revert with 0, 17
            if stor13[address(arg5)].field_0 > test266151307():
                revert with 0, 65
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160] = stor13[address(arg5)].field_0
            mem[64] = (32 * stor11.length) + (64 * stor13[address(arg5)].field_0) + 192
            if not stor13[address(arg5)].field_0:
                idx = 0
                while idx < stor13[address(arg5)].field_0:
                    if stor13[address(arg5)].field_0 - 1 < idx:
                        revert with 0, 17
                    if stor13[address(arg5)].field_0 + -idx - 1 >= mem[(32 * stor11.length) + 128]:
                        revert with 0, 50
                    mem[0] = mem[(32 * stor13[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + 160]
                    mem[32] = 12
                    _50862 = sha3(mem[(32 * stor13[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + 160], 12)
                    _50863 = mem[64]
                    mem[64] = mem[64] + 320
                    mem[_50863] = stor12[mem[(32 * stor13[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + 160]].field_0
                    mem[_50863 + 32] = stor1[_50862]
                    mem[_50863 + 64] = stor2[_50862]
                    mem[_50863 + 96] = stor3[_50862]
                    mem[_50863 + 128] = stor4[_50862]
                    mem[_50863 + 160] = stor5[_50862]
                    mem[_50863 + 192] = stor6[_50862]
                    mem[_50863 + 224] = stor7[_50862].field_0
                    mem[_50863 + 256] = bool(stor7[_50862].field_160)
                    mem[_50863 + 288] = stor8[_50862]
                    if idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                        revert with 0, 50
                    mem[(32 * idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192] = _50863
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
                if stor13[address(arg5)].field_0 - 1 < stor13[address(arg5)].field_0:
                    _49308 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_49308] = 4
                    mem[_49308 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                    _49851 = mem[64]
                    mem[mem[64]] = 96
                    _50859 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                    mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                    idx = 0
                    s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192
                    t = mem[64] + 128
                    while idx < _50859:
                        _59735 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_59735 + 32]
                        mem[t + 64] = mem[_59735 + 64]
                        mem[t + 96] = mem[_59735 + 96]
                        mem[t + 128] = mem[_59735 + 128]
                        mem[t + 160] = mem[_59735 + 172 len 20]
                        mem[t + 192] = mem[_59735 + 192]
                        mem[t + 224] = mem[_59735 + 236 len 20]
                        mem[t + 256] = bool(mem[_59735 + 256])
                        mem[t + 288] = mem[_59735 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_49851 + 32] = 0
                    mem[_49851 + 64] = (320 * _50859) + 128
                    _60158 = mem[_49308]
                    mem[_49851 + (320 * _50859) + 128] = mem[_49308]
                    mem[_49851 + (320 * _50859) + 160 len ceil32(_60158)] = mem[_49308 + 32 len ceil32(_60158)]
                    var52001 = ceil32(_60158)
                    if ceil32(_60158) > _60158:
                        mem[_49851 + (320 * _50859) + _60158 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_60158) + _49851 + (320 * _50859) + -mem[64] + 160
                _50860 = mem[64]
                mem[64] = mem[64] + 64
                mem[_50860] = 7
                mem[_50860 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                _51509 = mem[64]
                mem[mem[64]] = 96
                _51822 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                idx = 0
                s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192
                t = mem[64] + 128
                while idx < _51822:
                    _59742 = mem[s]
                    mem[t] = mem[mem[s]]
                    mem[t + 32] = mem[_59742 + 32]
                    mem[t + 64] = mem[_59742 + 64]
                    mem[t + 96] = mem[_59742 + 96]
                    mem[t + 128] = mem[_59742 + 128]
                    mem[t + 160] = mem[_59742 + 172 len 20]
                    mem[t + 192] = mem[_59742 + 192]
                    mem[t + 224] = mem[_59742 + 236 len 20]
                    mem[t + 256] = bool(mem[_59742 + 256])
                    mem[t + 288] = mem[_59742 + 288]
                    idx = idx + 1
                    s = s + 32
                    t = t + 320
                    continue 
                mem[_51509 + 32] = -1
                mem[_51509 + 64] = (320 * _51822) + 128
                _60159 = mem[_50860]
                mem[_51509 + (320 * _51822) + 128] = mem[_50860]
                mem[_51509 + (320 * _51822) + 160 len ceil32(_60159)] = mem[_50860 + 32 len ceil32(_60159)]
                var55001 = ceil32(_60159)
                if ceil32(_60159) > _60159:
                    mem[_51509 + (320 * _51822) + _60159 + 160] = 0
                return memory
                  from mem[64]
                   len ceil32(_60159) + _51509 + (320 * _51822) + -mem[64] + 160
            mem[64] = (32 * stor11.length) + (64 * stor13[address(arg5)].field_0) + 512
            mem[(32 * stor11.length) + (64 * stor13[address(arg5)].field_0) + 192] = 0
            mem[(32 * stor11.length) + (64 * stor13[address(arg5)].field_0) + 224] = 0
            mem[(32 * stor11.length) + (64 * stor13[address(arg5)].field_0) + 256] = 0
            mem[(32 * stor11.length) + (64 * stor13[address(arg5)].field_0) + 288] = 0
            mem[(32 * stor11.length) + (64 * stor13[address(arg5)].field_0) + 320] = 0
            mem[(32 * stor11.length) + (64 * stor13[address(arg5)].field_0) + 352] = 0
            mem[(32 * stor11.length) + (64 * stor13[address(arg5)].field_0) + 384] = 0
            mem[(32 * stor11.length) + (64 * stor13[address(arg5)].field_0) + 416] = 0
            mem[(32 * stor11.length) + (64 * stor13[address(arg5)].field_0) + 448] = 0
            mem[(32 * stor11.length) + (64 * stor13[address(arg5)].field_0) + 480] = 0
            mem[var42001] = (32 * stor11.length) + (64 * stor13[address(arg5)].field_0) + 192
            s = var42001
            idx = var42002
            while idx - 1:
                mem[64] = mem[64] + 320
                mem[(32 * stor11.length) + (64 * stor13[address(arg5)].field_0) + 192] = 0
                mem[(32 * stor11.length) + (64 * stor13[address(arg5)].field_0) + 224] = 0
                mem[(32 * stor11.length) + (64 * stor13[address(arg5)].field_0) + 256] = 0
                mem[(32 * stor11.length) + (64 * stor13[address(arg5)].field_0) + 288] = 0
                mem[(32 * stor11.length) + (64 * stor13[address(arg5)].field_0) + 320] = 0
                mem[(32 * stor11.length) + (64 * stor13[address(arg5)].field_0) + 352] = 0
                mem[(32 * stor11.length) + (64 * stor13[address(arg5)].field_0) + 384] = 0
                mem[(32 * stor11.length) + (64 * stor13[address(arg5)].field_0) + 416] = 0
                mem[(32 * stor11.length) + (64 * stor13[address(arg5)].field_0) + 448] = 0
                mem[(32 * stor11.length) + (64 * stor13[address(arg5)].field_0) + 480] = 0
                mem[s + 32] = (32 * stor11.length) + (64 * stor13[address(arg5)].field_0) + 192
                s = s + 32
                idx = idx - 1
                continue 
            idx = 0
            while idx < stor13[address(arg5)].field_0:
                if stor13[address(arg5)].field_0 - 1 < idx:
                    revert with 0, 17
                if stor13[address(arg5)].field_0 + -idx - 1 >= mem[(32 * stor11.length) + 128]:
                    revert with 0, 50
                mem[0] = mem[(32 * stor13[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + 160]
                mem[32] = 12
                _66097 = sha3(mem[(32 * stor13[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + 160], 12)
                _66098 = mem[64]
                mem[64] = mem[64] + 320
                mem[_66098] = stor12[mem[(32 * stor13[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + 160]].field_0
                mem[_66098 + 32] = stor1[_66097]
                mem[_66098 + 64] = stor2[_66097]
                mem[_66098 + 96] = stor3[_66097]
                mem[_66098 + 128] = stor4[_66097]
                mem[_66098 + 160] = stor5[_66097]
                mem[_66098 + 192] = stor6[_66097]
                mem[_66098 + 224] = stor7[_66097].field_0
                mem[_66098 + 256] = bool(stor7[_66097].field_160)
                mem[_66098 + 288] = stor8[_66097]
                if idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                    revert with 0, 50
                mem[(32 * idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192] = _66098
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
            if stor13[address(arg5)].field_0 - 1 < stor13[address(arg5)].field_0:
                _65255 = mem[64]
                mem[64] = mem[64] + 64
                mem[_65255] = 4
                mem[_65255 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                _65591 = mem[64]
                mem[mem[64]] = 96
                _66094 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                idx = 0
                s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192
                t = mem[64] + 128
                while idx < _66094:
                    _68974 = mem[s]
                    mem[t] = mem[mem[s]]
                    mem[t + 32] = mem[_68974 + 32]
                    mem[t + 64] = mem[_68974 + 64]
                    mem[t + 96] = mem[_68974 + 96]
                    mem[t + 128] = mem[_68974 + 128]
                    mem[t + 160] = mem[_68974 + 172 len 20]
                    mem[t + 192] = mem[_68974 + 192]
                    mem[t + 224] = mem[_68974 + 236 len 20]
                    mem[t + 256] = bool(mem[_68974 + 256])
                    mem[t + 288] = mem[_68974 + 288]
                    idx = idx + 1
                    s = s + 32
                    t = t + 320
                    continue 
                mem[_65591 + 32] = 0
                mem[_65591 + 64] = (320 * _66094) + 128
                _69315 = mem[_65255]
                mem[_65591 + (320 * _66094) + 128] = mem[_65255]
                mem[_65591 + (320 * _66094) + 160 len ceil32(_69315)] = mem[_65255 + 32 len ceil32(_69315)]
                var59001 = ceil32(_69315)
                if ceil32(_69315) > _69315:
                    mem[_65591 + (320 * _66094) + _69315 + 160] = 0
                return memory
                  from mem[64]
                   len ceil32(_69315) + _65591 + (320 * _66094) + -mem[64] + 160
            _66095 = mem[64]
            mem[64] = mem[64] + 64
            mem[_66095] = 7
            mem[_66095 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
            _66372 = mem[64]
            mem[mem[64]] = 96
            _66518 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
            mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
            idx = 0
            s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192
            t = mem[64] + 128
            while idx < _66518:
                _68981 = mem[s]
                mem[t] = mem[mem[s]]
                mem[t + 32] = mem[_68981 + 32]
                mem[t + 64] = mem[_68981 + 64]
                mem[t + 96] = mem[_68981 + 96]
                mem[t + 128] = mem[_68981 + 128]
                mem[t + 160] = mem[_68981 + 172 len 20]
                mem[t + 192] = mem[_68981 + 192]
                mem[t + 224] = mem[_68981 + 236 len 20]
                mem[t + 256] = bool(mem[_68981 + 256])
                mem[t + 288] = mem[_68981 + 288]
                idx = idx + 1
                s = s + 32
                t = t + 320
                continue 
            mem[_66372 + 32] = -1
            mem[_66372 + 64] = (320 * _66518) + 128
            _69316 = mem[_66095]
            mem[_66372 + (320 * _66518) + 128] = mem[_66095]
            mem[_66372 + (320 * _66518) + 160 len ceil32(_69316)] = mem[_66095 + 32 len ceil32(_69316)]
            var62001 = ceil32(_69316)
            if ceil32(_69316) > _69316:
                mem[_66372 + (320 * _66518) + _69316 + 160] = 0
            return memory
              from mem[64]
               len ceil32(_69316) + _66372 + (320 * _66518) + -mem[64] + 160
        if stor13[address(arg5)].field_0 < stor13[address(arg5)].field_0 - 1:
            revert with 0, 17
        if arg2 > 1:
            if stor13[address(arg5)].field_0 < stor13[address(arg5)].field_0 - 1:
                revert with 0, 17
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160] = 1
            mem[64] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 544
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 224] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 256] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 288] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 320] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 352] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 384] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 416] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 448] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 480] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 512] = 0
            mem[var45001] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 224
            s = var45001
            idx = var45002
            while idx - 1:
                mem[64] = mem[64] + 320
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 224] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 256] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 288] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 320] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 352] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 384] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 416] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 448] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 480] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 512] = 0
                mem[s + 32] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 224
                s = s + 32
                idx = idx - 1
                continue 
            idx = 0
            while idx < 1:
                if stor13[address(arg5)].field_0 - 1 > !idx:
                    revert with 0, 17
                if stor13[address(arg5)].field_0 + idx - 1 >= mem[(32 * stor11.length) + 128]:
                    revert with 0, 50
                mem[0] = mem[(32 * stor13[address(arg5)].field_0 + idx - 1) + (32 * stor11.length) + 160]
                mem[32] = 12
                _66109 = sha3(mem[(32 * stor13[address(arg5)].field_0 + idx - 1) + (32 * stor11.length) + 160], 12)
                _66110 = mem[64]
                mem[64] = mem[64] + 320
                mem[_66110] = stor12[mem[(32 * stor13[address(arg5)].field_0 + idx - 1) + (32 * stor11.length) + 160]].field_0
                mem[_66110 + 32] = stor1[_66109]
                mem[_66110 + 64] = stor2[_66109]
                mem[_66110 + 96] = stor3[_66109]
                mem[_66110 + 128] = stor4[_66109]
                mem[_66110 + 160] = stor5[_66109]
                mem[_66110 + 192] = stor6[_66109]
                mem[_66110 + 224] = stor7[_66109].field_0
                mem[_66110 + 256] = bool(stor7[_66109].field_160)
                mem[_66110 + 288] = stor8[_66109]
                if idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                    revert with 0, 50
                mem[(32 * idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192] = _66110
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
            if stor13[address(arg5)].field_0 - 1 > !1:
                revert with 0, 17
            if stor13[address(arg5)].field_0 - 1 > !1:
                revert with 0, 17
            if stor13[address(arg5)].field_0 < mem[(32 * stor11.length) + 128]:
                _66521 = mem[64]
                mem[64] = mem[64] + 64
                mem[_66521] = 7
                mem[_66521 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                _66822 = mem[64]
                mem[mem[64]] = 96
                _67022 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                idx = 0
                s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192
                t = mem[64] + 128
                while idx < _67022:
                    _69002 = mem[s]
                    mem[t] = mem[mem[s]]
                    mem[t + 32] = mem[_69002 + 32]
                    mem[t + 64] = mem[_69002 + 64]
                    mem[t + 96] = mem[_69002 + 96]
                    mem[t + 128] = mem[_69002 + 128]
                    mem[t + 160] = mem[_69002 + 172 len 20]
                    mem[t + 192] = mem[_69002 + 192]
                    mem[t + 224] = mem[_69002 + 236 len 20]
                    mem[t + 256] = bool(mem[_69002 + 256])
                    mem[t + 288] = mem[_69002 + 288]
                    idx = idx + 1
                    s = s + 32
                    t = t + 320
                    continue 
                mem[_66822 + 32] = stor13[address(arg5)].field_0
                mem[_66822 + 64] = (320 * _67022) + 128
                _69319 = mem[_66521]
                mem[_66822 + (320 * _67022) + 128] = mem[_66521]
                mem[_66822 + (320 * _67022) + 160 len ceil32(_69319)] = mem[_66521 + 32 len ceil32(_69319)]
                var68001 = ceil32(_69319)
                if ceil32(_69319) > _69319:
                    mem[_66822 + (320 * _67022) + _69319 + 160] = 0
                return memory
                  from mem[64]
                   len ceil32(_69319) + _66822 + (320 * _67022) + -mem[64] + 160
            _66522 = mem[64]
            mem[64] = mem[64] + 64
            mem[_66522] = 4
            mem[_66522 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
            _66823 = mem[64]
            mem[mem[64]] = 96
            _67023 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
            mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
            idx = 0
            s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192
            t = mem[64] + 128
            while idx < _67023:
                _69009 = mem[s]
                mem[t] = mem[mem[s]]
                mem[t + 32] = mem[_69009 + 32]
                mem[t + 64] = mem[_69009 + 64]
                mem[t + 96] = mem[_69009 + 96]
                mem[t + 128] = mem[_69009 + 128]
                mem[t + 160] = mem[_69009 + 172 len 20]
                mem[t + 192] = mem[_69009 + 192]
                mem[t + 224] = mem[_69009 + 236 len 20]
                mem[t + 256] = bool(mem[_69009 + 256])
                mem[t + 288] = mem[_69009 + 288]
                idx = idx + 1
                s = s + 32
                t = t + 320
                continue 
            mem[_66823 + 32] = stor13[address(arg5)].field_0
            mem[_66823 + 64] = (320 * _67023) + 128
            _69320 = mem[_66522]
            mem[_66823 + (320 * _67023) + 128] = mem[_66522]
            mem[_66823 + (320 * _67023) + 160 len ceil32(_69320)] = mem[_66522 + 32 len ceil32(_69320)]
            var68001 = ceil32(_69320)
            if ceil32(_69320) > _69320:
                mem[_66823 + (320 * _67023) + _69320 + 160] = 0
            return memory
              from mem[64]
               len ceil32(_69320) + _66823 + (320 * _67023) + -mem[64] + 160
        if arg2 > test266151307():
            revert with 0, 65
        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160] = arg2
        mem[64] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 192
        if not arg2:
            idx = 0
            while idx < arg2:
                if stor13[address(arg5)].field_0 - 1 > !idx:
                    revert with 0, 17
                if stor13[address(arg5)].field_0 + idx - 1 >= mem[(32 * stor11.length) + 128]:
                    revert with 0, 50
                mem[0] = mem[(32 * stor13[address(arg5)].field_0 + idx - 1) + (32 * stor11.length) + 160]
                mem[32] = 12
                _50866 = sha3(mem[(32 * stor13[address(arg5)].field_0 + idx - 1) + (32 * stor11.length) + 160], 12)
                _50867 = mem[64]
                mem[64] = mem[64] + 320
                mem[_50867] = stor12[mem[(32 * stor13[address(arg5)].field_0 + idx - 1) + (32 * stor11.length) + 160]].field_0
                mem[_50867 + 32] = stor1[_50866]
                mem[_50867 + 64] = stor2[_50866]
                mem[_50867 + 96] = stor3[_50866]
                mem[_50867 + 128] = stor4[_50866]
                mem[_50867 + 160] = stor5[_50866]
                mem[_50867 + 192] = stor6[_50866]
                mem[_50867 + 224] = stor7[_50866].field_0
                mem[_50867 + 256] = bool(stor7[_50866].field_160)
                mem[_50867 + 288] = stor8[_50866]
                if idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                    revert with 0, 50
                mem[(32 * idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192] = _50867
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
            if stor13[address(arg5)].field_0 - 1 > !arg2:
                revert with 0, 17
            if stor13[address(arg5)].field_0 - 1 > !arg2:
                revert with 0, 17
            if stor13[address(arg5)].field_0 + arg2 - 1 < mem[(32 * stor11.length) + 128]:
                _51823 = mem[64]
                mem[64] = mem[64] + 64
                mem[_51823] = 7
                mem[_51823 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                _52929 = mem[64]
                mem[mem[64]] = 96
                _53289 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
                idx = 0
                s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192
                t = mem[64] + 128
                while idx < _53289:
                    _59749 = mem[s]
                    mem[t] = mem[mem[s]]
                    mem[t + 32] = mem[_59749 + 32]
                    mem[t + 64] = mem[_59749 + 64]
                    mem[t + 96] = mem[_59749 + 96]
                    mem[t + 128] = mem[_59749 + 128]
                    mem[t + 160] = mem[_59749 + 172 len 20]
                    mem[t + 192] = mem[_59749 + 192]
                    mem[t + 224] = mem[_59749 + 236 len 20]
                    mem[t + 256] = bool(mem[_59749 + 256])
                    mem[t + 288] = mem[_59749 + 288]
                    idx = idx + 1
                    s = s + 32
                    t = t + 320
                    continue 
                mem[_52929 + 32] = stor13[address(arg5)].field_0 + arg2 - 1
                mem[_52929 + 64] = (320 * _53289) + 128
                _60160 = mem[_51823]
                mem[_52929 + (320 * _53289) + 128] = mem[_51823]
                mem[_52929 + (320 * _53289) + 160 len ceil32(_60160)] = mem[_51823 + 32 len ceil32(_60160)]
                var57001 = ceil32(_60160)
                if ceil32(_60160) > _60160:
                    mem[_52929 + (320 * _53289) + _60160 + 160] = 0
                return memory
                  from mem[64]
                   len ceil32(_60160) + _52929 + (320 * _53289) + -mem[64] + 160
            _51824 = mem[64]
            mem[64] = mem[64] + 64
            mem[_51824] = 4
            mem[_51824 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
            _52930 = mem[64]
            mem[mem[64]] = 96
            _53290 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
            mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
            idx = 0
            s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192
            t = mem[64] + 128
            while idx < _53290:
                _59756 = mem[s]
                mem[t] = mem[mem[s]]
                mem[t + 32] = mem[_59756 + 32]
                mem[t + 64] = mem[_59756 + 64]
                mem[t + 96] = mem[_59756 + 96]
                mem[t + 128] = mem[_59756 + 128]
                mem[t + 160] = mem[_59756 + 172 len 20]
                mem[t + 192] = mem[_59756 + 192]
                mem[t + 224] = mem[_59756 + 236 len 20]
                mem[t + 256] = bool(mem[_59756 + 256])
                mem[t + 288] = mem[_59756 + 288]
                idx = idx + 1
                s = s + 32
                t = t + 320
                continue 
            mem[_52930 + 32] = stor13[address(arg5)].field_0 + arg2 - 1
            mem[_52930 + 64] = (320 * _53290) + 128
            _60161 = mem[_51824]
            mem[_52930 + (320 * _53290) + 128] = mem[_51824]
            mem[_52930 + (320 * _53290) + 160 len ceil32(_60161)] = mem[_51824 + 32 len ceil32(_60161)]
            var57001 = ceil32(_60161)
            if ceil32(_60161) > _60161:
                mem[_52930 + (320 * _53290) + _60161 + 160] = 0
            return memory
              from mem[64]
               len ceil32(_60161) + _52930 + (320 * _53290) + -mem[64] + 160
        mem[64] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 512
        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 192] = 0
        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 224] = 0
        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 256] = 0
        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 288] = 0
        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 320] = 0
        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 352] = 0
        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 384] = 0
        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 416] = 0
        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 448] = 0
        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 480] = 0
        mem[var41001] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 192
        s = var41001
        idx = var41002
        while idx - 1:
            mem[64] = mem[64] + 320
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 192] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 224] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 256] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 288] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 320] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 352] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 384] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 416] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 448] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 480] = 0
            mem[s + 32] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * arg2) + 192
            s = s + 32
            idx = idx - 1
            continue 
        idx = 0
        while idx < arg2:
            if stor13[address(arg5)].field_0 - 1 > !idx:
                revert with 0, 17
            if stor13[address(arg5)].field_0 + idx - 1 >= mem[(32 * stor11.length) + 128]:
                revert with 0, 50
            mem[0] = mem[(32 * stor13[address(arg5)].field_0 + idx - 1) + (32 * stor11.length) + 160]
            mem[32] = 12
            _66103 = sha3(mem[(32 * stor13[address(arg5)].field_0 + idx - 1) + (32 * stor11.length) + 160], 12)
            _66104 = mem[64]
            mem[64] = mem[64] + 320
            mem[_66104] = stor12[mem[(32 * stor13[address(arg5)].field_0 + idx - 1) + (32 * stor11.length) + 160]].field_0
            mem[_66104 + 32] = stor1[_66103]
            mem[_66104 + 64] = stor2[_66103]
            mem[_66104 + 96] = stor3[_66103]
            mem[_66104 + 128] = stor4[_66103]
            mem[_66104 + 160] = stor5[_66103]
            mem[_66104 + 192] = stor6[_66103]
            mem[_66104 + 224] = stor7[_66103].field_0
            mem[_66104 + 256] = bool(stor7[_66103].field_160)
            mem[_66104 + 288] = stor8[_66103]
            if idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                revert with 0, 50
            mem[(32 * idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192] = _66104
            if idx == -1:
                revert with 0, 17
            idx = idx + 1
            continue 
        if stor13[address(arg5)].field_0 - 1 > !arg2:
            revert with 0, 17
        if stor13[address(arg5)].field_0 - 1 > !arg2:
            revert with 0, 17
        if stor13[address(arg5)].field_0 + arg2 - 1 < mem[(32 * stor11.length) + 128]:
            _66519 = mem[64]
            mem[64] = mem[64] + 64
            mem[_66519] = 7
            mem[_66519 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
            _66820 = mem[64]
            mem[mem[64]] = 96
            _67020 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
            mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
            idx = 0
            s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192
            t = mem[64] + 128
            while idx < _67020:
                _68988 = mem[s]
                mem[t] = mem[mem[s]]
                mem[t + 32] = mem[_68988 + 32]
                mem[t + 64] = mem[_68988 + 64]
                mem[t + 96] = mem[_68988 + 96]
                mem[t + 128] = mem[_68988 + 128]
                mem[t + 160] = mem[_68988 + 172 len 20]
                mem[t + 192] = mem[_68988 + 192]
                mem[t + 224] = mem[_68988 + 236 len 20]
                mem[t + 256] = bool(mem[_68988 + 256])
                mem[t + 288] = mem[_68988 + 288]
                idx = idx + 1
                s = s + 32
                t = t + 320
                continue 
            mem[_66820 + 32] = stor13[address(arg5)].field_0 + arg2 - 1
            mem[_66820 + 64] = (320 * _67020) + 128
            _69317 = mem[_66519]
            mem[_66820 + (320 * _67020) + 128] = mem[_66519]
            mem[_66820 + (320 * _67020) + 160 len ceil32(_69317)] = mem[_66519 + 32 len ceil32(_69317)]
            var64001 = ceil32(_69317)
            if ceil32(_69317) > _69317:
                mem[_66820 + (320 * _67020) + _69317 + 160] = 0
            return memory
              from mem[64]
               len ceil32(_69317) + _66820 + (320 * _67020) + -mem[64] + 160
        _66520 = mem[64]
        mem[64] = mem[64] + 64
        mem[_66520] = 4
        mem[_66520 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
        _66821 = mem[64]
        mem[mem[64]] = 96
        _67021 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
        mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]
        idx = 0
        s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192
        t = mem[64] + 128
        while idx < _67021:
            _68995 = mem[s]
            mem[t] = mem[mem[s]]
            mem[t + 32] = mem[_68995 + 32]
            mem[t + 64] = mem[_68995 + 64]
            mem[t + 96] = mem[_68995 + 96]
            mem[t + 128] = mem[_68995 + 128]
            mem[t + 160] = mem[_68995 + 172 len 20]
            mem[t + 192] = mem[_68995 + 192]
            mem[t + 224] = mem[_68995 + 236 len 20]
            mem[t + 256] = bool(mem[_68995 + 256])
            mem[t + 288] = mem[_68995 + 288]
            idx = idx + 1
            s = s + 32
            t = t + 320
            continue 
        mem[_66821 + 32] = stor13[address(arg5)].field_0 + arg2 - 1
        mem[_66821 + 64] = (320 * _67021) + 128
        _69318 = mem[_66520]
        mem[_66821 + (320 * _67021) + 128] = mem[_66520]
        mem[_66821 + (320 * _67021) + 160 len ceil32(_69318)] = mem[_66520 + 32 len ceil32(_69318)]
        var64001 = ceil32(_69318)
        if ceil32(_69318) > _69318:
            mem[_66821 + (320 * _67021) + _69318 + 160] = 0
        return memory
          from mem[64]
           len ceil32(_69318) + _66821 + (320 * _67021) + -mem[64] + 160
    mem[0] = address(arg5)
    mem[32] = 15
    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160] = stor15[address(arg5)].field_0
    if not stor15[address(arg5)].field_0:
        if not stor15[address(arg5)].field_0:
            mem[64] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 288
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224] = 4
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 256] = 0x6f76657200000000000000000000000000000000000000000000000000000000
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 288] = 96
            _41365 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 384] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
            idx = 0
            s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
            t = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 416
            while idx < mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]:
                _49230 = mem[s]
                mem[t] = mem[mem[s]]
                mem[t + 32] = mem[_49230 + 32]
                mem[t + 64] = mem[_49230 + 64]
                mem[t + 96] = mem[_49230 + 96]
                mem[t + 128] = mem[_49230 + 128]
                mem[t + 160] = mem[_49230 + 172 len 20]
                mem[t + 192] = mem[_49230 + 192]
                mem[t + 224] = mem[_49230 + 236 len 20]
                mem[t + 256] = bool(mem[_49230 + 256])
                mem[t + 288] = mem[_49230 + 288]
                idx = idx + 1
                s = s + 32
                t = t + 320
                continue 
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 320] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 352] = (320 * _41365) + 128
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (320 * _41365) + 416] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224]
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (320 * _41365) + 448 len ceil32(mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224])] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 256 len ceil32(mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224])]
            var38001 = ceil32(mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224])
            if ceil32(mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224]) > mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224]:
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (320 * _41365) + mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224] + 448] = 0
            return memory
              from mem[64]
               len ceil32(mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224]) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (320 * _41365) + -mem[64] + 448
        if arg1 < stor15[address(arg5)].field_0:
            if arg3:
                if arg2 <= arg1:
                    if arg2 > test266151307():
                        revert with 0, 65
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192] = arg2
                    mem[64] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224
                    if not arg2:
                        idx = 0
                        while idx < arg2:
                            if arg1 < idx:
                                revert with 0, 17
                            if arg1 - idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                                revert with 0, 50
                            mem[0] = mem[(32 * arg1 - idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]
                            mem[32] = 12
                            _50877 = sha3(mem[(32 * arg1 - idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192], 12)
                            _50878 = mem[64]
                            mem[64] = mem[64] + 320
                            mem[_50878] = stor12[mem[(32 * arg1 - idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]].field_0
                            mem[_50878 + 32] = stor1[_50877]
                            mem[_50878 + 64] = stor2[_50877]
                            mem[_50878 + 96] = stor3[_50877]
                            mem[_50878 + 128] = stor4[_50877]
                            mem[_50878 + 160] = stor5[_50877]
                            mem[_50878 + 192] = stor6[_50877]
                            mem[_50878 + 224] = stor7[_50877].field_0
                            mem[_50878 + 256] = bool(stor7[_50877].field_160)
                            mem[_50878 + 288] = stor8[_50877]
                            if idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]:
                                revert with 0, 50
                            mem[(32 * idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224] = _50878
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            continue 
                        if arg1 < arg2:
                            _49310 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_49310] = 4
                            mem[_49310 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                            _49856 = mem[64]
                            mem[mem[64]] = 96
                            _50874 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                            mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                            idx = 0
                            s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                            t = mem[64] + 128
                            while idx < _50874:
                                _59778 = mem[s]
                                mem[t] = mem[mem[s]]
                                mem[t + 32] = mem[_59778 + 32]
                                mem[t + 64] = mem[_59778 + 64]
                                mem[t + 96] = mem[_59778 + 96]
                                mem[t + 128] = mem[_59778 + 128]
                                mem[t + 160] = mem[_59778 + 172 len 20]
                                mem[t + 192] = mem[_59778 + 192]
                                mem[t + 224] = mem[_59778 + 236 len 20]
                                mem[t + 256] = bool(mem[_59778 + 256])
                                mem[t + 288] = mem[_59778 + 288]
                                idx = idx + 1
                                s = s + 32
                                t = t + 320
                                continue 
                            mem[_49856 + 32] = 0
                            mem[_49856 + 64] = (320 * _50874) + 128
                            _60164 = mem[_49310]
                            mem[_49856 + (320 * _50874) + 128] = mem[_49310]
                            mem[_49856 + (320 * _50874) + 160 len ceil32(_60164)] = mem[_49310 + 32 len ceil32(_60164)]
                            var46001 = ceil32(_60164)
                            if ceil32(_60164) > _60164:
                                mem[_49856 + (320 * _50874) + _60164 + 160] = 0
                            return memory
                              from mem[64]
                               len ceil32(_60164) + _49856 + (320 * _50874) + -mem[64] + 160
                        _50875 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_50875] = 7
                        mem[_50875 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                        _51520 = mem[64]
                        mem[mem[64]] = 96
                        _51829 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                        mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                        idx = 0
                        s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                        t = mem[64] + 128
                        while idx < _51829:
                            _59785 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_59785 + 32]
                            mem[t + 64] = mem[_59785 + 64]
                            mem[t + 96] = mem[_59785 + 96]
                            mem[t + 128] = mem[_59785 + 128]
                            mem[t + 160] = mem[_59785 + 172 len 20]
                            mem[t + 192] = mem[_59785 + 192]
                            mem[t + 224] = mem[_59785 + 236 len 20]
                            mem[t + 256] = bool(mem[_59785 + 256])
                            mem[t + 288] = mem[_59785 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_51520 + 32] = arg1 - arg2
                        mem[_51520 + 64] = (320 * _51829) + 128
                        _60165 = mem[_50875]
                        mem[_51520 + (320 * _51829) + 128] = mem[_50875]
                        mem[_51520 + (320 * _51829) + 160 len ceil32(_60165)] = mem[_50875 + 32 len ceil32(_60165)]
                        var49001 = ceil32(_60165)
                        if ceil32(_60165) > _60165:
                            mem[_51520 + (320 * _51829) + _60165 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_60165) + _51520 + (320 * _51829) + -mem[64] + 160
                    mem[64] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 544
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 256] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 288] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 320] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 352] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 384] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 416] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 448] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 480] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 512] = 0
                    mem[var36001] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224
                    s = var36001
                    idx = var36002
                    while idx - 1:
                        mem[64] = mem[64] + 320
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 256] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 288] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 320] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 352] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 384] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 416] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 448] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 480] = 0
                        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 512] = 0
                        mem[s + 32] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224
                        s = s + 32
                        idx = idx - 1
                        continue 
                    idx = 0
                    while idx < arg2:
                        if arg1 < idx:
                            revert with 0, 17
                        if arg1 - idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                            revert with 0, 50
                        mem[0] = mem[(32 * arg1 - idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]
                        mem[32] = 12
                        _66117 = sha3(mem[(32 * arg1 - idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192], 12)
                        _66118 = mem[64]
                        mem[64] = mem[64] + 320
                        mem[_66118] = stor12[mem[(32 * arg1 - idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]].field_0
                        mem[_66118 + 32] = stor1[_66117]
                        mem[_66118 + 64] = stor2[_66117]
                        mem[_66118 + 96] = stor3[_66117]
                        mem[_66118 + 128] = stor4[_66117]
                        mem[_66118 + 160] = stor5[_66117]
                        mem[_66118 + 192] = stor6[_66117]
                        mem[_66118 + 224] = stor7[_66117].field_0
                        mem[_66118 + 256] = bool(stor7[_66117].field_160)
                        mem[_66118 + 288] = stor8[_66117]
                        if idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]:
                            revert with 0, 50
                        mem[(32 * idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224] = _66118
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if arg1 < arg2:
                        _65256 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_65256] = 4
                        mem[_65256 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                        _65601 = mem[64]
                        mem[mem[64]] = 96
                        _66114 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                        mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                        idx = 0
                        s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                        t = mem[64] + 128
                        while idx < _66114:
                            _69016 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_69016 + 32]
                            mem[t + 64] = mem[_69016 + 64]
                            mem[t + 96] = mem[_69016 + 96]
                            mem[t + 128] = mem[_69016 + 128]
                            mem[t + 160] = mem[_69016 + 172 len 20]
                            mem[t + 192] = mem[_69016 + 192]
                            mem[t + 224] = mem[_69016 + 236 len 20]
                            mem[t + 256] = bool(mem[_69016 + 256])
                            mem[t + 288] = mem[_69016 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_65601 + 32] = 0
                        mem[_65601 + 64] = (320 * _66114) + 128
                        _69321 = mem[_65256]
                        mem[_65601 + (320 * _66114) + 128] = mem[_65256]
                        mem[_65601 + (320 * _66114) + 160 len ceil32(_69321)] = mem[_65256 + 32 len ceil32(_69321)]
                        var53001 = ceil32(_69321)
                        if ceil32(_69321) > _69321:
                            mem[_65601 + (320 * _66114) + _69321 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_69321) + _65601 + (320 * _66114) + -mem[64] + 160
                    _66115 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_66115] = 7
                    mem[_66115 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                    _66380 = mem[64]
                    mem[mem[64]] = 96
                    _66524 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                    mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                    idx = 0
                    s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                    t = mem[64] + 128
                    while idx < _66524:
                        _69023 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_69023 + 32]
                        mem[t + 64] = mem[_69023 + 64]
                        mem[t + 96] = mem[_69023 + 96]
                        mem[t + 128] = mem[_69023 + 128]
                        mem[t + 160] = mem[_69023 + 172 len 20]
                        mem[t + 192] = mem[_69023 + 192]
                        mem[t + 224] = mem[_69023 + 236 len 20]
                        mem[t + 256] = bool(mem[_69023 + 256])
                        mem[t + 288] = mem[_69023 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_66380 + 32] = arg1 - arg2
                    mem[_66380 + 64] = (320 * _66524) + 128
                    _69322 = mem[_66115]
                    mem[_66380 + (320 * _66524) + 128] = mem[_66115]
                    mem[_66380 + (320 * _66524) + 160 len ceil32(_69322)] = mem[_66115 + 32 len ceil32(_69322)]
                    var56001 = ceil32(_69322)
                    if ceil32(_69322) > _69322:
                        mem[_66380 + (320 * _66524) + _69322 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_69322) + _66380 + (320 * _66524) + -mem[64] + 160
                if 1 > !arg1:
                    revert with 0, 17
                if arg1 + 1 > test266151307():
                    revert with 0, 65
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192] = arg1 + 1
                mem[64] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 224
                if not arg1 + 1:
                    idx = 0
                    while idx < arg1 + 1:
                        if arg1 < idx:
                            revert with 0, 17
                        if arg1 - idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                            revert with 0, 50
                        mem[0] = mem[(32 * arg1 - idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]
                        mem[32] = 12
                        _50883 = sha3(mem[(32 * arg1 - idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192], 12)
                        _50884 = mem[64]
                        mem[64] = mem[64] + 320
                        mem[_50884] = stor12[mem[(32 * arg1 - idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]].field_0
                        mem[_50884 + 32] = stor1[_50883]
                        mem[_50884 + 64] = stor2[_50883]
                        mem[_50884 + 96] = stor3[_50883]
                        mem[_50884 + 128] = stor4[_50883]
                        mem[_50884 + 160] = stor5[_50883]
                        mem[_50884 + 192] = stor6[_50883]
                        mem[_50884 + 224] = stor7[_50883].field_0
                        mem[_50884 + 256] = bool(stor7[_50883].field_160)
                        mem[_50884 + 288] = stor8[_50883]
                        if idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]:
                            revert with 0, 50
                        mem[(32 * idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224] = _50884
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if arg1 < arg1 + 1:
                        _49311 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_49311] = 4
                        mem[_49311 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                        _49858 = mem[64]
                        mem[mem[64]] = 96
                        _50880 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                        mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                        idx = 0
                        s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                        t = mem[64] + 128
                        while idx < _50880:
                            _59792 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_59792 + 32]
                            mem[t + 64] = mem[_59792 + 64]
                            mem[t + 96] = mem[_59792 + 96]
                            mem[t + 128] = mem[_59792 + 128]
                            mem[t + 160] = mem[_59792 + 172 len 20]
                            mem[t + 192] = mem[_59792 + 192]
                            mem[t + 224] = mem[_59792 + 236 len 20]
                            mem[t + 256] = bool(mem[_59792 + 256])
                            mem[t + 288] = mem[_59792 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_49858 + 32] = 0
                        mem[_49858 + 64] = (320 * _50880) + 128
                        _60166 = mem[_49311]
                        mem[_49858 + (320 * _50880) + 128] = mem[_49311]
                        mem[_49858 + (320 * _50880) + 160 len ceil32(_60166)] = mem[_49311 + 32 len ceil32(_60166)]
                        var50001 = ceil32(_60166)
                        if ceil32(_60166) > _60166:
                            mem[_49858 + (320 * _50880) + _60166 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_60166) + _49858 + (320 * _50880) + -mem[64] + 160
                    _50881 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_50881] = 7
                    mem[_50881 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                    _51529 = mem[64]
                    mem[mem[64]] = 96
                    _51831 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                    mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                    idx = 0
                    s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                    t = mem[64] + 128
                    while idx < _51831:
                        _59799 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_59799 + 32]
                        mem[t + 64] = mem[_59799 + 64]
                        mem[t + 96] = mem[_59799 + 96]
                        mem[t + 128] = mem[_59799 + 128]
                        mem[t + 160] = mem[_59799 + 172 len 20]
                        mem[t + 192] = mem[_59799 + 192]
                        mem[t + 224] = mem[_59799 + 236 len 20]
                        mem[t + 256] = bool(mem[_59799 + 256])
                        mem[t + 288] = mem[_59799 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_51529 + 32] = -1
                    mem[_51529 + 64] = (320 * _51831) + 128
                    _60167 = mem[_50881]
                    mem[_51529 + (320 * _51831) + 128] = mem[_50881]
                    mem[_51529 + (320 * _51831) + 160 len ceil32(_60167)] = mem[_50881 + 32 len ceil32(_60167)]
                    var53001 = ceil32(_60167)
                    if ceil32(_60167) > _60167:
                        mem[_51529 + (320 * _51831) + _60167 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_60167) + _51529 + (320 * _51831) + -mem[64] + 160
                mem[64] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 544
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 224] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 256] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 288] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 320] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 352] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 384] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 416] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 448] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 480] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 512] = 0
                mem[var40001] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 224
                s = var40001
                idx = var40002
                while idx - 1:
                    mem[64] = mem[64] + 320
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 224] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 256] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 288] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 320] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 352] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 384] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 416] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 448] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 480] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 512] = 0
                    mem[s + 32] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 224
                    s = s + 32
                    idx = idx - 1
                    continue 
                idx = 0
                while idx < arg1 + 1:
                    if arg1 < idx:
                        revert with 0, 17
                    if arg1 - idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                        revert with 0, 50
                    mem[0] = mem[(32 * arg1 - idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]
                    mem[32] = 12
                    _66125 = sha3(mem[(32 * arg1 - idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192], 12)
                    _66126 = mem[64]
                    mem[64] = mem[64] + 320
                    mem[_66126] = stor12[mem[(32 * arg1 - idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]].field_0
                    mem[_66126 + 32] = stor1[_66125]
                    mem[_66126 + 64] = stor2[_66125]
                    mem[_66126 + 96] = stor3[_66125]
                    mem[_66126 + 128] = stor4[_66125]
                    mem[_66126 + 160] = stor5[_66125]
                    mem[_66126 + 192] = stor6[_66125]
                    mem[_66126 + 224] = stor7[_66125].field_0
                    mem[_66126 + 256] = bool(stor7[_66125].field_160)
                    mem[_66126 + 288] = stor8[_66125]
                    if idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]:
                        revert with 0, 50
                    mem[(32 * idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224] = _66126
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
                if arg1 < arg1 + 1:
                    _65257 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_65257] = 4
                    mem[_65257 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                    _65605 = mem[64]
                    mem[mem[64]] = 96
                    _66122 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                    mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                    idx = 0
                    s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                    t = mem[64] + 128
                    while idx < _66122:
                        _69030 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_69030 + 32]
                        mem[t + 64] = mem[_69030 + 64]
                        mem[t + 96] = mem[_69030 + 96]
                        mem[t + 128] = mem[_69030 + 128]
                        mem[t + 160] = mem[_69030 + 172 len 20]
                        mem[t + 192] = mem[_69030 + 192]
                        mem[t + 224] = mem[_69030 + 236 len 20]
                        mem[t + 256] = bool(mem[_69030 + 256])
                        mem[t + 288] = mem[_69030 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_65605 + 32] = 0
                    mem[_65605 + 64] = (320 * _66122) + 128
                    _69323 = mem[_65257]
                    mem[_65605 + (320 * _66122) + 128] = mem[_65257]
                    mem[_65605 + (320 * _66122) + 160 len ceil32(_69323)] = mem[_65257 + 32 len ceil32(_69323)]
                    var57001 = ceil32(_69323)
                    if ceil32(_69323) > _69323:
                        mem[_65605 + (320 * _66122) + _69323 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_69323) + _65605 + (320 * _66122) + -mem[64] + 160
                _66123 = mem[64]
                mem[64] = mem[64] + 64
                mem[_66123] = 7
                mem[_66123 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                _66388 = mem[64]
                mem[mem[64]] = 96
                _66526 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                idx = 0
                s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                t = mem[64] + 128
                while idx < _66526:
                    _69037 = mem[s]
                    mem[t] = mem[mem[s]]
                    mem[t + 32] = mem[_69037 + 32]
                    mem[t + 64] = mem[_69037 + 64]
                    mem[t + 96] = mem[_69037 + 96]
                    mem[t + 128] = mem[_69037 + 128]
                    mem[t + 160] = mem[_69037 + 172 len 20]
                    mem[t + 192] = mem[_69037 + 192]
                    mem[t + 224] = mem[_69037 + 236 len 20]
                    mem[t + 256] = bool(mem[_69037 + 256])
                    mem[t + 288] = mem[_69037 + 288]
                    idx = idx + 1
                    s = s + 32
                    t = t + 320
                    continue 
                mem[_66388 + 32] = -1
                mem[_66388 + 64] = (320 * _66526) + 128
                _69324 = mem[_66123]
                mem[_66388 + (320 * _66526) + 128] = mem[_66123]
                mem[_66388 + (320 * _66526) + 160 len ceil32(_69324)] = mem[_66123 + 32 len ceil32(_69324)]
                var60001 = ceil32(_69324)
                if ceil32(_69324) > _69324:
                    mem[_66388 + (320 * _66526) + _69324 + 160] = 0
                return memory
                  from mem[64]
                   len ceil32(_69324) + _66388 + (320 * _66526) + -mem[64] + 160
            if stor15[address(arg5)].field_0 < arg1:
                revert with 0, 17
            if arg2 <= stor15[address(arg5)].field_0 - arg1:
                if arg2 > test266151307():
                    revert with 0, 65
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192] = arg2
                mem[64] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224
                if not arg2:
                    idx = 0
                    while idx < arg2:
                        if arg1 > !idx:
                            revert with 0, 17
                        if arg1 + idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                            revert with 0, 50
                        mem[0] = mem[(32 * arg1 + idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]
                        mem[32] = 12
                        _50887 = sha3(mem[(32 * arg1 + idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192], 12)
                        _50888 = mem[64]
                        mem[64] = mem[64] + 320
                        mem[_50888] = stor12[mem[(32 * arg1 + idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]].field_0
                        mem[_50888 + 32] = stor1[_50887]
                        mem[_50888 + 64] = stor2[_50887]
                        mem[_50888 + 96] = stor3[_50887]
                        mem[_50888 + 128] = stor4[_50887]
                        mem[_50888 + 160] = stor5[_50887]
                        mem[_50888 + 192] = stor6[_50887]
                        mem[_50888 + 224] = stor7[_50887].field_0
                        mem[_50888 + 256] = bool(stor7[_50887].field_160)
                        mem[_50888 + 288] = stor8[_50887]
                        if idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]:
                            revert with 0, 50
                        mem[(32 * idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224] = _50888
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if arg1 > !arg2:
                        revert with 0, 17
                    if arg1 > !arg2:
                        revert with 0, 17
                    if arg1 + arg2 < mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                        _51832 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_51832] = 7
                        mem[_51832 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                        _52969 = mem[64]
                        mem[mem[64]] = 96
                        _53297 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                        mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                        idx = 0
                        s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                        t = mem[64] + 128
                        while idx < _53297:
                            _59806 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_59806 + 32]
                            mem[t + 64] = mem[_59806 + 64]
                            mem[t + 96] = mem[_59806 + 96]
                            mem[t + 128] = mem[_59806 + 128]
                            mem[t + 160] = mem[_59806 + 172 len 20]
                            mem[t + 192] = mem[_59806 + 192]
                            mem[t + 224] = mem[_59806 + 236 len 20]
                            mem[t + 256] = bool(mem[_59806 + 256])
                            mem[t + 288] = mem[_59806 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_52969 + 32] = arg1 + arg2
                        mem[_52969 + 64] = (320 * _53297) + 128
                        _60168 = mem[_51832]
                        mem[_52969 + (320 * _53297) + 128] = mem[_51832]
                        mem[_52969 + (320 * _53297) + 160 len ceil32(_60168)] = mem[_51832 + 32 len ceil32(_60168)]
                        var55001 = ceil32(_60168)
                        if ceil32(_60168) > _60168:
                            mem[_52969 + (320 * _53297) + _60168 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_60168) + _52969 + (320 * _53297) + -mem[64] + 160
                    _51833 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_51833] = 4
                    mem[_51833 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                    _52970 = mem[64]
                    mem[mem[64]] = 96
                    _53298 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                    mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                    idx = 0
                    s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                    t = mem[64] + 128
                    while idx < _53298:
                        _59813 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_59813 + 32]
                        mem[t + 64] = mem[_59813 + 64]
                        mem[t + 96] = mem[_59813 + 96]
                        mem[t + 128] = mem[_59813 + 128]
                        mem[t + 160] = mem[_59813 + 172 len 20]
                        mem[t + 192] = mem[_59813 + 192]
                        mem[t + 224] = mem[_59813 + 236 len 20]
                        mem[t + 256] = bool(mem[_59813 + 256])
                        mem[t + 288] = mem[_59813 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_52970 + 32] = arg1 + arg2
                    mem[_52970 + 64] = (320 * _53298) + 128
                    _60169 = mem[_51833]
                    mem[_52970 + (320 * _53298) + 128] = mem[_51833]
                    mem[_52970 + (320 * _53298) + 160 len ceil32(_60169)] = mem[_51833 + 32 len ceil32(_60169)]
                    var55001 = ceil32(_60169)
                    if ceil32(_60169) > _60169:
                        mem[_52970 + (320 * _53298) + _60169 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_60169) + _52970 + (320 * _53298) + -mem[64] + 160
                mem[64] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 544
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 256] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 288] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 320] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 352] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 384] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 416] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 448] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 480] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 512] = 0
                mem[var39001] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224
                s = var39001
                idx = var39002
                while idx - 1:
                    mem[64] = mem[64] + 320
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 256] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 288] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 320] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 352] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 384] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 416] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 448] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 480] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 512] = 0
                    mem[s + 32] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224
                    s = s + 32
                    idx = idx - 1
                    continue 
                idx = 0
                while idx < arg2:
                    if arg1 > !idx:
                        revert with 0, 17
                    if arg1 + idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                        revert with 0, 50
                    mem[0] = mem[(32 * arg1 + idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]
                    mem[32] = 12
                    _66131 = sha3(mem[(32 * arg1 + idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192], 12)
                    _66132 = mem[64]
                    mem[64] = mem[64] + 320
                    mem[_66132] = stor12[mem[(32 * arg1 + idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]].field_0
                    mem[_66132 + 32] = stor1[_66131]
                    mem[_66132 + 64] = stor2[_66131]
                    mem[_66132 + 96] = stor3[_66131]
                    mem[_66132 + 128] = stor4[_66131]
                    mem[_66132 + 160] = stor5[_66131]
                    mem[_66132 + 192] = stor6[_66131]
                    mem[_66132 + 224] = stor7[_66131].field_0
                    mem[_66132 + 256] = bool(stor7[_66131].field_160)
                    mem[_66132 + 288] = stor8[_66131]
                    if idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]:
                        revert with 0, 50
                    mem[(32 * idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224] = _66132
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
                if arg1 > !arg2:
                    revert with 0, 17
                if arg1 > !arg2:
                    revert with 0, 17
                if arg1 + arg2 < mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                    _66527 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_66527] = 7
                    mem[_66527 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                    _66840 = mem[64]
                    mem[mem[64]] = 96
                    _67028 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                    mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                    idx = 0
                    s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                    t = mem[64] + 128
                    while idx < _67028:
                        _69044 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_69044 + 32]
                        mem[t + 64] = mem[_69044 + 64]
                        mem[t + 96] = mem[_69044 + 96]
                        mem[t + 128] = mem[_69044 + 128]
                        mem[t + 160] = mem[_69044 + 172 len 20]
                        mem[t + 192] = mem[_69044 + 192]
                        mem[t + 224] = mem[_69044 + 236 len 20]
                        mem[t + 256] = bool(mem[_69044 + 256])
                        mem[t + 288] = mem[_69044 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_66840 + 32] = arg1 + arg2
                    mem[_66840 + 64] = (320 * _67028) + 128
                    _69325 = mem[_66527]
                    mem[_66840 + (320 * _67028) + 128] = mem[_66527]
                    mem[_66840 + (320 * _67028) + 160 len ceil32(_69325)] = mem[_66527 + 32 len ceil32(_69325)]
                    var62001 = ceil32(_69325)
                    if ceil32(_69325) > _69325:
                        mem[_66840 + (320 * _67028) + _69325 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_69325) + _66840 + (320 * _67028) + -mem[64] + 160
                _66528 = mem[64]
                mem[64] = mem[64] + 64
                mem[_66528] = 4
                mem[_66528 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                _66841 = mem[64]
                mem[mem[64]] = 96
                _67029 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                idx = 0
                s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                t = mem[64] + 128
                while idx < _67029:
                    _69051 = mem[s]
                    mem[t] = mem[mem[s]]
                    mem[t + 32] = mem[_69051 + 32]
                    mem[t + 64] = mem[_69051 + 64]
                    mem[t + 96] = mem[_69051 + 96]
                    mem[t + 128] = mem[_69051 + 128]
                    mem[t + 160] = mem[_69051 + 172 len 20]
                    mem[t + 192] = mem[_69051 + 192]
                    mem[t + 224] = mem[_69051 + 236 len 20]
                    mem[t + 256] = bool(mem[_69051 + 256])
                    mem[t + 288] = mem[_69051 + 288]
                    idx = idx + 1
                    s = s + 32
                    t = t + 320
                    continue 
                mem[_66841 + 32] = arg1 + arg2
                mem[_66841 + 64] = (320 * _67029) + 128
                _69326 = mem[_66528]
                mem[_66841 + (320 * _67029) + 128] = mem[_66528]
                mem[_66841 + (320 * _67029) + 160 len ceil32(_69326)] = mem[_66528 + 32 len ceil32(_69326)]
                var62001 = ceil32(_69326)
                if ceil32(_69326) > _69326:
                    mem[_66841 + (320 * _67029) + _69326 + 160] = 0
                return memory
                  from mem[64]
                   len ceil32(_69326) + _66841 + (320 * _67029) + -mem[64] + 160
            if stor15[address(arg5)].field_0 < arg1:
                revert with 0, 17
            if stor15[address(arg5)].field_0 - arg1 > test266151307():
                revert with 0, 65
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192] = stor15[address(arg5)].field_0 - arg1
            mem[64] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 224
            if not stor15[address(arg5)].field_0 - arg1:
                idx = 0
                while idx < stor15[address(arg5)].field_0 - arg1:
                    if arg1 > !idx:
                        revert with 0, 17
                    if arg1 + idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                        revert with 0, 50
                    mem[0] = mem[(32 * arg1 + idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]
                    mem[32] = 12
                    _50891 = sha3(mem[(32 * arg1 + idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192], 12)
                    _50892 = mem[64]
                    mem[64] = mem[64] + 320
                    mem[_50892] = stor12[mem[(32 * arg1 + idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]].field_0
                    mem[_50892 + 32] = stor1[_50891]
                    mem[_50892 + 64] = stor2[_50891]
                    mem[_50892 + 96] = stor3[_50891]
                    mem[_50892 + 128] = stor4[_50891]
                    mem[_50892 + 160] = stor5[_50891]
                    mem[_50892 + 192] = stor6[_50891]
                    mem[_50892 + 224] = stor7[_50891].field_0
                    mem[_50892 + 256] = bool(stor7[_50891].field_160)
                    mem[_50892 + 288] = stor8[_50891]
                    if idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]:
                        revert with 0, 50
                    mem[(32 * idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224] = _50892
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
                if arg1 > !(stor15[address(arg5)].field_0 - arg1):
                    revert with 0, 17
                if arg1 > !(stor15[address(arg5)].field_0 - arg1):
                    revert with 0, 17
                if stor15[address(arg5)].field_0 < mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                    _51834 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_51834] = 7
                    mem[_51834 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                    _52975 = mem[64]
                    mem[mem[64]] = 96
                    _53299 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                    mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                    idx = 0
                    s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                    t = mem[64] + 128
                    while idx < _53299:
                        _59820 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_59820 + 32]
                        mem[t + 64] = mem[_59820 + 64]
                        mem[t + 96] = mem[_59820 + 96]
                        mem[t + 128] = mem[_59820 + 128]
                        mem[t + 160] = mem[_59820 + 172 len 20]
                        mem[t + 192] = mem[_59820 + 192]
                        mem[t + 224] = mem[_59820 + 236 len 20]
                        mem[t + 256] = bool(mem[_59820 + 256])
                        mem[t + 288] = mem[_59820 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_52975 + 32] = stor15[address(arg5)].field_0
                    mem[_52975 + 64] = (320 * _53299) + 128
                    _60170 = mem[_51834]
                    mem[_52975 + (320 * _53299) + 128] = mem[_51834]
                    mem[_52975 + (320 * _53299) + 160 len ceil32(_60170)] = mem[_51834 + 32 len ceil32(_60170)]
                    var59001 = ceil32(_60170)
                    if ceil32(_60170) > _60170:
                        mem[_52975 + (320 * _53299) + _60170 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_60170) + _52975 + (320 * _53299) + -mem[64] + 160
                _51835 = mem[64]
                mem[64] = mem[64] + 64
                mem[_51835] = 4
                mem[_51835 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                _52976 = mem[64]
                mem[mem[64]] = 96
                _53300 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                idx = 0
                s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                t = mem[64] + 128
                while idx < _53300:
                    _59827 = mem[s]
                    mem[t] = mem[mem[s]]
                    mem[t + 32] = mem[_59827 + 32]
                    mem[t + 64] = mem[_59827 + 64]
                    mem[t + 96] = mem[_59827 + 96]
                    mem[t + 128] = mem[_59827 + 128]
                    mem[t + 160] = mem[_59827 + 172 len 20]
                    mem[t + 192] = mem[_59827 + 192]
                    mem[t + 224] = mem[_59827 + 236 len 20]
                    mem[t + 256] = bool(mem[_59827 + 256])
                    mem[t + 288] = mem[_59827 + 288]
                    idx = idx + 1
                    s = s + 32
                    t = t + 320
                    continue 
                mem[_52976 + 32] = stor15[address(arg5)].field_0
                mem[_52976 + 64] = (320 * _53300) + 128
                _60171 = mem[_51835]
                mem[_52976 + (320 * _53300) + 128] = mem[_51835]
                mem[_52976 + (320 * _53300) + 160 len ceil32(_60171)] = mem[_51835 + 32 len ceil32(_60171)]
                var59001 = ceil32(_60171)
                if ceil32(_60171) > _60171:
                    mem[_52976 + (320 * _53300) + _60171 + 160] = 0
                return memory
                  from mem[64]
                   len ceil32(_60171) + _52976 + (320 * _53300) + -mem[64] + 160
            mem[64] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 544
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 224] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 256] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 288] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 320] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 352] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 384] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 416] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 448] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 480] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 512] = 0
            mem[var43001] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 224
            s = var43001
            idx = var43002
            while idx - 1:
                mem[64] = mem[64] + 320
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 224] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 256] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 288] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 320] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 352] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 384] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 416] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 448] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 480] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 512] = 0
                mem[s + 32] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 224
                s = s + 32
                idx = idx - 1
                continue 
            idx = 0
            while idx < stor15[address(arg5)].field_0 - arg1:
                if arg1 > !idx:
                    revert with 0, 17
                if arg1 + idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                    revert with 0, 50
                mem[0] = mem[(32 * arg1 + idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]
                mem[32] = 12
                _66137 = sha3(mem[(32 * arg1 + idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192], 12)
                _66138 = mem[64]
                mem[64] = mem[64] + 320
                mem[_66138] = stor12[mem[(32 * arg1 + idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]].field_0
                mem[_66138 + 32] = stor1[_66137]
                mem[_66138 + 64] = stor2[_66137]
                mem[_66138 + 96] = stor3[_66137]
                mem[_66138 + 128] = stor4[_66137]
                mem[_66138 + 160] = stor5[_66137]
                mem[_66138 + 192] = stor6[_66137]
                mem[_66138 + 224] = stor7[_66137].field_0
                mem[_66138 + 256] = bool(stor7[_66137].field_160)
                mem[_66138 + 288] = stor8[_66137]
                if idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]:
                    revert with 0, 50
                mem[(32 * idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224] = _66138
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
            if arg1 > !(stor15[address(arg5)].field_0 - arg1):
                revert with 0, 17
            if arg1 > !(stor15[address(arg5)].field_0 - arg1):
                revert with 0, 17
            if stor15[address(arg5)].field_0 < mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                _66529 = mem[64]
                mem[64] = mem[64] + 64
                mem[_66529] = 7
                mem[_66529 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                _66842 = mem[64]
                mem[mem[64]] = 96
                _67030 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                idx = 0
                s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                t = mem[64] + 128
                while idx < _67030:
                    _69058 = mem[s]
                    mem[t] = mem[mem[s]]
                    mem[t + 32] = mem[_69058 + 32]
                    mem[t + 64] = mem[_69058 + 64]
                    mem[t + 96] = mem[_69058 + 96]
                    mem[t + 128] = mem[_69058 + 128]
                    mem[t + 160] = mem[_69058 + 172 len 20]
                    mem[t + 192] = mem[_69058 + 192]
                    mem[t + 224] = mem[_69058 + 236 len 20]
                    mem[t + 256] = bool(mem[_69058 + 256])
                    mem[t + 288] = mem[_69058 + 288]
                    idx = idx + 1
                    s = s + 32
                    t = t + 320
                    continue 
                mem[_66842 + 32] = stor15[address(arg5)].field_0
                mem[_66842 + 64] = (320 * _67030) + 128
                _69327 = mem[_66529]
                mem[_66842 + (320 * _67030) + 128] = mem[_66529]
                mem[_66842 + (320 * _67030) + 160 len ceil32(_69327)] = mem[_66529 + 32 len ceil32(_69327)]
                var66001 = ceil32(_69327)
                if ceil32(_69327) > _69327:
                    mem[_66842 + (320 * _67030) + _69327 + 160] = 0
                return memory
                  from mem[64]
                   len ceil32(_69327) + _66842 + (320 * _67030) + -mem[64] + 160
            _66530 = mem[64]
            mem[64] = mem[64] + 64
            mem[_66530] = 4
            mem[_66530 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
            _66843 = mem[64]
            mem[mem[64]] = 96
            _67031 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
            mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
            idx = 0
            s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
            t = mem[64] + 128
            while idx < _67031:
                _69065 = mem[s]
                mem[t] = mem[mem[s]]
                mem[t + 32] = mem[_69065 + 32]
                mem[t + 64] = mem[_69065 + 64]
                mem[t + 96] = mem[_69065 + 96]
                mem[t + 128] = mem[_69065 + 128]
                mem[t + 160] = mem[_69065 + 172 len 20]
                mem[t + 192] = mem[_69065 + 192]
                mem[t + 224] = mem[_69065 + 236 len 20]
                mem[t + 256] = bool(mem[_69065 + 256])
                mem[t + 288] = mem[_69065 + 288]
                idx = idx + 1
                s = s + 32
                t = t + 320
                continue 
            mem[_66843 + 32] = stor15[address(arg5)].field_0
            mem[_66843 + 64] = (320 * _67031) + 128
            _69328 = mem[_66530]
            mem[_66843 + (320 * _67031) + 128] = mem[_66530]
            mem[_66843 + (320 * _67031) + 160 len ceil32(_69328)] = mem[_66530 + 32 len ceil32(_69328)]
            var66001 = ceil32(_69328)
            if ceil32(_69328) > _69328:
                mem[_66843 + (320 * _67031) + _69328 + 160] = 0
            return memory
              from mem[64]
               len ceil32(_69328) + _66843 + (320 * _67031) + -mem[64] + 160
        if stor15[address(arg5)].field_0 < 1:
            revert with 0, 17
        if arg3:
            if arg2 <= stor15[address(arg5)].field_0 - 1:
                if arg2 > test266151307():
                    revert with 0, 65
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192] = arg2
                mem[64] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224
                if not arg2:
                    idx = 0
                    while idx < arg2:
                        if stor15[address(arg5)].field_0 - 1 < idx:
                            revert with 0, 17
                        if stor15[address(arg5)].field_0 + -idx - 1 >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                            revert with 0, 50
                        mem[0] = mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]
                        mem[32] = 12
                        _50897 = sha3(mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192], 12)
                        _50898 = mem[64]
                        mem[64] = mem[64] + 320
                        mem[_50898] = stor12[mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]].field_0
                        mem[_50898 + 32] = stor1[_50897]
                        mem[_50898 + 64] = stor2[_50897]
                        mem[_50898 + 96] = stor3[_50897]
                        mem[_50898 + 128] = stor4[_50897]
                        mem[_50898 + 160] = stor5[_50897]
                        mem[_50898 + 192] = stor6[_50897]
                        mem[_50898 + 224] = stor7[_50897].field_0
                        mem[_50898 + 256] = bool(stor7[_50897].field_160)
                        mem[_50898 + 288] = stor8[_50897]
                        if idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]:
                            revert with 0, 50
                        mem[(32 * idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224] = _50898
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if stor15[address(arg5)].field_0 - 1 < arg2:
                        _49312 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_49312] = 4
                        mem[_49312 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                        _49862 = mem[64]
                        mem[mem[64]] = 96
                        _50894 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                        mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                        idx = 0
                        s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                        t = mem[64] + 128
                        while idx < _50894:
                            _59834 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_59834 + 32]
                            mem[t + 64] = mem[_59834 + 64]
                            mem[t + 96] = mem[_59834 + 96]
                            mem[t + 128] = mem[_59834 + 128]
                            mem[t + 160] = mem[_59834 + 172 len 20]
                            mem[t + 192] = mem[_59834 + 192]
                            mem[t + 224] = mem[_59834 + 236 len 20]
                            mem[t + 256] = bool(mem[_59834 + 256])
                            mem[t + 288] = mem[_59834 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_49862 + 32] = 0
                        mem[_49862 + 64] = (320 * _50894) + 128
                        _60172 = mem[_49312]
                        mem[_49862 + (320 * _50894) + 128] = mem[_49312]
                        mem[_49862 + (320 * _50894) + 160 len ceil32(_60172)] = mem[_49312 + 32 len ceil32(_60172)]
                        var50001 = ceil32(_60172)
                        if ceil32(_60172) > _60172:
                            mem[_49862 + (320 * _50894) + _60172 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_60172) + _49862 + (320 * _50894) + -mem[64] + 160
                    _50895 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_50895] = 7
                    mem[_50895 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                    _51538 = mem[64]
                    mem[mem[64]] = 96
                    _51837 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                    mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                    idx = 0
                    s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                    t = mem[64] + 128
                    while idx < _51837:
                        _59841 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_59841 + 32]
                        mem[t + 64] = mem[_59841 + 64]
                        mem[t + 96] = mem[_59841 + 96]
                        mem[t + 128] = mem[_59841 + 128]
                        mem[t + 160] = mem[_59841 + 172 len 20]
                        mem[t + 192] = mem[_59841 + 192]
                        mem[t + 224] = mem[_59841 + 236 len 20]
                        mem[t + 256] = bool(mem[_59841 + 256])
                        mem[t + 288] = mem[_59841 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_51538 + 32] = stor15[address(arg5)].field_0 + -arg2 - 1
                    mem[_51538 + 64] = (320 * _51837) + 128
                    _60173 = mem[_50895]
                    mem[_51538 + (320 * _51837) + 128] = mem[_50895]
                    mem[_51538 + (320 * _51837) + 160 len ceil32(_60173)] = mem[_50895 + 32 len ceil32(_60173)]
                    var53001 = ceil32(_60173)
                    if ceil32(_60173) > _60173:
                        mem[_51538 + (320 * _51837) + _60173 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_60173) + _51538 + (320 * _51837) + -mem[64] + 160
                mem[64] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 544
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 256] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 288] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 320] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 352] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 384] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 416] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 448] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 480] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 512] = 0
                mem[var40001] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224
                s = var40001
                idx = var40002
                while idx - 1:
                    mem[64] = mem[64] + 320
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 256] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 288] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 320] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 352] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 384] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 416] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 448] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 480] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 512] = 0
                    mem[s + 32] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224
                    s = s + 32
                    idx = idx - 1
                    continue 
                idx = 0
                while idx < arg2:
                    if stor15[address(arg5)].field_0 - 1 < idx:
                        revert with 0, 17
                    if stor15[address(arg5)].field_0 + -idx - 1 >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                        revert with 0, 50
                    mem[0] = mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]
                    mem[32] = 12
                    _66145 = sha3(mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192], 12)
                    _66146 = mem[64]
                    mem[64] = mem[64] + 320
                    mem[_66146] = stor12[mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]].field_0
                    mem[_66146 + 32] = stor1[_66145]
                    mem[_66146 + 64] = stor2[_66145]
                    mem[_66146 + 96] = stor3[_66145]
                    mem[_66146 + 128] = stor4[_66145]
                    mem[_66146 + 160] = stor5[_66145]
                    mem[_66146 + 192] = stor6[_66145]
                    mem[_66146 + 224] = stor7[_66145].field_0
                    mem[_66146 + 256] = bool(stor7[_66145].field_160)
                    mem[_66146 + 288] = stor8[_66145]
                    if idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]:
                        revert with 0, 50
                    mem[(32 * idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224] = _66146
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
                if stor15[address(arg5)].field_0 - 1 < arg2:
                    _65258 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_65258] = 4
                    mem[_65258 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                    _65615 = mem[64]
                    mem[mem[64]] = 96
                    _66142 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                    mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                    idx = 0
                    s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                    t = mem[64] + 128
                    while idx < _66142:
                        _69072 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_69072 + 32]
                        mem[t + 64] = mem[_69072 + 64]
                        mem[t + 96] = mem[_69072 + 96]
                        mem[t + 128] = mem[_69072 + 128]
                        mem[t + 160] = mem[_69072 + 172 len 20]
                        mem[t + 192] = mem[_69072 + 192]
                        mem[t + 224] = mem[_69072 + 236 len 20]
                        mem[t + 256] = bool(mem[_69072 + 256])
                        mem[t + 288] = mem[_69072 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_65615 + 32] = 0
                    mem[_65615 + 64] = (320 * _66142) + 128
                    _69329 = mem[_65258]
                    mem[_65615 + (320 * _66142) + 128] = mem[_65258]
                    mem[_65615 + (320 * _66142) + 160 len ceil32(_69329)] = mem[_65258 + 32 len ceil32(_69329)]
                    var57001 = ceil32(_69329)
                    if ceil32(_69329) > _69329:
                        mem[_65615 + (320 * _66142) + _69329 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_69329) + _65615 + (320 * _66142) + -mem[64] + 160
                _66143 = mem[64]
                mem[64] = mem[64] + 64
                mem[_66143] = 7
                mem[_66143 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                _66396 = mem[64]
                mem[mem[64]] = 96
                _66532 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                idx = 0
                s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                t = mem[64] + 128
                while idx < _66532:
                    _69079 = mem[s]
                    mem[t] = mem[mem[s]]
                    mem[t + 32] = mem[_69079 + 32]
                    mem[t + 64] = mem[_69079 + 64]
                    mem[t + 96] = mem[_69079 + 96]
                    mem[t + 128] = mem[_69079 + 128]
                    mem[t + 160] = mem[_69079 + 172 len 20]
                    mem[t + 192] = mem[_69079 + 192]
                    mem[t + 224] = mem[_69079 + 236 len 20]
                    mem[t + 256] = bool(mem[_69079 + 256])
                    mem[t + 288] = mem[_69079 + 288]
                    idx = idx + 1
                    s = s + 32
                    t = t + 320
                    continue 
                mem[_66396 + 32] = stor15[address(arg5)].field_0 + -arg2 - 1
                mem[_66396 + 64] = (320 * _66532) + 128
                _69330 = mem[_66143]
                mem[_66396 + (320 * _66532) + 128] = mem[_66143]
                mem[_66396 + (320 * _66532) + 160 len ceil32(_69330)] = mem[_66143 + 32 len ceil32(_69330)]
                var60001 = ceil32(_69330)
                if ceil32(_69330) > _69330:
                    mem[_66396 + (320 * _66532) + _69330 + 160] = 0
                return memory
                  from mem[64]
                   len ceil32(_69330) + _66396 + (320 * _66532) + -mem[64] + 160
            if 1 > !(stor15[address(arg5)].field_0 - 1):
                revert with 0, 17
            if stor15[address(arg5)].field_0 > test266151307():
                revert with 0, 65
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192] = stor15[address(arg5)].field_0
            mem[64] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 224
            if not stor15[address(arg5)].field_0:
                idx = 0
                while idx < stor15[address(arg5)].field_0:
                    if stor15[address(arg5)].field_0 - 1 < idx:
                        revert with 0, 17
                    if stor15[address(arg5)].field_0 + -idx - 1 >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                        revert with 0, 50
                    mem[0] = mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]
                    mem[32] = 12
                    _50903 = sha3(mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192], 12)
                    _50904 = mem[64]
                    mem[64] = mem[64] + 320
                    mem[_50904] = stor12[mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]].field_0
                    mem[_50904 + 32] = stor1[_50903]
                    mem[_50904 + 64] = stor2[_50903]
                    mem[_50904 + 96] = stor3[_50903]
                    mem[_50904 + 128] = stor4[_50903]
                    mem[_50904 + 160] = stor5[_50903]
                    mem[_50904 + 192] = stor6[_50903]
                    mem[_50904 + 224] = stor7[_50903].field_0
                    mem[_50904 + 256] = bool(stor7[_50903].field_160)
                    mem[_50904 + 288] = stor8[_50903]
                    if idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]:
                        revert with 0, 50
                    mem[(32 * idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224] = _50904
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
                if stor15[address(arg5)].field_0 - 1 < stor15[address(arg5)].field_0:
                    _49313 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_49313] = 4
                    mem[_49313 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                    _49864 = mem[64]
                    mem[mem[64]] = 96
                    _50900 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                    mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                    idx = 0
                    s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                    t = mem[64] + 128
                    while idx < _50900:
                        _59848 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_59848 + 32]
                        mem[t + 64] = mem[_59848 + 64]
                        mem[t + 96] = mem[_59848 + 96]
                        mem[t + 128] = mem[_59848 + 128]
                        mem[t + 160] = mem[_59848 + 172 len 20]
                        mem[t + 192] = mem[_59848 + 192]
                        mem[t + 224] = mem[_59848 + 236 len 20]
                        mem[t + 256] = bool(mem[_59848 + 256])
                        mem[t + 288] = mem[_59848 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_49864 + 32] = 0
                    mem[_49864 + 64] = (320 * _50900) + 128
                    _60174 = mem[_49313]
                    mem[_49864 + (320 * _50900) + 128] = mem[_49313]
                    mem[_49864 + (320 * _50900) + 160 len ceil32(_60174)] = mem[_49313 + 32 len ceil32(_60174)]
                    var54001 = ceil32(_60174)
                    if ceil32(_60174) > _60174:
                        mem[_49864 + (320 * _50900) + _60174 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_60174) + _49864 + (320 * _50900) + -mem[64] + 160
                _50901 = mem[64]
                mem[64] = mem[64] + 64
                mem[_50901] = 7
                mem[_50901 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                _51547 = mem[64]
                mem[mem[64]] = 96
                _51839 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                idx = 0
                s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                t = mem[64] + 128
                while idx < _51839:
                    _59855 = mem[s]
                    mem[t] = mem[mem[s]]
                    mem[t + 32] = mem[_59855 + 32]
                    mem[t + 64] = mem[_59855 + 64]
                    mem[t + 96] = mem[_59855 + 96]
                    mem[t + 128] = mem[_59855 + 128]
                    mem[t + 160] = mem[_59855 + 172 len 20]
                    mem[t + 192] = mem[_59855 + 192]
                    mem[t + 224] = mem[_59855 + 236 len 20]
                    mem[t + 256] = bool(mem[_59855 + 256])
                    mem[t + 288] = mem[_59855 + 288]
                    idx = idx + 1
                    s = s + 32
                    t = t + 320
                    continue 
                mem[_51547 + 32] = -1
                mem[_51547 + 64] = (320 * _51839) + 128
                _60175 = mem[_50901]
                mem[_51547 + (320 * _51839) + 128] = mem[_50901]
                mem[_51547 + (320 * _51839) + 160 len ceil32(_60175)] = mem[_50901 + 32 len ceil32(_60175)]
                var57001 = ceil32(_60175)
                if ceil32(_60175) > _60175:
                    mem[_51547 + (320 * _51839) + _60175 + 160] = 0
                return memory
                  from mem[64]
                   len ceil32(_60175) + _51547 + (320 * _51839) + -mem[64] + 160
            mem[64] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 544
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 224] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 256] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 288] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 320] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 352] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 384] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 416] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 448] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 480] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 512] = 0
            mem[var44001] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 224
            s = var44001
            idx = var44002
            while idx - 1:
                mem[64] = mem[64] + 320
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 224] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 256] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 288] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 320] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 352] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 384] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 416] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 448] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 480] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 512] = 0
                mem[s + 32] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 224
                s = s + 32
                idx = idx - 1
                continue 
            idx = 0
            while idx < stor15[address(arg5)].field_0:
                if stor15[address(arg5)].field_0 - 1 < idx:
                    revert with 0, 17
                if stor15[address(arg5)].field_0 + -idx - 1 >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                    revert with 0, 50
                mem[0] = mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]
                mem[32] = 12
                _66153 = sha3(mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192], 12)
                _66154 = mem[64]
                mem[64] = mem[64] + 320
                mem[_66154] = stor12[mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]].field_0
                mem[_66154 + 32] = stor1[_66153]
                mem[_66154 + 64] = stor2[_66153]
                mem[_66154 + 96] = stor3[_66153]
                mem[_66154 + 128] = stor4[_66153]
                mem[_66154 + 160] = stor5[_66153]
                mem[_66154 + 192] = stor6[_66153]
                mem[_66154 + 224] = stor7[_66153].field_0
                mem[_66154 + 256] = bool(stor7[_66153].field_160)
                mem[_66154 + 288] = stor8[_66153]
                if idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]:
                    revert with 0, 50
                mem[(32 * idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224] = _66154
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
            if stor15[address(arg5)].field_0 - 1 < stor15[address(arg5)].field_0:
                _65259 = mem[64]
                mem[64] = mem[64] + 64
                mem[_65259] = 4
                mem[_65259 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                _65619 = mem[64]
                mem[mem[64]] = 96
                _66150 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                idx = 0
                s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                t = mem[64] + 128
                while idx < _66150:
                    _69086 = mem[s]
                    mem[t] = mem[mem[s]]
                    mem[t + 32] = mem[_69086 + 32]
                    mem[t + 64] = mem[_69086 + 64]
                    mem[t + 96] = mem[_69086 + 96]
                    mem[t + 128] = mem[_69086 + 128]
                    mem[t + 160] = mem[_69086 + 172 len 20]
                    mem[t + 192] = mem[_69086 + 192]
                    mem[t + 224] = mem[_69086 + 236 len 20]
                    mem[t + 256] = bool(mem[_69086 + 256])
                    mem[t + 288] = mem[_69086 + 288]
                    idx = idx + 1
                    s = s + 32
                    t = t + 320
                    continue 
                mem[_65619 + 32] = 0
                mem[_65619 + 64] = (320 * _66150) + 128
                _69331 = mem[_65259]
                mem[_65619 + (320 * _66150) + 128] = mem[_65259]
                mem[_65619 + (320 * _66150) + 160 len ceil32(_69331)] = mem[_65259 + 32 len ceil32(_69331)]
                var61001 = ceil32(_69331)
                if ceil32(_69331) > _69331:
                    mem[_65619 + (320 * _66150) + _69331 + 160] = 0
                return memory
                  from mem[64]
                   len ceil32(_69331) + _65619 + (320 * _66150) + -mem[64] + 160
            _66151 = mem[64]
            mem[64] = mem[64] + 64
            mem[_66151] = 7
            mem[_66151 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
            _66404 = mem[64]
            mem[mem[64]] = 96
            _66534 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
            mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
            idx = 0
            s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
            t = mem[64] + 128
            while idx < _66534:
                _69093 = mem[s]
                mem[t] = mem[mem[s]]
                mem[t + 32] = mem[_69093 + 32]
                mem[t + 64] = mem[_69093 + 64]
                mem[t + 96] = mem[_69093 + 96]
                mem[t + 128] = mem[_69093 + 128]
                mem[t + 160] = mem[_69093 + 172 len 20]
                mem[t + 192] = mem[_69093 + 192]
                mem[t + 224] = mem[_69093 + 236 len 20]
                mem[t + 256] = bool(mem[_69093 + 256])
                mem[t + 288] = mem[_69093 + 288]
                idx = idx + 1
                s = s + 32
                t = t + 320
                continue 
            mem[_66404 + 32] = -1
            mem[_66404 + 64] = (320 * _66534) + 128
            _69332 = mem[_66151]
            mem[_66404 + (320 * _66534) + 128] = mem[_66151]
            mem[_66404 + (320 * _66534) + 160 len ceil32(_69332)] = mem[_66151 + 32 len ceil32(_69332)]
            var64001 = ceil32(_69332)
            if ceil32(_69332) > _69332:
                mem[_66404 + (320 * _66534) + _69332 + 160] = 0
            return memory
              from mem[64]
               len ceil32(_69332) + _66404 + (320 * _66534) + -mem[64] + 160
        if stor15[address(arg5)].field_0 < stor15[address(arg5)].field_0 - 1:
            revert with 0, 17
        if arg2 > 1:
            if stor15[address(arg5)].field_0 < stor15[address(arg5)].field_0 - 1:
                revert with 0, 17
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192] = 1
            mem[64] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 576
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 256] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 288] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 320] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 352] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 384] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 416] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 448] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 480] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 512] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 544] = 0
            mem[var47001] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 256
            s = var47001
            idx = var47002
            while idx - 1:
                mem[64] = mem[64] + 320
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 256] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 288] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 320] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 352] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 384] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 416] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 448] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 480] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 512] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 544] = 0
                mem[s + 32] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 256
                s = s + 32
                idx = idx - 1
                continue 
            idx = 0
            while idx < 1:
                if stor15[address(arg5)].field_0 - 1 > !idx:
                    revert with 0, 17
                if stor15[address(arg5)].field_0 + idx - 1 >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                    revert with 0, 50
                mem[0] = mem[(32 * stor15[address(arg5)].field_0 + idx - 1) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]
                mem[32] = 12
                _66165 = sha3(mem[(32 * stor15[address(arg5)].field_0 + idx - 1) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192], 12)
                _66166 = mem[64]
                mem[64] = mem[64] + 320
                mem[_66166] = stor12[mem[(32 * stor15[address(arg5)].field_0 + idx - 1) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]].field_0
                mem[_66166 + 32] = stor1[_66165]
                mem[_66166 + 64] = stor2[_66165]
                mem[_66166 + 96] = stor3[_66165]
                mem[_66166 + 128] = stor4[_66165]
                mem[_66166 + 160] = stor5[_66165]
                mem[_66166 + 192] = stor6[_66165]
                mem[_66166 + 224] = stor7[_66165].field_0
                mem[_66166 + 256] = bool(stor7[_66165].field_160)
                mem[_66166 + 288] = stor8[_66165]
                if idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]:
                    revert with 0, 50
                mem[(32 * idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224] = _66166
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
            if stor15[address(arg5)].field_0 - 1 > !1:
                revert with 0, 17
            if stor15[address(arg5)].field_0 - 1 > !1:
                revert with 0, 17
            if stor15[address(arg5)].field_0 < mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                _66537 = mem[64]
                mem[64] = mem[64] + 64
                mem[_66537] = 7
                mem[_66537 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                _66862 = mem[64]
                mem[mem[64]] = 96
                _67038 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                idx = 0
                s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                t = mem[64] + 128
                while idx < _67038:
                    _69114 = mem[s]
                    mem[t] = mem[mem[s]]
                    mem[t + 32] = mem[_69114 + 32]
                    mem[t + 64] = mem[_69114 + 64]
                    mem[t + 96] = mem[_69114 + 96]
                    mem[t + 128] = mem[_69114 + 128]
                    mem[t + 160] = mem[_69114 + 172 len 20]
                    mem[t + 192] = mem[_69114 + 192]
                    mem[t + 224] = mem[_69114 + 236 len 20]
                    mem[t + 256] = bool(mem[_69114 + 256])
                    mem[t + 288] = mem[_69114 + 288]
                    idx = idx + 1
                    s = s + 32
                    t = t + 320
                    continue 
                mem[_66862 + 32] = stor15[address(arg5)].field_0
                mem[_66862 + 64] = (320 * _67038) + 128
                _69335 = mem[_66537]
                mem[_66862 + (320 * _67038) + 128] = mem[_66537]
                mem[_66862 + (320 * _67038) + 160 len ceil32(_69335)] = mem[_66537 + 32 len ceil32(_69335)]
                var70001 = ceil32(_69335)
                if ceil32(_69335) > _69335:
                    mem[_66862 + (320 * _67038) + _69335 + 160] = 0
                return memory
                  from mem[64]
                   len ceil32(_69335) + _66862 + (320 * _67038) + -mem[64] + 160
            _66538 = mem[64]
            mem[64] = mem[64] + 64
            mem[_66538] = 4
            mem[_66538 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
            _66863 = mem[64]
            mem[mem[64]] = 96
            _67039 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
            mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
            idx = 0
            s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
            t = mem[64] + 128
            while idx < _67039:
                _69121 = mem[s]
                mem[t] = mem[mem[s]]
                mem[t + 32] = mem[_69121 + 32]
                mem[t + 64] = mem[_69121 + 64]
                mem[t + 96] = mem[_69121 + 96]
                mem[t + 128] = mem[_69121 + 128]
                mem[t + 160] = mem[_69121 + 172 len 20]
                mem[t + 192] = mem[_69121 + 192]
                mem[t + 224] = mem[_69121 + 236 len 20]
                mem[t + 256] = bool(mem[_69121 + 256])
                mem[t + 288] = mem[_69121 + 288]
                idx = idx + 1
                s = s + 32
                t = t + 320
                continue 
            mem[_66863 + 32] = stor15[address(arg5)].field_0
            mem[_66863 + 64] = (320 * _67039) + 128
            _69336 = mem[_66538]
            mem[_66863 + (320 * _67039) + 128] = mem[_66538]
            mem[_66863 + (320 * _67039) + 160 len ceil32(_69336)] = mem[_66538 + 32 len ceil32(_69336)]
            var70001 = ceil32(_69336)
            if ceil32(_69336) > _69336:
                mem[_66863 + (320 * _67039) + _69336 + 160] = 0
            return memory
              from mem[64]
               len ceil32(_69336) + _66863 + (320 * _67039) + -mem[64] + 160
        if arg2 > test266151307():
            revert with 0, 65
        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192] = arg2
        mem[64] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224
        if not arg2:
            idx = 0
            while idx < arg2:
                if stor15[address(arg5)].field_0 - 1 > !idx:
                    revert with 0, 17
                if stor15[address(arg5)].field_0 + idx - 1 >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                    revert with 0, 50
                mem[0] = mem[(32 * stor15[address(arg5)].field_0 + idx - 1) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]
                mem[32] = 12
                _50907 = sha3(mem[(32 * stor15[address(arg5)].field_0 + idx - 1) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192], 12)
                _50908 = mem[64]
                mem[64] = mem[64] + 320
                mem[_50908] = stor12[mem[(32 * stor15[address(arg5)].field_0 + idx - 1) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]].field_0
                mem[_50908 + 32] = stor1[_50907]
                mem[_50908 + 64] = stor2[_50907]
                mem[_50908 + 96] = stor3[_50907]
                mem[_50908 + 128] = stor4[_50907]
                mem[_50908 + 160] = stor5[_50907]
                mem[_50908 + 192] = stor6[_50907]
                mem[_50908 + 224] = stor7[_50907].field_0
                mem[_50908 + 256] = bool(stor7[_50907].field_160)
                mem[_50908 + 288] = stor8[_50907]
                if idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]:
                    revert with 0, 50
                mem[(32 * idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224] = _50908
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
            if stor15[address(arg5)].field_0 - 1 > !arg2:
                revert with 0, 17
            if stor15[address(arg5)].field_0 - 1 > !arg2:
                revert with 0, 17
            if stor15[address(arg5)].field_0 + arg2 - 1 < mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                _51840 = mem[64]
                mem[64] = mem[64] + 64
                mem[_51840] = 7
                mem[_51840 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                _53009 = mem[64]
                mem[mem[64]] = 96
                _53305 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                idx = 0
                s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                t = mem[64] + 128
                while idx < _53305:
                    _59862 = mem[s]
                    mem[t] = mem[mem[s]]
                    mem[t + 32] = mem[_59862 + 32]
                    mem[t + 64] = mem[_59862 + 64]
                    mem[t + 96] = mem[_59862 + 96]
                    mem[t + 128] = mem[_59862 + 128]
                    mem[t + 160] = mem[_59862 + 172 len 20]
                    mem[t + 192] = mem[_59862 + 192]
                    mem[t + 224] = mem[_59862 + 236 len 20]
                    mem[t + 256] = bool(mem[_59862 + 256])
                    mem[t + 288] = mem[_59862 + 288]
                    idx = idx + 1
                    s = s + 32
                    t = t + 320
                    continue 
                mem[_53009 + 32] = stor15[address(arg5)].field_0 + arg2 - 1
                mem[_53009 + 64] = (320 * _53305) + 128
                _60176 = mem[_51840]
                mem[_53009 + (320 * _53305) + 128] = mem[_51840]
                mem[_53009 + (320 * _53305) + 160 len ceil32(_60176)] = mem[_51840 + 32 len ceil32(_60176)]
                var59001 = ceil32(_60176)
                if ceil32(_60176) > _60176:
                    mem[_53009 + (320 * _53305) + _60176 + 160] = 0
                return memory
                  from mem[64]
                   len ceil32(_60176) + _53009 + (320 * _53305) + -mem[64] + 160
            _51841 = mem[64]
            mem[64] = mem[64] + 64
            mem[_51841] = 4
            mem[_51841 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
            _53010 = mem[64]
            mem[mem[64]] = 96
            _53306 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
            mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
            idx = 0
            s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
            t = mem[64] + 128
            while idx < _53306:
                _59869 = mem[s]
                mem[t] = mem[mem[s]]
                mem[t + 32] = mem[_59869 + 32]
                mem[t + 64] = mem[_59869 + 64]
                mem[t + 96] = mem[_59869 + 96]
                mem[t + 128] = mem[_59869 + 128]
                mem[t + 160] = mem[_59869 + 172 len 20]
                mem[t + 192] = mem[_59869 + 192]
                mem[t + 224] = mem[_59869 + 236 len 20]
                mem[t + 256] = bool(mem[_59869 + 256])
                mem[t + 288] = mem[_59869 + 288]
                idx = idx + 1
                s = s + 32
                t = t + 320
                continue 
            mem[_53010 + 32] = stor15[address(arg5)].field_0 + arg2 - 1
            mem[_53010 + 64] = (320 * _53306) + 128
            _60177 = mem[_51841]
            mem[_53010 + (320 * _53306) + 128] = mem[_51841]
            mem[_53010 + (320 * _53306) + 160 len ceil32(_60177)] = mem[_51841 + 32 len ceil32(_60177)]
            var59001 = ceil32(_60177)
            if ceil32(_60177) > _60177:
                mem[_53010 + (320 * _53306) + _60177 + 160] = 0
            return memory
              from mem[64]
               len ceil32(_60177) + _53010 + (320 * _53306) + -mem[64] + 160
        mem[64] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 544
        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224] = 0
        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 256] = 0
        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 288] = 0
        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 320] = 0
        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 352] = 0
        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 384] = 0
        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 416] = 0
        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 448] = 0
        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 480] = 0
        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 512] = 0
        mem[var43001] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224
        s = var43001
        idx = var43002
        while idx - 1:
            mem[64] = mem[64] + 320
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 256] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 288] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 320] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 352] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 384] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 416] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 448] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 480] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 512] = 0
            mem[s + 32] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224
            s = s + 32
            idx = idx - 1
            continue 
        idx = 0
        while idx < arg2:
            if stor15[address(arg5)].field_0 - 1 > !idx:
                revert with 0, 17
            if stor15[address(arg5)].field_0 + idx - 1 >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                revert with 0, 50
            mem[0] = mem[(32 * stor15[address(arg5)].field_0 + idx - 1) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]
            mem[32] = 12
            _66159 = sha3(mem[(32 * stor15[address(arg5)].field_0 + idx - 1) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192], 12)
            _66160 = mem[64]
            mem[64] = mem[64] + 320
            mem[_66160] = stor12[mem[(32 * stor15[address(arg5)].field_0 + idx - 1) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]].field_0
            mem[_66160 + 32] = stor1[_66159]
            mem[_66160 + 64] = stor2[_66159]
            mem[_66160 + 96] = stor3[_66159]
            mem[_66160 + 128] = stor4[_66159]
            mem[_66160 + 160] = stor5[_66159]
            mem[_66160 + 192] = stor6[_66159]
            mem[_66160 + 224] = stor7[_66159].field_0
            mem[_66160 + 256] = bool(stor7[_66159].field_160)
            mem[_66160 + 288] = stor8[_66159]
            if idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]:
                revert with 0, 50
            mem[(32 * idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224] = _66160
            if idx == -1:
                revert with 0, 17
            idx = idx + 1
            continue 
        if stor15[address(arg5)].field_0 - 1 > !arg2:
            revert with 0, 17
        if stor15[address(arg5)].field_0 - 1 > !arg2:
            revert with 0, 17
        if stor15[address(arg5)].field_0 + arg2 - 1 < mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
            _66535 = mem[64]
            mem[64] = mem[64] + 64
            mem[_66535] = 7
            mem[_66535 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
            _66860 = mem[64]
            mem[mem[64]] = 96
            _67036 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
            mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
            idx = 0
            s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
            t = mem[64] + 128
            while idx < _67036:
                _69100 = mem[s]
                mem[t] = mem[mem[s]]
                mem[t + 32] = mem[_69100 + 32]
                mem[t + 64] = mem[_69100 + 64]
                mem[t + 96] = mem[_69100 + 96]
                mem[t + 128] = mem[_69100 + 128]
                mem[t + 160] = mem[_69100 + 172 len 20]
                mem[t + 192] = mem[_69100 + 192]
                mem[t + 224] = mem[_69100 + 236 len 20]
                mem[t + 256] = bool(mem[_69100 + 256])
                mem[t + 288] = mem[_69100 + 288]
                idx = idx + 1
                s = s + 32
                t = t + 320
                continue 
            mem[_66860 + 32] = stor15[address(arg5)].field_0 + arg2 - 1
            mem[_66860 + 64] = (320 * _67036) + 128
            _69333 = mem[_66535]
            mem[_66860 + (320 * _67036) + 128] = mem[_66535]
            mem[_66860 + (320 * _67036) + 160 len ceil32(_69333)] = mem[_66535 + 32 len ceil32(_69333)]
            var66001 = ceil32(_69333)
            if ceil32(_69333) > _69333:
                mem[_66860 + (320 * _67036) + _69333 + 160] = 0
            return memory
              from mem[64]
               len ceil32(_69333) + _66860 + (320 * _67036) + -mem[64] + 160
        _66536 = mem[64]
        mem[64] = mem[64] + 64
        mem[_66536] = 4
        mem[_66536 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
        _66861 = mem[64]
        mem[mem[64]] = 96
        _67037 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
        mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
        idx = 0
        s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
        t = mem[64] + 128
        while idx < _67037:
            _69107 = mem[s]
            mem[t] = mem[mem[s]]
            mem[t + 32] = mem[_69107 + 32]
            mem[t + 64] = mem[_69107 + 64]
            mem[t + 96] = mem[_69107 + 96]
            mem[t + 128] = mem[_69107 + 128]
            mem[t + 160] = mem[_69107 + 172 len 20]
            mem[t + 192] = mem[_69107 + 192]
            mem[t + 224] = mem[_69107 + 236 len 20]
            mem[t + 256] = bool(mem[_69107 + 256])
            mem[t + 288] = mem[_69107 + 288]
            idx = idx + 1
            s = s + 32
            t = t + 320
            continue 
        mem[_66861 + 32] = stor15[address(arg5)].field_0 + arg2 - 1
        mem[_66861 + 64] = (320 * _67037) + 128
        _69334 = mem[_66536]
        mem[_66861 + (320 * _67037) + 128] = mem[_66536]
        mem[_66861 + (320 * _67037) + 160 len ceil32(_69334)] = mem[_66536 + 32 len ceil32(_69334)]
        var66001 = ceil32(_69334)
        if ceil32(_69334) > _69334:
            mem[_66861 + (320 * _67037) + _69334 + 160] = 0
        return memory
          from mem[64]
           len ceil32(_69334) + _66861 + (320 * _67037) + -mem[64] + 160
    mem[0] = sha3(address(arg5), 15)
    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192] = stor15[address(arg5)].field_0
    idx = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192
    s = 0
    while (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 160 > idx:
        mem[idx + 32] = stor15[address(arg5)][s].field_256
        idx = idx + 32
        s = s + 1
        continue 
    if not stor15[address(arg5)].field_0:
        mem[64] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 288
        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224] = 4
        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 256] = 0x6f76657200000000000000000000000000000000000000000000000000000000
        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 288] = 96
        _61399 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 384] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
        idx = 0
        s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
        t = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 416
        while idx < mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]:
            _65229 = mem[s]
            mem[t] = mem[mem[s]]
            mem[t + 32] = mem[_65229 + 32]
            mem[t + 64] = mem[_65229 + 64]
            mem[t + 96] = mem[_65229 + 96]
            mem[t + 128] = mem[_65229 + 128]
            mem[t + 160] = mem[_65229 + 172 len 20]
            mem[t + 192] = mem[_65229 + 192]
            mem[t + 224] = mem[_65229 + 236 len 20]
            mem[t + 256] = bool(mem[_65229 + 256])
            mem[t + 288] = mem[_65229 + 288]
            idx = idx + 1
            s = s + 32
            t = t + 320
            continue 
        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 320] = 0
        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 352] = (320 * _61399) + 128
        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (320 * _61399) + 416] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224]
        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (320 * _61399) + 448 len ceil32(mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224])] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 256 len ceil32(mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224])]
        var42001 = ceil32(mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224])
        if ceil32(mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224]) > mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224]:
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (320 * _61399) + mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224] + 448] = 0
        return memory
          from mem[64]
           len ceil32(mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224]) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (320 * _61399) + -mem[64] + 448
    if arg1 < stor15[address(arg5)].field_0:
        if arg3:
            if arg2 <= arg1:
                if arg2 > test266151307():
                    revert with 0, 65
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192] = arg2
                mem[64] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224
                if not arg2:
                    idx = 0
                    while idx < arg2:
                        if arg1 < idx:
                            revert with 0, 17
                        if arg1 - idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                            revert with 0, 50
                        mem[0] = mem[(32 * arg1 - idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]
                        mem[32] = 12
                        _66171 = sha3(mem[(32 * arg1 - idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192], 12)
                        _66172 = mem[64]
                        mem[64] = mem[64] + 320
                        mem[_66172] = stor12[mem[(32 * arg1 - idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]].field_0
                        mem[_66172 + 32] = stor1[_66171]
                        mem[_66172 + 64] = stor2[_66171]
                        mem[_66172 + 96] = stor3[_66171]
                        mem[_66172 + 128] = stor4[_66171]
                        mem[_66172 + 160] = stor5[_66171]
                        mem[_66172 + 192] = stor6[_66171]
                        mem[_66172 + 224] = stor7[_66171].field_0
                        mem[_66172 + 256] = bool(stor7[_66171].field_160)
                        mem[_66172 + 288] = stor8[_66171]
                        if idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]:
                            revert with 0, 50
                        mem[(32 * idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224] = _66172
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if arg1 < arg2:
                        _65260 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_65260] = 4
                        mem[_65260 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                        _65627 = mem[64]
                        mem[mem[64]] = 96
                        _66168 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                        mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                        idx = 0
                        s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                        t = mem[64] + 128
                        while idx < _66168:
                            _69128 = mem[s]
                            mem[t] = mem[mem[s]]
                            mem[t + 32] = mem[_69128 + 32]
                            mem[t + 64] = mem[_69128 + 64]
                            mem[t + 96] = mem[_69128 + 96]
                            mem[t + 128] = mem[_69128 + 128]
                            mem[t + 160] = mem[_69128 + 172 len 20]
                            mem[t + 192] = mem[_69128 + 192]
                            mem[t + 224] = mem[_69128 + 236 len 20]
                            mem[t + 256] = bool(mem[_69128 + 256])
                            mem[t + 288] = mem[_69128 + 288]
                            idx = idx + 1
                            s = s + 32
                            t = t + 320
                            continue 
                        mem[_65627 + 32] = 0
                        mem[_65627 + 64] = (320 * _66168) + 128
                        _69337 = mem[_65260]
                        mem[_65627 + (320 * _66168) + 128] = mem[_65260]
                        mem[_65627 + (320 * _66168) + 160 len ceil32(_69337)] = mem[_65260 + 32 len ceil32(_69337)]
                        var50001 = ceil32(_69337)
                        if ceil32(_69337) > _69337:
                            mem[_65627 + (320 * _66168) + _69337 + 160] = 0
                        return memory
                          from mem[64]
                           len ceil32(_69337) + _65627 + (320 * _66168) + -mem[64] + 160
                    _66169 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_66169] = 7
                    mem[_66169 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                    _66412 = mem[64]
                    mem[mem[64]] = 96
                    _66540 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                    mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                    idx = 0
                    s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                    t = mem[64] + 128
                    while idx < _66540:
                        _69135 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_69135 + 32]
                        mem[t + 64] = mem[_69135 + 64]
                        mem[t + 96] = mem[_69135 + 96]
                        mem[t + 128] = mem[_69135 + 128]
                        mem[t + 160] = mem[_69135 + 172 len 20]
                        mem[t + 192] = mem[_69135 + 192]
                        mem[t + 224] = mem[_69135 + 236 len 20]
                        mem[t + 256] = bool(mem[_69135 + 256])
                        mem[t + 288] = mem[_69135 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_66412 + 32] = arg1 - arg2
                    mem[_66412 + 64] = (320 * _66540) + 128
                    _69338 = mem[_66169]
                    mem[_66412 + (320 * _66540) + 128] = mem[_66169]
                    mem[_66412 + (320 * _66540) + 160 len ceil32(_69338)] = mem[_66169 + 32 len ceil32(_69338)]
                    var53001 = ceil32(_69338)
                    if ceil32(_69338) > _69338:
                        mem[_66412 + (320 * _66540) + _69338 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_69338) + _66412 + (320 * _66540) + -mem[64] + 160
                mem[64] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 544
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 256] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 288] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 320] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 352] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 384] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 416] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 448] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 480] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 512] = 0
                mem[var40001] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224
                s = var40001
                idx = var40002
                while idx - 1:
                    mem[64] = mem[64] + 320
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 256] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 288] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 320] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 352] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 384] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 416] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 448] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 480] = 0
                    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 512] = 0
                    mem[s + 32] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224
                    s = s + 32
                    idx = idx - 1
                    continue 
                idx = 0
                while idx < arg2:
                    if arg1 < idx:
                        revert with 0, 17
                    if arg1 - idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                        revert with 0, 50
                    mem[0] = mem[(32 * arg1 - idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]
                    mem[32] = 12
                    _70816 = sha3(mem[(32 * arg1 - idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192], 12)
                    _70817 = mem[64]
                    mem[64] = mem[64] + 320
                    mem[_70817] = stor12[mem[(32 * arg1 - idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]].field_0
                    mem[_70817 + 32] = stor1[_70816]
                    mem[_70817 + 64] = stor2[_70816]
                    mem[_70817 + 96] = stor3[_70816]
                    mem[_70817 + 128] = stor4[_70816]
                    mem[_70817 + 160] = stor5[_70816]
                    mem[_70817 + 192] = stor6[_70816]
                    mem[_70817 + 224] = stor7[_70816].field_0
                    mem[_70817 + 256] = bool(stor7[_70816].field_160)
                    mem[_70817 + 288] = stor8[_70816]
                    if idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]:
                        revert with 0, 50
                    mem[(32 * idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224] = _70817
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
                if arg1 < arg2:
                    _70587 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_70587] = 4
                    mem[_70587 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                    _70689 = mem[64]
                    mem[mem[64]] = 96
                    _70813 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                    mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                    idx = 0
                    s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                    t = mem[64] + 128
                    while idx < _70813:
                        _71139 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_71139 + 32]
                        mem[t + 64] = mem[_71139 + 64]
                        mem[t + 96] = mem[_71139 + 96]
                        mem[t + 128] = mem[_71139 + 128]
                        mem[t + 160] = mem[_71139 + 172 len 20]
                        mem[t + 192] = mem[_71139 + 192]
                        mem[t + 224] = mem[_71139 + 236 len 20]
                        mem[t + 256] = bool(mem[_71139 + 256])
                        mem[t + 288] = mem[_71139 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_70689 + 32] = 0
                    mem[_70689 + 64] = (320 * _70813) + 128
                    _71251 = mem[_70587]
                    mem[_70689 + (320 * _70813) + 128] = mem[_70587]
                    mem[_70689 + (320 * _70813) + 160 len ceil32(_71251)] = mem[_70587 + 32 len ceil32(_71251)]
                    var57001 = ceil32(_71251)
                    if ceil32(_71251) > _71251:
                        mem[_70689 + (320 * _70813) + _71251 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_71251) + _70689 + (320 * _70813) + -mem[64] + 160
                _70814 = mem[64]
                mem[64] = mem[64] + 64
                mem[_70814] = 7
                mem[_70814 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                _70874 = mem[64]
                mem[mem[64]] = 96
                _70900 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                idx = 0
                s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                t = mem[64] + 128
                while idx < _70900:
                    _71146 = mem[s]
                    mem[t] = mem[mem[s]]
                    mem[t + 32] = mem[_71146 + 32]
                    mem[t + 64] = mem[_71146 + 64]
                    mem[t + 96] = mem[_71146 + 96]
                    mem[t + 128] = mem[_71146 + 128]
                    mem[t + 160] = mem[_71146 + 172 len 20]
                    mem[t + 192] = mem[_71146 + 192]
                    mem[t + 224] = mem[_71146 + 236 len 20]
                    mem[t + 256] = bool(mem[_71146 + 256])
                    mem[t + 288] = mem[_71146 + 288]
                    idx = idx + 1
                    s = s + 32
                    t = t + 320
                    continue 
                mem[_70874 + 32] = arg1 - arg2
                mem[_70874 + 64] = (320 * _70900) + 128
                _71252 = mem[_70814]
                mem[_70874 + (320 * _70900) + 128] = mem[_70814]
                mem[_70874 + (320 * _70900) + 160 len ceil32(_71252)] = mem[_70814 + 32 len ceil32(_71252)]
                var60001 = ceil32(_71252)
                if ceil32(_71252) > _71252:
                    mem[_70874 + (320 * _70900) + _71252 + 160] = 0
                return memory
                  from mem[64]
                   len ceil32(_71252) + _70874 + (320 * _70900) + -mem[64] + 160
            if 1 > !arg1:
                revert with 0, 17
            if arg1 + 1 > test266151307():
                revert with 0, 65
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192] = arg1 + 1
            mem[64] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 224
            if not arg1 + 1:
                idx = 0
                while idx < arg1 + 1:
                    if arg1 < idx:
                        revert with 0, 17
                    if arg1 - idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                        revert with 0, 50
                    mem[0] = mem[(32 * arg1 - idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]
                    mem[32] = 12
                    _66177 = sha3(mem[(32 * arg1 - idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192], 12)
                    _66178 = mem[64]
                    mem[64] = mem[64] + 320
                    mem[_66178] = stor12[mem[(32 * arg1 - idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]].field_0
                    mem[_66178 + 32] = stor1[_66177]
                    mem[_66178 + 64] = stor2[_66177]
                    mem[_66178 + 96] = stor3[_66177]
                    mem[_66178 + 128] = stor4[_66177]
                    mem[_66178 + 160] = stor5[_66177]
                    mem[_66178 + 192] = stor6[_66177]
                    mem[_66178 + 224] = stor7[_66177].field_0
                    mem[_66178 + 256] = bool(stor7[_66177].field_160)
                    mem[_66178 + 288] = stor8[_66177]
                    if idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]:
                        revert with 0, 50
                    mem[(32 * idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224] = _66178
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
                if arg1 < arg1 + 1:
                    _65261 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_65261] = 4
                    mem[_65261 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                    _65629 = mem[64]
                    mem[mem[64]] = 96
                    _66174 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                    mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                    idx = 0
                    s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                    t = mem[64] + 128
                    while idx < _66174:
                        _69142 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_69142 + 32]
                        mem[t + 64] = mem[_69142 + 64]
                        mem[t + 96] = mem[_69142 + 96]
                        mem[t + 128] = mem[_69142 + 128]
                        mem[t + 160] = mem[_69142 + 172 len 20]
                        mem[t + 192] = mem[_69142 + 192]
                        mem[t + 224] = mem[_69142 + 236 len 20]
                        mem[t + 256] = bool(mem[_69142 + 256])
                        mem[t + 288] = mem[_69142 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_65629 + 32] = 0
                    mem[_65629 + 64] = (320 * _66174) + 128
                    _69339 = mem[_65261]
                    mem[_65629 + (320 * _66174) + 128] = mem[_65261]
                    mem[_65629 + (320 * _66174) + 160 len ceil32(_69339)] = mem[_65261 + 32 len ceil32(_69339)]
                    var54001 = ceil32(_69339)
                    if ceil32(_69339) > _69339:
                        mem[_65629 + (320 * _66174) + _69339 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_69339) + _65629 + (320 * _66174) + -mem[64] + 160
                _66175 = mem[64]
                mem[64] = mem[64] + 64
                mem[_66175] = 7
                mem[_66175 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                _66421 = mem[64]
                mem[mem[64]] = 96
                _66542 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                idx = 0
                s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                t = mem[64] + 128
                while idx < _66542:
                    _69149 = mem[s]
                    mem[t] = mem[mem[s]]
                    mem[t + 32] = mem[_69149 + 32]
                    mem[t + 64] = mem[_69149 + 64]
                    mem[t + 96] = mem[_69149 + 96]
                    mem[t + 128] = mem[_69149 + 128]
                    mem[t + 160] = mem[_69149 + 172 len 20]
                    mem[t + 192] = mem[_69149 + 192]
                    mem[t + 224] = mem[_69149 + 236 len 20]
                    mem[t + 256] = bool(mem[_69149 + 256])
                    mem[t + 288] = mem[_69149 + 288]
                    idx = idx + 1
                    s = s + 32
                    t = t + 320
                    continue 
                mem[_66421 + 32] = -1
                mem[_66421 + 64] = (320 * _66542) + 128
                _69340 = mem[_66175]
                mem[_66421 + (320 * _66542) + 128] = mem[_66175]
                mem[_66421 + (320 * _66542) + 160 len ceil32(_69340)] = mem[_66175 + 32 len ceil32(_69340)]
                var57001 = ceil32(_69340)
                if ceil32(_69340) > _69340:
                    mem[_66421 + (320 * _66542) + _69340 + 160] = 0
                return memory
                  from mem[64]
                   len ceil32(_69340) + _66421 + (320 * _66542) + -mem[64] + 160
            mem[64] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 544
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 224] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 256] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 288] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 320] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 352] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 384] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 416] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 448] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 480] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 512] = 0
            mem[var44001] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 224
            s = var44001
            idx = var44002
            while idx - 1:
                mem[64] = mem[64] + 320
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 224] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 256] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 288] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 320] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 352] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 384] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 416] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 448] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 480] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 512] = 0
                mem[s + 32] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg1 + 1) + 224
                s = s + 32
                idx = idx - 1
                continue 
            idx = 0
            while idx < arg1 + 1:
                if arg1 < idx:
                    revert with 0, 17
                if arg1 - idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                    revert with 0, 50
                mem[0] = mem[(32 * arg1 - idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]
                mem[32] = 12
                _70824 = sha3(mem[(32 * arg1 - idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192], 12)
                _70825 = mem[64]
                mem[64] = mem[64] + 320
                mem[_70825] = stor12[mem[(32 * arg1 - idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]].field_0
                mem[_70825 + 32] = stor1[_70824]
                mem[_70825 + 64] = stor2[_70824]
                mem[_70825 + 96] = stor3[_70824]
                mem[_70825 + 128] = stor4[_70824]
                mem[_70825 + 160] = stor5[_70824]
                mem[_70825 + 192] = stor6[_70824]
                mem[_70825 + 224] = stor7[_70824].field_0
                mem[_70825 + 256] = bool(stor7[_70824].field_160)
                mem[_70825 + 288] = stor8[_70824]
                if idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]:
                    revert with 0, 50
                mem[(32 * idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224] = _70825
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
            if arg1 < arg1 + 1:
                _70588 = mem[64]
                mem[64] = mem[64] + 64
                mem[_70588] = 4
                mem[_70588 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                _70693 = mem[64]
                mem[mem[64]] = 96
                _70821 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                idx = 0
                s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                t = mem[64] + 128
                while idx < _70821:
                    _71153 = mem[s]
                    mem[t] = mem[mem[s]]
                    mem[t + 32] = mem[_71153 + 32]
                    mem[t + 64] = mem[_71153 + 64]
                    mem[t + 96] = mem[_71153 + 96]
                    mem[t + 128] = mem[_71153 + 128]
                    mem[t + 160] = mem[_71153 + 172 len 20]
                    mem[t + 192] = mem[_71153 + 192]
                    mem[t + 224] = mem[_71153 + 236 len 20]
                    mem[t + 256] = bool(mem[_71153 + 256])
                    mem[t + 288] = mem[_71153 + 288]
                    idx = idx + 1
                    s = s + 32
                    t = t + 320
                    continue 
                mem[_70693 + 32] = 0
                mem[_70693 + 64] = (320 * _70821) + 128
                _71253 = mem[_70588]
                mem[_70693 + (320 * _70821) + 128] = mem[_70588]
                mem[_70693 + (320 * _70821) + 160 len ceil32(_71253)] = mem[_70588 + 32 len ceil32(_71253)]
                var61001 = ceil32(_71253)
                if ceil32(_71253) > _71253:
                    mem[_70693 + (320 * _70821) + _71253 + 160] = 0
                return memory
                  from mem[64]
                   len ceil32(_71253) + _70693 + (320 * _70821) + -mem[64] + 160
            _70822 = mem[64]
            mem[64] = mem[64] + 64
            mem[_70822] = 7
            mem[_70822 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
            _70882 = mem[64]
            mem[mem[64]] = 96
            _70902 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
            mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
            idx = 0
            s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
            t = mem[64] + 128
            while idx < _70902:
                _71160 = mem[s]
                mem[t] = mem[mem[s]]
                mem[t + 32] = mem[_71160 + 32]
                mem[t + 64] = mem[_71160 + 64]
                mem[t + 96] = mem[_71160 + 96]
                mem[t + 128] = mem[_71160 + 128]
                mem[t + 160] = mem[_71160 + 172 len 20]
                mem[t + 192] = mem[_71160 + 192]
                mem[t + 224] = mem[_71160 + 236 len 20]
                mem[t + 256] = bool(mem[_71160 + 256])
                mem[t + 288] = mem[_71160 + 288]
                idx = idx + 1
                s = s + 32
                t = t + 320
                continue 
            mem[_70882 + 32] = -1
            mem[_70882 + 64] = (320 * _70902) + 128
            _71254 = mem[_70822]
            mem[_70882 + (320 * _70902) + 128] = mem[_70822]
            mem[_70882 + (320 * _70902) + 160 len ceil32(_71254)] = mem[_70822 + 32 len ceil32(_71254)]
            var64001 = ceil32(_71254)
            if ceil32(_71254) > _71254:
                mem[_70882 + (320 * _70902) + _71254 + 160] = 0
            return memory
              from mem[64]
               len ceil32(_71254) + _70882 + (320 * _70902) + -mem[64] + 160
        if stor15[address(arg5)].field_0 < arg1:
            revert with 0, 17
        if arg2 <= stor15[address(arg5)].field_0 - arg1:
            if arg2 > test266151307():
                revert with 0, 65
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192] = arg2
            mem[64] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224
            if not arg2:
                idx = 0
                while idx < arg2:
                    if arg1 > !idx:
                        revert with 0, 17
                    if arg1 + idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                        revert with 0, 50
                    mem[0] = mem[(32 * arg1 + idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]
                    mem[32] = 12
                    _66181 = sha3(mem[(32 * arg1 + idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192], 12)
                    _66182 = mem[64]
                    mem[64] = mem[64] + 320
                    mem[_66182] = stor12[mem[(32 * arg1 + idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]].field_0
                    mem[_66182 + 32] = stor1[_66181]
                    mem[_66182 + 64] = stor2[_66181]
                    mem[_66182 + 96] = stor3[_66181]
                    mem[_66182 + 128] = stor4[_66181]
                    mem[_66182 + 160] = stor5[_66181]
                    mem[_66182 + 192] = stor6[_66181]
                    mem[_66182 + 224] = stor7[_66181].field_0
                    mem[_66182 + 256] = bool(stor7[_66181].field_160)
                    mem[_66182 + 288] = stor8[_66181]
                    if idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]:
                        revert with 0, 50
                    mem[(32 * idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224] = _66182
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
                if arg1 > !arg2:
                    revert with 0, 17
                if arg1 > !arg2:
                    revert with 0, 17
                if arg1 + arg2 < mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                    _66543 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_66543] = 7
                    mem[_66543 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                    _66892 = mem[64]
                    mem[mem[64]] = 96
                    _67044 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                    mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                    idx = 0
                    s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                    t = mem[64] + 128
                    while idx < _67044:
                        _69156 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_69156 + 32]
                        mem[t + 64] = mem[_69156 + 64]
                        mem[t + 96] = mem[_69156 + 96]
                        mem[t + 128] = mem[_69156 + 128]
                        mem[t + 160] = mem[_69156 + 172 len 20]
                        mem[t + 192] = mem[_69156 + 192]
                        mem[t + 224] = mem[_69156 + 236 len 20]
                        mem[t + 256] = bool(mem[_69156 + 256])
                        mem[t + 288] = mem[_69156 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_66892 + 32] = arg1 + arg2
                    mem[_66892 + 64] = (320 * _67044) + 128
                    _69341 = mem[_66543]
                    mem[_66892 + (320 * _67044) + 128] = mem[_66543]
                    mem[_66892 + (320 * _67044) + 160 len ceil32(_69341)] = mem[_66543 + 32 len ceil32(_69341)]
                    var59001 = ceil32(_69341)
                    if ceil32(_69341) > _69341:
                        mem[_66892 + (320 * _67044) + _69341 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_69341) + _66892 + (320 * _67044) + -mem[64] + 160
                _66544 = mem[64]
                mem[64] = mem[64] + 64
                mem[_66544] = 4
                mem[_66544 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                _66893 = mem[64]
                mem[mem[64]] = 96
                _67045 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                idx = 0
                s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                t = mem[64] + 128
                while idx < _67045:
                    _69163 = mem[s]
                    mem[t] = mem[mem[s]]
                    mem[t + 32] = mem[_69163 + 32]
                    mem[t + 64] = mem[_69163 + 64]
                    mem[t + 96] = mem[_69163 + 96]
                    mem[t + 128] = mem[_69163 + 128]
                    mem[t + 160] = mem[_69163 + 172 len 20]
                    mem[t + 192] = mem[_69163 + 192]
                    mem[t + 224] = mem[_69163 + 236 len 20]
                    mem[t + 256] = bool(mem[_69163 + 256])
                    mem[t + 288] = mem[_69163 + 288]
                    idx = idx + 1
                    s = s + 32
                    t = t + 320
                    continue 
                mem[_66893 + 32] = arg1 + arg2
                mem[_66893 + 64] = (320 * _67045) + 128
                _69342 = mem[_66544]
                mem[_66893 + (320 * _67045) + 128] = mem[_66544]
                mem[_66893 + (320 * _67045) + 160 len ceil32(_69342)] = mem[_66544 + 32 len ceil32(_69342)]
                var59001 = ceil32(_69342)
                if ceil32(_69342) > _69342:
                    mem[_66893 + (320 * _67045) + _69342 + 160] = 0
                return memory
                  from mem[64]
                   len ceil32(_69342) + _66893 + (320 * _67045) + -mem[64] + 160
            mem[64] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 544
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 256] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 288] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 320] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 352] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 384] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 416] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 448] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 480] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 512] = 0
            mem[var43001] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224
            s = var43001
            idx = var43002
            while idx - 1:
                mem[64] = mem[64] + 320
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 256] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 288] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 320] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 352] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 384] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 416] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 448] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 480] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 512] = 0
                mem[s + 32] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224
                s = s + 32
                idx = idx - 1
                continue 
            idx = 0
            while idx < arg2:
                if arg1 > !idx:
                    revert with 0, 17
                if arg1 + idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                    revert with 0, 50
                mem[0] = mem[(32 * arg1 + idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]
                mem[32] = 12
                _70830 = sha3(mem[(32 * arg1 + idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192], 12)
                _70831 = mem[64]
                mem[64] = mem[64] + 320
                mem[_70831] = stor12[mem[(32 * arg1 + idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]].field_0
                mem[_70831 + 32] = stor1[_70830]
                mem[_70831 + 64] = stor2[_70830]
                mem[_70831 + 96] = stor3[_70830]
                mem[_70831 + 128] = stor4[_70830]
                mem[_70831 + 160] = stor5[_70830]
                mem[_70831 + 192] = stor6[_70830]
                mem[_70831 + 224] = stor7[_70830].field_0
                mem[_70831 + 256] = bool(stor7[_70830].field_160)
                mem[_70831 + 288] = stor8[_70830]
                if idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]:
                    revert with 0, 50
                mem[(32 * idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224] = _70831
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
            if arg1 > !arg2:
                revert with 0, 17
            if arg1 > !arg2:
                revert with 0, 17
            if arg1 + arg2 < mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                _70903 = mem[64]
                mem[64] = mem[64] + 64
                mem[_70903] = 7
                mem[_70903 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                _70939 = mem[64]
                mem[mem[64]] = 96
                _70967 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                idx = 0
                s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                t = mem[64] + 128
                while idx < _70967:
                    _71167 = mem[s]
                    mem[t] = mem[mem[s]]
                    mem[t + 32] = mem[_71167 + 32]
                    mem[t + 64] = mem[_71167 + 64]
                    mem[t + 96] = mem[_71167 + 96]
                    mem[t + 128] = mem[_71167 + 128]
                    mem[t + 160] = mem[_71167 + 172 len 20]
                    mem[t + 192] = mem[_71167 + 192]
                    mem[t + 224] = mem[_71167 + 236 len 20]
                    mem[t + 256] = bool(mem[_71167 + 256])
                    mem[t + 288] = mem[_71167 + 288]
                    idx = idx + 1
                    s = s + 32
                    t = t + 320
                    continue 
                mem[_70939 + 32] = arg1 + arg2
                mem[_70939 + 64] = (320 * _70967) + 128
                _71255 = mem[_70903]
                mem[_70939 + (320 * _70967) + 128] = mem[_70903]
                mem[_70939 + (320 * _70967) + 160 len ceil32(_71255)] = mem[_70903 + 32 len ceil32(_71255)]
                var66001 = ceil32(_71255)
                if ceil32(_71255) > _71255:
                    mem[_70939 + (320 * _70967) + _71255 + 160] = 0
                return memory
                  from mem[64]
                   len ceil32(_71255) + _70939 + (320 * _70967) + -mem[64] + 160
            _70904 = mem[64]
            mem[64] = mem[64] + 64
            mem[_70904] = 4
            mem[_70904 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
            _70940 = mem[64]
            mem[mem[64]] = 96
            _70968 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
            mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
            idx = 0
            s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
            t = mem[64] + 128
            while idx < _70968:
                _71174 = mem[s]
                mem[t] = mem[mem[s]]
                mem[t + 32] = mem[_71174 + 32]
                mem[t + 64] = mem[_71174 + 64]
                mem[t + 96] = mem[_71174 + 96]
                mem[t + 128] = mem[_71174 + 128]
                mem[t + 160] = mem[_71174 + 172 len 20]
                mem[t + 192] = mem[_71174 + 192]
                mem[t + 224] = mem[_71174 + 236 len 20]
                mem[t + 256] = bool(mem[_71174 + 256])
                mem[t + 288] = mem[_71174 + 288]
                idx = idx + 1
                s = s + 32
                t = t + 320
                continue 
            mem[_70940 + 32] = arg1 + arg2
            mem[_70940 + 64] = (320 * _70968) + 128
            _71256 = mem[_70904]
            mem[_70940 + (320 * _70968) + 128] = mem[_70904]
            mem[_70940 + (320 * _70968) + 160 len ceil32(_71256)] = mem[_70904 + 32 len ceil32(_71256)]
            var66001 = ceil32(_71256)
            if ceil32(_71256) > _71256:
                mem[_70940 + (320 * _70968) + _71256 + 160] = 0
            return memory
              from mem[64]
               len ceil32(_71256) + _70940 + (320 * _70968) + -mem[64] + 160
        if stor15[address(arg5)].field_0 < arg1:
            revert with 0, 17
        if stor15[address(arg5)].field_0 - arg1 > test266151307():
            revert with 0, 65
        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192] = stor15[address(arg5)].field_0 - arg1
        mem[64] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 224
        if not stor15[address(arg5)].field_0 - arg1:
            idx = 0
            while idx < stor15[address(arg5)].field_0 - arg1:
                if arg1 > !idx:
                    revert with 0, 17
                if arg1 + idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                    revert with 0, 50
                mem[0] = mem[(32 * arg1 + idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]
                mem[32] = 12
                _66185 = sha3(mem[(32 * arg1 + idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192], 12)
                _66186 = mem[64]
                mem[64] = mem[64] + 320
                mem[_66186] = stor12[mem[(32 * arg1 + idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]].field_0
                mem[_66186 + 32] = stor1[_66185]
                mem[_66186 + 64] = stor2[_66185]
                mem[_66186 + 96] = stor3[_66185]
                mem[_66186 + 128] = stor4[_66185]
                mem[_66186 + 160] = stor5[_66185]
                mem[_66186 + 192] = stor6[_66185]
                mem[_66186 + 224] = stor7[_66185].field_0
                mem[_66186 + 256] = bool(stor7[_66185].field_160)
                mem[_66186 + 288] = stor8[_66185]
                if idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]:
                    revert with 0, 50
                mem[(32 * idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224] = _66186
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
            if arg1 > !(stor15[address(arg5)].field_0 - arg1):
                revert with 0, 17
            if arg1 > !(stor15[address(arg5)].field_0 - arg1):
                revert with 0, 17
            if stor15[address(arg5)].field_0 < mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                _66545 = mem[64]
                mem[64] = mem[64] + 64
                mem[_66545] = 7
                mem[_66545 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                _66898 = mem[64]
                mem[mem[64]] = 96
                _67046 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                idx = 0
                s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                t = mem[64] + 128
                while idx < _67046:
                    _69170 = mem[s]
                    mem[t] = mem[mem[s]]
                    mem[t + 32] = mem[_69170 + 32]
                    mem[t + 64] = mem[_69170 + 64]
                    mem[t + 96] = mem[_69170 + 96]
                    mem[t + 128] = mem[_69170 + 128]
                    mem[t + 160] = mem[_69170 + 172 len 20]
                    mem[t + 192] = mem[_69170 + 192]
                    mem[t + 224] = mem[_69170 + 236 len 20]
                    mem[t + 256] = bool(mem[_69170 + 256])
                    mem[t + 288] = mem[_69170 + 288]
                    idx = idx + 1
                    s = s + 32
                    t = t + 320
                    continue 
                mem[_66898 + 32] = stor15[address(arg5)].field_0
                mem[_66898 + 64] = (320 * _67046) + 128
                _69343 = mem[_66545]
                mem[_66898 + (320 * _67046) + 128] = mem[_66545]
                mem[_66898 + (320 * _67046) + 160 len ceil32(_69343)] = mem[_66545 + 32 len ceil32(_69343)]
                var63001 = ceil32(_69343)
                if ceil32(_69343) > _69343:
                    mem[_66898 + (320 * _67046) + _69343 + 160] = 0
                return memory
                  from mem[64]
                   len ceil32(_69343) + _66898 + (320 * _67046) + -mem[64] + 160
            _66546 = mem[64]
            mem[64] = mem[64] + 64
            mem[_66546] = 4
            mem[_66546 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
            _66899 = mem[64]
            mem[mem[64]] = 96
            _67047 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
            mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
            idx = 0
            s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
            t = mem[64] + 128
            while idx < _67047:
                _69177 = mem[s]
                mem[t] = mem[mem[s]]
                mem[t + 32] = mem[_69177 + 32]
                mem[t + 64] = mem[_69177 + 64]
                mem[t + 96] = mem[_69177 + 96]
                mem[t + 128] = mem[_69177 + 128]
                mem[t + 160] = mem[_69177 + 172 len 20]
                mem[t + 192] = mem[_69177 + 192]
                mem[t + 224] = mem[_69177 + 236 len 20]
                mem[t + 256] = bool(mem[_69177 + 256])
                mem[t + 288] = mem[_69177 + 288]
                idx = idx + 1
                s = s + 32
                t = t + 320
                continue 
            mem[_66899 + 32] = stor15[address(arg5)].field_0
            mem[_66899 + 64] = (320 * _67047) + 128
            _69344 = mem[_66546]
            mem[_66899 + (320 * _67047) + 128] = mem[_66546]
            mem[_66899 + (320 * _67047) + 160 len ceil32(_69344)] = mem[_66546 + 32 len ceil32(_69344)]
            var63001 = ceil32(_69344)
            if ceil32(_69344) > _69344:
                mem[_66899 + (320 * _67047) + _69344 + 160] = 0
            return memory
              from mem[64]
               len ceil32(_69344) + _66899 + (320 * _67047) + -mem[64] + 160
        mem[64] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 544
        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 224] = 0
        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 256] = 0
        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 288] = 0
        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 320] = 0
        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 352] = 0
        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 384] = 0
        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 416] = 0
        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 448] = 0
        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 480] = 0
        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 512] = 0
        mem[var47001] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 224
        s = var47001
        idx = var47002
        while idx - 1:
            mem[64] = mem[64] + 320
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 224] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 256] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 288] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 320] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 352] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 384] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 416] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 448] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 480] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 512] = 0
            mem[s + 32] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0 - arg1) + 224
            s = s + 32
            idx = idx - 1
            continue 
        idx = 0
        while idx < stor15[address(arg5)].field_0 - arg1:
            if arg1 > !idx:
                revert with 0, 17
            if arg1 + idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                revert with 0, 50
            mem[0] = mem[(32 * arg1 + idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]
            mem[32] = 12
            _70836 = sha3(mem[(32 * arg1 + idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192], 12)
            _70837 = mem[64]
            mem[64] = mem[64] + 320
            mem[_70837] = stor12[mem[(32 * arg1 + idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]].field_0
            mem[_70837 + 32] = stor1[_70836]
            mem[_70837 + 64] = stor2[_70836]
            mem[_70837 + 96] = stor3[_70836]
            mem[_70837 + 128] = stor4[_70836]
            mem[_70837 + 160] = stor5[_70836]
            mem[_70837 + 192] = stor6[_70836]
            mem[_70837 + 224] = stor7[_70836].field_0
            mem[_70837 + 256] = bool(stor7[_70836].field_160)
            mem[_70837 + 288] = stor8[_70836]
            if idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]:
                revert with 0, 50
            mem[(32 * idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224] = _70837
            if idx == -1:
                revert with 0, 17
            idx = idx + 1
            continue 
        if arg1 > !(stor15[address(arg5)].field_0 - arg1):
            revert with 0, 17
        if arg1 > !(stor15[address(arg5)].field_0 - arg1):
            revert with 0, 17
        if stor15[address(arg5)].field_0 < mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
            _70905 = mem[64]
            mem[64] = mem[64] + 64
            mem[_70905] = 7
            mem[_70905 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
            _70941 = mem[64]
            mem[mem[64]] = 96
            _70969 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
            mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
            idx = 0
            s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
            t = mem[64] + 128
            while idx < _70969:
                _71181 = mem[s]
                mem[t] = mem[mem[s]]
                mem[t + 32] = mem[_71181 + 32]
                mem[t + 64] = mem[_71181 + 64]
                mem[t + 96] = mem[_71181 + 96]
                mem[t + 128] = mem[_71181 + 128]
                mem[t + 160] = mem[_71181 + 172 len 20]
                mem[t + 192] = mem[_71181 + 192]
                mem[t + 224] = mem[_71181 + 236 len 20]
                mem[t + 256] = bool(mem[_71181 + 256])
                mem[t + 288] = mem[_71181 + 288]
                idx = idx + 1
                s = s + 32
                t = t + 320
                continue 
            mem[_70941 + 32] = stor15[address(arg5)].field_0
            mem[_70941 + 64] = (320 * _70969) + 128
            _71257 = mem[_70905]
            mem[_70941 + (320 * _70969) + 128] = mem[_70905]
            mem[_70941 + (320 * _70969) + 160 len ceil32(_71257)] = mem[_70905 + 32 len ceil32(_71257)]
            var70001 = ceil32(_71257)
            if ceil32(_71257) > _71257:
                mem[_70941 + (320 * _70969) + _71257 + 160] = 0
            return memory
              from mem[64]
               len ceil32(_71257) + _70941 + (320 * _70969) + -mem[64] + 160
        _70906 = mem[64]
        mem[64] = mem[64] + 64
        mem[_70906] = 4
        mem[_70906 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
        _70942 = mem[64]
        mem[mem[64]] = 96
        _70970 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
        mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
        idx = 0
        s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
        t = mem[64] + 128
        while idx < _70970:
            _71188 = mem[s]
            mem[t] = mem[mem[s]]
            mem[t + 32] = mem[_71188 + 32]
            mem[t + 64] = mem[_71188 + 64]
            mem[t + 96] = mem[_71188 + 96]
            mem[t + 128] = mem[_71188 + 128]
            mem[t + 160] = mem[_71188 + 172 len 20]
            mem[t + 192] = mem[_71188 + 192]
            mem[t + 224] = mem[_71188 + 236 len 20]
            mem[t + 256] = bool(mem[_71188 + 256])
            mem[t + 288] = mem[_71188 + 288]
            idx = idx + 1
            s = s + 32
            t = t + 320
            continue 
        mem[_70942 + 32] = stor15[address(arg5)].field_0
        mem[_70942 + 64] = (320 * _70970) + 128
        _71258 = mem[_70906]
        mem[_70942 + (320 * _70970) + 128] = mem[_70906]
        mem[_70942 + (320 * _70970) + 160 len ceil32(_71258)] = mem[_70906 + 32 len ceil32(_71258)]
        var70001 = ceil32(_71258)
        if ceil32(_71258) > _71258:
            mem[_70942 + (320 * _70970) + _71258 + 160] = 0
        return memory
          from mem[64]
           len ceil32(_71258) + _70942 + (320 * _70970) + -mem[64] + 160
    if stor15[address(arg5)].field_0 < 1:
        revert with 0, 17
    if arg3:
        if arg2 <= stor15[address(arg5)].field_0 - 1:
            if arg2 > test266151307():
                revert with 0, 65
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192] = arg2
            mem[64] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224
            if not arg2:
                idx = 0
                while idx < arg2:
                    if stor15[address(arg5)].field_0 - 1 < idx:
                        revert with 0, 17
                    if stor15[address(arg5)].field_0 + -idx - 1 >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                        revert with 0, 50
                    mem[0] = mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]
                    mem[32] = 12
                    _66191 = sha3(mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192], 12)
                    _66192 = mem[64]
                    mem[64] = mem[64] + 320
                    mem[_66192] = stor12[mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]].field_0
                    mem[_66192 + 32] = stor1[_66191]
                    mem[_66192 + 64] = stor2[_66191]
                    mem[_66192 + 96] = stor3[_66191]
                    mem[_66192 + 128] = stor4[_66191]
                    mem[_66192 + 160] = stor5[_66191]
                    mem[_66192 + 192] = stor6[_66191]
                    mem[_66192 + 224] = stor7[_66191].field_0
                    mem[_66192 + 256] = bool(stor7[_66191].field_160)
                    mem[_66192 + 288] = stor8[_66191]
                    if idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]:
                        revert with 0, 50
                    mem[(32 * idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224] = _66192
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
                if stor15[address(arg5)].field_0 - 1 < arg2:
                    _65262 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_65262] = 4
                    mem[_65262 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                    _65633 = mem[64]
                    mem[mem[64]] = 96
                    _66188 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                    mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                    idx = 0
                    s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                    t = mem[64] + 128
                    while idx < _66188:
                        _69184 = mem[s]
                        mem[t] = mem[mem[s]]
                        mem[t + 32] = mem[_69184 + 32]
                        mem[t + 64] = mem[_69184 + 64]
                        mem[t + 96] = mem[_69184 + 96]
                        mem[t + 128] = mem[_69184 + 128]
                        mem[t + 160] = mem[_69184 + 172 len 20]
                        mem[t + 192] = mem[_69184 + 192]
                        mem[t + 224] = mem[_69184 + 236 len 20]
                        mem[t + 256] = bool(mem[_69184 + 256])
                        mem[t + 288] = mem[_69184 + 288]
                        idx = idx + 1
                        s = s + 32
                        t = t + 320
                        continue 
                    mem[_65633 + 32] = 0
                    mem[_65633 + 64] = (320 * _66188) + 128
                    _69345 = mem[_65262]
                    mem[_65633 + (320 * _66188) + 128] = mem[_65262]
                    mem[_65633 + (320 * _66188) + 160 len ceil32(_69345)] = mem[_65262 + 32 len ceil32(_69345)]
                    var54001 = ceil32(_69345)
                    if ceil32(_69345) > _69345:
                        mem[_65633 + (320 * _66188) + _69345 + 160] = 0
                    return memory
                      from mem[64]
                       len ceil32(_69345) + _65633 + (320 * _66188) + -mem[64] + 160
                _66189 = mem[64]
                mem[64] = mem[64] + 64
                mem[_66189] = 7
                mem[_66189 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
                _66430 = mem[64]
                mem[mem[64]] = 96
                _66548 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                idx = 0
                s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                t = mem[64] + 128
                while idx < _66548:
                    _69191 = mem[s]
                    mem[t] = mem[mem[s]]
                    mem[t + 32] = mem[_69191 + 32]
                    mem[t + 64] = mem[_69191 + 64]
                    mem[t + 96] = mem[_69191 + 96]
                    mem[t + 128] = mem[_69191 + 128]
                    mem[t + 160] = mem[_69191 + 172 len 20]
                    mem[t + 192] = mem[_69191 + 192]
                    mem[t + 224] = mem[_69191 + 236 len 20]
                    mem[t + 256] = bool(mem[_69191 + 256])
                    mem[t + 288] = mem[_69191 + 288]
                    idx = idx + 1
                    s = s + 32
                    t = t + 320
                    continue 
                mem[_66430 + 32] = stor15[address(arg5)].field_0 + -arg2 - 1
                mem[_66430 + 64] = (320 * _66548) + 128
                _69346 = mem[_66189]
                mem[_66430 + (320 * _66548) + 128] = mem[_66189]
                mem[_66430 + (320 * _66548) + 160 len ceil32(_69346)] = mem[_66189 + 32 len ceil32(_69346)]
                var57001 = ceil32(_69346)
                if ceil32(_69346) > _69346:
                    mem[_66430 + (320 * _66548) + _69346 + 160] = 0
                return memory
                  from mem[64]
                   len ceil32(_69346) + _66430 + (320 * _66548) + -mem[64] + 160
            mem[64] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 544
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 256] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 288] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 320] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 352] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 384] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 416] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 448] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 480] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 512] = 0
            mem[var44001] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224
            s = var44001
            idx = var44002
            while idx - 1:
                mem[64] = mem[64] + 320
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 256] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 288] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 320] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 352] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 384] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 416] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 448] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 480] = 0
                mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 512] = 0
                mem[s + 32] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224
                s = s + 32
                idx = idx - 1
                continue 
            idx = 0
            while idx < arg2:
                if stor15[address(arg5)].field_0 - 1 < idx:
                    revert with 0, 17
                if stor15[address(arg5)].field_0 + -idx - 1 >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                    revert with 0, 50
                mem[0] = mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]
                mem[32] = 12
                _70844 = sha3(mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192], 12)
                _70845 = mem[64]
                mem[64] = mem[64] + 320
                mem[_70845] = stor12[mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]].field_0
                mem[_70845 + 32] = stor1[_70844]
                mem[_70845 + 64] = stor2[_70844]
                mem[_70845 + 96] = stor3[_70844]
                mem[_70845 + 128] = stor4[_70844]
                mem[_70845 + 160] = stor5[_70844]
                mem[_70845 + 192] = stor6[_70844]
                mem[_70845 + 224] = stor7[_70844].field_0
                mem[_70845 + 256] = bool(stor7[_70844].field_160)
                mem[_70845 + 288] = stor8[_70844]
                if idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]:
                    revert with 0, 50
                mem[(32 * idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224] = _70845
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
            if stor15[address(arg5)].field_0 - 1 < arg2:
                _70589 = mem[64]
                mem[64] = mem[64] + 64
                mem[_70589] = 4
                mem[_70589 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                _70703 = mem[64]
                mem[mem[64]] = 96
                _70841 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                idx = 0
                s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                t = mem[64] + 128
                while idx < _70841:
                    _71195 = mem[s]
                    mem[t] = mem[mem[s]]
                    mem[t + 32] = mem[_71195 + 32]
                    mem[t + 64] = mem[_71195 + 64]
                    mem[t + 96] = mem[_71195 + 96]
                    mem[t + 128] = mem[_71195 + 128]
                    mem[t + 160] = mem[_71195 + 172 len 20]
                    mem[t + 192] = mem[_71195 + 192]
                    mem[t + 224] = mem[_71195 + 236 len 20]
                    mem[t + 256] = bool(mem[_71195 + 256])
                    mem[t + 288] = mem[_71195 + 288]
                    idx = idx + 1
                    s = s + 32
                    t = t + 320
                    continue 
                mem[_70703 + 32] = 0
                mem[_70703 + 64] = (320 * _70841) + 128
                _71259 = mem[_70589]
                mem[_70703 + (320 * _70841) + 128] = mem[_70589]
                mem[_70703 + (320 * _70841) + 160 len ceil32(_71259)] = mem[_70589 + 32 len ceil32(_71259)]
                var61001 = ceil32(_71259)
                if ceil32(_71259) > _71259:
                    mem[_70703 + (320 * _70841) + _71259 + 160] = 0
                return memory
                  from mem[64]
                   len ceil32(_71259) + _70703 + (320 * _70841) + -mem[64] + 160
            _70842 = mem[64]
            mem[64] = mem[64] + 64
            mem[_70842] = 7
            mem[_70842 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
            _70890 = mem[64]
            mem[mem[64]] = 96
            _70908 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
            mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
            idx = 0
            s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
            t = mem[64] + 128
            while idx < _70908:
                _71202 = mem[s]
                mem[t] = mem[mem[s]]
                mem[t + 32] = mem[_71202 + 32]
                mem[t + 64] = mem[_71202 + 64]
                mem[t + 96] = mem[_71202 + 96]
                mem[t + 128] = mem[_71202 + 128]
                mem[t + 160] = mem[_71202 + 172 len 20]
                mem[t + 192] = mem[_71202 + 192]
                mem[t + 224] = mem[_71202 + 236 len 20]
                mem[t + 256] = bool(mem[_71202 + 256])
                mem[t + 288] = mem[_71202 + 288]
                idx = idx + 1
                s = s + 32
                t = t + 320
                continue 
            mem[_70890 + 32] = stor15[address(arg5)].field_0 + -arg2 - 1
            mem[_70890 + 64] = (320 * _70908) + 128
            _71260 = mem[_70842]
            mem[_70890 + (320 * _70908) + 128] = mem[_70842]
            mem[_70890 + (320 * _70908) + 160 len ceil32(_71260)] = mem[_70842 + 32 len ceil32(_71260)]
            var64001 = ceil32(_71260)
            if ceil32(_71260) > _71260:
                mem[_70890 + (320 * _70908) + _71260 + 160] = 0
            return memory
              from mem[64]
               len ceil32(_71260) + _70890 + (320 * _70908) + -mem[64] + 160
        if 1 > !(stor15[address(arg5)].field_0 - 1):
            revert with 0, 17
        if stor15[address(arg5)].field_0 > test266151307():
            revert with 0, 65
        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192] = stor15[address(arg5)].field_0
        mem[64] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 224
        if not stor15[address(arg5)].field_0:
            idx = 0
            while idx < stor15[address(arg5)].field_0:
                if stor15[address(arg5)].field_0 - 1 < idx:
                    revert with 0, 17
                if stor15[address(arg5)].field_0 + -idx - 1 >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                    revert with 0, 50
                mem[0] = mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]
                mem[32] = 12
                _66197 = sha3(mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192], 12)
                _66198 = mem[64]
                mem[64] = mem[64] + 320
                mem[_66198] = stor12[mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]].field_0
                mem[_66198 + 32] = stor1[_66197]
                mem[_66198 + 64] = stor2[_66197]
                mem[_66198 + 96] = stor3[_66197]
                mem[_66198 + 128] = stor4[_66197]
                mem[_66198 + 160] = stor5[_66197]
                mem[_66198 + 192] = stor6[_66197]
                mem[_66198 + 224] = stor7[_66197].field_0
                mem[_66198 + 256] = bool(stor7[_66197].field_160)
                mem[_66198 + 288] = stor8[_66197]
                if idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]:
                    revert with 0, 50
                mem[(32 * idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224] = _66198
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
            if stor15[address(arg5)].field_0 - 1 < stor15[address(arg5)].field_0:
                _65263 = mem[64]
                mem[64] = mem[64] + 64
                mem[_65263] = 4
                mem[_65263 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
                _65635 = mem[64]
                mem[mem[64]] = 96
                _66194 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
                idx = 0
                s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
                t = mem[64] + 128
                while idx < _66194:
                    _69198 = mem[s]
                    mem[t] = mem[mem[s]]
                    mem[t + 32] = mem[_69198 + 32]
                    mem[t + 64] = mem[_69198 + 64]
                    mem[t + 96] = mem[_69198 + 96]
                    mem[t + 128] = mem[_69198 + 128]
                    mem[t + 160] = mem[_69198 + 172 len 20]
                    mem[t + 192] = mem[_69198 + 192]
                    mem[t + 224] = mem[_69198 + 236 len 20]
                    mem[t + 256] = bool(mem[_69198 + 256])
                    mem[t + 288] = mem[_69198 + 288]
                    idx = idx + 1
                    s = s + 32
                    t = t + 320
                    continue 
                mem[_65635 + 32] = 0
                mem[_65635 + 64] = (320 * _66194) + 128
                _69347 = mem[_65263]
                mem[_65635 + (320 * _66194) + 128] = mem[_65263]
                mem[_65635 + (320 * _66194) + 160 len ceil32(_69347)] = mem[_65263 + 32 len ceil32(_69347)]
                var58001 = ceil32(_69347)
                if ceil32(_69347) > _69347:
                    mem[_65635 + (320 * _66194) + _69347 + 160] = 0
                return memory
                  from mem[64]
                   len ceil32(_69347) + _65635 + (320 * _66194) + -mem[64] + 160
            _66195 = mem[64]
            mem[64] = mem[64] + 64
            mem[_66195] = 7
            mem[_66195 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
            _66439 = mem[64]
            mem[mem[64]] = 96
            _66550 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
            mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
            idx = 0
            s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
            t = mem[64] + 128
            while idx < _66550:
                _69205 = mem[s]
                mem[t] = mem[mem[s]]
                mem[t + 32] = mem[_69205 + 32]
                mem[t + 64] = mem[_69205 + 64]
                mem[t + 96] = mem[_69205 + 96]
                mem[t + 128] = mem[_69205 + 128]
                mem[t + 160] = mem[_69205 + 172 len 20]
                mem[t + 192] = mem[_69205 + 192]
                mem[t + 224] = mem[_69205 + 236 len 20]
                mem[t + 256] = bool(mem[_69205 + 256])
                mem[t + 288] = mem[_69205 + 288]
                idx = idx + 1
                s = s + 32
                t = t + 320
                continue 
            mem[_66439 + 32] = -1
            mem[_66439 + 64] = (320 * _66550) + 128
            _69348 = mem[_66195]
            mem[_66439 + (320 * _66550) + 128] = mem[_66195]
            mem[_66439 + (320 * _66550) + 160 len ceil32(_69348)] = mem[_66195 + 32 len ceil32(_69348)]
            var61001 = ceil32(_69348)
            if ceil32(_69348) > _69348:
                mem[_66439 + (320 * _66550) + _69348 + 160] = 0
            return memory
              from mem[64]
               len ceil32(_69348) + _66439 + (320 * _66550) + -mem[64] + 160
        mem[64] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 544
        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 224] = 0
        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 256] = 0
        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 288] = 0
        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 320] = 0
        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 352] = 0
        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 384] = 0
        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 416] = 0
        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 448] = 0
        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 480] = 0
        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 512] = 0
        mem[var48001] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 224
        s = var48001
        idx = var48002
        while idx - 1:
            mem[64] = mem[64] + 320
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 224] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 256] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 288] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 320] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 352] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 384] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 416] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 448] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 480] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 512] = 0
            mem[s + 32] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (64 * stor15[address(arg5)].field_0) + 224
            s = s + 32
            idx = idx - 1
            continue 
        idx = 0
        while idx < stor15[address(arg5)].field_0:
            if stor15[address(arg5)].field_0 - 1 < idx:
                revert with 0, 17
            if stor15[address(arg5)].field_0 + -idx - 1 >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                revert with 0, 50
            mem[0] = mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]
            mem[32] = 12
            _70852 = sha3(mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192], 12)
            _70853 = mem[64]
            mem[64] = mem[64] + 320
            mem[_70853] = stor12[mem[(32 * stor15[address(arg5)].field_0 + -idx - 1) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]].field_0
            mem[_70853 + 32] = stor1[_70852]
            mem[_70853 + 64] = stor2[_70852]
            mem[_70853 + 96] = stor3[_70852]
            mem[_70853 + 128] = stor4[_70852]
            mem[_70853 + 160] = stor5[_70852]
            mem[_70853 + 192] = stor6[_70852]
            mem[_70853 + 224] = stor7[_70852].field_0
            mem[_70853 + 256] = bool(stor7[_70852].field_160)
            mem[_70853 + 288] = stor8[_70852]
            if idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]:
                revert with 0, 50
            mem[(32 * idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224] = _70853
            if idx == -1:
                revert with 0, 17
            idx = idx + 1
            continue 
        if stor15[address(arg5)].field_0 - 1 < stor15[address(arg5)].field_0:
            _70590 = mem[64]
            mem[64] = mem[64] + 64
            mem[_70590] = 4
            mem[_70590 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
            _70707 = mem[64]
            mem[mem[64]] = 96
            _70849 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
            mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
            idx = 0
            s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
            t = mem[64] + 128
            while idx < _70849:
                _71209 = mem[s]
                mem[t] = mem[mem[s]]
                mem[t + 32] = mem[_71209 + 32]
                mem[t + 64] = mem[_71209 + 64]
                mem[t + 96] = mem[_71209 + 96]
                mem[t + 128] = mem[_71209 + 128]
                mem[t + 160] = mem[_71209 + 172 len 20]
                mem[t + 192] = mem[_71209 + 192]
                mem[t + 224] = mem[_71209 + 236 len 20]
                mem[t + 256] = bool(mem[_71209 + 256])
                mem[t + 288] = mem[_71209 + 288]
                idx = idx + 1
                s = s + 32
                t = t + 320
                continue 
            mem[_70707 + 32] = 0
            mem[_70707 + 64] = (320 * _70849) + 128
            _71261 = mem[_70590]
            mem[_70707 + (320 * _70849) + 128] = mem[_70590]
            mem[_70707 + (320 * _70849) + 160 len ceil32(_71261)] = mem[_70590 + 32 len ceil32(_71261)]
            var65001 = ceil32(_71261)
            if ceil32(_71261) > _71261:
                mem[_70707 + (320 * _70849) + _71261 + 160] = 0
            return memory
              from mem[64]
               len ceil32(_71261) + _70707 + (320 * _70849) + -mem[64] + 160
        _70850 = mem[64]
        mem[64] = mem[64] + 64
        mem[_70850] = 7
        mem[_70850 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
        _70898 = mem[64]
        mem[mem[64]] = 96
        _70910 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
        mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
        idx = 0
        s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
        t = mem[64] + 128
        while idx < _70910:
            _71216 = mem[s]
            mem[t] = mem[mem[s]]
            mem[t + 32] = mem[_71216 + 32]
            mem[t + 64] = mem[_71216 + 64]
            mem[t + 96] = mem[_71216 + 96]
            mem[t + 128] = mem[_71216 + 128]
            mem[t + 160] = mem[_71216 + 172 len 20]
            mem[t + 192] = mem[_71216 + 192]
            mem[t + 224] = mem[_71216 + 236 len 20]
            mem[t + 256] = bool(mem[_71216 + 256])
            mem[t + 288] = mem[_71216 + 288]
            idx = idx + 1
            s = s + 32
            t = t + 320
            continue 
        mem[_70898 + 32] = -1
        mem[_70898 + 64] = (320 * _70910) + 128
        _71262 = mem[_70850]
        mem[_70898 + (320 * _70910) + 128] = mem[_70850]
        mem[_70898 + (320 * _70910) + 160 len ceil32(_71262)] = mem[_70850 + 32 len ceil32(_71262)]
        var68001 = ceil32(_71262)
        if ceil32(_71262) > _71262:
            mem[_70898 + (320 * _70910) + _71262 + 160] = 0
        return memory
          from mem[64]
           len ceil32(_71262) + _70898 + (320 * _70910) + -mem[64] + 160
    if stor15[address(arg5)].field_0 < stor15[address(arg5)].field_0 - 1:
        revert with 0, 17
    if arg2 > 1:
        if stor15[address(arg5)].field_0 < stor15[address(arg5)].field_0 - 1:
            revert with 0, 17
        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192] = 1
        mem[64] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 576
        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 256] = 0
        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 288] = 0
        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 320] = 0
        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 352] = 0
        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 384] = 0
        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 416] = 0
        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 448] = 0
        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 480] = 0
        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 512] = 0
        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 544] = 0
        mem[var51001] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 256
        s = var51001
        idx = var51002
        while idx - 1:
            mem[64] = mem[64] + 320
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 256] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 288] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 320] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 352] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 384] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 416] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 448] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 480] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 512] = 0
            mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 544] = 0
            mem[s + 32] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 256
            s = s + 32
            idx = idx - 1
            continue 
        idx = 0
        while idx < 1:
            if stor15[address(arg5)].field_0 - 1 > !idx:
                revert with 0, 17
            if stor15[address(arg5)].field_0 + idx - 1 >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                revert with 0, 50
            mem[0] = mem[(32 * stor15[address(arg5)].field_0 + idx - 1) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]
            mem[32] = 12
            _70864 = sha3(mem[(32 * stor15[address(arg5)].field_0 + idx - 1) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192], 12)
            _70865 = mem[64]
            mem[64] = mem[64] + 320
            mem[_70865] = stor12[mem[(32 * stor15[address(arg5)].field_0 + idx - 1) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]].field_0
            mem[_70865 + 32] = stor1[_70864]
            mem[_70865 + 64] = stor2[_70864]
            mem[_70865 + 96] = stor3[_70864]
            mem[_70865 + 128] = stor4[_70864]
            mem[_70865 + 160] = stor5[_70864]
            mem[_70865 + 192] = stor6[_70864]
            mem[_70865 + 224] = stor7[_70864].field_0
            mem[_70865 + 256] = bool(stor7[_70864].field_160)
            mem[_70865 + 288] = stor8[_70864]
            if idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]:
                revert with 0, 50
            mem[(32 * idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224] = _70865
            if idx == -1:
                revert with 0, 17
            idx = idx + 1
            continue 
        if stor15[address(arg5)].field_0 - 1 > !1:
            revert with 0, 17
        if stor15[address(arg5)].field_0 - 1 > !1:
            revert with 0, 17
        if stor15[address(arg5)].field_0 < mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
            _70913 = mem[64]
            mem[64] = mem[64] + 64
            mem[_70913] = 7
            mem[_70913 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
            _70961 = mem[64]
            mem[mem[64]] = 96
            _70977 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
            mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
            idx = 0
            s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
            t = mem[64] + 128
            while idx < _70977:
                _71237 = mem[s]
                mem[t] = mem[mem[s]]
                mem[t + 32] = mem[_71237 + 32]
                mem[t + 64] = mem[_71237 + 64]
                mem[t + 96] = mem[_71237 + 96]
                mem[t + 128] = mem[_71237 + 128]
                mem[t + 160] = mem[_71237 + 172 len 20]
                mem[t + 192] = mem[_71237 + 192]
                mem[t + 224] = mem[_71237 + 236 len 20]
                mem[t + 256] = bool(mem[_71237 + 256])
                mem[t + 288] = mem[_71237 + 288]
                idx = idx + 1
                s = s + 32
                t = t + 320
                continue 
            mem[_70961 + 32] = stor15[address(arg5)].field_0
            mem[_70961 + 64] = (320 * _70977) + 128
            _71265 = mem[_70913]
            mem[_70961 + (320 * _70977) + 128] = mem[_70913]
            mem[_70961 + (320 * _70977) + 160 len ceil32(_71265)] = mem[_70913 + 32 len ceil32(_71265)]
            if ceil32(_71265) > _71265:
                mem[_70961 + (320 * _70977) + _71265 + 160] = 0
            return memory
              from mem[64]
               len ceil32(_71265) + _70961 + (320 * _70977) + -mem[64] + 160
        _70914 = mem[64]
        mem[64] = mem[64] + 64
        mem[_70914] = 4
        mem[_70914 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
        _70962 = mem[64]
        mem[mem[64]] = 96
        _70978 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
        mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
        idx = 0
        s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
        t = mem[64] + 128
        while idx < _70978:
            _71244 = mem[s]
            mem[t] = mem[mem[s]]
            mem[t + 32] = mem[_71244 + 32]
            mem[t + 64] = mem[_71244 + 64]
            mem[t + 96] = mem[_71244 + 96]
            mem[t + 128] = mem[_71244 + 128]
            mem[t + 160] = mem[_71244 + 172 len 20]
            mem[t + 192] = mem[_71244 + 192]
            mem[t + 224] = mem[_71244 + 236 len 20]
            mem[t + 256] = bool(mem[_71244 + 256])
            mem[t + 288] = mem[_71244 + 288]
            idx = idx + 1
            s = s + 32
            t = t + 320
            continue 
        mem[_70962 + 32] = stor15[address(arg5)].field_0
        mem[_70962 + 64] = (320 * _70978) + 128
        _71266 = mem[_70914]
        mem[_70962 + (320 * _70978) + 128] = mem[_70914]
        mem[_70962 + (320 * _70978) + 160 len ceil32(_71266)] = mem[_70914 + 32 len ceil32(_71266)]
        if ceil32(_71266) > _71266:
            mem[_70962 + (320 * _70978) + _71266 + 160] = 0
        return memory
          from mem[64]
           len ceil32(_71266) + _70962 + (320 * _70978) + -mem[64] + 160
    if arg2 > test266151307():
        revert with 0, 65
    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192] = arg2
    mem[64] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224
    if not arg2:
        idx = 0
        while idx < arg2:
            if stor15[address(arg5)].field_0 - 1 > !idx:
                revert with 0, 17
            if stor15[address(arg5)].field_0 + idx - 1 >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
                revert with 0, 50
            mem[0] = mem[(32 * stor15[address(arg5)].field_0 + idx - 1) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]
            mem[32] = 12
            _66201 = sha3(mem[(32 * stor15[address(arg5)].field_0 + idx - 1) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192], 12)
            _66202 = mem[64]
            mem[64] = mem[64] + 320
            mem[_66202] = stor12[mem[(32 * stor15[address(arg5)].field_0 + idx - 1) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]].field_0
            mem[_66202 + 32] = stor1[_66201]
            mem[_66202 + 64] = stor2[_66201]
            mem[_66202 + 96] = stor3[_66201]
            mem[_66202 + 128] = stor4[_66201]
            mem[_66202 + 160] = stor5[_66201]
            mem[_66202 + 192] = stor6[_66201]
            mem[_66202 + 224] = stor7[_66201].field_0
            mem[_66202 + 256] = bool(stor7[_66201].field_160)
            mem[_66202 + 288] = stor8[_66201]
            if idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]:
                revert with 0, 50
            mem[(32 * idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224] = _66202
            if idx == -1:
                revert with 0, 17
            idx = idx + 1
            continue 
        if stor15[address(arg5)].field_0 - 1 > !arg2:
            revert with 0, 17
        if stor15[address(arg5)].field_0 - 1 > !arg2:
            revert with 0, 17
        if stor15[address(arg5)].field_0 + arg2 - 1 < mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
            _66551 = mem[64]
            mem[64] = mem[64] + 64
            mem[_66551] = 7
            mem[_66551 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
            _66932 = mem[64]
            mem[mem[64]] = 96
            _67052 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
            mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
            idx = 0
            s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
            t = mem[64] + 128
            while idx < _67052:
                _69212 = mem[s]
                mem[t] = mem[mem[s]]
                mem[t + 32] = mem[_69212 + 32]
                mem[t + 64] = mem[_69212 + 64]
                mem[t + 96] = mem[_69212 + 96]
                mem[t + 128] = mem[_69212 + 128]
                mem[t + 160] = mem[_69212 + 172 len 20]
                mem[t + 192] = mem[_69212 + 192]
                mem[t + 224] = mem[_69212 + 236 len 20]
                mem[t + 256] = bool(mem[_69212 + 256])
                mem[t + 288] = mem[_69212 + 288]
                idx = idx + 1
                s = s + 32
                t = t + 320
                continue 
            mem[_66932 + 32] = stor15[address(arg5)].field_0 + arg2 - 1
            mem[_66932 + 64] = (320 * _67052) + 128
            _69349 = mem[_66551]
            mem[_66932 + (320 * _67052) + 128] = mem[_66551]
            mem[_66932 + (320 * _67052) + 160 len ceil32(_69349)] = mem[_66551 + 32 len ceil32(_69349)]
            var63001 = ceil32(_69349)
            if ceil32(_69349) > _69349:
                mem[_66932 + (320 * _67052) + _69349 + 160] = 0
            return memory
              from mem[64]
               len ceil32(_69349) + _66932 + (320 * _67052) + -mem[64] + 160
        _66552 = mem[64]
        mem[64] = mem[64] + 64
        mem[_66552] = 4
        mem[_66552 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
        _66933 = mem[64]
        mem[mem[64]] = 96
        _67053 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
        mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
        idx = 0
        s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
        t = mem[64] + 128
        while idx < _67053:
            _69219 = mem[s]
            mem[t] = mem[mem[s]]
            mem[t + 32] = mem[_69219 + 32]
            mem[t + 64] = mem[_69219 + 64]
            mem[t + 96] = mem[_69219 + 96]
            mem[t + 128] = mem[_69219 + 128]
            mem[t + 160] = mem[_69219 + 172 len 20]
            mem[t + 192] = mem[_69219 + 192]
            mem[t + 224] = mem[_69219 + 236 len 20]
            mem[t + 256] = bool(mem[_69219 + 256])
            mem[t + 288] = mem[_69219 + 288]
            idx = idx + 1
            s = s + 32
            t = t + 320
            continue 
        mem[_66933 + 32] = stor15[address(arg5)].field_0 + arg2 - 1
        mem[_66933 + 64] = (320 * _67053) + 128
        _69350 = mem[_66552]
        mem[_66933 + (320 * _67053) + 128] = mem[_66552]
        mem[_66933 + (320 * _67053) + 160 len ceil32(_69350)] = mem[_66552 + 32 len ceil32(_69350)]
        var63001 = ceil32(_69350)
        if ceil32(_69350) > _69350:
            mem[_66933 + (320 * _67053) + _69350 + 160] = 0
        return memory
          from mem[64]
           len ceil32(_69350) + _66933 + (320 * _67053) + -mem[64] + 160
    mem[64] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 544
    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224] = 0
    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 256] = 0
    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 288] = 0
    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 320] = 0
    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 352] = 0
    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 384] = 0
    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 416] = 0
    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 448] = 0
    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 480] = 0
    mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 512] = 0
    mem[var47001] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224
    s = var47001
    idx = var47002
    while idx - 1:
        mem[64] = mem[64] + 320
        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224] = 0
        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 256] = 0
        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 288] = 0
        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 320] = 0
        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 352] = 0
        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 384] = 0
        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 416] = 0
        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 448] = 0
        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 480] = 0
        mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 512] = 0
        mem[s + 32] = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + (32 * arg2) + 224
        s = s + 32
        idx = idx - 1
        continue 
    idx = 0
    while idx < arg2:
        if stor15[address(arg5)].field_0 - 1 > !idx:
            revert with 0, 17
        if stor15[address(arg5)].field_0 + idx - 1 >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
            revert with 0, 50
        mem[0] = mem[(32 * stor15[address(arg5)].field_0 + idx - 1) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]
        mem[32] = 12
        _70858 = sha3(mem[(32 * stor15[address(arg5)].field_0 + idx - 1) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192], 12)
        _70859 = mem[64]
        mem[64] = mem[64] + 320
        mem[_70859] = stor12[mem[(32 * stor15[address(arg5)].field_0 + idx - 1) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 192]].field_0
        mem[_70859 + 32] = stor1[_70858]
        mem[_70859 + 64] = stor2[_70858]
        mem[_70859 + 96] = stor3[_70858]
        mem[_70859 + 128] = stor4[_70858]
        mem[_70859 + 160] = stor5[_70858]
        mem[_70859 + 192] = stor6[_70858]
        mem[_70859 + 224] = stor7[_70858].field_0
        mem[_70859 + 256] = bool(stor7[_70858].field_160)
        mem[_70859 + 288] = stor8[_70858]
        if idx >= mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]:
            revert with 0, 50
        mem[(32 * idx) + (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224] = _70859
        if idx == -1:
            revert with 0, 17
        idx = idx + 1
        continue 
    if stor15[address(arg5)].field_0 - 1 > !arg2:
        revert with 0, 17
    if stor15[address(arg5)].field_0 - 1 > !arg2:
        revert with 0, 17
    if stor15[address(arg5)].field_0 + arg2 - 1 < mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + 160]:
        _70911 = mem[64]
        mem[64] = mem[64] + 64
        mem[_70911] = 7
        mem[_70911 + 32] = 0x6e6f746f76657200000000000000000000000000000000000000000000000000
        _70959 = mem[64]
        mem[mem[64]] = 96
        _70975 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
        mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
        idx = 0
        s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
        t = mem[64] + 128
        while idx < _70975:
            _71223 = mem[s]
            mem[t] = mem[mem[s]]
            mem[t + 32] = mem[_71223 + 32]
            mem[t + 64] = mem[_71223 + 64]
            mem[t + 96] = mem[_71223 + 96]
            mem[t + 128] = mem[_71223 + 128]
            mem[t + 160] = mem[_71223 + 172 len 20]
            mem[t + 192] = mem[_71223 + 192]
            mem[t + 224] = mem[_71223 + 236 len 20]
            mem[t + 256] = bool(mem[_71223 + 256])
            mem[t + 288] = mem[_71223 + 288]
            idx = idx + 1
            s = s + 32
            t = t + 320
            continue 
        mem[_70959 + 32] = stor15[address(arg5)].field_0 + arg2 - 1
        mem[_70959 + 64] = (320 * _70975) + 128
        _71263 = mem[_70911]
        mem[_70959 + (320 * _70975) + 128] = mem[_70911]
        mem[_70959 + (320 * _70975) + 160 len ceil32(_71263)] = mem[_70911 + 32 len ceil32(_71263)]
        var70001 = ceil32(_71263)
        if ceil32(_71263) > _71263:
            mem[_70959 + (320 * _70975) + _71263 + 160] = 0
        return memory
          from mem[64]
           len ceil32(_71263) + _70959 + (320 * _70975) + -mem[64] + 160
    _70912 = mem[64]
    mem[64] = mem[64] + 64
    mem[_70912] = 4
    mem[_70912 + 32] = 0x6f76657200000000000000000000000000000000000000000000000000000000
    _70960 = mem[64]
    mem[mem[64]] = 96
    _70976 = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
    mem[mem[64] + 96] = mem[(32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 192]
    idx = 0
    s = (32 * stor11.length) + (32 * stor13[address(arg5)].field_0) + (32 * stor15[address(arg5)].field_0) + 224
    t = mem[64] + 128
    while idx < _70976:
        _71230 = mem[s]
        mem[t] = mem[mem[s]]
        mem[t + 32] = mem[_71230 + 32]
        mem[t + 64] = mem[_71230 + 64]
        mem[t + 96] = mem[_71230 + 96]
        mem[t + 128] = mem[_71230 + 128]
        mem[t + 160] = mem[_71230 + 172 len 20]
        mem[t + 192] = mem[_71230 + 192]
        mem[t + 224] = mem[_71230 + 236 len 20]
        mem[t + 256] = bool(mem[_71230 + 256])
        mem[t + 288] = mem[_71230 + 288]
        idx = idx + 1
        s = s + 32
        t = t + 320
        continue 
    mem[_70960 + 32] = stor15[address(arg5)].field_0 + arg2 - 1
    mem[_70960 + 64] = (320 * _70976) + 128
    _71264 = mem[_70912]
    mem[_70960 + (320 * _70976) + 128] = mem[_70912]
    mem[_70960 + (320 * _70976) + 160 len ceil32(_71264)] = mem[_70912 + 32 len ceil32(_71264)]
    var70001 = ceil32(_71264)
    if ceil32(_71264) > _71264:
        mem[_70960 + (320 * _70976) + _71264 + 160] = 0
    return memory
      from mem[64]
       len ceil32(_71264) + _70960 + (320 * _70976) + -mem[64] + 160
}



}
